{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int,int).mjava","commits":[{"id":"59d4661023aa9541b0a759e4d2e11dcf83b923a0","date":1420124226,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int).mjava","sourceNew":"  /** Sole constructor. */\n  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk, int blockSize) throws IOException {\n    assert directory != null;\n    this.segment = si.name;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION),\n                                                    context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeIndexHeader(indexStream, codecNameIdx, VERSION_CURRENT, si.getId(), segmentSuffix);\n      CodecUtil.writeIndexHeader(fieldsStream, codecNameDat, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == fieldsStream.getFilePointer();\n      assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == indexStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream, blockSize);\n      indexStream = null;\n\n      fieldsStream.writeVInt(chunkSize);\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(fieldsStream, indexStream, indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk) throws IOException {\n    assert directory != null;\n    this.segment = si.name;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION),\n                                                    context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeIndexHeader(indexStream, codecNameIdx, VERSION_CURRENT, si.getId(), segmentSuffix);\n      CodecUtil.writeIndexHeader(fieldsStream, codecNameDat, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == fieldsStream.getFilePointer();\n      assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == indexStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(chunkSize);\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(fieldsStream, indexStream, indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd7962f4da329a4e559727022b752c5cefaee5da","date":1421356185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int,int).mjava","sourceNew":"  /** Sole constructor. */\n  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk, int blockSize) throws IOException {\n    assert directory != null;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION),\n                                                    context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeIndexHeader(indexStream, codecNameIdx, VERSION_CURRENT, si.getId(), segmentSuffix);\n      CodecUtil.writeIndexHeader(fieldsStream, codecNameDat, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == fieldsStream.getFilePointer();\n      assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == indexStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream, blockSize);\n      indexStream = null;\n\n      fieldsStream.writeVInt(chunkSize);\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(fieldsStream, indexStream, indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk, int blockSize) throws IOException {\n    assert directory != null;\n    this.segment = si.name;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION),\n                                                    context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeIndexHeader(indexStream, codecNameIdx, VERSION_CURRENT, si.getId(), segmentSuffix);\n      CodecUtil.writeIndexHeader(fieldsStream, codecNameDat, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == fieldsStream.getFilePointer();\n      assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == indexStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream, blockSize);\n      indexStream = null;\n\n      fieldsStream.writeVInt(chunkSize);\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(fieldsStream, indexStream, indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int,int).mjava","sourceNew":"  /** Sole constructor. */\n  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk, int blockSize) throws IOException {\n    assert directory != null;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    this.docBase = 0;\n    this.bufferedDocs = ByteBuffersDataOutput.newResettableInstance();\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION),\n                                                    context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeIndexHeader(indexStream, codecNameIdx, VERSION_CURRENT, si.getId(), segmentSuffix);\n      CodecUtil.writeIndexHeader(fieldsStream, codecNameDat, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == fieldsStream.getFilePointer();\n      assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == indexStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream, blockSize);\n      indexStream = null;\n\n      fieldsStream.writeVInt(chunkSize);\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(fieldsStream, indexStream, indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk, int blockSize) throws IOException {\n    assert directory != null;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION),\n                                                    context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeIndexHeader(indexStream, codecNameIdx, VERSION_CURRENT, si.getId(), segmentSuffix);\n      CodecUtil.writeIndexHeader(fieldsStream, codecNameDat, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == fieldsStream.getFilePointer();\n      assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == indexStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream, blockSize);\n      indexStream = null;\n\n      fieldsStream.writeVInt(chunkSize);\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(fieldsStream, indexStream, indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a4487b07c49a1861c05720e04624826ecbe9fa","date":1580924108,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int,int).mjava","sourceNew":"  /** Sole constructor. */\n  CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk, int blockShift) throws IOException {\n    assert directory != null;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    this.docBase = 0;\n    this.bufferedDocs = ByteBuffersDataOutput.newResettableInstance();\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION), context);\n      CodecUtil.writeIndexHeader(fieldsStream, formatName, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(formatName, segmentSuffix) == fieldsStream.getFilePointer();\n\n      indexWriter = new FieldsIndexWriter(directory, segment, segmentSuffix, INDEX_EXTENSION_PREFIX, INDEX_CODEC_NAME, si.getId(), blockShift, context);\n\n      fieldsStream.writeVInt(chunkSize);\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(fieldsStream, indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk, int blockSize) throws IOException {\n    assert directory != null;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    this.docBase = 0;\n    this.bufferedDocs = ByteBuffersDataOutput.newResettableInstance();\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_INDEX_EXTENSION), \n                                                                     context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION),\n                                                    context);\n\n      final String codecNameIdx = formatName + CODEC_SFX_IDX;\n      final String codecNameDat = formatName + CODEC_SFX_DAT;\n      CodecUtil.writeIndexHeader(indexStream, codecNameIdx, VERSION_CURRENT, si.getId(), segmentSuffix);\n      CodecUtil.writeIndexHeader(fieldsStream, codecNameDat, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == fieldsStream.getFilePointer();\n      assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == indexStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream, blockSize);\n      indexStream = null;\n\n      fieldsStream.writeVInt(chunkSize);\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(fieldsStream, indexStream, indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b78d8dfe50af510bace3600bfc4cfa0b031f776","date":1598430423,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,String,IOContext,String,CompressionMode,int,int,int).mjava","sourceNew":"  /** Sole constructor. */\n  CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk, int blockShift) throws IOException {\n    assert directory != null;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    this.docBase = 0;\n    this.bufferedDocs = ByteBuffersDataOutput.newResettableInstance();\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    try {\n      metaStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, META_EXTENSION), context);\n      CodecUtil.writeIndexHeader(metaStream, INDEX_CODEC_NAME + \"Meta\", VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(INDEX_CODEC_NAME + \"Meta\", segmentSuffix) == metaStream.getFilePointer();\n\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION), context);\n      CodecUtil.writeIndexHeader(fieldsStream, formatName, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(formatName, segmentSuffix) == fieldsStream.getFilePointer();\n\n      indexWriter = new FieldsIndexWriter(directory, segment, segmentSuffix, INDEX_EXTENSION, INDEX_CODEC_NAME, si.getId(), blockShift, context);\n\n      metaStream.writeVInt(chunkSize);\n      metaStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(metaStream, fieldsStream, indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, String segmentSuffix, IOContext context,\n      String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk, int blockShift) throws IOException {\n    assert directory != null;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.maxDocsPerChunk = maxDocsPerChunk;\n    this.docBase = 0;\n    this.bufferedDocs = ByteBuffersDataOutput.newResettableInstance();\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, segmentSuffix, FIELDS_EXTENSION), context);\n      CodecUtil.writeIndexHeader(fieldsStream, formatName, VERSION_CURRENT, si.getId(), segmentSuffix);\n      assert CodecUtil.indexHeaderLength(formatName, segmentSuffix) == fieldsStream.getFilePointer();\n\n      indexWriter = new FieldsIndexWriter(directory, segment, segmentSuffix, INDEX_EXTENSION_PREFIX, INDEX_CODEC_NAME, si.getId(), blockShift, context);\n\n      fieldsStream.writeVInt(chunkSize);\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(fieldsStream, indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2b78d8dfe50af510bace3600bfc4cfa0b031f776":["70a4487b07c49a1861c05720e04624826ecbe9fa"],"70a4487b07c49a1861c05720e04624826ecbe9fa":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["bd7962f4da329a4e559727022b752c5cefaee5da"],"59d4661023aa9541b0a759e4d2e11dcf83b923a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd7962f4da329a4e559727022b752c5cefaee5da":["59d4661023aa9541b0a759e4d2e11dcf83b923a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b78d8dfe50af510bace3600bfc4cfa0b031f776"]},"commit2Childs":{"2b78d8dfe50af510bace3600bfc4cfa0b031f776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"70a4487b07c49a1861c05720e04624826ecbe9fa":["2b78d8dfe50af510bace3600bfc4cfa0b031f776"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["70a4487b07c49a1861c05720e04624826ecbe9fa"],"59d4661023aa9541b0a759e4d2e11dcf83b923a0":["bd7962f4da329a4e559727022b752c5cefaee5da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59d4661023aa9541b0a759e4d2e11dcf83b923a0"],"bd7962f4da329a4e559727022b752c5cefaee5da":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}