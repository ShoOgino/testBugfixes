{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","sourceNew":"    public ShardState(IndexSearcher s) {\n      List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n      ReaderUtil.gatherSubReaders(subReaders, s.getIndexReader());\n      subSearchers = new ShardSearcher[subReaders.size()];\n      final IndexReaderContext ctx = s.getTopReaderContext();\n      if (ctx instanceof AtomicReaderContext) {\n        assert subSearchers.length == 1;\n        subSearchers[0] = new ShardSearcher((AtomicReaderContext) ctx, ctx);\n      } else {\n        final CompositeReaderContext compCTX = (CompositeReaderContext) ctx;\n        for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) {\n          subSearchers[searcherIDX] = new ShardSearcher(compCTX.leaves()[searcherIDX], compCTX);\n        }\n      }\n\n      docStarts = new int[subSearchers.length];\n      int docBase = 0;\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = docBase;\n        docBase += subReaders.get(subIDX).maxDoc();\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","sourceOld":"    public ShardState(IndexSearcher s) {\n      List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n      ReaderUtil.gatherSubReaders(subReaders, s.getIndexReader());\n      subSearchers = new ShardSearcher[subReaders.size()];\n      final IndexReaderContext ctx = s.getTopReaderContext();\n      if (ctx instanceof AtomicReaderContext) {\n        assert subSearchers.length == 1;\n        subSearchers[0] = new ShardSearcher((AtomicReaderContext) ctx, ctx);\n      } else {\n        final CompositeReaderContext compCTX = (CompositeReaderContext) ctx;\n        for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) {\n          subSearchers[searcherIDX] = new ShardSearcher(compCTX.leaves()[searcherIDX], compCTX);\n        }\n      }\n\n      docStarts = new int[subSearchers.length];\n      int docBase = 0;\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = docBase;\n        docBase += subReaders.get(subIDX).maxDoc();\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","sourceNew":"    public ShardState(IndexSearcher s) {\n      final IndexReaderContext ctx = s.getTopReaderContext();\n      final List<AtomicReaderContext> leaves = ctx.leaves();\n      subSearchers = new ShardSearcher[leaves.size()];\n      for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) {\n        subSearchers[searcherIDX] = new ShardSearcher(leaves.get(searcherIDX), ctx);\n      }\n\n      docStarts = new int[subSearchers.length];\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = leaves.get(subIDX).docBase;\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","sourceOld":"    public ShardState(IndexSearcher s) {\n      List<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n      ReaderUtil.gatherSubReaders(subReaders, s.getIndexReader());\n      subSearchers = new ShardSearcher[subReaders.size()];\n      final IndexReaderContext ctx = s.getTopReaderContext();\n      if (ctx instanceof AtomicReaderContext) {\n        assert subSearchers.length == 1;\n        subSearchers[0] = new ShardSearcher((AtomicReaderContext) ctx, ctx);\n      } else {\n        final CompositeReaderContext compCTX = (CompositeReaderContext) ctx;\n        for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) {\n          subSearchers[searcherIDX] = new ShardSearcher(compCTX.leaves()[searcherIDX], compCTX);\n        }\n      }\n\n      docStarts = new int[subSearchers.length];\n      int docBase = 0;\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = docBase;\n        docBase += subReaders.get(subIDX).maxDoc();\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping.ShardState#ShardState(IndexSearcher).mjava","sourceNew":"    public ShardState(IndexSearcher s) {\n      final IndexReaderContext ctx = s.getTopReaderContext();\n      final List<LeafReaderContext> leaves = ctx.leaves();\n      subSearchers = new ShardSearcher[leaves.size()];\n      for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) {\n        subSearchers[searcherIDX] = new ShardSearcher(leaves.get(searcherIDX), ctx);\n      }\n\n      docStarts = new int[subSearchers.length];\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = leaves.get(subIDX).docBase;\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","sourceOld":"    public ShardState(IndexSearcher s) {\n      final IndexReaderContext ctx = s.getTopReaderContext();\n      final List<AtomicReaderContext> leaves = ctx.leaves();\n      subSearchers = new ShardSearcher[leaves.size()];\n      for(int searcherIDX=0;searcherIDX<subSearchers.length;searcherIDX++) {\n        subSearchers[searcherIDX] = new ShardSearcher(leaves.get(searcherIDX), ctx);\n      }\n\n      docStarts = new int[subSearchers.length];\n      for(int subIDX=0;subIDX<docStarts.length;subIDX++) {\n        docStarts[subIDX] = leaves.get(subIDX).docBase;\n        //System.out.println(\"docStarts[\" + subIDX + \"]=\" + docStarts[subIDX]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}