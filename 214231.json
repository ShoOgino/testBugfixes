{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.StopableSearchThread#run().mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.StopableSearchThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableSearchThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      Random random = random();\n      int numSearches = 0;\n      \n      while (true && !stop) {\n        numSearches++;\n        try {\n          //to come to the aid of their country.\n          cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n        } catch (Exception e) {\n          System.err.println(\"QUERY REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          fails.incrementAndGet();\n        }\n        try {\n          Thread.sleep(random.nextInt(4000) + 300);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      \n      System.err.println(\"num searches done:\" + numSearches + \" with \" + fails + \" fails\");\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      Random random = random();\n      int numSearches = 0;\n      \n      while (true && !stop) {\n        numSearches++;\n        try {\n          //to come to the aid of their country.\n          cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n        } catch (Exception e) {\n          System.err.println(\"QUERY REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          fails.incrementAndGet();\n        }\n        try {\n          Thread.sleep(random.nextInt(4000) + 300);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      \n      System.err.println(\"num searches done:\" + numSearches + \" with \" + fails + \" fails\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.StopableSearchThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableSearchThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      Random random = random();\n      int numSearches = 0;\n      \n      while (true && !stop) {\n        numSearches++;\n        try {\n          //to come to the aid of their country.\n          cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n        } catch (Exception e) {\n          System.err.println(\"QUERY REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          fails.incrementAndGet();\n        }\n        try {\n          Thread.sleep(random.nextInt(4000) + 300);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      \n      System.err.println(\"num searches done:\" + numSearches + \" with \" + fails + \" fails\");\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      Random random = random();\n      int numSearches = 0;\n      \n      while (true && !stop) {\n        numSearches++;\n        try {\n          //to come to the aid of their country.\n          cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n        } catch (Exception e) {\n          System.err.println(\"QUERY REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          fails.incrementAndGet();\n        }\n        try {\n          Thread.sleep(random.nextInt(4000) + 300);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      \n      System.err.println(\"num searches done:\" + numSearches + \" with \" + fails + \" fails\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.StopableSearchThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.StopableSearchThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      Random random = random();\n      int numSearches = 0;\n      \n      while (true && !stop) {\n        numSearches++;\n        try {\n          //to come to the aid of their country.\n          cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n        } catch (Exception e) {\n          System.err.println(\"QUERY REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          fails.incrementAndGet();\n        }\n        try {\n          Thread.sleep(random.nextInt(4000) + 300);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      \n      System.err.println(\"num searches done:\" + numSearches + \" with \" + fails + \" fails\");\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      Random random = random();\n      int numSearches = 0;\n      \n      while (true && !stop) {\n        numSearches++;\n        try {\n          //to come to the aid of their country.\n          cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n        } catch (Exception e) {\n          System.err.println(\"QUERY REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          fails.incrementAndGet();\n        }\n        try {\n          Thread.sleep(random.nextInt(4000) + 300);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      \n      System.err.println(\"num searches done:\" + numSearches + \" with \" + fails + \" fails\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02c6a0e240c698414e7728a55f07361be84852d8","date":1392675457,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.StopableSearchThread#run().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.StopableSearchThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      Random random = random();\n      int numSearches = 0;\n      \n      while (true && !stop) {\n        numSearches++;\n        try {\n          //to come to the aid of their country.\n          cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n        } catch (Exception e) {\n          System.err.println(\"QUERY REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          queryFails.incrementAndGet();\n        }\n        try {\n          Thread.sleep(random.nextInt(4000) + 300);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      \n      System.err.println(\"num searches done:\" + numSearches + \" with \" + queryFails + \" fails\");\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      Random random = random();\n      int numSearches = 0;\n      \n      while (true && !stop) {\n        numSearches++;\n        try {\n          //to come to the aid of their country.\n          cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n        } catch (Exception e) {\n          System.err.println(\"QUERY REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          fails.incrementAndGet();\n        }\n        try {\n          Thread.sleep(random.nextInt(4000) + 300);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      \n      System.err.println(\"num searches done:\" + numSearches + \" with \" + fails + \" fails\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.StopableSearchThread#run().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.StopableSearchThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      Random random = random();\n      int numSearches = 0;\n\n      while (true && !stop) {\n        numSearches++;\n        try {\n          //to come to the aid of their country.\n          cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n        } catch (Exception e) {\n          System.err.println(\"QUERY REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          queryFails.incrementAndGet();\n        }\n        try {\n          Thread.sleep(random.nextInt(4000) + 300);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n\n      System.err.println(\"num searches done:\" + numSearches + \" with \" + queryFails + \" fails\");\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      Random random = random();\n      int numSearches = 0;\n      \n      while (true && !stop) {\n        numSearches++;\n        try {\n          //to come to the aid of their country.\n          cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n        } catch (Exception e) {\n          System.err.println(\"QUERY REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          queryFails.incrementAndGet();\n        }\n        try {\n          Thread.sleep(random.nextInt(4000) + 300);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      \n      System.err.println(\"num searches done:\" + numSearches + \" with \" + queryFails + \" fails\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec2eb42268d70ebd763ef125d330c17e3e6bb6b","date":1424161131,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.StopableSearchThread#run().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.StopableSearchThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      Random random = random();\n      int numSearches = 0;\n\n      while (true && !stop) {\n        numSearches++;\n        try {\n          //to come to the aid of their country.\n          cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n        } catch (Exception e) {\n          System.err.println(\"QUERY REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          queryFails.incrementAndGet();\n        }\n        try {\n          Thread.sleep(random.nextInt(4000) + 300);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n\n      log.info(\"num searches done:\" + numSearches + \" with \" + queryFails + \" fails\");\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      Random random = random();\n      int numSearches = 0;\n\n      while (true && !stop) {\n        numSearches++;\n        try {\n          //to come to the aid of their country.\n          cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n        } catch (Exception e) {\n          System.err.println(\"QUERY REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          queryFails.incrementAndGet();\n        }\n        try {\n          Thread.sleep(random.nextInt(4000) + 300);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n\n      System.err.println(\"num searches done:\" + numSearches + \" with \" + queryFails + \" fails\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98287baa2c8d136e801f366a73e27a23285b7b98","date":1427241813,"type":4,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.StopableSearchThread#run().mjava","sourceNew":null,"sourceOld":"    @Override\n    public void run() {\n      Random random = random();\n      int numSearches = 0;\n\n      while (true && !stop) {\n        numSearches++;\n        try {\n          //to come to the aid of their country.\n          cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n        } catch (Exception e) {\n          System.err.println(\"QUERY REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          queryFails.incrementAndGet();\n        }\n        try {\n          Thread.sleep(random.nextInt(4000) + 300);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n\n      log.info(\"num searches done:\" + numSearches + \" with \" + queryFails + \" fails\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.StopableSearchThread#run().mjava","sourceNew":null,"sourceOld":"    @Override\n    public void run() {\n      Random random = random();\n      int numSearches = 0;\n\n      while (true && !stop) {\n        numSearches++;\n        try {\n          //to come to the aid of their country.\n          cloudClient.query(new SolrQuery(QUERIES[random.nextInt(QUERIES.length)]));\n        } catch (Exception e) {\n          System.err.println(\"QUERY REQUEST FAILED:\");\n          e.printStackTrace();\n          if (e instanceof SolrServerException) {\n            System.err.println(\"ROOT CAUSE:\");\n            ((SolrServerException) e).getRootCause().printStackTrace();\n          }\n          queryFails.incrementAndGet();\n        }\n        try {\n          Thread.sleep(random.nextInt(4000) + 300);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      }\n\n      log.info(\"num searches done:\" + numSearches + \" with \" + queryFails + \" fails\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fec2eb42268d70ebd763ef125d330c17e3e6bb6b":["abb23fcc2461782ab204e61213240feb77d355aa"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fec2eb42268d70ebd763ef125d330c17e3e6bb6b","98287baa2c8d136e801f366a73e27a23285b7b98"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"abb23fcc2461782ab204e61213240feb77d355aa":["02c6a0e240c698414e7728a55f07361be84852d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"98287baa2c8d136e801f366a73e27a23285b7b98":["fec2eb42268d70ebd763ef125d330c17e3e6bb6b"],"02c6a0e240c698414e7728a55f07361be84852d8":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98287baa2c8d136e801f366a73e27a23285b7b98"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fec2eb42268d70ebd763ef125d330c17e3e6bb6b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","98287baa2c8d136e801f366a73e27a23285b7b98"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"abb23fcc2461782ab204e61213240feb77d355aa":["fec2eb42268d70ebd763ef125d330c17e3e6bb6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"98287baa2c8d136e801f366a73e27a23285b7b98":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02c6a0e240c698414e7728a55f07361be84852d8":["abb23fcc2461782ab204e61213240feb77d355aa"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","02c6a0e240c698414e7728a55f07361be84852d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}