{"path":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#merge(MergeState).mjava","commits":[{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#merge(MergeState).mjava","pathOld":"/dev/null","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNormsField} for each field,\n   *  filling segments with missing norms for the field with zeros. \n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo field : mergeState.fieldInfos) {\n      if (field.hasNorms()) {\n        List<NumericDocValues> toMerge = new ArrayList<>();\n        for (AtomicReader reader : mergeState.readers) {\n          NumericDocValues norms = reader.getNormValues(field.name);\n          if (norms == null) {\n            norms = DocValues.emptyNumeric();\n          }\n          toMerge.add(norms);\n        }\n        mergeNormsField(field, mergeState, toMerge);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#merge(MergeState).mjava","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNormsField} for each field,\n   *  filling segments with missing norms for the field with zeros. \n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo field : mergeState.fieldInfos) {\n      if (field.hasNorms()) {\n        List<NumericDocValues> toMerge = new ArrayList<>();\n        for (LeafReader reader : mergeState.readers) {\n          NumericDocValues norms = reader.getNormValues(field.name);\n          if (norms == null) {\n            norms = DocValues.emptyNumeric();\n          }\n          toMerge.add(norms);\n        }\n        mergeNormsField(field, mergeState, toMerge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNormsField} for each field,\n   *  filling segments with missing norms for the field with zeros. \n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo field : mergeState.fieldInfos) {\n      if (field.hasNorms()) {\n        List<NumericDocValues> toMerge = new ArrayList<>();\n        for (AtomicReader reader : mergeState.readers) {\n          NumericDocValues norms = reader.getNormValues(field.name);\n          if (norms == null) {\n            norms = DocValues.emptyNumeric();\n          }\n          toMerge.add(norms);\n        }\n        mergeNormsField(field, mergeState, toMerge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2131047ecceac64b54ba70feec3d26bbd7e483d7","date":1411862069,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#merge(MergeState).mjava","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNormsField} for each field,\n   *  filling segments with missing norms for the field with zeros. \n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(NormsProducer normsProducer : mergeState.normsProducers) {\n      if (normsProducer != null) {\n        normsProducer.checkIntegrity();\n      }\n    }\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      if (mergeFieldInfo.hasNorms()) {\n        List<NumericDocValues> toMerge = new ArrayList<>();\n        for (int i=0;i<mergeState.normsProducers.length;i++) {\n          NormsProducer normsProducer = mergeState.normsProducers[i];\n          NumericDocValues norms = null;\n          if (normsProducer != null) {\n            FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n            if (fieldInfo != null && fieldInfo.hasNorms()) {\n              // TODO: use dedicated merge API, so impl can do merge-specific checksumming, and won't cache values in RAM\n              norms = normsProducer.getNorms(fieldInfo);\n            }\n          }\n          if (norms == null) {\n            norms = DocValues.emptyNumeric();\n          }\n          toMerge.add(norms);\n        }\n        mergeNormsField(mergeFieldInfo, mergeState, toMerge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNormsField} for each field,\n   *  filling segments with missing norms for the field with zeros. \n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo field : mergeState.fieldInfos) {\n      if (field.hasNorms()) {\n        List<NumericDocValues> toMerge = new ArrayList<>();\n        for (LeafReader reader : mergeState.readers) {\n          NumericDocValues norms = reader.getNormValues(field.name);\n          if (norms == null) {\n            norms = DocValues.emptyNumeric();\n          }\n          toMerge.add(norms);\n        }\n        mergeNormsField(field, mergeState, toMerge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2970313982bb49a531a8b2b16a5e93872d5248b2","date":1411916508,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#merge(MergeState).mjava","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNormsField} for each field,\n   *  filling segments with missing norms for the field with zeros. \n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(NormsProducer normsProducer : mergeState.normsProducers) {\n      if (normsProducer != null) {\n        normsProducer.checkIntegrity();\n      }\n    }\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      if (mergeFieldInfo.hasNorms()) {\n        List<NumericDocValues> toMerge = new ArrayList<>();\n        for (int i=0;i<mergeState.normsProducers.length;i++) {\n          NormsProducer normsProducer = mergeState.normsProducers[i];\n          NumericDocValues norms = null;\n          if (normsProducer != null) {\n            FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n            if (fieldInfo != null && fieldInfo.hasNorms()) {\n              norms = normsProducer.getNorms(fieldInfo);\n            }\n          }\n          if (norms == null) {\n            norms = DocValues.emptyNumeric();\n          }\n          toMerge.add(norms);\n        }\n        mergeNormsField(mergeFieldInfo, mergeState, toMerge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNormsField} for each field,\n   *  filling segments with missing norms for the field with zeros. \n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(NormsProducer normsProducer : mergeState.normsProducers) {\n      if (normsProducer != null) {\n        normsProducer.checkIntegrity();\n      }\n    }\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      if (mergeFieldInfo.hasNorms()) {\n        List<NumericDocValues> toMerge = new ArrayList<>();\n        for (int i=0;i<mergeState.normsProducers.length;i++) {\n          NormsProducer normsProducer = mergeState.normsProducers[i];\n          NumericDocValues norms = null;\n          if (normsProducer != null) {\n            FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n            if (fieldInfo != null && fieldInfo.hasNorms()) {\n              // TODO: use dedicated merge API, so impl can do merge-specific checksumming, and won't cache values in RAM\n              norms = normsProducer.getNorms(fieldInfo);\n            }\n          }\n          if (norms == null) {\n            norms = DocValues.emptyNumeric();\n          }\n          toMerge.add(norms);\n        }\n        mergeNormsField(mergeFieldInfo, mergeState, toMerge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#merge(MergeState).mjava","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNormsField} for each field,\n   *  filling segments with missing norms for the field with zeros. \n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(NormsProducer normsProducer : mergeState.normsProducers) {\n      if (normsProducer != null) {\n        normsProducer.checkIntegrity();\n      }\n    }\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      if (mergeFieldInfo.hasNorms()) {\n        List<NumericDocValues> toMerge = new ArrayList<>();\n        for (int i=0;i<mergeState.normsProducers.length;i++) {\n          NormsProducer normsProducer = mergeState.normsProducers[i];\n          NumericDocValues norms = null;\n          if (normsProducer != null) {\n            FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n            if (fieldInfo != null && fieldInfo.hasNorms()) {\n              norms = normsProducer.getNorms(fieldInfo);\n            }\n          }\n          if (norms == null) {\n            norms = DocValues.emptyNumeric();\n          }\n          toMerge.add(norms);\n        }\n        mergeNormsField(mergeFieldInfo, mergeState, toMerge);\n      }\n    }\n  }\n\n","sourceOld":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNormsField} for each field,\n   *  filling segments with missing norms for the field with zeros. \n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo field : mergeState.fieldInfos) {\n      if (field.hasNorms()) {\n        List<NumericDocValues> toMerge = new ArrayList<>();\n        for (LeafReader reader : mergeState.readers) {\n          NumericDocValues norms = reader.getNormValues(field.name);\n          if (norms == null) {\n            norms = DocValues.emptyNumeric();\n          }\n          toMerge.add(norms);\n        }\n        mergeNormsField(field, mergeState, toMerge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#merge(MergeState).mjava","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNormsField} for each field,\n   *  filling segments with missing norms for the field with zeros. \n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(NormsProducer normsProducer : mergeState.normsProducers) {\n      if (normsProducer != null) {\n        normsProducer.checkIntegrity();\n      }\n    }\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      if (mergeFieldInfo.hasNorms()) {\n        mergeNormsField(mergeFieldInfo, mergeState);\n      }\n    }\n  }\n\n","sourceOld":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNormsField} for each field,\n   *  filling segments with missing norms for the field with zeros. \n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(NormsProducer normsProducer : mergeState.normsProducers) {\n      if (normsProducer != null) {\n        normsProducer.checkIntegrity();\n      }\n    }\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      if (mergeFieldInfo.hasNorms()) {\n        List<NumericDocValues> toMerge = new ArrayList<>();\n        for (int i=0;i<mergeState.normsProducers.length;i++) {\n          NormsProducer normsProducer = mergeState.normsProducers[i];\n          NumericDocValues norms = null;\n          if (normsProducer != null) {\n            FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n            if (fieldInfo != null && fieldInfo.hasNorms()) {\n              norms = normsProducer.getNorms(fieldInfo);\n            }\n          }\n          if (norms == null) {\n            norms = DocValues.emptyNumeric();\n          }\n          toMerge.add(norms);\n        }\n        mergeNormsField(mergeFieldInfo, mergeState, toMerge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#merge(MergeState).mjava","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNormsField} for each field,\n   *  filling segments with missing norms for the field with zeros. \n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(NormsProducer normsProducer : mergeState.normsProducers) {\n      if (normsProducer != null) {\n        normsProducer.checkIntegrity();\n      }\n    }\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      if (mergeFieldInfo.hasNorms()) {\n        mergeNormsField(mergeFieldInfo, mergeState);\n      }\n    }\n  }\n\n","sourceOld":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNormsField} for each field,\n   *  filling segments with missing norms for the field with zeros. \n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(NormsProducer normsProducer : mergeState.normsProducers) {\n      if (normsProducer != null) {\n        normsProducer.checkIntegrity();\n      }\n    }\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      if (mergeFieldInfo.hasNorms()) {\n        List<NumericDocValues> toMerge = new ArrayList<>();\n        for (int i=0;i<mergeState.normsProducers.length;i++) {\n          NormsProducer normsProducer = mergeState.normsProducers[i];\n          NumericDocValues norms = null;\n          if (normsProducer != null) {\n            FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n            if (fieldInfo != null && fieldInfo.hasNorms()) {\n              norms = normsProducer.getNorms(fieldInfo);\n            }\n          }\n          if (norms == null) {\n            norms = DocValues.emptyNumeric();\n          }\n          toMerge.add(norms);\n        }\n        mergeNormsField(mergeFieldInfo, mergeState, toMerge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/NormsConsumer#merge(MergeState).mjava","sourceNew":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNormsField} for each field,\n   *  filling segments with missing norms for the field with zeros. \n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(NormsProducer normsProducer : mergeState.normsProducers) {\n      if (normsProducer != null) {\n        normsProducer.checkIntegrity();\n      }\n    }\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      if (mergeFieldInfo.hasNorms()) {\n        mergeNormsField(mergeFieldInfo, mergeState);\n      }\n    }\n  }\n\n","sourceOld":"  /** Merges in the fields from the readers in \n   *  <code>mergeState</code>. The default implementation \n   *  calls {@link #mergeNormsField} for each field,\n   *  filling segments with missing norms for the field with zeros. \n   *  Implementations can override this method \n   *  for more sophisticated merging (bulk-byte copying, etc). */\n  public void merge(MergeState mergeState) throws IOException {\n    for(NormsProducer normsProducer : mergeState.normsProducers) {\n      if (normsProducer != null) {\n        normsProducer.checkIntegrity();\n      }\n    }\n    for (FieldInfo mergeFieldInfo : mergeState.mergeFieldInfos) {\n      if (mergeFieldInfo.hasNorms()) {\n        List<NumericDocValues> toMerge = new ArrayList<>();\n        for (int i=0;i<mergeState.normsProducers.length;i++) {\n          NormsProducer normsProducer = mergeState.normsProducers[i];\n          NumericDocValues norms = null;\n          if (normsProducer != null) {\n            FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n            if (fieldInfo != null && fieldInfo.hasNorms()) {\n              norms = normsProducer.getNorms(fieldInfo);\n            }\n          }\n          if (norms == null) {\n            norms = DocValues.emptyNumeric();\n          }\n          toMerge.add(norms);\n        }\n        mergeNormsField(mergeFieldInfo, mergeState, toMerge);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["c9fb5f46e264daf5ba3860defe623a89d202dd87","2970313982bb49a531a8b2b16a5e93872d5248b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9bb9a29a5e71a90295f175df8919802993142c9a","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["9bb9a29a5e71a90295f175df8919802993142c9a"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2970313982bb49a531a8b2b16a5e93872d5248b2":["2131047ecceac64b54ba70feec3d26bbd7e483d7"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9bb9a29a5e71a90295f175df8919802993142c9a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["2970313982bb49a531a8b2b16a5e93872d5248b2"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"2970313982bb49a531a8b2b16a5e93872d5248b2":["9bb9a29a5e71a90295f175df8919802993142c9a"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["9bb9a29a5e71a90295f175df8919802993142c9a","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}