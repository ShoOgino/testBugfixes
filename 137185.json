{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#skipTo(int,Bits).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#skipTo(int,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#skipTo(int,Bits).mjava","sourceNew":"    private final int skipTo(int target, Bits liveDocs) throws IOException {\n      if ((target - skipInterval) >= accum && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new Lucene40SkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          accum = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n      return scanTo(target);\n    }\n\n","sourceOld":"    private final int skipTo(int target, Bits liveDocs) throws IOException {\n      if ((target - skipInterval) >= accum && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new Lucene40SkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          accum = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n      return scanTo(target);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#skipTo(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#skipTo(int,Bits).mjava","sourceNew":"    private final int skipTo(int target) throws IOException {\n      if ((target - skipInterval) >= accum && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new Lucene40SkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          accum = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n      return scanTo(target);\n    }\n\n","sourceOld":"    private final int skipTo(int target, Bits liveDocs) throws IOException {\n      if ((target - skipInterval) >= accum && limit >= skipMinimum) {\n\n        // There are enough docs in the posting to have\n        // skip data, and it isn't too close.\n\n        if (skipper == null) {\n          // This is the first time this enum has ever been used for skipping -- do lazy init\n          skipper = new Lucene40SkipListReader((IndexInput) freqIn.clone(), maxSkipLevels, skipInterval);\n        }\n\n        if (!skipped) {\n\n          // This is the first time this posting has\n          // skipped since reset() was called, so now we\n          // load the skip data for this posting\n\n          skipper.init(freqOffset + skipOffset,\n                       freqOffset, 0,\n                       limit, storePayloads);\n\n          skipped = true;\n        }\n\n        final int newOrd = skipper.skipTo(target); \n\n        if (newOrd > ord) {\n          // Skipper moved\n\n          ord = newOrd;\n          accum = skipper.getDoc();\n          freqIn.seek(skipper.getFreqPointer());\n        }\n      }\n      return scanTo(target);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"31f025ae60076ae95274433f3fe8e6ace2857a87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}