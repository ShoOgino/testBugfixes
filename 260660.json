{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestFacetsConfig#testPathToStringAndBack().mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestFacetsConfig#testPathToStringAndBack().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestFacetsConfig#testPathToStringAndBack().mjava","sourceNew":"  public void testPathToStringAndBack() throws Exception {\n    int iters = atLeast(1000);\n    for(int i=0;i<iters;i++) {\n      int numParts = _TestUtil.nextInt(random(), 1, 6);\n      String[] parts = new String[numParts];\n      for(int j=0;j<numParts;j++) {\n        parts[j] = _TestUtil.randomUnicodeString(random());\n      }\n\n      String s = FacetsConfig.pathToString(parts);\n      String[] parts2 = FacetsConfig.stringToPath(s);\n      assertTrue(Arrays.equals(parts, parts2));\n    }\n  }\n\n","sourceOld":"  public void testPathToStringAndBack() throws Exception {\n    int iters = atLeast(1000);\n    for(int i=0;i<iters;i++) {\n      int numParts = _TestUtil.nextInt(random(), 1, 6);\n      String[] parts = new String[numParts];\n      for(int j=0;j<numParts;j++) {\n        parts[j] = _TestUtil.randomUnicodeString(random());\n      }\n\n      String s = FacetsConfig.pathToString(parts);\n      String[] parts2 = FacetsConfig.stringToPath(s);\n      assertTrue(Arrays.equals(parts, parts2));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe9946d3cd818d329255e4c325597ac3480503e","date":1385580921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestFacetsConfig#testPathToStringAndBack().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestFacetsConfig#testPathToStringAndBack().mjava","sourceNew":"  public void testPathToStringAndBack() throws Exception {\n    int iters = atLeast(1000);\n    for(int i=0;i<iters;i++) {\n      int numParts = _TestUtil.nextInt(random(), 1, 6);\n      String[] parts = new String[numParts];\n      for(int j=0;j<numParts;j++) {\n        String s;\n        while (true) {\n          s = _TestUtil.randomUnicodeString(random());\n          if (s.length() > 0) {\n            break;\n          }\n        }\n        parts[j] = s;\n      }\n\n      String s = FacetsConfig.pathToString(parts);\n      String[] parts2 = FacetsConfig.stringToPath(s);\n      assertTrue(Arrays.equals(parts, parts2));\n    }\n  }\n\n","sourceOld":"  public void testPathToStringAndBack() throws Exception {\n    int iters = atLeast(1000);\n    for(int i=0;i<iters;i++) {\n      int numParts = _TestUtil.nextInt(random(), 1, 6);\n      String[] parts = new String[numParts];\n      for(int j=0;j<numParts;j++) {\n        parts[j] = _TestUtil.randomUnicodeString(random());\n      }\n\n      String s = FacetsConfig.pathToString(parts);\n      String[] parts2 = FacetsConfig.stringToPath(s);\n      assertTrue(Arrays.equals(parts, parts2));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestFacetsConfig#testPathToStringAndBack().mjava","pathOld":"/dev/null","sourceNew":"  public void testPathToStringAndBack() throws Exception {\n    int iters = atLeast(1000);\n    for(int i=0;i<iters;i++) {\n      int numParts = _TestUtil.nextInt(random(), 1, 6);\n      String[] parts = new String[numParts];\n      for(int j=0;j<numParts;j++) {\n        String s;\n        while (true) {\n          s = _TestUtil.randomUnicodeString(random());\n          if (s.length() > 0) {\n            break;\n          }\n        }\n        parts[j] = s;\n      }\n\n      String s = FacetsConfig.pathToString(parts);\n      String[] parts2 = FacetsConfig.stringToPath(s);\n      assertTrue(Arrays.equals(parts, parts2));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestFacetsConfig#testPathToStringAndBack().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestFacetsConfig#testPathToStringAndBack().mjava","sourceNew":"  public void testPathToStringAndBack() throws Exception {\n    int iters = atLeast(1000);\n    for(int i=0;i<iters;i++) {\n      int numParts = TestUtil.nextInt(random(), 1, 6);\n      String[] parts = new String[numParts];\n      for(int j=0;j<numParts;j++) {\n        String s;\n        while (true) {\n          s = TestUtil.randomUnicodeString(random());\n          if (s.length() > 0) {\n            break;\n          }\n        }\n        parts[j] = s;\n      }\n\n      String s = FacetsConfig.pathToString(parts);\n      String[] parts2 = FacetsConfig.stringToPath(s);\n      assertTrue(Arrays.equals(parts, parts2));\n    }\n  }\n\n","sourceOld":"  public void testPathToStringAndBack() throws Exception {\n    int iters = atLeast(1000);\n    for(int i=0;i<iters;i++) {\n      int numParts = _TestUtil.nextInt(random(), 1, 6);\n      String[] parts = new String[numParts];\n      for(int j=0;j<numParts;j++) {\n        String s;\n        while (true) {\n          s = _TestUtil.randomUnicodeString(random());\n          if (s.length() > 0) {\n            break;\n          }\n        }\n        parts[j] = s;\n      }\n\n      String s = FacetsConfig.pathToString(parts);\n      String[] parts2 = FacetsConfig.stringToPath(s);\n      assertTrue(Arrays.equals(parts, parts2));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bbe9946d3cd818d329255e4c325597ac3480503e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"],"bbe9946d3cd818d329255e4c325597ac3480503e":["21d36d0db865f7b84026b447bec653469a6e66df"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","3cc728b07df73b197e6d940d27f9b08b63918f13"],"21d36d0db865f7b84026b447bec653469a6e66df":["bbe9946d3cd818d329255e4c325597ac3480503e"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6613659748fe4411a7dcf85266e55db1f95f7315"],"bbe9946d3cd818d329255e4c325597ac3480503e":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}