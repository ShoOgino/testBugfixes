{"path":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testRange2().mjava","commits":[{"id":"3ee07e8e258de164ee9346427b4307823c0b041d","date":1353263551,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testRange2().mjava","pathOld":"/dev/null","sourceNew":"  public void testRange2() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", -8841491950446638677L));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", 9062230939892376225L));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\");\n    assertEquals(-8841491950446638677L, dv.get(0));\n    assertEquals(9062230939892376225L, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef","date":1358808656,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testRange2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testRange2().mjava","sourceNew":"  public void testRange2() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new LongDocValuesField(\"dv\", -8841491950446638677L));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new LongDocValuesField(\"dv\", 9062230939892376225L));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\");\n    assertEquals(-8841491950446638677L, dv.get(0));\n    assertEquals(9062230939892376225L, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testRange2() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", -8841491950446638677L));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", 9062230939892376225L));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\");\n    assertEquals(-8841491950446638677L, dv.get(0));\n    assertEquals(9062230939892376225L, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testRange2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testRange2().mjava","sourceNew":"  public void testRange2() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", -8841491950446638677L));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 9062230939892376225L));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\");\n    assertEquals(-8841491950446638677L, dv.get(0));\n    assertEquals(9062230939892376225L, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testRange2() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new LongDocValuesField(\"dv\", -8841491950446638677L));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new LongDocValuesField(\"dv\", 9062230939892376225L));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\");\n    assertEquals(-8841491950446638677L, dv.get(0));\n    assertEquals(9062230939892376225L, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ec08217282b5e9df023dcdff55c745ff68b1c7d","date":1359392781,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testBigNumericRange2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testRange2().mjava","sourceNew":"  public void testBigNumericRange2() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setCodec(getCodec());\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", -8841491950446638677L));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 9062230939892376225L));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\");\n    assertEquals(-8841491950446638677L, dv.get(0));\n    assertEquals(9062230939892376225L, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testRange2() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", -8841491950446638677L));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", 9062230939892376225L));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\");\n    assertEquals(-8841491950446638677L, dv.get(0));\n    assertEquals(9062230939892376225L, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef":["3ee07e8e258de164ee9346427b4307823c0b041d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"3ee07e8e258de164ee9346427b4307823c0b041d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","3ee07e8e258de164ee9346427b4307823c0b041d"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"3ee07e8e258de164ee9346427b4307823c0b041d":["ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}