{"path":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#convertTokensToNamedLists(List[Token],AnalysisContext).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#convertTokensToNamedLists(List[Token],AnalysisContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Converts the list of Tokens to a list of NamedLists representing the tokens.\n   *\n   * @param tokens  Tokens to convert\n   * @param context The analysis context\n   *\n   * @return List of NamedLists containing the relevant information taken from the tokens\n   */\n  private List<NamedList> convertTokensToNamedLists(List<Token> tokens, AnalysisContext context) {\n    List<NamedList> tokensNamedLists = new ArrayList<NamedList>();\n\n    Collections.sort(tokens, new Comparator<Token>() {\n      public int compare(Token o1, Token o2) {\n        return o1.endOffset() - o2.endOffset();\n      }\n    });\n\n    int position = 0;\n\n    FieldType fieldType = context.getFieldType();\n\n    for (Token token : tokens) {\n      NamedList<Object> tokenNamedList = new SimpleOrderedMap<Object>();\n\n      String text = fieldType.indexedToReadable(token.term());\n      tokenNamedList.add(\"text\", text);\n      if (!text.equals(token.term())) {\n        tokenNamedList.add(\"raw_text\", token.term());\n      }\n      tokenNamedList.add(\"type\", token.type());\n      tokenNamedList.add(\"start\", token.startOffset());\n      tokenNamedList.add(\"end\", token.endOffset());\n\n      position += token.getPositionIncrement();\n      tokenNamedList.add(\"position\", position);\n\n      if (context.getTermsToMatch().contains(token.term())) {\n        tokenNamedList.add(\"match\", true);\n      }\n\n      if (token.getPayload() != null) {\n        tokenNamedList.add(\"payload\", token.getPayload());\n      }\n\n      tokensNamedLists.add(tokenNamedList);\n    }\n\n    return tokensNamedLists;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#convertTokensToNamedLists(List[Token],AnalysisContext).mjava","sourceNew":null,"sourceOld":"  /**\n   * Converts the list of Tokens to a list of NamedLists representing the tokens.\n   *\n   * @param tokens  Tokens to convert\n   * @param context The analysis context\n   *\n   * @return List of NamedLists containing the relevant information taken from the tokens\n   */\n  private List<NamedList> convertTokensToNamedLists(List<Token> tokens, AnalysisContext context) {\n    List<NamedList> tokensNamedLists = new ArrayList<NamedList>();\n\n    Collections.sort(tokens, new Comparator<Token>() {\n      public int compare(Token o1, Token o2) {\n        return o1.endOffset() - o2.endOffset();\n      }\n    });\n\n    int position = 0;\n\n    FieldType fieldType = context.getFieldType();\n\n    for (Token token : tokens) {\n      NamedList<Object> tokenNamedList = new SimpleOrderedMap<Object>();\n\n      String text = fieldType.indexedToReadable(token.term());\n      tokenNamedList.add(\"text\", text);\n      if (!text.equals(token.term())) {\n        tokenNamedList.add(\"raw_text\", token.term());\n      }\n      tokenNamedList.add(\"type\", token.type());\n      tokenNamedList.add(\"start\", token.startOffset());\n      tokenNamedList.add(\"end\", token.endOffset());\n\n      position += token.getPositionIncrement();\n      tokenNamedList.add(\"position\", position);\n\n      if (context.getTermsToMatch().contains(token.term())) {\n        tokenNamedList.add(\"match\", true);\n      }\n\n      if (token.getPayload() != null) {\n        tokenNamedList.add(\"payload\", token.getPayload());\n      }\n\n      tokensNamedLists.add(tokenNamedList);\n    }\n\n    return tokensNamedLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#convertTokensToNamedLists(List[Token],AnalysisContext).mjava","pathOld":"src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#convertTokensToNamedLists(List[Token],AnalysisContext).mjava","sourceNew":"  /**\n   * Converts the list of Tokens to a list of NamedLists representing the tokens.\n   *\n   * @param tokens  Tokens to convert\n   * @param context The analysis context\n   *\n   * @return List of NamedLists containing the relevant information taken from the tokens\n   */\n  private List<NamedList> convertTokensToNamedLists(List<Token> tokens, AnalysisContext context) {\n    List<NamedList> tokensNamedLists = new ArrayList<NamedList>();\n\n    Collections.sort(tokens, new Comparator<Token>() {\n      public int compare(Token o1, Token o2) {\n        return o1.endOffset() - o2.endOffset();\n      }\n    });\n\n    int position = 0;\n\n    FieldType fieldType = context.getFieldType();\n\n    for (Token token : tokens) {\n      NamedList<Object> tokenNamedList = new SimpleOrderedMap<Object>();\n\n      String text = fieldType.indexedToReadable(token.term());\n      tokenNamedList.add(\"text\", text);\n      if (!text.equals(token.term())) {\n        tokenNamedList.add(\"raw_text\", token.term());\n      }\n      tokenNamedList.add(\"type\", token.type());\n      tokenNamedList.add(\"start\", token.startOffset());\n      tokenNamedList.add(\"end\", token.endOffset());\n\n      position += token.getPositionIncrement();\n      tokenNamedList.add(\"position\", position);\n\n      if (context.getTermsToMatch().contains(token.term())) {\n        tokenNamedList.add(\"match\", true);\n      }\n\n      if (token.getPayload() != null) {\n        tokenNamedList.add(\"payload\", token.getPayload());\n      }\n\n      tokensNamedLists.add(tokenNamedList);\n    }\n\n    return tokensNamedLists;\n  }\n\n","sourceOld":"  /**\n   * Converts the list of Tokens to a list of NamedLists representing the tokens.\n   *\n   * @param tokens  Tokens to convert\n   * @param context The analysis context\n   *\n   * @return List of NamedLists containing the relevant information taken from the tokens\n   */\n  private List<NamedList> convertTokensToNamedLists(List<Token> tokens, AnalysisContext context) {\n    List<NamedList> tokensNamedLists = new ArrayList<NamedList>();\n\n    Collections.sort(tokens, new Comparator<Token>() {\n      public int compare(Token o1, Token o2) {\n        return o1.endOffset() - o2.endOffset();\n      }\n    });\n\n    int position = 0;\n\n    FieldType fieldType = context.getFieldType();\n\n    for (Token token : tokens) {\n      NamedList<Object> tokenNamedList = new SimpleOrderedMap<Object>();\n\n      String text = fieldType.indexedToReadable(token.term());\n      tokenNamedList.add(\"text\", text);\n      if (!text.equals(token.term())) {\n        tokenNamedList.add(\"raw_text\", token.term());\n      }\n      tokenNamedList.add(\"type\", token.type());\n      tokenNamedList.add(\"start\", token.startOffset());\n      tokenNamedList.add(\"end\", token.endOffset());\n\n      position += token.getPositionIncrement();\n      tokenNamedList.add(\"position\", position);\n\n      if (context.getTermsToMatch().contains(token.term())) {\n        tokenNamedList.add(\"match\", true);\n      }\n\n      if (token.getPayload() != null) {\n        tokenNamedList.add(\"payload\", token.getPayload());\n      }\n\n      tokensNamedLists.add(tokenNamedList);\n    }\n\n    return tokensNamedLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#convertTokensToNamedLists(List[Token],AnalysisContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Converts the list of Tokens to a list of NamedLists representing the tokens.\n   *\n   * @param tokens  Tokens to convert\n   * @param context The analysis context\n   *\n   * @return List of NamedLists containing the relevant information taken from the tokens\n   */\n  private List<NamedList> convertTokensToNamedLists(List<Token> tokens, AnalysisContext context) {\n    List<NamedList> tokensNamedLists = new ArrayList<NamedList>();\n\n    Collections.sort(tokens, new Comparator<Token>() {\n      public int compare(Token o1, Token o2) {\n        return o1.endOffset() - o2.endOffset();\n      }\n    });\n\n    int position = 0;\n\n    FieldType fieldType = context.getFieldType();\n\n    for (Token token : tokens) {\n      NamedList<Object> tokenNamedList = new SimpleOrderedMap<Object>();\n\n      String text = fieldType.indexedToReadable(token.term());\n      tokenNamedList.add(\"text\", text);\n      if (!text.equals(token.term())) {\n        tokenNamedList.add(\"raw_text\", token.term());\n      }\n      tokenNamedList.add(\"type\", token.type());\n      tokenNamedList.add(\"start\", token.startOffset());\n      tokenNamedList.add(\"end\", token.endOffset());\n\n      position += token.getPositionIncrement();\n      tokenNamedList.add(\"position\", position);\n\n      if (context.getTermsToMatch().contains(token.term())) {\n        tokenNamedList.add(\"match\", true);\n      }\n\n      if (token.getPayload() != null) {\n        tokenNamedList.add(\"payload\", token.getPayload());\n      }\n\n      tokensNamedLists.add(tokenNamedList);\n    }\n\n    return tokensNamedLists;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#convertTokensToNamedLists(List[Token],AnalysisContext).mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#convertTokensToNamedLists(List[Token],AnalysisContext).mjava","sourceNew":"  /**\n   * Converts the list of Tokens to a list of NamedLists representing the tokens.\n   *\n   * @param tokens  Tokens to convert\n   * @param context The analysis context\n   *\n   * @return List of NamedLists containing the relevant information taken from the tokens\n   */\n  private List<NamedList> convertTokensToNamedLists(List<Token> tokens, AnalysisContext context) {\n    List<NamedList> tokensNamedLists = new ArrayList<NamedList>();\n\n    Collections.sort(tokens, new Comparator<Token>() {\n      public int compare(Token o1, Token o2) {\n        return o1.endOffset() - o2.endOffset();\n      }\n    });\n\n    int position = 0;\n\n    FieldType fieldType = context.getFieldType();\n\n    for (Token token : tokens) {\n      NamedList<Object> tokenNamedList = new SimpleOrderedMap<Object>();\n\n      String text = fieldType.indexedToReadable(token.toString());\n      tokenNamedList.add(\"text\", text);\n      if (!text.equals(token.toString())) {\n        tokenNamedList.add(\"raw_text\", token.toString());\n      }\n      tokenNamedList.add(\"type\", token.type());\n      tokenNamedList.add(\"start\", token.startOffset());\n      tokenNamedList.add(\"end\", token.endOffset());\n\n      position += token.getPositionIncrement();\n      tokenNamedList.add(\"position\", position);\n\n      if (context.getTermsToMatch().contains(token.toString())) {\n        tokenNamedList.add(\"match\", true);\n      }\n\n      if (token.getPayload() != null) {\n        tokenNamedList.add(\"payload\", token.getPayload());\n      }\n\n      tokensNamedLists.add(tokenNamedList);\n    }\n\n    return tokensNamedLists;\n  }\n\n","sourceOld":"  /**\n   * Converts the list of Tokens to a list of NamedLists representing the tokens.\n   *\n   * @param tokens  Tokens to convert\n   * @param context The analysis context\n   *\n   * @return List of NamedLists containing the relevant information taken from the tokens\n   */\n  private List<NamedList> convertTokensToNamedLists(List<Token> tokens, AnalysisContext context) {\n    List<NamedList> tokensNamedLists = new ArrayList<NamedList>();\n\n    Collections.sort(tokens, new Comparator<Token>() {\n      public int compare(Token o1, Token o2) {\n        return o1.endOffset() - o2.endOffset();\n      }\n    });\n\n    int position = 0;\n\n    FieldType fieldType = context.getFieldType();\n\n    for (Token token : tokens) {\n      NamedList<Object> tokenNamedList = new SimpleOrderedMap<Object>();\n\n      String text = fieldType.indexedToReadable(token.term());\n      tokenNamedList.add(\"text\", text);\n      if (!text.equals(token.term())) {\n        tokenNamedList.add(\"raw_text\", token.term());\n      }\n      tokenNamedList.add(\"type\", token.type());\n      tokenNamedList.add(\"start\", token.startOffset());\n      tokenNamedList.add(\"end\", token.endOffset());\n\n      position += token.getPositionIncrement();\n      tokenNamedList.add(\"position\", position);\n\n      if (context.getTermsToMatch().contains(token.term())) {\n        tokenNamedList.add(\"match\", true);\n      }\n\n      if (token.getPayload() != null) {\n        tokenNamedList.add(\"payload\", token.getPayload());\n      }\n\n      tokensNamedLists.add(tokenNamedList);\n    }\n\n    return tokensNamedLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec58fb7921964848d01bea54f8ec4a2ac813eaeb","date":1295476876,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#convertTokensToNamedLists(List[Token],AnalysisContext).mjava","sourceNew":null,"sourceOld":"  /**\n   * Converts the list of Tokens to a list of NamedLists representing the tokens.\n   *\n   * @param tokens  Tokens to convert\n   * @param context The analysis context\n   *\n   * @return List of NamedLists containing the relevant information taken from the tokens\n   */\n  private List<NamedList> convertTokensToNamedLists(List<Token> tokens, AnalysisContext context) {\n    List<NamedList> tokensNamedLists = new ArrayList<NamedList>();\n\n    Collections.sort(tokens, new Comparator<Token>() {\n      public int compare(Token o1, Token o2) {\n        return o1.endOffset() - o2.endOffset();\n      }\n    });\n\n    int position = 0;\n\n    FieldType fieldType = context.getFieldType();\n\n    for (Token token : tokens) {\n      NamedList<Object> tokenNamedList = new SimpleOrderedMap<Object>();\n\n      String text = fieldType.indexedToReadable(token.toString());\n      tokenNamedList.add(\"text\", text);\n      if (!text.equals(token.toString())) {\n        tokenNamedList.add(\"raw_text\", token.toString());\n      }\n      tokenNamedList.add(\"type\", token.type());\n      tokenNamedList.add(\"start\", token.startOffset());\n      tokenNamedList.add(\"end\", token.endOffset());\n\n      position += token.getPositionIncrement();\n      tokenNamedList.add(\"position\", position);\n\n      if (context.getTermsToMatch().contains(token.toString())) {\n        tokenNamedList.add(\"match\", true);\n      }\n\n      if (token.getPayload() != null) {\n        tokenNamedList.add(\"payload\", token.getPayload());\n      }\n\n      tokensNamedLists.add(tokenNamedList);\n    }\n\n    return tokensNamedLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#convertTokensToNamedLists(List[Token],AnalysisContext).mjava","sourceNew":null,"sourceOld":"  /**\n   * Converts the list of Tokens to a list of NamedLists representing the tokens.\n   *\n   * @param tokens  Tokens to convert\n   * @param context The analysis context\n   *\n   * @return List of NamedLists containing the relevant information taken from the tokens\n   */\n  private List<NamedList> convertTokensToNamedLists(List<Token> tokens, AnalysisContext context) {\n    List<NamedList> tokensNamedLists = new ArrayList<NamedList>();\n\n    Collections.sort(tokens, new Comparator<Token>() {\n      public int compare(Token o1, Token o2) {\n        return o1.endOffset() - o2.endOffset();\n      }\n    });\n\n    int position = 0;\n\n    FieldType fieldType = context.getFieldType();\n\n    for (Token token : tokens) {\n      NamedList<Object> tokenNamedList = new SimpleOrderedMap<Object>();\n\n      String text = fieldType.indexedToReadable(token.toString());\n      tokenNamedList.add(\"text\", text);\n      if (!text.equals(token.toString())) {\n        tokenNamedList.add(\"raw_text\", token.toString());\n      }\n      tokenNamedList.add(\"type\", token.type());\n      tokenNamedList.add(\"start\", token.startOffset());\n      tokenNamedList.add(\"end\", token.endOffset());\n\n      position += token.getPositionIncrement();\n      tokenNamedList.add(\"position\", position);\n\n      if (context.getTermsToMatch().contains(token.toString())) {\n        tokenNamedList.add(\"match\", true);\n      }\n\n      if (token.getPayload() != null) {\n        tokenNamedList.add(\"payload\", token.getPayload());\n      }\n\n      tokensNamedLists.add(tokenNamedList);\n    }\n\n    return tokensNamedLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#convertTokensToNamedLists(List[Token],AnalysisContext).mjava","sourceNew":null,"sourceOld":"  /**\n   * Converts the list of Tokens to a list of NamedLists representing the tokens.\n   *\n   * @param tokens  Tokens to convert\n   * @param context The analysis context\n   *\n   * @return List of NamedLists containing the relevant information taken from the tokens\n   */\n  private List<NamedList> convertTokensToNamedLists(List<Token> tokens, AnalysisContext context) {\n    List<NamedList> tokensNamedLists = new ArrayList<NamedList>();\n\n    Collections.sort(tokens, new Comparator<Token>() {\n      public int compare(Token o1, Token o2) {\n        return o1.endOffset() - o2.endOffset();\n      }\n    });\n\n    int position = 0;\n\n    FieldType fieldType = context.getFieldType();\n\n    for (Token token : tokens) {\n      NamedList<Object> tokenNamedList = new SimpleOrderedMap<Object>();\n\n      String text = fieldType.indexedToReadable(token.toString());\n      tokenNamedList.add(\"text\", text);\n      if (!text.equals(token.toString())) {\n        tokenNamedList.add(\"raw_text\", token.toString());\n      }\n      tokenNamedList.add(\"type\", token.type());\n      tokenNamedList.add(\"start\", token.startOffset());\n      tokenNamedList.add(\"end\", token.endOffset());\n\n      position += token.getPositionIncrement();\n      tokenNamedList.add(\"position\", position);\n\n      if (context.getTermsToMatch().contains(token.toString())) {\n        tokenNamedList.add(\"match\", true);\n      }\n\n      if (token.getPayload() != null) {\n        tokenNamedList.add(\"payload\", token.getPayload());\n      }\n\n      tokensNamedLists.add(tokenNamedList);\n    }\n\n    return tokensNamedLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a7347509fad0711ac30cb15a746e9a3830a38ebd","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a7347509fad0711ac30cb15a746e9a3830a38ebd","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["29ef99d61cda9641b6250bf9567329a6e65f901d","ec58fb7921964848d01bea54f8ec4a2ac813eaeb","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}