{"path":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random().nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random.nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    final RTimer timer = new RTimer();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random().nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    System.out.println(\"time=\" + timer.getTime() + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    long start = System.currentTimeMillis();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random().nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\" + (end-start) + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87f0484c38f986062889ed50f3bf3bd462848c26","date":1570108628,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  double[] cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    final RTimer timer = new RTimer();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random().nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    double time = timer.getTime();\n    double hitRatio = (1-(((double)puts.get())/numGets));\n//    System.out.println(\"time=\" + time + \" impl=\" +sc.getClass().getSimpleName()\n//                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n//                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n    return new double[]{time, hitRatio};\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    final RTimer timer = new RTimer();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random().nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    System.out.println(\"time=\" + timer.getTime() + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":"  double[] cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    final RTimer timer = new RTimer();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random().nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    double time = timer.getTime();\n    double hitRatio = (1-(((double)puts.get())/numGets));\n//    System.out.println(\"time=\" + time + \" impl=\" +sc.getClass().getSimpleName()\n//                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n//                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n    return new double[]{time, hitRatio};\n  }\n\n","sourceOld":"  void cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    final RTimer timer = new RTimer();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random().nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    System.out.println(\"time=\" + timer.getTime() + \" impl=\" +sc.getClass().getSimpleName()\n                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#cachePerfTest(SolrCache,int,int,int,int).mjava","sourceNew":null,"sourceOld":"  double[] cachePerfTest(final SolrCache sc, final int nThreads, final int numGets, int cacheSize, final int maxKey) {\n    Map l = new HashMap();\n    l.put(\"size\", \"\"+cacheSize);\n    l.put(\"initialSize\", \"\"+cacheSize);\n\n    Object o = sc.init(l, null, null);\n    sc.setState(SolrCache.State.LIVE);\n\n    fillCache(sc, cacheSize, maxKey);\n\n    final RTimer timer = new RTimer();\n\n    Thread[] threads = new Thread[nThreads];\n    final AtomicInteger puts = new AtomicInteger(0);\n    for (int i=0; i<threads.length; i++) {\n      final int seed=random().nextInt();\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            int ret = useCache(sc, numGets/nThreads, maxKey, seed);\n            puts.addAndGet(ret);\n          }\n        };\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.start();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    for (Thread thread : threads) {\n      try {\n        thread.join();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    double time = timer.getTime();\n    double hitRatio = (1-(((double)puts.get())/numGets));\n//    System.out.println(\"time=\" + time + \" impl=\" +sc.getClass().getSimpleName()\n//                       +\" nThreads= \" + nThreads + \" size=\"+cacheSize+\" maxKey=\"+maxKey+\" gets=\"+numGets\n//                       +\" hitRatio=\"+(1-(((double)puts.get())/numGets)));\n    return new double[]{time, hitRatio};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"4d7d3943904804560937e6239effeebda0f920e4":["87f0484c38f986062889ed50f3bf3bd462848c26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87f0484c38f986062889ed50f3bf3bd462848c26":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"],"b0b597c65628ca9e73913a07e81691f8229bae35":["bcf9886c8ff537aafde14de48ebf744f5673f08b","87f0484c38f986062889ed50f3bf3bd462848c26"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"87f0484c38f986062889ed50f3bf3bd462848c26":["4d7d3943904804560937e6239effeebda0f920e4","b0b597c65628ca9e73913a07e81691f8229bae35"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["87f0484c38f986062889ed50f3bf3bd462848c26","b0b597c65628ca9e73913a07e81691f8229bae35"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}