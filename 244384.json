{"path":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testPrefix().mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testPrefix().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testPrefix().mjava","sourceNew":"  public void testPrefix() throws IOException {\n    IntervalsSource source = Intervals.prefix(\"p\");\n    checkIntervals(source, \"field1\", 5, new int[][]{\n        {},\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10, 27, 27 },\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n        { 7, 7 },\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n        { 0, 0 }\n    });\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 0, 0, 0, 5);\n    assertMatch(mi, 1, 1, 6, 14);\n\n    IntervalsSource noSuch = Intervals.prefix(\"qqq\");\n    checkIntervals(noSuch, \"field1\", 0, new int[][]{});\n\n    IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n      IntervalsSource s = Intervals.prefix(\"p\", 1);\n      for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n        s.intervals(\"field1\", ctx);\n      }\n    });\n    assertEquals(\"Automaton [p*] expanded to too many terms (limit 1)\", e.getMessage());\n  }\n\n","sourceOld":"  public void testPrefix() throws IOException {\n    IntervalsSource source = Intervals.prefix(\"p\");\n    checkIntervals(source, \"field1\", 5, new int[][]{\n        {},\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10, 27, 27 },\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n        { 7, 7 },\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n        { 0, 0 }\n    });\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 0, 0, 0, 5);\n    assertMatch(mi, 1, 1, 6, 14);\n\n    IntervalsSource noSuch = Intervals.prefix(\"qqq\");\n    checkIntervals(noSuch, \"field1\", 0, new int[][]{});\n\n    IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n      IntervalsSource s = Intervals.prefix(\"p\", 1);\n      for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n        s.intervals(\"field1\", ctx);\n      }\n    });\n    assertEquals(\"Automaton [p*] expanded to too many terms (limit 1)\", e.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4dbf8f05456e82753f622c3ca7e5f0b9502aac0","date":1561967576,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testPrefix().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testPrefix().mjava","sourceNew":"  public void testPrefix() throws IOException {\n    IntervalsSource source = Intervals.prefix(new BytesRef(\"p\"));\n    checkIntervals(source, \"field1\", 5, new int[][]{\n        {},\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10, 27, 27 },\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n        { 7, 7 },\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n        { 0, 0 }\n    });\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 0, 0, 0, 5);\n    assertMatch(mi, 1, 1, 6, 14);\n\n    IntervalsSource noSuch = Intervals.prefix(new BytesRef(\"qqq\"));\n    checkIntervals(noSuch, \"field1\", 0, new int[][]{});\n\n    IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n      IntervalsSource s = Intervals.prefix(new BytesRef(\"p\"), 1);\n      for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n        s.intervals(\"field1\", ctx);\n      }\n    });\n    assertEquals(\"Automaton [p*] expanded to too many terms (limit 1)\", e.getMessage());\n  }\n\n","sourceOld":"  public void testPrefix() throws IOException {\n    IntervalsSource source = Intervals.prefix(\"p\");\n    checkIntervals(source, \"field1\", 5, new int[][]{\n        {},\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10, 27, 27 },\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n        { 7, 7 },\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n        { 0, 0 }\n    });\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 0, 0, 0, 5);\n    assertMatch(mi, 1, 1, 6, 14);\n\n    IntervalsSource noSuch = Intervals.prefix(\"qqq\");\n    checkIntervals(noSuch, \"field1\", 0, new int[][]{});\n\n    IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n      IntervalsSource s = Intervals.prefix(\"p\", 1);\n      for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n        s.intervals(\"field1\", ctx);\n      }\n    });\n    assertEquals(\"Automaton [p*] expanded to too many terms (limit 1)\", e.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae02f522d16c113ae5eda62c28a7d70ba8451419","date":1572646125,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testPrefix().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testPrefix().mjava","sourceNew":"  public void testPrefix() throws IOException {\n    for (IntervalsSource source : List.of(Intervals.prefix(new BytesRef(\"p\")),\n        Intervals.multiterm(PrefixQuery.toAutomaton(new BytesRef(\"p\")), \"p*\" ) )) {\n      checkIntervals(source, \"field1\", 5, new int[][]{\n          {},\n          { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10, 27, 27 },\n          { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n          { 7, 7 },\n          { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n          { 0, 0 }\n      });\n      MatchesIterator mi = getMatches(source, 1, \"field1\");\n      assertNotNull(mi);\n      assertMatch(mi, 0, 0, 0, 5);\n      assertMatch(mi, 1, 1, 6, 14);\n    }\n\n    for (IntervalsSource noSuch : List.of(Intervals.prefix(new BytesRef(\"qqq\")),\n        Intervals.multiterm(PrefixQuery.toAutomaton(new BytesRef(\"qqq\")), \"qqq*\" ))) {\n      checkIntervals(noSuch, \"field1\", 0, new int[][]{});\n    }\n\n    for (IntervalsSource source : List.of(Intervals.prefix(new BytesRef(\"p\"), 1), \n        Intervals.multiterm(PrefixQuery.toAutomaton(new BytesRef(\"p\")), 1, \"p*\")) ) {\n      IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n        for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n          source.intervals(\"field1\", ctx);\n        }\n      });\n      assertEquals(\"Automaton [p*] expanded to too many terms (limit 1)\", e.getMessage());\n    }\n  }\n\n","sourceOld":"  public void testPrefix() throws IOException {\n    IntervalsSource source = Intervals.prefix(new BytesRef(\"p\"));\n    checkIntervals(source, \"field1\", 5, new int[][]{\n        {},\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10, 27, 27 },\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n        { 7, 7 },\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n        { 0, 0 }\n    });\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 0, 0, 0, 5);\n    assertMatch(mi, 1, 1, 6, 14);\n\n    IntervalsSource noSuch = Intervals.prefix(new BytesRef(\"qqq\"));\n    checkIntervals(noSuch, \"field1\", 0, new int[][]{});\n\n    IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n      IntervalsSource s = Intervals.prefix(new BytesRef(\"p\"), 1);\n      for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n        s.intervals(\"field1\", ctx);\n      }\n    });\n    assertEquals(\"Automaton [p*] expanded to too many terms (limit 1)\", e.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed67e557f509069144486ee34fd0275a6dcbe991","date":1574418540,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testPrefix().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testPrefix().mjava","sourceNew":"  public void testPrefix() throws IOException {\n    for (IntervalsSource source : List.of(Intervals.prefix(new BytesRef(\"p\")),\n        Intervals.multiterm(PrefixQuery.toAutomaton(new BytesRef(\"p\")), \"p*\" ) )) {\n      checkIntervals(source, \"field1\", 5, new int[][]{\n          {},\n          { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10, 27, 27 },\n          { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n          { 7, 7 },\n          { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n          { 0, 0 }\n      });\n      MatchesIterator mi = getMatches(source, 1, \"field1\");\n      assertNotNull(mi);\n      assertMatch(mi, 0, 0, 0, 5);\n      assertMatch(mi, 1, 1, 6, 14);\n    }\n\n    for (IntervalsSource noSuch : List.of(Intervals.prefix(new BytesRef(\"qqq\")),\n        Intervals.multiterm(PrefixQuery.toAutomaton(new BytesRef(\"qqq\")), \"qqq*\" ))) {\n      checkIntervals(noSuch, \"field1\", 0, new int[][]{});\n    }\n\n    for (IntervalsSource source : List.of(Intervals.prefix(new BytesRef(\"p\"), 1), \n        Intervals.multiterm(PrefixQuery.toAutomaton(new BytesRef(\"p\")), 1, \"p*\")) ) {\n      IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n        for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n          source.intervals(\"field1\", ctx);\n        }\n      });\n      assertEquals(\"Automaton [p*] expanded to too many terms (limit 1)\", e.getMessage());\n    }\n\n    checkVisits(Intervals.prefix(new BytesRef(\"p\")), 1);\n  }\n\n","sourceOld":"  public void testPrefix() throws IOException {\n    for (IntervalsSource source : List.of(Intervals.prefix(new BytesRef(\"p\")),\n        Intervals.multiterm(PrefixQuery.toAutomaton(new BytesRef(\"p\")), \"p*\" ) )) {\n      checkIntervals(source, \"field1\", 5, new int[][]{\n          {},\n          { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10, 27, 27 },\n          { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n          { 7, 7 },\n          { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n          { 0, 0 }\n      });\n      MatchesIterator mi = getMatches(source, 1, \"field1\");\n      assertNotNull(mi);\n      assertMatch(mi, 0, 0, 0, 5);\n      assertMatch(mi, 1, 1, 6, 14);\n    }\n\n    for (IntervalsSource noSuch : List.of(Intervals.prefix(new BytesRef(\"qqq\")),\n        Intervals.multiterm(PrefixQuery.toAutomaton(new BytesRef(\"qqq\")), \"qqq*\" ))) {\n      checkIntervals(noSuch, \"field1\", 0, new int[][]{});\n    }\n\n    for (IntervalsSource source : List.of(Intervals.prefix(new BytesRef(\"p\"), 1), \n        Intervals.multiterm(PrefixQuery.toAutomaton(new BytesRef(\"p\")), 1, \"p*\")) ) {\n      IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n        for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n          source.intervals(\"field1\", ctx);\n        }\n      });\n      assertEquals(\"Automaton [p*] expanded to too many terms (limit 1)\", e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa011839030cb3186a8d21617499865cfdcdfe3","date":1582542528,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testPrefix().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testPrefix().mjava","sourceNew":"  public void testPrefix() throws IOException {\n    IntervalsSource source = Intervals.prefix(new BytesRef(\"p\"));\n    checkIntervals(source, \"field1\", 5, new int[][]{\n        {},\n        {0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10, 27, 27},\n        {0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10},\n        {7, 7},\n        {0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10},\n        {0, 0}\n    });\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 0, 0, 0, 5);\n    assertMatch(mi, 1, 1, 6, 14);\n\n    IntervalsSource noSuch = Intervals.prefix(new BytesRef(\"qqq\"));\n    checkIntervals(noSuch, \"field1\", 0, new int[][]{});\n\n    IntervalsSource s = Intervals.prefix(new BytesRef(\"p\"), 1);\n      IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n        for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n          s.intervals(\"field1\", ctx);\n        }\n      });\n      assertEquals(\"Automaton [p*] expanded to too many terms (limit 1)\", e.getMessage());\n\n    checkVisits(Intervals.prefix(new BytesRef(\"p\")), 1);\n  }\n\n","sourceOld":"  public void testPrefix() throws IOException {\n    for (IntervalsSource source : List.of(Intervals.prefix(new BytesRef(\"p\")),\n        Intervals.multiterm(PrefixQuery.toAutomaton(new BytesRef(\"p\")), \"p*\" ) )) {\n      checkIntervals(source, \"field1\", 5, new int[][]{\n          {},\n          { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10, 27, 27 },\n          { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n          { 7, 7 },\n          { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7, 10, 10 },\n          { 0, 0 }\n      });\n      MatchesIterator mi = getMatches(source, 1, \"field1\");\n      assertNotNull(mi);\n      assertMatch(mi, 0, 0, 0, 5);\n      assertMatch(mi, 1, 1, 6, 14);\n    }\n\n    for (IntervalsSource noSuch : List.of(Intervals.prefix(new BytesRef(\"qqq\")),\n        Intervals.multiterm(PrefixQuery.toAutomaton(new BytesRef(\"qqq\")), \"qqq*\" ))) {\n      checkIntervals(noSuch, \"field1\", 0, new int[][]{});\n    }\n\n    for (IntervalsSource source : List.of(Intervals.prefix(new BytesRef(\"p\"), 1), \n        Intervals.multiterm(PrefixQuery.toAutomaton(new BytesRef(\"p\")), 1, \"p*\")) ) {\n      IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n        for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n          source.intervals(\"field1\", ctx);\n        }\n      });\n      assertEquals(\"Automaton [p*] expanded to too many terms (limit 1)\", e.getMessage());\n    }\n\n    checkVisits(Intervals.prefix(new BytesRef(\"p\")), 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4dbf8f05456e82753f622c3ca7e5f0b9502aac0":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"9fa011839030cb3186a8d21617499865cfdcdfe3":["ed67e557f509069144486ee34fd0275a6dcbe991"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ed67e557f509069144486ee34fd0275a6dcbe991":["ae02f522d16c113ae5eda62c28a7d70ba8451419"],"ae02f522d16c113ae5eda62c28a7d70ba8451419":["f4dbf8f05456e82753f622c3ca7e5f0b9502aac0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fa011839030cb3186a8d21617499865cfdcdfe3"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["f4dbf8f05456e82753f622c3ca7e5f0b9502aac0"],"f4dbf8f05456e82753f622c3ca7e5f0b9502aac0":["ae02f522d16c113ae5eda62c28a7d70ba8451419"],"9fa011839030cb3186a8d21617499865cfdcdfe3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"ed67e557f509069144486ee34fd0275a6dcbe991":["9fa011839030cb3186a8d21617499865cfdcdfe3"],"ae02f522d16c113ae5eda62c28a7d70ba8451419":["ed67e557f509069144486ee34fd0275a6dcbe991"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}