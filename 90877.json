{"path":"src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","commits":[{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds a custom AttributeImpl instance with one or more Attribute interfaces. */\n  public void addAttributeImpl(final AttributeImpl att) {\n    final Class clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    LinkedList foundInterfaces;\n    synchronized(knownImplClasses) {\n      foundInterfaces = (LinkedList) knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        knownImplClasses.put(clazz, foundInterfaces=new LinkedList());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class actClazz = clazz;\n        do {\n          Class[] interfaces = actClazz.getInterfaces();\n          for (int i = 0; i < interfaces.length; i++) {\n            final Class curInterface = interfaces[i];\n            if (Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(curInterface);\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n    }\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (Iterator it = foundInterfaces.iterator(); it.hasNext(); ) {\n      final Class curInterface = (Class) it.next();\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e9bb5eabc9d075f6867b575e11ed8ac0b1d7ff4","date":1250856706,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","pathOld":"src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","sourceNew":"  /** Adds a custom AttributeImpl instance with one or more Attribute interfaces. */\n  public void addAttributeImpl(final AttributeImpl att) {\n    final Class clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    LinkedList foundInterfaces;\n    synchronized(knownImplClasses) {\n      foundInterfaces = (LinkedList) knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        knownImplClasses.put(clazz, foundInterfaces=new LinkedList());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class actClazz = clazz;\n        do {\n          Class[] interfaces = actClazz.getInterfaces();\n          for (int i = 0; i < interfaces.length; i++) {\n            final Class curInterface = interfaces[i];\n            if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(curInterface);\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n    }\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (Iterator it = foundInterfaces.iterator(); it.hasNext(); ) {\n      final Class curInterface = (Class) it.next();\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","sourceOld":"  /** Adds a custom AttributeImpl instance with one or more Attribute interfaces. */\n  public void addAttributeImpl(final AttributeImpl att) {\n    final Class clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    LinkedList foundInterfaces;\n    synchronized(knownImplClasses) {\n      foundInterfaces = (LinkedList) knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        knownImplClasses.put(clazz, foundInterfaces=new LinkedList());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class actClazz = clazz;\n        do {\n          Class[] interfaces = actClazz.getInterfaces();\n          for (int i = 0; i < interfaces.length; i++) {\n            final Class curInterface = interfaces[i];\n            if (Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(curInterface);\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n    }\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (Iterator it = foundInterfaces.iterator(); it.hasNext(); ) {\n      final Class curInterface = (Class) it.next();\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","pathOld":"src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","sourceNew":"  /** Adds a custom AttributeImpl instance with one or more Attribute interfaces. */\n  public void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    LinkedList<Class<? extends Attribute>> foundInterfaces;\n    synchronized(knownImplClasses) {\n      foundInterfaces = knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        knownImplClasses.put(clazz, foundInterfaces = new LinkedList<Class<? extends Attribute>>());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class<?> actClazz = clazz;\n        do {\n          for (Class<?> curInterface : actClazz.getInterfaces()) {\n            if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(curInterface.asSubclass(Attribute.class));\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n    }\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (Class<? extends Attribute> curInterface : foundInterfaces) {\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","sourceOld":"  /** Adds a custom AttributeImpl instance with one or more Attribute interfaces. */\n  public void addAttributeImpl(final AttributeImpl att) {\n    final Class clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    LinkedList foundInterfaces;\n    synchronized(knownImplClasses) {\n      foundInterfaces = (LinkedList) knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        knownImplClasses.put(clazz, foundInterfaces=new LinkedList());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class actClazz = clazz;\n        do {\n          Class[] interfaces = actClazz.getInterfaces();\n          for (int i = 0; i < interfaces.length; i++) {\n            final Class curInterface = interfaces[i];\n            if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(curInterface);\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n    }\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (Iterator it = foundInterfaces.iterator(); it.hasNext(); ) {\n      final Class curInterface = (Class) it.next();\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f0c18dee1b613b4134ef6cfe3d982d79fd55266f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4819d0d39bf17025f344afc085c1356e85075d76","date":1254404986,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","pathOld":"src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","sourceNew":"  /** <b>Expert:</b> Adds a custom AttributeImpl instance with one or more Attribute interfaces.\n   * <p><font color=\"red\"><b>Please note:</b> It is not guaranteed, that <code>att</code> is added to\n   * the <code>AttributeSource</code>, because the provided attributes may already exist.\n   * You should always retrieve the wanted attributes using {@link #getAttribute} after adding\n   * with this method and cast to your class.\n   * The recommended way to use custom implementations is using an {@link AttributeFactory}.\n   * </font></p>\n   */\n  public void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    LinkedList<Class<? extends Attribute>> foundInterfaces;\n    synchronized(knownImplClasses) {\n      foundInterfaces = knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        knownImplClasses.put(clazz, foundInterfaces = new LinkedList<Class<? extends Attribute>>());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class<?> actClazz = clazz;\n        do {\n          for (Class<?> curInterface : actClazz.getInterfaces()) {\n            if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(curInterface.asSubclass(Attribute.class));\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n    }\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (Class<? extends Attribute> curInterface : foundInterfaces) {\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","sourceOld":"  /** Adds a custom AttributeImpl instance with one or more Attribute interfaces. */\n  public void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    LinkedList<Class<? extends Attribute>> foundInterfaces;\n    synchronized(knownImplClasses) {\n      foundInterfaces = knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        knownImplClasses.put(clazz, foundInterfaces = new LinkedList<Class<? extends Attribute>>());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class<?> actClazz = clazz;\n        do {\n          for (Class<?> curInterface : actClazz.getInterfaces()) {\n            if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(curInterface.asSubclass(Attribute.class));\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n    }\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (Class<? extends Attribute> curInterface : foundInterfaces) {\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0c18dee1b613b4134ef6cfe3d982d79fd55266f","date":1265973635,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","pathOld":"src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","sourceNew":"  /** <b>Expert:</b> Adds a custom AttributeImpl instance with one or more Attribute interfaces.\n   * <p><font color=\"red\"><b>Please note:</b> It is not guaranteed, that <code>att</code> is added to\n   * the <code>AttributeSource</code>, because the provided attributes may already exist.\n   * You should always retrieve the wanted attributes using {@link #getAttribute} after adding\n   * with this method and cast to your class.\n   * The recommended way to use custom implementations is using an {@link AttributeFactory}.\n   * </font></p>\n   */\n  public void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces;\n    synchronized(knownImplClasses) {\n      foundInterfaces = knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        // we have a strong reference to the class instance holding all interfaces in the list (parameter \"att\"),\n        // so all WeakReferences are never evicted by GC\n        knownImplClasses.put(clazz, foundInterfaces = new LinkedList<WeakReference<Class<? extends Attribute>>>());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class<?> actClazz = clazz;\n        do {\n          for (Class<?> curInterface : actClazz.getInterfaces()) {\n            if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(new WeakReference<Class<? extends Attribute>>(curInterface.asSubclass(Attribute.class)));\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n    }\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (WeakReference<Class<? extends Attribute>> curInterfaceRef : foundInterfaces) {\n      final Class<? extends Attribute> curInterface = curInterfaceRef.get();\n      assert (curInterface != null) :\n        \"We have a strong reference on the class holding the interfaces, so they should never get evicted\";\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","sourceOld":"  /** <b>Expert:</b> Adds a custom AttributeImpl instance with one or more Attribute interfaces.\n   * <p><font color=\"red\"><b>Please note:</b> It is not guaranteed, that <code>att</code> is added to\n   * the <code>AttributeSource</code>, because the provided attributes may already exist.\n   * You should always retrieve the wanted attributes using {@link #getAttribute} after adding\n   * with this method and cast to your class.\n   * The recommended way to use custom implementations is using an {@link AttributeFactory}.\n   * </font></p>\n   */\n  public void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    LinkedList<Class<? extends Attribute>> foundInterfaces;\n    synchronized(knownImplClasses) {\n      foundInterfaces = knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        knownImplClasses.put(clazz, foundInterfaces = new LinkedList<Class<? extends Attribute>>());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class<?> actClazz = clazz;\n        do {\n          for (Class<?> curInterface : actClazz.getInterfaces()) {\n            if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(curInterface.asSubclass(Attribute.class));\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n    }\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (Class<? extends Attribute> curInterface : foundInterfaces) {\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","bugFix":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","pathOld":"src/java/org/apache/lucene/util/AttributeSource#addAttributeImpl(AttributeImpl).mjava","sourceNew":"  /** <b>Expert:</b> Adds a custom AttributeImpl instance with one or more Attribute interfaces.\n   * <p><font color=\"red\"><b>Please note:</b> It is not guaranteed, that <code>att</code> is added to\n   * the <code>AttributeSource</code>, because the provided attributes may already exist.\n   * You should always retrieve the wanted attributes using {@link #getAttribute} after adding\n   * with this method and cast to your class.\n   * The recommended way to use custom implementations is using an {@link AttributeFactory}.\n   * </font></p>\n   */\n  public void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces;\n    synchronized(knownImplClasses) {\n      foundInterfaces = knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        // we have a strong reference to the class instance holding all interfaces in the list (parameter \"att\"),\n        // so all WeakReferences are never evicted by GC\n        knownImplClasses.put(clazz, foundInterfaces = new LinkedList<WeakReference<Class<? extends Attribute>>>());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class<?> actClazz = clazz;\n        do {\n          for (Class<?> curInterface : actClazz.getInterfaces()) {\n            if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(new WeakReference<Class<? extends Attribute>>(curInterface.asSubclass(Attribute.class)));\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n    }\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (WeakReference<Class<? extends Attribute>> curInterfaceRef : foundInterfaces) {\n      final Class<? extends Attribute> curInterface = curInterfaceRef.get();\n      assert (curInterface != null) :\n        \"We have a strong reference on the class holding the interfaces, so they should never get evicted\";\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","sourceOld":"  /** <b>Expert:</b> Adds a custom AttributeImpl instance with one or more Attribute interfaces.\n   * <p><font color=\"red\"><b>Please note:</b> It is not guaranteed, that <code>att</code> is added to\n   * the <code>AttributeSource</code>, because the provided attributes may already exist.\n   * You should always retrieve the wanted attributes using {@link #getAttribute} after adding\n   * with this method and cast to your class.\n   * The recommended way to use custom implementations is using an {@link AttributeFactory}.\n   * </font></p>\n   */\n  public void addAttributeImpl(final AttributeImpl att) {\n    final Class<? extends AttributeImpl> clazz = att.getClass();\n    if (attributeImpls.containsKey(clazz)) return;\n    LinkedList<WeakReference<Class<? extends Attribute>>> foundInterfaces;\n    synchronized(knownImplClasses) {\n      foundInterfaces = knownImplClasses.get(clazz);\n      if (foundInterfaces == null) {\n        // we have a strong reference to the class instance holding all interfaces in the list (parameter \"att\"),\n        // so all WeakReferences are never evicted by GC\n        knownImplClasses.put(clazz, foundInterfaces = new LinkedList<WeakReference<Class<? extends Attribute>>>());\n        // find all interfaces that this attribute instance implements\n        // and that extend the Attribute interface\n        Class<?> actClazz = clazz;\n        do {\n          for (Class<?> curInterface : actClazz.getInterfaces()) {\n            if (curInterface != Attribute.class && Attribute.class.isAssignableFrom(curInterface)) {\n              foundInterfaces.add(new WeakReference<Class<? extends Attribute>>(curInterface.asSubclass(Attribute.class)));\n            }\n          }\n          actClazz = actClazz.getSuperclass();\n        } while (actClazz != null);\n      }\n    }\n    \n    // add all interfaces of this AttributeImpl to the maps\n    for (WeakReference<Class<? extends Attribute>> curInterfaceRef : foundInterfaces) {\n      final Class<? extends Attribute> curInterface = curInterfaceRef.get();\n      assert (curInterface != null) :\n        \"We have a strong reference on the class holding the interfaces, so they should never get evicted\";\n      // Attribute is a superclass of this interface\n      if (!attributes.containsKey(curInterface)) {\n        // invalidate state to force recomputation in captureState()\n        this.currentState = null;\n        attributes.put(curInterface, att);\n        attributeImpls.put(clazz, att);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4819d0d39bf17025f344afc085c1356e85075d76":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"8e9bb5eabc9d075f6867b575e11ed8ac0b1d7ff4":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["8e9bb5eabc9d075f6867b575e11ed8ac0b1d7ff4"],"f0c18dee1b613b4134ef6cfe3d982d79fd55266f":["4819d0d39bf17025f344afc085c1356e85075d76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f0c18dee1b613b4134ef6cfe3d982d79fd55266f"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4819d0d39bf17025f344afc085c1356e85075d76":["f0c18dee1b613b4134ef6cfe3d982d79fd55266f"],"8e9bb5eabc9d075f6867b575e11ed8ac0b1d7ff4":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["4819d0d39bf17025f344afc085c1356e85075d76"],"f0c18dee1b613b4134ef6cfe3d982d79fd55266f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["8e9bb5eabc9d075f6867b575e11ed8ac0b1d7ff4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}