{"path":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#writeEntryTable(Collection[FileEntry],IndexOutput).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#writeEntryTable(Collection[FileEntry],IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileWriter#writeEntryTable(Collection[FileEntry],IndexOutput).mjava","sourceNew":"  protected void writeEntryTable(Collection<FileEntry> entries,\n      IndexOutput entryOut) throws IOException {\n    entryOut.writeInt(ENTRY_FORMAT_CURRENT);\n    entryOut.writeVInt(entries.size());\n    for (FileEntry fe : entries) {\n      entryOut.writeString(IndexFileNames.stripSegmentName(fe.file));\n      entryOut.writeLong(fe.offset);\n      entryOut.writeLong(fe.length);\n    }\n  }\n\n","sourceOld":"  protected void writeEntryTable(Collection<FileEntry> entries,\n      IndexOutput entryOut) throws IOException {\n    entryOut.writeInt(ENTRY_FORMAT_CURRENT);\n    entryOut.writeVInt(entries.size());\n    for (FileEntry fe : entries) {\n      entryOut.writeString(IndexFileNames.stripSegmentName(fe.file));\n      entryOut.writeLong(fe.offset);\n      entryOut.writeLong(fe.length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c01d39462806d7dce1e381b201c104783ab056","date":1339453993,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#writeEntryTable(Collection[FileEntry],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#writeEntryTable(Collection[FileEntry],IndexOutput).mjava","sourceNew":"  protected void writeEntryTable(Collection<FileEntry> entries,\n      IndexOutput entryOut) throws IOException {\n    CodecUtil.writeHeader(entryOut, ENTRY_CODEC, VERSION_CURRENT);\n    entryOut.writeVInt(entries.size());\n    for (FileEntry fe : entries) {\n      entryOut.writeString(IndexFileNames.stripSegmentName(fe.file));\n      entryOut.writeLong(fe.offset);\n      entryOut.writeLong(fe.length);\n    }\n  }\n\n","sourceOld":"  protected void writeEntryTable(Collection<FileEntry> entries,\n      IndexOutput entryOut) throws IOException {\n    entryOut.writeInt(ENTRY_FORMAT_CURRENT);\n    entryOut.writeVInt(entries.size());\n    for (FileEntry fe : entries) {\n      entryOut.writeString(IndexFileNames.stripSegmentName(fe.file));\n      entryOut.writeLong(fe.offset);\n      entryOut.writeLong(fe.length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#writeEntryTable(Collection[FileEntry],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#writeEntryTable(Collection[FileEntry],IndexOutput).mjava","sourceNew":"  protected void writeEntryTable(Collection<FileEntry> entries,\n      IndexOutput entryOut) throws IOException {\n    CodecUtil.writeHeader(entryOut, ENTRY_CODEC, VERSION_CURRENT);\n    entryOut.writeVInt(entries.size());\n    for (FileEntry fe : entries) {\n      entryOut.writeString(IndexFileNames.stripSegmentName(fe.file));\n      entryOut.writeLong(fe.offset);\n      entryOut.writeLong(fe.length);\n    }\n    CodecUtil.writeFooter(entryOut);\n  }\n\n","sourceOld":"  protected void writeEntryTable(Collection<FileEntry> entries,\n      IndexOutput entryOut) throws IOException {\n    CodecUtil.writeHeader(entryOut, ENTRY_CODEC, VERSION_CURRENT);\n    entryOut.writeVInt(entries.size());\n    for (FileEntry fe : entries) {\n      entryOut.writeString(IndexFileNames.stripSegmentName(fe.file));\n      entryOut.writeLong(fe.offset);\n      entryOut.writeLong(fe.length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#writeEntryTable(Collection[FileEntry],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#writeEntryTable(Collection[FileEntry],IndexOutput).mjava","sourceNew":"  protected void writeEntryTable(Collection<FileEntry> entries,\n      IndexOutput entryOut) throws IOException {\n    CodecUtil.writeHeader(entryOut, ENTRY_CODEC, VERSION_CURRENT);\n    entryOut.writeVInt(entries.size());\n    for (FileEntry fe : entries) {\n      entryOut.writeString(IndexFileNames.stripSegmentName(fe.file));\n      entryOut.writeLong(fe.offset);\n      entryOut.writeLong(fe.length);\n    }\n    CodecUtil.writeFooter(entryOut);\n  }\n\n","sourceOld":"  protected void writeEntryTable(Collection<FileEntry> entries,\n      IndexOutput entryOut) throws IOException {\n    CodecUtil.writeHeader(entryOut, ENTRY_CODEC, VERSION_CURRENT);\n    entryOut.writeVInt(entries.size());\n    for (FileEntry fe : entries) {\n      entryOut.writeString(IndexFileNames.stripSegmentName(fe.file));\n      entryOut.writeLong(fe.offset);\n      entryOut.writeLong(fe.length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#writeEntryTable(Collection[FileEntry],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#writeEntryTable(Collection[FileEntry],IndexOutput).mjava","sourceNew":"  protected void writeEntryTable(Collection<FileEntry> entries,\n      IndexOutput entryOut) throws IOException {\n    CodecUtil.writeSegmentHeader(entryOut, ENTRY_CODEC, VERSION_CURRENT, segmentID, \"\");\n    entryOut.writeVInt(entries.size());\n    for (FileEntry fe : entries) {\n      entryOut.writeString(IndexFileNames.stripSegmentName(fe.file));\n      entryOut.writeLong(fe.offset);\n      entryOut.writeLong(fe.length);\n    }\n    CodecUtil.writeFooter(entryOut);\n  }\n\n","sourceOld":"  protected void writeEntryTable(Collection<FileEntry> entries,\n      IndexOutput entryOut) throws IOException {\n    CodecUtil.writeHeader(entryOut, ENTRY_CODEC, VERSION_CURRENT);\n    entryOut.writeVInt(entries.size());\n    for (FileEntry fe : entries) {\n      entryOut.writeString(IndexFileNames.stripSegmentName(fe.file));\n      entryOut.writeLong(fe.offset);\n      entryOut.writeLong(fe.length);\n    }\n    CodecUtil.writeFooter(entryOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/CompoundFileWriter#writeEntryTable(Collection[FileEntry],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#writeEntryTable(Collection[FileEntry],IndexOutput).mjava","sourceNew":"  protected void writeEntryTable(Collection<FileEntry> entries,\n      IndexOutput entryOut) throws IOException {\n    CodecUtil.writeSegmentHeader(entryOut, ENTRY_CODEC, VERSION_CURRENT, segmentID, \"\");\n    entryOut.writeVInt(entries.size());\n    for (FileEntry fe : entries) {\n      entryOut.writeString(IndexFileNames.stripSegmentName(fe.file));\n      entryOut.writeLong(fe.offset);\n      entryOut.writeLong(fe.length);\n    }\n    CodecUtil.writeFooter(entryOut);\n  }\n\n","sourceOld":"  protected void writeEntryTable(Collection<FileEntry> entries,\n      IndexOutput entryOut) throws IOException {\n    CodecUtil.writeSegmentHeader(entryOut, ENTRY_CODEC, VERSION_CURRENT, segmentID, \"\");\n    entryOut.writeVInt(entries.size());\n    for (FileEntry fe : entries) {\n      entryOut.writeString(IndexFileNames.stripSegmentName(fe.file));\n      entryOut.writeLong(fe.offset);\n      entryOut.writeLong(fe.length);\n    }\n    CodecUtil.writeFooter(entryOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40CompoundWriter#writeEntryTable(Collection[FileEntry],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#writeEntryTable(Collection[FileEntry],IndexOutput).mjava","sourceNew":"  protected void writeEntryTable(Collection<FileEntry> entries,\n      IndexOutput entryOut) throws IOException {\n    CodecUtil.writeHeader(entryOut, ENTRY_CODEC, VERSION_CURRENT);\n    entryOut.writeVInt(entries.size());\n    for (FileEntry fe : entries) {\n      entryOut.writeString(IndexFileNames.stripSegmentName(fe.file));\n      entryOut.writeLong(fe.offset);\n      entryOut.writeLong(fe.length);\n    }\n    CodecUtil.writeFooter(entryOut);\n  }\n\n","sourceOld":"  protected void writeEntryTable(Collection<FileEntry> entries,\n      IndexOutput entryOut) throws IOException {\n    CodecUtil.writeHeader(entryOut, ENTRY_CODEC, VERSION_CURRENT);\n    entryOut.writeVInt(entries.size());\n    for (FileEntry fe : entries) {\n      entryOut.writeString(IndexFileNames.stripSegmentName(fe.file));\n      entryOut.writeLong(fe.offset);\n      entryOut.writeLong(fe.length);\n    }\n    CodecUtil.writeFooter(entryOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["61c01d39462806d7dce1e381b201c104783ab056","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["61c01d39462806d7dce1e381b201c104783ab056"],"989d940c4bf402188f4f0ae13736836885227383":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["1f3b037cd083286b2af89f96e768f85dcd8072d6","989d940c4bf402188f4f0ae13736836885227383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61c01d39462806d7dce1e381b201c104783ab056":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","9bb9a29a5e71a90295f175df8919802993142c9a"],"989d940c4bf402188f4f0ae13736836885227383":["9bb9a29a5e71a90295f175df8919802993142c9a"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["989d940c4bf402188f4f0ae13736836885227383"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["61c01d39462806d7dce1e381b201c104783ab056"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"61c01d39462806d7dce1e381b201c104783ab056":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}