{"path":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","commits":[{"id":"a015474a0e3185be4c42ed156c0f1e88b90b1ace","date":1321290150,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.getThreadTermsEnum(); // thread-private don't share!\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader.terms(term.field()).getThreadTermsEnum();\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader.terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.getThreadTermsEnum(); // thread-private don't share!\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader.terms(term.field()).getThreadTermsEnum();\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader.terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, false);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader.terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, false);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader.terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, false);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, false);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader.fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader.terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, false);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, false);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    TermContext termContext = termContexts.get(term);\n    final TermState state;\n    if (termContext == null) {\n      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()\n      // so we seek to the term now in this segment..., this sucks because its ugly mostly!\n      final Fields fields = context.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(term.field());\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(term.bytes(), true)) { \n            state = termsEnum.termState();\n          } else {\n            state = null;\n          }\n        } else {\n          state = null;\n        }\n      } else {\n        state = null;\n      }\n    } else {\n      state = termContext.get(context.ord);\n    }\n    \n    if (state == null) { // term is not present in that reader\n      return TermSpans.EMPTY_TERM_SPANS;\n    }\n    \n    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n    termsEnum.seekExact(term.bytes(), state);\n    \n    final DocsAndPositionsEnum postings = termsEnum.docsAndPositions(acceptDocs, null, false);\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      // term does exist, but has no positions\n      throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"e2297162a22c55456e200caef2cbcb00fe381120":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["31f025ae60076ae95274433f3fe8e6ace2857a87","6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["e2297162a22c55456e200caef2cbcb00fe381120"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"e2297162a22c55456e200caef2cbcb00fe381120":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["e2297162a22c55456e200caef2cbcb00fe381120"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}