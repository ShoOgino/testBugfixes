{"path":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVectors(int).mjava","commits":[{"id":"3101986002d49f3738148cdfe12337d946b0654c","date":1115921358,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVectors(int).mjava","pathOld":"/dev/null","sourceNew":"  // get all vectors\n  public TermFreqVector[] getTermFreqVectors(int n) throws IOException {\n    ArrayList results = new ArrayList();\n    Iterator i = fieldToReader.entrySet().iterator();\n    while (i.hasNext()) {\n      Map.Entry e = (Map.Entry)i.next();\n      IndexReader reader = (IndexReader)e.getKey();\n      String field = (String)e.getValue();\n      TermFreqVector vector = reader.getTermFreqVector(n, field);\n      if (vector != null)\n        results.add(vector);\n    }\n    return (TermFreqVector[])\n      results.toArray(new TermFreqVector[results.size()]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b0f4e8f25723950054e0dce2946f5e83f0ec597c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0f4e8f25723950054e0dce2946f5e83f0ec597c","date":1144344302,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVectors(int).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVectors(int).mjava","sourceNew":"  // get all vectors\n  public TermFreqVector[] getTermFreqVectors(int n) throws IOException {\n    ArrayList results = new ArrayList();\n    Iterator i = fieldToReader.entrySet().iterator();\n    while (i.hasNext()) {\n      Map.Entry e = (Map.Entry)i.next();\n      String field = (String)e.getKey();\n      IndexReader reader = (IndexReader)e.getValue();\n      TermFreqVector vector = reader.getTermFreqVector(n, field);\n      if (vector != null)\n        results.add(vector);\n    }\n    return (TermFreqVector[])\n      results.toArray(new TermFreqVector[results.size()]);\n  }\n\n","sourceOld":"  // get all vectors\n  public TermFreqVector[] getTermFreqVectors(int n) throws IOException {\n    ArrayList results = new ArrayList();\n    Iterator i = fieldToReader.entrySet().iterator();\n    while (i.hasNext()) {\n      Map.Entry e = (Map.Entry)i.next();\n      IndexReader reader = (IndexReader)e.getKey();\n      String field = (String)e.getValue();\n      TermFreqVector vector = reader.getTermFreqVector(n, field);\n      if (vector != null)\n        results.add(vector);\n    }\n    return (TermFreqVector[])\n      results.toArray(new TermFreqVector[results.size()]);\n  }\n\n","bugFix":["3101986002d49f3738148cdfe12337d946b0654c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVectors(int).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVectors(int).mjava","sourceNew":"  // get all vectors\n  public TermFreqVector[] getTermFreqVectors(int n) throws IOException {\n    ensureOpen();\n    ArrayList results = new ArrayList();\n    Iterator i = fieldToReader.entrySet().iterator();\n    while (i.hasNext()) {\n      Map.Entry e = (Map.Entry)i.next();\n      String field = (String)e.getKey();\n      IndexReader reader = (IndexReader)e.getValue();\n      TermFreqVector vector = reader.getTermFreqVector(n, field);\n      if (vector != null)\n        results.add(vector);\n    }\n    return (TermFreqVector[])\n      results.toArray(new TermFreqVector[results.size()]);\n  }\n\n","sourceOld":"  // get all vectors\n  public TermFreqVector[] getTermFreqVectors(int n) throws IOException {\n    ArrayList results = new ArrayList();\n    Iterator i = fieldToReader.entrySet().iterator();\n    while (i.hasNext()) {\n      Map.Entry e = (Map.Entry)i.next();\n      String field = (String)e.getKey();\n      IndexReader reader = (IndexReader)e.getValue();\n      TermFreqVector vector = reader.getTermFreqVector(n, field);\n      if (vector != null)\n        results.add(vector);\n    }\n    return (TermFreqVector[])\n      results.toArray(new TermFreqVector[results.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVectors(int).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVectors(int).mjava","sourceNew":"  // get all vectors\n  public TermFreqVector[] getTermFreqVectors(int n) throws IOException {\n    ensureOpen();\n    ArrayList<TermFreqVector> results = new ArrayList<TermFreqVector>();\n    for (final Map.Entry<String,IndexReader> e: fieldToReader.entrySet()) {\n\n      String field = e.getKey();\n      IndexReader reader = e.getValue();\n      TermFreqVector vector = reader.getTermFreqVector(n, field);\n      if (vector != null)\n        results.add(vector);\n    }\n    return (TermFreqVector[])\n      results.toArray(new TermFreqVector[results.size()]);\n  }\n\n","sourceOld":"  // get all vectors\n  public TermFreqVector[] getTermFreqVectors(int n) throws IOException {\n    ensureOpen();\n    ArrayList results = new ArrayList();\n    Iterator i = fieldToReader.entrySet().iterator();\n    while (i.hasNext()) {\n      Map.Entry e = (Map.Entry)i.next();\n      String field = (String)e.getKey();\n      IndexReader reader = (IndexReader)e.getValue();\n      TermFreqVector vector = reader.getTermFreqVector(n, field);\n      if (vector != null)\n        results.add(vector);\n    }\n    return (TermFreqVector[])\n      results.toArray(new TermFreqVector[results.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVectors(int).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVectors(int).mjava","sourceNew":"  // get all vectors\n  public TermFreqVector[] getTermFreqVectors(int n) throws IOException {\n    ensureOpen();\n    ArrayList<TermFreqVector> results = new ArrayList<TermFreqVector>();\n    for (final Map.Entry<String,IndexReader> e: fieldToReader.entrySet()) {\n\n      String field = e.getKey();\n      IndexReader reader = e.getValue();\n      TermFreqVector vector = reader.getTermFreqVector(n, field);\n      if (vector != null)\n        results.add(vector);\n    }\n    return results.toArray(new TermFreqVector[results.size()]);\n  }\n\n","sourceOld":"  // get all vectors\n  public TermFreqVector[] getTermFreqVectors(int n) throws IOException {\n    ensureOpen();\n    ArrayList<TermFreqVector> results = new ArrayList<TermFreqVector>();\n    for (final Map.Entry<String,IndexReader> e: fieldToReader.entrySet()) {\n\n      String field = e.getKey();\n      IndexReader reader = e.getValue();\n      TermFreqVector vector = reader.getTermFreqVector(n, field);\n      if (vector != null)\n        results.add(vector);\n    }\n    return (TermFreqVector[])\n      results.toArray(new TermFreqVector[results.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVectors(int).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVectors(int).mjava","sourceNew":"  // get all vectors\n  @Override\n  public TermFreqVector[] getTermFreqVectors(int n) throws IOException {\n    ensureOpen();\n    ArrayList<TermFreqVector> results = new ArrayList<TermFreqVector>();\n    for (final Map.Entry<String,IndexReader> e: fieldToReader.entrySet()) {\n\n      String field = e.getKey();\n      IndexReader reader = e.getValue();\n      TermFreqVector vector = reader.getTermFreqVector(n, field);\n      if (vector != null)\n        results.add(vector);\n    }\n    return results.toArray(new TermFreqVector[results.size()]);\n  }\n\n","sourceOld":"  // get all vectors\n  public TermFreqVector[] getTermFreqVectors(int n) throws IOException {\n    ensureOpen();\n    ArrayList<TermFreqVector> results = new ArrayList<TermFreqVector>();\n    for (final Map.Entry<String,IndexReader> e: fieldToReader.entrySet()) {\n\n      String field = e.getKey();\n      IndexReader reader = e.getValue();\n      TermFreqVector vector = reader.getTermFreqVector(n, field);\n      if (vector != null)\n        results.add(vector);\n    }\n    return results.toArray(new TermFreqVector[results.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#getTermFreqVectors(int).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#getTermFreqVectors(int).mjava","sourceNew":"  // get all vectors\n  @Override\n  public TermFreqVector[] getTermFreqVectors(int n) throws IOException {\n    ensureOpen();\n    ArrayList<TermFreqVector> results = new ArrayList<TermFreqVector>();\n    for (final Map.Entry<String,IndexReader> e: fieldToReader.entrySet()) {\n\n      String field = e.getKey();\n      IndexReader reader = e.getValue();\n      TermFreqVector vector = reader.getTermFreqVector(n, field);\n      if (vector != null)\n        results.add(vector);\n    }\n    return results.toArray(new TermFreqVector[results.size()]);\n  }\n\n","sourceOld":"  // get all vectors\n  @Override\n  public TermFreqVector[] getTermFreqVectors(int n) throws IOException {\n    ensureOpen();\n    ArrayList<TermFreqVector> results = new ArrayList<TermFreqVector>();\n    for (final Map.Entry<String,IndexReader> e: fieldToReader.entrySet()) {\n\n      String field = e.getKey();\n      IndexReader reader = e.getValue();\n      TermFreqVector vector = reader.getTermFreqVector(n, field);\n      if (vector != null)\n        results.add(vector);\n    }\n    return results.toArray(new TermFreqVector[results.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3101986002d49f3738148cdfe12337d946b0654c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["b0f4e8f25723950054e0dce2946f5e83f0ec597c"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"8a9e385641d717e641408d8fbbc62be8fc766357":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b0f4e8f25723950054e0dce2946f5e83f0ec597c":["3101986002d49f3738148cdfe12337d946b0654c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"3101986002d49f3738148cdfe12337d946b0654c":["b0f4e8f25723950054e0dce2946f5e83f0ec597c"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["8a9e385641d717e641408d8fbbc62be8fc766357"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3101986002d49f3738148cdfe12337d946b0654c"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b0f4e8f25723950054e0dce2946f5e83f0ec597c":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}