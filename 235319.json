{"path":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","commits":[{"id":"120bc33d5cbe83eca2e5fce597baf4fef208d579","date":1573735895,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @SuppressForbidden(reason = \"We really need to print the stacktrace here, otherwise \"\n      + \"there shall be little else information to debug problems. Other SolrCLI tools \"\n      + \"don't print stack traces, hence special treatment is needed here.\")\n  protected void runImpl(CommandLine cli) throws Exception {\n    try {\n      solrUrl = cli.getOptionValues(\"solrUrl\")[cli.getOptionValues(\"solrUrl\").length-1];\n      solrBaseUrl = solrUrl.replaceAll(\"\\\\/solr$\", \"\"); // strip out ending \"/solr\"\n      log.info(\"Solr url: \"+solrUrl+\", solr base url: \"+solrBaseUrl);\n      String zkHost = getZkHost(cli);\n\n      log.info(\"ZK: \"+zkHost);\n      String cmd = cli.getArgList().size() == 0? \"help\": cli.getArgs()[0];\n\n      try (HttpSolrClient solrClient = new HttpSolrClient.Builder(solrBaseUrl).build()) {\n        if (cmd != null) {\n          packageManager = new PackageManager(solrClient, solrBaseUrl, zkHost); \n          try {\n            repositoryManager = new RepositoryManager(solrClient, packageManager);\n\n            switch (cmd) {\n              case \"add-repo\":\n                String repoName = cli.getArgs()[1];\n                String repoUrl = cli.getArgs()[2];\n                repositoryManager.addRepository(repoName, repoUrl);\n                PackageUtils.printGreen(\"Added repository: \" + repoName);\n                break;\n              case \"list-installed\":\n                PackageUtils.printGreen(\"Installed packages:\\n-----\");                \n                for (SolrPackageInstance pkg: packageManager.fetchInstalledPackageInstances()) {\n                  PackageUtils.printGreen(pkg);\n                }\n                break;\n              case \"list-available\":\n                PackageUtils.printGreen(\"Available packages:\\n-----\");\n                for (SolrPackage pkg: repositoryManager.getPackages()) {\n                  PackageUtils.printGreen(pkg.name + \" \\t\\t\"+pkg.description);\n                  for (SolrPackageRelease version: pkg.versions) {\n                    PackageUtils.printGreen(\"\\tVersion: \"+version.version);\n                  }\n                }\n                break;\n              case \"list-deployed\":\n                if (cli.hasOption('c')) {\n                  String collection = cli.getArgs()[1];\n                  Map<String, SolrPackageInstance> packages = packageManager.getPackagesDeployed(collection);\n                  PackageUtils.printGreen(\"Packages deployed on \" + collection + \":\");\n                  for (String packageName: packages.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + packages.get(packageName));                 \n                  }\n                } else {\n                  String packageName = cli.getArgs()[1];\n                  Map<String, String> deployedCollections = packageManager.getDeployedCollections(packageName);\n                  PackageUtils.printGreen(\"Collections on which package \" + packageName + \" was deployed:\");\n                  for (String collection: deployedCollections.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + collection + \"(\"+packageName+\":\"+deployedCollections.get(collection)+\")\");\n                  }\n                }\n                break;\n              case \"install\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                repositoryManager.install(packageName, version);\n                PackageUtils.printGreen(repositoryManager.toString() + \" installed.\");\n                break;\n              }\n              case \"deploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                boolean noprompt = cli.hasOption('y');\n                boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n                packageManager.deploy(packageName, version, PackageUtils.validateCollections(cli.getOptionValues(\"collections\")), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                break;\n              }\n              case \"undeploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                if (parsedVersion.second() != null) {\n                  throw new SolrException(ErrorCode.BAD_REQUEST, \"Only package name expected, without a version. Actual: \" + cli.getArgList().get(1));\n                }\n                String packageName = parsedVersion.first();\n                packageManager.undeploy(packageName, cli.getOptionValues(\"collections\"));\n                break;\n              }\n              case \"help\":\n              case \"usage\":\n                print(\"Package Manager\\n---------------\");\n                printGreen(\"./solr package add-repo <repository-name> <repository-url>\");\n                print(\"Add a repository to Solr.\");\n                print(\"\");\n                printGreen(\"./solr package install <package-name>[:<version>] \");\n                print(\"Install a package into Solr. This copies over the artifacts from the repository into Solr's internal package store and sets up classloader for this package to be used.\");\n                print(\"\");\n                printGreen(\"./solr package deploy <package-name>[:<version>] [-y] [--update] -collections <comma-separated-collections> [-p <param1>=<val1> -p <param2>=<val2> ...] \");\n                print(\"Bootstraps a previously installed package into the specified collections. It the package accepts parameters for its setup commands, they can be specified (as per package documentation).\");\n                print(\"\");\n                printGreen(\"./solr package list-installed\");\n                print(\"Print a list of packages installed in Solr.\");\n                print(\"\");\n                printGreen(\"./solr package list-available\");\n                print(\"Print a list of packages available in the repositories.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed -c <collection>\");\n                print(\"Print a list of packages deployed on a given collection.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed <package-name>\");\n                print(\"Print a list of collections on which a given package has been deployed.\");\n                print(\"\");\n                printGreen(\"./solr package undeploy <package-name> -collections <comma-separated-collections>\");\n                print(\"Undeploys a package from specified collection(s)\");\n                print(\"\\n\");\n                print(\"Note: (a) Please add '-solrUrl http://host:port' parameter if needed (usually on Windows).\");\n                print(\"      (b) Please make sure that all Solr nodes are started with '-Denable.packages=true' parameter.\");\n                print(\"\\n\");\n                break;\n              default:\n                throw new RuntimeException(\"Unrecognized command: \"+cmd);\n            };\n          } finally {\n            packageManager.close();\n          }\n        }\n      }\n      log.info(\"Finished: \"+cmd);\n\n    } catch (Exception ex) {\n      ex.printStackTrace(); // We need to print this since SolrCLI drops the stack trace in favour of brevity. Package tool should surely print full stacktraces!\n      throw ex;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62d55718cd611235e975fa73a6bdf263fbd58859","date":1576386842,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","sourceNew":"  @Override\n  @SuppressForbidden(reason = \"We really need to print the stacktrace here, otherwise \"\n      + \"there shall be little else information to debug problems. Other SolrCLI tools \"\n      + \"don't print stack traces, hence special treatment is needed here.\")\n  protected void runImpl(CommandLine cli) throws Exception {\n    try {\n      solrUrl = cli.getOptionValues(\"solrUrl\")[cli.getOptionValues(\"solrUrl\").length-1];\n      solrBaseUrl = solrUrl.replaceAll(\"\\\\/solr$\", \"\"); // strip out ending \"/solr\"\n      log.info(\"Solr url: \"+solrUrl+\", solr base url: \"+solrBaseUrl);\n      String zkHost = getZkHost(cli);\n\n      log.info(\"ZK: \"+zkHost);\n      String cmd = cli.getArgList().size() == 0? \"help\": cli.getArgs()[0];\n\n      try (HttpSolrClient solrClient = new HttpSolrClient.Builder(solrBaseUrl).build()) {\n        if (cmd != null) {\n          packageManager = new PackageManager(solrClient, solrBaseUrl, zkHost); \n          try {\n            repositoryManager = new RepositoryManager(solrClient, packageManager);\n\n            switch (cmd) {\n              case \"add-repo\":\n                String repoName = cli.getArgs()[1];\n                String repoUrl = cli.getArgs()[2];\n                repositoryManager.addRepository(repoName, repoUrl);\n                PackageUtils.printGreen(\"Added repository: \" + repoName);\n                break;\n              case \"list-installed\":\n                PackageUtils.printGreen(\"Installed packages:\\n-----\");                \n                for (SolrPackageInstance pkg: packageManager.fetchInstalledPackageInstances()) {\n                  PackageUtils.printGreen(pkg);\n                }\n                break;\n              case \"list-available\":\n                PackageUtils.printGreen(\"Available packages:\\n-----\");\n                for (SolrPackage pkg: repositoryManager.getPackages()) {\n                  PackageUtils.printGreen(pkg.name + \" \\t\\t\"+pkg.description);\n                  for (SolrPackageRelease version: pkg.versions) {\n                    PackageUtils.printGreen(\"\\tVersion: \"+version.version);\n                  }\n                }\n                break;\n              case \"list-deployed\":\n                if (cli.hasOption('c')) {\n                  String collection = cli.getArgs()[1];\n                  Map<String, SolrPackageInstance> packages = packageManager.getPackagesDeployed(collection);\n                  PackageUtils.printGreen(\"Packages deployed on \" + collection + \":\");\n                  for (String packageName: packages.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + packages.get(packageName));                 \n                  }\n                } else {\n                  String packageName = cli.getArgs()[1];\n                  Map<String, String> deployedCollections = packageManager.getDeployedCollections(packageName);\n                  if (deployedCollections.isEmpty() == false) {\n                    PackageUtils.printGreen(\"Collections on which package \" + packageName + \" was deployed:\");\n                    for (String collection: deployedCollections.keySet()) {\n                      PackageUtils.printGreen(\"\\t\" + collection + \"(\"+packageName+\":\"+deployedCollections.get(collection)+\")\");\n                    }\n                  } else {\n                    PackageUtils.printGreen(\"Package \"+packageName+\" not deployed on any collection.\");\n                  }\n                }\n                break;\n              case \"install\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                repositoryManager.install(packageName, version);\n                PackageUtils.printGreen(packageName + \" installed.\");\n                break;\n              }\n              case \"deploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                boolean noprompt = cli.hasOption('y');\n                boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n                packageManager.deploy(packageName, version, PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                break;\n              }\n              case \"undeploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                if (parsedVersion.second() != null) {\n                  throw new SolrException(ErrorCode.BAD_REQUEST, \"Only package name expected, without a version. Actual: \" + cli.getArgList().get(1));\n                }\n                String packageName = parsedVersion.first();\n                packageManager.undeploy(packageName, cli.getOptionValue(\"collections\").split(\",\"));\n                break;\n              }\n              case \"help\":\n              case \"usage\":\n                print(\"Package Manager\\n---------------\");\n                printGreen(\"./solr package add-repo <repository-name> <repository-url>\");\n                print(\"Add a repository to Solr.\");\n                print(\"\");\n                printGreen(\"./solr package install <package-name>[:<version>] \");\n                print(\"Install a package into Solr. This copies over the artifacts from the repository into Solr's internal package store and sets up classloader for this package to be used.\");\n                print(\"\");\n                printGreen(\"./solr package deploy <package-name>[:<version>] [-y] [--update] -collections <comma-separated-collections> [-p <param1>=<val1> -p <param2>=<val2> ...] \");\n                print(\"Bootstraps a previously installed package into the specified collections. It the package accepts parameters for its setup commands, they can be specified (as per package documentation).\");\n                print(\"\");\n                printGreen(\"./solr package list-installed\");\n                print(\"Print a list of packages installed in Solr.\");\n                print(\"\");\n                printGreen(\"./solr package list-available\");\n                print(\"Print a list of packages available in the repositories.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed -c <collection>\");\n                print(\"Print a list of packages deployed on a given collection.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed <package-name>\");\n                print(\"Print a list of collections on which a given package has been deployed.\");\n                print(\"\");\n                printGreen(\"./solr package undeploy <package-name> -collections <comma-separated-collections>\");\n                print(\"Undeploys a package from specified collection(s)\");\n                print(\"\\n\");\n                print(\"Note: (a) Please add '-solrUrl http://host:port' parameter if needed (usually on Windows).\");\n                print(\"      (b) Please make sure that all Solr nodes are started with '-Denable.packages=true' parameter.\");\n                print(\"\\n\");\n                break;\n              default:\n                throw new RuntimeException(\"Unrecognized command: \"+cmd);\n            };\n          } finally {\n            packageManager.close();\n          }\n        }\n      }\n      log.info(\"Finished: \"+cmd);\n\n    } catch (Exception ex) {\n      ex.printStackTrace(); // We need to print this since SolrCLI drops the stack trace in favour of brevity. Package tool should surely print full stacktraces!\n      throw ex;\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressForbidden(reason = \"We really need to print the stacktrace here, otherwise \"\n      + \"there shall be little else information to debug problems. Other SolrCLI tools \"\n      + \"don't print stack traces, hence special treatment is needed here.\")\n  protected void runImpl(CommandLine cli) throws Exception {\n    try {\n      solrUrl = cli.getOptionValues(\"solrUrl\")[cli.getOptionValues(\"solrUrl\").length-1];\n      solrBaseUrl = solrUrl.replaceAll(\"\\\\/solr$\", \"\"); // strip out ending \"/solr\"\n      log.info(\"Solr url: \"+solrUrl+\", solr base url: \"+solrBaseUrl);\n      String zkHost = getZkHost(cli);\n\n      log.info(\"ZK: \"+zkHost);\n      String cmd = cli.getArgList().size() == 0? \"help\": cli.getArgs()[0];\n\n      try (HttpSolrClient solrClient = new HttpSolrClient.Builder(solrBaseUrl).build()) {\n        if (cmd != null) {\n          packageManager = new PackageManager(solrClient, solrBaseUrl, zkHost); \n          try {\n            repositoryManager = new RepositoryManager(solrClient, packageManager);\n\n            switch (cmd) {\n              case \"add-repo\":\n                String repoName = cli.getArgs()[1];\n                String repoUrl = cli.getArgs()[2];\n                repositoryManager.addRepository(repoName, repoUrl);\n                PackageUtils.printGreen(\"Added repository: \" + repoName);\n                break;\n              case \"list-installed\":\n                PackageUtils.printGreen(\"Installed packages:\\n-----\");                \n                for (SolrPackageInstance pkg: packageManager.fetchInstalledPackageInstances()) {\n                  PackageUtils.printGreen(pkg);\n                }\n                break;\n              case \"list-available\":\n                PackageUtils.printGreen(\"Available packages:\\n-----\");\n                for (SolrPackage pkg: repositoryManager.getPackages()) {\n                  PackageUtils.printGreen(pkg.name + \" \\t\\t\"+pkg.description);\n                  for (SolrPackageRelease version: pkg.versions) {\n                    PackageUtils.printGreen(\"\\tVersion: \"+version.version);\n                  }\n                }\n                break;\n              case \"list-deployed\":\n                if (cli.hasOption('c')) {\n                  String collection = cli.getArgs()[1];\n                  Map<String, SolrPackageInstance> packages = packageManager.getPackagesDeployed(collection);\n                  PackageUtils.printGreen(\"Packages deployed on \" + collection + \":\");\n                  for (String packageName: packages.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + packages.get(packageName));                 \n                  }\n                } else {\n                  String packageName = cli.getArgs()[1];\n                  Map<String, String> deployedCollections = packageManager.getDeployedCollections(packageName);\n                  PackageUtils.printGreen(\"Collections on which package \" + packageName + \" was deployed:\");\n                  for (String collection: deployedCollections.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + collection + \"(\"+packageName+\":\"+deployedCollections.get(collection)+\")\");\n                  }\n                }\n                break;\n              case \"install\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                repositoryManager.install(packageName, version);\n                PackageUtils.printGreen(repositoryManager.toString() + \" installed.\");\n                break;\n              }\n              case \"deploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                boolean noprompt = cli.hasOption('y');\n                boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n                packageManager.deploy(packageName, version, PackageUtils.validateCollections(cli.getOptionValues(\"collections\")), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                break;\n              }\n              case \"undeploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                if (parsedVersion.second() != null) {\n                  throw new SolrException(ErrorCode.BAD_REQUEST, \"Only package name expected, without a version. Actual: \" + cli.getArgList().get(1));\n                }\n                String packageName = parsedVersion.first();\n                packageManager.undeploy(packageName, cli.getOptionValues(\"collections\"));\n                break;\n              }\n              case \"help\":\n              case \"usage\":\n                print(\"Package Manager\\n---------------\");\n                printGreen(\"./solr package add-repo <repository-name> <repository-url>\");\n                print(\"Add a repository to Solr.\");\n                print(\"\");\n                printGreen(\"./solr package install <package-name>[:<version>] \");\n                print(\"Install a package into Solr. This copies over the artifacts from the repository into Solr's internal package store and sets up classloader for this package to be used.\");\n                print(\"\");\n                printGreen(\"./solr package deploy <package-name>[:<version>] [-y] [--update] -collections <comma-separated-collections> [-p <param1>=<val1> -p <param2>=<val2> ...] \");\n                print(\"Bootstraps a previously installed package into the specified collections. It the package accepts parameters for its setup commands, they can be specified (as per package documentation).\");\n                print(\"\");\n                printGreen(\"./solr package list-installed\");\n                print(\"Print a list of packages installed in Solr.\");\n                print(\"\");\n                printGreen(\"./solr package list-available\");\n                print(\"Print a list of packages available in the repositories.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed -c <collection>\");\n                print(\"Print a list of packages deployed on a given collection.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed <package-name>\");\n                print(\"Print a list of collections on which a given package has been deployed.\");\n                print(\"\");\n                printGreen(\"./solr package undeploy <package-name> -collections <comma-separated-collections>\");\n                print(\"Undeploys a package from specified collection(s)\");\n                print(\"\\n\");\n                print(\"Note: (a) Please add '-solrUrl http://host:port' parameter if needed (usually on Windows).\");\n                print(\"      (b) Please make sure that all Solr nodes are started with '-Denable.packages=true' parameter.\");\n                print(\"\\n\");\n                break;\n              default:\n                throw new RuntimeException(\"Unrecognized command: \"+cmd);\n            };\n          } finally {\n            packageManager.close();\n          }\n        }\n      }\n      log.info(\"Finished: \"+cmd);\n\n    } catch (Exception ex) {\n      ex.printStackTrace(); // We need to print this since SolrCLI drops the stack trace in favour of brevity. Package tool should surely print full stacktraces!\n      throw ex;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06595b0c22c7d3075c4104d3820cccf95d9d8a43","date":1576491645,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","sourceNew":"  @Override\n  @SuppressForbidden(reason = \"We really need to print the stacktrace here, otherwise \"\n      + \"there shall be little else information to debug problems. Other SolrCLI tools \"\n      + \"don't print stack traces, hence special treatment is needed here.\")\n  protected void runImpl(CommandLine cli) throws Exception {\n    try {\n      solrUrl = cli.getOptionValues(\"solrUrl\")[cli.getOptionValues(\"solrUrl\").length-1];\n      solrBaseUrl = solrUrl.replaceAll(\"\\\\/solr$\", \"\"); // strip out ending \"/solr\"\n      log.info(\"Solr url: \"+solrUrl+\", solr base url: \"+solrBaseUrl);\n      String zkHost = getZkHost(cli);\n\n      log.info(\"ZK: \"+zkHost);\n      String cmd = cli.getArgList().size() == 0? \"help\": cli.getArgs()[0];\n\n      try (HttpSolrClient solrClient = new HttpSolrClient.Builder(solrBaseUrl).build()) {\n        if (cmd != null) {\n          packageManager = new PackageManager(solrClient, solrBaseUrl, zkHost); \n          try {\n            repositoryManager = new RepositoryManager(solrClient, packageManager);\n\n            switch (cmd) {\n              case \"add-repo\":\n                String repoName = cli.getArgs()[1];\n                String repoUrl = cli.getArgs()[2];\n                repositoryManager.addRepository(repoName, repoUrl);\n                PackageUtils.printGreen(\"Added repository: \" + repoName);\n                break;\n              case \"list-installed\":\n                PackageUtils.printGreen(\"Installed packages:\\n-----\");                \n                for (SolrPackageInstance pkg: packageManager.fetchInstalledPackageInstances()) {\n                  PackageUtils.printGreen(pkg);\n                }\n                break;\n              case \"list-available\":\n                PackageUtils.printGreen(\"Available packages:\\n-----\");\n                for (SolrPackage pkg: repositoryManager.getPackages()) {\n                  PackageUtils.printGreen(pkg.name + \" \\t\\t\"+pkg.description);\n                  for (SolrPackageRelease version: pkg.versions) {\n                    PackageUtils.printGreen(\"\\tVersion: \"+version.version);\n                  }\n                }\n                break;\n              case \"list-deployed\":\n                if (cli.hasOption('c')) {\n                  String collection = cli.getArgs()[1];\n                  Map<String, SolrPackageInstance> packages = packageManager.getPackagesDeployed(collection);\n                  PackageUtils.printGreen(\"Packages deployed on \" + collection + \":\");\n                  for (String packageName: packages.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + packages.get(packageName));                 \n                  }\n                } else {\n                  String packageName = cli.getArgs()[1];\n                  Map<String, String> deployedCollections = packageManager.getDeployedCollections(packageName);\n                  if (deployedCollections.isEmpty() == false) {\n                    PackageUtils.printGreen(\"Collections on which package \" + packageName + \" was deployed:\");\n                    for (String collection: deployedCollections.keySet()) {\n                      PackageUtils.printGreen(\"\\t\" + collection + \"(\"+packageName+\":\"+deployedCollections.get(collection)+\")\");\n                    }\n                  } else {\n                    PackageUtils.printGreen(\"Package \"+packageName+\" not deployed on any collection.\");\n                  }\n                }\n                break;\n              case \"install\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                repositoryManager.install(packageName, version);\n                PackageUtils.printGreen(packageName + \" installed.\");\n                break;\n              }\n              case \"deploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                boolean noprompt = cli.hasOption('y');\n                boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n                packageManager.deploy(packageName, version, PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                break;\n              }\n              case \"undeploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                if (parsedVersion.second() != null) {\n                  throw new SolrException(ErrorCode.BAD_REQUEST, \"Only package name expected, without a version. Actual: \" + cli.getArgList().get(1));\n                }\n                String packageName = parsedVersion.first();\n                packageManager.undeploy(packageName, cli.getOptionValue(\"collections\").split(\",\"));\n                break;\n              }\n              case \"help\":\n              case \"usage\":\n                print(\"Package Manager\\n---------------\");\n                printGreen(\"./solr package add-repo <repository-name> <repository-url>\");\n                print(\"Add a repository to Solr.\");\n                print(\"\");\n                printGreen(\"./solr package install <package-name>[:<version>] \");\n                print(\"Install a package into Solr. This copies over the artifacts from the repository into Solr's internal package store and sets up classloader for this package to be used.\");\n                print(\"\");\n                printGreen(\"./solr package deploy <package-name>[:<version>] [-y] [--update] -collections <comma-separated-collections> [-p <param1>=<val1> -p <param2>=<val2> ...] \");\n                print(\"Bootstraps a previously installed package into the specified collections. It the package accepts parameters for its setup commands, they can be specified (as per package documentation).\");\n                print(\"\");\n                printGreen(\"./solr package list-installed\");\n                print(\"Print a list of packages installed in Solr.\");\n                print(\"\");\n                printGreen(\"./solr package list-available\");\n                print(\"Print a list of packages available in the repositories.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed -c <collection>\");\n                print(\"Print a list of packages deployed on a given collection.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed <package-name>\");\n                print(\"Print a list of collections on which a given package has been deployed.\");\n                print(\"\");\n                printGreen(\"./solr package undeploy <package-name> -collections <comma-separated-collections>\");\n                print(\"Undeploys a package from specified collection(s)\");\n                print(\"\\n\");\n                print(\"Note: (a) Please add '-solrUrl http://host:port' parameter if needed (usually on Windows).\");\n                print(\"      (b) Please make sure that all Solr nodes are started with '-Denable.packages=true' parameter.\");\n                print(\"\\n\");\n                break;\n              default:\n                throw new RuntimeException(\"Unrecognized command: \"+cmd);\n            };\n          } finally {\n            packageManager.close();\n          }\n        }\n      }\n      log.info(\"Finished: \"+cmd);\n\n    } catch (Exception ex) {\n      ex.printStackTrace(); // We need to print this since SolrCLI drops the stack trace in favour of brevity. Package tool should surely print full stacktraces!\n      throw ex;\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressForbidden(reason = \"We really need to print the stacktrace here, otherwise \"\n      + \"there shall be little else information to debug problems. Other SolrCLI tools \"\n      + \"don't print stack traces, hence special treatment is needed here.\")\n  protected void runImpl(CommandLine cli) throws Exception {\n    try {\n      solrUrl = cli.getOptionValues(\"solrUrl\")[cli.getOptionValues(\"solrUrl\").length-1];\n      solrBaseUrl = solrUrl.replaceAll(\"\\\\/solr$\", \"\"); // strip out ending \"/solr\"\n      log.info(\"Solr url: \"+solrUrl+\", solr base url: \"+solrBaseUrl);\n      String zkHost = getZkHost(cli);\n\n      log.info(\"ZK: \"+zkHost);\n      String cmd = cli.getArgList().size() == 0? \"help\": cli.getArgs()[0];\n\n      try (HttpSolrClient solrClient = new HttpSolrClient.Builder(solrBaseUrl).build()) {\n        if (cmd != null) {\n          packageManager = new PackageManager(solrClient, solrBaseUrl, zkHost); \n          try {\n            repositoryManager = new RepositoryManager(solrClient, packageManager);\n\n            switch (cmd) {\n              case \"add-repo\":\n                String repoName = cli.getArgs()[1];\n                String repoUrl = cli.getArgs()[2];\n                repositoryManager.addRepository(repoName, repoUrl);\n                PackageUtils.printGreen(\"Added repository: \" + repoName);\n                break;\n              case \"list-installed\":\n                PackageUtils.printGreen(\"Installed packages:\\n-----\");                \n                for (SolrPackageInstance pkg: packageManager.fetchInstalledPackageInstances()) {\n                  PackageUtils.printGreen(pkg);\n                }\n                break;\n              case \"list-available\":\n                PackageUtils.printGreen(\"Available packages:\\n-----\");\n                for (SolrPackage pkg: repositoryManager.getPackages()) {\n                  PackageUtils.printGreen(pkg.name + \" \\t\\t\"+pkg.description);\n                  for (SolrPackageRelease version: pkg.versions) {\n                    PackageUtils.printGreen(\"\\tVersion: \"+version.version);\n                  }\n                }\n                break;\n              case \"list-deployed\":\n                if (cli.hasOption('c')) {\n                  String collection = cli.getArgs()[1];\n                  Map<String, SolrPackageInstance> packages = packageManager.getPackagesDeployed(collection);\n                  PackageUtils.printGreen(\"Packages deployed on \" + collection + \":\");\n                  for (String packageName: packages.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + packages.get(packageName));                 \n                  }\n                } else {\n                  String packageName = cli.getArgs()[1];\n                  Map<String, String> deployedCollections = packageManager.getDeployedCollections(packageName);\n                  PackageUtils.printGreen(\"Collections on which package \" + packageName + \" was deployed:\");\n                  for (String collection: deployedCollections.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + collection + \"(\"+packageName+\":\"+deployedCollections.get(collection)+\")\");\n                  }\n                }\n                break;\n              case \"install\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                repositoryManager.install(packageName, version);\n                PackageUtils.printGreen(repositoryManager.toString() + \" installed.\");\n                break;\n              }\n              case \"deploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                boolean noprompt = cli.hasOption('y');\n                boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n                packageManager.deploy(packageName, version, PackageUtils.validateCollections(cli.getOptionValues(\"collections\")), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                break;\n              }\n              case \"undeploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                if (parsedVersion.second() != null) {\n                  throw new SolrException(ErrorCode.BAD_REQUEST, \"Only package name expected, without a version. Actual: \" + cli.getArgList().get(1));\n                }\n                String packageName = parsedVersion.first();\n                packageManager.undeploy(packageName, cli.getOptionValues(\"collections\"));\n                break;\n              }\n              case \"help\":\n              case \"usage\":\n                print(\"Package Manager\\n---------------\");\n                printGreen(\"./solr package add-repo <repository-name> <repository-url>\");\n                print(\"Add a repository to Solr.\");\n                print(\"\");\n                printGreen(\"./solr package install <package-name>[:<version>] \");\n                print(\"Install a package into Solr. This copies over the artifacts from the repository into Solr's internal package store and sets up classloader for this package to be used.\");\n                print(\"\");\n                printGreen(\"./solr package deploy <package-name>[:<version>] [-y] [--update] -collections <comma-separated-collections> [-p <param1>=<val1> -p <param2>=<val2> ...] \");\n                print(\"Bootstraps a previously installed package into the specified collections. It the package accepts parameters for its setup commands, they can be specified (as per package documentation).\");\n                print(\"\");\n                printGreen(\"./solr package list-installed\");\n                print(\"Print a list of packages installed in Solr.\");\n                print(\"\");\n                printGreen(\"./solr package list-available\");\n                print(\"Print a list of packages available in the repositories.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed -c <collection>\");\n                print(\"Print a list of packages deployed on a given collection.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed <package-name>\");\n                print(\"Print a list of collections on which a given package has been deployed.\");\n                print(\"\");\n                printGreen(\"./solr package undeploy <package-name> -collections <comma-separated-collections>\");\n                print(\"Undeploys a package from specified collection(s)\");\n                print(\"\\n\");\n                print(\"Note: (a) Please add '-solrUrl http://host:port' parameter if needed (usually on Windows).\");\n                print(\"      (b) Please make sure that all Solr nodes are started with '-Denable.packages=true' parameter.\");\n                print(\"\\n\");\n                break;\n              default:\n                throw new RuntimeException(\"Unrecognized command: \"+cmd);\n            };\n          } finally {\n            packageManager.close();\n          }\n        }\n      }\n      log.info(\"Finished: \"+cmd);\n\n    } catch (Exception ex) {\n      ex.printStackTrace(); // We need to print this since SolrCLI drops the stack trace in favour of brevity. Package tool should surely print full stacktraces!\n      throw ex;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d218decf811b7a0a4d86218c54c79c74a962374b","date":1578632144,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","sourceNew":"  @Override\n  @SuppressForbidden(reason = \"We really need to print the stacktrace here, otherwise \"\n      + \"there shall be little else information to debug problems. Other SolrCLI tools \"\n      + \"don't print stack traces, hence special treatment is needed here.\")\n  protected void runImpl(CommandLine cli) throws Exception {\n    try {\n      solrUrl = cli.getOptionValues(\"solrUrl\")[cli.getOptionValues(\"solrUrl\").length-1];\n      solrBaseUrl = solrUrl.replaceAll(\"\\\\/solr$\", \"\"); // strip out ending \"/solr\"\n      log.info(\"Solr url: \"+solrUrl+\", solr base url: \"+solrBaseUrl);\n      String zkHost = getZkHost(cli);\n\n      log.info(\"ZK: \"+zkHost);\n      String cmd = cli.getArgList().size() == 0? \"help\": cli.getArgs()[0];\n\n      try (HttpSolrClient solrClient = new HttpSolrClient.Builder(solrBaseUrl).build()) {\n        if (cmd != null) {\n          packageManager = new PackageManager(solrClient, solrBaseUrl, zkHost); \n          try {\n            repositoryManager = new RepositoryManager(solrClient, packageManager);\n\n            switch (cmd) {\n              case \"add-repo\":\n                String repoName = cli.getArgs()[1];\n                String repoUrl = cli.getArgs()[2];\n                repositoryManager.addRepository(repoName, repoUrl);\n                PackageUtils.printGreen(\"Added repository: \" + repoName);\n                break;\n              case \"add-key\":\n                String keyFilename = cli.getArgs()[1];\n                repositoryManager.addKey(FileUtils.readFileToByteArray(new File(keyFilename)), Paths.get(keyFilename).getFileName().toString());\n                break;\n              case \"list-installed\":\n                PackageUtils.printGreen(\"Installed packages:\\n-----\");                \n                for (SolrPackageInstance pkg: packageManager.fetchInstalledPackageInstances()) {\n                  PackageUtils.printGreen(pkg);\n                }\n                break;\n              case \"list-available\":\n                PackageUtils.printGreen(\"Available packages:\\n-----\");\n                for (SolrPackage pkg: repositoryManager.getPackages()) {\n                  PackageUtils.printGreen(pkg.name + \" \\t\\t\"+pkg.description);\n                  for (SolrPackageRelease version: pkg.versions) {\n                    PackageUtils.printGreen(\"\\tVersion: \"+version.version);\n                  }\n                }\n                break;\n              case \"list-deployed\":\n                if (cli.hasOption('c')) {\n                  String collection = cli.getArgs()[1];\n                  Map<String, SolrPackageInstance> packages = packageManager.getPackagesDeployed(collection);\n                  PackageUtils.printGreen(\"Packages deployed on \" + collection + \":\");\n                  for (String packageName: packages.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + packages.get(packageName));                 \n                  }\n                } else {\n                  String packageName = cli.getArgs()[1];\n                  Map<String, String> deployedCollections = packageManager.getDeployedCollections(packageName);\n                  if (deployedCollections.isEmpty() == false) {\n                    PackageUtils.printGreen(\"Collections on which package \" + packageName + \" was deployed:\");\n                    for (String collection: deployedCollections.keySet()) {\n                      PackageUtils.printGreen(\"\\t\" + collection + \"(\"+packageName+\":\"+deployedCollections.get(collection)+\")\");\n                    }\n                  } else {\n                    PackageUtils.printGreen(\"Package \"+packageName+\" not deployed on any collection.\");\n                  }\n                }\n                break;\n              case \"install\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                repositoryManager.install(packageName, version);\n                PackageUtils.printGreen(packageName + \" installed.\");\n                break;\n              }\n              case \"deploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                boolean noprompt = cli.hasOption('y');\n                boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n                packageManager.deploy(packageName, version, PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                break;\n              }\n              case \"undeploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                if (parsedVersion.second() != null) {\n                  throw new SolrException(ErrorCode.BAD_REQUEST, \"Only package name expected, without a version. Actual: \" + cli.getArgList().get(1));\n                }\n                String packageName = parsedVersion.first();\n                packageManager.undeploy(packageName, cli.getOptionValue(\"collections\").split(\",\"));\n                break;\n              }\n              case \"help\":\n              case \"usage\":\n                print(\"Package Manager\\n---------------\");\n                printGreen(\"./solr package add-repo <repository-name> <repository-url>\");\n                print(\"Add a repository to Solr.\");\n                print(\"\");\n                printGreen(\"./solr package install <package-name>[:<version>] \");\n                print(\"Install a package into Solr. This copies over the artifacts from the repository into Solr's internal package store and sets up classloader for this package to be used.\");\n                print(\"\");\n                printGreen(\"./solr package deploy <package-name>[:<version>] [-y] [--update] -collections <comma-separated-collections> [-p <param1>=<val1> -p <param2>=<val2> ...] \");\n                print(\"Bootstraps a previously installed package into the specified collections. It the package accepts parameters for its setup commands, they can be specified (as per package documentation).\");\n                print(\"\");\n                printGreen(\"./solr package list-installed\");\n                print(\"Print a list of packages installed in Solr.\");\n                print(\"\");\n                printGreen(\"./solr package list-available\");\n                print(\"Print a list of packages available in the repositories.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed -c <collection>\");\n                print(\"Print a list of packages deployed on a given collection.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed <package-name>\");\n                print(\"Print a list of collections on which a given package has been deployed.\");\n                print(\"\");\n                printGreen(\"./solr package undeploy <package-name> -collections <comma-separated-collections>\");\n                print(\"Undeploys a package from specified collection(s)\");\n                print(\"\\n\");\n                print(\"Note: (a) Please add '-solrUrl http://host:port' parameter if needed (usually on Windows).\");\n                print(\"      (b) Please make sure that all Solr nodes are started with '-Denable.packages=true' parameter.\");\n                print(\"\\n\");\n                break;\n              default:\n                throw new RuntimeException(\"Unrecognized command: \"+cmd);\n            };\n          } finally {\n            packageManager.close();\n          }\n        }\n      }\n      log.info(\"Finished: \"+cmd);\n\n    } catch (Exception ex) {\n      ex.printStackTrace(); // We need to print this since SolrCLI drops the stack trace in favour of brevity. Package tool should surely print full stacktraces!\n      throw ex;\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressForbidden(reason = \"We really need to print the stacktrace here, otherwise \"\n      + \"there shall be little else information to debug problems. Other SolrCLI tools \"\n      + \"don't print stack traces, hence special treatment is needed here.\")\n  protected void runImpl(CommandLine cli) throws Exception {\n    try {\n      solrUrl = cli.getOptionValues(\"solrUrl\")[cli.getOptionValues(\"solrUrl\").length-1];\n      solrBaseUrl = solrUrl.replaceAll(\"\\\\/solr$\", \"\"); // strip out ending \"/solr\"\n      log.info(\"Solr url: \"+solrUrl+\", solr base url: \"+solrBaseUrl);\n      String zkHost = getZkHost(cli);\n\n      log.info(\"ZK: \"+zkHost);\n      String cmd = cli.getArgList().size() == 0? \"help\": cli.getArgs()[0];\n\n      try (HttpSolrClient solrClient = new HttpSolrClient.Builder(solrBaseUrl).build()) {\n        if (cmd != null) {\n          packageManager = new PackageManager(solrClient, solrBaseUrl, zkHost); \n          try {\n            repositoryManager = new RepositoryManager(solrClient, packageManager);\n\n            switch (cmd) {\n              case \"add-repo\":\n                String repoName = cli.getArgs()[1];\n                String repoUrl = cli.getArgs()[2];\n                repositoryManager.addRepository(repoName, repoUrl);\n                PackageUtils.printGreen(\"Added repository: \" + repoName);\n                break;\n              case \"list-installed\":\n                PackageUtils.printGreen(\"Installed packages:\\n-----\");                \n                for (SolrPackageInstance pkg: packageManager.fetchInstalledPackageInstances()) {\n                  PackageUtils.printGreen(pkg);\n                }\n                break;\n              case \"list-available\":\n                PackageUtils.printGreen(\"Available packages:\\n-----\");\n                for (SolrPackage pkg: repositoryManager.getPackages()) {\n                  PackageUtils.printGreen(pkg.name + \" \\t\\t\"+pkg.description);\n                  for (SolrPackageRelease version: pkg.versions) {\n                    PackageUtils.printGreen(\"\\tVersion: \"+version.version);\n                  }\n                }\n                break;\n              case \"list-deployed\":\n                if (cli.hasOption('c')) {\n                  String collection = cli.getArgs()[1];\n                  Map<String, SolrPackageInstance> packages = packageManager.getPackagesDeployed(collection);\n                  PackageUtils.printGreen(\"Packages deployed on \" + collection + \":\");\n                  for (String packageName: packages.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + packages.get(packageName));                 \n                  }\n                } else {\n                  String packageName = cli.getArgs()[1];\n                  Map<String, String> deployedCollections = packageManager.getDeployedCollections(packageName);\n                  if (deployedCollections.isEmpty() == false) {\n                    PackageUtils.printGreen(\"Collections on which package \" + packageName + \" was deployed:\");\n                    for (String collection: deployedCollections.keySet()) {\n                      PackageUtils.printGreen(\"\\t\" + collection + \"(\"+packageName+\":\"+deployedCollections.get(collection)+\")\");\n                    }\n                  } else {\n                    PackageUtils.printGreen(\"Package \"+packageName+\" not deployed on any collection.\");\n                  }\n                }\n                break;\n              case \"install\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                repositoryManager.install(packageName, version);\n                PackageUtils.printGreen(packageName + \" installed.\");\n                break;\n              }\n              case \"deploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                boolean noprompt = cli.hasOption('y');\n                boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n                packageManager.deploy(packageName, version, PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                break;\n              }\n              case \"undeploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                if (parsedVersion.second() != null) {\n                  throw new SolrException(ErrorCode.BAD_REQUEST, \"Only package name expected, without a version. Actual: \" + cli.getArgList().get(1));\n                }\n                String packageName = parsedVersion.first();\n                packageManager.undeploy(packageName, cli.getOptionValue(\"collections\").split(\",\"));\n                break;\n              }\n              case \"help\":\n              case \"usage\":\n                print(\"Package Manager\\n---------------\");\n                printGreen(\"./solr package add-repo <repository-name> <repository-url>\");\n                print(\"Add a repository to Solr.\");\n                print(\"\");\n                printGreen(\"./solr package install <package-name>[:<version>] \");\n                print(\"Install a package into Solr. This copies over the artifacts from the repository into Solr's internal package store and sets up classloader for this package to be used.\");\n                print(\"\");\n                printGreen(\"./solr package deploy <package-name>[:<version>] [-y] [--update] -collections <comma-separated-collections> [-p <param1>=<val1> -p <param2>=<val2> ...] \");\n                print(\"Bootstraps a previously installed package into the specified collections. It the package accepts parameters for its setup commands, they can be specified (as per package documentation).\");\n                print(\"\");\n                printGreen(\"./solr package list-installed\");\n                print(\"Print a list of packages installed in Solr.\");\n                print(\"\");\n                printGreen(\"./solr package list-available\");\n                print(\"Print a list of packages available in the repositories.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed -c <collection>\");\n                print(\"Print a list of packages deployed on a given collection.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed <package-name>\");\n                print(\"Print a list of collections on which a given package has been deployed.\");\n                print(\"\");\n                printGreen(\"./solr package undeploy <package-name> -collections <comma-separated-collections>\");\n                print(\"Undeploys a package from specified collection(s)\");\n                print(\"\\n\");\n                print(\"Note: (a) Please add '-solrUrl http://host:port' parameter if needed (usually on Windows).\");\n                print(\"      (b) Please make sure that all Solr nodes are started with '-Denable.packages=true' parameter.\");\n                print(\"\\n\");\n                break;\n              default:\n                throw new RuntimeException(\"Unrecognized command: \"+cmd);\n            };\n          } finally {\n            packageManager.close();\n          }\n        }\n      }\n      log.info(\"Finished: \"+cmd);\n\n    } catch (Exception ex) {\n      ex.printStackTrace(); // We need to print this since SolrCLI drops the stack trace in favour of brevity. Package tool should surely print full stacktraces!\n      throw ex;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8f0a7504661c8e51be5c63e87f9d79a36d9116c","date":1578657638,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","sourceNew":"  @Override\n  @SuppressForbidden(reason = \"We really need to print the stacktrace here, otherwise \"\n      + \"there shall be little else information to debug problems. Other SolrCLI tools \"\n      + \"don't print stack traces, hence special treatment is needed here.\")\n  protected void runImpl(CommandLine cli) throws Exception {\n    try {\n      solrUrl = cli.getOptionValues(\"solrUrl\")[cli.getOptionValues(\"solrUrl\").length-1];\n      solrBaseUrl = solrUrl.replaceAll(\"\\\\/solr$\", \"\"); // strip out ending \"/solr\"\n      log.info(\"Solr url: \"+solrUrl+\", solr base url: \"+solrBaseUrl);\n      String zkHost = getZkHost(cli);\n\n      log.info(\"ZK: \"+zkHost);\n      String cmd = cli.getArgList().size() == 0? \"help\": cli.getArgs()[0];\n\n      try (HttpSolrClient solrClient = new HttpSolrClient.Builder(solrBaseUrl).build()) {\n        if (cmd != null) {\n          packageManager = new PackageManager(solrClient, solrBaseUrl, zkHost); \n          try {\n            repositoryManager = new RepositoryManager(solrClient, packageManager);\n\n            switch (cmd) {\n              case \"add-repo\":\n                String repoName = cli.getArgs()[1];\n                String repoUrl = cli.getArgs()[2];\n                repositoryManager.addRepository(repoName, repoUrl);\n                PackageUtils.printGreen(\"Added repository: \" + repoName);\n                break;\n              case \"add-key\":\n                String keyFilename = cli.getArgs()[1];\n                repositoryManager.addKey(FileUtils.readFileToByteArray(new File(keyFilename)), Paths.get(keyFilename).getFileName().toString());\n                break;\n              case \"list-installed\":\n                PackageUtils.printGreen(\"Installed packages:\\n-----\");                \n                for (SolrPackageInstance pkg: packageManager.fetchInstalledPackageInstances()) {\n                  PackageUtils.printGreen(pkg);\n                }\n                break;\n              case \"list-available\":\n                PackageUtils.printGreen(\"Available packages:\\n-----\");\n                for (SolrPackage pkg: repositoryManager.getPackages()) {\n                  PackageUtils.printGreen(pkg.name + \" \\t\\t\"+pkg.description);\n                  for (SolrPackageRelease version: pkg.versions) {\n                    PackageUtils.printGreen(\"\\tVersion: \"+version.version);\n                  }\n                }\n                break;\n              case \"list-deployed\":\n                if (cli.hasOption('c')) {\n                  String collection = cli.getArgs()[1];\n                  Map<String, SolrPackageInstance> packages = packageManager.getPackagesDeployed(collection);\n                  PackageUtils.printGreen(\"Packages deployed on \" + collection + \":\");\n                  for (String packageName: packages.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + packages.get(packageName));                 \n                  }\n                } else {\n                  String packageName = cli.getArgs()[1];\n                  Map<String, String> deployedCollections = packageManager.getDeployedCollections(packageName);\n                  if (deployedCollections.isEmpty() == false) {\n                    PackageUtils.printGreen(\"Collections on which package \" + packageName + \" was deployed:\");\n                    for (String collection: deployedCollections.keySet()) {\n                      PackageUtils.printGreen(\"\\t\" + collection + \"(\"+packageName+\":\"+deployedCollections.get(collection)+\")\");\n                    }\n                  } else {\n                    PackageUtils.printGreen(\"Package \"+packageName+\" not deployed on any collection.\");\n                  }\n                }\n                break;\n              case \"install\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                repositoryManager.install(packageName, version);\n                PackageUtils.printGreen(packageName + \" installed.\");\n                break;\n              }\n              case \"deploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                boolean noprompt = cli.hasOption('y');\n                boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n                packageManager.deploy(packageName, version, PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                break;\n              }\n              case \"undeploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                if (parsedVersion.second() != null) {\n                  throw new SolrException(ErrorCode.BAD_REQUEST, \"Only package name expected, without a version. Actual: \" + cli.getArgList().get(1));\n                }\n                String packageName = parsedVersion.first();\n                packageManager.undeploy(packageName, cli.getOptionValue(\"collections\").split(\",\"));\n                break;\n              }\n              case \"help\":\n              case \"usage\":\n                print(\"Package Manager\\n---------------\");\n                printGreen(\"./solr package add-repo <repository-name> <repository-url>\");\n                print(\"Add a repository to Solr.\");\n                print(\"\");\n                printGreen(\"./solr package install <package-name>[:<version>] \");\n                print(\"Install a package into Solr. This copies over the artifacts from the repository into Solr's internal package store and sets up classloader for this package to be used.\");\n                print(\"\");\n                printGreen(\"./solr package deploy <package-name>[:<version>] [-y] [--update] -collections <comma-separated-collections> [-p <param1>=<val1> -p <param2>=<val2> ...] \");\n                print(\"Bootstraps a previously installed package into the specified collections. It the package accepts parameters for its setup commands, they can be specified (as per package documentation).\");\n                print(\"\");\n                printGreen(\"./solr package list-installed\");\n                print(\"Print a list of packages installed in Solr.\");\n                print(\"\");\n                printGreen(\"./solr package list-available\");\n                print(\"Print a list of packages available in the repositories.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed -c <collection>\");\n                print(\"Print a list of packages deployed on a given collection.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed <package-name>\");\n                print(\"Print a list of collections on which a given package has been deployed.\");\n                print(\"\");\n                printGreen(\"./solr package undeploy <package-name> -collections <comma-separated-collections>\");\n                print(\"Undeploys a package from specified collection(s)\");\n                print(\"\\n\");\n                print(\"Note: (a) Please add '-solrUrl http://host:port' parameter if needed (usually on Windows).\");\n                print(\"      (b) Please make sure that all Solr nodes are started with '-Denable.packages=true' parameter.\");\n                print(\"\\n\");\n                break;\n              default:\n                throw new RuntimeException(\"Unrecognized command: \"+cmd);\n            };\n          } finally {\n            packageManager.close();\n          }\n        }\n      }\n      log.info(\"Finished: \"+cmd);\n\n    } catch (Exception ex) {\n      ex.printStackTrace(); // We need to print this since SolrCLI drops the stack trace in favour of brevity. Package tool should surely print full stacktraces!\n      throw ex;\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressForbidden(reason = \"We really need to print the stacktrace here, otherwise \"\n      + \"there shall be little else information to debug problems. Other SolrCLI tools \"\n      + \"don't print stack traces, hence special treatment is needed here.\")\n  protected void runImpl(CommandLine cli) throws Exception {\n    try {\n      solrUrl = cli.getOptionValues(\"solrUrl\")[cli.getOptionValues(\"solrUrl\").length-1];\n      solrBaseUrl = solrUrl.replaceAll(\"\\\\/solr$\", \"\"); // strip out ending \"/solr\"\n      log.info(\"Solr url: \"+solrUrl+\", solr base url: \"+solrBaseUrl);\n      String zkHost = getZkHost(cli);\n\n      log.info(\"ZK: \"+zkHost);\n      String cmd = cli.getArgList().size() == 0? \"help\": cli.getArgs()[0];\n\n      try (HttpSolrClient solrClient = new HttpSolrClient.Builder(solrBaseUrl).build()) {\n        if (cmd != null) {\n          packageManager = new PackageManager(solrClient, solrBaseUrl, zkHost); \n          try {\n            repositoryManager = new RepositoryManager(solrClient, packageManager);\n\n            switch (cmd) {\n              case \"add-repo\":\n                String repoName = cli.getArgs()[1];\n                String repoUrl = cli.getArgs()[2];\n                repositoryManager.addRepository(repoName, repoUrl);\n                PackageUtils.printGreen(\"Added repository: \" + repoName);\n                break;\n              case \"list-installed\":\n                PackageUtils.printGreen(\"Installed packages:\\n-----\");                \n                for (SolrPackageInstance pkg: packageManager.fetchInstalledPackageInstances()) {\n                  PackageUtils.printGreen(pkg);\n                }\n                break;\n              case \"list-available\":\n                PackageUtils.printGreen(\"Available packages:\\n-----\");\n                for (SolrPackage pkg: repositoryManager.getPackages()) {\n                  PackageUtils.printGreen(pkg.name + \" \\t\\t\"+pkg.description);\n                  for (SolrPackageRelease version: pkg.versions) {\n                    PackageUtils.printGreen(\"\\tVersion: \"+version.version);\n                  }\n                }\n                break;\n              case \"list-deployed\":\n                if (cli.hasOption('c')) {\n                  String collection = cli.getArgs()[1];\n                  Map<String, SolrPackageInstance> packages = packageManager.getPackagesDeployed(collection);\n                  PackageUtils.printGreen(\"Packages deployed on \" + collection + \":\");\n                  for (String packageName: packages.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + packages.get(packageName));                 \n                  }\n                } else {\n                  String packageName = cli.getArgs()[1];\n                  Map<String, String> deployedCollections = packageManager.getDeployedCollections(packageName);\n                  if (deployedCollections.isEmpty() == false) {\n                    PackageUtils.printGreen(\"Collections on which package \" + packageName + \" was deployed:\");\n                    for (String collection: deployedCollections.keySet()) {\n                      PackageUtils.printGreen(\"\\t\" + collection + \"(\"+packageName+\":\"+deployedCollections.get(collection)+\")\");\n                    }\n                  } else {\n                    PackageUtils.printGreen(\"Package \"+packageName+\" not deployed on any collection.\");\n                  }\n                }\n                break;\n              case \"install\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                repositoryManager.install(packageName, version);\n                PackageUtils.printGreen(packageName + \" installed.\");\n                break;\n              }\n              case \"deploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                boolean noprompt = cli.hasOption('y');\n                boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n                packageManager.deploy(packageName, version, PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                break;\n              }\n              case \"undeploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                if (parsedVersion.second() != null) {\n                  throw new SolrException(ErrorCode.BAD_REQUEST, \"Only package name expected, without a version. Actual: \" + cli.getArgList().get(1));\n                }\n                String packageName = parsedVersion.first();\n                packageManager.undeploy(packageName, cli.getOptionValue(\"collections\").split(\",\"));\n                break;\n              }\n              case \"help\":\n              case \"usage\":\n                print(\"Package Manager\\n---------------\");\n                printGreen(\"./solr package add-repo <repository-name> <repository-url>\");\n                print(\"Add a repository to Solr.\");\n                print(\"\");\n                printGreen(\"./solr package install <package-name>[:<version>] \");\n                print(\"Install a package into Solr. This copies over the artifacts from the repository into Solr's internal package store and sets up classloader for this package to be used.\");\n                print(\"\");\n                printGreen(\"./solr package deploy <package-name>[:<version>] [-y] [--update] -collections <comma-separated-collections> [-p <param1>=<val1> -p <param2>=<val2> ...] \");\n                print(\"Bootstraps a previously installed package into the specified collections. It the package accepts parameters for its setup commands, they can be specified (as per package documentation).\");\n                print(\"\");\n                printGreen(\"./solr package list-installed\");\n                print(\"Print a list of packages installed in Solr.\");\n                print(\"\");\n                printGreen(\"./solr package list-available\");\n                print(\"Print a list of packages available in the repositories.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed -c <collection>\");\n                print(\"Print a list of packages deployed on a given collection.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed <package-name>\");\n                print(\"Print a list of collections on which a given package has been deployed.\");\n                print(\"\");\n                printGreen(\"./solr package undeploy <package-name> -collections <comma-separated-collections>\");\n                print(\"Undeploys a package from specified collection(s)\");\n                print(\"\\n\");\n                print(\"Note: (a) Please add '-solrUrl http://host:port' parameter if needed (usually on Windows).\");\n                print(\"      (b) Please make sure that all Solr nodes are started with '-Denable.packages=true' parameter.\");\n                print(\"\\n\");\n                break;\n              default:\n                throw new RuntimeException(\"Unrecognized command: \"+cmd);\n            };\n          } finally {\n            packageManager.close();\n          }\n        }\n      }\n      log.info(\"Finished: \"+cmd);\n\n    } catch (Exception ex) {\n      ex.printStackTrace(); // We need to print this since SolrCLI drops the stack trace in favour of brevity. Package tool should surely print full stacktraces!\n      throw ex;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","sourceNew":"  @Override\n  @SuppressForbidden(reason = \"We really need to print the stacktrace here, otherwise \"\n      + \"there shall be little else information to debug problems. Other SolrCLI tools \"\n      + \"don't print stack traces, hence special treatment is needed here.\")\n  protected void runImpl(CommandLine cli) throws Exception {\n    try {\n      solrUrl = cli.getOptionValues(\"solrUrl\")[cli.getOptionValues(\"solrUrl\").length-1];\n      solrBaseUrl = solrUrl.replaceAll(\"\\\\/solr$\", \"\"); // strip out ending \"/solr\"\n      log.info(\"Solr url:{}, solr base url: {}\", solrUrl, solrBaseUrl);\n      String zkHost = getZkHost(cli);\n\n      log.info(\"ZK: {}\", zkHost);\n      String cmd = cli.getArgList().size() == 0? \"help\": cli.getArgs()[0];\n\n      try (HttpSolrClient solrClient = new HttpSolrClient.Builder(solrBaseUrl).build()) {\n        if (cmd != null) {\n          packageManager = new PackageManager(solrClient, solrBaseUrl, zkHost); \n          try {\n            repositoryManager = new RepositoryManager(solrClient, packageManager);\n\n            switch (cmd) {\n              case \"add-repo\":\n                String repoName = cli.getArgs()[1];\n                String repoUrl = cli.getArgs()[2];\n                repositoryManager.addRepository(repoName, repoUrl);\n                PackageUtils.printGreen(\"Added repository: \" + repoName);\n                break;\n              case \"add-key\":\n                String keyFilename = cli.getArgs()[1];\n                repositoryManager.addKey(FileUtils.readFileToByteArray(new File(keyFilename)), Paths.get(keyFilename).getFileName().toString());\n                break;\n              case \"list-installed\":\n                PackageUtils.printGreen(\"Installed packages:\\n-----\");                \n                for (SolrPackageInstance pkg: packageManager.fetchInstalledPackageInstances()) {\n                  PackageUtils.printGreen(pkg);\n                }\n                break;\n              case \"list-available\":\n                PackageUtils.printGreen(\"Available packages:\\n-----\");\n                for (SolrPackage pkg: repositoryManager.getPackages()) {\n                  PackageUtils.printGreen(pkg.name + \" \\t\\t\"+pkg.description);\n                  for (SolrPackageRelease version: pkg.versions) {\n                    PackageUtils.printGreen(\"\\tVersion: \"+version.version);\n                  }\n                }\n                break;\n              case \"list-deployed\":\n                if (cli.hasOption('c')) {\n                  String collection = cli.getArgs()[1];\n                  Map<String, SolrPackageInstance> packages = packageManager.getPackagesDeployed(collection);\n                  PackageUtils.printGreen(\"Packages deployed on \" + collection + \":\");\n                  for (String packageName: packages.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + packages.get(packageName));                 \n                  }\n                } else {\n                  String packageName = cli.getArgs()[1];\n                  Map<String, String> deployedCollections = packageManager.getDeployedCollections(packageName);\n                  if (deployedCollections.isEmpty() == false) {\n                    PackageUtils.printGreen(\"Collections on which package \" + packageName + \" was deployed:\");\n                    for (String collection: deployedCollections.keySet()) {\n                      PackageUtils.printGreen(\"\\t\" + collection + \"(\"+packageName+\":\"+deployedCollections.get(collection)+\")\");\n                    }\n                  } else {\n                    PackageUtils.printGreen(\"Package \"+packageName+\" not deployed on any collection.\");\n                  }\n                }\n                break;\n              case \"install\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                repositoryManager.install(packageName, version);\n                PackageUtils.printGreen(packageName + \" installed.\");\n                break;\n              }\n              case \"deploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                boolean noprompt = cli.hasOption('y');\n                boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n                packageManager.deploy(packageName, version, PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                break;\n              }\n              case \"undeploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                if (parsedVersion.second() != null) {\n                  throw new SolrException(ErrorCode.BAD_REQUEST, \"Only package name expected, without a version. Actual: \" + cli.getArgList().get(1));\n                }\n                String packageName = parsedVersion.first();\n                packageManager.undeploy(packageName, cli.getOptionValue(\"collections\").split(\",\"));\n                break;\n              }\n              case \"help\":\n              case \"usage\":\n                print(\"Package Manager\\n---------------\");\n                printGreen(\"./solr package add-repo <repository-name> <repository-url>\");\n                print(\"Add a repository to Solr.\");\n                print(\"\");\n                printGreen(\"./solr package install <package-name>[:<version>] \");\n                print(\"Install a package into Solr. This copies over the artifacts from the repository into Solr's internal package store and sets up classloader for this package to be used.\");\n                print(\"\");\n                printGreen(\"./solr package deploy <package-name>[:<version>] [-y] [--update] -collections <comma-separated-collections> [-p <param1>=<val1> -p <param2>=<val2> ...] \");\n                print(\"Bootstraps a previously installed package into the specified collections. It the package accepts parameters for its setup commands, they can be specified (as per package documentation).\");\n                print(\"\");\n                printGreen(\"./solr package list-installed\");\n                print(\"Print a list of packages installed in Solr.\");\n                print(\"\");\n                printGreen(\"./solr package list-available\");\n                print(\"Print a list of packages available in the repositories.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed -c <collection>\");\n                print(\"Print a list of packages deployed on a given collection.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed <package-name>\");\n                print(\"Print a list of collections on which a given package has been deployed.\");\n                print(\"\");\n                printGreen(\"./solr package undeploy <package-name> -collections <comma-separated-collections>\");\n                print(\"Undeploys a package from specified collection(s)\");\n                print(\"\\n\");\n                print(\"Note: (a) Please add '-solrUrl http://host:port' parameter if needed (usually on Windows).\");\n                print(\"      (b) Please make sure that all Solr nodes are started with '-Denable.packages=true' parameter.\");\n                print(\"\\n\");\n                break;\n              default:\n                throw new RuntimeException(\"Unrecognized command: \"+cmd);\n            };\n          } finally {\n            packageManager.close();\n          }\n        }\n      }\n      log.info(\"Finished: {}\", cmd);\n\n    } catch (Exception ex) {\n      ex.printStackTrace(); // We need to print this since SolrCLI drops the stack trace in favour of brevity. Package tool should surely print full stacktraces!\n      throw ex;\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressForbidden(reason = \"We really need to print the stacktrace here, otherwise \"\n      + \"there shall be little else information to debug problems. Other SolrCLI tools \"\n      + \"don't print stack traces, hence special treatment is needed here.\")\n  protected void runImpl(CommandLine cli) throws Exception {\n    try {\n      solrUrl = cli.getOptionValues(\"solrUrl\")[cli.getOptionValues(\"solrUrl\").length-1];\n      solrBaseUrl = solrUrl.replaceAll(\"\\\\/solr$\", \"\"); // strip out ending \"/solr\"\n      log.info(\"Solr url: \"+solrUrl+\", solr base url: \"+solrBaseUrl);\n      String zkHost = getZkHost(cli);\n\n      log.info(\"ZK: \"+zkHost);\n      String cmd = cli.getArgList().size() == 0? \"help\": cli.getArgs()[0];\n\n      try (HttpSolrClient solrClient = new HttpSolrClient.Builder(solrBaseUrl).build()) {\n        if (cmd != null) {\n          packageManager = new PackageManager(solrClient, solrBaseUrl, zkHost); \n          try {\n            repositoryManager = new RepositoryManager(solrClient, packageManager);\n\n            switch (cmd) {\n              case \"add-repo\":\n                String repoName = cli.getArgs()[1];\n                String repoUrl = cli.getArgs()[2];\n                repositoryManager.addRepository(repoName, repoUrl);\n                PackageUtils.printGreen(\"Added repository: \" + repoName);\n                break;\n              case \"add-key\":\n                String keyFilename = cli.getArgs()[1];\n                repositoryManager.addKey(FileUtils.readFileToByteArray(new File(keyFilename)), Paths.get(keyFilename).getFileName().toString());\n                break;\n              case \"list-installed\":\n                PackageUtils.printGreen(\"Installed packages:\\n-----\");                \n                for (SolrPackageInstance pkg: packageManager.fetchInstalledPackageInstances()) {\n                  PackageUtils.printGreen(pkg);\n                }\n                break;\n              case \"list-available\":\n                PackageUtils.printGreen(\"Available packages:\\n-----\");\n                for (SolrPackage pkg: repositoryManager.getPackages()) {\n                  PackageUtils.printGreen(pkg.name + \" \\t\\t\"+pkg.description);\n                  for (SolrPackageRelease version: pkg.versions) {\n                    PackageUtils.printGreen(\"\\tVersion: \"+version.version);\n                  }\n                }\n                break;\n              case \"list-deployed\":\n                if (cli.hasOption('c')) {\n                  String collection = cli.getArgs()[1];\n                  Map<String, SolrPackageInstance> packages = packageManager.getPackagesDeployed(collection);\n                  PackageUtils.printGreen(\"Packages deployed on \" + collection + \":\");\n                  for (String packageName: packages.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + packages.get(packageName));                 \n                  }\n                } else {\n                  String packageName = cli.getArgs()[1];\n                  Map<String, String> deployedCollections = packageManager.getDeployedCollections(packageName);\n                  if (deployedCollections.isEmpty() == false) {\n                    PackageUtils.printGreen(\"Collections on which package \" + packageName + \" was deployed:\");\n                    for (String collection: deployedCollections.keySet()) {\n                      PackageUtils.printGreen(\"\\t\" + collection + \"(\"+packageName+\":\"+deployedCollections.get(collection)+\")\");\n                    }\n                  } else {\n                    PackageUtils.printGreen(\"Package \"+packageName+\" not deployed on any collection.\");\n                  }\n                }\n                break;\n              case \"install\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                repositoryManager.install(packageName, version);\n                PackageUtils.printGreen(packageName + \" installed.\");\n                break;\n              }\n              case \"deploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                boolean noprompt = cli.hasOption('y');\n                boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n                packageManager.deploy(packageName, version, PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                break;\n              }\n              case \"undeploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                if (parsedVersion.second() != null) {\n                  throw new SolrException(ErrorCode.BAD_REQUEST, \"Only package name expected, without a version. Actual: \" + cli.getArgList().get(1));\n                }\n                String packageName = parsedVersion.first();\n                packageManager.undeploy(packageName, cli.getOptionValue(\"collections\").split(\",\"));\n                break;\n              }\n              case \"help\":\n              case \"usage\":\n                print(\"Package Manager\\n---------------\");\n                printGreen(\"./solr package add-repo <repository-name> <repository-url>\");\n                print(\"Add a repository to Solr.\");\n                print(\"\");\n                printGreen(\"./solr package install <package-name>[:<version>] \");\n                print(\"Install a package into Solr. This copies over the artifacts from the repository into Solr's internal package store and sets up classloader for this package to be used.\");\n                print(\"\");\n                printGreen(\"./solr package deploy <package-name>[:<version>] [-y] [--update] -collections <comma-separated-collections> [-p <param1>=<val1> -p <param2>=<val2> ...] \");\n                print(\"Bootstraps a previously installed package into the specified collections. It the package accepts parameters for its setup commands, they can be specified (as per package documentation).\");\n                print(\"\");\n                printGreen(\"./solr package list-installed\");\n                print(\"Print a list of packages installed in Solr.\");\n                print(\"\");\n                printGreen(\"./solr package list-available\");\n                print(\"Print a list of packages available in the repositories.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed -c <collection>\");\n                print(\"Print a list of packages deployed on a given collection.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed <package-name>\");\n                print(\"Print a list of collections on which a given package has been deployed.\");\n                print(\"\");\n                printGreen(\"./solr package undeploy <package-name> -collections <comma-separated-collections>\");\n                print(\"Undeploys a package from specified collection(s)\");\n                print(\"\\n\");\n                print(\"Note: (a) Please add '-solrUrl http://host:port' parameter if needed (usually on Windows).\");\n                print(\"      (b) Please make sure that all Solr nodes are started with '-Denable.packages=true' parameter.\");\n                print(\"\\n\");\n                break;\n              default:\n                throw new RuntimeException(\"Unrecognized command: \"+cmd);\n            };\n          } finally {\n            packageManager.close();\n          }\n        }\n      }\n      log.info(\"Finished: \"+cmd);\n\n    } catch (Exception ex) {\n      ex.printStackTrace(); // We need to print this since SolrCLI drops the stack trace in favour of brevity. Package tool should surely print full stacktraces!\n      throw ex;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a688687cbff91a8f44c95d31697c3ba8a47c8c25","date":1593512440,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","sourceNew":"  @Override\n  @SuppressForbidden(reason = \"We really need to print the stacktrace here, otherwise \"\n      + \"there shall be little else information to debug problems. Other SolrCLI tools \"\n      + \"don't print stack traces, hence special treatment is needed here.\")\n  protected void runImpl(CommandLine cli) throws Exception {\n    try {\n      solrUrl = cli.getOptionValues(\"solrUrl\")[cli.getOptionValues(\"solrUrl\").length-1];\n      solrBaseUrl = solrUrl.replaceAll(\"\\\\/solr$\", \"\"); // strip out ending \"/solr\"\n      log.info(\"Solr url:{}, solr base url: {}\", solrUrl, solrBaseUrl);\n      String zkHost = getZkHost(cli);\n\n      log.info(\"ZK: {}\", zkHost);\n      String cmd = cli.getArgList().size() == 0? \"help\": cli.getArgs()[0];\n\n      try (HttpSolrClient solrClient = new HttpSolrClient.Builder(solrBaseUrl).build()) {\n        if (cmd != null) {\n          packageManager = new PackageManager(solrClient, solrBaseUrl, zkHost); \n          try {\n            repositoryManager = new RepositoryManager(solrClient, packageManager);\n\n            switch (cmd) {\n              case \"add-repo\":\n                String repoName = cli.getArgs()[1];\n                String repoUrl = cli.getArgs()[2];\n                repositoryManager.addRepository(repoName, repoUrl);\n                PackageUtils.printGreen(\"Added repository: \" + repoName);\n                break;\n              case \"add-key\":\n                String keyFilename = cli.getArgs()[1];\n                repositoryManager.addKey(FileUtils.readFileToByteArray(new File(keyFilename)), Paths.get(keyFilename).getFileName().toString());\n                break;\n              case \"list-installed\":\n                PackageUtils.printGreen(\"Installed packages:\\n-----\");                \n                for (SolrPackageInstance pkg: packageManager.fetchInstalledPackageInstances()) {\n                  PackageUtils.printGreen(pkg);\n                }\n                break;\n              case \"list-available\":\n                PackageUtils.printGreen(\"Available packages:\\n-----\");\n                for (SolrPackage pkg: repositoryManager.getPackages()) {\n                  PackageUtils.printGreen(pkg.name + \" \\t\\t\"+pkg.description);\n                  for (SolrPackageRelease version: pkg.versions) {\n                    PackageUtils.printGreen(\"\\tVersion: \"+version.version);\n                  }\n                }\n                break;\n              case \"list-deployed\":\n                if (cli.hasOption('c')) {\n                  String collection = cli.getArgs()[1];\n                  Map<String, SolrPackageInstance> packages = packageManager.getPackagesDeployed(collection);\n                  PackageUtils.printGreen(\"Packages deployed on \" + collection + \":\");\n                  for (String packageName: packages.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + packages.get(packageName));                 \n                  }\n                } else {\n                  String packageName = cli.getArgs()[1];\n                  Map<String, String> deployedCollections = packageManager.getDeployedCollections(packageName);\n                  if (deployedCollections.isEmpty() == false) {\n                    PackageUtils.printGreen(\"Collections on which package \" + packageName + \" was deployed:\");\n                    for (String collection: deployedCollections.keySet()) {\n                      PackageUtils.printGreen(\"\\t\" + collection + \"(\"+packageName+\":\"+deployedCollections.get(collection)+\")\");\n                    }\n                  } else {\n                    PackageUtils.printGreen(\"Package \"+packageName+\" not deployed on any collection.\");\n                  }\n                }\n                break;\n              case \"install\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                repositoryManager.install(packageName, version);\n                PackageUtils.printGreen(packageName + \" installed.\");\n                break;\n              }\n              case \"deploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                boolean noprompt = cli.hasOption('y');\n                boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n                String collections[] = cli.hasOption(\"collections\")? PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")): new String[] {};\n                packageManager.deploy(packageName, version, collections, cli.hasOption(\"cluster\"), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                break;\n              }\n              case \"undeploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                if (parsedVersion.second() != null) {\n                  throw new SolrException(ErrorCode.BAD_REQUEST, \"Only package name expected, without a version. Actual: \" + cli.getArgList().get(1));\n                }\n                String packageName = parsedVersion.first();\n                String collections[] = cli.hasOption(\"collections\")? PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")): new String[] {};\n                packageManager.undeploy(packageName, collections, cli.hasOption(\"cluster\"));\n                break;\n              }\n              case \"help\":\n              case \"usage\":\n                print(\"Package Manager\\n---------------\");\n                printGreen(\"./solr package add-repo <repository-name> <repository-url>\");\n                print(\"Add a repository to Solr.\");\n                print(\"\");\n                printGreen(\"./solr package install <package-name>[:<version>] \");\n                print(\"Install a package into Solr. This copies over the artifacts from the repository into Solr's internal package store and sets up classloader for this package to be used.\");\n                print(\"\");\n                printGreen(\"./solr package deploy <package-name>[:<version>] [-y] [--update] -collections <comma-separated-collections> [-p <param1>=<val1> -p <param2>=<val2> ...] \");\n                print(\"Bootstraps a previously installed package into the specified collections. It the package accepts parameters for its setup commands, they can be specified (as per package documentation).\");\n                print(\"\");\n                printGreen(\"./solr package list-installed\");\n                print(\"Print a list of packages installed in Solr.\");\n                print(\"\");\n                printGreen(\"./solr package list-available\");\n                print(\"Print a list of packages available in the repositories.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed -c <collection>\");\n                print(\"Print a list of packages deployed on a given collection.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed <package-name>\");\n                print(\"Print a list of collections on which a given package has been deployed.\");\n                print(\"\");\n                printGreen(\"./solr package undeploy <package-name> -collections <comma-separated-collections>\");\n                print(\"Undeploys a package from specified collection(s)\");\n                print(\"\\n\");\n                print(\"Note: (a) Please add '-solrUrl http://host:port' parameter if needed (usually on Windows).\");\n                print(\"      (b) Please make sure that all Solr nodes are started with '-Denable.packages=true' parameter.\");\n                print(\"\\n\");\n                break;\n              default:\n                throw new RuntimeException(\"Unrecognized command: \"+cmd);\n            };\n          } finally {\n            packageManager.close();\n          }\n        }\n      }\n      log.info(\"Finished: {}\", cmd);\n\n    } catch (Exception ex) {\n      ex.printStackTrace(); // We need to print this since SolrCLI drops the stack trace in favour of brevity. Package tool should surely print full stacktraces!\n      throw ex;\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressForbidden(reason = \"We really need to print the stacktrace here, otherwise \"\n      + \"there shall be little else information to debug problems. Other SolrCLI tools \"\n      + \"don't print stack traces, hence special treatment is needed here.\")\n  protected void runImpl(CommandLine cli) throws Exception {\n    try {\n      solrUrl = cli.getOptionValues(\"solrUrl\")[cli.getOptionValues(\"solrUrl\").length-1];\n      solrBaseUrl = solrUrl.replaceAll(\"\\\\/solr$\", \"\"); // strip out ending \"/solr\"\n      log.info(\"Solr url:{}, solr base url: {}\", solrUrl, solrBaseUrl);\n      String zkHost = getZkHost(cli);\n\n      log.info(\"ZK: {}\", zkHost);\n      String cmd = cli.getArgList().size() == 0? \"help\": cli.getArgs()[0];\n\n      try (HttpSolrClient solrClient = new HttpSolrClient.Builder(solrBaseUrl).build()) {\n        if (cmd != null) {\n          packageManager = new PackageManager(solrClient, solrBaseUrl, zkHost); \n          try {\n            repositoryManager = new RepositoryManager(solrClient, packageManager);\n\n            switch (cmd) {\n              case \"add-repo\":\n                String repoName = cli.getArgs()[1];\n                String repoUrl = cli.getArgs()[2];\n                repositoryManager.addRepository(repoName, repoUrl);\n                PackageUtils.printGreen(\"Added repository: \" + repoName);\n                break;\n              case \"add-key\":\n                String keyFilename = cli.getArgs()[1];\n                repositoryManager.addKey(FileUtils.readFileToByteArray(new File(keyFilename)), Paths.get(keyFilename).getFileName().toString());\n                break;\n              case \"list-installed\":\n                PackageUtils.printGreen(\"Installed packages:\\n-----\");                \n                for (SolrPackageInstance pkg: packageManager.fetchInstalledPackageInstances()) {\n                  PackageUtils.printGreen(pkg);\n                }\n                break;\n              case \"list-available\":\n                PackageUtils.printGreen(\"Available packages:\\n-----\");\n                for (SolrPackage pkg: repositoryManager.getPackages()) {\n                  PackageUtils.printGreen(pkg.name + \" \\t\\t\"+pkg.description);\n                  for (SolrPackageRelease version: pkg.versions) {\n                    PackageUtils.printGreen(\"\\tVersion: \"+version.version);\n                  }\n                }\n                break;\n              case \"list-deployed\":\n                if (cli.hasOption('c')) {\n                  String collection = cli.getArgs()[1];\n                  Map<String, SolrPackageInstance> packages = packageManager.getPackagesDeployed(collection);\n                  PackageUtils.printGreen(\"Packages deployed on \" + collection + \":\");\n                  for (String packageName: packages.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + packages.get(packageName));                 \n                  }\n                } else {\n                  String packageName = cli.getArgs()[1];\n                  Map<String, String> deployedCollections = packageManager.getDeployedCollections(packageName);\n                  if (deployedCollections.isEmpty() == false) {\n                    PackageUtils.printGreen(\"Collections on which package \" + packageName + \" was deployed:\");\n                    for (String collection: deployedCollections.keySet()) {\n                      PackageUtils.printGreen(\"\\t\" + collection + \"(\"+packageName+\":\"+deployedCollections.get(collection)+\")\");\n                    }\n                  } else {\n                    PackageUtils.printGreen(\"Package \"+packageName+\" not deployed on any collection.\");\n                  }\n                }\n                break;\n              case \"install\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                repositoryManager.install(packageName, version);\n                PackageUtils.printGreen(packageName + \" installed.\");\n                break;\n              }\n              case \"deploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                boolean noprompt = cli.hasOption('y');\n                boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n                packageManager.deploy(packageName, version, PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                break;\n              }\n              case \"undeploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                if (parsedVersion.second() != null) {\n                  throw new SolrException(ErrorCode.BAD_REQUEST, \"Only package name expected, without a version. Actual: \" + cli.getArgList().get(1));\n                }\n                String packageName = parsedVersion.first();\n                packageManager.undeploy(packageName, cli.getOptionValue(\"collections\").split(\",\"));\n                break;\n              }\n              case \"help\":\n              case \"usage\":\n                print(\"Package Manager\\n---------------\");\n                printGreen(\"./solr package add-repo <repository-name> <repository-url>\");\n                print(\"Add a repository to Solr.\");\n                print(\"\");\n                printGreen(\"./solr package install <package-name>[:<version>] \");\n                print(\"Install a package into Solr. This copies over the artifacts from the repository into Solr's internal package store and sets up classloader for this package to be used.\");\n                print(\"\");\n                printGreen(\"./solr package deploy <package-name>[:<version>] [-y] [--update] -collections <comma-separated-collections> [-p <param1>=<val1> -p <param2>=<val2> ...] \");\n                print(\"Bootstraps a previously installed package into the specified collections. It the package accepts parameters for its setup commands, they can be specified (as per package documentation).\");\n                print(\"\");\n                printGreen(\"./solr package list-installed\");\n                print(\"Print a list of packages installed in Solr.\");\n                print(\"\");\n                printGreen(\"./solr package list-available\");\n                print(\"Print a list of packages available in the repositories.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed -c <collection>\");\n                print(\"Print a list of packages deployed on a given collection.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed <package-name>\");\n                print(\"Print a list of collections on which a given package has been deployed.\");\n                print(\"\");\n                printGreen(\"./solr package undeploy <package-name> -collections <comma-separated-collections>\");\n                print(\"Undeploys a package from specified collection(s)\");\n                print(\"\\n\");\n                print(\"Note: (a) Please add '-solrUrl http://host:port' parameter if needed (usually on Windows).\");\n                print(\"      (b) Please make sure that all Solr nodes are started with '-Denable.packages=true' parameter.\");\n                print(\"\\n\");\n                break;\n              default:\n                throw new RuntimeException(\"Unrecognized command: \"+cmd);\n            };\n          } finally {\n            packageManager.close();\n          }\n        }\n      }\n      log.info(\"Finished: {}\", cmd);\n\n    } catch (Exception ex) {\n      ex.printStackTrace(); // We need to print this since SolrCLI drops the stack trace in favour of brevity. Package tool should surely print full stacktraces!\n      throw ex;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ea3ef3f76ecd22ead5b83d015adf8c16476a0f4","date":1594087785,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","sourceNew":"  @Override\n  @SuppressForbidden(reason = \"We really need to print the stacktrace here, otherwise \"\n      + \"there shall be little else information to debug problems. Other SolrCLI tools \"\n      + \"don't print stack traces, hence special treatment is needed here.\")\n  protected void runImpl(CommandLine cli) throws Exception {\n    try {\n      solrUrl = cli.getOptionValues(\"solrUrl\")[cli.getOptionValues(\"solrUrl\").length-1];\n      solrBaseUrl = solrUrl.replaceAll(\"\\\\/solr$\", \"\"); // strip out ending \"/solr\"\n      log.info(\"Solr url:{}, solr base url: {}\", solrUrl, solrBaseUrl);\n      String zkHost = getZkHost(cli);\n\n      log.info(\"ZK: {}\", zkHost);\n      String cmd = cli.getArgList().size() == 0? \"help\": cli.getArgs()[0];\n\n      try (HttpSolrClient solrClient = new HttpSolrClient.Builder(solrBaseUrl).build()) {\n        if (cmd != null) {\n          packageManager = new PackageManager(solrClient, solrBaseUrl, zkHost); \n          try {\n            repositoryManager = new RepositoryManager(solrClient, packageManager);\n\n            switch (cmd) {\n              case \"add-repo\":\n                String repoName = cli.getArgs()[1];\n                String repoUrl = cli.getArgs()[2];\n                repositoryManager.addRepository(repoName, repoUrl);\n                PackageUtils.printGreen(\"Added repository: \" + repoName);\n                break;\n              case \"add-key\":\n                String keyFilename = cli.getArgs()[1];\n                repositoryManager.addKey(FileUtils.readFileToByteArray(new File(keyFilename)), Paths.get(keyFilename).getFileName().toString());\n                break;\n              case \"list-installed\":\n                PackageUtils.printGreen(\"Installed packages:\\n-----\");                \n                for (SolrPackageInstance pkg: packageManager.fetchInstalledPackageInstances()) {\n                  PackageUtils.printGreen(pkg);\n                }\n                break;\n              case \"list-available\":\n                PackageUtils.printGreen(\"Available packages:\\n-----\");\n                for (SolrPackage pkg: repositoryManager.getPackages()) {\n                  PackageUtils.printGreen(pkg.name + \" \\t\\t\"+pkg.description);\n                  for (SolrPackageRelease version: pkg.versions) {\n                    PackageUtils.printGreen(\"\\tVersion: \"+version.version);\n                  }\n                }\n                break;\n              case \"list-deployed\":\n                if (cli.hasOption('c')) {\n                  String collection = cli.getArgs()[1];\n                  Map<String, SolrPackageInstance> packages = packageManager.getPackagesDeployed(collection);\n                  PackageUtils.printGreen(\"Packages deployed on \" + collection + \":\");\n                  for (String packageName: packages.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + packages.get(packageName));                 \n                  }\n                } else {\n                  String packageName = cli.getArgs()[1];\n                  Map<String, String> deployedCollections = packageManager.getDeployedCollections(packageName);\n                  if (deployedCollections.isEmpty() == false) {\n                    PackageUtils.printGreen(\"Collections on which package \" + packageName + \" was deployed:\");\n                    for (String collection: deployedCollections.keySet()) {\n                      PackageUtils.printGreen(\"\\t\" + collection + \"(\"+packageName+\":\"+deployedCollections.get(collection)+\")\");\n                    }\n                  } else {\n                    PackageUtils.printGreen(\"Package \"+packageName+\" not deployed on any collection.\");\n                  }\n                }\n                break;\n              case \"install\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                boolean success = repositoryManager.install(packageName, version);\n                if (success) {\n                  PackageUtils.printGreen(packageName + \" installed.\");\n                } else {\n                  PackageUtils.printRed(packageName + \" installation failed.\");\n                }\n                break;\n              }\n              case \"deploy\":\n              {\n                if (cli.hasOption(\"cluster\") || cli.hasOption(\"collections\")) {\n                  Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                  String packageName = parsedVersion.first();\n                  String version = parsedVersion.second();\n                  boolean noprompt = cli.hasOption('y');\n                  boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n                  String collections[] = cli.hasOption(\"collections\")? PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")): new String[] {};\n                  packageManager.deploy(packageName, version, collections, cli.hasOption(\"cluster\"), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                } else {\n                  PackageUtils.printRed(\"Either specify -cluster to deploy cluster level plugins or -collections <list-of-collections> to deploy collection level plugins\");\n                }\n                break;\n              }\n              case \"undeploy\":\n              {\n                if (cli.hasOption(\"cluster\") || cli.hasOption(\"collections\")) {\n                  Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                  if (parsedVersion.second() != null) {\n                    throw new SolrException(ErrorCode.BAD_REQUEST, \"Only package name expected, without a version. Actual: \" + cli.getArgList().get(1));\n                  }\n                  String packageName = parsedVersion.first();\n                  String collections[] = cli.hasOption(\"collections\")? PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")): new String[] {};\n                  packageManager.undeploy(packageName, collections, cli.hasOption(\"cluster\"));\n                } else {\n                  PackageUtils.printRed(\"Either specify -cluster to undeploy cluster level plugins or -collections <list-of-collections> to undeploy collection level plugins\");\n                }\n                break;\n              }\n              case \"help\":\n              case \"usage\":\n                print(\"Package Manager\\n---------------\");\n                printGreen(\"./solr package add-repo <repository-name> <repository-url>\");\n                print(\"Add a repository to Solr.\");\n                print(\"\");\n                printGreen(\"./solr package install <package-name>[:<version>] \");\n                print(\"Install a package into Solr. This copies over the artifacts from the repository into Solr's internal package store and sets up classloader for this package to be used.\");\n                print(\"\");\n                printGreen(\"./solr package deploy <package-name>[:<version>] [-y] [--update] -collections <comma-separated-collections> [-p <param1>=<val1> -p <param2>=<val2> ...] \");\n                print(\"Bootstraps a previously installed package into the specified collections. It the package accepts parameters for its setup commands, they can be specified (as per package documentation).\");\n                print(\"\");\n                printGreen(\"./solr package list-installed\");\n                print(\"Print a list of packages installed in Solr.\");\n                print(\"\");\n                printGreen(\"./solr package list-available\");\n                print(\"Print a list of packages available in the repositories.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed -c <collection>\");\n                print(\"Print a list of packages deployed on a given collection.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed <package-name>\");\n                print(\"Print a list of collections on which a given package has been deployed.\");\n                print(\"\");\n                printGreen(\"./solr package undeploy <package-name> -collections <comma-separated-collections>\");\n                print(\"Undeploys a package from specified collection(s)\");\n                print(\"\\n\");\n                print(\"Note: (a) Please add '-solrUrl http://host:port' parameter if needed (usually on Windows).\");\n                print(\"      (b) Please make sure that all Solr nodes are started with '-Denable.packages=true' parameter.\");\n                print(\"\\n\");\n                break;\n              default:\n                throw new RuntimeException(\"Unrecognized command: \"+cmd);\n            };\n          } finally {\n            packageManager.close();\n          }\n        }\n      }\n      log.info(\"Finished: {}\", cmd);\n\n    } catch (Exception ex) {\n      ex.printStackTrace(); // We need to print this since SolrCLI drops the stack trace in favour of brevity. Package tool should surely print full stacktraces!\n      throw ex;\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressForbidden(reason = \"We really need to print the stacktrace here, otherwise \"\n      + \"there shall be little else information to debug problems. Other SolrCLI tools \"\n      + \"don't print stack traces, hence special treatment is needed here.\")\n  protected void runImpl(CommandLine cli) throws Exception {\n    try {\n      solrUrl = cli.getOptionValues(\"solrUrl\")[cli.getOptionValues(\"solrUrl\").length-1];\n      solrBaseUrl = solrUrl.replaceAll(\"\\\\/solr$\", \"\"); // strip out ending \"/solr\"\n      log.info(\"Solr url:{}, solr base url: {}\", solrUrl, solrBaseUrl);\n      String zkHost = getZkHost(cli);\n\n      log.info(\"ZK: {}\", zkHost);\n      String cmd = cli.getArgList().size() == 0? \"help\": cli.getArgs()[0];\n\n      try (HttpSolrClient solrClient = new HttpSolrClient.Builder(solrBaseUrl).build()) {\n        if (cmd != null) {\n          packageManager = new PackageManager(solrClient, solrBaseUrl, zkHost); \n          try {\n            repositoryManager = new RepositoryManager(solrClient, packageManager);\n\n            switch (cmd) {\n              case \"add-repo\":\n                String repoName = cli.getArgs()[1];\n                String repoUrl = cli.getArgs()[2];\n                repositoryManager.addRepository(repoName, repoUrl);\n                PackageUtils.printGreen(\"Added repository: \" + repoName);\n                break;\n              case \"add-key\":\n                String keyFilename = cli.getArgs()[1];\n                repositoryManager.addKey(FileUtils.readFileToByteArray(new File(keyFilename)), Paths.get(keyFilename).getFileName().toString());\n                break;\n              case \"list-installed\":\n                PackageUtils.printGreen(\"Installed packages:\\n-----\");                \n                for (SolrPackageInstance pkg: packageManager.fetchInstalledPackageInstances()) {\n                  PackageUtils.printGreen(pkg);\n                }\n                break;\n              case \"list-available\":\n                PackageUtils.printGreen(\"Available packages:\\n-----\");\n                for (SolrPackage pkg: repositoryManager.getPackages()) {\n                  PackageUtils.printGreen(pkg.name + \" \\t\\t\"+pkg.description);\n                  for (SolrPackageRelease version: pkg.versions) {\n                    PackageUtils.printGreen(\"\\tVersion: \"+version.version);\n                  }\n                }\n                break;\n              case \"list-deployed\":\n                if (cli.hasOption('c')) {\n                  String collection = cli.getArgs()[1];\n                  Map<String, SolrPackageInstance> packages = packageManager.getPackagesDeployed(collection);\n                  PackageUtils.printGreen(\"Packages deployed on \" + collection + \":\");\n                  for (String packageName: packages.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + packages.get(packageName));                 \n                  }\n                } else {\n                  String packageName = cli.getArgs()[1];\n                  Map<String, String> deployedCollections = packageManager.getDeployedCollections(packageName);\n                  if (deployedCollections.isEmpty() == false) {\n                    PackageUtils.printGreen(\"Collections on which package \" + packageName + \" was deployed:\");\n                    for (String collection: deployedCollections.keySet()) {\n                      PackageUtils.printGreen(\"\\t\" + collection + \"(\"+packageName+\":\"+deployedCollections.get(collection)+\")\");\n                    }\n                  } else {\n                    PackageUtils.printGreen(\"Package \"+packageName+\" not deployed on any collection.\");\n                  }\n                }\n                break;\n              case \"install\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                repositoryManager.install(packageName, version);\n                PackageUtils.printGreen(packageName + \" installed.\");\n                break;\n              }\n              case \"deploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                boolean noprompt = cli.hasOption('y');\n                boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n                String collections[] = cli.hasOption(\"collections\")? PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")): new String[] {};\n                packageManager.deploy(packageName, version, collections, cli.hasOption(\"cluster\"), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                break;\n              }\n              case \"undeploy\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                if (parsedVersion.second() != null) {\n                  throw new SolrException(ErrorCode.BAD_REQUEST, \"Only package name expected, without a version. Actual: \" + cli.getArgList().get(1));\n                }\n                String packageName = parsedVersion.first();\n                String collections[] = cli.hasOption(\"collections\")? PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")): new String[] {};\n                packageManager.undeploy(packageName, collections, cli.hasOption(\"cluster\"));\n                break;\n              }\n              case \"help\":\n              case \"usage\":\n                print(\"Package Manager\\n---------------\");\n                printGreen(\"./solr package add-repo <repository-name> <repository-url>\");\n                print(\"Add a repository to Solr.\");\n                print(\"\");\n                printGreen(\"./solr package install <package-name>[:<version>] \");\n                print(\"Install a package into Solr. This copies over the artifacts from the repository into Solr's internal package store and sets up classloader for this package to be used.\");\n                print(\"\");\n                printGreen(\"./solr package deploy <package-name>[:<version>] [-y] [--update] -collections <comma-separated-collections> [-p <param1>=<val1> -p <param2>=<val2> ...] \");\n                print(\"Bootstraps a previously installed package into the specified collections. It the package accepts parameters for its setup commands, they can be specified (as per package documentation).\");\n                print(\"\");\n                printGreen(\"./solr package list-installed\");\n                print(\"Print a list of packages installed in Solr.\");\n                print(\"\");\n                printGreen(\"./solr package list-available\");\n                print(\"Print a list of packages available in the repositories.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed -c <collection>\");\n                print(\"Print a list of packages deployed on a given collection.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed <package-name>\");\n                print(\"Print a list of collections on which a given package has been deployed.\");\n                print(\"\");\n                printGreen(\"./solr package undeploy <package-name> -collections <comma-separated-collections>\");\n                print(\"Undeploys a package from specified collection(s)\");\n                print(\"\\n\");\n                print(\"Note: (a) Please add '-solrUrl http://host:port' parameter if needed (usually on Windows).\");\n                print(\"      (b) Please make sure that all Solr nodes are started with '-Denable.packages=true' parameter.\");\n                print(\"\\n\");\n                break;\n              default:\n                throw new RuntimeException(\"Unrecognized command: \"+cmd);\n            };\n          } finally {\n            packageManager.close();\n          }\n        }\n      }\n      log.info(\"Finished: {}\", cmd);\n\n    } catch (Exception ex) {\n      ex.printStackTrace(); // We need to print this since SolrCLI drops the stack trace in favour of brevity. Package tool should surely print full stacktraces!\n      throw ex;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30544190fa1b1f7b98cd8e9b84dd86060d89bdcd","date":1596533005,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PackageTool#runImpl(CommandLine).mjava","sourceNew":"  @Override\n  @SuppressForbidden(reason = \"We really need to print the stacktrace here, otherwise \"\n      + \"there shall be little else information to debug problems. Other SolrCLI tools \"\n      + \"don't print stack traces, hence special treatment is needed here.\")\n  protected void runImpl(CommandLine cli) throws Exception {\n    try {\n      solrUrl = cli.getOptionValues(\"solrUrl\")[cli.getOptionValues(\"solrUrl\").length-1];\n      solrBaseUrl = solrUrl.replaceAll(\"\\\\/solr$\", \"\"); // strip out ending \"/solr\"\n      log.info(\"Solr url:{}, solr base url: {}\", solrUrl, solrBaseUrl);\n      String zkHost = getZkHost(cli);\n\n      log.info(\"ZK: {}\", zkHost);\n      String cmd = cli.getArgList().size() == 0? \"help\": cli.getArgs()[0];\n\n      try (HttpSolrClient solrClient = new HttpSolrClient.Builder(solrBaseUrl).build()) {\n        if (cmd != null) {\n          packageManager = new PackageManager(solrClient, solrBaseUrl, zkHost); \n          try {\n            repositoryManager = new RepositoryManager(solrClient, packageManager);\n\n            switch (cmd) {\n              case \"add-repo\":\n                String repoName = cli.getArgs()[1];\n                String repoUrl = cli.getArgs()[2];\n                repositoryManager.addRepository(repoName, repoUrl);\n                PackageUtils.printGreen(\"Added repository: \" + repoName);\n                break;\n              case \"add-key\":\n                String keyFilename = cli.getArgs()[1];\n                repositoryManager.addKey(FileUtils.readFileToByteArray(new File(keyFilename)), Paths.get(keyFilename).getFileName().toString());\n                break;\n              case \"list-installed\":\n                PackageUtils.printGreen(\"Installed packages:\\n-----\");                \n                for (SolrPackageInstance pkg: packageManager.fetchInstalledPackageInstances()) {\n                  PackageUtils.printGreen(pkg);\n                }\n                break;\n              case \"list-available\":\n                PackageUtils.printGreen(\"Available packages:\\n-----\");\n                for (SolrPackage pkg: repositoryManager.getPackages()) {\n                  PackageUtils.printGreen(pkg.name + \" \\t\\t\"+pkg.description);\n                  for (SolrPackageRelease version: pkg.versions) {\n                    PackageUtils.printGreen(\"\\tVersion: \"+version.version);\n                  }\n                }\n                break;\n              case \"list-deployed\":\n                if (cli.hasOption('c')) {\n                  String collection = cli.getArgs()[1];\n                  Map<String, SolrPackageInstance> packages = packageManager.getPackagesDeployed(collection);\n                  PackageUtils.printGreen(\"Packages deployed on \" + collection + \":\");\n                  for (String packageName: packages.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + packages.get(packageName));                 \n                  }\n                } else {\n                  String packageName = cli.getArgs()[1];\n                  Map<String, String> deployedCollections = packageManager.getDeployedCollections(packageName);\n                  if (deployedCollections.isEmpty() == false) {\n                    PackageUtils.printGreen(\"Collections on which package \" + packageName + \" was deployed:\");\n                    for (String collection: deployedCollections.keySet()) {\n                      PackageUtils.printGreen(\"\\t\" + collection + \"(\"+packageName+\":\"+deployedCollections.get(collection)+\")\");\n                    }\n                  } else {\n                    PackageUtils.printGreen(\"Package \"+packageName+\" not deployed on any collection.\");\n                  }\n                }\n                break;\n              case \"install\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                boolean success = repositoryManager.install(packageName, version);\n                if (success) {\n                  PackageUtils.printGreen(packageName + \" installed.\");\n                } else {\n                  PackageUtils.printRed(packageName + \" installation failed.\");\n                }\n                break;\n              }\n              case \"deploy\":\n              {\n                if (cli.hasOption(\"cluster\") || cli.hasOption(\"collections\")) {\n                  Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                  String packageName = parsedVersion.first();\n                  String version = parsedVersion.second();\n                  boolean noprompt = cli.hasOption('y');\n                  boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n                  String collections[] = cli.hasOption(\"collections\")? PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")): new String[] {};\n                  packageManager.deploy(packageName, version, collections, cli.hasOption(\"cluster\"), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                } else {\n                  PackageUtils.printRed(\"Either specify -cluster to deploy cluster level plugins or -collections <list-of-collections> to deploy collection level plugins\");\n                }\n                break;\n              }\n              case \"undeploy\":\n              {\n                if (cli.hasOption(\"cluster\") || cli.hasOption(\"collections\")) {\n                  Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                  if (parsedVersion.second() != null) {\n                    throw new SolrException(ErrorCode.BAD_REQUEST, \"Only package name expected, without a version. Actual: \" + cli.getArgList().get(1));\n                  }\n                  String packageName = parsedVersion.first();\n                  String collections[] = cli.hasOption(\"collections\")? PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")): new String[] {};\n                  packageManager.undeploy(packageName, collections, cli.hasOption(\"cluster\"));\n                } else {\n                  PackageUtils.printRed(\"Either specify -cluster to undeploy cluster level plugins or -collections <list-of-collections> to undeploy collection level plugins\");\n                }\n                break;\n              }\n              case \"uninstall\": {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                if (parsedVersion.second() == null) {\n                  throw new SolrException(ErrorCode.BAD_REQUEST, \"Package name and version are both required. Actual: \" + cli.getArgList().get(1));\n                }\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                packageManager.uninstall(packageName, version);\n                break;\n              }\n              case \"help\":\n              case \"usage\":\n                print(\"Package Manager\\n---------------\");\n                printGreen(\"./solr package add-repo <repository-name> <repository-url>\");\n                print(\"Add a repository to Solr.\");\n                print(\"\");\n                printGreen(\"./solr package install <package-name>[:<version>] \");\n                print(\"Install a package into Solr. This copies over the artifacts from the repository into Solr's internal package store and sets up classloader for this package to be used.\");\n                print(\"\");\n                printGreen(\"./solr package deploy <package-name>[:<version>] [-y] [--update] -collections <comma-separated-collections> [-p <param1>=<val1> -p <param2>=<val2> ...] \");\n                print(\"Bootstraps a previously installed package into the specified collections. It the package accepts parameters for its setup commands, they can be specified (as per package documentation).\");\n                print(\"\");\n                printGreen(\"./solr package list-installed\");\n                print(\"Print a list of packages installed in Solr.\");\n                print(\"\");\n                printGreen(\"./solr package list-available\");\n                print(\"Print a list of packages available in the repositories.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed -c <collection>\");\n                print(\"Print a list of packages deployed on a given collection.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed <package-name>\");\n                print(\"Print a list of collections on which a given package has been deployed.\");\n                print(\"\");\n                printGreen(\"./solr package undeploy <package-name> -collections <comma-separated-collections>\");\n                print(\"Undeploys a package from specified collection(s)\");\n                print(\"\\n\");\n                print(\"Note: (a) Please add '-solrUrl http://host:port' parameter if needed (usually on Windows).\");\n                print(\"      (b) Please make sure that all Solr nodes are started with '-Denable.packages=true' parameter.\");\n                print(\"\\n\");\n                break;\n              default:\n                throw new RuntimeException(\"Unrecognized command: \"+cmd);\n            };\n          } finally {\n            packageManager.close();\n          }\n        }\n      }\n      log.info(\"Finished: {}\", cmd);\n\n    } catch (Exception ex) {\n      ex.printStackTrace(); // We need to print this since SolrCLI drops the stack trace in favour of brevity. Package tool should surely print full stacktraces!\n      throw ex;\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressForbidden(reason = \"We really need to print the stacktrace here, otherwise \"\n      + \"there shall be little else information to debug problems. Other SolrCLI tools \"\n      + \"don't print stack traces, hence special treatment is needed here.\")\n  protected void runImpl(CommandLine cli) throws Exception {\n    try {\n      solrUrl = cli.getOptionValues(\"solrUrl\")[cli.getOptionValues(\"solrUrl\").length-1];\n      solrBaseUrl = solrUrl.replaceAll(\"\\\\/solr$\", \"\"); // strip out ending \"/solr\"\n      log.info(\"Solr url:{}, solr base url: {}\", solrUrl, solrBaseUrl);\n      String zkHost = getZkHost(cli);\n\n      log.info(\"ZK: {}\", zkHost);\n      String cmd = cli.getArgList().size() == 0? \"help\": cli.getArgs()[0];\n\n      try (HttpSolrClient solrClient = new HttpSolrClient.Builder(solrBaseUrl).build()) {\n        if (cmd != null) {\n          packageManager = new PackageManager(solrClient, solrBaseUrl, zkHost); \n          try {\n            repositoryManager = new RepositoryManager(solrClient, packageManager);\n\n            switch (cmd) {\n              case \"add-repo\":\n                String repoName = cli.getArgs()[1];\n                String repoUrl = cli.getArgs()[2];\n                repositoryManager.addRepository(repoName, repoUrl);\n                PackageUtils.printGreen(\"Added repository: \" + repoName);\n                break;\n              case \"add-key\":\n                String keyFilename = cli.getArgs()[1];\n                repositoryManager.addKey(FileUtils.readFileToByteArray(new File(keyFilename)), Paths.get(keyFilename).getFileName().toString());\n                break;\n              case \"list-installed\":\n                PackageUtils.printGreen(\"Installed packages:\\n-----\");                \n                for (SolrPackageInstance pkg: packageManager.fetchInstalledPackageInstances()) {\n                  PackageUtils.printGreen(pkg);\n                }\n                break;\n              case \"list-available\":\n                PackageUtils.printGreen(\"Available packages:\\n-----\");\n                for (SolrPackage pkg: repositoryManager.getPackages()) {\n                  PackageUtils.printGreen(pkg.name + \" \\t\\t\"+pkg.description);\n                  for (SolrPackageRelease version: pkg.versions) {\n                    PackageUtils.printGreen(\"\\tVersion: \"+version.version);\n                  }\n                }\n                break;\n              case \"list-deployed\":\n                if (cli.hasOption('c')) {\n                  String collection = cli.getArgs()[1];\n                  Map<String, SolrPackageInstance> packages = packageManager.getPackagesDeployed(collection);\n                  PackageUtils.printGreen(\"Packages deployed on \" + collection + \":\");\n                  for (String packageName: packages.keySet()) {\n                    PackageUtils.printGreen(\"\\t\" + packages.get(packageName));                 \n                  }\n                } else {\n                  String packageName = cli.getArgs()[1];\n                  Map<String, String> deployedCollections = packageManager.getDeployedCollections(packageName);\n                  if (deployedCollections.isEmpty() == false) {\n                    PackageUtils.printGreen(\"Collections on which package \" + packageName + \" was deployed:\");\n                    for (String collection: deployedCollections.keySet()) {\n                      PackageUtils.printGreen(\"\\t\" + collection + \"(\"+packageName+\":\"+deployedCollections.get(collection)+\")\");\n                    }\n                  } else {\n                    PackageUtils.printGreen(\"Package \"+packageName+\" not deployed on any collection.\");\n                  }\n                }\n                break;\n              case \"install\":\n              {\n                Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                String packageName = parsedVersion.first();\n                String version = parsedVersion.second();\n                boolean success = repositoryManager.install(packageName, version);\n                if (success) {\n                  PackageUtils.printGreen(packageName + \" installed.\");\n                } else {\n                  PackageUtils.printRed(packageName + \" installation failed.\");\n                }\n                break;\n              }\n              case \"deploy\":\n              {\n                if (cli.hasOption(\"cluster\") || cli.hasOption(\"collections\")) {\n                  Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                  String packageName = parsedVersion.first();\n                  String version = parsedVersion.second();\n                  boolean noprompt = cli.hasOption('y');\n                  boolean isUpdate = cli.hasOption(\"update\") || cli.hasOption('u');\n                  String collections[] = cli.hasOption(\"collections\")? PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")): new String[] {};\n                  packageManager.deploy(packageName, version, collections, cli.hasOption(\"cluster\"), cli.getOptionValues(\"param\"), isUpdate, noprompt);\n                } else {\n                  PackageUtils.printRed(\"Either specify -cluster to deploy cluster level plugins or -collections <list-of-collections> to deploy collection level plugins\");\n                }\n                break;\n              }\n              case \"undeploy\":\n              {\n                if (cli.hasOption(\"cluster\") || cli.hasOption(\"collections\")) {\n                  Pair<String, String> parsedVersion = parsePackageVersion(cli.getArgList().get(1).toString());\n                  if (parsedVersion.second() != null) {\n                    throw new SolrException(ErrorCode.BAD_REQUEST, \"Only package name expected, without a version. Actual: \" + cli.getArgList().get(1));\n                  }\n                  String packageName = parsedVersion.first();\n                  String collections[] = cli.hasOption(\"collections\")? PackageUtils.validateCollections(cli.getOptionValue(\"collections\").split(\",\")): new String[] {};\n                  packageManager.undeploy(packageName, collections, cli.hasOption(\"cluster\"));\n                } else {\n                  PackageUtils.printRed(\"Either specify -cluster to undeploy cluster level plugins or -collections <list-of-collections> to undeploy collection level plugins\");\n                }\n                break;\n              }\n              case \"help\":\n              case \"usage\":\n                print(\"Package Manager\\n---------------\");\n                printGreen(\"./solr package add-repo <repository-name> <repository-url>\");\n                print(\"Add a repository to Solr.\");\n                print(\"\");\n                printGreen(\"./solr package install <package-name>[:<version>] \");\n                print(\"Install a package into Solr. This copies over the artifacts from the repository into Solr's internal package store and sets up classloader for this package to be used.\");\n                print(\"\");\n                printGreen(\"./solr package deploy <package-name>[:<version>] [-y] [--update] -collections <comma-separated-collections> [-p <param1>=<val1> -p <param2>=<val2> ...] \");\n                print(\"Bootstraps a previously installed package into the specified collections. It the package accepts parameters for its setup commands, they can be specified (as per package documentation).\");\n                print(\"\");\n                printGreen(\"./solr package list-installed\");\n                print(\"Print a list of packages installed in Solr.\");\n                print(\"\");\n                printGreen(\"./solr package list-available\");\n                print(\"Print a list of packages available in the repositories.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed -c <collection>\");\n                print(\"Print a list of packages deployed on a given collection.\");\n                print(\"\");\n                printGreen(\"./solr package list-deployed <package-name>\");\n                print(\"Print a list of collections on which a given package has been deployed.\");\n                print(\"\");\n                printGreen(\"./solr package undeploy <package-name> -collections <comma-separated-collections>\");\n                print(\"Undeploys a package from specified collection(s)\");\n                print(\"\\n\");\n                print(\"Note: (a) Please add '-solrUrl http://host:port' parameter if needed (usually on Windows).\");\n                print(\"      (b) Please make sure that all Solr nodes are started with '-Denable.packages=true' parameter.\");\n                print(\"\\n\");\n                break;\n              default:\n                throw new RuntimeException(\"Unrecognized command: \"+cmd);\n            };\n          } finally {\n            packageManager.close();\n          }\n        }\n      }\n      log.info(\"Finished: {}\", cmd);\n\n    } catch (Exception ex) {\n      ex.printStackTrace(); // We need to print this since SolrCLI drops the stack trace in favour of brevity. Package tool should surely print full stacktraces!\n      throw ex;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","d218decf811b7a0a4d86218c54c79c74a962374b"],"30544190fa1b1f7b98cd8e9b84dd86060d89bdcd":["4ea3ef3f76ecd22ead5b83d015adf8c16476a0f4"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["d218decf811b7a0a4d86218c54c79c74a962374b"],"4ea3ef3f76ecd22ead5b83d015adf8c16476a0f4":["a688687cbff91a8f44c95d31697c3ba8a47c8c25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d218decf811b7a0a4d86218c54c79c74a962374b":["62d55718cd611235e975fa73a6bdf263fbd58859"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["120bc33d5cbe83eca2e5fce597baf4fef208d579","62d55718cd611235e975fa73a6bdf263fbd58859"],"62d55718cd611235e975fa73a6bdf263fbd58859":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a688687cbff91a8f44c95d31697c3ba8a47c8c25":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30544190fa1b1f7b98cd8e9b84dd86060d89bdcd"]},"commit2Childs":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":[],"30544190fa1b1f7b98cd8e9b84dd86060d89bdcd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["a688687cbff91a8f44c95d31697c3ba8a47c8c25"],"4ea3ef3f76ecd22ead5b83d015adf8c16476a0f4":["30544190fa1b1f7b98cd8e9b84dd86060d89bdcd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c"],"d218decf811b7a0a4d86218c54c79c74a962374b":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"62d55718cd611235e975fa73a6bdf263fbd58859":["d218decf811b7a0a4d86218c54c79c74a962374b","06595b0c22c7d3075c4104d3820cccf95d9d8a43"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","62d55718cd611235e975fa73a6bdf263fbd58859"],"a688687cbff91a8f44c95d31697c3ba8a47c8c25":["4ea3ef3f76ecd22ead5b83d015adf8c16476a0f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}