{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","commits":[{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestEvaluatorBag#testGetDateFormatEvaluator().mjava","sourceNew":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null, Context.FULL_DUMP, Collections.<String, Object>emptyMap(), null, null);\n    \n    Calendar calendar = new GregorianCalendar();\n    calendar.add(Calendar.DAY_OF_YEAR, -2);\n    \n    String currentLocale = Locale.getDefault().toString();\n\n    assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(calendar.getTime()),\n            dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH:mm'\", context));    \n    assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(calendar.getTime()),\n        dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH:mm','\" + currentLocale + \"'\", context));\n    \n    calendar = new GregorianCalendar();\n    Date date = calendar.getTime();\n    \n    Map<String, Object> map = new HashMap<String, Object>();\n    map.put(\"key\", date);\n    resolver.addNamespace(\"A\", map);\n\n    assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(date),\n            dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(date),\n       dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale + \"'\", context));\n   \n  }\n\n","sourceOld":"  /**\n   * Test method for {@link EvaluatorBag#getDateFormatEvaluator()}.\n   */\n  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testGetDateFormatEvaluator() {\n    Evaluator dateFormatEval = EvaluatorBag.getDateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null, null);\n    \n    Calendar calendar = new GregorianCalendar();\n    calendar.add(Calendar.DAY_OF_YEAR, -2);\n\n    assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\").format(calendar.getTime()),\n            dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH:mm'\", context));\n\n    calendar = new GregorianCalendar();\n    Date date = calendar.getTime();\n    \n    Map<String, Object> map = new HashMap<String, Object>();\n    map.put(\"key\", date);\n    resolver.addNamespace(\"A\", map);\n\n    assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\").format(date),\n            dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38db2376d672de5348d236e52587c01c443041bc","date":1353347886,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","sourceNew":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    String currentLocale = Locale.getDefault().toString();\n    {\n      Calendar calendar = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"),\n          Locale.ROOT);\n      calendar.add(Calendar.DAY_OF_YEAR, -2);\n      Date d = calendar.getTime();\n      \n      assertEquals(\n          new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d),\n          dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH:mm'\", context));\n      assertEquals(\n          new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault())\n              .format(d),\n          dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH:mm','\"\n              + currentLocale + \"'\", context));\n    }\n    Date d = new Date();\n    \n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n    \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale\n            + \"'\", context));\n    \n  }\n\n","sourceOld":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null, Context.FULL_DUMP, Collections.<String, Object>emptyMap(), null, null);\n    \n    Calendar calendar = new GregorianCalendar();\n    calendar.add(Calendar.DAY_OF_YEAR, -2);\n    \n    String currentLocale = Locale.getDefault().toString();\n\n    assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(calendar.getTime()),\n            dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH:mm'\", context));    \n    assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(calendar.getTime()),\n        dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH:mm','\" + currentLocale + \"'\", context));\n    \n    calendar = new GregorianCalendar();\n    Date date = calendar.getTime();\n    \n    Map<String, Object> map = new HashMap<String, Object>();\n    map.put(\"key\", date);\n    resolver.addNamespace(\"A\", map);\n\n    assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(date),\n            dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(date),\n       dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale + \"'\", context));\n   \n  }\n\n","bugFix":null,"bugIntro":["4da25118dcc5b16cf6bed236dc7b6b3aba6c1cde","ae910e6d2501917e47133b2964346f84f916b2c4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4da25118dcc5b16cf6bed236dc7b6b3aba6c1cde","date":1353446636,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","sourceNew":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    String currentLocale = Locale.getDefault().toString();\n    {\n      Calendar calendar = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"),\n          Locale.ROOT);\n      calendar.add(Calendar.DAY_OF_YEAR, -2);\n      Date d = calendar.getTime();\n      {\n        String sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d);\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH:mm'\", context);\n        assertEquals(sdf,dfe);\n      }\n      {\n        String sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d);\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH:mm','\"+ currentLocale + \"'\", context);\n        assertEquals(sdf,dfe);\n      }\n    }\n    Date d = new Date();\n    \n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n    \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale\n            + \"'\", context));\n    \n  }\n\n","sourceOld":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    String currentLocale = Locale.getDefault().toString();\n    {\n      Calendar calendar = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"),\n          Locale.ROOT);\n      calendar.add(Calendar.DAY_OF_YEAR, -2);\n      Date d = calendar.getTime();\n      \n      assertEquals(\n          new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d),\n          dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH:mm'\", context));\n      assertEquals(\n          new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault())\n              .format(d),\n          dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH:mm','\"\n              + currentLocale + \"'\", context));\n    }\n    Date d = new Date();\n    \n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n    \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale\n            + \"'\", context));\n    \n  }\n\n","bugFix":["38db2376d672de5348d236e52587c01c443041bc"],"bugIntro":["ae910e6d2501917e47133b2964346f84f916b2c4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    String currentLocale = Locale.getDefault().toString();\n    {\n      Calendar calendar = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"),\n          Locale.ROOT);\n      calendar.add(Calendar.DAY_OF_YEAR, -2);\n      Date d = calendar.getTime();\n      {\n        String sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d);\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH:mm'\", context);\n        assertEquals(sdf,dfe);\n      }\n      {\n        String sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d);\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH:mm','\"+ currentLocale + \"'\", context);\n        assertEquals(sdf,dfe);\n      }\n    }\n    Date d = new Date();\n    \n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n    \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale\n            + \"'\", context));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7a5f8ae2b11a88c74aa83a1735dc38a37e931ac","date":1357584861,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","sourceNew":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    String currentLocale = Locale.getDefault().toString();\n    {\n      {\n        SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", Locale.ROOT);\n        String sdf = sdfDate.format(getNow());\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH'\", context);\n        assertEquals(sdf,dfe);\n      }\n      {\n        SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", Locale.getDefault());\n        String sdf = sdfDate.format(getNow());\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH','\"+ currentLocale + \"'\", context);\n        assertEquals(sdf,dfe);\n        for(String tz : TimeZone.getAvailableIDs()) {          \n          sdfDate.setTimeZone(TimeZone.getTimeZone(tz));\n          sdf = sdfDate.format(getNow());\n          dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH','\" + currentLocale + \"','\" + tz + \"'\", context);\n          assertEquals(sdf,dfe);          \n        }\n      }\n    }\n    Date d = new Date();    \n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n    \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale\n            + \"'\", context));\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault());\n    for(String tz : TimeZone.getAvailableIDs()) {\n      sdf.setTimeZone(TimeZone.getTimeZone(tz));\n      assertEquals(\n          sdf.format(d),\n          dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale + \"', '\" + tz + \"'\", context));     \n      \n    }\n    \n    \n  }\n\n","sourceOld":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    String currentLocale = Locale.getDefault().toString();\n    {\n      Calendar calendar = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"),\n          Locale.ROOT);\n      calendar.add(Calendar.DAY_OF_YEAR, -2);\n      Date d = calendar.getTime();\n      {\n        String sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d);\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH:mm'\", context);\n        assertEquals(sdf,dfe);\n      }\n      {\n        String sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d);\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH:mm','\"+ currentLocale + \"'\", context);\n        assertEquals(sdf,dfe);\n      }\n    }\n    Date d = new Date();\n    \n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n    \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale\n            + \"'\", context));\n    \n  }\n\n","bugFix":null,"bugIntro":["ae910e6d2501917e47133b2964346f84f916b2c4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","sourceNew":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    String currentLocale = Locale.getDefault().toString();\n    {\n      {\n        SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", Locale.ROOT);\n        String sdf = sdfDate.format(getNow());\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH'\", context);\n        assertEquals(sdf,dfe);\n      }\n      {\n        SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", Locale.getDefault());\n        String sdf = sdfDate.format(getNow());\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH','\"+ currentLocale + \"'\", context);\n        assertEquals(sdf,dfe);\n        for(String tz : TimeZone.getAvailableIDs()) {          \n          sdfDate.setTimeZone(TimeZone.getTimeZone(tz));\n          sdf = sdfDate.format(getNow());\n          dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH','\" + currentLocale + \"','\" + tz + \"'\", context);\n          assertEquals(sdf,dfe);          \n        }\n      }\n    }\n    Date d = new Date();    \n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n    \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale\n            + \"'\", context));\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault());\n    for(String tz : TimeZone.getAvailableIDs()) {\n      sdf.setTimeZone(TimeZone.getTimeZone(tz));\n      assertEquals(\n          sdf.format(d),\n          dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale + \"', '\" + tz + \"'\", context));     \n      \n    }\n    \n    \n  }\n\n","sourceOld":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    String currentLocale = Locale.getDefault().toString();\n    {\n      Calendar calendar = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"),\n          Locale.ROOT);\n      calendar.add(Calendar.DAY_OF_YEAR, -2);\n      Date d = calendar.getTime();\n      {\n        String sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d);\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH:mm'\", context);\n        assertEquals(sdf,dfe);\n      }\n      {\n        String sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d);\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH:mm','\"+ currentLocale + \"'\", context);\n        assertEquals(sdf,dfe);\n      }\n    }\n    Date d = new Date();\n    \n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n    \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale\n            + \"'\", context));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c463456ab4ad6f79b30ac1b53ba677727c76a99f","date":1358619102,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","sourceNew":"  @Test\n  @Ignore(\"fails if somewhere on earth is a DST change\")\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    String currentLocale = Locale.getDefault().toString();\n    {\n      {\n        SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", Locale.ROOT);\n        String sdf = sdfDate.format(getNow());\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH'\", context);\n        assertEquals(sdf,dfe);\n      }\n      {\n        SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", Locale.getDefault());\n        String sdf = sdfDate.format(getNow());\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH','\"+ currentLocale + \"'\", context);\n        assertEquals(sdf,dfe);\n        for(String tz : TimeZone.getAvailableIDs()) {          \n          sdfDate.setTimeZone(TimeZone.getTimeZone(tz));\n          sdf = sdfDate.format(getNow());\n          dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH','\" + currentLocale + \"','\" + tz + \"'\", context);\n          assertEquals(sdf,dfe);          \n        }\n      }\n    }\n    Date d = new Date();    \n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n    \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale\n            + \"'\", context));\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault());\n    for(String tz : TimeZone.getAvailableIDs()) {\n      sdf.setTimeZone(TimeZone.getTimeZone(tz));\n      assertEquals(\n          sdf.format(d),\n          dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale + \"', '\" + tz + \"'\", context));     \n      \n    }\n    \n    \n  }\n\n","sourceOld":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    String currentLocale = Locale.getDefault().toString();\n    {\n      {\n        SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", Locale.ROOT);\n        String sdf = sdfDate.format(getNow());\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH'\", context);\n        assertEquals(sdf,dfe);\n      }\n      {\n        SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", Locale.getDefault());\n        String sdf = sdfDate.format(getNow());\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH','\"+ currentLocale + \"'\", context);\n        assertEquals(sdf,dfe);\n        for(String tz : TimeZone.getAvailableIDs()) {          \n          sdfDate.setTimeZone(TimeZone.getTimeZone(tz));\n          sdf = sdfDate.format(getNow());\n          dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH','\" + currentLocale + \"','\" + tz + \"'\", context);\n          assertEquals(sdf,dfe);          \n        }\n      }\n    }\n    Date d = new Date();    \n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n    \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale\n            + \"'\", context));\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault());\n    for(String tz : TimeZone.getAvailableIDs()) {\n      sdf.setTimeZone(TimeZone.getTimeZone(tz));\n      assertEquals(\n          sdf.format(d),\n          dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale + \"', '\" + tz + \"'\", context));     \n      \n    }\n    \n    \n  }\n\n","bugFix":null,"bugIntro":["ae910e6d2501917e47133b2964346f84f916b2c4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","sourceNew":"  @Test\n  @Ignore(\"fails if somewhere on earth is a DST change\")\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    String currentLocale = Locale.getDefault().toString();\n    {\n      {\n        SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", Locale.ROOT);\n        String sdf = sdfDate.format(getNow());\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH'\", context);\n        assertEquals(sdf,dfe);\n      }\n      {\n        SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", Locale.getDefault());\n        String sdf = sdfDate.format(getNow());\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH','\"+ currentLocale + \"'\", context);\n        assertEquals(sdf,dfe);\n        for(String tz : TimeZone.getAvailableIDs()) {          \n          sdfDate.setTimeZone(TimeZone.getTimeZone(tz));\n          sdf = sdfDate.format(getNow());\n          dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH','\" + currentLocale + \"','\" + tz + \"'\", context);\n          assertEquals(sdf,dfe);          \n        }\n      }\n    }\n    Date d = new Date();    \n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n    \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale\n            + \"'\", context));\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault());\n    for(String tz : TimeZone.getAvailableIDs()) {\n      sdf.setTimeZone(TimeZone.getTimeZone(tz));\n      assertEquals(\n          sdf.format(d),\n          dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale + \"', '\" + tz + \"'\", context));     \n      \n    }\n    \n    \n  }\n\n","sourceOld":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    String currentLocale = Locale.getDefault().toString();\n    {\n      {\n        SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", Locale.ROOT);\n        String sdf = sdfDate.format(getNow());\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH'\", context);\n        assertEquals(sdf,dfe);\n      }\n      {\n        SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", Locale.getDefault());\n        String sdf = sdfDate.format(getNow());\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH','\"+ currentLocale + \"'\", context);\n        assertEquals(sdf,dfe);\n        for(String tz : TimeZone.getAvailableIDs()) {          \n          sdfDate.setTimeZone(TimeZone.getTimeZone(tz));\n          sdf = sdfDate.format(getNow());\n          dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH','\" + currentLocale + \"','\" + tz + \"'\", context);\n          assertEquals(sdf,dfe);          \n        }\n      }\n    }\n    Date d = new Date();    \n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n    \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale\n            + \"'\", context));\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault());\n    for(String tz : TimeZone.getAvailableIDs()) {\n      sdf.setTimeZone(TimeZone.getTimeZone(tz));\n      assertEquals(\n          sdf.format(d),\n          dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale + \"', '\" + tz + \"'\", context));     \n      \n    }\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae910e6d2501917e47133b2964346f84f916b2c4","date":1359134422,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","sourceNew":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    \n    Locale rootLocale = Locale.ROOT;\n    Locale defaultLocale = Locale.getDefault();\n    TimeZone defaultTz = TimeZone.getDefault();\n    \n    {\n      SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", rootLocale);\n      String sdf = sdfDate.format(twoDaysAgo(rootLocale, defaultTz));\n      String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH'\", context);\n      assertEquals(sdf,dfe);\n    }\n    {\n      SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", defaultLocale);\n      String sdf = sdfDate.format(twoDaysAgo(defaultLocale, TimeZone.getDefault()));\n      String dfe = dateFormatEval.evaluate(\n          \"'NOW-2DAYS','yyyy-MM-dd HH','\" + defaultLocale + \"'\", context);\n      assertEquals(sdf,dfe);\n      for(String tzStr : TimeZone.getAvailableIDs()) {  \n        TimeZone tz = TimeZone.getTimeZone(tzStr);\n        sdfDate.setTimeZone(tz);\n        sdf = sdfDate.format(twoDaysAgo(defaultLocale, tz));\n        dfe = dateFormatEval.evaluate(\n            \"'NOW-2DAYS','yyyy-MM-dd HH','\" + defaultLocale + \"','\" + tzStr + \"'\", context);\n        assertEquals(sdf,dfe);          \n      }\n    }\n   \n    Date d = new Date();    \n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n        \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", rootLocale).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", defaultLocale).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + defaultLocale + \"'\", context));\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", defaultLocale);\n    for(String tzStr : TimeZone.getAvailableIDs()) {\n      TimeZone tz = TimeZone.getTimeZone(tzStr);\n      sdf.setTimeZone(tz);\n      assertEquals(\n          sdf.format(d),\n          dateFormatEval.evaluate(\n              \"A.key, 'yyyy-MM-dd HH:mm','\" + defaultLocale + \"', '\" + tzStr + \"'\", context));     \n      \n    }\n    \n    \n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"fails if somewhere on earth is a DST change\")\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    String currentLocale = Locale.getDefault().toString();\n    {\n      {\n        SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", Locale.ROOT);\n        String sdf = sdfDate.format(getNow());\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH'\", context);\n        assertEquals(sdf,dfe);\n      }\n      {\n        SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", Locale.getDefault());\n        String sdf = sdfDate.format(getNow());\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH','\"+ currentLocale + \"'\", context);\n        assertEquals(sdf,dfe);\n        for(String tz : TimeZone.getAvailableIDs()) {          \n          sdfDate.setTimeZone(TimeZone.getTimeZone(tz));\n          sdf = sdfDate.format(getNow());\n          dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH','\" + currentLocale + \"','\" + tz + \"'\", context);\n          assertEquals(sdf,dfe);          \n        }\n      }\n    }\n    Date d = new Date();    \n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n    \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale\n            + \"'\", context));\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault());\n    for(String tz : TimeZone.getAvailableIDs()) {\n      sdf.setTimeZone(TimeZone.getTimeZone(tz));\n      assertEquals(\n          sdf.format(d),\n          dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale + \"', '\" + tz + \"'\", context));     \n      \n    }\n    \n    \n  }\n\n","bugFix":["38db2376d672de5348d236e52587c01c443041bc","c463456ab4ad6f79b30ac1b53ba677727c76a99f","4da25118dcc5b16cf6bed236dc7b6b3aba6c1cde","7c7b0ae5716b6c2044195a818e9ae58205175659","f7a5f8ae2b11a88c74aa83a1735dc38a37e931ac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","sourceNew":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    \n    Locale rootLocale = Locale.ROOT;\n    Locale defaultLocale = Locale.getDefault();\n    TimeZone defaultTz = TimeZone.getDefault();\n    \n    {\n      SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", rootLocale);\n      String sdf = sdfDate.format(twoDaysAgo(rootLocale, defaultTz));\n      String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH'\", context);\n      assertEquals(sdf,dfe);\n    }\n    {\n      SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", defaultLocale);\n      String sdf = sdfDate.format(twoDaysAgo(defaultLocale, TimeZone.getDefault()));\n      String dfe = dateFormatEval.evaluate(\n          \"'NOW-2DAYS','yyyy-MM-dd HH','\" + defaultLocale + \"'\", context);\n      assertEquals(sdf,dfe);\n      for(String tzStr : TimeZone.getAvailableIDs()) {  \n        TimeZone tz = TimeZone.getTimeZone(tzStr);\n        sdfDate.setTimeZone(tz);\n        sdf = sdfDate.format(twoDaysAgo(defaultLocale, tz));\n        dfe = dateFormatEval.evaluate(\n            \"'NOW-2DAYS','yyyy-MM-dd HH','\" + defaultLocale + \"','\" + tzStr + \"'\", context);\n        assertEquals(sdf,dfe);          \n      }\n    }\n   \n    Date d = new Date();    \n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n        \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", rootLocale).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", defaultLocale).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + defaultLocale + \"'\", context));\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", defaultLocale);\n    for(String tzStr : TimeZone.getAvailableIDs()) {\n      TimeZone tz = TimeZone.getTimeZone(tzStr);\n      sdf.setTimeZone(tz);\n      assertEquals(\n          sdf.format(d),\n          dateFormatEval.evaluate(\n              \"A.key, 'yyyy-MM-dd HH:mm','\" + defaultLocale + \"', '\" + tzStr + \"'\", context));     \n      \n    }\n    \n    \n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"fails if somewhere on earth is a DST change\")\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    String currentLocale = Locale.getDefault().toString();\n    {\n      {\n        SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", Locale.ROOT);\n        String sdf = sdfDate.format(getNow());\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH'\", context);\n        assertEquals(sdf,dfe);\n      }\n      {\n        SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", Locale.getDefault());\n        String sdf = sdfDate.format(getNow());\n        String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH','\"+ currentLocale + \"'\", context);\n        assertEquals(sdf,dfe);\n        for(String tz : TimeZone.getAvailableIDs()) {          \n          sdfDate.setTimeZone(TimeZone.getTimeZone(tz));\n          sdf = sdfDate.format(getNow());\n          dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH','\" + currentLocale + \"','\" + tz + \"'\", context);\n          assertEquals(sdf,dfe);          \n        }\n      }\n    }\n    Date d = new Date();    \n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n    \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ROOT).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault()).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale\n            + \"'\", context));\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.getDefault());\n    for(String tz : TimeZone.getAvailableIDs()) {\n      sdf.setTimeZone(TimeZone.getTimeZone(tz));\n      assertEquals(\n          sdf.format(d),\n          dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + currentLocale + \"', '\" + tz + \"'\", context));     \n      \n    }\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","sourceNew":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    \n    Locale rootLocale = Locale.ROOT;\n    Locale defaultLocale = Locale.getDefault();\n    TimeZone defaultTz = TimeZone.getDefault();\n    \n    {\n      SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", rootLocale);\n      String sdf = sdfDate.format(twoDaysAgo(rootLocale, defaultTz));\n      String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH'\", context);\n      assertEquals(sdf,dfe);\n    }\n    {\n      SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", defaultLocale);\n      String sdf = sdfDate.format(twoDaysAgo(defaultLocale, TimeZone.getDefault()));\n      String dfe = dateFormatEval.evaluate(\n          \"'NOW-2DAYS','yyyy-MM-dd HH','\" + defaultLocale + \"'\", context);\n      assertEquals(sdf,dfe);\n      for(String tzStr : TimeZone.getAvailableIDs()) {  \n        TimeZone tz = TimeZone.getTimeZone(tzStr);\n        sdfDate.setTimeZone(tz);\n        sdf = sdfDate.format(twoDaysAgo(defaultLocale, tz));\n        dfe = dateFormatEval.evaluate(\n            \"'NOW-2DAYS','yyyy-MM-dd HH','\" + defaultLocale + \"','\" + tzStr + \"'\", context);\n        assertEquals(sdf,dfe);          \n      }\n    }\n   \n    Date d = new Date();    \n    Map<String,Object> map = new HashMap<>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n        \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", rootLocale).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", defaultLocale).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + defaultLocale + \"'\", context));\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", defaultLocale);\n    for(String tzStr : TimeZone.getAvailableIDs()) {\n      TimeZone tz = TimeZone.getTimeZone(tzStr);\n      sdf.setTimeZone(tz);\n      assertEquals(\n          sdf.format(d),\n          dateFormatEval.evaluate(\n              \"A.key, 'yyyy-MM-dd HH:mm','\" + defaultLocale + \"', '\" + tzStr + \"'\", context));     \n      \n    }\n    \n    \n  }\n\n","sourceOld":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    \n    Locale rootLocale = Locale.ROOT;\n    Locale defaultLocale = Locale.getDefault();\n    TimeZone defaultTz = TimeZone.getDefault();\n    \n    {\n      SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", rootLocale);\n      String sdf = sdfDate.format(twoDaysAgo(rootLocale, defaultTz));\n      String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH'\", context);\n      assertEquals(sdf,dfe);\n    }\n    {\n      SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", defaultLocale);\n      String sdf = sdfDate.format(twoDaysAgo(defaultLocale, TimeZone.getDefault()));\n      String dfe = dateFormatEval.evaluate(\n          \"'NOW-2DAYS','yyyy-MM-dd HH','\" + defaultLocale + \"'\", context);\n      assertEquals(sdf,dfe);\n      for(String tzStr : TimeZone.getAvailableIDs()) {  \n        TimeZone tz = TimeZone.getTimeZone(tzStr);\n        sdfDate.setTimeZone(tz);\n        sdf = sdfDate.format(twoDaysAgo(defaultLocale, tz));\n        dfe = dateFormatEval.evaluate(\n            \"'NOW-2DAYS','yyyy-MM-dd HH','\" + defaultLocale + \"','\" + tzStr + \"'\", context);\n        assertEquals(sdf,dfe);          \n      }\n    }\n   \n    Date d = new Date();    \n    Map<String,Object> map = new HashMap<String,Object>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n        \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", rootLocale).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", defaultLocale).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + defaultLocale + \"'\", context));\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", defaultLocale);\n    for(String tzStr : TimeZone.getAvailableIDs()) {\n      TimeZone tz = TimeZone.getTimeZone(tzStr);\n      sdf.setTimeZone(tz);\n      assertEquals(\n          sdf.format(d),\n          dateFormatEval.evaluate(\n              \"A.key, 'yyyy-MM-dd HH:mm','\" + defaultLocale + \"', '\" + tzStr + \"'\", context));     \n      \n    }\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"982acea6b1fe5ee8319e43789b99c5cfa04e6a36","date":1453496740,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","sourceNew":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    \n    Locale rootLocale = Locale.ROOT;\n    Locale defaultLocale = Locale.getDefault();\n    TimeZone defaultTz = TimeZone.getDefault();\n    \n    {\n      SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", rootLocale);\n      String sdf = sdfDate.format(twoDaysAgo(rootLocale, defaultTz));\n      String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH'\", context);\n      assertEquals(sdf,dfe);\n    }\n    {\n      SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", defaultLocale);\n      String sdf = sdfDate.format(twoDaysAgo(defaultLocale, TimeZone.getDefault()));\n      String dfe = dateFormatEval.evaluate(\n          \"'NOW-2DAYS','yyyy-MM-dd HH','\" + defaultLocale.toLanguageTag() + \"'\", context);\n      assertEquals(sdf,dfe);\n      for(String tzStr : TimeZone.getAvailableIDs()) {  \n        TimeZone tz = TimeZone.getTimeZone(tzStr);\n        sdfDate.setTimeZone(tz);\n        sdf = sdfDate.format(twoDaysAgo(defaultLocale, tz));\n        dfe = dateFormatEval.evaluate(\n            \"'NOW-2DAYS','yyyy-MM-dd HH','\" + defaultLocale.toLanguageTag() + \"','\" + tzStr + \"'\", context);\n        assertEquals(sdf,dfe);          \n      }\n    }\n   \n    Date d = new Date();    \n    Map<String,Object> map = new HashMap<>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n        \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", rootLocale).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", defaultLocale).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + defaultLocale.toLanguageTag() + \"'\", context));\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", defaultLocale);\n    for(String tzStr : TimeZone.getAvailableIDs()) {\n      TimeZone tz = TimeZone.getTimeZone(tzStr);\n      sdf.setTimeZone(tz);\n      assertEquals(\n          sdf.format(d),\n          dateFormatEval.evaluate(\n              \"A.key, 'yyyy-MM-dd HH:mm','\" + defaultLocale.toLanguageTag() + \"', '\" + tzStr + \"'\", context));     \n      \n    }\n    \n    \n  }\n\n","sourceOld":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    \n    Locale rootLocale = Locale.ROOT;\n    Locale defaultLocale = Locale.getDefault();\n    TimeZone defaultTz = TimeZone.getDefault();\n    \n    {\n      SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", rootLocale);\n      String sdf = sdfDate.format(twoDaysAgo(rootLocale, defaultTz));\n      String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH'\", context);\n      assertEquals(sdf,dfe);\n    }\n    {\n      SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", defaultLocale);\n      String sdf = sdfDate.format(twoDaysAgo(defaultLocale, TimeZone.getDefault()));\n      String dfe = dateFormatEval.evaluate(\n          \"'NOW-2DAYS','yyyy-MM-dd HH','\" + defaultLocale + \"'\", context);\n      assertEquals(sdf,dfe);\n      for(String tzStr : TimeZone.getAvailableIDs()) {  \n        TimeZone tz = TimeZone.getTimeZone(tzStr);\n        sdfDate.setTimeZone(tz);\n        sdf = sdfDate.format(twoDaysAgo(defaultLocale, tz));\n        dfe = dateFormatEval.evaluate(\n            \"'NOW-2DAYS','yyyy-MM-dd HH','\" + defaultLocale + \"','\" + tzStr + \"'\", context);\n        assertEquals(sdf,dfe);          \n      }\n    }\n   \n    Date d = new Date();    \n    Map<String,Object> map = new HashMap<>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n        \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", rootLocale).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", defaultLocale).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + defaultLocale + \"'\", context));\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", defaultLocale);\n    for(String tzStr : TimeZone.getAvailableIDs()) {\n      TimeZone tz = TimeZone.getTimeZone(tzStr);\n      sdf.setTimeZone(tz);\n      assertEquals(\n          sdf.format(d),\n          dateFormatEval.evaluate(\n              \"A.key, 'yyyy-MM-dd HH:mm','\" + defaultLocale + \"', '\" + tzStr + \"'\", context));     \n      \n    }\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestBuiltInEvaluators#testDateFormatEvaluator().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testDateFormatEvaluator() {\n    Evaluator dateFormatEval = new DateFormatEvaluator();\n    ContextImpl context = new ContextImpl(null, resolver, null,\n        Context.FULL_DUMP, Collections.<String,Object> emptyMap(), null, null);\n    \n    Locale rootLocale = Locale.ROOT;\n    Locale defaultLocale = Locale.getDefault();\n    TimeZone defaultTz = TimeZone.getDefault();\n    \n    {\n      SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", rootLocale);\n      String sdf = sdfDate.format(twoDaysAgo(rootLocale, defaultTz));\n      String dfe = dateFormatEval.evaluate(\"'NOW-2DAYS','yyyy-MM-dd HH'\", context);\n      assertEquals(sdf,dfe);\n    }\n    {\n      SimpleDateFormat sdfDate = new SimpleDateFormat(\"yyyy-MM-dd HH\", defaultLocale);\n      String sdf = sdfDate.format(twoDaysAgo(defaultLocale, TimeZone.getDefault()));\n      String dfe = dateFormatEval.evaluate(\n          \"'NOW-2DAYS','yyyy-MM-dd HH','\" + defaultLocale.toLanguageTag() + \"'\", context);\n      assertEquals(sdf,dfe);\n      for(String tzStr : TimeZone.getAvailableIDs()) {  \n        TimeZone tz = TimeZone.getTimeZone(tzStr);\n        sdfDate.setTimeZone(tz);\n        sdf = sdfDate.format(twoDaysAgo(defaultLocale, tz));\n        dfe = dateFormatEval.evaluate(\n            \"'NOW-2DAYS','yyyy-MM-dd HH','\" + defaultLocale.toLanguageTag() + \"','\" + tzStr + \"'\", context);\n        assertEquals(sdf,dfe);          \n      }\n    }\n   \n    Date d = new Date();    \n    Map<String,Object> map = new HashMap<>();\n    map.put(\"key\", d);\n    resolver.addNamespace(\"A\", map);\n        \n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", rootLocale).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm'\", context));\n    assertEquals(\n        new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", defaultLocale).format(d),\n        dateFormatEval.evaluate(\"A.key, 'yyyy-MM-dd HH:mm','\" + defaultLocale.toLanguageTag() + \"'\", context));\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", defaultLocale);\n    for(String tzStr : TimeZone.getAvailableIDs()) {\n      TimeZone tz = TimeZone.getTimeZone(tzStr);\n      sdf.setTimeZone(tz);\n      assertEquals(\n          sdf.format(d),\n          dateFormatEval.evaluate(\n              \"A.key, 'yyyy-MM-dd HH:mm','\" + defaultLocale.toLanguageTag() + \"', '\" + tzStr + \"'\", context));     \n      \n    }\n    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c463456ab4ad6f79b30ac1b53ba677727c76a99f":["f7a5f8ae2b11a88c74aa83a1735dc38a37e931ac"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","f7a5f8ae2b11a88c74aa83a1735dc38a37e931ac"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae910e6d2501917e47133b2964346f84f916b2c4"],"f7a5f8ae2b11a88c74aa83a1735dc38a37e931ac":["4da25118dcc5b16cf6bed236dc7b6b3aba6c1cde"],"4da25118dcc5b16cf6bed236dc7b6b3aba6c1cde":["38db2376d672de5348d236e52587c01c443041bc"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"38db2376d672de5348d236e52587c01c443041bc":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"ae910e6d2501917e47133b2964346f84f916b2c4":["c463456ab4ad6f79b30ac1b53ba677727c76a99f"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4da25118dcc5b16cf6bed236dc7b6b3aba6c1cde"],"982acea6b1fe5ee8319e43789b99c5cfa04e6a36":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["07155cdd910937cdf6877e48884d5782845c8b8b","ae910e6d2501917e47133b2964346f84f916b2c4"],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c463456ab4ad6f79b30ac1b53ba677727c76a99f"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["982acea6b1fe5ee8319e43789b99c5cfa04e6a36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"c463456ab4ad6f79b30ac1b53ba677727c76a99f":["ae910e6d2501917e47133b2964346f84f916b2c4","07155cdd910937cdf6877e48884d5782845c8b8b"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["982acea6b1fe5ee8319e43789b99c5cfa04e6a36"],"f7a5f8ae2b11a88c74aa83a1735dc38a37e931ac":["c463456ab4ad6f79b30ac1b53ba677727c76a99f","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"4da25118dcc5b16cf6bed236dc7b6b3aba6c1cde":["f7a5f8ae2b11a88c74aa83a1735dc38a37e931ac","407687e67faf6e1f02a211ca078d8e3eed631027"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["38db2376d672de5348d236e52587c01c443041bc"],"38db2376d672de5348d236e52587c01c443041bc":["4da25118dcc5b16cf6bed236dc7b6b3aba6c1cde"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"ae910e6d2501917e47133b2964346f84f916b2c4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"982acea6b1fe5ee8319e43789b99c5cfa04e6a36":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}