{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null, true);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null, true);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null, true);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9896f063d7e42373599b68eb61b173bdb11411c5","date":1330354201,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null, true);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null, true);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null, true);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null, true);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d51faece9593d2e9be4f2b6e603d96e5bcb2d1","date":1337273259,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null, true);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null, true);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null, true);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null, true);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null, true);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null, true);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf4e43a4d7a969632d4bec76fd5bba149cb81487","date":1342043143,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null, true);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null, true);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null, true);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<String,Object>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,String> collectionProps = new HashMap<String,String>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<String,Object>();\n\n          // set defaults\n          collectionProps.put(DocCollection.DOC_ROUTER, \"compositeId\");\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<String,Object>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<String,Object>();\n\n          // set defaults\n          collectionProps.put(DocCollection.DOC_ROUTER, \"compositeId\");\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<String,Object>();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              getConfName(collection, collectionPath, collectionProps);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          \n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e6c1841c82b62bf1957eea39d85a586a2601ca8","date":1355967448,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<String,Object>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          if (collectionProps.get(DocCollection.DOC_ROUTER) == null) {\n            Object numShards = collectionProps.get(ZkStateReader.NUM_SHARDS_PROP);\n            if (numShards == null) {\n              numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n            }\n            if (numShards == null) {\n              collectionProps.put(DocCollection.DOC_ROUTER, ImplicitDocRouter.NAME);\n            } else {\n              collectionProps.put(DocCollection.DOC_ROUTER, DocRouter.DEFAULT_NAME);\n            }\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<String,Object>();\n\n          // set defaults\n          collectionProps.put(DocCollection.DOC_ROUTER, \"compositeId\");\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["9660058c0757b690c71178a9f109afbceb641a43"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<String,Object>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          if (collectionProps.get(DocCollection.DOC_ROUTER) == null) {\n            Object numShards = collectionProps.get(ZkStateReader.NUM_SHARDS_PROP);\n            if (numShards == null) {\n              numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n            }\n            if (numShards == null) {\n              collectionProps.put(DocCollection.DOC_ROUTER, ImplicitDocRouter.NAME);\n            } else {\n              collectionProps.put(DocCollection.DOC_ROUTER, DocRouter.DEFAULT_NAME);\n            }\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<String,Object>();\n\n          // set defaults\n          collectionProps.put(DocCollection.DOC_ROUTER, \"compositeId\");\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e187a371a1d09379bb452c2c13a7b9221525dff8","date":1379517004,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<String,Object>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          if (collectionProps.get(DocCollection.DOC_ROUTER) == null) {\n            Object numShards = collectionProps.get(ZkStateReader.NUM_SHARDS_PROP);\n            if (numShards == null) {\n              numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n            }\n            if (numShards == null) {\n              collectionProps.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n            } else {\n              collectionProps.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\", DocRouter.DEFAULT_NAME));\n            }\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<String,Object>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          if (collectionProps.get(DocCollection.DOC_ROUTER) == null) {\n            Object numShards = collectionProps.get(ZkStateReader.NUM_SHARDS_PROP);\n            if (numShards == null) {\n              numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n            }\n            if (numShards == null) {\n              collectionProps.put(DocCollection.DOC_ROUTER, ImplicitDocRouter.NAME);\n            } else {\n              collectionProps.put(DocCollection.DOC_ROUTER, DocRouter.DEFAULT_NAME);\n            }\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["9660058c0757b690c71178a9f109afbceb641a43"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9660058c0757b690c71178a9f109afbceb641a43","date":1381306726,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<String,Object>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<String,Object>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          if (collectionProps.get(DocCollection.DOC_ROUTER) == null) {\n            Object numShards = collectionProps.get(ZkStateReader.NUM_SHARDS_PROP);\n            if (numShards == null) {\n              numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);\n            }\n            if (numShards == null) {\n              collectionProps.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\",ImplicitDocRouter.NAME));\n            } else {\n              collectionProps.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\", DocRouter.DEFAULT_NAME));\n            }\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":["6e6c1841c82b62bf1957eea39d85a586a2601ca8","e187a371a1d09379bb452c2c13a7b9221525dff8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<String,Object>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d4e985daefcb892b529223b478c47985fc3c483","date":1395658491,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n\n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n        SolrParams params = cd.getParams();\n\n        try {\n          Map<String, Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX + CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP, cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n\n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n        SolrParams params = cd.getParams();\n\n        try {\n          Map<String, Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX + CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP, cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP,  cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n    catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n\n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n        SolrParams params = cd.getParams();\n\n        try {\n          Map<String, Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX + CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP, cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n\n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n        SolrParams params = cd.getParams();\n\n        try {\n          Map<String, Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX + CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP, cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, ZkStateReader.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n\n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n\n        try {\n          Map<String, Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX + CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (cd.getParams().size() > 0) {\n            collectionProps.putAll(cd.getParams());\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP, cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n\n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n        SolrParams params = cd.getParams();\n\n        try {\n          Map<String, Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX + CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP, cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n\n    log.debug(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.debug(\"Creating collection in ZooKeeper:\" + collection);\n\n        try {\n          Map<String, Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX + CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (cd.getParams().size() > 0) {\n            collectionProps.putAll(cd.getParams());\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP, cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.debug(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n\n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n\n        try {\n          Map<String, Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX + CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (cd.getParams().size() > 0) {\n            collectionProps.putAll(cd.getParams());\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP, cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n\n    log.debug(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.debug(\"Creating collection in ZooKeeper:\" + collection);\n\n        try {\n          Map<String, Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX + CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (cd.getParams().size() > 0) {\n            collectionProps.putAll(cd.getParams());\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP, cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.debug(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n\n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n\n        try {\n          Map<String, Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX + CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (cd.getParams().size() > 0) {\n            collectionProps.putAll(cd.getParams());\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP, cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n\n    log.debug(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.debug(\"Creating collection in ZooKeeper:\" + collection);\n\n        try {\n          Map<String, Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX + CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (cd.getParams().size() > 0) {\n            collectionProps.putAll(cd.getParams());\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP, cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.debug(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n\n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n\n        try {\n          Map<String, Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX + CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (cd.getParams().size() > 0) {\n            collectionProps.putAll(cd.getParams());\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP, cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":5,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#createCollectionZkNode(SolrZkClient,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public static void createCollectionZkNode(SolrZkClient zkClient, String collection, Map<String,String> params) {\n    log.debug(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.debug(\"Creating collection in ZooKeeper:\" + collection);\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX + ZkController.CONFIGNAME_PROP, collection);\n\n          if (params.size() > 0) {\n            collectionProps.putAll(params);\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n              // users can create the collection node and conf link ahead of time, or this may return another option\n              getConfName(zkClient, collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(ZkController.COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(ZkController.CONFIGNAME_PROP))\n              collectionProps.put(ZkController.CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n          } else {\n            getConfName(zkClient, collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.debug(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n\n    log.debug(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.debug(\"Creating collection in ZooKeeper:\" + collection);\n\n        try {\n          Map<String, Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX + CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (cd.getParams().size() > 0) {\n            collectionProps.putAll(cd.getParams());\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP, cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.debug(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#createCollectionZkNode(SolrZkClient,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public static void createCollectionZkNode(SolrZkClient zkClient, String collection, Map<String,String> params) {\n    log.debug(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.debug(\"Creating collection in ZooKeeper:\" + collection);\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX + ZkController.CONFIGNAME_PROP, collection);\n\n          if (params.size() > 0) {\n            collectionProps.putAll(params);\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n              // users can create the collection node and conf link ahead of time, or this may return another option\n              getConfName(zkClient, collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(ZkController.COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(ZkController.CONFIGNAME_PROP))\n              collectionProps.put(ZkController.CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n          } else {\n            getConfName(zkClient, collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.debug(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n\n    log.debug(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.debug(\"Creating collection in ZooKeeper:\" + collection);\n\n        try {\n          Map<String, Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX + CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (cd.getParams().size() > 0) {\n            collectionProps.putAll(cd.getParams());\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP, cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.debug(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","6e6c1841c82b62bf1957eea39d85a586a2601ca8"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","9896f063d7e42373599b68eb61b173bdb11411c5"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"9660058c0757b690c71178a9f109afbceb641a43":["e187a371a1d09379bb452c2c13a7b9221525dff8"],"70d51faece9593d2e9be4f2b6e603d96e5bcb2d1":["9896f063d7e42373599b68eb61b173bdb11411c5"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","fbcfc050b9f253136eaa5950b57248b2109eac11"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["2d4e985daefcb892b529223b478c47985fc3c483"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"aba371508186796cc6151d8223a5b4e16d02e26e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","962cd4f5e313777f35da8f521265323e84184929"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["70d51faece9593d2e9be4f2b6e603d96e5bcb2d1"],"9896f063d7e42373599b68eb61b173bdb11411c5":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"ef0d8a69209261514c5739c770bba706c2308450":["9896f063d7e42373599b68eb61b173bdb11411c5","70d51faece9593d2e9be4f2b6e603d96e5bcb2d1"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9660058c0757b690c71178a9f109afbceb641a43"],"962cd4f5e313777f35da8f521265323e84184929":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"fa64435b5902ce266c23755a4a00691a3285dab8":["cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"407687e67faf6e1f02a211ca078d8e3eed631027":["fa64435b5902ce266c23755a4a00691a3285dab8","c5a558d54519c651068ddb202f03befefb1514a7"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"6e6c1841c82b62bf1957eea39d85a586a2601ca8":["c5a558d54519c651068ddb202f03befefb1514a7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf4e43a4d7a969632d4bec76fd5bba149cb81487":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["70d51faece9593d2e9be4f2b6e603d96e5bcb2d1","cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"c5a558d54519c651068ddb202f03befefb1514a7":["fa64435b5902ce266c23755a4a00691a3285dab8"],"e187a371a1d09379bb452c2c13a7b9221525dff8":["6e6c1841c82b62bf1957eea39d85a586a2601ca8"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d4e985daefcb892b529223b478c47985fc3c483":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9660058c0757b690c71178a9f109afbceb641a43":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"70d51faece9593d2e9be4f2b6e603d96e5bcb2d1":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","ef0d8a69209261514c5739c770bba706c2308450","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","962cd4f5e313777f35da8f521265323e84184929","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["aba371508186796cc6151d8223a5b4e16d02e26e","cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"9896f063d7e42373599b68eb61b173bdb11411c5":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","70d51faece9593d2e9be4f2b6e603d96e5bcb2d1","ef0d8a69209261514c5739c770bba706c2308450"],"ef0d8a69209261514c5739c770bba706c2308450":[],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2d4e985daefcb892b529223b478c47985fc3c483"],"fa64435b5902ce266c23755a4a00691a3285dab8":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"6e6c1841c82b62bf1957eea39d85a586a2601ca8":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","e187a371a1d09379bb452c2c13a7b9221525dff8"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"cf4e43a4d7a969632d4bec76fd5bba149cb81487":["aba371508186796cc6151d8223a5b4e16d02e26e","fa64435b5902ce266c23755a4a00691a3285dab8","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","6e6c1841c82b62bf1957eea39d85a586a2601ca8"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0d22ac6a4146774c1bc8400160fc0b6150294e92","9896f063d7e42373599b68eb61b173bdb11411c5","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"e187a371a1d09379bb452c2c13a7b9221525dff8":["9660058c0757b690c71178a9f109afbceb641a43"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2d4e985daefcb892b529223b478c47985fc3c483":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d22ac6a4146774c1bc8400160fc0b6150294e92","aba371508186796cc6151d8223a5b4e16d02e26e","9856095f7afb5a607bf5e65077615ed91273508c","ef0d8a69209261514c5739c770bba706c2308450","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}