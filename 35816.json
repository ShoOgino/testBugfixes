{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#test().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRequestStatusCollectionAPI#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1000\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n\n    NamedList r = null;\n    NamedList status = null;\n    String message = null;\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1000\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1000] in completed tasks\", message);\n\n    // Check for a random (hopefully non-existent request id\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"9999999\");\n    try {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      message = (String) status.get(\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Did not find [9999999] in any tasks queue\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", \"collection2\");\n    params.set(\"shard\", \"shard1\");\n    params.set(CommonAdminParams.ASYNC, \"1001\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1001\");\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1001] in completed tasks\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1002\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n\n    assertEquals(\"found [1002] in failed tasks\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection3\");\n    params.set(\"numShards\", 1);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      r = sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task with the same requestid already exists.\", r.get(\"error\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1000\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n\n    NamedList r = null;\n    NamedList status = null;\n    String message = null;\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1000\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1000] in completed tasks\", message);\n\n    // Check for a random (hopefully non-existent request id\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"9999999\");\n    try {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      message = (String) status.get(\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Did not find [9999999] in any tasks queue\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", \"collection2\");\n    params.set(\"shard\", \"shard1\");\n    params.set(CommonAdminParams.ASYNC, \"1001\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1001\");\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1001] in completed tasks\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1002\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n\n    assertEquals(\"found [1002] in failed tasks\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection3\");\n    params.set(\"numShards\", 1);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      r = sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task with the same requestid already exists.\", r.get(\"error\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRequestStatusCollectionAPI#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1000\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n\n    NamedList r = null;\n    NamedList status = null;\n    String message = null;\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1000\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1000] in completed tasks\", message);\n\n    // Check for a random (hopefully non-existent request id\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"9999999\");\n    try {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      message = (String) status.get(\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Did not find [9999999] in any tasks queue\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", \"collection2\");\n    params.set(\"shard\", \"shard1\");\n    params.set(CommonAdminParams.ASYNC, \"1001\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1001\");\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1001] in completed tasks\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1002\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n\n    assertEquals(\"found [1002] in failed tasks\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection3\");\n    params.set(\"numShards\", 1);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      r = sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task with the same requestid already exists.\", r.get(\"error\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1000\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n\n    NamedList r = null;\n    NamedList status = null;\n    String message = null;\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1000\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1000] in completed tasks\", message);\n\n    // Check for a random (hopefully non-existent request id\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"9999999\");\n    try {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      message = (String) status.get(\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Did not find [9999999] in any tasks queue\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", \"collection2\");\n    params.set(\"shard\", \"shard1\");\n    params.set(CommonAdminParams.ASYNC, \"1001\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1001\");\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1001] in completed tasks\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1002\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n\n    assertEquals(\"found [1002] in failed tasks\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection3\");\n    params.set(\"numShards\", 1);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      r = sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task with the same requestid already exists.\", r.get(\"error\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e6520a21709190413a63084ed135271aab1a7c","date":1556607462,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    int numShards = 2;\n    params.set(\"numShards\", numShards);\n    int replicationFactor = 1;\n    params.set(\"replicationFactor\", replicationFactor);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1000\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n\n    NamedList r = null;\n    NamedList status = null;\n    String message = null;\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1000\");\n\n    NamedList<Object> createResponse =null;\n    try {\n      createResponse = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n      message = (String) createResponse.findRecursive(\"status\",\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1000] in completed tasks\", message); \n    assertEquals(\"expecting \"+numShards+\" shard responses at \"+createResponse,\n        numShards, numResponsesCompleted(createResponse));\n    \n    // Check for a random (hopefully non-existent request id\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"9999999\");\n    try {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      message = (String) status.get(\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Did not find [9999999] in any tasks queue\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", \"collection2\");\n    params.set(\"shard\", \"shard1\");\n    params.set(CommonAdminParams.ASYNC, \"1001\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1001\");\n    NamedList<Object> splitResponse=null;\n    try {\n      splitResponse = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n      message = (String) splitResponse.findRecursive(\"status\",\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1001] in completed tasks\", message);\n    // create * 2 + preprecovery *2 + split + req_apply_upd * 2 =7 \n    assertEquals(\"expecting \"+(2+2+1+2)+\" shard responses at \"+splitResponse,\n        (2+2+1+2), numResponsesCompleted(splitResponse));\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1002\");\n\n    try {\n      NamedList<Object> response = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n      message = (String) response.findRecursive(\"status\",\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1002] in failed tasks\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection3\");\n    params.set(\"numShards\", 1);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      r = sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task with the same requestid already exists.\", r.get(\"error\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1000\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n\n    NamedList r = null;\n    NamedList status = null;\n    String message = null;\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1000\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1000] in completed tasks\", message);\n\n    // Check for a random (hopefully non-existent request id\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"9999999\");\n    try {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      message = (String) status.get(\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Did not find [9999999] in any tasks queue\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", \"collection2\");\n    params.set(\"shard\", \"shard1\");\n    params.set(CommonAdminParams.ASYNC, \"1001\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1001\");\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1001] in completed tasks\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1002\");\n\n    try {\n      message = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n\n    assertEquals(\"found [1002] in failed tasks\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection3\");\n    params.set(\"numShards\", 1);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      r = sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task with the same requestid already exists.\", r.get(\"error\"));\n  }\n\n","bugFix":["3088cdaa24ffe3ef44713ac9484114bd56eca2af","058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","3aeb3c21ed4f08d89cb237970a0b6ef324c17441"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    int numShards = 2;\n    params.set(\"numShards\", numShards);\n    int replicationFactor = 1;\n    params.set(\"replicationFactor\", replicationFactor);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1000\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList r = null;\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList status = null;\n    String message = null;\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1000\");\n\n    NamedList<Object> createResponse =null;\n    try {\n      createResponse = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n      message = (String) createResponse.findRecursive(\"status\",\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1000] in completed tasks\", message); \n    assertEquals(\"expecting \"+numShards+\" shard responses at \"+createResponse,\n        numShards, numResponsesCompleted(createResponse));\n    \n    // Check for a random (hopefully non-existent request id\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"9999999\");\n    try {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      message = (String) status.get(\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Did not find [9999999] in any tasks queue\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", \"collection2\");\n    params.set(\"shard\", \"shard1\");\n    params.set(CommonAdminParams.ASYNC, \"1001\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1001\");\n    NamedList<Object> splitResponse=null;\n    try {\n      splitResponse = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n      message = (String) splitResponse.findRecursive(\"status\",\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1001] in completed tasks\", message);\n    // create * 2 + preprecovery *2 + split + req_apply_upd * 2 =7 \n    assertEquals(\"expecting \"+(2+2+1+2)+\" shard responses at \"+splitResponse,\n        (2+2+1+2), numResponsesCompleted(splitResponse));\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1002\");\n\n    try {\n      NamedList<Object> response = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n      message = (String) response.findRecursive(\"status\",\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1002] in failed tasks\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection3\");\n    params.set(\"numShards\", 1);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      r = sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task with the same requestid already exists.\", r.get(\"error\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    int numShards = 2;\n    params.set(\"numShards\", numShards);\n    int replicationFactor = 1;\n    params.set(\"replicationFactor\", replicationFactor);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1000\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n\n    NamedList r = null;\n    NamedList status = null;\n    String message = null;\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1000\");\n\n    NamedList<Object> createResponse =null;\n    try {\n      createResponse = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n      message = (String) createResponse.findRecursive(\"status\",\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1000] in completed tasks\", message); \n    assertEquals(\"expecting \"+numShards+\" shard responses at \"+createResponse,\n        numShards, numResponsesCompleted(createResponse));\n    \n    // Check for a random (hopefully non-existent request id\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"9999999\");\n    try {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      message = (String) status.get(\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Did not find [9999999] in any tasks queue\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", \"collection2\");\n    params.set(\"shard\", \"shard1\");\n    params.set(CommonAdminParams.ASYNC, \"1001\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1001\");\n    NamedList<Object> splitResponse=null;\n    try {\n      splitResponse = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n      message = (String) splitResponse.findRecursive(\"status\",\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1001] in completed tasks\", message);\n    // create * 2 + preprecovery *2 + split + req_apply_upd * 2 =7 \n    assertEquals(\"expecting \"+(2+2+1+2)+\" shard responses at \"+splitResponse,\n        (2+2+1+2), numResponsesCompleted(splitResponse));\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1002\");\n\n    try {\n      NamedList<Object> response = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n      message = (String) response.findRecursive(\"status\",\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1002] in failed tasks\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection3\");\n    params.set(\"numShards\", 1);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      r = sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task with the same requestid already exists.\", r.get(\"error\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    int numShards = 2;\n    params.set(\"numShards\", numShards);\n    int replicationFactor = 1;\n    params.set(\"replicationFactor\", replicationFactor);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1000\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList r = null;\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList status = null;\n    String message = null;\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1000\");\n\n    NamedList<Object> createResponse =null;\n    try {\n      createResponse = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n      message = (String) createResponse.findRecursive(\"status\",\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1000] in completed tasks\", message); \n    assertEquals(\"expecting \"+numShards+\" shard responses at \"+createResponse,\n        numShards, numResponsesCompleted(createResponse));\n    \n    // Check for a random (hopefully non-existent request id\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"9999999\");\n    try {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      message = (String) status.get(\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Did not find [9999999] in any tasks queue\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", \"collection2\");\n    params.set(\"shard\", \"shard1\");\n    params.set(CommonAdminParams.ASYNC, \"1001\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1001\");\n    NamedList<Object> splitResponse=null;\n    try {\n      splitResponse = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n      message = (String) splitResponse.findRecursive(\"status\",\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1001] in completed tasks\", message);\n    // create * 2 + preprecovery *2 + split + req_apply_upd * 2 =7 \n    assertEquals(\"expecting \"+(2+2+1+2)+\" shard responses at \"+splitResponse,\n        (2+2+1+2), numResponsesCompleted(splitResponse));\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1002\");\n\n    try {\n      NamedList<Object> response = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n      message = (String) response.findRecursive(\"status\",\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1002] in failed tasks\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection3\");\n    params.set(\"numShards\", 1);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      r = sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task with the same requestid already exists.\", r.get(\"error\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    int numShards = 2;\n    params.set(\"numShards\", numShards);\n    int replicationFactor = 1;\n    params.set(\"replicationFactor\", replicationFactor);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1000\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList r = null;\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList status = null;\n    String message = null;\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1000\");\n\n    NamedList<Object> createResponse =null;\n    try {\n      createResponse = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n      message = (String) createResponse.findRecursive(\"status\",\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1000] in completed tasks\", message); \n    assertEquals(\"expecting \"+numShards+\" shard responses at \"+createResponse,\n        numShards, numResponsesCompleted(createResponse));\n    \n    // Check for a random (hopefully non-existent request id\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"9999999\");\n    try {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      message = (String) status.get(\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Did not find [9999999] in any tasks queue\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", \"collection2\");\n    params.set(\"shard\", \"shard1\");\n    params.set(CommonAdminParams.ASYNC, \"1001\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    // Check for the request to be completed.\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1001\");\n    NamedList<Object> splitResponse=null;\n    try {\n      splitResponse = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n      message = (String) splitResponse.findRecursive(\"status\",\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1001] in completed tasks\", message);\n    // create * 2 + preprecovery *2 + split + req_apply_upd * 2 =7 \n    assertEquals(\"expecting \"+(2+2+1+2)+\" shard responses at \"+splitResponse,\n        (2+2+1+2), numResponsesCompleted(splitResponse));\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection2\");\n    params.set(\"numShards\", 2);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    params = new ModifiableSolrParams();\n\n    params.set(\"action\", CollectionParams.CollectionAction.REQUESTSTATUS.toString());\n    params.set(OverseerCollectionMessageHandler.REQUESTID, \"1002\");\n\n    try {\n      NamedList<Object> response = sendStatusRequestWithRetry(params, MAX_WAIT_TIMEOUT_SECONDS);\n      message = (String) response.findRecursive(\"status\",\"msg\");\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"found [1002] in failed tasks\", message);\n\n    params = new ModifiableSolrParams();\n    params.set(CollectionParams.ACTION, CollectionParams.CollectionAction.CREATE.toString());\n    params.set(\"name\", \"collection3\");\n    params.set(\"numShards\", 1);\n    params.set(\"replicationFactor\", 1);\n    params.set(\"maxShardsPerNode\", 100);\n    params.set(\"collection.configName\", \"conf1\");\n    params.set(CommonAdminParams.ASYNC, \"1002\");\n    try {\n      r = sendRequest(params);\n    } catch (SolrServerException | IOException e) {\n      e.printStackTrace();\n    }\n\n    assertEquals(\"Task with the same requestid already exists.\", r.get(\"error\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["69e6520a21709190413a63084ed135271aab1a7c"],"69e6520a21709190413a63084ed135271aab1a7c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["69e6520a21709190413a63084ed135271aab1a7c"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"69e6520a21709190413a63084ed135271aab1a7c":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}