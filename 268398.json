{"path":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToFloatMap#IntToFloatMap(int).mjava","commits":[{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToFloatMap#IntToFloatMap(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a map with given capacity. Capacity is adjusted to a native\n   * power of 2, with minimum of 16.\n   * \n   * @param capacity\n   *            minimum capacity for the map.\n   */\n  public IntToFloatMap(int capacity) {\n    this.capacity = 16;\n    // Minimum capacity is 16..\n    while (this.capacity < capacity) {\n      // Multiply by 2 as long as we're still under the requested capacity\n      this.capacity <<= 1;\n    }\n\n    // As mentioned, we use the first index (0) as 'Ground', so we need the\n    // length of the arrays to be one more than the capacity\n    int arrayLength = this.capacity + 1;\n\n    this.values = new float[arrayLength];\n    this.keys = new int[arrayLength];\n    this.next = new int[arrayLength];\n\n    // Hash entries are twice as big as the capacity.\n    int baseHashSize = this.capacity << 1;\n\n    this.baseHash = new int[baseHashSize];\n\n    this.values[0] = GROUND;\n\n    // The has factor is 2^M - 1 which is used as an \"AND\" hashing operator.\n    // {@link #calcBaseHash()}\n    this.hashFactor = baseHashSize - 1;\n\n    this.size = 0;\n\n    clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToFloatMap#IntToFloatMap(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a map with given capacity. Capacity is adjusted to a native\n   * power of 2, with minimum of 16.\n   * \n   * @param capacity\n   *            minimum capacity for the map.\n   */\n  public IntToFloatMap(int capacity) {\n    this.capacity = 16;\n    // Minimum capacity is 16..\n    while (this.capacity < capacity) {\n      // Multiply by 2 as long as we're still under the requested capacity\n      this.capacity <<= 1;\n    }\n\n    // As mentioned, we use the first index (0) as 'Ground', so we need the\n    // length of the arrays to be one more than the capacity\n    int arrayLength = this.capacity + 1;\n\n    this.values = new float[arrayLength];\n    this.keys = new int[arrayLength];\n    this.next = new int[arrayLength];\n\n    // Hash entries are twice as big as the capacity.\n    int baseHashSize = this.capacity << 1;\n\n    this.baseHash = new int[baseHashSize];\n\n    this.values[0] = GROUND;\n\n    // The has factor is 2^M - 1 which is used as an \"AND\" hashing operator.\n    // {@link #calcBaseHash()}\n    this.hashFactor = baseHashSize - 1;\n\n    this.size = 0;\n\n    clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/collections/IntToFloatMap#IntToFloatMap(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/collections/IntToFloatMap#IntToFloatMap(int).mjava","sourceNew":"  /**\n   * Constructs a map with given capacity. Capacity is adjusted to a native\n   * power of 2, with minimum of 16.\n   * \n   * @param capacity\n   *            minimum capacity for the map.\n   */\n  public IntToFloatMap(int capacity) {\n    this.capacity = 16;\n    // Minimum capacity is 16..\n    while (this.capacity < capacity) {\n      // Multiply by 2 as long as we're still under the requested capacity\n      this.capacity <<= 1;\n    }\n\n    // As mentioned, we use the first index (0) as 'Ground', so we need the\n    // length of the arrays to be one more than the capacity\n    int arrayLength = this.capacity + 1;\n\n    this.values = new float[arrayLength];\n    this.keys = new int[arrayLength];\n    this.next = new int[arrayLength];\n\n    // Hash entries are twice as big as the capacity.\n    int baseHashSize = this.capacity << 1;\n\n    this.baseHash = new int[baseHashSize];\n\n    this.values[0] = GROUND;\n\n    // The has factor is 2^M - 1 which is used as an \"AND\" hashing operator.\n    // {@link #calcBaseHash()}\n    this.hashFactor = baseHashSize - 1;\n\n    this.size = 0;\n\n    clear();\n  }\n\n","sourceOld":"  /**\n   * Constructs a map with given capacity. Capacity is adjusted to a native\n   * power of 2, with minimum of 16.\n   * \n   * @param capacity\n   *            minimum capacity for the map.\n   */\n  public IntToFloatMap(int capacity) {\n    this.capacity = 16;\n    // Minimum capacity is 16..\n    while (this.capacity < capacity) {\n      // Multiply by 2 as long as we're still under the requested capacity\n      this.capacity <<= 1;\n    }\n\n    // As mentioned, we use the first index (0) as 'Ground', so we need the\n    // length of the arrays to be one more than the capacity\n    int arrayLength = this.capacity + 1;\n\n    this.values = new float[arrayLength];\n    this.keys = new int[arrayLength];\n    this.next = new int[arrayLength];\n\n    // Hash entries are twice as big as the capacity.\n    int baseHashSize = this.capacity << 1;\n\n    this.baseHash = new int[baseHashSize];\n\n    this.values[0] = GROUND;\n\n    // The has factor is 2^M - 1 which is used as an \"AND\" hashing operator.\n    // {@link #calcBaseHash()}\n    this.hashFactor = baseHashSize - 1;\n\n    this.size = 0;\n\n    clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"607428da722dcb3e86bbd11c63de8986e6275c36":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","607428da722dcb3e86bbd11c63de8986e6275c36"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}