{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9308f62fa74f41b5550acff64ae6a38aba6d97e","date":1341665282,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes, \"UTF-8\"));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes, \"UTF-8\"));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes, \"UTF-8\"));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes, \"UTF-8\"));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1","date":1370803313,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE) {\n          System.out.println(\"payloads for span:\" + payload.size());\n          for (final byte [] bytes : payload) {\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes, \"UTF-8\"));\n          }\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes, \"UTF-8\"));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","bugFix":["e450c7d50c2fc84c963d0d7ade9d3217d868064d","42607aa380c892dc1ec0ab26e86a575c28e13618"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE) {\n          System.out.println(\"payloads for span:\" + payload.size());\n          for (final byte [] bytes : payload) {\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes, StandardCharsets.UTF_8));\n          }\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE) {\n          System.out.println(\"payloads for span:\" + payload.size());\n          for (final byte [] bytes : payload) {\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes, \"UTF-8\"));\n          }\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE) {\n          System.out.println(\"payloads for span:\" + payload.size());\n          for (final byte [] bytes : payload) {\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes, StandardCharsets.UTF_8));\n          }\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE) {\n          System.out.println(\"payloads for span:\" + payload.size());\n          for (final byte [] bytes : payload) {\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes, \"UTF-8\"));\n          }\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if(VERBOSE)\n          System.out.println(\"\\nSpans Dump --\");\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          if(VERBOSE) {\n            System.out.println(\"payloads for span:\" + payload.size());\n            for (final byte [] bytes : payload) {\n              System.out.println(\"doc:\" + spans.docID() + \" s:\" + spans.startPosition() + \" e:\" + spans.endPosition() + \" \"\n                + new String(bytes, StandardCharsets.UTF_8));\n            }\n          }\n          assertEquals(\"payload size\", numPayloads[cnt], payload.size());\n        } else { // no payload available\n          assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\", numPayloads.length > 0 && numPayloads[cnt] > 0 );\n        }\n        cnt++;\n      }\n    }\n\n    assertEquals(\"expected numSpans\", numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE) {\n          System.out.println(\"payloads for span:\" + payload.size());\n          for (final byte [] bytes : payload) {\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes, StandardCharsets.UTF_8));\n          }\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if(VERBOSE)\n          System.out.println(\"\\nSpans Dump --\");\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          if(VERBOSE) {\n            System.out.println(\"payloads for span:\" + payload.size());\n            for (final byte [] bytes : payload) {\n              System.out.println(\"doc:\" + spans.docID() + \" s:\" + spans.startPosition() + \" e:\" + spans.endPosition() + \" \"\n                + new String(bytes, StandardCharsets.UTF_8));\n            }\n          }\n          assertEquals(\"payload size\", numPayloads[cnt], payload.size());\n        } else { // no payload available\n          assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\", numPayloads.length > 0 && numPayloads[cnt] > 0 );\n        }\n        cnt++;\n      }\n    }\n\n    assertEquals(\"expected numSpans\", numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE) {\n          System.out.println(\"payloads for span:\" + payload.size());\n          for (final byte [] bytes : payload) {\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes, StandardCharsets.UTF_8));\n          }\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if(VERBOSE)\n          System.out.println(\"\\nSpans Dump --\");\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          if(VERBOSE) {\n            System.out.println(\"payloads for span:\" + payload.size());\n            for (final byte [] bytes : payload) {\n              System.out.println(\"doc:\" + spans.docID() + \" s:\" + spans.startPosition() + \" e:\" + spans.endPosition() + \" \"\n                + new String(bytes, StandardCharsets.UTF_8));\n            }\n          }\n          assertEquals(\"payload size\", numPayloads[cnt], payload.size());\n        } else { // no payload available\n          assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\", numPayloads.length > 0 && numPayloads[cnt] > 0 );\n        }\n        cnt++;\n      }\n    }\n\n    assertEquals(\"expected numSpans\", numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if(VERBOSE)\n          System.out.println(\"\\nSpans Dump --\");\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          if(VERBOSE) {\n            System.out.println(\"payloads for span:\" + payload.size());\n            for (final byte [] bytes : payload) {\n              System.out.println(\"doc:\" + spans.docID() + \" s:\" + spans.startPosition() + \" e:\" + spans.endPosition() + \" \"\n                + new String(bytes, StandardCharsets.UTF_8));\n            }\n          }\n          assertEquals(\"payload size\", numPayloads[cnt], payload.size());\n        } else { // no payload available\n          assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\", numPayloads.length > 0 && numPayloads[cnt] > 0 );\n        }\n        cnt++;\n      }\n    }\n\n    assertEquals(\"expected numSpans\", numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1","7d89d7e4e5101347833eea558851bf4209218619"],"b9308f62fa74f41b5550acff64ae6a38aba6d97e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2acf500f78aa12b92e371fd89c719291986b6b90":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b9308f62fa74f41b5550acff64ae6a38aba6d97e"],"7d89d7e4e5101347833eea558851bf4209218619":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"46d8ada1fff8d18cb197c38c7983225162599948":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2acf500f78aa12b92e371fd89c719291986b6b90"],"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1":["2acf500f78aa12b92e371fd89c719291986b6b90"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["7d89d7e4e5101347833eea558851bf4209218619"],"fab172655716b96f7e42376116235017a922de3a":["7d89d7e4e5101347833eea558851bf4209218619","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b9308f62fa74f41b5550acff64ae6a38aba6d97e":["2acf500f78aa12b92e371fd89c719291986b6b90"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b9308f62fa74f41b5550acff64ae6a38aba6d97e","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2acf500f78aa12b92e371fd89c719291986b6b90":["46d8ada1fff8d18cb197c38c7983225162599948","66d4c05d2724c63d6dcbdb32aab67299d77e3ca1","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}