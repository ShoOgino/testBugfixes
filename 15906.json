{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocsAndPositionsEnumEquals(String,PostingsEnum,PostingsEnum).mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocsAndPositionsEnumEquals(String,PostingsEnum,PostingsEnum).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocsAndPositionsEnumEquals(String,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","sourceNew":"  /**\n   * checks docs + freqs + positions + payloads, sequentially\n   */\n  public void assertDocsAndPositionsEnumEquals(String info, PostingsEnum leftDocs, PostingsEnum rightDocs) throws IOException {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    assertEquals(info, -1, leftDocs.docID());\n    assertEquals(info, -1, rightDocs.docID());\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        assertEquals(info, leftDocs.startOffset(), rightDocs.startOffset());\n        assertEquals(info, leftDocs.endOffset(), rightDocs.endOffset());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","sourceOld":"  /**\n   * checks docs + freqs + positions + payloads, sequentially\n   */\n  public void assertDocsAndPositionsEnumEquals(String info, DocsAndPositionsEnum leftDocs, DocsAndPositionsEnum rightDocs) throws IOException {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    assertEquals(info, -1, leftDocs.docID());\n    assertEquals(info, -1, rightDocs.docID());\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        assertEquals(info, leftDocs.startOffset(), rightDocs.startOffset());\n        assertEquals(info, leftDocs.endOffset(), rightDocs.endOffset());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5311f0bff57ce15a23909f4cfb953773630534","date":1424827033,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocsAndPositionsEnumEquals(String,PostingsEnum,PostingsEnum).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocsAndPositionsEnumEquals(String,PostingsEnum,PostingsEnum).mjava","sourceNew":"  /**\n   * checks docs + freqs + positions + payloads, sequentially\n   */\n  public void assertDocsAndPositionsEnumEquals(String info, PostingsEnum leftDocs, PostingsEnum rightDocs) throws IOException {\n    if (leftDocs == null || rightDocs == null) {\n      // nocommit: this should now only be for term or field not existing, is this assert used in that way?\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    assertEquals(info, -1, leftDocs.docID());\n    assertEquals(info, -1, rightDocs.docID());\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        assertEquals(info, leftDocs.startOffset(), rightDocs.startOffset());\n        assertEquals(info, leftDocs.endOffset(), rightDocs.endOffset());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","sourceOld":"  /**\n   * checks docs + freqs + positions + payloads, sequentially\n   */\n  public void assertDocsAndPositionsEnumEquals(String info, PostingsEnum leftDocs, PostingsEnum rightDocs) throws IOException {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    assertEquals(info, -1, leftDocs.docID());\n    assertEquals(info, -1, rightDocs.docID());\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        assertEquals(info, leftDocs.startOffset(), rightDocs.startOffset());\n        assertEquals(info, leftDocs.endOffset(), rightDocs.endOffset());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b29acf9552fd9eaa1e0a2fb935aeac3aa5f9682","date":1427828435,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocsAndPositionsEnumEquals(String,PostingsEnum,PostingsEnum).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocsAndPositionsEnumEquals(String,PostingsEnum,PostingsEnum).mjava","sourceNew":"  /**\n   * checks docs + freqs + positions + payloads, sequentially\n   */\n  public void assertDocsAndPositionsEnumEquals(String info, PostingsEnum leftDocs, PostingsEnum rightDocs) throws IOException {\n    assertNotNull(leftDocs);\n    assertNotNull(rightDocs);\n    assertEquals(info, -1, leftDocs.docID());\n    assertEquals(info, -1, rightDocs.docID());\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        assertEquals(info, leftDocs.startOffset(), rightDocs.startOffset());\n        assertEquals(info, leftDocs.endOffset(), rightDocs.endOffset());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","sourceOld":"  /**\n   * checks docs + freqs + positions + payloads, sequentially\n   */\n  public void assertDocsAndPositionsEnumEquals(String info, PostingsEnum leftDocs, PostingsEnum rightDocs) throws IOException {\n    if (leftDocs == null || rightDocs == null) {\n      // nocommit: this should now only be for term or field not existing, is this assert used in that way?\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    assertEquals(info, -1, leftDocs.docID());\n    assertEquals(info, -1, rightDocs.docID());\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        assertEquals(info, leftDocs.startOffset(), rightDocs.startOffset());\n        assertEquals(info, leftDocs.endOffset(), rightDocs.endOffset());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocsAndPositionsEnumEquals(String,PostingsEnum,PostingsEnum).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocsAndPositionsEnumEquals(String,PostingsEnum,PostingsEnum).mjava","sourceNew":"  /**\n   * checks docs + freqs + positions + payloads, sequentially\n   */\n  public void assertDocsAndPositionsEnumEquals(String info, PostingsEnum leftDocs, PostingsEnum rightDocs) throws IOException {\n    assertNotNull(leftDocs);\n    assertNotNull(rightDocs);\n    assertEquals(info, -1, leftDocs.docID());\n    assertEquals(info, -1, rightDocs.docID());\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        assertEquals(info, leftDocs.startOffset(), rightDocs.startOffset());\n        assertEquals(info, leftDocs.endOffset(), rightDocs.endOffset());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","sourceOld":"  /**\n   * checks docs + freqs + positions + payloads, sequentially\n   */\n  public void assertDocsAndPositionsEnumEquals(String info, PostingsEnum leftDocs, PostingsEnum rightDocs) throws IOException {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    assertEquals(info, -1, leftDocs.docID());\n    assertEquals(info, -1, rightDocs.docID());\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        assertEquals(info, leftDocs.startOffset(), rightDocs.startOffset());\n        assertEquals(info, leftDocs.endOffset(), rightDocs.endOffset());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb5311f0bff57ce15a23909f4cfb953773630534":["51f5280f31484820499077f41fcdfe92d527d9dc"],"2b29acf9552fd9eaa1e0a2fb935aeac3aa5f9682":["cb5311f0bff57ce15a23909f4cfb953773630534"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["51f5280f31484820499077f41fcdfe92d527d9dc","2b29acf9552fd9eaa1e0a2fb935aeac3aa5f9682"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b4e3cd382d0d075a0f1725649c084bb6510c483"]},"commit2Childs":{"cb5311f0bff57ce15a23909f4cfb953773630534":["2b29acf9552fd9eaa1e0a2fb935aeac3aa5f9682"],"2b29acf9552fd9eaa1e0a2fb935aeac3aa5f9682":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cb5311f0bff57ce15a23909f4cfb953773630534","6b4e3cd382d0d075a0f1725649c084bb6510c483"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}