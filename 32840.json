{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getZkStateReader().mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getZkStateReader().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getZkStateReader().mjava","sourceNew":"  public ZkStateReader getZkStateReader() {\n    return zkStateReader;\n  }\n\n","sourceOld":"  public ZkStateReader getZkStateReader() {\n    return zkStateReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eaeb36333664e8cb92108ef03f68a7b90beb759","date":1480015298,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getZkStateReader().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getZkStateReader().mjava","sourceNew":"  public ZkStateReader getZkStateReader() {\n    if (stateProvider instanceof ZkClientClusterStateProvider) {\n      ZkClientClusterStateProvider provider = (ZkClientClusterStateProvider) stateProvider;\n      return provider.zkStateReader;\n    }\n    throw new IllegalStateException(\"This has no Zk stateReader\");\n  }\n\n","sourceOld":"  public ZkStateReader getZkStateReader() {\n    return zkStateReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getZkStateReader().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getZkStateReader().mjava","sourceNew":"  public ZkStateReader getZkStateReader() {\n    if (stateProvider instanceof ZkClientClusterStateProvider) {\n      ZkClientClusterStateProvider provider = (ZkClientClusterStateProvider) stateProvider;\n      return provider.zkStateReader;\n    }\n    throw new IllegalStateException(\"This has no Zk stateReader\");\n  }\n\n","sourceOld":"  public ZkStateReader getZkStateReader() {\n    return zkStateReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"862864c0fab5449b10f29b4eee94a380d27d787f","date":1491552584,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getZkStateReader().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getZkStateReader().mjava","sourceNew":"  public ZkStateReader getZkStateReader() {\n    if (stateProvider instanceof ZkClientClusterStateProvider) {\n      ZkClientClusterStateProvider provider = (ZkClientClusterStateProvider) stateProvider;\n      stateProvider.connect();\n      return provider.zkStateReader;\n    }\n    throw new IllegalStateException(\"This has no Zk stateReader\");\n  }\n\n","sourceOld":"  public ZkStateReader getZkStateReader() {\n    if (stateProvider instanceof ZkClientClusterStateProvider) {\n      ZkClientClusterStateProvider provider = (ZkClientClusterStateProvider) stateProvider;\n      return provider.zkStateReader;\n    }\n    throw new IllegalStateException(\"This has no Zk stateReader\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getZkStateReader().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getZkStateReader().mjava","sourceNew":"  public ZkStateReader getZkStateReader() {\n    if (stateProvider instanceof ZkClientClusterStateProvider) {\n      ZkClientClusterStateProvider provider = (ZkClientClusterStateProvider) stateProvider;\n      stateProvider.connect();\n      return provider.zkStateReader;\n    }\n    throw new IllegalStateException(\"This has no Zk stateReader\");\n  }\n\n","sourceOld":"  public ZkStateReader getZkStateReader() {\n    if (stateProvider instanceof ZkClientClusterStateProvider) {\n      ZkClientClusterStateProvider provider = (ZkClientClusterStateProvider) stateProvider;\n      return provider.zkStateReader;\n    }\n    throw new IllegalStateException(\"This has no Zk stateReader\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getZkStateReader().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getZkStateReader().mjava","sourceNew":"  public ZkStateReader getZkStateReader() {\n    if (stateProvider instanceof ZkClientClusterStateProvider) {\n      ZkClientClusterStateProvider provider = (ZkClientClusterStateProvider) stateProvider;\n      stateProvider.connect();\n      return provider.zkStateReader;\n    }\n    throw new IllegalStateException(\"This has no Zk stateReader\");\n  }\n\n","sourceOld":"  public ZkStateReader getZkStateReader() {\n    if (stateProvider instanceof ZkClientClusterStateProvider) {\n      ZkClientClusterStateProvider provider = (ZkClientClusterStateProvider) stateProvider;\n      return provider.zkStateReader;\n    }\n    throw new IllegalStateException(\"This has no Zk stateReader\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getZkStateReader().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getZkStateReader().mjava","sourceNew":"  public ZkStateReader getZkStateReader() {\n    if (stateProvider instanceof ZkClientClusterStateProvider) {\n      ZkClientClusterStateProvider provider = (ZkClientClusterStateProvider) stateProvider;\n      stateProvider.connect();\n      return provider.zkStateReader;\n    }\n    throw new IllegalStateException(\"This has no Zk stateReader\");\n  }\n\n","sourceOld":"  public ZkStateReader getZkStateReader() {\n    if (stateProvider instanceof ZkClientClusterStateProvider) {\n      ZkClientClusterStateProvider provider = (ZkClientClusterStateProvider) stateProvider;\n      return provider.zkStateReader;\n    }\n    throw new IllegalStateException(\"This has no Zk stateReader\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#getZkStateReader().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getZkStateReader().mjava","sourceNew":"  public ZkStateReader getZkStateReader() {\n    if (getClusterStateProvider() instanceof ZkClientClusterStateProvider) {\n      ZkClientClusterStateProvider provider = (ZkClientClusterStateProvider) getClusterStateProvider();\n      getClusterStateProvider().connect();\n      return provider.zkStateReader;\n    }\n    throw new IllegalStateException(\"This has no Zk stateReader\");\n  }\n\n","sourceOld":"  public ZkStateReader getZkStateReader() {\n    if (stateProvider instanceof ZkClientClusterStateProvider) {\n      ZkClientClusterStateProvider provider = (ZkClientClusterStateProvider) stateProvider;\n      stateProvider.connect();\n      return provider.zkStateReader;\n    }\n    throw new IllegalStateException(\"This has no Zk stateReader\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["28288370235ed02234a64753cdbf0c6ec096304a"],"727bb765ff2542275f6d31f67be18d7104bae148":["bafca15d8e408346a67f4282ad1143b88023893b","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["3eaeb36333664e8cb92108ef03f68a7b90beb759","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"862864c0fab5449b10f29b4eee94a380d27d787f":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"28288370235ed02234a64753cdbf0c6ec096304a":["3eaeb36333664e8cb92108ef03f68a7b90beb759","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["28288370235ed02234a64753cdbf0c6ec096304a"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["727bb765ff2542275f6d31f67be18d7104bae148","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","862864c0fab5449b10f29b4eee94a380d27d787f","28288370235ed02234a64753cdbf0c6ec096304a"],"bafca15d8e408346a67f4282ad1143b88023893b":["727bb765ff2542275f6d31f67be18d7104bae148","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"862864c0fab5449b10f29b4eee94a380d27d787f":[],"28288370235ed02234a64753cdbf0c6ec096304a":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","862864c0fab5449b10f29b4eee94a380d27d787f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}