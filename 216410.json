{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#getNextToken().mjava","commits":[{"id":"3a5582df130621a89a150891fa2fa492fdce73e0","date":1332126832,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#getNextToken().mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Resumes scanning until the next regular expression is matched,\r\n   * the end of input is encountered or an I/O-Error occurs.\r\n   *\r\n   * @return      the next token\r\n   * @exception   java.io.IOException  if any I/O-Error occurs\r\n   */\r\n  public int getNextToken() throws java.io.IOException {\r\n    int zzInput;\r\n    int zzAction;\r\n\r\n    // cached fields:\r\n    int zzCurrentPosL;\r\n    int zzMarkedPosL;\r\n    int zzEndReadL = zzEndRead;\r\n    char [] zzBufferL = zzBuffer;\r\n    char [] zzCMapL = ZZ_CMAP;\r\n\r\n    int [] zzTransL = ZZ_TRANS;\r\n    int [] zzRowMapL = ZZ_ROWMAP;\r\n    int [] zzAttrL = ZZ_ATTRIBUTE;\r\n\r\n    while (true) {\r\n      zzMarkedPosL = zzMarkedPos;\r\n\r\n      yychar+= zzMarkedPosL-zzStartRead;\r\n\r\n      zzAction = -1;\r\n\r\n      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\r\n  \r\n      zzState = ZZ_LEXSTATE[zzLexicalState];\r\n\r\n      // set up zzAction for empty match case:\r\n      int zzAttributes = zzAttrL[zzState];\r\n      if ( (zzAttributes & 1) == 1 ) {\r\n        zzAction = zzState;\r\n      }\r\n\r\n\r\n      zzForAction: {\r\n        while (true) {\r\n    \r\n          if (zzCurrentPosL < zzEndReadL)\r\n            zzInput = zzBufferL[zzCurrentPosL++];\r\n          else if (zzAtEOF) {\r\n            zzInput = YYEOF;\r\n            break zzForAction;\r\n          }\r\n          else {\r\n            // store back cached positions\r\n            zzCurrentPos  = zzCurrentPosL;\r\n            zzMarkedPos   = zzMarkedPosL;\r\n            boolean eof = zzRefill();\r\n            // get translated positions and possibly new buffer\r\n            zzCurrentPosL  = zzCurrentPos;\r\n            zzMarkedPosL   = zzMarkedPos;\r\n            zzBufferL      = zzBuffer;\r\n            zzEndReadL     = zzEndRead;\r\n            if (eof) {\r\n              zzInput = YYEOF;\r\n              break zzForAction;\r\n            }\r\n            else {\r\n              zzInput = zzBufferL[zzCurrentPosL++];\r\n            }\r\n          }\r\n          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];\r\n          if (zzNext == -1) break zzForAction;\r\n          zzState = zzNext;\r\n\r\n          zzAttributes = zzAttrL[zzState];\r\n          if ( (zzAttributes & 1) == 1 ) {\r\n            zzAction = zzState;\r\n            zzMarkedPosL = zzCurrentPosL;\r\n            if ( (zzAttributes & 8) == 8 ) break zzForAction;\r\n          }\r\n\r\n        }\r\n      }\r\n\r\n      // store back cached position\r\n      zzMarkedPos = zzMarkedPosL;\r\n\r\n      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\r\n        case 2: \r\n          { return WORD_TYPE;\r\n          }\r\n        case 11: break;\r\n        case 5: \r\n          { return SOUTH_EAST_ASIAN_TYPE;\r\n          }\r\n        case 12: break;\r\n        case 1: \r\n          { /* Break so we don't hit fall-through warning: */ break;/* Not numeric, word, ideographic, hiragana, or SE Asian -- ignore it. */\r\n          }\r\n        case 13: break;\r\n        case 10: \r\n          { return URL_TYPE;\r\n          }\r\n        case 14: break;\r\n        case 9: \r\n          { return EMAIL_TYPE;\r\n          }\r\n        case 15: break;\r\n        case 4: \r\n          { return KATAKANA_TYPE;\r\n          }\r\n        case 16: break;\r\n        case 6: \r\n          { return IDEOGRAPHIC_TYPE;\r\n          }\r\n        case 17: break;\r\n        case 8: \r\n          { return HANGUL_TYPE;\r\n          }\r\n        case 18: break;\r\n        case 3: \r\n          { return NUMERIC_TYPE;\r\n          }\r\n        case 19: break;\r\n        case 7: \r\n          { return HIRAGANA_TYPE;\r\n          }\r\n        case 20: break;\r\n        default: \r\n          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\r\n            zzAtEOF = true;\r\n              {\r\n                return StandardTokenizerInterface.YYEOF;\r\n              }\r\n          } \r\n          else {\r\n            zzScanError(ZZ_NO_MATCH);\r\n          }\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d76dfc2581b6998f72c0e749c6200e9c2432c36f","date":1332788228,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#getNextToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#getNextToken().mjava","sourceNew":"  /**\n   * Resumes scanning until the next regular expression is matched,\n   * the end of input is encountered or an I/O-Error occurs.\n   *\n   * @return      the next token\n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  public int getNextToken() throws java.io.IOException {\n    int zzInput;\n    int zzAction;\n\n    // cached fields:\n    int zzCurrentPosL;\n    int zzMarkedPosL;\n    int zzEndReadL = zzEndRead;\n    char [] zzBufferL = zzBuffer;\n    char [] zzCMapL = ZZ_CMAP;\n\n    int [] zzTransL = ZZ_TRANS;\n    int [] zzRowMapL = ZZ_ROWMAP;\n    int [] zzAttrL = ZZ_ATTRIBUTE;\n\n    while (true) {\n      zzMarkedPosL = zzMarkedPos;\n\n      yychar+= zzMarkedPosL-zzStartRead;\n\n      zzAction = -1;\n\n      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\n  \n      zzState = ZZ_LEXSTATE[zzLexicalState];\n\n      // set up zzAction for empty match case:\n      int zzAttributes = zzAttrL[zzState];\n      if ( (zzAttributes & 1) == 1 ) {\n        zzAction = zzState;\n      }\n\n\n      zzForAction: {\n        while (true) {\n    \n          if (zzCurrentPosL < zzEndReadL)\n            zzInput = zzBufferL[zzCurrentPosL++];\n          else if (zzAtEOF) {\n            zzInput = YYEOF;\n            break zzForAction;\n          }\n          else {\n            // store back cached positions\n            zzCurrentPos  = zzCurrentPosL;\n            zzMarkedPos   = zzMarkedPosL;\n            boolean eof = zzRefill();\n            // get translated positions and possibly new buffer\n            zzCurrentPosL  = zzCurrentPos;\n            zzMarkedPosL   = zzMarkedPos;\n            zzBufferL      = zzBuffer;\n            zzEndReadL     = zzEndRead;\n            if (eof) {\n              zzInput = YYEOF;\n              break zzForAction;\n            }\n            else {\n              zzInput = zzBufferL[zzCurrentPosL++];\n            }\n          }\n          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];\n          if (zzNext == -1) break zzForAction;\n          zzState = zzNext;\n\n          zzAttributes = zzAttrL[zzState];\n          if ( (zzAttributes & 1) == 1 ) {\n            zzAction = zzState;\n            zzMarkedPosL = zzCurrentPosL;\n            if ( (zzAttributes & 8) == 8 ) break zzForAction;\n          }\n\n        }\n      }\n\n      // store back cached position\n      zzMarkedPos = zzMarkedPosL;\n\n      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\n        case 2: \n          { return WORD_TYPE;\n          }\n        case 11: break;\n        case 5: \n          { return SOUTH_EAST_ASIAN_TYPE;\n          }\n        case 12: break;\n        case 1: \n          { /* Break so we don't hit fall-through warning: */ break;/* Not numeric, word, ideographic, hiragana, or SE Asian -- ignore it. */\n          }\n        case 13: break;\n        case 10: \n          { return URL_TYPE;\n          }\n        case 14: break;\n        case 9: \n          { return EMAIL_TYPE;\n          }\n        case 15: break;\n        case 4: \n          { return KATAKANA_TYPE;\n          }\n        case 16: break;\n        case 6: \n          { return IDEOGRAPHIC_TYPE;\n          }\n        case 17: break;\n        case 8: \n          { return HANGUL_TYPE;\n          }\n        case 18: break;\n        case 3: \n          { return NUMERIC_TYPE;\n          }\n        case 19: break;\n        case 7: \n          { return HIRAGANA_TYPE;\n          }\n        case 20: break;\n        default: \n          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\n            zzAtEOF = true;\n              {\n                return StandardTokenizerInterface.YYEOF;\n              }\n          } \n          else {\n            zzScanError(ZZ_NO_MATCH);\n          }\n      }\n    }\n  }\n\n","sourceOld":"  /**\r\n   * Resumes scanning until the next regular expression is matched,\r\n   * the end of input is encountered or an I/O-Error occurs.\r\n   *\r\n   * @return      the next token\r\n   * @exception   java.io.IOException  if any I/O-Error occurs\r\n   */\r\n  public int getNextToken() throws java.io.IOException {\r\n    int zzInput;\r\n    int zzAction;\r\n\r\n    // cached fields:\r\n    int zzCurrentPosL;\r\n    int zzMarkedPosL;\r\n    int zzEndReadL = zzEndRead;\r\n    char [] zzBufferL = zzBuffer;\r\n    char [] zzCMapL = ZZ_CMAP;\r\n\r\n    int [] zzTransL = ZZ_TRANS;\r\n    int [] zzRowMapL = ZZ_ROWMAP;\r\n    int [] zzAttrL = ZZ_ATTRIBUTE;\r\n\r\n    while (true) {\r\n      zzMarkedPosL = zzMarkedPos;\r\n\r\n      yychar+= zzMarkedPosL-zzStartRead;\r\n\r\n      zzAction = -1;\r\n\r\n      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\r\n  \r\n      zzState = ZZ_LEXSTATE[zzLexicalState];\r\n\r\n      // set up zzAction for empty match case:\r\n      int zzAttributes = zzAttrL[zzState];\r\n      if ( (zzAttributes & 1) == 1 ) {\r\n        zzAction = zzState;\r\n      }\r\n\r\n\r\n      zzForAction: {\r\n        while (true) {\r\n    \r\n          if (zzCurrentPosL < zzEndReadL)\r\n            zzInput = zzBufferL[zzCurrentPosL++];\r\n          else if (zzAtEOF) {\r\n            zzInput = YYEOF;\r\n            break zzForAction;\r\n          }\r\n          else {\r\n            // store back cached positions\r\n            zzCurrentPos  = zzCurrentPosL;\r\n            zzMarkedPos   = zzMarkedPosL;\r\n            boolean eof = zzRefill();\r\n            // get translated positions and possibly new buffer\r\n            zzCurrentPosL  = zzCurrentPos;\r\n            zzMarkedPosL   = zzMarkedPos;\r\n            zzBufferL      = zzBuffer;\r\n            zzEndReadL     = zzEndRead;\r\n            if (eof) {\r\n              zzInput = YYEOF;\r\n              break zzForAction;\r\n            }\r\n            else {\r\n              zzInput = zzBufferL[zzCurrentPosL++];\r\n            }\r\n          }\r\n          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];\r\n          if (zzNext == -1) break zzForAction;\r\n          zzState = zzNext;\r\n\r\n          zzAttributes = zzAttrL[zzState];\r\n          if ( (zzAttributes & 1) == 1 ) {\r\n            zzAction = zzState;\r\n            zzMarkedPosL = zzCurrentPosL;\r\n            if ( (zzAttributes & 8) == 8 ) break zzForAction;\r\n          }\r\n\r\n        }\r\n      }\r\n\r\n      // store back cached position\r\n      zzMarkedPos = zzMarkedPosL;\r\n\r\n      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\r\n        case 2: \r\n          { return WORD_TYPE;\r\n          }\r\n        case 11: break;\r\n        case 5: \r\n          { return SOUTH_EAST_ASIAN_TYPE;\r\n          }\r\n        case 12: break;\r\n        case 1: \r\n          { /* Break so we don't hit fall-through warning: */ break;/* Not numeric, word, ideographic, hiragana, or SE Asian -- ignore it. */\r\n          }\r\n        case 13: break;\r\n        case 10: \r\n          { return URL_TYPE;\r\n          }\r\n        case 14: break;\r\n        case 9: \r\n          { return EMAIL_TYPE;\r\n          }\r\n        case 15: break;\r\n        case 4: \r\n          { return KATAKANA_TYPE;\r\n          }\r\n        case 16: break;\r\n        case 6: \r\n          { return IDEOGRAPHIC_TYPE;\r\n          }\r\n        case 17: break;\r\n        case 8: \r\n          { return HANGUL_TYPE;\r\n          }\r\n        case 18: break;\r\n        case 3: \r\n          { return NUMERIC_TYPE;\r\n          }\r\n        case 19: break;\r\n        case 7: \r\n          { return HIRAGANA_TYPE;\r\n          }\r\n        case 20: break;\r\n        default: \r\n          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\r\n            zzAtEOF = true;\r\n              {\r\n                return StandardTokenizerInterface.YYEOF;\r\n              }\r\n          } \r\n          else {\r\n            zzScanError(ZZ_NO_MATCH);\r\n          }\r\n      }\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#getNextToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34#getNextToken().mjava","sourceNew":"  /**\n   * Resumes scanning until the next regular expression is matched,\n   * the end of input is encountered or an I/O-Error occurs.\n   *\n   * @return      the next token\n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  public int getNextToken() throws java.io.IOException {\n    int zzInput;\n    int zzAction;\n\n    // cached fields:\n    int zzCurrentPosL;\n    int zzMarkedPosL;\n    int zzEndReadL = zzEndRead;\n    char [] zzBufferL = zzBuffer;\n    char [] zzCMapL = ZZ_CMAP;\n\n    int [] zzTransL = ZZ_TRANS;\n    int [] zzRowMapL = ZZ_ROWMAP;\n    int [] zzAttrL = ZZ_ATTRIBUTE;\n\n    while (true) {\n      zzMarkedPosL = zzMarkedPos;\n\n      yychar+= zzMarkedPosL-zzStartRead;\n\n      zzAction = -1;\n\n      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\n  \n      zzState = ZZ_LEXSTATE[zzLexicalState];\n\n      // set up zzAction for empty match case:\n      int zzAttributes = zzAttrL[zzState];\n      if ( (zzAttributes & 1) == 1 ) {\n        zzAction = zzState;\n      }\n\n\n      zzForAction: {\n        while (true) {\n    \n          if (zzCurrentPosL < zzEndReadL)\n            zzInput = zzBufferL[zzCurrentPosL++];\n          else if (zzAtEOF) {\n            zzInput = YYEOF;\n            break zzForAction;\n          }\n          else {\n            // store back cached positions\n            zzCurrentPos  = zzCurrentPosL;\n            zzMarkedPos   = zzMarkedPosL;\n            boolean eof = zzRefill();\n            // get translated positions and possibly new buffer\n            zzCurrentPosL  = zzCurrentPos;\n            zzMarkedPosL   = zzMarkedPos;\n            zzBufferL      = zzBuffer;\n            zzEndReadL     = zzEndRead;\n            if (eof) {\n              zzInput = YYEOF;\n              break zzForAction;\n            }\n            else {\n              zzInput = zzBufferL[zzCurrentPosL++];\n            }\n          }\n          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];\n          if (zzNext == -1) break zzForAction;\n          zzState = zzNext;\n\n          zzAttributes = zzAttrL[zzState];\n          if ( (zzAttributes & 1) == 1 ) {\n            zzAction = zzState;\n            zzMarkedPosL = zzCurrentPosL;\n            if ( (zzAttributes & 8) == 8 ) break zzForAction;\n          }\n\n        }\n      }\n\n      // store back cached position\n      zzMarkedPos = zzMarkedPosL;\n\n      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\n        case 2: \n          { return WORD_TYPE;\n          }\n        case 11: break;\n        case 5: \n          { return SOUTH_EAST_ASIAN_TYPE;\n          }\n        case 12: break;\n        case 1: \n          { /* Break so we don't hit fall-through warning: */ break;/* Not numeric, word, ideographic, hiragana, or SE Asian -- ignore it. */\n          }\n        case 13: break;\n        case 10: \n          { return URL_TYPE;\n          }\n        case 14: break;\n        case 9: \n          { return EMAIL_TYPE;\n          }\n        case 15: break;\n        case 4: \n          { return KATAKANA_TYPE;\n          }\n        case 16: break;\n        case 6: \n          { return IDEOGRAPHIC_TYPE;\n          }\n        case 17: break;\n        case 8: \n          { return HANGUL_TYPE;\n          }\n        case 18: break;\n        case 3: \n          { return NUMERIC_TYPE;\n          }\n        case 19: break;\n        case 7: \n          { return HIRAGANA_TYPE;\n          }\n        case 20: break;\n        default: \n          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\n            zzAtEOF = true;\n              {\n                return StandardTokenizerInterface.YYEOF;\n              }\n          } \n          else {\n            zzScanError(ZZ_NO_MATCH);\n          }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Resumes scanning until the next regular expression is matched,\n   * the end of input is encountered or an I/O-Error occurs.\n   *\n   * @return      the next token\n   * @exception   java.io.IOException  if any I/O-Error occurs\n   */\n  public int getNextToken() throws java.io.IOException {\n    int zzInput;\n    int zzAction;\n\n    // cached fields:\n    int zzCurrentPosL;\n    int zzMarkedPosL;\n    int zzEndReadL = zzEndRead;\n    char [] zzBufferL = zzBuffer;\n    char [] zzCMapL = ZZ_CMAP;\n\n    int [] zzTransL = ZZ_TRANS;\n    int [] zzRowMapL = ZZ_ROWMAP;\n    int [] zzAttrL = ZZ_ATTRIBUTE;\n\n    while (true) {\n      zzMarkedPosL = zzMarkedPos;\n\n      yychar+= zzMarkedPosL-zzStartRead;\n\n      zzAction = -1;\n\n      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\n  \n      zzState = ZZ_LEXSTATE[zzLexicalState];\n\n      // set up zzAction for empty match case:\n      int zzAttributes = zzAttrL[zzState];\n      if ( (zzAttributes & 1) == 1 ) {\n        zzAction = zzState;\n      }\n\n\n      zzForAction: {\n        while (true) {\n    \n          if (zzCurrentPosL < zzEndReadL)\n            zzInput = zzBufferL[zzCurrentPosL++];\n          else if (zzAtEOF) {\n            zzInput = YYEOF;\n            break zzForAction;\n          }\n          else {\n            // store back cached positions\n            zzCurrentPos  = zzCurrentPosL;\n            zzMarkedPos   = zzMarkedPosL;\n            boolean eof = zzRefill();\n            // get translated positions and possibly new buffer\n            zzCurrentPosL  = zzCurrentPos;\n            zzMarkedPosL   = zzMarkedPos;\n            zzBufferL      = zzBuffer;\n            zzEndReadL     = zzEndRead;\n            if (eof) {\n              zzInput = YYEOF;\n              break zzForAction;\n            }\n            else {\n              zzInput = zzBufferL[zzCurrentPosL++];\n            }\n          }\n          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];\n          if (zzNext == -1) break zzForAction;\n          zzState = zzNext;\n\n          zzAttributes = zzAttrL[zzState];\n          if ( (zzAttributes & 1) == 1 ) {\n            zzAction = zzState;\n            zzMarkedPosL = zzCurrentPosL;\n            if ( (zzAttributes & 8) == 8 ) break zzForAction;\n          }\n\n        }\n      }\n\n      // store back cached position\n      zzMarkedPos = zzMarkedPosL;\n\n      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\n        case 2: \n          { return WORD_TYPE;\n          }\n        case 11: break;\n        case 5: \n          { return SOUTH_EAST_ASIAN_TYPE;\n          }\n        case 12: break;\n        case 1: \n          { /* Break so we don't hit fall-through warning: */ break;/* Not numeric, word, ideographic, hiragana, or SE Asian -- ignore it. */\n          }\n        case 13: break;\n        case 10: \n          { return URL_TYPE;\n          }\n        case 14: break;\n        case 9: \n          { return EMAIL_TYPE;\n          }\n        case 15: break;\n        case 4: \n          { return KATAKANA_TYPE;\n          }\n        case 16: break;\n        case 6: \n          { return IDEOGRAPHIC_TYPE;\n          }\n        case 17: break;\n        case 8: \n          { return HANGUL_TYPE;\n          }\n        case 18: break;\n        case 3: \n          { return NUMERIC_TYPE;\n          }\n        case 19: break;\n        case 7: \n          { return HIRAGANA_TYPE;\n          }\n        case 20: break;\n        default: \n          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\n            zzAtEOF = true;\n              {\n                return StandardTokenizerInterface.YYEOF;\n              }\n          } \n          else {\n            zzScanError(ZZ_NO_MATCH);\n          }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d76dfc2581b6998f72c0e749c6200e9c2432c36f"],"3a5582df130621a89a150891fa2fa492fdce73e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d76dfc2581b6998f72c0e749c6200e9c2432c36f":["3a5582df130621a89a150891fa2fa492fdce73e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a5582df130621a89a150891fa2fa492fdce73e0":["d76dfc2581b6998f72c0e749c6200e9c2432c36f"],"d76dfc2581b6998f72c0e749c6200e9c2432c36f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a5582df130621a89a150891fa2fa492fdce73e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}