{"path":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","sourceNew":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finish(long,long,int).mjava","sourceNew":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n      }\n    }\n\n","sourceOld":"    // Finishes all terms in this field\n    @Override\n    public void finish(long sumTotalTermFreq, long sumDocFreq, int docCount) throws IOException {\n      if (numTerms > 0) {\n        blockBuilder.finish();\n\n        // We better have one final \"root\" block:\n        assert pending.size() == 1 && !pending.get(0).isTerm: \"pending.size()=\" + pending.size() + \" pending=\" + pending;\n        final PendingBlock root = (PendingBlock) pending.get(0);\n        assert root.prefix.length == 0;\n        assert root.index.getEmptyOutput() != null;\n\n        this.sumTotalTermFreq = sumTotalTermFreq;\n        this.sumDocFreq = sumDocFreq;\n        this.docCount = docCount;\n\n        // Write FST to index\n        indexStartFP = indexOut.getFilePointer();\n        root.index.save(indexOut);\n        //System.out.println(\"  write FST \" + indexStartFP + \" field=\" + fieldInfo.name);\n\n        // if (SAVE_DOT_FILES || DEBUG) {\n        //   final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        //   Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        //   Util.toDot(root.index, w, false, false);\n        //   System.out.println(\"SAVED to \" + dotFileName);\n        //   w.close();\n        // }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}