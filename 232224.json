{"path":"src/test/org/apache/lucene/search/TestPhraseQuery#testNonExistingPhrase().mjava","commits":[{"id":"b3e493496c35fb4f17315b8827d1ba1ae1585554","date":1177392767,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testNonExistingPhrase().mjava","pathOld":"/dev/null","sourceNew":"  // work on two docs like this: \"phrase exist notexist exist found\"\n  public void testNonExistingPhrase() throws IOException {\n    // phrase without repetitions that exists in 2 docs\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"notexist\"));\n    query.add(new Term(\"nonexist\", \"found\"));\n    query.setSlop(2); // would be found this way\n\n    Hits hits = searcher.search(query);\n    assertEquals(\"phrase without repetitions exists in 2 docs\", 2, hits.length());\n    QueryUtils.check(query,searcher);\n\n    // phrase with repetitions that exists in 2 docs\n    query = new PhraseQuery();\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.setSlop(1); // would be found \n\n    hits = searcher.search(query);\n    assertEquals(\"phrase with repetitions exists in two docs\", 2, hits.length());\n    QueryUtils.check(query,searcher);\n\n    // phrase I with repetitions that does not exist in any doc\n    query = new PhraseQuery();\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"notexist\"));\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.setSlop(1000); // would not be found no matter how high the slop is\n\n    hits = searcher.search(query);\n    assertEquals(\"nonexisting phrase with repetitions does not exist in any doc\", 0, hits.length());\n    QueryUtils.check(query,searcher);\n\n    // phrase II with repetitions that does not exist in any doc\n    query = new PhraseQuery();\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.setSlop(1000); // would not be found no matter how high the slop is\n\n    hits = searcher.search(query);\n    assertEquals(\"nonexisting phrase with repetitions does not exist in any doc\", 0, hits.length());\n    QueryUtils.check(query,searcher);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testNonExistingPhrase().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testNonExistingPhrase().mjava","sourceNew":"  // work on two docs like this: \"phrase exist notexist exist found\"\n  public void testNonExistingPhrase() throws IOException {\n    // phrase without repetitions that exists in 2 docs\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"notexist\"));\n    query.add(new Term(\"nonexist\", \"found\"));\n    query.setSlop(2); // would be found this way\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"phrase without repetitions exists in 2 docs\", 2, hits.length);\n    QueryUtils.check(query,searcher);\n\n    // phrase with repetitions that exists in 2 docs\n    query = new PhraseQuery();\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.setSlop(1); // would be found \n\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"phrase with repetitions exists in two docs\", 2, hits.length);\n    QueryUtils.check(query,searcher);\n\n    // phrase I with repetitions that does not exist in any doc\n    query = new PhraseQuery();\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"notexist\"));\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.setSlop(1000); // would not be found no matter how high the slop is\n\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"nonexisting phrase with repetitions does not exist in any doc\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n\n    // phrase II with repetitions that does not exist in any doc\n    query = new PhraseQuery();\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.setSlop(1000); // would not be found no matter how high the slop is\n\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"nonexisting phrase with repetitions does not exist in any doc\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n\n  }\n\n","sourceOld":"  // work on two docs like this: \"phrase exist notexist exist found\"\n  public void testNonExistingPhrase() throws IOException {\n    // phrase without repetitions that exists in 2 docs\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"notexist\"));\n    query.add(new Term(\"nonexist\", \"found\"));\n    query.setSlop(2); // would be found this way\n\n    Hits hits = searcher.search(query);\n    assertEquals(\"phrase without repetitions exists in 2 docs\", 2, hits.length());\n    QueryUtils.check(query,searcher);\n\n    // phrase with repetitions that exists in 2 docs\n    query = new PhraseQuery();\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.setSlop(1); // would be found \n\n    hits = searcher.search(query);\n    assertEquals(\"phrase with repetitions exists in two docs\", 2, hits.length());\n    QueryUtils.check(query,searcher);\n\n    // phrase I with repetitions that does not exist in any doc\n    query = new PhraseQuery();\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"notexist\"));\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.setSlop(1000); // would not be found no matter how high the slop is\n\n    hits = searcher.search(query);\n    assertEquals(\"nonexisting phrase with repetitions does not exist in any doc\", 0, hits.length());\n    QueryUtils.check(query,searcher);\n\n    // phrase II with repetitions that does not exist in any doc\n    query = new PhraseQuery();\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.setSlop(1000); // would not be found no matter how high the slop is\n\n    hits = searcher.search(query);\n    assertEquals(\"nonexisting phrase with repetitions does not exist in any doc\", 0, hits.length());\n    QueryUtils.check(query,searcher);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testNonExistingPhrase().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testNonExistingPhrase().mjava","sourceNew":"  // work on two docs like this: \"phrase exist notexist exist found\"\n  public void testNonExistingPhrase() throws IOException {\n    // phrase without repetitions that exists in 2 docs\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"notexist\"));\n    query.add(new Term(\"nonexist\", \"found\"));\n    query.setSlop(2); // would be found this way\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"phrase without repetitions exists in 2 docs\", 2, hits.length);\n    QueryUtils.check(query,searcher);\n\n    // phrase with repetitions that exists in 2 docs\n    query = new PhraseQuery();\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.setSlop(1); // would be found \n\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"phrase with repetitions exists in two docs\", 2, hits.length);\n    QueryUtils.check(query,searcher);\n\n    // phrase I with repetitions that does not exist in any doc\n    query = new PhraseQuery();\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"notexist\"));\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.setSlop(1000); // would not be found no matter how high the slop is\n\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"nonexisting phrase with repetitions does not exist in any doc\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n\n    // phrase II with repetitions that does not exist in any doc\n    query = new PhraseQuery();\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.setSlop(1000); // would not be found no matter how high the slop is\n\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"nonexisting phrase with repetitions does not exist in any doc\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n\n  }\n\n","sourceOld":"  // work on two docs like this: \"phrase exist notexist exist found\"\n  public void testNonExistingPhrase() throws IOException {\n    // phrase without repetitions that exists in 2 docs\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"notexist\"));\n    query.add(new Term(\"nonexist\", \"found\"));\n    query.setSlop(2); // would be found this way\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"phrase without repetitions exists in 2 docs\", 2, hits.length);\n    QueryUtils.check(query,searcher);\n\n    // phrase with repetitions that exists in 2 docs\n    query = new PhraseQuery();\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.setSlop(1); // would be found \n\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"phrase with repetitions exists in two docs\", 2, hits.length);\n    QueryUtils.check(query,searcher);\n\n    // phrase I with repetitions that does not exist in any doc\n    query = new PhraseQuery();\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"notexist\"));\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.setSlop(1000); // would not be found no matter how high the slop is\n\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"nonexisting phrase with repetitions does not exist in any doc\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n\n    // phrase II with repetitions that does not exist in any doc\n    query = new PhraseQuery();\n    query.add(new Term(\"nonexist\", \"phrase\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.add(new Term(\"nonexist\", \"exist\"));\n    query.setSlop(1000); // would not be found no matter how high the slop is\n\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"nonexisting phrase with repetitions does not exist in any doc\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3e493496c35fb4f17315b8827d1ba1ae1585554":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b3e493496c35fb4f17315b8827d1ba1ae1585554"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5af07783dbc171e26a694c4f7d735e30c2769faa"]},"commit2Childs":{"b3e493496c35fb4f17315b8827d1ba1ae1585554":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3e493496c35fb4f17315b8827d1ba1ae1585554"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}