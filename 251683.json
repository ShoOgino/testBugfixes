{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","sourceNew":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance();\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","sourceOld":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance();\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dc83d085f83b38c31736c494913c0c75265ce02","date":1341762281,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","sourceNew":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance(Locale.ROOT);\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","sourceOld":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance();\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","sourceNew":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance(Locale.ROOT);\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","sourceOld":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance();\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","sourceNew":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance(Locale.ROOT);\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","sourceOld":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance();\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#log(String,int,PrintWriter,String).mjava","sourceNew":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance(Locale.ROOT);\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","sourceOld":"  /**\n   * Log information on this QualityStats object.\n   * @param logger Logger.\n   * @param prefix prefix before each log line.\n   */\n  public void log(String title, int paddLines, PrintWriter logger, String prefix) {\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n    if (title!=null && title.trim().length()>0) {\n      logger.println(title);\n    }\n    prefix = prefix==null ? \"\" : prefix;\n    NumberFormat nf = NumberFormat.getInstance();\n    nf.setMaximumFractionDigits(3);\n    nf.setMinimumFractionDigits(3);\n    nf.setGroupingUsed(true);\n    int M = 19;\n    logger.println(prefix+format(\"Search Seconds: \",M)+\n        fracFormat(nf.format((double)searchTime/1000)));\n    logger.println(prefix+format(\"DocName Seconds: \",M)+\n        fracFormat(nf.format((double)docNamesExtractTime/1000)));\n    logger.println(prefix+format(\"Num Points: \",M)+\n        fracFormat(nf.format(numPoints)));\n    logger.println(prefix+format(\"Num Good Points: \",M)+\n        fracFormat(nf.format(numGoodPoints)));\n    logger.println(prefix+format(\"Max Good Points: \",M)+\n        fracFormat(nf.format(maxGoodPoints)));\n    logger.println(prefix+format(\"Average Precision: \",M)+\n        fracFormat(nf.format(getAvp())));\n    logger.println(prefix+format(\"MRR: \",M)+\n        fracFormat(nf.format(getMRR())));\n    logger.println(prefix+format(\"Recall: \",M)+\n        fracFormat(nf.format(getRecall())));\n    for (int i=1; i<(int)numPoints && i<pAt.length; i++) {\n      logger.println(prefix+format(\"Precision At \"+i+\": \",M)+\n          fracFormat(nf.format(getPrecisionAt(i))));\n    }\n    for (int i=0; i<paddLines; i++) {  \n      logger.println();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5dc83d085f83b38c31736c494913c0c75265ce02":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","5dc83d085f83b38c31736c494913c0c75265ce02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5dc83d085f83b38c31736c494913c0c75265ce02","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5dc83d085f83b38c31736c494913c0c75265ce02":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}