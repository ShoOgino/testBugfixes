{"path":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#createRAMDirectories().mjava","commits":[{"id":"0f423d7b5d458f5b84738366550efaaabc21dfd8","date":1246814176,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#createRAMDirectories().mjava","pathOld":"/dev/null","sourceNew":"  private void createRAMDirectories() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    // creating a document to store\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"field\", \"a1 b1\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating a document to store\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"field\", \"a2 b2\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating first index writer\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    writerA.addDocument(lDoc);\n    writerA.optimize();\n    writerA.close();\n\n    // creating second index writer\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    writerB.addDocument(lDoc2);\n    writerB.optimize();\n    writerB.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#createRAMDirectories().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#createRAMDirectories().mjava","sourceNew":"  private void createRAMDirectories() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    // creating a document to store\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"field\", \"a1 b1\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating a document to store\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"field\", \"a2 b2\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating first index writer\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    writerA.addDocument(lDoc);\n    writerA.optimize();\n    writerA.close();\n\n    // creating second index writer\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    writerB.addDocument(lDoc2);\n    writerB.optimize();\n    writerB.close();\n  }\n\n","sourceOld":"  private void createRAMDirectories() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    // creating a document to store\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"field\", \"a1 b1\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating a document to store\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"field\", \"a2 b2\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating first index writer\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    writerA.addDocument(lDoc);\n    writerA.optimize();\n    writerA.close();\n\n    // creating second index writer\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    writerB.addDocument(lDoc2);\n    writerB.optimize();\n    writerB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#createRAMDirectories().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#createRAMDirectories().mjava","sourceNew":"  private void createRAMDirectories() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    // creating a document to store\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"field\", \"a1 b1\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating a document to store\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"field\", \"a2 b2\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating first index writer\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(TEST_VERSION_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    writerA.addDocument(lDoc);\n    writerA.optimize();\n    writerA.close();\n\n    // creating second index writer\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    writerB.addDocument(lDoc2);\n    writerB.optimize();\n    writerB.close();\n  }\n\n","sourceOld":"  private void createRAMDirectories() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    // creating a document to store\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"field\", \"a1 b1\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating a document to store\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"field\", \"a2 b2\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating first index writer\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    writerA.addDocument(lDoc);\n    writerA.optimize();\n    writerA.close();\n\n    // creating second index writer\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    writerB.addDocument(lDoc2);\n    writerB.optimize();\n    writerB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#createRAMDirectories().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#createRAMDirectories().mjava","sourceNew":"  private void createRAMDirectories() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    // creating a document to store\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"field\", \"a1 b1\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating a document to store\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"field\", \"a2 b2\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating first index writer\n    IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n    writerA.addDocument(lDoc);\n    writerA.optimize();\n    writerA.close();\n\n    // creating second index writer\n    IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n    writerB.addDocument(lDoc2);\n    writerB.optimize();\n    writerB.close();\n  }\n\n","sourceOld":"  private void createRAMDirectories() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    // creating a document to store\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"field\", \"a1 b1\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating a document to store\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"field\", \"a2 b2\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating first index writer\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(TEST_VERSION_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    writerA.addDocument(lDoc);\n    writerA.optimize();\n    writerA.close();\n\n    // creating second index writer\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    writerB.addDocument(lDoc2);\n    writerB.optimize();\n    writerB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#createRAMDirectories().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#createRAMDirectories().mjava","sourceNew":"  private void createRAMDirectories() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    // creating a document to store\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"field\", \"a1 b1\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating a document to store\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"field\", \"a2 b2\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating first index writer\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(TEST_VERSION_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    writerA.addDocument(lDoc);\n    writerA.optimize();\n    writerA.close();\n\n    // creating second index writer\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    writerB.addDocument(lDoc2);\n    writerB.optimize();\n    writerB.close();\n  }\n\n","sourceOld":"  private void createRAMDirectories() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    // creating a document to store\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"field\", \"a1 b1\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating a document to store\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"field\", \"a2 b2\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating first index writer\n    IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n    writerA.addDocument(lDoc);\n    writerA.optimize();\n    writerA.close();\n\n    // creating second index writer\n    IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n    writerB.addDocument(lDoc2);\n    writerB.optimize();\n    writerB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#createRAMDirectories().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#createRAMDirectories().mjava","sourceNew":"  private void createRAMDirectories() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    // creating a document to store\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"field\", \"a1 b1\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating a document to store\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"field\", \"a2 b2\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating first index writer\n    IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    writerA.addDocument(lDoc);\n    writerA.optimize();\n    writerA.close();\n\n    // creating second index writer\n    IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    writerB.addDocument(lDoc2);\n    writerB.optimize();\n    writerB.close();\n  }\n\n","sourceOld":"  private void createRAMDirectories() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    // creating a document to store\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"field\", \"a1 b1\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating a document to store\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"field\", \"a2 b2\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating first index writer\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(TEST_VERSION_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    writerA.addDocument(lDoc);\n    writerA.optimize();\n    writerA.close();\n\n    // creating second index writer\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(TEST_VERSION_CURRENT),\n        true, IndexWriter.MaxFieldLength.LIMITED);\n    writerB.addDocument(lDoc2);\n    writerB.optimize();\n    writerB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#createRAMDirectories().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#createRAMDirectories().mjava","sourceNew":"  private void createRAMDirectories() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    // creating a document to store\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"field\", \"a1 b1\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating a document to store\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"field\", \"a2 b2\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating first index writer\n    IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    writerA.addDocument(lDoc);\n    writerA.optimize();\n    writerA.close();\n\n    // creating second index writer\n    IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    writerB.addDocument(lDoc2);\n    writerB.optimize();\n    writerB.close();\n  }\n\n","sourceOld":"  private void createRAMDirectories() throws CorruptIndexException,\n      LockObtainFailedException, IOException {\n    // creating a document to store\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"field\", \"a1 b1\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating a document to store\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"field\", \"a2 b2\", Field.Store.NO,\n        Field.Index.ANALYZED_NO_NORMS));\n\n    // creating first index writer\n    IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    writerA.addDocument(lDoc);\n    writerA.optimize();\n    writerA.close();\n\n    // creating second index writer\n    IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    writerB.addDocument(lDoc2);\n    writerB.optimize();\n    writerB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0f423d7b5d458f5b84738366550efaaabc21dfd8"],"0f423d7b5d458f5b84738366550efaaabc21dfd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f423d7b5d458f5b84738366550efaaabc21dfd8"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"0f423d7b5d458f5b84738366550efaaabc21dfd8":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}