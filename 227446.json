{"path":"src/java/org/apache/solr/util/BCDUtils#base100SortableIntToBase10(char[],int,int,char[],int).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/BCDUtils#base100SortableIntToBase10(char[],int,int,char[],int).mjava","pathOld":"/dev/null","sourceNew":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base100SortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg = false;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    }\n\n    boolean firstDigit=true;\n    while (start < end) {\n      int val = arr[start++];\n      if (neg) val = 99 - val;\n      // opt - if we ever want a faster version we can avoid one integer\n      // divide by using fixed point math to multiply by 1/10\n      // http://www.cs.uiowa.edu/~jones/bcd/divide.html\n      // TIP: write a small function in gcc or cl and see what\n      // the optimized assemply output looks like (and which is fastest).\n      // In C you can specify \"unsigned\" which gives the compiler more\n      // info than the Java compiler has.\n      char tens = (char)(val / 10 + '0');\n      if (!firstDigit || tens!='0') {  // skip leading 0\n        out[wpos++] = tens;      // write tens position\n      }\n      out[wpos++] = (char)(val % 10 + '0');    // write ones position\n      firstDigit=false;\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/BCDUtils#base100SortableIntToBase10(char[],int,int,char[],int).mjava","pathOld":"src/java/org/apache/solr/util/BCDUtils#base100SortableIntToBase10(char[],int,int,char[],int).mjava","sourceNew":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base100SortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg = false;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    }\n\n    boolean firstDigit=true;\n    while (start < end) {\n      int val = arr[start++];\n      if (neg) val = 99 - val;\n      // opt - if we ever want a faster version we can avoid one integer\n      // divide by using fixed point math to multiply by 1/10\n      // http://www.cs.uiowa.edu/~jones/bcd/divide.html\n      // TIP: write a small function in gcc or cl and see what\n      // the optimized assemply output looks like (and which is fastest).\n      // In C you can specify \"unsigned\" which gives the compiler more\n      // info than the Java compiler has.\n      char tens = (char)(val / 10 + '0');\n      if (!firstDigit || tens!='0') {  // skip leading 0\n        out[wpos++] = tens;      // write tens position\n      }\n      out[wpos++] = (char)(val % 10 + '0');    // write ones position\n      firstDigit=false;\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","sourceOld":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base100SortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg = false;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    }\n\n    boolean firstDigit=true;\n    while (start < end) {\n      int val = arr[start++];\n      if (neg) val = 99 - val;\n      // opt - if we ever want a faster version we can avoid one integer\n      // divide by using fixed point math to multiply by 1/10\n      // http://www.cs.uiowa.edu/~jones/bcd/divide.html\n      // TIP: write a small function in gcc or cl and see what\n      // the optimized assemply output looks like (and which is fastest).\n      // In C you can specify \"unsigned\" which gives the compiler more\n      // info than the Java compiler has.\n      char tens = (char)(val / 10 + '0');\n      if (!firstDigit || tens!='0') {  // skip leading 0\n        out[wpos++] = tens;      // write tens position\n      }\n      out[wpos++] = (char)(val % 10 + '0');    // write ones position\n      firstDigit=false;\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}