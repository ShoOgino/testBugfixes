{"path":"lucene/core/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","sourceNew":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final FlagsAttribute flagsAtt = src.addAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    flagsAtt.setFlags(1234);\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"FlagsAttribute must be the first attribute\", FlagsAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final FlagsAttribute flagsAtt2 = clone.getAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n    \n    // test copy back\n    flagsAtt2.setFlags(4711);\n    typeAtt2.setType(\"OtherType\");\n    clone.copyTo(src);\n    assertEquals(\"FlagsAttribute of original must now contain updated term\", 4711, flagsAtt.getFlags());\n    assertEquals(\"TypeAttribute of original must now contain updated type\", \"OtherType\", typeAtt.type());\n    // verify again:\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","sourceOld":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final FlagsAttribute flagsAtt = src.addAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    flagsAtt.setFlags(1234);\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"FlagsAttribute must be the first attribute\", FlagsAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final FlagsAttribute flagsAtt2 = clone.getAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n    \n    // test copy back\n    flagsAtt2.setFlags(4711);\n    typeAtt2.setType(\"OtherType\");\n    clone.copyTo(src);\n    assertEquals(\"FlagsAttribute of original must now contain updated term\", 4711, flagsAtt.getFlags());\n    assertEquals(\"TypeAttribute of original must now contain updated type\", \"OtherType\", typeAtt.type());\n    // verify again:\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63241596de245e96a0a3c36c7b03eb92130b81db","date":1398708795,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","sourceNew":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final FlagsAttribute flagsAtt = src.addAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    flagsAtt.setFlags(1234);\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"FlagsAttribute must be the first attribute\", FlagsAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final FlagsAttribute flagsAtt2 = clone.getAttribute(FlagsAttribute.class);\n    assertNotNull(flagsAtt2);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotNull(typeAtt2);\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n    \n    // test copy back\n    flagsAtt2.setFlags(4711);\n    typeAtt2.setType(\"OtherType\");\n    clone.copyTo(src);\n    assertEquals(\"FlagsAttribute of original must now contain updated term\", 4711, flagsAtt.getFlags());\n    assertEquals(\"TypeAttribute of original must now contain updated type\", \"OtherType\", typeAtt.type());\n    // verify again:\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","sourceOld":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final FlagsAttribute flagsAtt = src.addAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    flagsAtt.setFlags(1234);\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"FlagsAttribute must be the first attribute\", FlagsAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final FlagsAttribute flagsAtt2 = clone.getAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n    \n    // test copy back\n    flagsAtt2.setFlags(4711);\n    typeAtt2.setType(\"OtherType\");\n    clone.copyTo(src);\n    assertEquals(\"FlagsAttribute of original must now contain updated term\", 4711, flagsAtt.getFlags());\n    assertEquals(\"TypeAttribute of original must now contain updated type\", \"OtherType\", typeAtt.type());\n    // verify again:\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","sourceNew":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final FlagsAttribute flagsAtt = src.addAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    flagsAtt.setFlags(1234);\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"FlagsAttribute must be the first attribute\", FlagsAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final FlagsAttribute flagsAtt2 = clone.getAttribute(FlagsAttribute.class);\n    assertNotNull(flagsAtt2);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotNull(typeAtt2);\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n    \n    // test copy back\n    flagsAtt2.setFlags(4711);\n    typeAtt2.setType(\"OtherType\");\n    clone.copyTo(src);\n    assertEquals(\"FlagsAttribute of original must now contain updated term\", 4711, flagsAtt.getFlags());\n    assertEquals(\"TypeAttribute of original must now contain updated type\", \"OtherType\", typeAtt.type());\n    // verify again:\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","sourceOld":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final FlagsAttribute flagsAtt = src.addAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    flagsAtt.setFlags(1234);\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"FlagsAttribute must be the first attribute\", FlagsAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final FlagsAttribute flagsAtt2 = clone.getAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n    \n    // test copy back\n    flagsAtt2.setFlags(4711);\n    typeAtt2.setType(\"OtherType\");\n    clone.copyTo(src);\n    assertEquals(\"FlagsAttribute of original must now contain updated term\", 4711, flagsAtt.getFlags());\n    assertEquals(\"TypeAttribute of original must now contain updated type\", \"OtherType\", typeAtt.type());\n    // verify again:\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","sourceNew":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final FlagsAttribute flagsAtt = src.addAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    flagsAtt.setFlags(1234);\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"FlagsAttribute must be the first attribute\", FlagsAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final FlagsAttribute flagsAtt2 = clone.getAttribute(FlagsAttribute.class);\n    assertNotNull(flagsAtt2);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotNull(typeAtt2);\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n    \n    // test copy back\n    flagsAtt2.setFlags(4711);\n    typeAtt2.setType(\"OtherType\");\n    clone.copyTo(src);\n    assertEquals(\"FlagsAttribute of original must now contain updated term\", 4711, flagsAtt.getFlags());\n    assertEquals(\"TypeAttribute of original must now contain updated type\", \"OtherType\", typeAtt.type());\n    // verify again:\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","sourceOld":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final FlagsAttribute flagsAtt = src.addAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    flagsAtt.setFlags(1234);\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"FlagsAttribute must be the first attribute\", FlagsAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final FlagsAttribute flagsAtt2 = clone.getAttribute(FlagsAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n    \n    // test copy back\n    flagsAtt2.setFlags(4711);\n    typeAtt2.setType(\"OtherType\");\n    clone.copyTo(src);\n    assertEquals(\"FlagsAttribute of original must now contain updated term\", 4711, flagsAtt.getFlags());\n    assertEquals(\"TypeAttribute of original must now contain updated type\", \"OtherType\", typeAtt.type());\n    // verify again:\n    assertNotSame(\"FlagsAttribute of original and clone must be different instances\", flagsAtt2, flagsAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"FlagsAttribute of original and clone must be equal\", flagsAtt2, flagsAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","63241596de245e96a0a3c36c7b03eb92130b81db"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","3394716f52b34ab259ad5247e7595d9f9db6e935"],"63241596de245e96a0a3c36c7b03eb92130b81db":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3394716f52b34ab259ad5247e7595d9f9db6e935"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"63241596de245e96a0a3c36c7b03eb92130b81db":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","63241596de245e96a0a3c36c7b03eb92130b81db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}