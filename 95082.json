{"path":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new SpanWeight(this, searcher, payloadCollector);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2","date":1432114286,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new SpanWeight(this, searcher, PayloadSpanCollector.FACTORY);\n  }\n\n","sourceOld":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new SpanWeight(this, searcher, payloadCollector);\n  }\n\n","bugFix":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c257cd8ddb1ed5632a36c7488614a2ee21705d24","date":1432128550,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return super.createWeight(searcher, needsScores, PayloadSpanCollector.FACTORY);\n  }\n\n","sourceOld":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new SpanWeight(this, searcher, PayloadSpanCollector.FACTORY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    SpanWeight matchWeight = match.createWeight(searcher, false);\n    return new SpanPayloadCheckWeight(searcher, needsScores ? getTermContexts(matchWeight) : null, matchWeight);\n  }\n\n","sourceOld":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return super.createWeight(searcher, needsScores, PayloadSpanCollector.FACTORY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    SpanWeight matchWeight = match.createWeight(searcher, false);\n    return new SpanPayloadCheckWeight(searcher, needsScores ? getTermContexts(matchWeight) : null, matchWeight);\n  }\n\n","sourceOld":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    SpanWeight matchWeight = match.createWeight(searcher, false);\n    return new SpanPayloadCheckWeight(searcher, needsScores ? getTermContexts(matchWeight) : null, matchWeight);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["29aea3139c4326c0501d75d51059855463220279"],"29aea3139c4326c0501d75d51059855463220279":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2"],"8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29aea3139c4326c0501d75d51059855463220279":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["29aea3139c4326c0501d75d51059855463220279"],"8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}