{"path":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#getSoftAutocommitInterval(String).mjava","commits":[{"id":"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5","date":1493061731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#getSoftAutocommitInterval(String).mjava","pathOld":"/dev/null","sourceNew":"  // Collect all of the autoSoftCommit intervals.\n  private Map<String, Long> getSoftAutocommitInterval(String collection) throws Exception {\n    Map<String, Long> ret = new HashMap<>();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(collection);\n    for (Slice slice : coll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String uri = \"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP) + \"/config?wt=json\";\n        Map respMap = getAsMap(cloudClient, uri);\n        Long maxTime = (Long) (getObjectByPath(respMap, true, asList(\"config\", \"updateHandler\", \"autoSoftCommit\", \"maxTime\")));\n        ret.put(replica.getCoreName(), maxTime);\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#getSoftAutocommitInterval(String).mjava","pathOld":"/dev/null","sourceNew":"  // Collect all of the autoSoftCommit intervals.\n  private Map<String, Long> getSoftAutocommitInterval(String collection) throws Exception {\n    Map<String, Long> ret = new HashMap<>();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(collection);\n    for (Slice slice : coll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String uri = \"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP) + \"/config?wt=json\";\n        Map respMap = getAsMap(cloudClient, uri);\n        Long maxTime = (Long) (getObjectByPath(respMap, true, asList(\"config\", \"updateHandler\", \"autoSoftCommit\", \"maxTime\")));\n        ret.put(replica.getCoreName(), maxTime);\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#getSoftAutocommitInterval(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#getSoftAutocommitInterval(String).mjava","sourceNew":"  // Collect all of the autoSoftCommit intervals.\n  private Map<String, Long> getSoftAutocommitInterval(String collection) throws Exception {\n    Map<String, Long> ret = new HashMap<>();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(collection);\n    for (Slice slice : coll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String uri = \"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP) + \"/config\";\n        Map respMap = getAsMap(cloudClient, uri);\n        Long maxTime = (Long) (getObjectByPath(respMap, true, asList(\"config\", \"updateHandler\", \"autoSoftCommit\", \"maxTime\")));\n        ret.put(replica.getCoreName(), maxTime);\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  // Collect all of the autoSoftCommit intervals.\n  private Map<String, Long> getSoftAutocommitInterval(String collection) throws Exception {\n    Map<String, Long> ret = new HashMap<>();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(collection);\n    for (Slice slice : coll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String uri = \"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP) + \"/config?wt=json\";\n        Map respMap = getAsMap(cloudClient, uri);\n        Long maxTime = (Long) (getObjectByPath(respMap, true, asList(\"config\", \"updateHandler\", \"autoSoftCommit\", \"maxTime\")));\n        ret.put(replica.getCoreName(), maxTime);\n      }\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#getSoftAutocommitInterval(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#getSoftAutocommitInterval(String).mjava","sourceNew":"  // Collect all of the autoSoftCommit intervals.\n  private Map<String, Long> getSoftAutocommitInterval(String collection) throws Exception {\n    Map<String, Long> ret = new HashMap<>();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(collection);\n    for (Slice slice : coll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String uri = \"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP) + \"/config\";\n        Map respMap = getAsMap(cloudClient, uri);\n        Long maxTime = (Long) (getObjectByPath(respMap, true, asList(\"config\", \"updateHandler\", \"autoSoftCommit\", \"maxTime\")));\n        ret.put(replica.getCoreName(), maxTime);\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  // Collect all of the autoSoftCommit intervals.\n  private Map<String, Long> getSoftAutocommitInterval(String collection) throws Exception {\n    Map<String, Long> ret = new HashMap<>();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(collection);\n    for (Slice slice : coll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String uri = \"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP) + \"/config?wt=json\";\n        Map respMap = getAsMap(cloudClient, uri);\n        Long maxTime = (Long) (getObjectByPath(respMap, true, asList(\"config\", \"updateHandler\", \"autoSoftCommit\", \"maxTime\")));\n        ret.put(replica.getCoreName(), maxTime);\n      }\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#getSoftAutocommitInterval(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#getSoftAutocommitInterval(String).mjava","sourceNew":"  // Collect all of the autoSoftCommit intervals.\n  private Map<String, Long> getSoftAutocommitInterval(String collection) throws Exception {\n    Map<String, Long> ret = new HashMap<>();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(collection);\n    for (Slice slice : coll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String uri = \"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP) + \"/config\";\n        Map respMap = getAsMap(cloudClient, uri);\n        Long maxTime = (Long) (getObjectByPath(respMap, true, asList(\"config\", \"updateHandler\", \"autoSoftCommit\", \"maxTime\")));\n        ret.put(replica.getCoreName(), maxTime);\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  // Collect all of the autoSoftCommit intervals.\n  private Map<String, Long> getSoftAutocommitInterval(String collection) throws Exception {\n    Map<String, Long> ret = new HashMap<>();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(collection);\n    for (Slice slice : coll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String uri = \"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP) + \"/config?wt=json\";\n        Map respMap = getAsMap(cloudClient, uri);\n        Long maxTime = (Long) (getObjectByPath(respMap, true, asList(\"config\", \"updateHandler\", \"autoSoftCommit\", \"maxTime\")));\n        ret.put(replica.getCoreName(), maxTime);\n      }\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#getSoftAutocommitInterval(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCloudExampleTest#getSoftAutocommitInterval(String).mjava","sourceNew":"  // Collect all of the autoSoftCommit intervals.\n  private Map<String, Long> getSoftAutocommitInterval(String collection) throws Exception {\n    Map<String, Long> ret = new HashMap<>();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(collection);\n    for (Slice slice : coll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String uri = \"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP) + \"/config\";\n        @SuppressWarnings({\"rawtypes\"})\n        Map respMap = getAsMap(cloudClient, uri);\n        Long maxTime = (Long) (getObjectByPath(respMap, true, asList(\"config\", \"updateHandler\", \"autoSoftCommit\", \"maxTime\")));\n        ret.put(replica.getCoreName(), maxTime);\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  // Collect all of the autoSoftCommit intervals.\n  private Map<String, Long> getSoftAutocommitInterval(String collection) throws Exception {\n    Map<String, Long> ret = new HashMap<>();\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(collection);\n    for (Slice slice : coll.getActiveSlices()) {\n      for (Replica replica : slice.getReplicas()) {\n        String uri = \"\" + replica.get(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.get(ZkStateReader.CORE_NAME_PROP) + \"/config\";\n        Map respMap = getAsMap(cloudClient, uri);\n        Long maxTime = (Long) (getObjectByPath(respMap, true, asList(\"config\", \"updateHandler\", \"autoSoftCommit\", \"maxTime\")));\n        ret.put(replica.getCoreName(), maxTime);\n      }\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5"],"a52341299179de5479672f7cf518bf4b173f34b3":["fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5","ac1e7fa558287a811ea07634d815ee7b1c541284"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e9017cf144952056066919f1ebc7897ff9bd71b1","ac1e7fa558287a811ea07634d815ee7b1c541284"],"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"a52341299179de5479672f7cf518bf4b173f34b3":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5":["e9017cf144952056066919f1ebc7897ff9bd71b1","a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}