{"path":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectBitFlips#corruptFile(Directory,String).mjava","commits":[{"id":"17360f98373106f78b548a3e491d2c7731fe63d9","date":1591891749,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectBitFlips#corruptFile(Directory,String).mjava","pathOld":"/dev/null","sourceNew":"  private void corruptFile(Directory dir, String victim) throws IOException {\n    try (BaseDirectoryWrapper dirCopy = newDirectory()) {\n      dirCopy.setCheckIndexOnClose(false);\n\n      long victimLength = dir.fileLength(victim);\n      long flipOffset = TestUtil.nextLong(random(), 0, victimLength - 1);\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now corrupt file \" + victim + \" by changing byte at offset \" + flipOffset + \" (length= \" + victimLength + \")\");\n      }\n\n      for(String name : dir.listAll()) {\n        if (name.equals(victim) == false) {\n          dirCopy.copyFrom(dir, name, name, IOContext.DEFAULT);\n        } else {\n          try (IndexOutput out = dirCopy.createOutput(name, IOContext.DEFAULT);\n              IndexInput in = dir.openInput(name, IOContext.DEFAULT)) {\n              out.copyBytes(in, flipOffset);\n              out.writeByte((byte) (in.readByte() + TestUtil.nextInt(random(), 0x01, 0xFF)));\n              out.copyBytes(in, victimLength - flipOffset - 1);\n          }\n          try (IndexInput in = dirCopy.openInput(name, IOContext.DEFAULT)) {\n            try {\n              CodecUtil.checksumEntireFile(in);\n              System.out.println(\"TEST: changing a byte in \" + victim + \" did not update the checksum)\");\n              return;\n            } catch (CorruptIndexException e) {\n              // ok\n            }\n          }\n        }\n        dirCopy.sync(Collections.singleton(name));\n      }\n\n      // corruption must be detected\n      expectThrowsAnyOf(Arrays.asList(CorruptIndexException.class, IndexFormatTooOldException.class, IndexFormatTooNewException.class),\n          () -> {\n            try (IndexReader reader = DirectoryReader.open(dirCopy)) {\n              for (LeafReaderContext context : reader.leaves()) {\n                context.reader().checkIntegrity();\n              }\n            }\n          }\n      );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17360f98373106f78b548a3e491d2c7731fe63d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17360f98373106f78b548a3e491d2c7731fe63d9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17360f98373106f78b548a3e491d2c7731fe63d9"],"17360f98373106f78b548a3e491d2c7731fe63d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}