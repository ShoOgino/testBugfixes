{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser#testLegacyDateRange().mjava","commits":[{"id":"bd9159d2966a77ae7e472d435eb5c9c5cad7f820","date":1168286571,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testLegacyDateRange().mjava","pathOld":"/dev/null","sourceNew":"  /** for testing legacy DateField support */\n  public void testLegacyDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = Calendar.getInstance();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    assertQueryEquals(\"[ \" + startDate + \" TO \" + endDate + \"]\", null,\n                      \"[\" + getLegacyDate(startDate) + \" TO \" + DateField.dateToString(endDateExpected.getTime()) + \"]\");\n    assertQueryEquals(\"{  \" + startDate + \"    \" + endDate + \"   }\", null,\n                      \"{\" + getLegacyDate(startDate) + \" TO \" + getLegacyDate(endDate) + \"}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d6c356d9e7be4ba949f083ecd3fb65231bc64008"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6c356d9e7be4ba949f083ecd3fb65231bc64008","date":1251182916,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testLegacyDateRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testLegacyDateRange().mjava","sourceNew":"  /** for testing legacy DateField support */\n  public void testLegacyDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    assertQueryEquals(\"[ \" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"]\", null,\n                      \"[\" + getLegacyDate(startDate) + \" TO \" + DateField.dateToString(endDateExpected.getTime()) + \"]\");\n    assertQueryEquals(\"{  \" + escapeDateString(startDate) + \"    \" + escapeDateString(endDate) + \"   }\", null,\n                      \"{\" + getLegacyDate(startDate) + \" TO \" + getLegacyDate(endDate) + \"}\");\n  }\n\n","sourceOld":"  /** for testing legacy DateField support */\n  public void testLegacyDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = Calendar.getInstance();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    assertQueryEquals(\"[ \" + startDate + \" TO \" + endDate + \"]\", null,\n                      \"[\" + getLegacyDate(startDate) + \" TO \" + DateField.dateToString(endDateExpected.getTime()) + \"]\");\n    assertQueryEquals(\"{  \" + startDate + \"    \" + endDate + \"   }\", null,\n                      \"{\" + getLegacyDate(startDate) + \" TO \" + getLegacyDate(endDate) + \"}\");\n  }\n\n","bugFix":["bd9159d2966a77ae7e472d435eb5c9c5cad7f820"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testLegacyDateRange().mjava","sourceNew":null,"sourceOld":"  /** for testing legacy DateField support */\n  public void testLegacyDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    assertQueryEquals(\"[ \" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"]\", null,\n                      \"[\" + getLegacyDate(startDate) + \" TO \" + DateField.dateToString(endDateExpected.getTime()) + \"]\");\n    assertQueryEquals(\"{  \" + escapeDateString(startDate) + \"    \" + escapeDateString(endDate) + \"   }\", null,\n                      \"{\" + getLegacyDate(startDate) + \" TO \" + getLegacyDate(endDate) + \"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testLegacyDateRange().mjava","sourceNew":null,"sourceOld":"  /** for testing legacy DateField support */\n  public void testLegacyDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    assertQueryEquals(\"[ \" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"]\", null,\n                      \"[\" + getLegacyDate(startDate) + \" TO \" + DateField.dateToString(endDateExpected.getTime()) + \"]\");\n    assertQueryEquals(\"{  \" + escapeDateString(startDate) + \"    \" + escapeDateString(endDate) + \"   }\", null,\n                      \"{\" + getLegacyDate(startDate) + \" TO \" + getLegacyDate(endDate) + \"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"174ced3f382f37c6b4eab123325bfea03b47af5e","date":1254607278,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testLegacyDateRange().mjava","pathOld":"/dev/null","sourceNew":"  /** for testing legacy DateField support */\n  public void testLegacyDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    assertQueryEquals(\"[ \" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"]\", null,\n                      \"[\" + getLegacyDate(startDate) + \" TO \" + DateField.dateToString(endDateExpected.getTime()) + \"]\");\n    assertQueryEquals(\"{  \" + escapeDateString(startDate) + \"    \" + escapeDateString(endDate) + \"   }\", null,\n                      \"{\" + getLegacyDate(startDate) + \" TO \" + getLegacyDate(endDate) + \"}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64a84446b679daf1e25d901bf647686ade7fc1f0","date":1260811919,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testLegacyDateRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testLegacyDateRange().mjava","sourceNew":"  /** for testing legacy DateField support */\n  public void testLegacyDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    assertQueryEquals(\"[ \" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"]\", null,\n                      \"[\" + getLegacyDate(startDate) + \" TO \" + DateField.dateToString(endDateExpected.getTime()) + \"]\");\n    assertQueryEquals(\"{  \" + escapeDateString(startDate) + \"    \" + escapeDateString(endDate) + \"   }\", null,\n                      \"{\" + getLegacyDate(startDate) + \" TO \" + getLegacyDate(endDate) + \"}\");\n  }\n\n","sourceOld":"  /** for testing legacy DateField support */\n  public void testLegacyDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    assertQueryEquals(\"[ \" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"]\", null,\n                      \"[\" + getLegacyDate(startDate) + \" TO \" + DateField.dateToString(endDateExpected.getTime()) + \"]\");\n    assertQueryEquals(\"{  \" + escapeDateString(startDate) + \"    \" + escapeDateString(endDate) + \"   }\", null,\n                      \"{\" + getLegacyDate(startDate) + \" TO \" + getLegacyDate(endDate) + \"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testLegacyDateRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testLegacyDateRange().mjava","sourceNew":"  /** for testing legacy DateField support */\n  public void testLegacyDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    assertQueryEquals(\"[ \" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"]\", null,\n                      \"[\" + getLegacyDate(startDate) + \" TO \" + DateField.dateToString(endDateExpected.getTime()) + \"]\");\n    assertQueryEquals(\"{  \" + escapeDateString(startDate) + \"    \" + escapeDateString(endDate) + \"   }\", null,\n                      \"{\" + getLegacyDate(startDate) + \" TO \" + getLegacyDate(endDate) + \"}\");\n  }\n\n","sourceOld":"  /** for testing legacy DateField support */\n  public void testLegacyDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.clear();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    assertQueryEquals(\"[ \" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"]\", null,\n                      \"[\" + getLegacyDate(startDate) + \" TO \" + DateField.dateToString(endDateExpected.getTime()) + \"]\");\n    assertQueryEquals(\"{  \" + escapeDateString(startDate) + \"    \" + escapeDateString(endDate) + \"   }\", null,\n                      \"{\" + getLegacyDate(startDate) + \" TO \" + getLegacyDate(endDate) + \"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"174ced3f382f37c6b4eab123325bfea03b47af5e":["0a046c0c310bc77931fc8441bd920053b607dd14"],"64a84446b679daf1e25d901bf647686ade7fc1f0":["174ced3f382f37c6b4eab123325bfea03b47af5e"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["d6c356d9e7be4ba949f083ecd3fb65231bc64008"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["d6c356d9e7be4ba949f083ecd3fb65231bc64008","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"d6c356d9e7be4ba949f083ecd3fb65231bc64008":["bd9159d2966a77ae7e472d435eb5c9c5cad7f820"],"bd9159d2966a77ae7e472d435eb5c9c5cad7f820":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["64a84446b679daf1e25d901bf647686ade7fc1f0"]},"commit2Childs":{"174ced3f382f37c6b4eab123325bfea03b47af5e":["64a84446b679daf1e25d901bf647686ade7fc1f0"],"64a84446b679daf1e25d901bf647686ade7fc1f0":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"0a046c0c310bc77931fc8441bd920053b607dd14":["174ced3f382f37c6b4eab123325bfea03b47af5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd9159d2966a77ae7e472d435eb5c9c5cad7f820"],"d6c356d9e7be4ba949f083ecd3fb65231bc64008":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"bd9159d2966a77ae7e472d435eb5c9c5cad7f820":["d6c356d9e7be4ba949f083ecd3fb65231bc64008"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}