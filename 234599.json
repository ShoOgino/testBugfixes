{"path":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","commits":[{"id":"b5c559c875836474bafae7243263d93b1b1965db","date":1289581659,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestFloats(int,double).mjava","sourceNew":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    Writer w = Floats.getWriter(dir, \"test\", precision);\n    final int NUM_VALUES = 1000;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    Writer w = Floats.getWriter(dir, \"test\", precision);\n    final int NUM_VALUES = 1000;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","sourceNew":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    Writer w = Floats.getWriter(dir, \"test\", precision);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      }\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.advance(i));\n      }\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    Writer w = Floats.getWriter(dir, \"test\", precision);\n    final int NUM_VALUES = 1000;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","date":1291128345,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","sourceNew":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      }\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.advance(i));\n      }\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    Writer w = Floats.getWriter(dir, \"test\", precision);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      }\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.advance(i));\n      }\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2fc2eb37a1f19e90850f787d9e085950ebfa04","date":1291597075,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","sourceNew":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      DocValuesEnum fEnum = r.getEnum();\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(DocValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      }\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      DocValuesEnum fEnum = r.getEnum();\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(DocValuesEnum.NO_MORE_DOCS, fEnum.advance(i));\n      }\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      }\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.advance(i));\n      }\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4034ca0f8f74fdf56e25be73822f2441fc1c1b46","date":1307111599,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","sourceNew":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      DocValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(DocValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      DocValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(DocValuesEnum.NO_MORE_DOCS, fEnum.advance(NUM_VALUES + additionalValues));\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      DocValuesEnum fEnum = r.getEnum();\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(DocValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      }\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      DocValuesEnum fEnum = r.getEnum();\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(DocValuesEnum.NO_MORE_DOCS, fEnum.advance(i));\n      }\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41e5bbad683f7546e96f08ffe8bc50cf447f2586","date":1307113213,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","sourceNew":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      DocValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(DocValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      DocValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(DocValuesEnum.NO_MORE_DOCS, fEnum.advance(NUM_VALUES + additionalValues));\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      DocValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(DocValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      DocValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(DocValuesEnum.NO_MORE_DOCS, fEnum.advance(NUM_VALUES + additionalValues));\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"605b061fadf71aa6458c0005eaae83a98350c403","date":1307117658,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","sourceNew":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.advance(NUM_VALUES + additionalValues));\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      DocValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(DocValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      DocValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(DocValuesEnum.NO_MORE_DOCS, fEnum.advance(NUM_VALUES + additionalValues));\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","pathOld":"/dev/null","sourceNew":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.advance(NUM_VALUES + additionalValues));\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","pathOld":"/dev/null","sourceNew":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.advance(NUM_VALUES + additionalValues));\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","sourceNew":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes, newIOContext(random));\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random));\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.advance(NUM_VALUES + additionalValues));\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.advance(NUM_VALUES + additionalValues));\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","sourceNew":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes, newIOContext(random));\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random));\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.advance(NUM_VALUES + additionalValues));\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.advance(NUM_VALUES + additionalValues));\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","sourceNew":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes, newIOContext(random));\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random));\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.advance(NUM_VALUES + additionalValues));\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.advance(NUM_VALUES + additionalValues));\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17cc1e690c31c800f83860fbfd0423462962ef01","date":1314789725,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","sourceNew":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes, newIOContext(random));\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random));\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.advance(NUM_VALUES + additionalValues));\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes, newIOContext(random));\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random));\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.advance(NUM_VALUES + additionalValues));\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(ValueType,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","sourceNew":"  private void runTestFloats(ValueType type, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), type);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == ValueType.FLOAT_32 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", precision, trackBytes, newIOContext(random));\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    IndexDocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random));\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.nextDoc());\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = getEnum(r);\n      FloatsRef floats = fEnum.getFloat();\n      for (int i = 0; i < NUM_VALUES + additionalValues; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        if (i < NUM_VALUES) {\n          assertEquals(values[i], floats.get(), delta);\n        } else {\n          assertEquals(0.0d, floats.get(), delta);\n        }\n      }\n      assertEquals(ValuesEnum.NO_MORE_DOCS, fEnum.advance(NUM_VALUES + additionalValues));\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4"],"b5c559c875836474bafae7243263d93b1b1965db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"17cc1e690c31c800f83860fbfd0423462962ef01":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["b5c559c875836474bafae7243263d93b1b1965db"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","605b061fadf71aa6458c0005eaae83a98350c403"],"605b061fadf71aa6458c0005eaae83a98350c403":["41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["2e8d7ba2175f47e280231533f7d3016249cea88b","b6f9be74ca7baaef11857ad002cad40419979516"],"e128967bca58657bc0039d4bfe631e63e81f1977":["17cc1e690c31c800f83860fbfd0423462962ef01"],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e128967bca58657bc0039d4bfe631e63e81f1977"]},"commit2Childs":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"b5c559c875836474bafae7243263d93b1b1965db":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4"],"17cc1e690c31c800f83860fbfd0423462962ef01":["e128967bca58657bc0039d4bfe631e63e81f1977"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","b6f9be74ca7baaef11857ad002cad40419979516","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"605b061fadf71aa6458c0005eaae83a98350c403":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","b5c559c875836474bafae7243263d93b1b1965db","2e8d7ba2175f47e280231533f7d3016249cea88b"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["17cc1e690c31c800f83860fbfd0423462962ef01","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["605b061fadf71aa6458c0005eaae83a98350c403"],"e128967bca58657bc0039d4bfe631e63e81f1977":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}