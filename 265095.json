{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createCollection(String,int).mjava","commits":[{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":0,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#createCollection(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method creates a collection. It is different from {@link MockZKController#createCollection(String, int)} in\n   * the way the {@link ZkDistributedQueue} is obtained.\n   */\n  private void createCollection(String collection, int numShards) throws Exception {\n    // Create collection znode before having ClusterStateUpdater create state.json below it or it will fail.\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true);\n\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        \"name\", collection,\n        ZkStateReader.REPLICATION_FACTOR, \"1\",\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        \"createNodeSet\", \"\");\n    ZkDistributedQueue q = overseers.get(0).getStateUpdateQueue();\n    q.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}