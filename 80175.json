{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#asTwoPhaseIterator().mjava","commits":[{"id":"835e9a6d1c5a6cc5684c905d972d68df554cfad5","date":1424111245,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#asTwoPhaseIterator().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n    boolean hasApproximation = false;\n    for (ScorerWrapper w : subScorers) {\n      if (w.twoPhaseView != null) {\n        hasApproximation = true;\n        break;\n      }\n    }\n\n    if (hasApproximation == false) {\n      // none of the sub scorers supports approximations\n      return null;\n    }\n\n    return new TwoPhaseDocIdSetIterator() {\n\n      @Override\n      public DocIdSetIterator approximation() {\n        // note it is important to share the same pq as this scorer so that\n        // rebalancing the pq through the approximation will also rebalance\n        // the pq in this scorer.\n        return new DisjunctionDISIApproximation(subScorers);\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        ScorerWrapper topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && topScorers.twoPhaseView.matches() == false) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          ScorerWrapper previous = topScorers;\n          for (ScorerWrapper w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && w.twoPhaseView.matches() == false) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n\n          // We need to explicitely set the list of top scorers to avoid the\n          // laziness of DisjunctionScorer.score() that would take all scorers\n          // positioned on the same doc as the top of the pq, including\n          // non-matching scorers\n          DisjunctionScorer.this.topScorers = topScorers;\n        }\n        return true;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b9a6801f4206703f5a995daf0c6320262822e905"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3d6eb0072094d94624002318ba2d4c840946833","date":1424947971,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    boolean hasApproximation = false;\n    for (ScorerWrapper w : subScorers) {\n      if (w.twoPhaseView != null) {\n        hasApproximation = true;\n        break;\n      }\n    }\n\n    if (hasApproximation == false) {\n      // none of the sub scorers supports approximations\n      return null;\n    }\n\n    return new TwoPhaseIterator() {\n\n      @Override\n      public DocIdSetIterator approximation() {\n        // note it is important to share the same pq as this scorer so that\n        // rebalancing the pq through the approximation will also rebalance\n        // the pq in this scorer.\n        return new DisjunctionDISIApproximation(subScorers);\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        ScorerWrapper topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && topScorers.twoPhaseView.matches() == false) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          ScorerWrapper previous = topScorers;\n          for (ScorerWrapper w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && w.twoPhaseView.matches() == false) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n\n          // We need to explicitely set the list of top scorers to avoid the\n          // laziness of DisjunctionScorer.score() that would take all scorers\n          // positioned on the same doc as the top of the pq, including\n          // non-matching scorers\n          DisjunctionScorer.this.topScorers = topScorers;\n        }\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n    boolean hasApproximation = false;\n    for (ScorerWrapper w : subScorers) {\n      if (w.twoPhaseView != null) {\n        hasApproximation = true;\n        break;\n      }\n    }\n\n    if (hasApproximation == false) {\n      // none of the sub scorers supports approximations\n      return null;\n    }\n\n    return new TwoPhaseDocIdSetIterator() {\n\n      @Override\n      public DocIdSetIterator approximation() {\n        // note it is important to share the same pq as this scorer so that\n        // rebalancing the pq through the approximation will also rebalance\n        // the pq in this scorer.\n        return new DisjunctionDISIApproximation(subScorers);\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        ScorerWrapper topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && topScorers.twoPhaseView.matches() == false) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          ScorerWrapper previous = topScorers;\n          for (ScorerWrapper w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && w.twoPhaseView.matches() == false) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n\n          // We need to explicitely set the list of top scorers to avoid the\n          // laziness of DisjunctionScorer.score() that would take all scorers\n          // positioned on the same doc as the top of the pq, including\n          // non-matching scorers\n          DisjunctionScorer.this.topScorers = topScorers;\n        }\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b9a6801f4206703f5a995daf0c6320262822e905","date":1425405502,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    boolean hasApproximation = false;\n    for (ScorerWrapper w : subScorers) {\n      if (w.twoPhaseView != null) {\n        hasApproximation = true;\n        break;\n      }\n    }\n\n    if (hasApproximation == false) {\n      // none of the sub scorers supports approximations\n      return null;\n    }\n\n    return new TwoPhaseIterator() {\n\n      @Override\n      public DocIdSetIterator approximation() {\n        // note it is important to share the same pq as this scorer so that\n        // rebalancing the pq through the approximation will also rebalance\n        // the pq in this scorer.\n        return new DisjunctionDISIApproximation(subScorers);\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        ScorerWrapper topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && topScorers.twoPhaseView.matches() == false) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          ScorerWrapper previous = topScorers;\n          for (ScorerWrapper w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && w.twoPhaseView.matches() == false) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n        } else {\n          // since we don't need scores, let's pretend we have a single match\n          topScorers.next = null;\n        }\n\n        // We need to explicitely set the list of top scorers to avoid the\n        // laziness of DisjunctionScorer.score() that would take all scorers\n        // positioned on the same doc as the top of the pq, including\n        // non-matching scorers\n        DisjunctionScorer.this.topScorers = topScorers;\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    boolean hasApproximation = false;\n    for (ScorerWrapper w : subScorers) {\n      if (w.twoPhaseView != null) {\n        hasApproximation = true;\n        break;\n      }\n    }\n\n    if (hasApproximation == false) {\n      // none of the sub scorers supports approximations\n      return null;\n    }\n\n    return new TwoPhaseIterator() {\n\n      @Override\n      public DocIdSetIterator approximation() {\n        // note it is important to share the same pq as this scorer so that\n        // rebalancing the pq through the approximation will also rebalance\n        // the pq in this scorer.\n        return new DisjunctionDISIApproximation(subScorers);\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        ScorerWrapper topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && topScorers.twoPhaseView.matches() == false) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          ScorerWrapper previous = topScorers;\n          for (ScorerWrapper w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && w.twoPhaseView.matches() == false) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n\n          // We need to explicitely set the list of top scorers to avoid the\n          // laziness of DisjunctionScorer.score() that would take all scorers\n          // positioned on the same doc as the top of the pq, including\n          // non-matching scorers\n          DisjunctionScorer.this.topScorers = topScorers;\n        }\n        return true;\n      }\n    };\n  }\n\n","bugFix":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6b1be5d2b36d6a30913778ef61374103d55e33","date":1427303640,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    boolean hasApproximation = false;\n    for (ScorerWrapper w : subScorers) {\n      if (w.twoPhaseView != null) {\n        hasApproximation = true;\n        break;\n      }\n    }\n\n    if (hasApproximation == false) {\n      // none of the sub scorers supports approximations\n      return null;\n    }\n\n    // note it is important to share the same pq as this scorer so that\n    // rebalancing the pq through the approximation will also rebalance\n    // the pq in this scorer.\n    return new TwoPhaseIterator(new DisjunctionDISIApproximation(subScorers)) {\n\n      @Override\n      public boolean matches() throws IOException {\n        ScorerWrapper topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && topScorers.twoPhaseView.matches() == false) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          ScorerWrapper previous = topScorers;\n          for (ScorerWrapper w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && w.twoPhaseView.matches() == false) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n        } else {\n          // since we don't need scores, let's pretend we have a single match\n          topScorers.next = null;\n        }\n\n        // We need to explicitely set the list of top scorers to avoid the\n        // laziness of DisjunctionScorer.score() that would take all scorers\n        // positioned on the same doc as the top of the pq, including\n        // non-matching scorers\n        DisjunctionScorer.this.topScorers = topScorers;\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    boolean hasApproximation = false;\n    for (ScorerWrapper w : subScorers) {\n      if (w.twoPhaseView != null) {\n        hasApproximation = true;\n        break;\n      }\n    }\n\n    if (hasApproximation == false) {\n      // none of the sub scorers supports approximations\n      return null;\n    }\n\n    return new TwoPhaseIterator() {\n\n      @Override\n      public DocIdSetIterator approximation() {\n        // note it is important to share the same pq as this scorer so that\n        // rebalancing the pq through the approximation will also rebalance\n        // the pq in this scorer.\n        return new DisjunctionDISIApproximation(subScorers);\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        ScorerWrapper topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && topScorers.twoPhaseView.matches() == false) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          ScorerWrapper previous = topScorers;\n          for (ScorerWrapper w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && w.twoPhaseView.matches() == false) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n        } else {\n          // since we don't need scores, let's pretend we have a single match\n          topScorers.next = null;\n        }\n\n        // We need to explicitely set the list of top scorers to avoid the\n        // laziness of DisjunctionScorer.score() that would take all scorers\n        // positioned on the same doc as the top of the pq, including\n        // non-matching scorers\n        DisjunctionScorer.this.topScorers = topScorers;\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    boolean hasApproximation = false;\n    for (ScorerWrapper w : subScorers) {\n      if (w.twoPhaseView != null) {\n        hasApproximation = true;\n        break;\n      }\n    }\n\n    if (hasApproximation == false) {\n      // none of the sub scorers supports approximations\n      return null;\n    }\n\n    // note it is important to share the same pq as this scorer so that\n    // rebalancing the pq through the approximation will also rebalance\n    // the pq in this scorer.\n    return new TwoPhaseIterator(new DisjunctionDISIApproximation(subScorers)) {\n\n      @Override\n      public boolean matches() throws IOException {\n        ScorerWrapper topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && topScorers.twoPhaseView.matches() == false) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          ScorerWrapper previous = topScorers;\n          for (ScorerWrapper w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && w.twoPhaseView.matches() == false) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n        } else {\n          // since we don't need scores, let's pretend we have a single match\n          topScorers.next = null;\n        }\n\n        // We need to explicitely set the list of top scorers to avoid the\n        // laziness of DisjunctionScorer.score() that would take all scorers\n        // positioned on the same doc as the top of the pq, including\n        // non-matching scorers\n        DisjunctionScorer.this.topScorers = topScorers;\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n    boolean hasApproximation = false;\n    for (ScorerWrapper w : subScorers) {\n      if (w.twoPhaseView != null) {\n        hasApproximation = true;\n        break;\n      }\n    }\n\n    if (hasApproximation == false) {\n      // none of the sub scorers supports approximations\n      return null;\n    }\n\n    return new TwoPhaseDocIdSetIterator() {\n\n      @Override\n      public DocIdSetIterator approximation() {\n        // note it is important to share the same pq as this scorer so that\n        // rebalancing the pq through the approximation will also rebalance\n        // the pq in this scorer.\n        return new DisjunctionDISIApproximation(subScorers);\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        ScorerWrapper topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && topScorers.twoPhaseView.matches() == false) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          ScorerWrapper previous = topScorers;\n          for (ScorerWrapper w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && w.twoPhaseView.matches() == false) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n\n          // We need to explicitely set the list of top scorers to avoid the\n          // laziness of DisjunctionScorer.score() that would take all scorers\n          // positioned on the same doc as the top of the pq, including\n          // non-matching scorers\n          DisjunctionScorer.this.topScorers = topScorers;\n        }\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7","date":1429852340,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    boolean hasApproximation = false;\n    for (DisiWrapper<Scorer> w : subScorers) {\n      if (w.twoPhaseView != null) {\n        hasApproximation = true;\n        break;\n      }\n    }\n\n    if (! hasApproximation) {\n      // none of the sub scorers supports approximations\n      return null;\n    }\n\n    // note it is important to share the same pq as this scorer so that\n    // rebalancing the pq through the approximation will also rebalance\n    // the pq in this scorer.\n    return new TwoPhaseIterator(new DisjunctionDISIApproximation<Scorer>(subScorers)) {\n\n      @Override\n      public boolean matches() throws IOException {\n        DisiWrapper<Scorer> topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && ! topScorers.twoPhaseView.matches()) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          DisiWrapper<Scorer> previous = topScorers;\n          for (DisiWrapper<Scorer> w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && ! w.twoPhaseView.matches()) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n        } else {\n          // since we don't need scores, let's pretend we have a single match\n          topScorers.next = null;\n        }\n\n        // We need to explicitely set the list of top scorers to avoid the\n        // laziness of DisjunctionScorer.score() that would take all scorers\n        // positioned on the same doc as the top of the pq, including\n        // non-matching scorers\n        DisjunctionScorer.this.topScorers = topScorers;\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    boolean hasApproximation = false;\n    for (ScorerWrapper w : subScorers) {\n      if (w.twoPhaseView != null) {\n        hasApproximation = true;\n        break;\n      }\n    }\n\n    if (hasApproximation == false) {\n      // none of the sub scorers supports approximations\n      return null;\n    }\n\n    // note it is important to share the same pq as this scorer so that\n    // rebalancing the pq through the approximation will also rebalance\n    // the pq in this scorer.\n    return new TwoPhaseIterator(new DisjunctionDISIApproximation(subScorers)) {\n\n      @Override\n      public boolean matches() throws IOException {\n        ScorerWrapper topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && topScorers.twoPhaseView.matches() == false) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          ScorerWrapper previous = topScorers;\n          for (ScorerWrapper w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && w.twoPhaseView.matches() == false) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n        } else {\n          // since we don't need scores, let's pretend we have a single match\n          topScorers.next = null;\n        }\n\n        // We need to explicitely set the list of top scorers to avoid the\n        // laziness of DisjunctionScorer.score() that would take all scorers\n        // positioned on the same doc as the top of the pq, including\n        // non-matching scorers\n        DisjunctionScorer.this.topScorers = topScorers;\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    float sumMatchCost = 0;\n    long sumApproxCost = 0;\n\n    // Compute matchCost as the avarage over the matchCost of the subScorers.\n    // This is weighted by the cost, which is an expected number of matching documents.\n    for (DisiWrapper<Scorer> w : subScorers) {\n      if (w.twoPhaseView != null) {\n        long costWeight = (w.cost <= 1) ? 1 : w.cost;\n        sumMatchCost += w.twoPhaseView.matchCost() * costWeight;\n        sumApproxCost += costWeight;\n      }\n    }\n\n    if (sumApproxCost == 0) { // no sub scorer supports approximations\n      return null;\n    }\n\n    final float matchCost = sumMatchCost / sumApproxCost;\n\n    // note it is important to share the same pq as this scorer so that\n    // rebalancing the pq through the approximation will also rebalance\n    // the pq in this scorer.\n    return new TwoPhaseIterator(new DisjunctionDISIApproximation<Scorer>(subScorers)) {\n\n      @Override\n      public boolean matches() throws IOException {\n        DisiWrapper<Scorer> topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && ! topScorers.twoPhaseView.matches()) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          DisiWrapper<Scorer> previous = topScorers;\n          for (DisiWrapper<Scorer> w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && ! w.twoPhaseView.matches()) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n        } else {\n          // since we don't need scores, let's pretend we have a single match\n          topScorers.next = null;\n        }\n\n        // We need to explicitely set the list of top scorers to avoid the\n        // laziness of DisjunctionScorer.score() that would take all scorers\n        // positioned on the same doc as the top of the pq, including\n        // non-matching scorers\n        DisjunctionScorer.this.topScorers = topScorers;\n        return true;\n      }\n\n      @Override\n      public float matchCost() {\n        return matchCost;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    boolean hasApproximation = false;\n    for (DisiWrapper<Scorer> w : subScorers) {\n      if (w.twoPhaseView != null) {\n        hasApproximation = true;\n        break;\n      }\n    }\n\n    if (! hasApproximation) {\n      // none of the sub scorers supports approximations\n      return null;\n    }\n\n    // note it is important to share the same pq as this scorer so that\n    // rebalancing the pq through the approximation will also rebalance\n    // the pq in this scorer.\n    return new TwoPhaseIterator(new DisjunctionDISIApproximation<Scorer>(subScorers)) {\n\n      @Override\n      public boolean matches() throws IOException {\n        DisiWrapper<Scorer> topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && ! topScorers.twoPhaseView.matches()) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          DisiWrapper<Scorer> previous = topScorers;\n          for (DisiWrapper<Scorer> w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && ! w.twoPhaseView.matches()) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n        } else {\n          // since we don't need scores, let's pretend we have a single match\n          topScorers.next = null;\n        }\n\n        // We need to explicitely set the list of top scorers to avoid the\n        // laziness of DisjunctionScorer.score() that would take all scorers\n        // positioned on the same doc as the top of the pq, including\n        // non-matching scorers\n        DisjunctionScorer.this.topScorers = topScorers;\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#twoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    float sumMatchCost = 0;\n    long sumApproxCost = 0;\n\n    // Compute matchCost as the avarage over the matchCost of the subScorers.\n    // This is weighted by the cost, which is an expected number of matching documents.\n    for (DisiWrapper w : subScorers) {\n      if (w.twoPhaseView != null) {\n        long costWeight = (w.cost <= 1) ? 1 : w.cost;\n        sumMatchCost += w.twoPhaseView.matchCost() * costWeight;\n        sumApproxCost += costWeight;\n      }\n    }\n\n    if (sumApproxCost == 0) { // no sub scorer supports approximations\n      return null;\n    }\n\n    final float matchCost = sumMatchCost / sumApproxCost;\n\n    // note it is important to share the same pq as this scorer so that\n    // rebalancing the pq through the approximation will also rebalance\n    // the pq in this scorer.\n    return new TwoPhaseIterator(new DisjunctionDISIApproximation(subScorers)) {\n\n      @Override\n      public boolean matches() throws IOException {\n        DisiWrapper topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && ! topScorers.twoPhaseView.matches()) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          DisiWrapper previous = topScorers;\n          for (DisiWrapper w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && ! w.twoPhaseView.matches()) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n        } else {\n          // since we don't need scores, let's pretend we have a single match\n          topScorers.next = null;\n        }\n\n        // We need to explicitely set the list of top scorers to avoid the\n        // laziness of DisjunctionScorer.score() that would take all scorers\n        // positioned on the same doc as the top of the pq, including\n        // non-matching scorers\n        DisjunctionScorer.this.topScorers = topScorers;\n        return true;\n      }\n\n      @Override\n      public float matchCost() {\n        return matchCost;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    float sumMatchCost = 0;\n    long sumApproxCost = 0;\n\n    // Compute matchCost as the avarage over the matchCost of the subScorers.\n    // This is weighted by the cost, which is an expected number of matching documents.\n    for (DisiWrapper<Scorer> w : subScorers) {\n      if (w.twoPhaseView != null) {\n        long costWeight = (w.cost <= 1) ? 1 : w.cost;\n        sumMatchCost += w.twoPhaseView.matchCost() * costWeight;\n        sumApproxCost += costWeight;\n      }\n    }\n\n    if (sumApproxCost == 0) { // no sub scorer supports approximations\n      return null;\n    }\n\n    final float matchCost = sumMatchCost / sumApproxCost;\n\n    // note it is important to share the same pq as this scorer so that\n    // rebalancing the pq through the approximation will also rebalance\n    // the pq in this scorer.\n    return new TwoPhaseIterator(new DisjunctionDISIApproximation<Scorer>(subScorers)) {\n\n      @Override\n      public boolean matches() throws IOException {\n        DisiWrapper<Scorer> topScorers = subScorers.topList();\n        // remove the head of the list as long as it does not match\n        while (topScorers.twoPhaseView != null && ! topScorers.twoPhaseView.matches()) {\n          topScorers = topScorers.next;\n          if (topScorers == null) {\n            return false;\n          }\n        }\n        // now we know we have at least one match since the first element of 'matchList' matches\n        if (needsScores) {\n          // if scores or freqs are needed, we also need to remove scorers\n          // from the top list that do not actually match\n          DisiWrapper<Scorer> previous = topScorers;\n          for (DisiWrapper<Scorer> w = topScorers.next; w != null; w = w.next) {\n            if (w.twoPhaseView != null && ! w.twoPhaseView.matches()) {\n              // w does not match, remove it\n              previous.next = w.next;\n            } else {\n              previous = w;\n            }\n          }\n        } else {\n          // since we don't need scores, let's pretend we have a single match\n          topScorers.next = null;\n        }\n\n        // We need to explicitely set the list of top scorers to avoid the\n        // laziness of DisjunctionScorer.score() that would take all scorers\n        // positioned on the same doc as the top of the pq, including\n        // non-matching scorers\n        DisjunctionScorer.this.topScorers = topScorers;\n        return true;\n      }\n\n      @Override\n      public float matchCost() {\n        return matchCost;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7"],"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["7a6b1be5d2b36d6a30913778ef61374103d55e33"],"b9a6801f4206703f5a995daf0c6320262822e905":["a3d6eb0072094d94624002318ba2d4c840946833"],"7a6b1be5d2b36d6a30913778ef61374103d55e33":["b9a6801f4206703f5a995daf0c6320262822e905"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["835e9a6d1c5a6cc5684c905d972d68df554cfad5","7a6b1be5d2b36d6a30913778ef61374103d55e33"],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d6eb0072094d94624002318ba2d4c840946833":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"b9a6801f4206703f5a995daf0c6320262822e905":["7a6b1be5d2b36d6a30913778ef61374103d55e33"],"7a6b1be5d2b36d6a30913778ef61374103d55e33":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a3d6eb0072094d94624002318ba2d4c840946833"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"a3d6eb0072094d94624002318ba2d4c840946833":["b9a6801f4206703f5a995daf0c6320262822e905"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}