{"path":"backwards/src/java/org/apache/lucene/search/DisjunctionMaxScorer#heapAdjust(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/DisjunctionMaxScorer#heapAdjust(int).mjava","pathOld":"/dev/null","sourceNew":"  /* The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  private void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/DisjunctionMaxScorer#heapAdjust(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/DisjunctionMaxScorer#heapAdjust(int).mjava","sourceNew":"  /* The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  private void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","sourceOld":"  /* The subtree of subScorers at root is a min heap except possibly for its root element.\n   * Bubble the root down as required to make the subtree a heap.\n   */\n  private void heapAdjust(int root) {\n    Scorer scorer = subScorers[root];\n    int doc = scorer.docID();\n    int i = root;\n    while (i <= (numScorers >> 1) - 1) {\n      int lchild = (i << 1) + 1;\n      Scorer lscorer = subScorers[lchild];\n      int ldoc = lscorer.docID();\n      int rdoc = Integer.MAX_VALUE, rchild = (i << 1) + 2;\n      Scorer rscorer = null;\n      if (rchild < numScorers) {\n        rscorer = subScorers[rchild];\n        rdoc = rscorer.docID();\n      }\n      if (ldoc < doc) {\n        if (rdoc < ldoc) {\n          subScorers[i] = rscorer;\n          subScorers[rchild] = scorer;\n          i = rchild;\n        } else {\n          subScorers[i] = lscorer;\n          subScorers[lchild] = scorer;\n          i = lchild;\n        }\n      } else if (rdoc < doc) {\n        subScorers[i] = rscorer;\n        subScorers[rchild] = scorer;\n        i = rchild;\n      } else {\n        return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}