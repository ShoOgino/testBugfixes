{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,DocValuesProducer).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,DocValuesProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    addNumericField(field, LegacyDocValuesIterables.numericIterable(field, valuesProducer, numDocs));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,DocValuesProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    addNumericField(field, LegacyDocValuesIterables.numericIterable(field, valuesProducer, numDocs));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,DocValuesProducer).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.NUMERIC || field.hasNorms();\n    writeFieldEntry(field, DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    NumericDocValues values = valuesProducer.getNumeric(field);\n    int numValues = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      long v = values.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      numValues++;\n    }\n    if (numValues != numDocs) {\n      minValue = Math.min(minValue, 0);\n      maxValue = Math.max(maxValue, 0);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    values = valuesProducer.getNumeric(field);\n    for (int i = 0; i < numDocs; ++i) {\n      if (values.docID() < i) {\n        values.nextDoc();\n        assert values.docID() >= i;\n      }\n      long value = values.docID() != i ? 0 : values.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      if (values.docID() != i) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    addNumericField(field, LegacyDocValuesIterables.numericIterable(field, valuesProducer, numDocs));\n  }\n\n","bugFix":["6652c74b2358a0b13223817a6a793bf1c9d0749d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,DocValuesProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.NUMERIC || field.hasNorms();\n    writeFieldEntry(field, DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    NumericDocValues values = valuesProducer.getNumeric(field);\n    int numValues = 0;\n    for (int doc = values.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = values.nextDoc()) {\n      long v = values.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      numValues++;\n    }\n    if (numValues != numDocs) {\n      minValue = Math.min(minValue, 0);\n      maxValue = Math.max(maxValue, 0);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    values = valuesProducer.getNumeric(field);\n    for (int i = 0; i < numDocs; ++i) {\n      if (values.docID() < i) {\n        values.nextDoc();\n        assert values.docID() >= i;\n      }\n      long value = values.docID() != i ? 0 : values.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      if (values.docID() != i) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7558b5077dd4abd457be151475f13b541f4f13e"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}