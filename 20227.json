{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetCollectionProperties(String,Map[String,Object]).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetCollectionProperties(String,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set collection properties.\n   * @param coll collection name\n   * @param properties properties\n   */\n  public void simSetCollectionProperties(String coll, Map<String, Object> properties) throws Exception {\n    lock.lock();\n    try {\n      if (properties == null) {\n        collProperties.remove(coll);\n      } else {\n        Map<String, Object> props = collProperties.computeIfAbsent(coll, c -> new HashMap<>());\n        props.clear();\n        props.putAll(properties);\n      }\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetCollectionProperties(String,Map[String,Object]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetCollectionProperties(String,Map[String,Object]).mjava","sourceNew":"  /**\n   * Set collection properties.\n   * @param coll collection name\n   * @param properties properties\n   */\n  public void simSetCollectionProperties(String coll, Map<String, Object> properties) throws Exception {\n    lock.lockInterruptibly();\n    try {\n      if (properties == null) {\n        collProperties.remove(coll);\n      } else {\n        Map<String, Object> props = collProperties.computeIfAbsent(coll, c -> new HashMap<>());\n        props.clear();\n        props.putAll(properties);\n      }\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Set collection properties.\n   * @param coll collection name\n   * @param properties properties\n   */\n  public void simSetCollectionProperties(String coll, Map<String, Object> properties) throws Exception {\n    lock.lock();\n    try {\n      if (properties == null) {\n        collProperties.remove(coll);\n      } else {\n        Map<String, Object> props = collProperties.computeIfAbsent(coll, c -> new HashMap<>());\n        props.clear();\n        props.putAll(properties);\n      }\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetCollectionProperties(String,Map[String,Object]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetCollectionProperties(String,Map[String,Object]).mjava","sourceNew":"  /**\n   * Set collection properties.\n   * @param coll collection name\n   * @param properties properties\n   */\n  public void simSetCollectionProperties(String coll, Map<String, Object> properties) throws Exception {\n    lock.lockInterruptibly();\n    try {\n      if (properties == null) {\n        collProperties.remove(coll);\n      } else {\n        Map<String, Object> props = collProperties.computeIfAbsent(coll, c -> new HashMap<>());\n        props.clear();\n        props.putAll(properties);\n      }\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Set collection properties.\n   * @param coll collection name\n   * @param properties properties\n   */\n  public void simSetCollectionProperties(String coll, Map<String, Object> properties) throws Exception {\n    lock.lock();\n    try {\n      if (properties == null) {\n        collProperties.remove(coll);\n      } else {\n        Map<String, Object> props = collProperties.computeIfAbsent(coll, c -> new HashMap<>());\n        props.clear();\n        props.putAll(properties);\n      }\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetCollectionProperties(String,Map[String,Object]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetCollectionProperties(String,Map[String,Object]).mjava","sourceNew":"  /**\n   * Set collection properties.\n   * @param coll collection name\n   * @param properties properties\n   */\n  public void simSetCollectionProperties(String coll, Map<String, Object> properties) throws Exception {\n    lock.lockInterruptibly();\n    try {\n      if (properties == null) {\n        collProperties.remove(coll);\n      } else {\n        Map<String, Object> props = collProperties.computeIfAbsent(coll, c -> new HashMap<>());\n        props.clear();\n        props.putAll(properties);\n      }\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Set collection properties.\n   * @param coll collection name\n   * @param properties properties\n   */\n  public void simSetCollectionProperties(String coll, Map<String, Object> properties) throws Exception {\n    lock.lockInterruptibly();\n    try {\n      if (properties == null) {\n        collProperties.remove(coll);\n      } else {\n        Map<String, Object> props = collProperties.computeIfAbsent(coll, c -> new HashMap<>());\n        props.clear();\n        props.putAll(properties);\n      }\n      collectionsStatesRef.set(null);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}