{"path":"solr/core/src/java/org/apache/solr/search/SolrCacheBase#calcHitRatio(long,long).mjava","commits":[{"id":"63131741120598595ba46620adaf3fad049ca291","date":1335567423,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCacheBase#calcHitRatio(long,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#calcHitRatio(long,long).mjava","sourceNew":"  /**\n   * Returns a \"Hit Ratio\" (ie: max of 1.00, not a percentage) suitable for \n   * display purposes.\n   */\n  protected static String calcHitRatio(long lookups, long hits) {\n    if (lookups==0) return \"0.00\";\n    if (lookups==hits) return \"1.00\";\n    int hundredths = (int)(hits*100/lookups);   // rounded down\n    if (hundredths < 10) return \"0.0\" + hundredths;\n    return \"0.\" + hundredths;\n\n    /*** code to produce a percent, if we want it...\n    int ones = (int)(hits*100 / lookups);\n    int tenths = (int)(hits*1000 / lookups) - ones*10;\n    return Integer.toString(ones) + '.' + tenths;\n    ***/\n  }\n\n","sourceOld":"  // returns a ratio, not a percent.\n  private static String calcHitRatio(long lookups, long hits) {\n    if (lookups==0) return \"0.00\";\n    if (lookups==hits) return \"1.00\";\n    int hundredths = (int)(hits*100/lookups);   // rounded down\n    if (hundredths < 10) return \"0.0\" + hundredths;\n    return \"0.\" + hundredths;\n\n    /*** code to produce a percent, if we want it...\n    int ones = (int)(hits*100 / lookups);\n    int tenths = (int)(hits*1000 / lookups) - ones*10;\n    return Integer.toString(ones) + '.' + tenths;\n    ***/\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07a7546c13b4c982e3f2c5c39a3e6e4974bcc3c1","date":1367514686,"type":3,"author":"Greg Bowyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCacheBase#calcHitRatio(long,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrCacheBase#calcHitRatio(long,long).mjava","sourceNew":"  /**\n   * Returns a \"Hit Ratio\" (ie: max of 1.00, not a percentage) suitable for \n   * display purposes.\n   */\n  protected static float calcHitRatio(long lookups, long hits) {\n    return (lookups == 0) ? 0.0f :\n        BigDecimal.valueOf((double) hits / (double) lookups)\n            .setScale(2, RoundingMode.HALF_EVEN)\n            .floatValue();\n  }\n\n","sourceOld":"  /**\n   * Returns a \"Hit Ratio\" (ie: max of 1.00, not a percentage) suitable for \n   * display purposes.\n   */\n  protected static String calcHitRatio(long lookups, long hits) {\n    if (lookups==0) return \"0.00\";\n    if (lookups==hits) return \"1.00\";\n    int hundredths = (int)(hits*100/lookups);   // rounded down\n    if (hundredths < 10) return \"0.0\" + hundredths;\n    return \"0.\" + hundredths;\n\n    /*** code to produce a percent, if we want it...\n    int ones = (int)(hits*100 / lookups);\n    int tenths = (int)(hits*1000 / lookups) - ones*10;\n    return Integer.toString(ones) + '.' + tenths;\n    ***/\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"07a7546c13b4c982e3f2c5c39a3e6e4974bcc3c1":["63131741120598595ba46620adaf3fad049ca291"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"63131741120598595ba46620adaf3fad049ca291":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07a7546c13b4c982e3f2c5c39a3e6e4974bcc3c1"]},"commit2Childs":{"07a7546c13b4c982e3f2c5c39a3e6e4974bcc3c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["63131741120598595ba46620adaf3fad049ca291"],"63131741120598595ba46620adaf3fad049ca291":["07a7546c13b4c982e3f2c5c39a3e6e4974bcc3c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}