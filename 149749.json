{"path":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","commits":[{"id":"6466e433d7f5218e77c8115ed28176855fc3c143","date":1436824910,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.info(\"Did not find ConfigSet properties\", ex);\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      JSONParser jsonParser = new JSONParser(reader);\n      Object object = ObjectBuilder.getVal(jsonParser);\n      if (!(object instanceof Map)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid JSON type \" + object.getClass().getName() + \", expected Map\");\n      }\n      return new NamedList((Map)object);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load ConfigSet properties\", ex);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b38569259d87ce37d27f23058edcf80bf3da40b1","date":1437589134,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","sourceNew":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.info(\"Did not find ConfigSet properties, assuming default properties: \" + ex.getMessage());\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      JSONParser jsonParser = new JSONParser(reader);\n      Object object = ObjectBuilder.getVal(jsonParser);\n      if (!(object instanceof Map)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid JSON type \" + object.getClass().getName() + \", expected Map\");\n      }\n      return new NamedList((Map)object);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load ConfigSet properties\", ex);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.info(\"Did not find ConfigSet properties\", ex);\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      JSONParser jsonParser = new JSONParser(reader);\n      Object object = ObjectBuilder.getVal(jsonParser);\n      if (!(object instanceof Map)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid JSON type \" + object.getClass().getName() + \", expected Map\");\n      }\n      return new NamedList((Map)object);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load ConfigSet properties\", ex);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","sourceNew":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.info(\"Did not find ConfigSet properties, assuming default properties: \" + ex.getMessage());\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.info(\"Did not find ConfigSet properties, assuming default properties: \" + ex.getMessage());\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      JSONParser jsonParser = new JSONParser(reader);\n      Object object = ObjectBuilder.getVal(jsonParser);\n      if (!(object instanceof Map)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid JSON type \" + object.getClass().getName() + \", expected Map\");\n      }\n      return new NamedList((Map)object);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load ConfigSet properties\", ex);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","sourceNew":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.debug(\"Did not find ConfigSet properties, assuming default properties: \" + ex.getMessage());\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.info(\"Did not find ConfigSet properties, assuming default properties: \" + ex.getMessage());\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","sourceNew":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.debug(\"Did not find ConfigSet properties, assuming default properties: \" + ex.getMessage());\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.info(\"Did not find ConfigSet properties, assuming default properties: \" + ex.getMessage());\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","sourceNew":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.debug(\"Did not find ConfigSet properties, assuming default properties: \" + ex.getMessage());\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.info(\"Did not find ConfigSet properties, assuming default properties: \" + ex.getMessage());\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","sourceNew":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.debug(\"Did not find ConfigSet properties, assuming default properties: \" + ex.getMessage());\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.info(\"Did not find ConfigSet properties, assuming default properties: \" + ex.getMessage());\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","sourceNew":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name   the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.debug(\"Did not find ConfigSet properties, assuming default properties: \" + ex.getMessage());\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.debug(\"Did not find ConfigSet properties, assuming default properties: \" + ex.getMessage());\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4fb176991e13ab85dfe62dceeb287dde115745","date":1579630717,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","sourceNew":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name   the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.debug(\"Did not find ConfigSet properties, assuming default properties: {}\", ex.getMessage());\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name   the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.debug(\"Did not find ConfigSet properties, assuming default properties: \" + ex.getMessage());\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","sourceNew":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name   the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Did not find ConfigSet properties, assuming default properties: {}\", ex.getMessage());\n      }\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name   the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      log.debug(\"Did not find ConfigSet properties, assuming default properties: {}\", ex.getMessage());\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","sourceNew":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name   the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Did not find ConfigSet properties, assuming default properties: {}\", ex.getMessage());\n      }\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name   the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Did not find ConfigSet properties, assuming default properties: {}\", ex.getMessage());\n      }\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromResourceLoader(SolrResourceLoader,String).mjava","sourceNew":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name   the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Did not find ConfigSet properties, assuming default properties: \", ex);\n      }\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the properties associated with the ConfigSet (e.g. immutable)\n   *\n   * @param loader the resource loader\n   * @param name   the name of the config set properties file\n   * @return the properties in a NamedList\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public static NamedList readFromResourceLoader(SolrResourceLoader loader, String name) {\n    InputStreamReader reader;\n    try {\n      reader = new InputStreamReader(loader.openResource(name), StandardCharsets.UTF_8);\n    } catch (SolrResourceNotFoundException ex) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"Did not find ConfigSet properties, assuming default properties: {}\", ex.getMessage());\n      }\n      return null;\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load reader for ConfigSet properties: \" + name, ex);\n    }\n\n    try {\n      return readFromInputStream(reader);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b38569259d87ce37d27f23058edcf80bf3da40b1":["6466e433d7f5218e77c8115ed28176855fc3c143"],"6466e433d7f5218e77c8115ed28176855fc3c143":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["140be51d03394488536f4aacedace29f9b318347"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["b38569259d87ce37d27f23058edcf80bf3da40b1"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2209af2c265d2258ec4b29c8cc78622d36994a15","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"126d6ad24eed13163ba0959435d5a80e5672837c":["2209af2c265d2258ec4b29c8cc78622d36994a15","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"140be51d03394488536f4aacedace29f9b318347":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2209af2c265d2258ec4b29c8cc78622d36994a15","126d6ad24eed13163ba0959435d5a80e5672837c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"]},"commit2Childs":{"b38569259d87ce37d27f23058edcf80bf3da40b1":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"6466e433d7f5218e77c8115ed28176855fc3c143":["b38569259d87ce37d27f23058edcf80bf3da40b1"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["140be51d03394488536f4aacedace29f9b318347"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6466e433d7f5218e77c8115ed28176855fc3c143"],"140be51d03394488536f4aacedace29f9b318347":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}