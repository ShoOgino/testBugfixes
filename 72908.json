{"path":"src/java/org/apache/lucene/search/FieldSortedHitQueue#getCachedComparator(IndexReader,String,int,Locale,SortComparatorSource).mjava","commits":[{"id":"ba534479820dee396d07f520ba2a55400a1b6e7d","date":1085439102,"type":1,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#getCachedComparator(IndexReader,String,int,Locale,SortComparatorSource).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#getCachedComparator(IndexReader,String,int,SortComparatorSource).mjava","sourceNew":"  static ScoreDocComparator getCachedComparator (IndexReader reader, String fieldname, int type, Locale locale, SortComparatorSource factory)\n  throws IOException {\n    if (type == SortField.DOC) return ScoreDocComparator.INDEXORDER;\n    if (type == SortField.SCORE) return ScoreDocComparator.RELEVANCE;\n    ScoreDocComparator comparator = lookup (reader, fieldname, type, factory);\n    if (comparator == null) {\n      switch (type) {\n        case SortField.AUTO:\n          comparator = comparatorAuto (reader, fieldname);\n          break;\n        case SortField.INT:\n          comparator = comparatorInt (reader, fieldname);\n          break;\n        case SortField.FLOAT:\n          comparator = comparatorFloat (reader, fieldname);\n          break;\n        case SortField.STRING:\n          if (locale != null) comparator = comparatorStringLocale (reader, fieldname, locale);\n          else comparator = comparatorString (reader, fieldname);\n          break;\n        case SortField.CUSTOM:\n          comparator = factory.newComparator (reader, fieldname);\n          break;\n        default:\n          throw new RuntimeException (\"unknown field type: \"+type);\n      }\n      store (reader, fieldname, type, factory, comparator);\n    }\n    return comparator;\n  }\n\n","sourceOld":"  static ScoreDocComparator getCachedComparator (IndexReader reader, String fieldname, int type, SortComparatorSource factory)\n  throws IOException {\n    if (type == SortField.DOC) return ScoreDocComparator.INDEXORDER;\n    if (type == SortField.SCORE) return ScoreDocComparator.RELEVANCE;\n    ScoreDocComparator comparator = lookup (reader, fieldname, type, factory);\n    if (comparator == null) {\n      switch (type) {\n        case SortField.AUTO:\n          comparator = comparatorAuto (reader, fieldname);\n          break;\n        case SortField.INT:\n          comparator = comparatorInt (reader, fieldname);\n          break;\n        case SortField.FLOAT:\n          comparator = comparatorFloat (reader, fieldname);\n          break;\n        case SortField.STRING:\n          comparator = comparatorString (reader, fieldname);\n          break;\n        case SortField.CUSTOM:\n          comparator = factory.newComparator (reader, fieldname);\n          break;\n        default:\n          throw new RuntimeException (\"unknown field type: \"+type);\n      }\n      store (reader, fieldname, type, factory, comparator);\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2275c46fba03d235b53596f1b08c77ad11a24459","date":1144296129,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#getCachedComparator(IndexReader,String,int,Locale,SortComparatorSource).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#getCachedComparator(IndexReader,String,int,Locale,SortComparatorSource).mjava","sourceNew":"  static ScoreDocComparator getCachedComparator (IndexReader reader, String fieldname, int type, Locale locale, SortComparatorSource factory)\n  throws IOException {\n    if (type == SortField.DOC) return ScoreDocComparator.INDEXORDER;\n    if (type == SortField.SCORE) return ScoreDocComparator.RELEVANCE;\n    ScoreDocComparator comparator = lookup (reader, fieldname, type, locale, factory);\n    if (comparator == null) {\n      switch (type) {\n        case SortField.AUTO:\n          comparator = comparatorAuto (reader, fieldname);\n          break;\n        case SortField.INT:\n          comparator = comparatorInt (reader, fieldname);\n          break;\n        case SortField.FLOAT:\n          comparator = comparatorFloat (reader, fieldname);\n          break;\n        case SortField.STRING:\n          if (locale != null) comparator = comparatorStringLocale (reader, fieldname, locale);\n          else comparator = comparatorString (reader, fieldname);\n          break;\n        case SortField.CUSTOM:\n          comparator = factory.newComparator (reader, fieldname);\n          break;\n        default:\n          throw new RuntimeException (\"unknown field type: \"+type);\n      }\n      store (reader, fieldname, type, locale, factory, comparator);\n    }\n    return comparator;\n  }\n\n","sourceOld":"  static ScoreDocComparator getCachedComparator (IndexReader reader, String fieldname, int type, Locale locale, SortComparatorSource factory)\n  throws IOException {\n    if (type == SortField.DOC) return ScoreDocComparator.INDEXORDER;\n    if (type == SortField.SCORE) return ScoreDocComparator.RELEVANCE;\n    ScoreDocComparator comparator = lookup (reader, fieldname, type, factory);\n    if (comparator == null) {\n      switch (type) {\n        case SortField.AUTO:\n          comparator = comparatorAuto (reader, fieldname);\n          break;\n        case SortField.INT:\n          comparator = comparatorInt (reader, fieldname);\n          break;\n        case SortField.FLOAT:\n          comparator = comparatorFloat (reader, fieldname);\n          break;\n        case SortField.STRING:\n          if (locale != null) comparator = comparatorStringLocale (reader, fieldname, locale);\n          else comparator = comparatorString (reader, fieldname);\n          break;\n        case SortField.CUSTOM:\n          comparator = factory.newComparator (reader, fieldname);\n          break;\n        default:\n          throw new RuntimeException (\"unknown field type: \"+type);\n      }\n      store (reader, fieldname, type, factory, comparator);\n    }\n    return comparator;\n  }\n\n","bugFix":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e4e7cc130365302adc717b9353553a80f892b73","date":1164006604,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#getCachedComparator(IndexReader,String,int,Locale,SortComparatorSource).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#getCachedComparator(IndexReader,String,int,Locale,SortComparatorSource).mjava","sourceNew":"  static ScoreDocComparator getCachedComparator (IndexReader reader, String field, int type, Locale locale, SortComparatorSource factory)\n  throws IOException {\n    if (type == SortField.DOC) return ScoreDocComparator.INDEXORDER;\n    if (type == SortField.SCORE) return ScoreDocComparator.RELEVANCE;\n    FieldCacheImpl.Entry entry = (factory != null)\n      ? new FieldCacheImpl.Entry (field, factory)\n      : new FieldCacheImpl.Entry (field, type, locale);\n    return (ScoreDocComparator)Comparators.get(reader, entry);\n  }\n\n","sourceOld":"  static ScoreDocComparator getCachedComparator (IndexReader reader, String fieldname, int type, Locale locale, SortComparatorSource factory)\n  throws IOException {\n    if (type == SortField.DOC) return ScoreDocComparator.INDEXORDER;\n    if (type == SortField.SCORE) return ScoreDocComparator.RELEVANCE;\n    ScoreDocComparator comparator = lookup (reader, fieldname, type, locale, factory);\n    if (comparator == null) {\n      switch (type) {\n        case SortField.AUTO:\n          comparator = comparatorAuto (reader, fieldname);\n          break;\n        case SortField.INT:\n          comparator = comparatorInt (reader, fieldname);\n          break;\n        case SortField.FLOAT:\n          comparator = comparatorFloat (reader, fieldname);\n          break;\n        case SortField.STRING:\n          if (locale != null) comparator = comparatorStringLocale (reader, fieldname, locale);\n          else comparator = comparatorString (reader, fieldname);\n          break;\n        case SortField.CUSTOM:\n          comparator = factory.newComparator (reader, fieldname);\n          break;\n        default:\n          throw new RuntimeException (\"unknown field type: \"+type);\n      }\n      store (reader, fieldname, type, locale, factory, comparator);\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3766097c9c41a30d67e9b548c62d017abf8e07ac","date":1228770465,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#getCachedComparator(IndexReader,String,int,FieldCache.Parser,Locale,SortComparatorSource).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#getCachedComparator(IndexReader,String,int,Locale,SortComparatorSource).mjava","sourceNew":"  static ScoreDocComparator getCachedComparator (IndexReader reader, String field, int type, FieldCache.Parser parser, Locale locale, SortComparatorSource factory)\n  throws IOException {\n    if (type == SortField.DOC) return ScoreDocComparator.INDEXORDER;\n    if (type == SortField.SCORE) return ScoreDocComparator.RELEVANCE;\n    FieldCacheImpl.Entry entry = (factory != null)\n      ? new FieldCacheImpl.Entry (field, factory)\n      : ( (parser != null)\n\t\t? new FieldCacheImpl.Entry (field, type, parser)\n\t\t: new FieldCacheImpl.Entry (field, type, locale)\n\t  );\n    return (ScoreDocComparator)Comparators.get(reader, entry);\n  }\n\n","sourceOld":"  static ScoreDocComparator getCachedComparator (IndexReader reader, String field, int type, Locale locale, SortComparatorSource factory)\n  throws IOException {\n    if (type == SortField.DOC) return ScoreDocComparator.INDEXORDER;\n    if (type == SortField.SCORE) return ScoreDocComparator.RELEVANCE;\n    FieldCacheImpl.Entry entry = (factory != null)\n      ? new FieldCacheImpl.Entry (field, factory)\n      : new FieldCacheImpl.Entry (field, type, locale);\n    return (ScoreDocComparator)Comparators.get(reader, entry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3766097c9c41a30d67e9b548c62d017abf8e07ac":["4e4e7cc130365302adc717b9353553a80f892b73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e4e7cc130365302adc717b9353553a80f892b73":["2275c46fba03d235b53596f1b08c77ad11a24459"],"2275c46fba03d235b53596f1b08c77ad11a24459":["ba534479820dee396d07f520ba2a55400a1b6e7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3766097c9c41a30d67e9b548c62d017abf8e07ac"],"ba534479820dee396d07f520ba2a55400a1b6e7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3766097c9c41a30d67e9b548c62d017abf8e07ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba534479820dee396d07f520ba2a55400a1b6e7d"],"4e4e7cc130365302adc717b9353553a80f892b73":["3766097c9c41a30d67e9b548c62d017abf8e07ac"],"2275c46fba03d235b53596f1b08c77ad11a24459":["4e4e7cc130365302adc717b9353553a80f892b73"],"ba534479820dee396d07f520ba2a55400a1b6e7d":["2275c46fba03d235b53596f1b08c77ad11a24459"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}