{"path":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#toIndexArray(Map[Integer,int[]]).mjava","commits":[{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":1,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#toIndexArray(Map[Integer,int[]]).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/UserDictionary#toIndexArray(Map[Integer,int[]]).mjava","sourceNew":"  /**\n   * Convert Map of index and wordIdAndLength to array of {wordId, index, length}\n   * @param input\n   * @return array of {wordId, index, length}\n   */\n  private int[][] toIndexArray(Map<Integer, int[]> input) {\n    ArrayList<int[]> result = new ArrayList<int[]>();\n    for (int i : input.keySet()) {\n      int[] wordIdAndLength = input.get(i);\n      int wordId = wordIdAndLength[0];\n      // convert length to index\n      int current = i;\n      for (int j = 1; j < wordIdAndLength.length; j++) { // first entry is wordId offset\n        int[] token = { wordId + j - 1, current, wordIdAndLength[j] };\n        result.add(token);\n        current += wordIdAndLength[j];\n      }\n    }\n    return result.toArray(new int[result.size()][]);\n  }\n\n","sourceOld":"  /**\n   * Convert Map of index and wordIdAndLength to array of {wordId, index, length}\n   * @param input\n   * @return array of {wordId, index, length}\n   */\n  private int[][] toIndexArray(Map<Integer, int[]> input) {\n    ArrayList<int[]> result = new ArrayList<int[]>();\n    for (int i : input.keySet()) {\n      int[] wordIdAndLength = input.get(i);\n      int wordId = wordIdAndLength[0];\n      // convert length to index\n      int current = i;\n      for (int j = 1; j < wordIdAndLength.length; j++) { // first entry is wordId offset\n        int[] token = { wordId + j - 1, current, wordIdAndLength[j] };\n        result.add(token);\n        current += wordIdAndLength[j];\n      }\n    }\n    return result.toArray(new int[result.size()][]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#toIndexArray(Map[Integer,int[]]).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#toIndexArray(Map[Integer,int[]]).mjava","sourceNew":"  /**\n   * Convert Map of index and wordIdAndLength to array of {wordId, index, length}\n   * @param input\n   * @return array of {wordId, index, length}\n   */\n  private int[][] toIndexArray(Map<Integer, int[]> input) {\n    ArrayList<int[]> result = new ArrayList<int[]>();\n    for (int i : input.keySet()) {\n      int[] wordIdAndLength = input.get(i);\n      int wordId = wordIdAndLength[0];\n      // convert length to index\n      int current = i;\n      for (int j = 1; j < wordIdAndLength.length; j++) { // first entry is wordId offset\n        int[] token = { wordId + j - 1, current, wordIdAndLength[j] };\n        result.add(token);\n        current += wordIdAndLength[j];\n      }\n    }\n    return result.toArray(new int[result.size()][]);\n  }\n\n","sourceOld":"  /**\n   * Convert Map of index and wordIdAndLength to array of {wordId, index, length}\n   * @param input\n   * @return array of {wordId, index, length}\n   */\n  private int[][] toIndexArray(Map<Integer, int[]> input) {\n    ArrayList<int[]> result = new ArrayList<int[]>();\n    for (int i : input.keySet()) {\n      int[] wordIdAndLength = input.get(i);\n      int wordId = wordIdAndLength[0];\n      // convert length to index\n      int current = i;\n      for (int j = 1; j < wordIdAndLength.length; j++) { // first entry is wordId offset\n        int[] token = { wordId + j - 1, current, wordIdAndLength[j] };\n        result.add(token);\n        current += wordIdAndLength[j];\n      }\n    }\n    return result.toArray(new int[result.size()][]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}