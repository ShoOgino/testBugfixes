{"path":"solr/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","commits":[{"id":"9c7cdfe5a1ea9db97faa404b251fa644faa73597","date":1308345959,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"/dev/null","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = Math.min(numGroups, docsGathered);\n      if (offset > len) {\n        len = 0;\n      }\n\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7edfc3f7caa7b49a18fe367692768b33b018e9db","date":1308374217,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"/dev/null","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = Math.min(numGroups, docsGathered);\n      if (offset > len) {\n        len = 0;\n      }\n\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = Math.min(numGroups, docsGathered);\n      if (offset > len) {\n        len = 0;\n      }\n\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = Math.min(numGroups, docsGathered);\n      if (offset > len) {\n        len = 0;\n      }\n\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = Math.min(numGroups, docsGathered);\n      if (offset > len) {\n        len = 0;\n      }\n\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = Math.min(numGroups, docsGathered);\n      if (offset > len) {\n        len = 0;\n      }\n\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#createSimpleResponse().mjava","sourceNew":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = Math.min(numGroups, docsGathered);\n      if (offset > len) {\n        len = 0;\n      }\n\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","sourceOld":"    // Flatten the groups and get up offset + rows documents\n    protected DocList createSimpleResponse() {\n      GroupDocs[] groups = result != null ? result.groups : new GroupDocs[0];\n\n      List<Integer> ids = new ArrayList<Integer>();\n      List<Float> scores = new ArrayList<Float>();\n      int docsToGather = getMax(offset, numGroups, maxDoc);\n      int docsGathered = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n\n      outer:\n      for (GroupDocs group : groups) {\n        if (group.maxScore > maxScore) {\n          maxScore = group.maxScore;\n        }\n\n        for (ScoreDoc scoreDoc : group.scoreDocs) {\n          if (docsGathered >= docsToGather) {\n            break outer;\n          }\n\n          ids.add(scoreDoc.doc);\n          scores.add(scoreDoc.score);\n          docsGathered++;\n        }\n      }\n\n      int len = Math.min(numGroups, docsGathered);\n      if (offset > len) {\n        len = 0;\n      }\n\n      int[] docs = ArrayUtils.toPrimitive(ids.toArray(new Integer[ids.size()]));\n      float[] docScores = ArrayUtils.toPrimitive(scores.toArray(new Float[scores.size()]));\n      DocSlice docSlice = new DocSlice(offset, len, docs, docScores, getMatches(), maxScore);\n\n      if (getDocList) {\n        for (int i = offset; i < docs.length; i++) {\n          idSet.add(docs[i]);\n        }\n      }\n\n      return docSlice;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7edfc3f7caa7b49a18fe367692768b33b018e9db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["7edfc3f7caa7b49a18fe367692768b33b018e9db"],"c26f00b574427b55127e869b935845554afde1fa":["9c7cdfe5a1ea9db97faa404b251fa644faa73597","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"7edfc3f7caa7b49a18fe367692768b33b018e9db":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7edfc3f7caa7b49a18fe367692768b33b018e9db","9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["7edfc3f7caa7b49a18fe367692768b33b018e9db","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}