{"path":"solr/core/src/java/org/apache/solr/servlet/FormDataRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","commits":[{"id":"c7d0565444d6381434fbff66cecf07da249f2bb4","date":1357484111,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/FormDataRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if (!isFormData(req)) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n    }\n    \n    String charset = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n    if (charset == null) charset = \"UTF-8\";\n    \n    final Map<String,String[]> map = new HashMap<String, String[]>();\n    \n    // also add possible URL parameters and include into the map (parsed using UTF-8):\n    final String qs = req.getQueryString();\n    if (qs != null) {\n      SolrRequestParsers.parseQueryString(qs, \"UTF-8\", map);\n    }\n    \n    // may be -1, so we check again later. But if its already greater we can stop processing!\n    final long totalLength = req.getContentLength();\n    final long maxLength = ((long) uploadLimitKB) * 1024L;\n    if (totalLength > maxLength) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n        totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n    }\n    \n    // get query String from request body, using the charset given in content-type:\n    final InputStream in;\n    try {\n      in = req.getInputStream();\n    } catch (IllegalStateException ise) {\n      throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n    }\n    try {\n      final String data = IOUtils.toString(new BoundedInputStream(in, maxLength), charset);\n      // if there is remaining data in the underlying stream, throw exception:\n      if (in.read() != -1) {\n        // read remaining data and throw away:\n        while (IOUtils.skip(in, 1024L) > 0);\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n      if (data.length() == 0 && totalLength > 0L) {\n        throw getParameterIncompatibilityException();\n      }\n      SolrRequestParsers.parseQueryString(data, charset, map);\n    } finally {\n      IOUtils.closeQuietly(in);\n    }\n    \n    return new MultiMapSolrParams(map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/FormDataRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if (!isFormData(req)) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n    }\n    \n    String charset = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n    if (charset == null) charset = \"UTF-8\";\n    \n    final Map<String,String[]> map = new HashMap<String, String[]>();\n    \n    // also add possible URL parameters and include into the map (parsed using UTF-8):\n    final String qs = req.getQueryString();\n    if (qs != null) {\n      SolrRequestParsers.parseQueryString(qs, \"UTF-8\", map);\n    }\n    \n    // may be -1, so we check again later. But if its already greater we can stop processing!\n    final long totalLength = req.getContentLength();\n    final long maxLength = ((long) uploadLimitKB) * 1024L;\n    if (totalLength > maxLength) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n        totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n    }\n    \n    // get query String from request body, using the charset given in content-type:\n    final InputStream in;\n    try {\n      in = req.getInputStream();\n    } catch (IllegalStateException ise) {\n      throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n    }\n    try {\n      final String data = IOUtils.toString(new BoundedInputStream(in, maxLength), charset);\n      // if there is remaining data in the underlying stream, throw exception:\n      if (in.read() != -1) {\n        // read remaining data and throw away:\n        while (IOUtils.skip(in, 1024L) > 0);\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n      if (data.length() == 0 && totalLength > 0L) {\n        throw getParameterIncompatibilityException();\n      }\n      SolrRequestParsers.parseQueryString(data, charset, map);\n    } finally {\n      IOUtils.closeQuietly(in);\n    }\n    \n    return new MultiMapSolrParams(map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfea9c90af47b6b37ffaafe52d3307a1f8978e68","date":1357665734,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/FormDataRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/FormDataRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if (!isFormData(req)) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n    }\n    \n    final Map<String,String[]> map = new HashMap<String, String[]>();\n    \n    // also add possible URL parameters and include into the map (parsed using UTF-8):\n    final String qs = req.getQueryString();\n    if (qs != null) {\n      SolrRequestParsers.parseQueryString(qs, map);\n    }\n    \n    // may be -1, so we check again later. But if its already greater we can stop processing!\n    final long totalLength = req.getContentLength();\n    final long maxLength = ((long) uploadLimitKB) * 1024L;\n    if (totalLength > maxLength) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n        totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n    }\n    \n    // get query String from request body, using the charset given in content-type:\n    final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n    final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n    InputStream in = null;\n    try {\n      in = req.getInputStream();\n      final long bytesRead = SolrRequestParsers.parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map);\n      if (bytesRead == 0L && totalLength > 0L) {\n        throw getParameterIncompatibilityException();\n      }\n    } catch (IOException ioe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ioe);\n    } catch (IllegalStateException ise) {\n      throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n    } finally {\n      IOUtils.closeWhileHandlingException(in);\n    }\n    \n    return new MultiMapSolrParams(map);\n  }\n\n","sourceOld":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if (!isFormData(req)) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n    }\n    \n    String charset = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n    if (charset == null) charset = \"UTF-8\";\n    \n    final Map<String,String[]> map = new HashMap<String, String[]>();\n    \n    // also add possible URL parameters and include into the map (parsed using UTF-8):\n    final String qs = req.getQueryString();\n    if (qs != null) {\n      SolrRequestParsers.parseQueryString(qs, \"UTF-8\", map);\n    }\n    \n    // may be -1, so we check again later. But if its already greater we can stop processing!\n    final long totalLength = req.getContentLength();\n    final long maxLength = ((long) uploadLimitKB) * 1024L;\n    if (totalLength > maxLength) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n        totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n    }\n    \n    // get query String from request body, using the charset given in content-type:\n    final InputStream in;\n    try {\n      in = req.getInputStream();\n    } catch (IllegalStateException ise) {\n      throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n    }\n    try {\n      final String data = IOUtils.toString(new BoundedInputStream(in, maxLength), charset);\n      // if there is remaining data in the underlying stream, throw exception:\n      if (in.read() != -1) {\n        // read remaining data and throw away:\n        while (IOUtils.skip(in, 1024L) > 0);\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n      if (data.length() == 0 && totalLength > 0L) {\n        throw getParameterIncompatibilityException();\n      }\n      SolrRequestParsers.parseQueryString(data, charset, map);\n    } finally {\n      IOUtils.closeQuietly(in);\n    }\n    \n    return new MultiMapSolrParams(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/FormDataRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/FormDataRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if (!isFormData(req)) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n    }\n    \n    final Map<String,String[]> map = new HashMap<String, String[]>();\n    \n    // also add possible URL parameters and include into the map (parsed using UTF-8):\n    final String qs = req.getQueryString();\n    if (qs != null) {\n      SolrRequestParsers.parseQueryString(qs, map);\n    }\n    \n    // may be -1, so we check again later. But if its already greater we can stop processing!\n    final long totalLength = req.getContentLength();\n    final long maxLength = ((long) uploadLimitKB) * 1024L;\n    if (totalLength > maxLength) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n        totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n    }\n    \n    // get query String from request body, using the charset given in content-type:\n    final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n    final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n    InputStream in = null;\n    try {\n      in = req.getInputStream();\n      final long bytesRead = SolrRequestParsers.parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map);\n      if (bytesRead == 0L && totalLength > 0L) {\n        throw getParameterIncompatibilityException();\n      }\n    } catch (IOException ioe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ioe);\n    } catch (IllegalStateException ise) {\n      throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n    } finally {\n      IOUtils.closeWhileHandlingException(in);\n    }\n    \n    return new MultiMapSolrParams(map);\n  }\n\n","sourceOld":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if (!isFormData(req)) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n    }\n    \n    String charset = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n    if (charset == null) charset = \"UTF-8\";\n    \n    final Map<String,String[]> map = new HashMap<String, String[]>();\n    \n    // also add possible URL parameters and include into the map (parsed using UTF-8):\n    final String qs = req.getQueryString();\n    if (qs != null) {\n      SolrRequestParsers.parseQueryString(qs, \"UTF-8\", map);\n    }\n    \n    // may be -1, so we check again later. But if its already greater we can stop processing!\n    final long totalLength = req.getContentLength();\n    final long maxLength = ((long) uploadLimitKB) * 1024L;\n    if (totalLength > maxLength) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n        totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n    }\n    \n    // get query String from request body, using the charset given in content-type:\n    final InputStream in;\n    try {\n      in = req.getInputStream();\n    } catch (IllegalStateException ise) {\n      throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n    }\n    try {\n      final String data = IOUtils.toString(new BoundedInputStream(in, maxLength), charset);\n      // if there is remaining data in the underlying stream, throw exception:\n      if (in.read() != -1) {\n        // read remaining data and throw away:\n        while (IOUtils.skip(in, 1024L) > 0);\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content exceeds upload limit of \" + uploadLimitKB + \" KB\");\n      }\n      if (data.length() == 0 && totalLength > 0L) {\n        throw getParameterIncompatibilityException();\n      }\n      SolrRequestParsers.parseQueryString(data, charset, map);\n    } finally {\n      IOUtils.closeQuietly(in);\n    }\n    \n    return new MultiMapSolrParams(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/FormDataRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/FormDataRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if (!isFormData(req)) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n    }\n    \n    final Map<String,String[]> map = new HashMap<String, String[]>();\n    \n    // also add possible URL parameters and include into the map (parsed using UTF-8):\n    final String qs = req.getQueryString();\n    if (qs != null) {\n      SolrRequestParsers.parseQueryString(qs, map);\n    }\n    \n    // may be -1, so we check again later. But if its already greater we can stop processing!\n    final long totalLength = req.getContentLength();\n    final long maxLength = ((long) uploadLimitKB) * 1024L;\n    if (totalLength > maxLength) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n        totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n    }\n    \n    // get query String from request body, using the charset given in content-type:\n    final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n    final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n    InputStream in = null;\n    try {\n      in = req.getInputStream();\n      final long bytesRead = SolrRequestParsers.parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map);\n      if (bytesRead == 0L && totalLength > 0L) {\n        throw getParameterIncompatibilityException();\n      }\n    } catch (IOException ioe) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n    } catch (IllegalStateException ise) {\n      throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n    } finally {\n      IOUtils.closeWhileHandlingException(in);\n    }\n    \n    return new MultiMapSolrParams(map);\n  }\n\n","sourceOld":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if (!isFormData(req)) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n    }\n    \n    final Map<String,String[]> map = new HashMap<String, String[]>();\n    \n    // also add possible URL parameters and include into the map (parsed using UTF-8):\n    final String qs = req.getQueryString();\n    if (qs != null) {\n      SolrRequestParsers.parseQueryString(qs, map);\n    }\n    \n    // may be -1, so we check again later. But if its already greater we can stop processing!\n    final long totalLength = req.getContentLength();\n    final long maxLength = ((long) uploadLimitKB) * 1024L;\n    if (totalLength > maxLength) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n        totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n    }\n    \n    // get query String from request body, using the charset given in content-type:\n    final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n    final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n    InputStream in = null;\n    try {\n      in = req.getInputStream();\n      final long bytesRead = SolrRequestParsers.parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map);\n      if (bytesRead == 0L && totalLength > 0L) {\n        throw getParameterIncompatibilityException();\n      }\n    } catch (IOException ioe) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ioe);\n    } catch (IllegalStateException ise) {\n      throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n    } finally {\n      IOUtils.closeWhileHandlingException(in);\n    }\n    \n    return new MultiMapSolrParams(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d9ecbe4fecfad4689ea50a5ece2b815854aacdf","date":1374966910,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/FormDataRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if (!isFormData(req)) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n    }\n    \n    final Map<String,String[]> map = new HashMap<String, String[]>();\n    \n    // also add possible URL parameters and include into the map (parsed using UTF-8):\n    final String qs = req.getQueryString();\n    if (qs != null) {\n      SolrRequestParsers.parseQueryString(qs, map);\n    }\n    \n    // may be -1, so we check again later. But if its already greater we can stop processing!\n    final long totalLength = req.getContentLength();\n    final long maxLength = ((long) uploadLimitKB) * 1024L;\n    if (totalLength > maxLength) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n        totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n    }\n    \n    // get query String from request body, using the charset given in content-type:\n    final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n    final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n    InputStream in = null;\n    try {\n      in = req.getInputStream();\n      final long bytesRead = SolrRequestParsers.parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map);\n      if (bytesRead == 0L && totalLength > 0L) {\n        throw getParameterIncompatibilityException();\n      }\n    } catch (IOException ioe) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n    } catch (IllegalStateException ise) {\n      throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n    } finally {\n      IOUtils.closeWhileHandlingException(in);\n    }\n    \n    return new MultiMapSolrParams(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/FormDataRequestParser[SolrRequestParsers]#parseParamsAndFillStreams(HttpServletRequest,ArrayList[ContentStream]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SolrParams parseParamsAndFillStreams( \n      final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception\n  {\n    if (!isFormData(req)) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Not application/x-www-form-urlencoded content: \"+req.getContentType() );\n    }\n    \n    final Map<String,String[]> map = new HashMap<String, String[]>();\n    \n    // also add possible URL parameters and include into the map (parsed using UTF-8):\n    final String qs = req.getQueryString();\n    if (qs != null) {\n      SolrRequestParsers.parseQueryString(qs, map);\n    }\n    \n    // may be -1, so we check again later. But if its already greater we can stop processing!\n    final long totalLength = req.getContentLength();\n    final long maxLength = ((long) uploadLimitKB) * 1024L;\n    if (totalLength > maxLength) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"application/x-www-form-urlencoded content length (\" +\n        totalLength + \" bytes) exceeds upload limit of \" + uploadLimitKB + \" KB\");\n    }\n    \n    // get query String from request body, using the charset given in content-type:\n    final String cs = ContentStreamBase.getCharsetFromContentType(req.getContentType());\n    final Charset charset = (cs == null) ? IOUtils.CHARSET_UTF_8 : Charset.forName(cs);\n    InputStream in = null;\n    try {\n      in = req.getInputStream();\n      final long bytesRead = SolrRequestParsers.parseFormDataContent(FastInputStream.wrap(in), maxLength, charset, map);\n      if (bytesRead == 0L && totalLength > 0L) {\n        throw getParameterIncompatibilityException();\n      }\n    } catch (IOException ioe) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, ioe);\n    } catch (IllegalStateException ise) {\n      throw (SolrException) getParameterIncompatibilityException().initCause(ise);\n    } finally {\n      IOUtils.closeWhileHandlingException(in);\n    }\n    \n    return new MultiMapSolrParams(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7d0565444d6381434fbff66cecf07da249f2bb4"],"c7d0565444d6381434fbff66cecf07da249f2bb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["08970e5b8411182a29412c177eff67ec1110095b","8d9ecbe4fecfad4689ea50a5ece2b815854aacdf"],"8d9ecbe4fecfad4689ea50a5ece2b815854aacdf":["08970e5b8411182a29412c177eff67ec1110095b"],"bfea9c90af47b6b37ffaafe52d3307a1f8978e68":["c7d0565444d6381434fbff66cecf07da249f2bb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bfea9c90af47b6b37ffaafe52d3307a1f8978e68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d9ecbe4fecfad4689ea50a5ece2b815854aacdf"],"08970e5b8411182a29412c177eff67ec1110095b":["bfea9c90af47b6b37ffaafe52d3307a1f8978e68"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"c7d0565444d6381434fbff66cecf07da249f2bb4":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bfea9c90af47b6b37ffaafe52d3307a1f8978e68"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7d0565444d6381434fbff66cecf07da249f2bb4"],"8d9ecbe4fecfad4689ea50a5ece2b815854aacdf":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bfea9c90af47b6b37ffaafe52d3307a1f8978e68":["4e6354dd7c71fe122926fc53d7d29f715b1283db","08970e5b8411182a29412c177eff67ec1110095b"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"08970e5b8411182a29412c177eff67ec1110095b":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","8d9ecbe4fecfad4689ea50a5ece2b815854aacdf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}