{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","sourceNew":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.open(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n\n    // Re-init clock\n    setStartTimeMillis();\n  }\n\n","sourceOld":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.open(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n\n    // Re-init clock\n    setStartTimeMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","sourceNew":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.open(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n\n    // Re-init clock\n    setStartTimeMillis();\n  }\n\n","sourceOld":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.open(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n\n    // Re-init clock\n    setStartTimeMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","sourceNew":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.open(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n\n    // Re-init clock\n    setStartTimeMillis();\n  }\n\n","sourceOld":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.open(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n\n    // Re-init clock\n    setStartTimeMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#reinit(boolean).mjava","sourceNew":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.open(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n\n    // Re-init clock\n    setStartTimeMillis();\n  }\n\n","sourceOld":"  // clean old stuff, reopen \n  public void reinit(boolean eraseIndex) throws Exception {\n\n    // cleanup index\n    if (indexWriter!=null) {\n      indexWriter.close();\n      indexWriter = null;\n    }\n    if (indexReader!=null) {\n      indexReader.close();\n      indexReader = null;\n    }\n    if (directory!=null) {\n      directory.close();\n    }\n    \n    // directory (default is ram-dir).\n    if (\"FSDirectory\".equals(config.get(\"directory\",\"RAMDirectory\"))) {\n      File workDir = new File(config.get(\"work.dir\",\"work\"));\n      File indexDir = new File(workDir,\"index\");\n      if (eraseIndex && indexDir.exists()) {\n        FileUtils.fullyDelete(indexDir);\n      }\n      indexDir.mkdirs();\n      directory = FSDirectory.open(indexDir);\n    } else {\n      directory = new RAMDirectory();\n    }\n\n    // inputs\n    resetInputs();\n    \n    // release unused stuff\n    System.runFinalization();\n    System.gc();\n\n    // Re-init clock\n    setStartTimeMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}