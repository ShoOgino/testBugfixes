{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testReaderNotSuitedForCaching().mjava","commits":[{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testReaderNotSuitedForCaching().mjava","pathOld":"/dev/null","sourceNew":"  public void testReaderNotSuitedForCaching() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = new DummyDirectoryReader(w.getReader());\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    // don't cache if the reader does not expose a cache helper\n    assertNull(reader.leaves().get(0).reader().getCoreCacheHelper());\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, context -> true);\n    searcher.setQueryCache(cache);\n    assertEquals(0, searcher.count(new DummyQuery()));\n    assertEquals(0, cache.getCacheCount());\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testReaderNotSuitedForCaching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testReaderNotSuitedForCaching().mjava","sourceNew":"  public void testReaderNotSuitedForCaching() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = new DummyDirectoryReader(w.getReader());\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    // don't cache if the reader does not expose a cache helper\n    assertNull(reader.leaves().get(0).reader().getCoreCacheHelper());\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, context -> true, Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    assertEquals(0, searcher.count(new DummyQuery()));\n    assertEquals(0, cache.getCacheCount());\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReaderNotSuitedForCaching() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = new DummyDirectoryReader(w.getReader());\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    // don't cache if the reader does not expose a cache helper\n    assertNull(reader.leaves().get(0).reader().getCoreCacheHelper());\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, context -> true);\n    searcher.setQueryCache(cache);\n    assertEquals(0, searcher.count(new DummyQuery()));\n    assertEquals(0, cache.getCacheCount());\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testReaderNotSuitedForCaching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testReaderNotSuitedForCaching().mjava","sourceNew":"  public void testReaderNotSuitedForCaching() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = new DummyDirectoryReader(w.getReader());\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    // don't cache if the reader does not expose a cache helper\n    assertNull(reader.leaves().get(0).reader().getCoreCacheHelper());\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, context -> true, Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    assertEquals(0, searcher.count(new DummyQuery()));\n    assertEquals(0, cache.getCacheCount());\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReaderNotSuitedForCaching() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = new DummyDirectoryReader(w.getReader());\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    // don't cache if the reader does not expose a cache helper\n    assertNull(reader.leaves().get(0).reader().getCoreCacheHelper());\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, context -> true);\n    searcher.setQueryCache(cache);\n    assertEquals(0, searcher.count(new DummyQuery()));\n    assertEquals(0, cache.getCacheCount());\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"789fb338d3c53b4478938723d60f6623e764ca38","date":1521535944,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testReaderNotSuitedForCaching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testReaderNotSuitedForCaching().mjava","sourceNew":"  public void testReaderNotSuitedForCaching() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = new DummyDirectoryReader(w.getReader());\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    // don't cache if the reader does not expose a cache helper\n    assertNull(reader.leaves().get(0).reader().getCoreCacheHelper());\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, context -> true);\n    searcher.setQueryCache(cache);\n    assertEquals(0, searcher.count(new DummyQuery()));\n    assertEquals(0, cache.getCacheCount());\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReaderNotSuitedForCaching() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = new DummyDirectoryReader(w.getReader());\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    // don't cache if the reader does not expose a cache helper\n    assertNull(reader.leaves().get(0).reader().getCoreCacheHelper());\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, context -> true, Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    assertEquals(0, searcher.count(new DummyQuery()));\n    assertEquals(0, cache.getCacheCount());\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testReaderNotSuitedForCaching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testReaderNotSuitedForCaching().mjava","sourceNew":"  public void testReaderNotSuitedForCaching() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = new DummyDirectoryReader(w.getReader());\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    // don't cache if the reader does not expose a cache helper\n    assertNull(reader.leaves().get(0).reader().getCoreCacheHelper());\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, context -> true);\n    searcher.setQueryCache(cache);\n    assertEquals(0, searcher.count(new DummyQuery()));\n    assertEquals(0, cache.getCacheCount());\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReaderNotSuitedForCaching() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = new DummyDirectoryReader(w.getReader());\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    // don't cache if the reader does not expose a cache helper\n    assertNull(reader.leaves().get(0).reader().getCoreCacheHelper());\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, context -> true, Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    assertEquals(0, searcher.count(new DummyQuery()));\n    assertEquals(0, cache.getCacheCount());\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c9d00c591703058371b3dc36f4957a6f24ca302","date":1527233410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testReaderNotSuitedForCaching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testReaderNotSuitedForCaching().mjava","sourceNew":"  public void testReaderNotSuitedForCaching() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = new DummyDirectoryReader(w.getReader());\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    // don't cache if the reader does not expose a cache helper\n    assertNull(reader.leaves().get(0).reader().getCoreCacheHelper());\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, context -> true);\n    searcher.setQueryCache(cache);\n    assertEquals(0, searcher.count(new DummyQuery()));\n    assertEquals(0, cache.getCacheCount());\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReaderNotSuitedForCaching() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = new DummyDirectoryReader(w.getReader());\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    // don't cache if the reader does not expose a cache helper\n    assertNull(reader.leaves().get(0).reader().getCoreCacheHelper());\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, context -> true);\n    searcher.setQueryCache(cache);\n    assertEquals(0, searcher.count(new DummyQuery()));\n    assertEquals(0, cache.getCacheCount());\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5754bd6f04f13b67e9575f8b226a0303c31c7d5","date":1573506453,"type":3,"author":"ginger","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testReaderNotSuitedForCaching().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testReaderNotSuitedForCaching().mjava","sourceNew":"  public void testReaderNotSuitedForCaching() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = new DummyDirectoryReader(w.getReader());\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    // don't cache if the reader does not expose a cache helper\n    assertNull(reader.leaves().get(0).reader().getCoreCacheHelper());\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, context -> true, Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(cache);\n    assertEquals(0, searcher.count(new DummyQuery()));\n    assertEquals(0, cache.getCacheCount());\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReaderNotSuitedForCaching() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    w.addDocument(new Document());\n    DirectoryReader reader = new DummyDirectoryReader(w.getReader());\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    // don't cache if the reader does not expose a cache helper\n    assertNull(reader.leaves().get(0).reader().getCoreCacheHelper());\n    LRUQueryCache cache = new LRUQueryCache(2, 10000, context -> true);\n    searcher.setQueryCache(cache);\n    assertEquals(0, searcher.count(new DummyQuery()));\n    assertEquals(0, cache.getCacheCount());\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["d211216c83f01894810543d1c107160a9ae3650b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["d211216c83f01894810543d1c107160a9ae3650b","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["1aad05eeff7818b0833c02ac6b743aa72054963b","789fb338d3c53b4478938723d60f6623e764ca38"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"d211216c83f01894810543d1c107160a9ae3650b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"789fb338d3c53b4478938723d60f6623e764ca38":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"]},"commit2Childs":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","789fb338d3c53b4478938723d60f6623e764ca38"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"d211216c83f01894810543d1c107160a9ae3650b":["c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b"],"789fb338d3c53b4478938723d60f6623e764ca38":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d211216c83f01894810543d1c107160a9ae3650b"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}