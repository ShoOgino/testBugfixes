{"path":"solr/core/src/java/org/apache/solr/handler/component/PivotFacet#getQueuedRefinements(int).mjava","commits":[{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacet#getQueuedRefinements(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * An immutable List of the {@link PivotFacetValue}s that need to be\n   * refined for this pivot.  Once these refinements have been processed, \n   * the caller should clear them using {@link #removeAllRefinementsForShard}\n   *\n   * @see #addRefinement\n   * @see #removeAllRefinementsForShard\n   * @return a list of the values to refine, or an empty list.\n   */\n  public List<PivotFacetValue> getQueuedRefinements(int shardNumber) {\n    List<PivotFacetValue> raw = queuedRefinements.get(shardNumber);\n    if (null == raw) {\n      raw = Collections.<PivotFacetValue>emptyList();\n    }\n    return Collections.<PivotFacetValue>unmodifiableList(raw);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c169312e8f621502de0661c48a43e492983cd28a","date":1423728604,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacet#getQueuedRefinements(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacet#getQueuedRefinements(int).mjava","sourceNew":"  /**\n   * An immutable List of the {@link PivotFacetValue}s that need to be\n   * refined for this pivot.  Once these refinements have been processed, \n   * the caller should clear them using {@link #removeAllRefinementsForShard}\n   *\n   * @see #addRefinement\n   * @see #removeAllRefinementsForShard\n   * @return a list of the values to refine, or an empty list.\n   */\n  public List<PivotFacetValue> getQueuedRefinements(int shardNumber) {\n    List<PivotFacetValue> raw = queuedRefinements.get(shardNumber);\n    if (null == raw) {\n      raw = Collections.<PivotFacetValue>emptyList();\n    }\n    return Collections.unmodifiableList(raw);\n  }\n\n","sourceOld":"  /**\n   * An immutable List of the {@link PivotFacetValue}s that need to be\n   * refined for this pivot.  Once these refinements have been processed, \n   * the caller should clear them using {@link #removeAllRefinementsForShard}\n   *\n   * @see #addRefinement\n   * @see #removeAllRefinementsForShard\n   * @return a list of the values to refine, or an empty list.\n   */\n  public List<PivotFacetValue> getQueuedRefinements(int shardNumber) {\n    List<PivotFacetValue> raw = queuedRefinements.get(shardNumber);\n    if (null == raw) {\n      raw = Collections.<PivotFacetValue>emptyList();\n    }\n    return Collections.<PivotFacetValue>unmodifiableList(raw);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c169312e8f621502de0661c48a43e492983cd28a":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c169312e8f621502de0661c48a43e492983cd28a"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["c169312e8f621502de0661c48a43e492983cd28a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"c169312e8f621502de0661c48a43e492983cd28a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}