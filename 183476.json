{"path":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#verifyZKStructure(Options,ArgumentParser).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#verifyZKStructure(Options,ArgumentParser).mjava","pathOld":"/dev/null","sourceNew":"  private static void verifyZKStructure(Options opts, ArgumentParser parser) throws ArgumentParserException {\n    if (opts.zkHost != null) {\n      assert opts.collection != null;\n      ZooKeeperInspector zki = new ZooKeeperInspector();\n      try {\n        opts.shardUrls = zki.extractShardUrls(opts.zkHost, opts.collection);\n      } catch (Exception e) {\n        LOG.debug(\"Cannot extract SolrCloud shard URLs from ZooKeeper\", e);\n        throw new ArgumentParserException(e, parser);\n      }\n      assert opts.shardUrls != null;\n      if (opts.shardUrls.size() == 0) {\n        throw new ArgumentParserException(\"--zk-host requires ZooKeeper \" + opts.zkHost\n          + \" to contain at least one SolrCore for collection: \" + opts.collection, parser);\n      }\n      opts.shards = opts.shardUrls.size();\n      LOG.debug(\"Using SolrCloud shard URLs: {}\", opts.shardUrls);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#verifyZKStructure(Options,ArgumentParser).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#verifyZKStructure(Options,ArgumentParser).mjava","sourceNew":"  private static void verifyZKStructure(Options opts, ArgumentParser parser) throws ArgumentParserException {\n    if (opts.zkHost != null) {\n      assert opts.collection != null;\n      ZooKeeperInspector zki = new ZooKeeperInspector();\n      try {\n        opts.shardUrls = zki.extractShardUrls(opts.zkHost, opts.collection);\n      } catch (Exception e) {\n        LOG.debug(\"Cannot extract SolrCloud shard URLs from ZooKeeper\", e);\n        throw new ArgumentParserException(e, parser);\n      }\n      assert opts.shardUrls != null;\n      if (opts.shardUrls.size() == 0) {\n        throw new ArgumentParserException(\"--zk-host requires ZooKeeper \" + opts.zkHost\n          + \" to contain at least one SolrCore for collection: \" + opts.collection, parser);\n      }\n      opts.shards = opts.shardUrls.size();\n      LOG.debug(\"Using SolrCloud shard URLs: {}\", opts.shardUrls);\n    }\n  }\n\n","sourceOld":"  private static void verifyZKStructure(Options opts, ArgumentParser parser) throws ArgumentParserException {\n    if (opts.zkHost != null) {\n      assert opts.collection != null;\n      ZooKeeperInspector zki = new ZooKeeperInspector();\n      try {\n        opts.shardUrls = zki.extractShardUrls(opts.zkHost, opts.collection);\n      } catch (Exception e) {\n        LOG.debug(\"Cannot extract SolrCloud shard URLs from ZooKeeper\", e);\n        throw new ArgumentParserException(e, parser);\n      }\n      assert opts.shardUrls != null;\n      if (opts.shardUrls.size() == 0) {\n        throw new ArgumentParserException(\"--zk-host requires ZooKeeper \" + opts.zkHost\n          + \" to contain at least one SolrCore for collection: \" + opts.collection, parser);\n      }\n      opts.shards = opts.shardUrls.size();\n      LOG.debug(\"Using SolrCloud shard URLs: {}\", opts.shardUrls);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}