{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","pathOld":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","sourceNew":"\t/**\n\t * Highlights terms in the  text , extracting the most relevant sections\n\t * and concatenating the chosen fragments with a separator (typically \"...\").\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned in order as \"separator\" delimited strings.\n\t *\n\t * @param text        text to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @param separator  the separator used to intersperse the document fragments (typically \"...\")\n\t *\n\t * @return highlighted text\n\t */\n\tpublic final String getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments,\n\t\tString separator)\n\t\tthrows IOException\n\t{\n\t\tString sections[] =\tgetBestFragments(tokenStream,text, maxNumFragments);\n\t\tStringBuffer result = new StringBuffer();\n\t\tfor (int i = 0; i < sections.length; i++)\n\t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tresult.append(separator);\n\t\t\t}\n\t\t\tresult.append(sections[i]);\n\t\t}\n\t\treturn result.toString();\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights terms in the  text , extracting the most relevant sections\n\t * and concatenating the chosen fragments with a separator (typically \"...\").\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned in order as \"separator\" delimited strings.\n\t *\n\t * @param text        text to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @param separator  the separator used to intersperse the document fragments (typically \"...\")\n\t *\n\t * @return highlighted text\n\t */\n\tpublic final String getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments,\n\t\tString separator)\n\t\tthrows IOException\n\t{\n\t\tString sections[] =\tgetBestFragments(tokenStream,text, maxNumFragments);\n\t\tStringBuffer result = new StringBuffer();\n\t\tfor (int i = 0; i < sections.length; i++)\n\t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tresult.append(separator);\n\t\t\t}\n\t\t\tresult.append(sections[i]);\n\t\t}\n\t\treturn result.toString();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf4dbfaec317df80ca6f412ce1b94b337b581e17","date":1238022314,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","sourceNew":"\t/**\n\t * Highlights terms in the  text , extracting the most relevant sections\n\t * and concatenating the chosen fragments with a separator (typically \"...\").\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned in order as \"separator\" delimited strings.\n\t *\n\t * @param text        text to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @param separator  the separator used to intersperse the document fragments (typically \"...\")\n\t *\n\t * @return highlighted text\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments,\n\t\tString separator)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tString sections[] =\tgetBestFragments(tokenStream,text, maxNumFragments);\n\t\tStringBuffer result = new StringBuffer();\n\t\tfor (int i = 0; i < sections.length; i++)\n\t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tresult.append(separator);\n\t\t\t}\n\t\t\tresult.append(sections[i]);\n\t\t}\n\t\treturn result.toString();\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights terms in the  text , extracting the most relevant sections\n\t * and concatenating the chosen fragments with a separator (typically \"...\").\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned in order as \"separator\" delimited strings.\n\t *\n\t * @param text        text to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @param separator  the separator used to intersperse the document fragments (typically \"...\")\n\t *\n\t * @return highlighted text\n\t */\n\tpublic final String getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments,\n\t\tString separator)\n\t\tthrows IOException\n\t{\n\t\tString sections[] =\tgetBestFragments(tokenStream,text, maxNumFragments);\n\t\tStringBuffer result = new StringBuffer();\n\t\tfor (int i = 0; i < sections.length; i++)\n\t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tresult.append(separator);\n\t\t\t}\n\t\t\tresult.append(sections[i]);\n\t\t}\n\t\treturn result.toString();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","sourceNew":"\t/**\n\t * Highlights terms in the  text , extracting the most relevant sections\n\t * and concatenating the chosen fragments with a separator (typically \"...\").\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned in order as \"separator\" delimited strings.\n\t *\n\t * @param text        text to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @param separator  the separator used to intersperse the document fragments (typically \"...\")\n\t *\n\t * @return highlighted text\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments,\n\t\tString separator)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tString sections[] =\tgetBestFragments(tokenStream,text, maxNumFragments);\n\t\tStringBuilder result = new StringBuilder();\n\t\tfor (int i = 0; i < sections.length; i++)\n\t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tresult.append(separator);\n\t\t\t}\n\t\t\tresult.append(sections[i]);\n\t\t}\n\t\treturn result.toString();\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights terms in the  text , extracting the most relevant sections\n\t * and concatenating the chosen fragments with a separator (typically \"...\").\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned in order as \"separator\" delimited strings.\n\t *\n\t * @param text        text to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @param separator  the separator used to intersperse the document fragments (typically \"...\")\n\t *\n\t * @return highlighted text\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments,\n\t\tString separator)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tString sections[] =\tgetBestFragments(tokenStream,text, maxNumFragments);\n\t\tStringBuffer result = new StringBuffer();\n\t\tfor (int i = 0; i < sections.length; i++)\n\t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tresult.append(separator);\n\t\t\t}\n\t\t\tresult.append(sections[i]);\n\t\t}\n\t\treturn result.toString();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int,String).mjava","sourceNew":"\t/**\n\t * Highlights terms in the  text , extracting the most relevant sections\n\t * and concatenating the chosen fragments with a separator (typically \"...\").\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned in order as \"separator\" delimited strings.\n\t *\n\t * @param text        text to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @param separator  the separator used to intersperse the document fragments (typically \"...\")\n\t *\n\t * @return highlighted text\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments,\n\t\tString separator)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tString sections[] =\tgetBestFragments(tokenStream,text, maxNumFragments);\n\t\tStringBuilder result = new StringBuilder();\n\t\tfor (int i = 0; i < sections.length; i++)\n\t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tresult.append(separator);\n\t\t\t}\n\t\t\tresult.append(sections[i]);\n\t\t}\n\t\treturn result.toString();\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights terms in the  text , extracting the most relevant sections\n\t * and concatenating the chosen fragments with a separator (typically \"...\").\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned in order as \"separator\" delimited strings.\n\t *\n\t * @param text        text to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t * @param separator  the separator used to intersperse the document fragments (typically \"...\")\n\t *\n\t * @return highlighted text\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments,\n\t\tString separator)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tString sections[] =\tgetBestFragments(tokenStream,text, maxNumFragments);\n\t\tStringBuilder result = new StringBuilder();\n\t\tfor (int i = 0; i < sections.length; i++)\n\t\t{\n\t\t\tif (i > 0)\n\t\t\t{\n\t\t\t\tresult.append(separator);\n\t\t\t}\n\t\t\tresult.append(sections[i]);\n\t\t}\n\t\treturn result.toString();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["bf4dbfaec317df80ca6f412ce1b94b337b581e17"],"bf4dbfaec317df80ca6f412ce1b94b337b581e17":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["bf4dbfaec317df80ca6f412ce1b94b337b581e17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bf4dbfaec317df80ca6f412ce1b94b337b581e17":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}