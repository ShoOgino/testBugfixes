{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#intersect(IntersectState,int,byte[],byte[]).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#intersect(IntersectState,int,byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectState,int,byte[],byte[]).mjava","sourceNew":"  private void intersect(IntersectState state,\n                         int nodeID,\n                         byte[] cellMinPacked, byte[] cellMaxPacked)\n    throws IOException {\n\n    /*\n    System.out.println(\"\\nR: intersect nodeID=\" + nodeID);\n    for(int dim=0;dim<numDims;dim++) {\n      System.out.println(\"  dim=\" + dim + \"\\n    cellMin=\" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim) + \"\\n    cellMax=\" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));\n    }\n    */\n\n    Relation r = state.visitor.compare(cellMinPacked, cellMaxPacked);\n\n    if (r == Relation.CELL_OUTSIDE_QUERY) {\n      // This cell is fully outside of the query shape: stop recursing\n      return;\n    } else if (r == Relation.CELL_INSIDE_QUERY) {\n      // This cell is fully inside of the query shape: recursively add all points in this cell without filtering\n      addAll(state, nodeID);\n      return;\n    } else {\n      // The cell crosses the shape boundary, or the cell fully contains the query, so we fall through and do full filtering\n    }\n\n    if (nodeID >= leafNodeOffset) {\n      // TODO: we can assert that the first value here in fact matches what the index claimed?\n\n      int leafID = nodeID - leafNodeOffset;\n      \n      // In the unbalanced case it's possible the left most node only has one child:\n      if (leafID < leafBlockFPs.length) {\n        // Leaf node; scan and filter all points in this block:\n        int count = readDocIDs(state.in, leafBlockFPs[leafID], state.scratchDocIDs);\n\n        // Again, this time reading values and checking with the visitor\n        visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, count, state.visitor);\n      }\n\n    } else {\n      \n      // Non-leaf node: recurse on the split left and right nodes\n\n      int address = nodeID * bytesPerIndexEntry;\n      int splitDim;\n      if (numDims == 1) {\n        splitDim = 0;\n      } else {\n        splitDim = splitPackedValues[address++] & 0xff;\n      }\n      \n      assert splitDim < numDims;\n\n      // TODO: can we alloc & reuse this up front?\n\n      byte[] splitPackedValue = new byte[packedBytesLength];\n\n      // Recurse on left sub-tree:\n      System.arraycopy(cellMaxPacked, 0, splitPackedValue, 0, packedBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      intersect(state,\n                2*nodeID,\n                cellMinPacked, splitPackedValue);\n\n      // Recurse on right sub-tree:\n      System.arraycopy(cellMinPacked, 0, splitPackedValue, 0, packedBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      intersect(state,\n                2*nodeID+1,\n                splitPackedValue, cellMaxPacked);\n    }\n  }\n\n","sourceOld":"  private void intersect(IntersectState state,\n                         int nodeID,\n                         byte[] cellMinPacked, byte[] cellMaxPacked)\n    throws IOException {\n\n    /*\n    System.out.println(\"\\nR: intersect nodeID=\" + nodeID);\n    for(int dim=0;dim<numDims;dim++) {\n      System.out.println(\"  dim=\" + dim + \"\\n    cellMin=\" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim) + \"\\n    cellMax=\" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));\n    }\n    */\n\n    Relation r = state.visitor.compare(cellMinPacked, cellMaxPacked);\n\n    if (r == Relation.CELL_OUTSIDE_QUERY) {\n      // This cell is fully outside of the query shape: stop recursing\n      return;\n    } else if (r == Relation.CELL_INSIDE_QUERY) {\n      // This cell is fully inside of the query shape: recursively add all points in this cell without filtering\n      addAll(state, nodeID);\n      return;\n    } else {\n      // The cell crosses the shape boundary, or the cell fully contains the query, so we fall through and do full filtering\n    }\n\n    if (nodeID >= leafNodeOffset) {\n      // TODO: we can assert that the first value here in fact matches what the index claimed?\n\n      int leafID = nodeID - leafNodeOffset;\n      \n      // In the unbalanced case it's possible the left most node only has one child:\n      if (leafID < leafBlockFPs.length) {\n        // Leaf node; scan and filter all points in this block:\n        int count = readDocIDs(state.in, leafBlockFPs[leafID], state.scratchDocIDs);\n\n        // Again, this time reading values and checking with the visitor\n        visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, count, state.visitor);\n      }\n\n    } else {\n      \n      // Non-leaf node: recurse on the split left and right nodes\n\n      int address = nodeID * bytesPerIndexEntry;\n      int splitDim;\n      if (numDims == 1) {\n        splitDim = 0;\n        if (version < BKDWriter.VERSION_IMPLICIT_SPLIT_DIM_1D) {\n          // skip over wastefully encoded 0 splitDim:\n          assert splitPackedValues[address] == 0;\n          address++;\n        }\n      } else {\n        splitDim = splitPackedValues[address++] & 0xff;\n      }\n      \n      assert splitDim < numDims;\n\n      // TODO: can we alloc & reuse this up front?\n\n      byte[] splitPackedValue = new byte[packedBytesLength];\n\n      // Recurse on left sub-tree:\n      System.arraycopy(cellMaxPacked, 0, splitPackedValue, 0, packedBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      intersect(state,\n                2*nodeID,\n                cellMinPacked, splitPackedValue);\n\n      // Recurse on right sub-tree:\n      System.arraycopy(cellMinPacked, 0, splitPackedValue, 0, packedBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      intersect(state,\n                2*nodeID+1,\n                splitPackedValue, cellMaxPacked);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#intersect(IntersectState,int,byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#intersect(IntersectState,int,byte[],byte[]).mjava","sourceNew":"  private void intersect(IntersectState state,\n                         int nodeID,\n                         byte[] cellMinPacked, byte[] cellMaxPacked)\n    throws IOException {\n\n    /*\n    System.out.println(\"\\nR: intersect nodeID=\" + nodeID);\n    for(int dim=0;dim<numDims;dim++) {\n      System.out.println(\"  dim=\" + dim + \"\\n    cellMin=\" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim) + \"\\n    cellMax=\" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));\n    }\n    */\n\n    Relation r = state.visitor.compare(cellMinPacked, cellMaxPacked);\n\n    if (r == Relation.CELL_OUTSIDE_QUERY) {\n      // This cell is fully outside of the query shape: stop recursing\n      return;\n    } else if (r == Relation.CELL_INSIDE_QUERY) {\n      // This cell is fully inside of the query shape: recursively add all points in this cell without filtering\n      addAll(state, nodeID);\n      return;\n    } else {\n      // The cell crosses the shape boundary, or the cell fully contains the query, so we fall through and do full filtering\n    }\n\n    if (nodeID >= leafNodeOffset) {\n      // TODO: we can assert that the first value here in fact matches what the index claimed?\n\n      int leafID = nodeID - leafNodeOffset;\n      \n      // In the unbalanced case it's possible the left most node only has one child:\n      if (leafID < leafBlockFPs.length) {\n        // Leaf node; scan and filter all points in this block:\n        int count = readDocIDs(state.in, leafBlockFPs[leafID], state.scratchDocIDs);\n\n        // Again, this time reading values and checking with the visitor\n        visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, count, state.visitor);\n      }\n\n    } else {\n      \n      // Non-leaf node: recurse on the split left and right nodes\n\n      int address = nodeID * bytesPerIndexEntry;\n      int splitDim;\n      if (numDims == 1) {\n        splitDim = 0;\n      } else {\n        splitDim = splitPackedValues[address++] & 0xff;\n      }\n      \n      assert splitDim < numDims;\n\n      // TODO: can we alloc & reuse this up front?\n\n      byte[] splitPackedValue = new byte[packedBytesLength];\n\n      // Recurse on left sub-tree:\n      System.arraycopy(cellMaxPacked, 0, splitPackedValue, 0, packedBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      intersect(state,\n                2*nodeID,\n                cellMinPacked, splitPackedValue);\n\n      // Recurse on right sub-tree:\n      System.arraycopy(cellMinPacked, 0, splitPackedValue, 0, packedBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      intersect(state,\n                2*nodeID+1,\n                splitPackedValue, cellMaxPacked);\n    }\n  }\n\n","sourceOld":"  private void intersect(IntersectState state,\n                         int nodeID,\n                         byte[] cellMinPacked, byte[] cellMaxPacked)\n    throws IOException {\n\n    /*\n    System.out.println(\"\\nR: intersect nodeID=\" + nodeID);\n    for(int dim=0;dim<numDims;dim++) {\n      System.out.println(\"  dim=\" + dim + \"\\n    cellMin=\" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim) + \"\\n    cellMax=\" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));\n    }\n    */\n\n    Relation r = state.visitor.compare(cellMinPacked, cellMaxPacked);\n\n    if (r == Relation.CELL_OUTSIDE_QUERY) {\n      // This cell is fully outside of the query shape: stop recursing\n      return;\n    } else if (r == Relation.CELL_INSIDE_QUERY) {\n      // This cell is fully inside of the query shape: recursively add all points in this cell without filtering\n      addAll(state, nodeID);\n      return;\n    } else {\n      // The cell crosses the shape boundary, or the cell fully contains the query, so we fall through and do full filtering\n    }\n\n    if (nodeID >= leafNodeOffset) {\n      // TODO: we can assert that the first value here in fact matches what the index claimed?\n\n      int leafID = nodeID - leafNodeOffset;\n      \n      // In the unbalanced case it's possible the left most node only has one child:\n      if (leafID < leafBlockFPs.length) {\n        // Leaf node; scan and filter all points in this block:\n        int count = readDocIDs(state.in, leafBlockFPs[leafID], state.scratchDocIDs);\n\n        // Again, this time reading values and checking with the visitor\n        visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, count, state.visitor);\n      }\n\n    } else {\n      \n      // Non-leaf node: recurse on the split left and right nodes\n\n      int address = nodeID * bytesPerIndexEntry;\n      int splitDim;\n      if (numDims == 1) {\n        splitDim = 0;\n        if (version < BKDWriter.VERSION_IMPLICIT_SPLIT_DIM_1D) {\n          // skip over wastefully encoded 0 splitDim:\n          assert splitPackedValues[address] == 0;\n          address++;\n        }\n      } else {\n        splitDim = splitPackedValues[address++] & 0xff;\n      }\n      \n      assert splitDim < numDims;\n\n      // TODO: can we alloc & reuse this up front?\n\n      byte[] splitPackedValue = new byte[packedBytesLength];\n\n      // Recurse on left sub-tree:\n      System.arraycopy(cellMaxPacked, 0, splitPackedValue, 0, packedBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      intersect(state,\n                2*nodeID,\n                cellMinPacked, splitPackedValue);\n\n      // Recurse on right sub-tree:\n      System.arraycopy(cellMinPacked, 0, splitPackedValue, 0, packedBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      intersect(state,\n                2*nodeID+1,\n                splitPackedValue, cellMaxPacked);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#intersect(IntersectState,int,byte[],byte[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#intersect(IntersectState,int,byte[],byte[]).mjava","sourceNew":"  private void intersect(IntersectState state,\n                         int nodeID,\n                         byte[] cellMinPacked, byte[] cellMaxPacked)\n    throws IOException {\n\n    /*\n    System.out.println(\"\\nR: intersect nodeID=\" + nodeID);\n    for(int dim=0;dim<numDims;dim++) {\n      System.out.println(\"  dim=\" + dim + \"\\n    cellMin=\" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim) + \"\\n    cellMax=\" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));\n    }\n    */\n\n    Relation r = state.visitor.compare(cellMinPacked, cellMaxPacked);\n\n    if (r == Relation.CELL_OUTSIDE_QUERY) {\n      // This cell is fully outside of the query shape: stop recursing\n      return;\n    } else if (r == Relation.CELL_INSIDE_QUERY) {\n      // This cell is fully inside of the query shape: recursively add all points in this cell without filtering\n      addAll(state, nodeID);\n      return;\n    } else {\n      // The cell crosses the shape boundary, or the cell fully contains the query, so we fall through and do full filtering\n    }\n\n    if (nodeID >= leafNodeOffset) {\n      // TODO: we can assert that the first value here in fact matches what the index claimed?\n\n      int leafID = nodeID - leafNodeOffset;\n      \n      // In the unbalanced case it's possible the left most node only has one child:\n      if (leafID < leafBlockFPs.length) {\n        // Leaf node; scan and filter all points in this block:\n        int count = readDocIDs(state.in, leafBlockFPs[leafID], state.scratchDocIDs);\n\n        // Again, this time reading values and checking with the visitor\n        visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, count, state.visitor);\n      }\n\n    } else {\n      \n      // Non-leaf node: recurse on the split left and right nodes\n\n      int address = nodeID * bytesPerIndexEntry;\n      int splitDim;\n      if (numIndexDims == 1) {\n        splitDim = 0;\n      } else {\n        splitDim = splitPackedValues[address++] & 0xff;\n      }\n      \n      assert splitDim < numIndexDims;\n\n      // TODO: can we alloc & reuse this up front?\n\n      byte[] splitPackedValue = new byte[packedIndexBytesLength];\n\n      // Recurse on left sub-tree:\n      System.arraycopy(cellMaxPacked, 0, splitPackedValue, 0, packedIndexBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      intersect(state,\n                2*nodeID,\n                cellMinPacked, splitPackedValue);\n\n      // Recurse on right sub-tree:\n      System.arraycopy(cellMinPacked, 0, splitPackedValue, 0, packedIndexBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      intersect(state,\n                2*nodeID+1,\n                splitPackedValue, cellMaxPacked);\n    }\n  }\n\n","sourceOld":"  private void intersect(IntersectState state,\n                         int nodeID,\n                         byte[] cellMinPacked, byte[] cellMaxPacked)\n    throws IOException {\n\n    /*\n    System.out.println(\"\\nR: intersect nodeID=\" + nodeID);\n    for(int dim=0;dim<numDims;dim++) {\n      System.out.println(\"  dim=\" + dim + \"\\n    cellMin=\" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim) + \"\\n    cellMax=\" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));\n    }\n    */\n\n    Relation r = state.visitor.compare(cellMinPacked, cellMaxPacked);\n\n    if (r == Relation.CELL_OUTSIDE_QUERY) {\n      // This cell is fully outside of the query shape: stop recursing\n      return;\n    } else if (r == Relation.CELL_INSIDE_QUERY) {\n      // This cell is fully inside of the query shape: recursively add all points in this cell without filtering\n      addAll(state, nodeID);\n      return;\n    } else {\n      // The cell crosses the shape boundary, or the cell fully contains the query, so we fall through and do full filtering\n    }\n\n    if (nodeID >= leafNodeOffset) {\n      // TODO: we can assert that the first value here in fact matches what the index claimed?\n\n      int leafID = nodeID - leafNodeOffset;\n      \n      // In the unbalanced case it's possible the left most node only has one child:\n      if (leafID < leafBlockFPs.length) {\n        // Leaf node; scan and filter all points in this block:\n        int count = readDocIDs(state.in, leafBlockFPs[leafID], state.scratchDocIDs);\n\n        // Again, this time reading values and checking with the visitor\n        visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, count, state.visitor);\n      }\n\n    } else {\n      \n      // Non-leaf node: recurse on the split left and right nodes\n\n      int address = nodeID * bytesPerIndexEntry;\n      int splitDim;\n      if (numDims == 1) {\n        splitDim = 0;\n      } else {\n        splitDim = splitPackedValues[address++] & 0xff;\n      }\n      \n      assert splitDim < numDims;\n\n      // TODO: can we alloc & reuse this up front?\n\n      byte[] splitPackedValue = new byte[packedBytesLength];\n\n      // Recurse on left sub-tree:\n      System.arraycopy(cellMaxPacked, 0, splitPackedValue, 0, packedBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      intersect(state,\n                2*nodeID,\n                cellMinPacked, splitPackedValue);\n\n      // Recurse on right sub-tree:\n      System.arraycopy(cellMinPacked, 0, splitPackedValue, 0, packedBytesLength);\n      System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n      intersect(state,\n                2*nodeID+1,\n                splitPackedValue, cellMaxPacked);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f6652c943595e92c187ee904c382863013eae28f":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6652c943595e92c187ee904c382863013eae28f"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["f6652c943595e92c187ee904c382863013eae28f","9856095f7afb5a607bf5e65077615ed91273508c"],"f6652c943595e92c187ee904c382863013eae28f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}