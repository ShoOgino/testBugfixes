{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      try {\n        subReaders[i].docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      try {\n        subReaders[i].docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      try {\n        subReaders[i].docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      try {\n        subReaders[i].docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}