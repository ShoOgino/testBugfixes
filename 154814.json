{"path":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","commits":[{"id":"609b19bb8de96c4e5e338d1d4a0349957522b601","date":1474892114,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected void waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected void waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","sourceNew":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected void waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\n\" + e.getMessage() + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected void waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","sourceNew":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected void waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\n\" + e.getMessage() + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected void waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected void waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\n\" + e.getMessage() + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d050ed4865ce16231c6677303ed720e4a6703f5c","date":1495730236,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","sourceNew":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected void waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        liveNodesLastSeen.set(n);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\n\" + e.getMessage() + \"\\nLive Nodes: \" + Arrays.toString(liveNodesLastSeen.get().toArray()) + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected void waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\n\" + e.getMessage() + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","sourceNew":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected void waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        liveNodesLastSeen.set(n);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\n\" + e.getMessage() + \"\\nLive Nodes: \" + Arrays.toString(liveNodesLastSeen.get().toArray()) + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected void waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\n\" + e.getMessage() + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","sourceNew":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected void waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        liveNodesLastSeen.set(n);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\n\" + e.getMessage() + \"\\nLive Nodes: \" + Arrays.toString(liveNodesLastSeen.get().toArray()) + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected void waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\n\" + e.getMessage() + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb20b0fc832c8504676c4d2fed3548c987adcda8","date":1519819971,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","sourceNew":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected static void waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        liveNodesLastSeen.set(n);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\n\" + e.getMessage() + \"\\nLive Nodes: \" + Arrays.toString(liveNodesLastSeen.get().toArray()) + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","sourceOld":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected void waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        liveNodesLastSeen.set(n);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\n\" + e.getMessage() + \"\\nLive Nodes: \" + Arrays.toString(liveNodesLastSeen.get().toArray()) + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#waitForState(String,String,CollectionStatePredicate).mjava","sourceNew":"  protected static void waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    waitForState(message, collection, predicate, DEFAULT_TIMEOUT, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  /**\n   * Wait for a particular collection state to appear in the cluster client's state reader\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param message     a message to report on failure\n   * @param collection  the collection to watch\n   * @param predicate   a predicate to match against the collection state\n   */\n  protected static void waitForState(String message, String collection, CollectionStatePredicate predicate) {\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();\n    try {\n      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS, (n, c) -> {\n        state.set(c);\n        liveNodesLastSeen.set(n);\n        return predicate.matches(n, c);\n      });\n    } catch (Exception e) {\n      fail(message + \"\\n\" + e.getMessage() + \"\\nLive Nodes: \" + Arrays.toString(liveNodesLastSeen.get().toArray()) + \"\\nLast available state: \" + state.get());\n    }\n  }\n\n","bugFix":["609b19bb8de96c4e5e338d1d4a0349957522b601","d050ed4865ce16231c6677303ed720e4a6703f5c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d050ed4865ce16231c6677303ed720e4a6703f5c":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["1967bed916cc89da82a1c2085f27976da6d08cbd","d050ed4865ce16231c6677303ed720e4a6703f5c"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["eb20b0fc832c8504676c4d2fed3548c987adcda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","609b19bb8de96c4e5e338d1d4a0349957522b601"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eb20b0fc832c8504676c4d2fed3548c987adcda8":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["1967bed916cc89da82a1c2085f27976da6d08cbd","d050ed4865ce16231c6677303ed720e4a6703f5c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"d050ed4865ce16231c6677303ed720e4a6703f5c":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"1967bed916cc89da82a1c2085f27976da6d08cbd":["d050ed4865ce16231c6677303ed720e4a6703f5c","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1967bed916cc89da82a1c2085f27976da6d08cbd","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","609b19bb8de96c4e5e338d1d4a0349957522b601","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"eb20b0fc832c8504676c4d2fed3548c987adcda8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["eb20b0fc832c8504676c4d2fed3548c987adcda8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}