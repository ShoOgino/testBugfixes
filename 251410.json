{"path":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDocValuesRangeSupportsApproximation().mjava","commits":[{"id":"484e80062d7ab2729bc82f0311d6a97dd913961a","date":1424450206,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDocValuesRangeSupportsApproximation().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocValuesRangeSupportsApproximation() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5L));\n    doc.add(new SortedDocValuesField(\"dv2\", toSortableBytes(42L)));\n    iw.addDocument(doc);\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 100L, random().nextBoolean(), random().nextBoolean());\n    Weight w = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    Scorer s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(0L), toSortableBytes(100L), random().nextBoolean(), random().nextBoolean());\n    w = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDocValuesRangeSupportsApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDocValuesRangeSupportsApproximation().mjava","sourceNew":"  public void testDocValuesRangeSupportsApproximation() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5L));\n    doc.add(new SortedDocValuesField(\"dv2\", toSortableBytes(42L)));\n    iw.addDocument(doc);\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 100L, random().nextBoolean(), random().nextBoolean());\n    Weight w = searcher.createNormalizedWeight(q1, true);\n    Scorer s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(0L), toSortableBytes(100L), random().nextBoolean(), random().nextBoolean());\n    w = searcher.createNormalizedWeight(q2, true);\n    s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesRangeSupportsApproximation() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5L));\n    doc.add(new SortedDocValuesField(\"dv2\", toSortableBytes(42L)));\n    iw.addDocument(doc);\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 100L, random().nextBoolean(), random().nextBoolean());\n    Weight w = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    Scorer s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(0L), toSortableBytes(100L), random().nextBoolean(), random().nextBoolean());\n    w = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDocValuesRangeSupportsApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDocValuesRangeSupportsApproximation().mjava","sourceNew":"  public void testDocValuesRangeSupportsApproximation() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5L));\n    doc.add(new SortedDocValuesField(\"dv2\", toSortableBytes(42L)));\n    iw.addDocument(doc);\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 100L, random().nextBoolean(), random().nextBoolean());\n    Weight w = searcher.createNormalizedWeight(q1, true);\n    Scorer s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(0L), toSortableBytes(100L), random().nextBoolean(), random().nextBoolean());\n    w = searcher.createNormalizedWeight(q2, true);\n    s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesRangeSupportsApproximation() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5L));\n    doc.add(new SortedDocValuesField(\"dv2\", toSortableBytes(42L)));\n    iw.addDocument(doc);\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 100L, random().nextBoolean(), random().nextBoolean());\n    Weight w = searcher.createNormalizedWeight(q1, random().nextBoolean());\n    Scorer s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(0L), toSortableBytes(100L), random().nextBoolean(), random().nextBoolean());\n    w = searcher.createNormalizedWeight(q2, random().nextBoolean());\n    s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDocValuesRangeSupportsApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDocValuesRangeSupportsApproximation().mjava","sourceNew":"  public void testDocValuesRangeSupportsApproximation() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5L));\n    doc.add(new SortedDocValuesField(\"dv2\", toSortableBytes(42L)));\n    iw.addDocument(doc);\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 100L, random().nextBoolean(), random().nextBoolean());\n    Weight w = searcher.createNormalizedWeight(q1, true);\n    Scorer s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(0L), toSortableBytes(100L), random().nextBoolean(), random().nextBoolean());\n    w = searcher.createNormalizedWeight(q2, true);\n    s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesRangeSupportsApproximation() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv1\", 5L));\n    doc.add(new SortedDocValuesField(\"dv2\", toSortableBytes(42L)));\n    iw.addDocument(doc);\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 100L, random().nextBoolean(), random().nextBoolean());\n    Weight w = searcher.createNormalizedWeight(q1, true);\n    Scorer s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(0L), toSortableBytes(100L), random().nextBoolean(), random().nextBoolean());\n    w = searcher.createNormalizedWeight(q2, true);\n    s = w.scorer(ctx, null);\n    assertNotNull(s.asTwoPhaseIterator());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["484e80062d7ab2729bc82f0311d6a97dd913961a","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fb0efe75e5c6021561f115dfe334b74786364ba":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fb0efe75e5c6021561f115dfe334b74786364ba"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"484e80062d7ab2729bc82f0311d6a97dd913961a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9fb0efe75e5c6021561f115dfe334b74786364ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}