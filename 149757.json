{"path":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PassageFormatter#format(Passage[],String).mjava","commits":[{"id":"ffabe030a2b84ad50adb7265da07ee78f1c58f6a","date":1355239263,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PassageFormatter#format(Passage[],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @return formatted highlight\n   */\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if its the first one, or if its connected.\n      if (passage.startOffset > pos && pos > 0) {\n        sb.append(\"... \");\n      }\n      pos = passage.startOffset;\n      for (int i = 0; i < passage.numMatches; i++) {\n        int start = passage.matchStarts[i];\n        int end = passage.matchEnds[i];\n        // its possible to have overlapping terms\n        if (start > pos) {\n          sb.append(content.substring(pos, start));\n        }\n        if (end > pos) {\n          sb.append(\"<b>\");\n          sb.append(content.substring(Math.max(pos, start), end));\n          sb.append(\"</b>\");\n          pos = end;\n        }\n      }\n      // its possible a \"term\" from the analyzer could span a sentence boundary.\n      sb.append(content.substring(pos, Math.max(pos, passage.endOffset)));\n      pos = passage.endOffset;\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bb94551de83b33535d086e8d4222fa6d0c4cfc0","date":1357181547,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PassageFormatter#format(Passage[],String).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PassageFormatter#format(Passage[],String).mjava","sourceNew":"  /**\n   * Formats the top <code>passages</code> from <code>content</code>\n   * into a human-readable text snippet.\n   * \n   * @param passages top-N passages for the field. Note these are sorted in\n   *        the order that they appear in the document for convenience.\n   * @param content content for the field.\n   * @return formatted highlight\n   */\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if its the first one, or if its connected.\n      if (passage.startOffset > pos && pos > 0) {\n        sb.append(\"... \");\n      }\n      pos = passage.startOffset;\n      for (int i = 0; i < passage.numMatches; i++) {\n        int start = passage.matchStarts[i];\n        int end = passage.matchEnds[i];\n        // its possible to have overlapping terms\n        if (start > pos) {\n          sb.append(content.substring(pos, start));\n        }\n        if (end > pos) {\n          sb.append(\"<b>\");\n          sb.append(content.substring(Math.max(pos, start), end));\n          sb.append(\"</b>\");\n          pos = end;\n        }\n      }\n      // its possible a \"term\" from the analyzer could span a sentence boundary.\n      sb.append(content.substring(pos, Math.max(pos, passage.endOffset)));\n      pos = passage.endOffset;\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * @return formatted highlight\n   */\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if its the first one, or if its connected.\n      if (passage.startOffset > pos && pos > 0) {\n        sb.append(\"... \");\n      }\n      pos = passage.startOffset;\n      for (int i = 0; i < passage.numMatches; i++) {\n        int start = passage.matchStarts[i];\n        int end = passage.matchEnds[i];\n        // its possible to have overlapping terms\n        if (start > pos) {\n          sb.append(content.substring(pos, start));\n        }\n        if (end > pos) {\n          sb.append(\"<b>\");\n          sb.append(content.substring(Math.max(pos, start), end));\n          sb.append(\"</b>\");\n          pos = end;\n        }\n      }\n      // its possible a \"term\" from the analyzer could span a sentence boundary.\n      sb.append(content.substring(pos, Math.max(pos, passage.endOffset)));\n      pos = passage.endOffset;\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b3d16cba9355e2e97962eb1c441bbd0b6735c15","date":1357426290,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PassageFormatter#format(Passage[],String).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PassageFormatter#format(Passage[],String).mjava","sourceNew":"  /**\n   * Formats the top <code>passages</code> from <code>content</code>\n   * into a human-readable text snippet.\n   * \n   * @param passages top-N passages for the field. Note these are sorted in\n   *        the order that they appear in the document for convenience.\n   * @param content content for the field.\n   * @return formatted highlight\n   */\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if its the first one, or if its connected.\n      if (passage.startOffset > pos && pos > 0) {\n        sb.append(ellipsis);\n      }\n      pos = passage.startOffset;\n      for (int i = 0; i < passage.numMatches; i++) {\n        int start = passage.matchStarts[i];\n        int end = passage.matchEnds[i];\n        // its possible to have overlapping terms\n        if (start > pos) {\n          sb.append(content.substring(pos, start));\n        }\n        if (end > pos) {\n          sb.append(preTag);\n          sb.append(content.substring(Math.max(pos, start), end));\n          sb.append(postTag);\n          pos = end;\n        }\n      }\n      // its possible a \"term\" from the analyzer could span a sentence boundary.\n      sb.append(content.substring(pos, Math.max(pos, passage.endOffset)));\n      pos = passage.endOffset;\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Formats the top <code>passages</code> from <code>content</code>\n   * into a human-readable text snippet.\n   * \n   * @param passages top-N passages for the field. Note these are sorted in\n   *        the order that they appear in the document for convenience.\n   * @param content content for the field.\n   * @return formatted highlight\n   */\n  public String format(Passage passages[], String content) {\n    StringBuilder sb = new StringBuilder();\n    int pos = 0;\n    for (Passage passage : passages) {\n      // don't add ellipsis if its the first one, or if its connected.\n      if (passage.startOffset > pos && pos > 0) {\n        sb.append(\"... \");\n      }\n      pos = passage.startOffset;\n      for (int i = 0; i < passage.numMatches; i++) {\n        int start = passage.matchStarts[i];\n        int end = passage.matchEnds[i];\n        // its possible to have overlapping terms\n        if (start > pos) {\n          sb.append(content.substring(pos, start));\n        }\n        if (end > pos) {\n          sb.append(\"<b>\");\n          sb.append(content.substring(Math.max(pos, start), end));\n          sb.append(\"</b>\");\n          pos = end;\n        }\n      }\n      // its possible a \"term\" from the analyzer could span a sentence boundary.\n      sb.append(content.substring(pos, Math.max(pos, passage.endOffset)));\n      pos = passage.endOffset;\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["8bb94551de83b33535d086e8d4222fa6d0c4cfc0"],"ffabe030a2b84ad50adb7265da07ee78f1c58f6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bb94551de83b33535d086e8d4222fa6d0c4cfc0":["ffabe030a2b84ad50adb7265da07ee78f1c58f6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"]},"commit2Childs":{"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ffabe030a2b84ad50adb7265da07ee78f1c58f6a":["8bb94551de83b33535d086e8d4222fa6d0c4cfc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ffabe030a2b84ad50adb7265da07ee78f1c58f6a"],"8bb94551de83b33535d086e8d4222fa6d0c4cfc0":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}