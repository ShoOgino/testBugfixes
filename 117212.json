{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockLine.Serializer#readLine(DataInput,boolean,BlockLine).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockLine.Serializer#readLine(DataInput,boolean,BlockLine).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Reads the current line.\n     *\n     * @param isIncrementalEncodingSeed Whether the term is a seed of the\n     *                                  incremental encoding. {@code true} for the first and\n     *                                  middle term, {@code false} for other terms.\n     * @param reuse                     A {@link BlockLine} instance to reuse; or null if none.\n     */\n    public BlockLine readLine(DataInput blockInput, boolean isIncrementalEncodingSeed, BlockLine reuse) throws IOException {\n      int termStateRelativeOffset = blockInput.readVInt();\n      return reuse == null ?\n          new BlockLine(readIncrementallyEncodedTerm(blockInput, isIncrementalEncodingSeed, null), termStateRelativeOffset)\n          : reuse.reset(readIncrementallyEncodedTerm(blockInput, isIncrementalEncodingSeed, reuse.termBytes), termStateRelativeOffset);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f6185d883389450f593fb00103d2e89a0b8336","date":1577705030,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockLine.Serializer#readLine(DataInput,boolean,BlockLine).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockLine.Serializer#readLine(DataInput,boolean,BlockLine).mjava","sourceNew":"    /**\n     * Reads the current line.\n     *\n     * @param isIncrementalEncodingSeed Whether the term is a seed of the\n     *                                  incremental encoding. {@code true} for the first and\n     *                                  middle term, {@code false} for other terms.\n     * @param reuse                     A {@link BlockLine} instance to reuse; or null if none.\n     */\n    public BlockLine readLine(DataInput blockInput, boolean isIncrementalEncodingSeed, BlockLine reuse) throws IOException {\n      int termStateRelativeOffset = blockInput.readVInt();\n      if (termStateRelativeOffset < 0) {\n        throw new CorruptIndexException(\"Illegal termStateRelativeOffset= \" + termStateRelativeOffset, blockInput);\n      }\n      return reuse == null ?\n          new BlockLine(readIncrementallyEncodedTerm(blockInput, isIncrementalEncodingSeed, null), termStateRelativeOffset)\n          : reuse.reset(readIncrementallyEncodedTerm(blockInput, isIncrementalEncodingSeed, reuse.termBytes), termStateRelativeOffset);\n    }\n\n","sourceOld":"    /**\n     * Reads the current line.\n     *\n     * @param isIncrementalEncodingSeed Whether the term is a seed of the\n     *                                  incremental encoding. {@code true} for the first and\n     *                                  middle term, {@code false} for other terms.\n     * @param reuse                     A {@link BlockLine} instance to reuse; or null if none.\n     */\n    public BlockLine readLine(DataInput blockInput, boolean isIncrementalEncodingSeed, BlockLine reuse) throws IOException {\n      int termStateRelativeOffset = blockInput.readVInt();\n      return reuse == null ?\n          new BlockLine(readIncrementallyEncodedTerm(blockInput, isIncrementalEncodingSeed, null), termStateRelativeOffset)\n          : reuse.reset(readIncrementallyEncodedTerm(blockInput, isIncrementalEncodingSeed, reuse.termBytes), termStateRelativeOffset);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e478fa10594a2ef9d1ddf7d195020300453c4e","date":1577783287,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockLine.Serializer#readLine(DataInput,boolean,BlockLine).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/BlockLine.Serializer#readLine(DataInput,boolean,BlockLine).mjava","sourceNew":"    /**\n     * Reads the current line.\n     *\n     * @param isIncrementalEncodingSeed Whether the term is a seed of the\n     *                                  incremental encoding. {@code true} for the first and\n     *                                  middle term, {@code false} for other terms.\n     * @param reuse                     A {@link BlockLine} instance to reuse; or null if none.\n     */\n    public BlockLine readLine(DataInput blockInput, boolean isIncrementalEncodingSeed, BlockLine reuse) throws IOException {\n      int termStateRelativeOffset = blockInput.readVInt();\n      if (termStateRelativeOffset < 0) {\n        throw new CorruptIndexException(\"Illegal termStateRelativeOffset= \" + termStateRelativeOffset, blockInput);\n      }\n      return reuse == null ?\n          new BlockLine(readIncrementallyEncodedTerm(blockInput, isIncrementalEncodingSeed, null), termStateRelativeOffset)\n          : reuse.reset(readIncrementallyEncodedTerm(blockInput, isIncrementalEncodingSeed, reuse.termBytes), termStateRelativeOffset);\n    }\n\n","sourceOld":"    /**\n     * Reads the current line.\n     *\n     * @param isIncrementalEncodingSeed Whether the term is a seed of the\n     *                                  incremental encoding. {@code true} for the first and\n     *                                  middle term, {@code false} for other terms.\n     * @param reuse                     A {@link BlockLine} instance to reuse; or null if none.\n     */\n    public BlockLine readLine(DataInput blockInput, boolean isIncrementalEncodingSeed, BlockLine reuse) throws IOException {\n      int termStateRelativeOffset = blockInput.readVInt();\n      return reuse == null ?\n          new BlockLine(readIncrementallyEncodedTerm(blockInput, isIncrementalEncodingSeed, null), termStateRelativeOffset)\n          : reuse.reset(readIncrementallyEncodedTerm(blockInput, isIncrementalEncodingSeed, reuse.termBytes), termStateRelativeOffset);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f6185d883389450f593fb00103d2e89a0b8336":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62e478fa10594a2ef9d1ddf7d195020300453c4e":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","42f6185d883389450f593fb00103d2e89a0b8336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42f6185d883389450f593fb00103d2e89a0b8336"]},"commit2Childs":{"42f6185d883389450f593fb00103d2e89a0b8336":["62e478fa10594a2ef9d1ddf7d195020300453c4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["42f6185d883389450f593fb00103d2e89a0b8336","62e478fa10594a2ef9d1ddf7d195020300453c4e"],"62e478fa10594a2ef9d1ddf7d195020300453c4e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e478fa10594a2ef9d1ddf7d195020300453c4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}