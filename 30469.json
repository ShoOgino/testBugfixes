{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithReader().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithReader().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithReader().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, with reader doing deletes.\n   */\n  public void testKeepLastNDeletionPolicyWithReader() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3*i+1);\n        reader.setNorm(4*i+1, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16*(1+i), hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n      }\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.optimize();\n      // this is a commit\n      writer.close();\n\n      assertEquals(2*(N+2), policy.numOnInit);\n      assertEquals(2*(N+2)-1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(176, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 176;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          if (i > 1) {\n            if (i % 2 == 0) {\n              expectedCount += 1;\n            } else {\n              expectedCount -= 17;\n            }\n          }\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last 5\");\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, with reader doing deletes.\n   */\n  public void testKeepLastNDeletionPolicyWithReader() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3*i+1);\n        reader.setNorm(4*i+1, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16*(1+i), hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n      }\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.optimize();\n      // this is a commit\n      writer.close();\n\n      assertEquals(2*(N+2), policy.numOnInit);\n      assertEquals(2*(N+2)-1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(176, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 176;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          if (i > 1) {\n            if (i % 2 == 0) {\n              expectedCount += 1;\n            } else {\n              expectedCount -= 17;\n            }\n          }\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last 5\");\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithReader().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithReader().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, with reader doing deletes.\n   */\n  public void testKeepLastNDeletionPolicyWithReader() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3*i+1);\n        reader.setNorm(4*i+1, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16*(1+i), hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n      }\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.optimize();\n      // this is a commit\n      writer.close();\n\n      assertEquals(2*(N+1)+1, policy.numOnInit);\n      assertEquals(2*(N+2), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(176, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 176;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          if (i > 1) {\n            if (i % 2 == 0) {\n              expectedCount += 1;\n            } else {\n              expectedCount -= 17;\n            }\n          }\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last 5\");\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, with reader doing deletes.\n   */\n  public void testKeepLastNDeletionPolicyWithReader() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3*i+1);\n        reader.setNorm(4*i+1, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16*(1+i), hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n      }\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.optimize();\n      // this is a commit\n      writer.close();\n\n      assertEquals(2*(N+2), policy.numOnInit);\n      assertEquals(2*(N+2)-1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(176, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 176;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          if (i > 1) {\n            if (i % 2 == 0) {\n              expectedCount += 1;\n            } else {\n              expectedCount -= 17;\n            }\n          }\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last 5\");\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithReader().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithReader().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, with reader doing deletes.\n   */\n  public void testKeepLastNDeletionPolicyWithReader() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3*i+1);\n        reader.setNorm(4*i+1, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16*(1+i), hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n      }\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.optimize();\n      // this is a commit\n      writer.close();\n\n      assertEquals(2*(N+2), policy.numOnInit);\n      assertEquals(2*(N+2)-1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(176, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 176;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          if (i > 1) {\n            if (i % 2 == 0) {\n              expectedCount += 1;\n            } else {\n              expectedCount -= 17;\n            }\n          }\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last 5\");\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, with reader doing deletes.\n   */\n  public void testKeepLastNDeletionPolicyWithReader() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3*i+1);\n        reader.setNorm(4*i+1, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16*(1+i), hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n      }\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.optimize();\n      // this is a commit\n      writer.close();\n\n      assertEquals(2*(N+1)+1, policy.numOnInit);\n      assertEquals(2*(N+2), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(176, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 176;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          if (i > 1) {\n            if (i % 2 == 0) {\n              expectedCount += 1;\n            } else {\n              expectedCount -= 17;\n            }\n          }\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last 5\");\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithReader().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithReader().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, with reader doing deletes.\n   */\n  public void testKeepLastNDeletionPolicyWithReader() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3*i+1);\n        reader.setNorm(4*i+1, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16*(1+i), hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n      }\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.optimize();\n      // this is a commit\n      writer.close();\n\n      assertEquals(2*(N+1)+1, policy.numOnInit);\n      assertEquals(2*(N+2), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(176, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 176;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          if (i > 1) {\n            if (i % 2 == 0) {\n              expectedCount += 1;\n            } else {\n              expectedCount -= 17;\n            }\n          }\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last 5\");\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, with reader doing deletes.\n   */\n  public void testKeepLastNDeletionPolicyWithReader() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3*i+1);\n        reader.setNorm(4*i+1, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16*(1+i), hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n      }\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.optimize();\n      // this is a commit\n      writer.close();\n\n      assertEquals(2*(N+2), policy.numOnInit);\n      assertEquals(2*(N+2)-1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(176, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 176;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          if (i > 1) {\n            if (i % 2 == 0) {\n              expectedCount += 1;\n            } else {\n              expectedCount -= 17;\n            }\n          }\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last 5\");\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithReader().mjava","sourceNew":null,"sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, with reader doing deletes.\n   */\n  public void testKeepLastNDeletionPolicyWithReader() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n        writer.setUseCompoundFile(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3*i+1);\n        reader.setNorm(4*i+1, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16*(1+i), hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n      }\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.optimize();\n      // this is a commit\n      writer.close();\n\n      assertEquals(2*(N+1)+1, policy.numOnInit);\n      assertEquals(2*(N+2), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(176, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 176;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          if (i > 1) {\n            if (i % 2 == 0) {\n              expectedCount += 1;\n            } else {\n              expectedCount -= 17;\n            }\n          }\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last 5\");\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}