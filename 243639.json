{"path":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#processUpdate(Object,UpdateRequest).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#processUpdate(Object,UpdateRequest).mjava","pathOld":"/dev/null","sourceNew":"  private UpdateRequest processUpdate(Object o, UpdateRequest req) {\n\n    // should currently be a List<Oper,Ver,Doc/Id>\n    List entry = (List) o;\n\n    int operationAndFlags = (Integer) entry.get(0);\n    int oper = operationAndFlags & UpdateLog.OPERATION_MASK;\n    long version = (Long) entry.get(1);\n\n    // record the operation in the benchmark timer\n    state.getBenchmarkTimer().incrementCounter(oper);\n\n    switch (oper) {\n      case UpdateLog.ADD: {\n        // the version is already attached to the document\n        SolrInputDocument sdoc = (SolrInputDocument) entry.get(entry.size() - 1);\n        req.add(sdoc);\n        return req;\n      }\n      case UpdateLog.DELETE: {\n        byte[] idBytes = (byte[]) entry.get(2);\n        req.deleteById(new String(idBytes, Charset.forName(\"UTF-8\")));\n        req.setParam(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n        return req;\n      }\n\n      case UpdateLog.DELETE_BY_QUERY: {\n        String query = (String) entry.get(2);\n        req.deleteByQuery(query);\n        req.setParam(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n        return req;\n      }\n\n      case UpdateLog.COMMIT: {\n        return null;\n      }\n\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown Operation! \" + oper);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#processUpdate(Object,UpdateRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#processUpdate(Object,UpdateRequest).mjava","sourceNew":"  private UpdateRequest processUpdate(Object o, UpdateRequest req) {\n\n    // should currently be a List<Oper,Ver,Doc/Id>\n    List entry = (List) o;\n\n    int operationAndFlags = (Integer) entry.get(0);\n    int oper = operationAndFlags & UpdateLog.OPERATION_MASK;\n    long version = (Long) entry.get(1);\n\n    // record the operation in the benchmark timer\n    state.getBenchmarkTimer().incrementCounter(oper);\n\n    switch (oper) {\n      case UpdateLog.ADD: {\n        // the version is already attached to the document\n        SolrInputDocument sdoc = (SolrInputDocument) entry.get(entry.size() - 1);\n        req.add(sdoc);\n        return req;\n      }\n      case UpdateLog.DELETE: {\n        byte[] idBytes = (byte[]) entry.get(2);\n        req.deleteById(new String(idBytes, Charset.forName(\"UTF-8\")));\n        req.setParam(VERSION_FIELD, Long.toString(version));\n        return req;\n      }\n\n      case UpdateLog.DELETE_BY_QUERY: {\n        String query = (String) entry.get(2);\n        req.deleteByQuery(query);\n        req.setParam(VERSION_FIELD, Long.toString(version));\n        return req;\n      }\n\n      case UpdateLog.COMMIT: {\n        return null;\n      }\n\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown Operation! \" + oper);\n    }\n  }\n\n","sourceOld":"  private UpdateRequest processUpdate(Object o, UpdateRequest req) {\n\n    // should currently be a List<Oper,Ver,Doc/Id>\n    List entry = (List) o;\n\n    int operationAndFlags = (Integer) entry.get(0);\n    int oper = operationAndFlags & UpdateLog.OPERATION_MASK;\n    long version = (Long) entry.get(1);\n\n    // record the operation in the benchmark timer\n    state.getBenchmarkTimer().incrementCounter(oper);\n\n    switch (oper) {\n      case UpdateLog.ADD: {\n        // the version is already attached to the document\n        SolrInputDocument sdoc = (SolrInputDocument) entry.get(entry.size() - 1);\n        req.add(sdoc);\n        return req;\n      }\n      case UpdateLog.DELETE: {\n        byte[] idBytes = (byte[]) entry.get(2);\n        req.deleteById(new String(idBytes, Charset.forName(\"UTF-8\")));\n        req.setParam(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n        return req;\n      }\n\n      case UpdateLog.DELETE_BY_QUERY: {\n        String query = (String) entry.get(2);\n        req.deleteByQuery(query);\n        req.setParam(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n        return req;\n      }\n\n      case UpdateLog.COMMIT: {\n        return null;\n      }\n\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown Operation! \" + oper);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#processUpdate(Object,UpdateRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#processUpdate(Object,UpdateRequest).mjava","sourceNew":"  private UpdateRequest processUpdate(Object o, UpdateRequest req) {\n\n    // should currently be a List<Oper,Ver,Doc/Id>\n    List entry = (List) o;\n\n    int operationAndFlags = (Integer) entry.get(0);\n    int oper = operationAndFlags & UpdateLog.OPERATION_MASK;\n    long version = (Long) entry.get(1);\n\n    // record the operation in the benchmark timer\n    state.getBenchmarkTimer().incrementCounter(oper);\n\n    switch (oper) {\n      case UpdateLog.ADD: {\n        // the version is already attached to the document\n        SolrInputDocument sdoc = (SolrInputDocument) entry.get(entry.size() - 1);\n        req.add(sdoc);\n        return req;\n      }\n      case UpdateLog.DELETE: {\n        byte[] idBytes = (byte[]) entry.get(2);\n        req.deleteById(new String(idBytes, Charset.forName(\"UTF-8\")));\n        req.setParam(VERSION_FIELD, Long.toString(version));\n        return req;\n      }\n\n      case UpdateLog.DELETE_BY_QUERY: {\n        String query = (String) entry.get(2);\n        req.deleteByQuery(query);\n        req.setParam(VERSION_FIELD, Long.toString(version));\n        return req;\n      }\n\n      case UpdateLog.COMMIT: {\n        return null;\n      }\n\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown Operation! \" + oper);\n    }\n  }\n\n","sourceOld":"  private UpdateRequest processUpdate(Object o, UpdateRequest req) {\n\n    // should currently be a List<Oper,Ver,Doc/Id>\n    List entry = (List) o;\n\n    int operationAndFlags = (Integer) entry.get(0);\n    int oper = operationAndFlags & UpdateLog.OPERATION_MASK;\n    long version = (Long) entry.get(1);\n\n    // record the operation in the benchmark timer\n    state.getBenchmarkTimer().incrementCounter(oper);\n\n    switch (oper) {\n      case UpdateLog.ADD: {\n        // the version is already attached to the document\n        SolrInputDocument sdoc = (SolrInputDocument) entry.get(entry.size() - 1);\n        req.add(sdoc);\n        return req;\n      }\n      case UpdateLog.DELETE: {\n        byte[] idBytes = (byte[]) entry.get(2);\n        req.deleteById(new String(idBytes, Charset.forName(\"UTF-8\")));\n        req.setParam(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n        return req;\n      }\n\n      case UpdateLog.DELETE_BY_QUERY: {\n        String query = (String) entry.get(2);\n        req.deleteByQuery(query);\n        req.setParam(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n        return req;\n      }\n\n      case UpdateLog.COMMIT: {\n        return null;\n      }\n\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown Operation! \" + oper);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#processUpdate(Object,UpdateRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#processUpdate(Object,UpdateRequest).mjava","sourceNew":"  private UpdateRequest processUpdate(Object o, UpdateRequest req) {\n\n    // should currently be a List<Oper,Ver,Doc/Id>\n    @SuppressWarnings({\"rawtypes\"})\n    List entry = (List) o;\n\n    int operationAndFlags = (Integer) entry.get(0);\n    int oper = operationAndFlags & UpdateLog.OPERATION_MASK;\n    long version = (Long) entry.get(1);\n\n    // record the operation in the benchmark timer\n    state.getBenchmarkTimer().incrementCounter(oper);\n\n    switch (oper) {\n      case UpdateLog.ADD: {\n        // the version is already attached to the document\n        SolrInputDocument sdoc = (SolrInputDocument) entry.get(entry.size() - 1);\n        req.add(sdoc);\n        return req;\n      }\n      case UpdateLog.DELETE: {\n        byte[] idBytes = (byte[]) entry.get(2);\n        req.deleteById(new String(idBytes, Charset.forName(\"UTF-8\")));\n        req.setParam(VERSION_FIELD, Long.toString(version));\n        return req;\n      }\n\n      case UpdateLog.DELETE_BY_QUERY: {\n        String query = (String) entry.get(2);\n        req.deleteByQuery(query);\n        req.setParam(VERSION_FIELD, Long.toString(version));\n        return req;\n      }\n\n      case UpdateLog.COMMIT: {\n        return null;\n      }\n\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown Operation! \" + oper);\n    }\n  }\n\n","sourceOld":"  private UpdateRequest processUpdate(Object o, UpdateRequest req) {\n\n    // should currently be a List<Oper,Ver,Doc/Id>\n    List entry = (List) o;\n\n    int operationAndFlags = (Integer) entry.get(0);\n    int oper = operationAndFlags & UpdateLog.OPERATION_MASK;\n    long version = (Long) entry.get(1);\n\n    // record the operation in the benchmark timer\n    state.getBenchmarkTimer().incrementCounter(oper);\n\n    switch (oper) {\n      case UpdateLog.ADD: {\n        // the version is already attached to the document\n        SolrInputDocument sdoc = (SolrInputDocument) entry.get(entry.size() - 1);\n        req.add(sdoc);\n        return req;\n      }\n      case UpdateLog.DELETE: {\n        byte[] idBytes = (byte[]) entry.get(2);\n        req.deleteById(new String(idBytes, Charset.forName(\"UTF-8\")));\n        req.setParam(VERSION_FIELD, Long.toString(version));\n        return req;\n      }\n\n      case UpdateLog.DELETE_BY_QUERY: {\n        String query = (String) entry.get(2);\n        req.deleteByQuery(query);\n        req.setParam(VERSION_FIELD, Long.toString(version));\n        return req;\n      }\n\n      case UpdateLog.COMMIT: {\n        return null;\n      }\n\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown Operation! \" + oper);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#processUpdate(Object,UpdateRequest).mjava","sourceNew":null,"sourceOld":"  private UpdateRequest processUpdate(Object o, UpdateRequest req) {\n\n    // should currently be a List<Oper,Ver,Doc/Id>\n    @SuppressWarnings({\"rawtypes\"})\n    List entry = (List) o;\n\n    int operationAndFlags = (Integer) entry.get(0);\n    int oper = operationAndFlags & UpdateLog.OPERATION_MASK;\n    long version = (Long) entry.get(1);\n\n    // record the operation in the benchmark timer\n    state.getBenchmarkTimer().incrementCounter(oper);\n\n    switch (oper) {\n      case UpdateLog.ADD: {\n        // the version is already attached to the document\n        SolrInputDocument sdoc = (SolrInputDocument) entry.get(entry.size() - 1);\n        req.add(sdoc);\n        return req;\n      }\n      case UpdateLog.DELETE: {\n        byte[] idBytes = (byte[]) entry.get(2);\n        req.deleteById(new String(idBytes, Charset.forName(\"UTF-8\")));\n        req.setParam(VERSION_FIELD, Long.toString(version));\n        return req;\n      }\n\n      case UpdateLog.DELETE_BY_QUERY: {\n        String query = (String) entry.get(2);\n        req.deleteByQuery(query);\n        req.setParam(VERSION_FIELD, Long.toString(version));\n        return req;\n      }\n\n      case UpdateLog.COMMIT: {\n        return null;\n      }\n\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown Operation! \" + oper);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"86290366cefc1b9d4eced13b430858c4a4c0421d":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}