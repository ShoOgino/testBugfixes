{"path":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int).mjava","commits":[{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int).mjava","sourceNew":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalStateException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalStateException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d17901785875f5d523c1f729cd7898d2ab907c69","date":1419959847,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int,SortingMergePolicy).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int).mjava","sourceNew":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   * @throws IllegalArgumentException if the sort order doesn't allow for early\n   *          termination with the given merge policy.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect, SortingMergePolicy mergePolicy) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalArgumentException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    if (canEarlyTerminate(sort, mergePolicy) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + mergePolicy.getSort());\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n    this.mergePolicy = mergePolicy;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalStateException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int,Sort).mjava","sourceNew":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   * @throws IllegalArgumentException if the sort order doesn't allow for early\n   *          termination with the given merge policy.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalArgumentException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   * @param mergePolicySort\n   *          the sort your {@link SortingMergePolicy} uses\n   * @throws IllegalArgumentException if the sort order doesn't allow for early\n   *          termination with the given merge policy.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect, Sort mergePolicySort) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalArgumentException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    if (canEarlyTerminate(sort, mergePolicySort) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + mergePolicySort);\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n    this.mergePolicySort = mergePolicySort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0345a2d45479f891041f8b3ce351bc975e64ac","date":1462708700,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int).mjava","sourceNew":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   * @throws IllegalArgumentException if the sort order doesn't allow for early\n   *          termination with the given merge policy.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalArgumentException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   * @throws IllegalArgumentException if the sort order doesn't allow for early\n   *          termination with the given merge policy.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalArgumentException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["d17901785875f5d523c1f729cd7898d2ab907c69"],"d17901785875f5d523c1f729cd7898d2ab907c69":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d17901785875f5d523c1f729cd7898d2ab907c69"],"fb0345a2d45479f891041f8b3ce351bc975e64ac":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["fb0345a2d45479f891041f8b3ce351bc975e64ac"],"d17901785875f5d523c1f729cd7898d2ab907c69":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["d17901785875f5d523c1f729cd7898d2ab907c69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fb0345a2d45479f891041f8b3ce351bc975e64ac":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","fb0345a2d45479f891041f8b3ce351bc975e64ac"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}