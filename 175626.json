{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchWithMasterUrl().mjava","commits":[{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":1,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestSnapPullWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestIndexFetchWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // index fetch\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // index fetch from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","sourceOld":"  @Test\n  public void doTestSnapPullWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // snappull\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // snappull from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchWithMasterUrl().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void doTestIndexFetchWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // index fetch\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // index fetch from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71475d88ea48a7d9a847f209667255318b3ea4c7","date":1461758968,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestIndexFetchWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // index fetch\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH+\"?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH;\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // index fetch from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexFetchWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // index fetch\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication\";\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // index fetch from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1aa1c8dde7a7c89bbabb450609b7e49ceba5ebf9","date":1523040621,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestIndexFetchWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // index fetch\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH+\"?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH;\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // index fetch from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexFetchWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // index fetch\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH+\"?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH;\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // index fetch from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa62115b9e45c213699273acb13af242762232e4","date":1523184285,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestIndexFetchWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // index fetch\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH+\"?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH;\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // index fetch from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexFetchWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // index fetch\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH+\"?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH;\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // index fetch from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestIndexFetchWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createAndStartJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // index fetch\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH+\"?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH;\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // index fetch from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexFetchWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // index fetch\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH+\"?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH;\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // index fetch from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","bugFix":["efab8c7286516f937e01cc69275841cfb09d90b9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchWithMasterUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchWithMasterUrl().mjava","sourceNew":"  @Test\n  public void doTestIndexFetchWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createAndStartJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // index fetch\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH+\"?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH;\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // index fetch from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexFetchWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createAndStartJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // index fetch\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH+\"?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH;\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // index fetch from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":4,"author":"Marcus","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchWithMasterUrl().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void doTestIndexFetchWithMasterUrl() throws Exception {\n    //change solrconfig on slave\n    //this has no entry for pollinginterval\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(CONF_DIR + \"solrconfig-slave1.xml\", \"solrconfig.xml\");\n    slaveJetty.stop();\n    slaveJetty = createAndStartJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    slaveClient.deleteByQuery(\"*:*\");\n    slaveClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    masterClient.commit();\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    // index fetch\n    String masterUrl = buildUrl(slaveJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH+\"?command=fetchindex&masterUrl=\";\n    masterUrl += buildUrl(masterJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH;\n    URL url = new URL(masterUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from slave and check if number is equal to master\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // index fetch from the slave to the master\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(slaveClient, \"id\", i, \"name\", \"name = \" + i);\n\n    slaveClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery(nDocs + 3, \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(masterClient, slaveClient);\n    \n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    masterClient.commit();\n    \n    pullFromSlaveToMaster();\n    rQuery((int) slaveQueryResult.getNumFound(), \"*:*\", masterClient);\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    pullFromSlaveToMaster();\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(nDocs + 3, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, slaveQueryResult.getNumFound());\n    //compare results\n    masterQueryRsp = rQuery(nDocs + 3, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n    \n    NamedList<Object> details = getDetails(masterClient);\n   \n    details = getDetails(slaveClient);\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["e98520789adb1d5ad05afb4956eca0944a929688"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa62115b9e45c213699273acb13af242762232e4":["71475d88ea48a7d9a847f209667255318b3ea4c7","1aa1c8dde7a7c89bbabb450609b7e49ceba5ebf9"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["aa62115b9e45c213699273acb13af242762232e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1aa1c8dde7a7c89bbabb450609b7e49ceba5ebf9":["71475d88ea48a7d9a847f209667255318b3ea4c7"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"e98520789adb1d5ad05afb4956eca0944a929688":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","71475d88ea48a7d9a847f209667255318b3ea4c7"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aa62115b9e45c213699273acb13af242762232e4":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"1aa1c8dde7a7c89bbabb450609b7e49ceba5ebf9":["aa62115b9e45c213699273acb13af242762232e4"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["aa62115b9e45c213699273acb13af242762232e4","1aa1c8dde7a7c89bbabb450609b7e49ceba5ebf9"],"e98520789adb1d5ad05afb4956eca0944a929688":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}