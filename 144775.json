{"path":"lucene/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","sourceNew":"  private void checkTokens(TokenStream stream) throws IOException {\n    int count = 0;\n    \n    TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    assertNotNull(termAtt);\n    while (stream.incrementToken()) {\n      assertTrue(count < tokens.length);\n      assertEquals(tokens[count], termAtt.term());\n      count++;\n    }\n    \n    assertEquals(tokens.length, count);\n  }\n\n","sourceOld":"  private void checkTokens(TokenStream stream) throws IOException {\n    int count = 0;\n    \n    TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    assertNotNull(termAtt);\n    while (stream.incrementToken()) {\n      assertTrue(count < tokens.length);\n      assertEquals(tokens[count], termAtt.term());\n      count++;\n    }\n    \n    assertEquals(tokens.length, count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a775c547c3519b47efd41c09cb47100ddb9604c7","date":1270914087,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","sourceNew":"  private void checkTokens(TokenStream stream) throws IOException {\n    int count = 0;\n    \n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    while (stream.incrementToken()) {\n      assertTrue(count < tokens.length);\n      assertEquals(tokens[count], termAtt.toString());\n      count++;\n    }\n    \n    assertEquals(tokens.length, count);\n  }\n\n","sourceOld":"  private void checkTokens(TokenStream stream) throws IOException {\n    int count = 0;\n    \n    TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    assertNotNull(termAtt);\n    while (stream.incrementToken()) {\n      assertTrue(count < tokens.length);\n      assertEquals(tokens[count], termAtt.term());\n      count++;\n    }\n    \n    assertEquals(tokens.length, count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","sourceNew":"  private void checkTokens(TokenStream stream) throws IOException {\n    int count = 0;\n    \n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    while (stream.incrementToken()) {\n      assertTrue(count < tokens.length);\n      assertEquals(tokens[count], termAtt.toString());\n      count++;\n    }\n    \n    assertEquals(tokens.length, count);\n  }\n\n","sourceOld":"  private void checkTokens(TokenStream stream) throws IOException {\n    int count = 0;\n    \n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    while (stream.incrementToken()) {\n      assertTrue(count < tokens.length);\n      assertEquals(tokens[count], termAtt.toString());\n      count++;\n    }\n    \n    assertEquals(tokens.length, count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a775c547c3519b47efd41c09cb47100ddb9604c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a775c547c3519b47efd41c09cb47100ddb9604c7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a775c547c3519b47efd41c09cb47100ddb9604c7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a775c547c3519b47efd41c09cb47100ddb9604c7"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}