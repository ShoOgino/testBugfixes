{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/MoveReplicaCmd#moveReplica(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","commits":[{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MoveReplicaCmd#moveReplica(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void moveReplica(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    if (log.isDebugEnabled()) {\n      log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    }\n    ocmh.checkRequired(message, COLLECTION_PROP, CollectionParams.TARGET_NODE);\n    String extCollection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(CollectionParams.TARGET_NODE);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    boolean inPlaceMove = message.getBool(IN_PLACE_MOVE, true);\n    int timeout = message.getInt(TIMEOUT, 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collection;\n    if (followAliases) {\n      collection = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollection);\n    } else {\n      collection = extCollection;\n    }\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (!clusterState.getLiveNodes().contains(targetNode)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target node: \" + targetNode + \" not in live nodes: \" + clusterState.getLiveNodes());\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      String sourceNode = message.getStr(CollectionParams.SOURCE_NODE, message.getStr(CollectionParams.FROM_NODE));\n      if (sourceNode == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'\" + CollectionParams.SOURCE_NODE +\n            \" or '\" + CollectionParams.FROM_NODE + \"' is a required param\");\n      }\n      String shardId = message.getStr(SHARD_ID_PROP);\n      if (shardId == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'\" + SHARD_ID_PROP + \"' is a required param\");\n      }\n      Slice slice = coll.getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas(r -> sourceNode.equals(r.getNodeName())));\n      if (sliceReplicas.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + sourceNode + \" does not have any replica belonging to shard: \" + shardId);\n      }\n      Collections.shuffle(sliceReplicas, OverseerCollectionMessageHandler.RANDOM);\n      replica = sliceReplicas.iterator().next();\n    }\n\n    if (coll.getStr(CollectionAdminParams.COLOCATED_WITH) != null) {\n      // we must ensure that moving this replica does not cause the co-location to break\n      String sourceNode = replica.getNodeName();\n      String colocatedCollectionName = coll.getStr(CollectionAdminParams.COLOCATED_WITH);\n      DocCollection colocatedCollection = clusterState.getCollectionOrNull(colocatedCollectionName);\n      if (colocatedCollection != null) {\n        if (colocatedCollection.getReplica((s, r) -> sourceNode.equals(r.getNodeName())) != null) {\n          // check if we have at least two replicas of the collection on the source node\n          // only then it is okay to move one out to another node\n          List<Replica> replicasOnSourceNode = coll.getReplicas(replica.getNodeName());\n          if (replicasOnSourceNode == null || replicasOnSourceNode.size() < 2) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Collection: \" + collection + \" is co-located with collection: \" + colocatedCollectionName\n                    + \" and has a single replica: \" + replica.getName() + \" on node: \" + replica.getNodeName()\n                    + \" so it is not possible to move it to another node\");\n          }\n        }\n      }\n    }\n\n    log.info(\"Replica will be moved to node {}: {}\", targetNode, replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    boolean isSharedFS = replica.getBool(ZkStateReader.SHARED_STORAGE_PROP, false) && dataDir != null;\n\n    if (isSharedFS && inPlaceMove) {\n      log.debug(\"-- moveHdfsReplica\");\n      moveHdfsReplica(clusterState, cloudConfig, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    } else {\n      log.debug(\"-- moveNormalReplica (inPlaceMove={}, isSharedFS={}\", inPlaceMove, isSharedFS);\n      moveNormalReplica(clusterState, cloudConfig, results, targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    }\n  }\n\n","sourceOld":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    if (log.isDebugEnabled()) {\n      log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    }\n    ocmh.checkRequired(message, COLLECTION_PROP, CollectionParams.TARGET_NODE);\n    String extCollection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(CollectionParams.TARGET_NODE);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    boolean inPlaceMove = message.getBool(IN_PLACE_MOVE, true);\n    int timeout = message.getInt(TIMEOUT, 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collection;\n    if (followAliases) {\n      collection = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollection);\n    } else {\n      collection = extCollection;\n    }\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (!clusterState.getLiveNodes().contains(targetNode)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target node: \" + targetNode + \" not in live nodes: \" + clusterState.getLiveNodes());\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      String sourceNode = message.getStr(CollectionParams.SOURCE_NODE, message.getStr(CollectionParams.FROM_NODE));\n      if (sourceNode == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'\" + CollectionParams.SOURCE_NODE +\n            \" or '\" + CollectionParams.FROM_NODE + \"' is a required param\");\n      }\n      String shardId = message.getStr(SHARD_ID_PROP);\n      if (shardId == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'\" + SHARD_ID_PROP + \"' is a required param\");\n      }\n      Slice slice = coll.getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas(r -> sourceNode.equals(r.getNodeName())));\n      if (sliceReplicas.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + sourceNode + \" does not have any replica belonging to shard: \" + shardId);\n      }\n      Collections.shuffle(sliceReplicas, OverseerCollectionMessageHandler.RANDOM);\n      replica = sliceReplicas.iterator().next();\n    }\n\n    if (coll.getStr(CollectionAdminParams.COLOCATED_WITH) != null) {\n      // we must ensure that moving this replica does not cause the co-location to break\n      String sourceNode = replica.getNodeName();\n      String colocatedCollectionName = coll.getStr(CollectionAdminParams.COLOCATED_WITH);\n      DocCollection colocatedCollection = clusterState.getCollectionOrNull(colocatedCollectionName);\n      if (colocatedCollection != null) {\n        if (colocatedCollection.getReplica((s, r) -> sourceNode.equals(r.getNodeName())) != null) {\n          // check if we have at least two replicas of the collection on the source node\n          // only then it is okay to move one out to another node\n          List<Replica> replicasOnSourceNode = coll.getReplicas(replica.getNodeName());\n          if (replicasOnSourceNode == null || replicasOnSourceNode.size() < 2) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Collection: \" + collection + \" is co-located with collection: \" + colocatedCollectionName\n                    + \" and has a single replica: \" + replica.getName() + \" on node: \" + replica.getNodeName()\n                    + \" so it is not possible to move it to another node\");\n          }\n        }\n      }\n    }\n\n    log.info(\"Replica will be moved to node {}: {}\", targetNode, replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    boolean isSharedFS = replica.getBool(ZkStateReader.SHARED_STORAGE_PROP, false) && dataDir != null;\n\n    if (isSharedFS && inPlaceMove) {\n      log.debug(\"-- moveHdfsReplica\");\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    } else {\n      log.debug(\"-- moveNormalReplica (inPlaceMove={}, isSharedFS={}\", inPlaceMove, isSharedFS);\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MoveReplicaCmd#moveReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MoveReplicaCmd#moveReplica(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","sourceNew":"  private void moveReplica(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    if (log.isDebugEnabled()) {\n      log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    }\n    ocmh.checkRequired(message, COLLECTION_PROP, CollectionParams.TARGET_NODE);\n    String extCollection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(CollectionParams.TARGET_NODE);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    boolean inPlaceMove = message.getBool(IN_PLACE_MOVE, true);\n    int timeout = message.getInt(TIMEOUT, 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collection;\n    if (followAliases) {\n      collection = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollection);\n    } else {\n      collection = extCollection;\n    }\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (!clusterState.getLiveNodes().contains(targetNode)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target node: \" + targetNode + \" not in live nodes: \" + clusterState.getLiveNodes());\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      String sourceNode = message.getStr(CollectionParams.SOURCE_NODE, message.getStr(CollectionParams.FROM_NODE));\n      if (sourceNode == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'\" + CollectionParams.SOURCE_NODE +\n            \" or '\" + CollectionParams.FROM_NODE + \"' is a required param\");\n      }\n      String shardId = message.getStr(SHARD_ID_PROP);\n      if (shardId == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'\" + SHARD_ID_PROP + \"' is a required param\");\n      }\n      Slice slice = coll.getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas(r -> sourceNode.equals(r.getNodeName())));\n      if (sliceReplicas.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + sourceNode + \" does not have any replica belonging to shard: \" + shardId);\n      }\n      Collections.shuffle(sliceReplicas, OverseerCollectionMessageHandler.RANDOM);\n      replica = sliceReplicas.iterator().next();\n    }\n\n    if (coll.getStr(CollectionAdminParams.COLOCATED_WITH) != null) {\n      // we must ensure that moving this replica does not cause the co-location to break\n      String sourceNode = replica.getNodeName();\n      String colocatedCollectionName = coll.getStr(CollectionAdminParams.COLOCATED_WITH);\n      DocCollection colocatedCollection = clusterState.getCollectionOrNull(colocatedCollectionName);\n      if (colocatedCollection != null) {\n        if (colocatedCollection.getReplica((s, r) -> sourceNode.equals(r.getNodeName())) != null) {\n          // check if we have at least two replicas of the collection on the source node\n          // only then it is okay to move one out to another node\n          List<Replica> replicasOnSourceNode = coll.getReplicas(replica.getNodeName());\n          if (replicasOnSourceNode == null || replicasOnSourceNode.size() < 2) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Collection: \" + collection + \" is co-located with collection: \" + colocatedCollectionName\n                    + \" and has a single replica: \" + replica.getName() + \" on node: \" + replica.getNodeName()\n                    + \" so it is not possible to move it to another node\");\n          }\n        }\n      }\n    }\n\n    log.info(\"Replica will be moved to node {}: {}\", targetNode, replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    boolean isSharedFS = replica.getBool(ZkStateReader.SHARED_STORAGE_PROP, false) && dataDir != null;\n\n    if (isSharedFS && inPlaceMove) {\n      log.debug(\"-- moveHdfsReplica\");\n      moveHdfsReplica(clusterState, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    } else {\n      log.debug(\"-- moveNormalReplica (inPlaceMove={}, isSharedFS={}\", inPlaceMove, isSharedFS);\n      moveNormalReplica(clusterState, results, targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    }\n  }\n\n","sourceOld":"  private void moveReplica(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    if (log.isDebugEnabled()) {\n      log.debug(\"moveReplica() : {}\", Utils.toJSONString(message));\n    }\n    ocmh.checkRequired(message, COLLECTION_PROP, CollectionParams.TARGET_NODE);\n    String extCollection = message.getStr(COLLECTION_PROP);\n    String targetNode = message.getStr(CollectionParams.TARGET_NODE);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    boolean inPlaceMove = message.getBool(IN_PLACE_MOVE, true);\n    int timeout = message.getInt(TIMEOUT, 10 * 60); // 10 minutes\n\n    String async = message.getStr(ASYNC);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collection;\n    if (followAliases) {\n      collection = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollection);\n    } else {\n      collection = extCollection;\n    }\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (!clusterState.getLiveNodes().contains(targetNode)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Target node: \" + targetNode + \" not in live nodes: \" + clusterState.getLiveNodes());\n    }\n    Replica replica = null;\n    if (message.containsKey(REPLICA_PROP)) {\n      String replicaName = message.getStr(REPLICA_PROP);\n      replica = coll.getReplica(replicaName);\n      if (replica == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" replica: \" + replicaName + \" does not exist\");\n      }\n    } else {\n      String sourceNode = message.getStr(CollectionParams.SOURCE_NODE, message.getStr(CollectionParams.FROM_NODE));\n      if (sourceNode == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'\" + CollectionParams.SOURCE_NODE +\n            \" or '\" + CollectionParams.FROM_NODE + \"' is a required param\");\n      }\n      String shardId = message.getStr(SHARD_ID_PROP);\n      if (shardId == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'\" + SHARD_ID_PROP + \"' is a required param\");\n      }\n      Slice slice = coll.getSlice(shardId);\n      List<Replica> sliceReplicas = new ArrayList<>(slice.getReplicas(r -> sourceNode.equals(r.getNodeName())));\n      if (sliceReplicas.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Collection: \" + collection + \" node: \" + sourceNode + \" does not have any replica belonging to shard: \" + shardId);\n      }\n      Collections.shuffle(sliceReplicas, OverseerCollectionMessageHandler.RANDOM);\n      replica = sliceReplicas.iterator().next();\n    }\n\n    if (coll.getStr(CollectionAdminParams.COLOCATED_WITH) != null) {\n      // we must ensure that moving this replica does not cause the co-location to break\n      String sourceNode = replica.getNodeName();\n      String colocatedCollectionName = coll.getStr(CollectionAdminParams.COLOCATED_WITH);\n      DocCollection colocatedCollection = clusterState.getCollectionOrNull(colocatedCollectionName);\n      if (colocatedCollection != null) {\n        if (colocatedCollection.getReplica((s, r) -> sourceNode.equals(r.getNodeName())) != null) {\n          // check if we have at least two replicas of the collection on the source node\n          // only then it is okay to move one out to another node\n          List<Replica> replicasOnSourceNode = coll.getReplicas(replica.getNodeName());\n          if (replicasOnSourceNode == null || replicasOnSourceNode.size() < 2) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Collection: \" + collection + \" is co-located with collection: \" + colocatedCollectionName\n                    + \" and has a single replica: \" + replica.getName() + \" on node: \" + replica.getNodeName()\n                    + \" so it is not possible to move it to another node\");\n          }\n        }\n      }\n    }\n\n    log.info(\"Replica will be moved to node {}: {}\", targetNode, replica);\n    Slice slice = null;\n    for (Slice s : coll.getSlices()) {\n      if (s.getReplicas().contains(replica)) {\n        slice = s;\n      }\n    }\n    assert slice != null;\n    Object dataDir = replica.get(\"dataDir\");\n    boolean isSharedFS = replica.getBool(ZkStateReader.SHARED_STORAGE_PROP, false) && dataDir != null;\n\n    if (isSharedFS && inPlaceMove) {\n      log.debug(\"-- moveHdfsReplica\");\n      moveHdfsReplica(clusterState, cloudConfig, results, dataDir.toString(), targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    } else {\n      log.debug(\"-- moveNormalReplica (inPlaceMove={}, isSharedFS={}\", inPlaceMove, isSharedFS);\n      moveNormalReplica(clusterState, cloudConfig, results, targetNode, async, coll, replica, slice, timeout, waitForFinalState);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"c526352db87264a72a7a9ad68c1b769b81e54305":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c526352db87264a72a7a9ad68c1b769b81e54305"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}