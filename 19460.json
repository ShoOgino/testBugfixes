{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.UOEDirectory#openInput(String,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.UOEDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.UOEDirectory#openInput(String,IOContext).mjava","sourceNew":"    @Override\n    public IndexInput openInput(String name, IOContext context) throws IOException {\n      if (doFail && name.startsWith(\"segments_\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"indexExists\".equals(trace[i].getMethodName())) {\n            throw new UnsupportedOperationException(\"expected UOE\");\n          }\n        }\n      }\n      return super.openInput(name, context);\n    }\n\n","sourceOld":"    @Override\n    public IndexInput openInput(String name, IOContext context) throws IOException {\n      if (doFail && name.startsWith(\"segments_\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"indexExists\".equals(trace[i].getMethodName())) {\n            throw new UnsupportedOperationException(\"expected UOE\");\n          }\n        }\n      }\n      return super.openInput(name, context);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30e0912f3a3069b115cfea44ff612c44d6906386","date":1365631344,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.UOEDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.UOEDirectory#openInput(String,IOContext).mjava","sourceNew":"    @Override\n    public IndexInput openInput(String name, IOContext context) throws IOException {\n      if (doFail && name.startsWith(\"segments_\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"read\".equals(trace[i].getMethodName())) {\n            throw new UnsupportedOperationException(\"expected UOE\");\n          }\n        }\n      }\n      return super.openInput(name, context);\n    }\n\n","sourceOld":"    @Override\n    public IndexInput openInput(String name, IOContext context) throws IOException {\n      if (doFail && name.startsWith(\"segments_\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"indexExists\".equals(trace[i].getMethodName())) {\n            throw new UnsupportedOperationException(\"expected UOE\");\n          }\n        }\n      }\n      return super.openInput(name, context);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.UOEDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.UOEDirectory#openInput(String,IOContext).mjava","sourceNew":"    @Override\n    public IndexInput openInput(String name, IOContext context) throws IOException {\n      if (doFail && name.startsWith(\"segments_\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readCommit\".equals(trace[i].getMethodName()) || \"readLatestCommit\".equals(trace[i].getMethodName())) {\n            throw new UnsupportedOperationException(\"expected UOE\");\n          }\n        }\n      }\n      return super.openInput(name, context);\n    }\n\n","sourceOld":"    @Override\n    public IndexInput openInput(String name, IOContext context) throws IOException {\n      if (doFail && name.startsWith(\"segments_\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"read\".equals(trace[i].getMethodName())) {\n            throw new UnsupportedOperationException(\"expected UOE\");\n          }\n        }\n      }\n      return super.openInput(name, context);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.UOEDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.UOEDirectory#openInput(String,IOContext).mjava","sourceNew":"    @Override\n    public IndexInput openInput(String name, IOContext context) throws IOException {\n      if (doFail && name.startsWith(\"segments_\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readCommit\".equals(trace[i].getMethodName()) || \"readLatestCommit\".equals(trace[i].getMethodName())) {\n            throw new UnsupportedOperationException(\"expected UOE\");\n          }\n        }\n      }\n      return super.openInput(name, context);\n    }\n\n","sourceOld":"    @Override\n    public IndexInput openInput(String name, IOContext context) throws IOException {\n      if (doFail && name.startsWith(\"segments_\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"read\".equals(trace[i].getMethodName())) {\n            throw new UnsupportedOperationException(\"expected UOE\");\n          }\n        }\n      }\n      return super.openInput(name, context);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2916966cc9815e973c01452a0d76c98c5e0d0926","date":1577444040,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.UOEDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.UOEDirectory#openInput(String,IOContext).mjava","sourceNew":"    @Override\n    public IndexInput openInput(String name, IOContext context) throws IOException {\n      if (doFail && name.startsWith(\"segments_\")) {\n        if (callStackContainsAnyOf(\"readCommit\", \"readLatestCommit\")) {\n          throw new UnsupportedOperationException(\"expected UOE\");\n        }\n      }\n      return super.openInput(name, context);\n    }\n\n","sourceOld":"    @Override\n    public IndexInput openInput(String name, IOContext context) throws IOException {\n      if (doFail && name.startsWith(\"segments_\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readCommit\".equals(trace[i].getMethodName()) || \"readLatestCommit\".equals(trace[i].getMethodName())) {\n            throw new UnsupportedOperationException(\"expected UOE\");\n          }\n        }\n      }\n      return super.openInput(name, context);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ec73c5617c177b1d81ddfe04bbff1d08fccecc","date":1577456244,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.UOEDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.UOEDirectory#openInput(String,IOContext).mjava","sourceNew":"    @Override\n    public IndexInput openInput(String name, IOContext context) throws IOException {\n      if (doFail && name.startsWith(\"segments_\")) {\n        if (callStackContainsAnyOf(\"readCommit\", \"readLatestCommit\")) {\n          throw new UnsupportedOperationException(\"expected UOE\");\n        }\n      }\n      return super.openInput(name, context);\n    }\n\n","sourceOld":"    @Override\n    public IndexInput openInput(String name, IOContext context) throws IOException {\n      if (doFail && name.startsWith(\"segments_\")) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"readCommit\".equals(trace[i].getMethodName()) || \"readLatestCommit\".equals(trace[i].getMethodName())) {\n            throw new UnsupportedOperationException(\"expected UOE\");\n          }\n        }\n      }\n      return super.openInput(name, context);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3384e6013a93e4d11b7d75388693f8d0388602bf":["30e0912f3a3069b115cfea44ff612c44d6906386"],"2916966cc9815e973c01452a0d76c98c5e0d0926":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"30e0912f3a3069b115cfea44ff612c44d6906386":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["30e0912f3a3069b115cfea44ff612c44d6906386","3384e6013a93e4d11b7d75388693f8d0388602bf"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","2916966cc9815e973c01452a0d76c98c5e0d0926"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2916966cc9815e973c01452a0d76c98c5e0d0926"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30e0912f3a3069b115cfea44ff612c44d6906386"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"30e0912f3a3069b115cfea44ff612c44d6906386":["3384e6013a93e4d11b7d75388693f8d0388602bf","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"2916966cc9815e973c01452a0d76c98c5e0d0926":["94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["2916966cc9815e973c01452a0d76c98c5e0d0926","94ec73c5617c177b1d81ddfe04bbff1d08fccecc"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}