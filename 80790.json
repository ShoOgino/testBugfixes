{"path":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#assertRewrite(FilteredQuery,Class[#-extends-Query]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#assertRewrite(FilteredQuery,Class[#-extends-Query]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#assertRewrite(FilteredQuery,Class[#-extends-Query]).mjava","sourceNew":"  private void assertRewrite(FilteredQuery fq, Class<? extends Query> clazz) throws Exception {\n    // assign crazy boost to FQ\n    final float boost = random.nextFloat() * 100.f;\n    fq.setBoost(boost);\n    \n    // assign crazy boost to inner\n    final float innerBoost = random.nextFloat() * 100.f;\n    fq.getQuery().setBoost(innerBoost);\n    \n    // check the class and boosts of rewritten query\n    final Query rewritten = searcher.rewrite(fq);\n    assertTrue(\"is not instance of \" + clazz.getName(), clazz.isInstance(rewritten));\n    if (rewritten instanceof FilteredQuery) {\n      assertEquals(boost, rewritten.getBoost(), 1.E-5f);\n      assertEquals(innerBoost, ((FilteredQuery) rewritten).getQuery().getBoost(), 1.E-5f);\n    } else {\n      assertEquals(boost * innerBoost, rewritten.getBoost(), 1.E-5f);\n    }\n    \n    // check that the original query was not modified\n    assertEquals(boost, fq.getBoost(), 1.E-5f);\n    assertEquals(innerBoost, fq.getQuery().getBoost(), 1.E-5f);\n  }\n\n","sourceOld":"  private void assertRewrite(FilteredQuery fq, Class<? extends Query> clazz) throws Exception {\n    // assign crazy boost to FQ\n    final float boost = random.nextFloat() * 100.f;\n    fq.setBoost(boost);\n    \n    // assign crazy boost to inner\n    final float innerBoost = random.nextFloat() * 100.f;\n    fq.getQuery().setBoost(innerBoost);\n    \n    // check the class and boosts of rewritten query\n    final Query rewritten = searcher.rewrite(fq);\n    assertTrue(\"is not instance of \" + clazz.getName(), clazz.isInstance(rewritten));\n    if (rewritten instanceof FilteredQuery) {\n      assertEquals(boost, rewritten.getBoost(), 1.E-5f);\n      assertEquals(innerBoost, ((FilteredQuery) rewritten).getQuery().getBoost(), 1.E-5f);\n    } else {\n      assertEquals(boost * innerBoost, rewritten.getBoost(), 1.E-5f);\n    }\n    \n    // check that the original query was not modified\n    assertEquals(boost, fq.getBoost(), 1.E-5f);\n    assertEquals(innerBoost, fq.getQuery().getBoost(), 1.E-5f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#assertRewrite(FilteredQuery,Class[#-extends-Query]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#assertRewrite(FilteredQuery,Class[#-extends-Query]).mjava","sourceNew":"  private void assertRewrite(FilteredQuery fq, Class<? extends Query> clazz) throws Exception {\n    // assign crazy boost to FQ\n    final float boost = random().nextFloat() * 100.f;\n    fq.setBoost(boost);\n    \n    // assign crazy boost to inner\n    final float innerBoost = random().nextFloat() * 100.f;\n    fq.getQuery().setBoost(innerBoost);\n    \n    // check the class and boosts of rewritten query\n    final Query rewritten = searcher.rewrite(fq);\n    assertTrue(\"is not instance of \" + clazz.getName(), clazz.isInstance(rewritten));\n    if (rewritten instanceof FilteredQuery) {\n      assertEquals(boost, rewritten.getBoost(), 1.E-5f);\n      assertEquals(innerBoost, ((FilteredQuery) rewritten).getQuery().getBoost(), 1.E-5f);\n    } else {\n      assertEquals(boost * innerBoost, rewritten.getBoost(), 1.E-5f);\n    }\n    \n    // check that the original query was not modified\n    assertEquals(boost, fq.getBoost(), 1.E-5f);\n    assertEquals(innerBoost, fq.getQuery().getBoost(), 1.E-5f);\n  }\n\n","sourceOld":"  private void assertRewrite(FilteredQuery fq, Class<? extends Query> clazz) throws Exception {\n    // assign crazy boost to FQ\n    final float boost = random.nextFloat() * 100.f;\n    fq.setBoost(boost);\n    \n    // assign crazy boost to inner\n    final float innerBoost = random.nextFloat() * 100.f;\n    fq.getQuery().setBoost(innerBoost);\n    \n    // check the class and boosts of rewritten query\n    final Query rewritten = searcher.rewrite(fq);\n    assertTrue(\"is not instance of \" + clazz.getName(), clazz.isInstance(rewritten));\n    if (rewritten instanceof FilteredQuery) {\n      assertEquals(boost, rewritten.getBoost(), 1.E-5f);\n      assertEquals(innerBoost, ((FilteredQuery) rewritten).getQuery().getBoost(), 1.E-5f);\n    } else {\n      assertEquals(boost * innerBoost, rewritten.getBoost(), 1.E-5f);\n    }\n    \n    // check that the original query was not modified\n    assertEquals(boost, fq.getBoost(), 1.E-5f);\n    assertEquals(innerBoost, fq.getQuery().getBoost(), 1.E-5f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eb3122482ef235fbee3d696501977399ec0af6f","date":1358856510,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#assertRewrite(FilteredQuery,Class[#-extends-Query]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#assertRewrite(FilteredQuery,Class[#-extends-Query]).mjava","sourceNew":"  private void assertRewrite(FilteredQuery fq, Class<? extends Query> clazz) throws Exception {\n    // assign crazy boost to FQ\n    final float boost = random().nextFloat() * 100.f;\n    fq.setBoost(boost);\n    \n    \n    // assign crazy boost to inner\n    final float innerBoost = random().nextFloat() * 100.f;\n    fq.getQuery().setBoost(innerBoost);\n    \n    // check the class and boosts of rewritten query\n    final Query rewritten = searcher.rewrite(fq);\n    assertTrue(\"is not instance of \" + clazz.getName(), clazz.isInstance(rewritten));\n    if (rewritten instanceof FilteredQuery) {\n      assertEquals(boost, rewritten.getBoost(), 1.E-5f);\n      assertEquals(innerBoost, ((FilteredQuery) rewritten).getQuery().getBoost(), 1.E-5f);\n      assertEquals(fq.getFilterStrategy(), ((FilteredQuery) rewritten).getFilterStrategy());\n    } else {\n      assertEquals(boost * innerBoost, rewritten.getBoost(), 1.E-5f);\n    }\n    \n    // check that the original query was not modified\n    assertEquals(boost, fq.getBoost(), 1.E-5f);\n    assertEquals(innerBoost, fq.getQuery().getBoost(), 1.E-5f);\n  }\n\n","sourceOld":"  private void assertRewrite(FilteredQuery fq, Class<? extends Query> clazz) throws Exception {\n    // assign crazy boost to FQ\n    final float boost = random().nextFloat() * 100.f;\n    fq.setBoost(boost);\n    \n    // assign crazy boost to inner\n    final float innerBoost = random().nextFloat() * 100.f;\n    fq.getQuery().setBoost(innerBoost);\n    \n    // check the class and boosts of rewritten query\n    final Query rewritten = searcher.rewrite(fq);\n    assertTrue(\"is not instance of \" + clazz.getName(), clazz.isInstance(rewritten));\n    if (rewritten instanceof FilteredQuery) {\n      assertEquals(boost, rewritten.getBoost(), 1.E-5f);\n      assertEquals(innerBoost, ((FilteredQuery) rewritten).getQuery().getBoost(), 1.E-5f);\n    } else {\n      assertEquals(boost * innerBoost, rewritten.getBoost(), 1.E-5f);\n    }\n    \n    // check that the original query was not modified\n    assertEquals(boost, fq.getBoost(), 1.E-5f);\n    assertEquals(innerBoost, fq.getQuery().getBoost(), 1.E-5f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#assertRewrite(FilteredQuery,Class[#-extends-Query]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#assertRewrite(FilteredQuery,Class[#-extends-Query]).mjava","sourceNew":"  private void assertRewrite(FilteredQuery fq, Class<? extends Query> clazz) throws Exception {\n    // assign crazy boost to FQ\n    final float boost = random().nextFloat() * 100.f;\n    fq.setBoost(boost);\n    \n    \n    // assign crazy boost to inner\n    final float innerBoost = random().nextFloat() * 100.f;\n    fq.getQuery().setBoost(innerBoost);\n    \n    // check the class and boosts of rewritten query\n    final Query rewritten = searcher.rewrite(fq);\n    assertTrue(\"is not instance of \" + clazz.getName(), clazz.isInstance(rewritten));\n    if (rewritten instanceof FilteredQuery) {\n      assertEquals(boost, rewritten.getBoost(), 1.E-5f);\n      assertEquals(innerBoost, ((FilteredQuery) rewritten).getQuery().getBoost(), 1.E-5f);\n      assertEquals(fq.getFilterStrategy(), ((FilteredQuery) rewritten).getFilterStrategy());\n    } else {\n      assertEquals(boost * innerBoost, rewritten.getBoost(), 1.E-5f);\n    }\n    \n    // check that the original query was not modified\n    assertEquals(boost, fq.getBoost(), 1.E-5f);\n    assertEquals(innerBoost, fq.getQuery().getBoost(), 1.E-5f);\n  }\n\n","sourceOld":"  private void assertRewrite(FilteredQuery fq, Class<? extends Query> clazz) throws Exception {\n    // assign crazy boost to FQ\n    final float boost = random().nextFloat() * 100.f;\n    fq.setBoost(boost);\n    \n    // assign crazy boost to inner\n    final float innerBoost = random().nextFloat() * 100.f;\n    fq.getQuery().setBoost(innerBoost);\n    \n    // check the class and boosts of rewritten query\n    final Query rewritten = searcher.rewrite(fq);\n    assertTrue(\"is not instance of \" + clazz.getName(), clazz.isInstance(rewritten));\n    if (rewritten instanceof FilteredQuery) {\n      assertEquals(boost, rewritten.getBoost(), 1.E-5f);\n      assertEquals(innerBoost, ((FilteredQuery) rewritten).getQuery().getBoost(), 1.E-5f);\n    } else {\n      assertEquals(boost * innerBoost, rewritten.getBoost(), 1.E-5f);\n    }\n    \n    // check that the original query was not modified\n    assertEquals(boost, fq.getBoost(), 1.E-5f);\n    assertEquals(innerBoost, fq.getQuery().getBoost(), 1.E-5f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#assertRewrite(FilteredQuery,Class[#-extends-Query]).mjava","sourceNew":null,"sourceOld":"  private void assertRewrite(FilteredQuery fq, Class<? extends Query> clazz) throws Exception {\n    // assign crazy boost to FQ\n    final float boost = random().nextFloat() * 100.f;\n    fq.setBoost(boost);\n    \n    \n    // assign crazy boost to inner\n    final float innerBoost = random().nextFloat() * 100.f;\n    fq.getQuery().setBoost(innerBoost);\n    \n    // check the class and boosts of rewritten query\n    final Query rewritten = searcher.rewrite(fq);\n    assertTrue(\"is not instance of \" + clazz.getName(), clazz.isInstance(rewritten));\n    if (rewritten instanceof FilteredQuery) {\n      assertEquals(boost, rewritten.getBoost(), 1.E-5f);\n      assertEquals(innerBoost, ((FilteredQuery) rewritten).getQuery().getBoost(), 1.E-5f);\n      assertEquals(fq.getFilterStrategy(), ((FilteredQuery) rewritten).getFilterStrategy());\n    } else {\n      assertEquals(boost * innerBoost, rewritten.getBoost(), 1.E-5f);\n    }\n    \n    // check that the original query was not modified\n    assertEquals(boost, fq.getBoost(), 1.E-5f);\n    assertEquals(innerBoost, fq.getQuery().getBoost(), 1.E-5f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1db68e96dd908fcd79ef809095822736aa601d08":["9eb3122482ef235fbee3d696501977399ec0af6f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"],"9eb3122482ef235fbee3d696501977399ec0af6f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","9eb3122482ef235fbee3d696501977399ec0af6f"]},"commit2Childs":{"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["9eb3122482ef235fbee3d696501977399ec0af6f","b2d5244a676b83c2d551c3746e8181588ba619e1"],"9eb3122482ef235fbee3d696501977399ec0af6f":["1db68e96dd908fcd79ef809095822736aa601d08","b2d5244a676b83c2d551c3746e8181588ba619e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}