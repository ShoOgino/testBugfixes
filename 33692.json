{"path":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#newIndexUpgrader(Directory).mjava","commits":[{"id":"6f1e5b432d4a0520e976622998d1c85a0fa4f9fa","date":1379529236,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#newIndexUpgrader(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Randomizes the use of some of hte constructor variations\n   */\n  private static IndexUpgrader newIndexUpgrader(Directory dir) {\n    final boolean streamType = random().nextBoolean();\n    final int choice = _TestUtil.nextInt(random(), 0, 2);\n    switch (choice) {\n      case 0: return new IndexUpgrader(dir, TEST_VERSION_CURRENT);\n      case 1: return new IndexUpgrader(dir, TEST_VERSION_CURRENT, \n                                       streamType ? null : System.err, false);\n      case 2: return new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false);\n      default: fail(\"case statement didn't get updated when random bounds changed\");\n    }\n    return null; // never get here\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#newIndexUpgrader(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#newIndexUpgrader(Directory).mjava","sourceNew":"  /**\n   * Randomizes the use of some of hte constructor variations\n   */\n  private static IndexUpgrader newIndexUpgrader(Directory dir) {\n    final boolean streamType = random().nextBoolean();\n    final int choice = TestUtil.nextInt(random(), 0, 2);\n    switch (choice) {\n      case 0: return new IndexUpgrader(dir, TEST_VERSION_CURRENT);\n      case 1: return new IndexUpgrader(dir, TEST_VERSION_CURRENT, \n                                       streamType ? null : System.err, false);\n      case 2: return new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false);\n      default: fail(\"case statement didn't get updated when random bounds changed\");\n    }\n    return null; // never get here\n  }\n\n","sourceOld":"  /**\n   * Randomizes the use of some of hte constructor variations\n   */\n  private static IndexUpgrader newIndexUpgrader(Directory dir) {\n    final boolean streamType = random().nextBoolean();\n    final int choice = _TestUtil.nextInt(random(), 0, 2);\n    switch (choice) {\n      case 0: return new IndexUpgrader(dir, TEST_VERSION_CURRENT);\n      case 1: return new IndexUpgrader(dir, TEST_VERSION_CURRENT, \n                                       streamType ? null : System.err, false);\n      case 2: return new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false);\n      default: fail(\"case statement didn't get updated when random bounds changed\");\n    }\n    return null; // never get here\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1f3bfdf2fbf9eb7c32953111625b8149f767900","date":1398169177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#newIndexUpgrader(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#newIndexUpgrader(Directory).mjava","sourceNew":"  /**\n   * Randomizes the use of some of hte constructor variations\n   */\n  private static IndexUpgrader newIndexUpgrader(Directory dir) {\n    final boolean streamType = random().nextBoolean();\n    final int choice = TestUtil.nextInt(random(), 0, 2);\n    switch (choice) {\n      case 0: return new IndexUpgrader(dir, TEST_VERSION_CURRENT);\n      case 1: return new IndexUpgrader(dir, TEST_VERSION_CURRENT, \n                                       streamType ? null : InfoStream.NO_OUTPUT, false);\n      case 2: return new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false);\n      default: fail(\"case statement didn't get updated when random bounds changed\");\n    }\n    return null; // never get here\n  }\n\n","sourceOld":"  /**\n   * Randomizes the use of some of hte constructor variations\n   */\n  private static IndexUpgrader newIndexUpgrader(Directory dir) {\n    final boolean streamType = random().nextBoolean();\n    final int choice = TestUtil.nextInt(random(), 0, 2);\n    switch (choice) {\n      case 0: return new IndexUpgrader(dir, TEST_VERSION_CURRENT);\n      case 1: return new IndexUpgrader(dir, TEST_VERSION_CURRENT, \n                                       streamType ? null : System.err, false);\n      case 2: return new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false);\n      default: fail(\"case statement didn't get updated when random bounds changed\");\n    }\n    return null; // never get here\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518","date":1398331323,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#newIndexUpgrader(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#newIndexUpgrader(Directory).mjava","sourceNew":"  /**\n   * Randomizes the use of some of hte constructor variations\n   */\n  private static IndexUpgrader newIndexUpgrader(Directory dir) {\n    final boolean streamType = random().nextBoolean();\n    final int choice = TestUtil.nextInt(random(), 0, 2);\n    switch (choice) {\n      case 0: return new IndexUpgrader(dir, TEST_VERSION_CURRENT);\n      case 1: return new IndexUpgrader(dir, TEST_VERSION_CURRENT, \n                                       streamType ? null : InfoStream.NO_OUTPUT, false);\n      case 2: return new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false);\n      default: fail(\"case statement didn't get updated when random bounds changed\");\n    }\n    return null; // never get here\n  }\n\n","sourceOld":"  /**\n   * Randomizes the use of some of hte constructor variations\n   */\n  private static IndexUpgrader newIndexUpgrader(Directory dir) {\n    final boolean streamType = random().nextBoolean();\n    final int choice = TestUtil.nextInt(random(), 0, 2);\n    switch (choice) {\n      case 0: return new IndexUpgrader(dir, TEST_VERSION_CURRENT);\n      case 1: return new IndexUpgrader(dir, TEST_VERSION_CURRENT, \n                                       streamType ? null : System.err, false);\n      case 2: return new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false);\n      default: fail(\"case statement didn't get updated when random bounds changed\");\n    }\n    return null; // never get here\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#newIndexUpgrader(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#newIndexUpgrader(Directory).mjava","sourceNew":"  /**\n   * Randomizes the use of some of hte constructor variations\n   */\n  private static IndexUpgrader newIndexUpgrader(Directory dir) {\n    final boolean streamType = random().nextBoolean();\n    final int choice = TestUtil.nextInt(random(), 0, 2);\n    switch (choice) {\n      case 0: return new IndexUpgrader(dir, TEST_VERSION_CURRENT);\n      case 1: return new IndexUpgrader(dir, TEST_VERSION_CURRENT, \n                                       streamType ? null : InfoStream.NO_OUTPUT, false);\n      case 2: return new IndexUpgrader(dir, newIndexWriterConfig(null), false);\n      default: fail(\"case statement didn't get updated when random bounds changed\");\n    }\n    return null; // never get here\n  }\n\n","sourceOld":"  /**\n   * Randomizes the use of some of hte constructor variations\n   */\n  private static IndexUpgrader newIndexUpgrader(Directory dir) {\n    final boolean streamType = random().nextBoolean();\n    final int choice = TestUtil.nextInt(random(), 0, 2);\n    switch (choice) {\n      case 0: return new IndexUpgrader(dir, TEST_VERSION_CURRENT);\n      case 1: return new IndexUpgrader(dir, TEST_VERSION_CURRENT, \n                                       streamType ? null : InfoStream.NO_OUTPUT, false);\n      case 2: return new IndexUpgrader(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null), false);\n      default: fail(\"case statement didn't get updated when random bounds changed\");\n    }\n    return null; // never get here\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#newIndexUpgrader(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#newIndexUpgrader(Directory).mjava","sourceNew":"  /**\n   * Randomizes the use of some of hte constructor variations\n   */\n  private static IndexUpgrader newIndexUpgrader(Directory dir) {\n    final boolean streamType = random().nextBoolean();\n    final int choice = TestUtil.nextInt(random(), 0, 2);\n    switch (choice) {\n      case 0: return new IndexUpgrader(dir);\n      case 1: return new IndexUpgrader(dir, streamType ? null : InfoStream.NO_OUTPUT, false);\n      case 2: return new IndexUpgrader(dir, newIndexWriterConfig(null), false);\n      default: fail(\"case statement didn't get updated when random bounds changed\");\n    }\n    return null; // never get here\n  }\n\n","sourceOld":"  /**\n   * Randomizes the use of some of hte constructor variations\n   */\n  private static IndexUpgrader newIndexUpgrader(Directory dir) {\n    final boolean streamType = random().nextBoolean();\n    final int choice = TestUtil.nextInt(random(), 0, 2);\n    switch (choice) {\n      case 0: return new IndexUpgrader(dir, TEST_VERSION_CURRENT);\n      case 1: return new IndexUpgrader(dir, TEST_VERSION_CURRENT, \n                                       streamType ? null : InfoStream.NO_OUTPUT, false);\n      case 2: return new IndexUpgrader(dir, newIndexWriterConfig(null), false);\n      default: fail(\"case statement didn't get updated when random bounds changed\");\n    }\n    return null; // never get here\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#newIndexUpgrader(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#newIndexUpgrader(Directory).mjava","sourceNew":"  /**\n   * Randomizes the use of some of hte constructor variations\n   */\n  private static IndexUpgrader newIndexUpgrader(Directory dir) {\n    final boolean streamType = random().nextBoolean();\n    final int choice = TestUtil.nextInt(random(), 0, 2);\n    switch (choice) {\n      case 0: return new IndexUpgrader(dir);\n      case 1: return new IndexUpgrader(dir, streamType ? null : InfoStream.NO_OUTPUT, false);\n      case 2: return new IndexUpgrader(dir, newIndexWriterConfig(null), false);\n      default: fail(\"case statement didn't get updated when random bounds changed\");\n    }\n    return null; // never get here\n  }\n\n","sourceOld":"  /**\n   * Randomizes the use of some of hte constructor variations\n   */\n  private static IndexUpgrader newIndexUpgrader(Directory dir) {\n    final boolean streamType = random().nextBoolean();\n    final int choice = TestUtil.nextInt(random(), 0, 2);\n    switch (choice) {\n      case 0: return new IndexUpgrader(dir);\n      case 1: return new IndexUpgrader(dir, streamType ? null : InfoStream.NO_OUTPUT, false);\n      case 2: return new IndexUpgrader(dir, newIndexWriterConfig(null), false);\n      default: fail(\"case statement didn't get updated when random bounds changed\");\n    }\n    return null; // never get here\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#newIndexUpgrader(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#newIndexUpgrader(Directory).mjava","sourceNew":"  /**\n   * Randomizes the use of some of hte constructor variations\n   */\n  private static IndexUpgrader newIndexUpgrader(Directory dir) {\n    final boolean streamType = random().nextBoolean();\n    final int choice = TestUtil.nextInt(random(), 0, 2);\n    switch (choice) {\n      case 0: return new IndexUpgrader(dir);\n      case 1: return new IndexUpgrader(dir, streamType ? null : InfoStream.NO_OUTPUT, false);\n      case 2: return new IndexUpgrader(dir, newIndexWriterConfig(null), false);\n      default: fail(\"case statement didn't get updated when random bounds changed\");\n    }\n    return null; // never get here\n  }\n\n","sourceOld":"  /**\n   * Randomizes the use of some of hte constructor variations\n   */\n  private static IndexUpgrader newIndexUpgrader(Directory dir) {\n    final boolean streamType = random().nextBoolean();\n    final int choice = TestUtil.nextInt(random(), 0, 2);\n    switch (choice) {\n      case 0: return new IndexUpgrader(dir);\n      case 1: return new IndexUpgrader(dir, streamType ? null : InfoStream.NO_OUTPUT, false);\n      case 2: return new IndexUpgrader(dir, newIndexWriterConfig(null), false);\n      default: fail(\"case statement didn't get updated when random bounds changed\");\n    }\n    return null; // never get here\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["f1f3bfdf2fbf9eb7c32953111625b8149f767900"],"6613659748fe4411a7dcf85266e55db1f95f7315":["6f1e5b432d4a0520e976622998d1c85a0fa4f9fa"],"6f1e5b432d4a0520e976622998d1c85a0fa4f9fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"f1f3bfdf2fbf9eb7c32953111625b8149f767900":["6613659748fe4411a7dcf85266e55db1f95f7315"],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["d0ef034a4f10871667ae75181537775ddcf8ade4","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["f1f3bfdf2fbf9eb7c32953111625b8149f767900","e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518"],"6f1e5b432d4a0520e976622998d1c85a0fa4f9fa":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f1e5b432d4a0520e976622998d1c85a0fa4f9fa"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"f1f3bfdf2fbf9eb7c32953111625b8149f767900":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}