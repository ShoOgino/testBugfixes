{"path":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(Searcher,IndexReader,int).mjava","commits":[{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(Searcher,IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","sourceNew":"    /* Explain the score we computed for doc */\n    public Explanation explain(Searcher searcher, IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return ((Weight) weights.get(0)).explain(searcher, reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        Explanation e = ((Weight) iter.next()).explain(searcher, reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":"    /* Explain the score we computed for doc */\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return ((QueryWeight) weights.get(0)).explain(reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        Explanation e = ((QueryWeight) iter.next()).explain(reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"231941d2cb96b9752e839c311391096d90470db8","date":1251116803,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(Searcher,IndexReader,int).mjava","sourceNew":"    /* Explain the score we computed for doc */\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return ((Weight) weights.get(0)).explain(reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        Explanation e = ((Weight) iter.next()).explain(reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":"    /* Explain the score we computed for doc */\n    public Explanation explain(Searcher searcher, IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return ((Weight) weights.get(0)).explain(searcher, reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        Explanation e = ((Weight) iter.next()).explain(searcher, reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"231941d2cb96b9752e839c311391096d90470db8":["fe941135bdfc28c81e20b4d21422f8726af34925"],"fe941135bdfc28c81e20b4d21422f8726af34925":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["231941d2cb96b9752e839c311391096d90470db8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe941135bdfc28c81e20b4d21422f8726af34925"],"231941d2cb96b9752e839c311391096d90470db8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe941135bdfc28c81e20b4d21422f8726af34925":["231941d2cb96b9752e839c311391096d90470db8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}