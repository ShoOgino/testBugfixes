{"path":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    LuceneTaxonomyWriter tw = new LuceneTaxonomyWriter(taxoDir);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = IndexReader.open(indexDir);\n    LuceneTaxonomyReader tr = new LuceneTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","sourceNew":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    LuceneTaxonomyWriter tw = new LuceneTaxonomyWriter(taxoDir);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = IndexReader.open(indexDir);\n    LuceneTaxonomyReader tr = new LuceneTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","sourceOld":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    LuceneTaxonomyWriter tw = new LuceneTaxonomyWriter(taxoDir);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = IndexReader.open(indexDir);\n    LuceneTaxonomyReader tr = new LuceneTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    LuceneTaxonomyWriter tw = new LuceneTaxonomyWriter(taxoDir);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = IndexReader.open(indexDir);\n    LuceneTaxonomyReader tr = new LuceneTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    LuceneTaxonomyWriter tw = new LuceneTaxonomyWriter(taxoDir);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = IndexReader.open(indexDir);\n    LuceneTaxonomyReader tr = new LuceneTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","sourceNew":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = IndexReader.open(indexDir);\n    DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","sourceOld":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    LuceneTaxonomyWriter tw = new LuceneTaxonomyWriter(taxoDir);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = IndexReader.open(indexDir);\n    LuceneTaxonomyReader tr = new LuceneTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","sourceNew":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = IndexReader.open(indexDir);\n    DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","sourceOld":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = IndexReader.open(indexDir);\n    DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testMemoryCacheSynchronization().mjava","sourceNew":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = IndexReader.open(indexDir);\n    DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","sourceOld":"  /**\n   * Test that a new TFC is only calculated and placed in memory (by two\n   * threads who want it at the same time) only once.\n   */\n  @Test\n  public void testMemoryCacheSynchronization() throws Exception {\n    SlowRAMDirectory indexDir = new SlowRAMDirectory(-1, null);\n    SlowRAMDirectory taxoDir = new SlowRAMDirectory(-1, null);\n\n    // Write index using 'normal' directories\n    IndexWriter w = new IndexWriter(indexDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams();\n    // Add documents and facets\n    for (int i = 0; i < 1000; i++) {\n      addFacets(iParams, w, tw, \"facet\", Integer.toString(i));\n    }\n    w.close();\n    tw.close();\n\n    indexDir.setSleepMillis(1);\n    taxoDir.setSleepMillis(1);\n\n    IndexReader r = IndexReader.open(indexDir);\n    DirectoryTaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n    // Create and start threads. Thread1 should lock the cache and calculate\n    // the TFC array. The second thread should block until the first is\n    // done, then successfully retrieve from the cache without recalculating\n    // or reading from disk.\n    TFCThread tfcCalc1 = new TFCThread(r, tr, iParams);\n    TFCThread tfcCalc2 = new TFCThread(r, tr, iParams);\n    tfcCalc1.start();\n    // Give thread 1 a head start to ensure correct sequencing for testing\n    Thread.sleep(5);\n    tfcCalc2.start();\n\n    tfcCalc1.join();\n    tfcCalc2.join();\n\n    // Since this test ends up with references to the same TFC object, we\n    // can only test the times to make sure that they are the same.\n    assertRecomputed(tfcCalc1.tfc, 0, \"thread 1 should recompute\");\n    assertRecomputed(tfcCalc2.tfc, 0, \"thread 2 should recompute\");\n    assertTrue(\"Both results should be the same (as their inputs are the same objects)\",\n        tfcCalc1.tfc == tfcCalc2.tfc);\n\n    r.close();\n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}