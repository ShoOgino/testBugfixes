{"path":"src/java/org/apache/lucene/search/FieldSortedHitQueue#fillFields(FieldDoc).mjava","commits":[{"id":"99ee715b9c02dd47d9e69a18607a5192c1ebd82b","date":1085007927,"type":0,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#fillFields(FieldDoc).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a FieldDoc object, stores the values used\n   * to sort the given document.  These values are not the raw\n   * values out of the index, but the internal representation\n   * of them.  This is so the given search hit can be collated\n   * by a MultiSearcher with other search hits.\n   * @param  doc  The FieldDoc to store sort values into.\n   * @return  The same FieldDoc passed in.\n   * @see Searchable#search(Query,Filter,int,Sort)\n   */\n  FieldDoc fillFields (final FieldDoc doc) {\n    final int n = comparators.length;\n    final Comparable[] fields = new Comparable[n];\n    for (int i=0; i<n; ++i)\n      fields[i] = comparators[i].sortValue(doc);\n    doc.fields = fields;\n    if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return doc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ceaa9738cad9616d1831286111af106e13e0e4b","date":1114543820,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#fillFields(FieldDoc).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#fillFields(FieldDoc).mjava","sourceNew":"  /**\n   * Given a FieldDoc object, stores the values used\n   * to sort the given document.  These values are not the raw\n   * values out of the index, but the internal representation\n   * of them.  This is so the given search hit can be collated\n   * by a MultiSearcher with other search hits.\n   * @param  doc  The FieldDoc to store sort values into.\n   * @return  The same FieldDoc passed in.\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields (final FieldDoc doc) {\n    final int n = comparators.length;\n    final Comparable[] fields = new Comparable[n];\n    for (int i=0; i<n; ++i)\n      fields[i] = comparators[i].sortValue(doc);\n    doc.fields = fields;\n    if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Given a FieldDoc object, stores the values used\n   * to sort the given document.  These values are not the raw\n   * values out of the index, but the internal representation\n   * of them.  This is so the given search hit can be collated\n   * by a MultiSearcher with other search hits.\n   * @param  doc  The FieldDoc to store sort values into.\n   * @return  The same FieldDoc passed in.\n   * @see Searchable#search(Query,Filter,int,Sort)\n   */\n  FieldDoc fillFields (final FieldDoc doc) {\n    final int n = comparators.length;\n    final Comparable[] fields = new Comparable[n];\n    for (int i=0; i<n; ++i)\n      fields[i] = comparators[i].sortValue(doc);\n    doc.fields = fields;\n    if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c88b3d0bf235942b9ead3322cac5fcee1e732d8","date":1133977717,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#fillFields(FieldDoc).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#fillFields(FieldDoc).mjava","sourceNew":"  /**\n   * Given a FieldDoc object, stores the values used\n   * to sort the given document.  These values are not the raw\n   * values out of the index, but the internal representation\n   * of them.  This is so the given search hit can be collated\n   * by a MultiSearcher with other search hits.\n   * @param  doc  The FieldDoc to store sort values into.\n   * @return  The same FieldDoc passed in.\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields (final FieldDoc doc) {\n    final int n = comparators.length;\n    final Comparable[] fields = new Comparable[n];\n    for (int i=0; i<n; ++i)\n      fields[i] = comparators[i].sortValue(doc);\n    doc.fields = fields;\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return doc;\n  }\n\n","sourceOld":"  /**\n   * Given a FieldDoc object, stores the values used\n   * to sort the given document.  These values are not the raw\n   * values out of the index, but the internal representation\n   * of them.  This is so the given search hit can be collated\n   * by a MultiSearcher with other search hits.\n   * @param  doc  The FieldDoc to store sort values into.\n   * @return  The same FieldDoc passed in.\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields (final FieldDoc doc) {\n    final int n = comparators.length;\n    final Comparable[] fields = new Comparable[n];\n    for (int i=0; i<n; ++i)\n      fields[i] = comparators[i].sortValue(doc);\n    doc.fields = fields;\n    if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return doc;\n  }\n\n","bugFix":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#fillFields(FieldDoc).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given a FieldDoc object, stores the values used\n   * to sort the given document.  These values are not the raw\n   * values out of the index, but the internal representation\n   * of them.  This is so the given search hit can be collated\n   * by a MultiSearcher with other search hits.\n   * @param  doc  The FieldDoc to store sort values into.\n   * @return  The same FieldDoc passed in.\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields (final FieldDoc doc) {\n    final int n = comparators.length;\n    final Comparable[] fields = new Comparable[n];\n    for (int i=0; i<n; ++i)\n      fields[i] = comparators[i].sortValue(doc);\n    doc.fields = fields;\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ceaa9738cad9616d1831286111af106e13e0e4b":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"1c88b3d0bf235942b9ead3322cac5fcee1e732d8":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"]},"commit2Childs":{"4ceaa9738cad9616d1831286111af106e13e0e4b":["1c88b3d0bf235942b9ead3322cac5fcee1e732d8"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c88b3d0bf235942b9ead3322cac5fcee1e732d8":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}