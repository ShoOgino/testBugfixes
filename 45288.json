{"path":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogCodec#writeExternString(String).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogCodec#writeExternString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog].LogCodec#writeExternString(String).mjava","sourceNew":"    @Override\n    public void writeExternString(String s) throws IOException {\n      if (s == null) {\n        writeTag(NULL);\n        return;\n      }\n\n      // no need to synchronize globalStringMap - it's only updated before the first record is written to the log\n      Integer idx = globalStringMap.get(s);\n      if (idx == null) {\n        // write a normal string\n        writeStr(s);\n      } else {\n        // write the extern string\n        writeTag(EXTERN_STRING, idx);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void writeExternString(String s) throws IOException {\n      if (s == null) {\n        writeTag(NULL);\n        return;\n      }\n\n      // no need to synchronize globalStringMap - it's only updated before the first record is written to the log\n      Integer idx = globalStringMap.get(s);\n      if (idx == null) {\n        // write a normal string\n        writeStr(s);\n      } else {\n        // write the extern string\n        writeTag(EXTERN_STRING, idx);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogCodec#writeExternString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog].LogCodec#writeExternString(String).mjava","sourceNew":"    @Override\n    public void writeExternString(String s) throws IOException {\n      if (s == null) {\n        writeTag(NULL);\n        return;\n      }\n\n      // no need to synchronize globalStringMap - it's only updated before the first record is written to the log\n      Integer idx = globalStringMap.get(s);\n      if (idx == null) {\n        // write a normal string\n        writeStr(s);\n      } else {\n        // write the extern string\n        writeTag(EXTERN_STRING, idx);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void writeExternString(String s) throws IOException {\n      if (s == null) {\n        writeTag(NULL);\n        return;\n      }\n\n      // no need to synchronize globalStringMap - it's only updated before the first record is written to the log\n      Integer idx = globalStringMap.get(s);\n      if (idx == null) {\n        // write a normal string\n        writeStr(s);\n      } else {\n        // write the extern string\n        writeTag(EXTERN_STRING, idx);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogCodec#writeExternString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog[FSUpdateLog].LogCodec#writeExternString(String).mjava","sourceNew":"    @Override\n    public void writeExternString(String s) throws IOException {\n      if (s == null) {\n        writeTag(NULL);\n        return;\n      }\n\n      // no need to synchronize globalStringMap - it's only updated before the first record is written to the log\n      Integer idx = globalStringMap.get(s);\n      if (idx == null) {\n        // write a normal string\n        writeStr(s);\n      } else {\n        // write the extern string\n        writeTag(EXTERN_STRING, idx);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void writeExternString(String s) throws IOException {\n      if (s == null) {\n        writeTag(NULL);\n        return;\n      }\n\n      // no need to synchronize globalStringMap - it's only updated before the first record is written to the log\n      Integer idx = globalStringMap.get(s);\n      if (idx == null) {\n        // write a normal string\n        writeStr(s);\n      } else {\n        // write the extern string\n        writeTag(EXTERN_STRING, idx);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"457ac99a6d7227f954082cc753a08b18225e4553","date":1540167281,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogCodec#writeExternString(CharSequence).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog.LogCodec#writeExternString(String).mjava","sourceNew":"    @Override\n    public void writeExternString(CharSequence s) throws IOException {\n      if (s == null) {\n        writeTag(NULL);\n        return;\n      }\n\n      // no need to synchronize globalStringMap - it's only updated before the first record is written to the log\n      Integer idx = globalStringMap.get(s.toString());\n      if (idx == null) {\n        // write a normal string\n        writeStr(s);\n      } else {\n        // write the extern string\n        writeTag(EXTERN_STRING, idx);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void writeExternString(String s) throws IOException {\n      if (s == null) {\n        writeTag(NULL);\n        return;\n      }\n\n      // no need to synchronize globalStringMap - it's only updated before the first record is written to the log\n      Integer idx = globalStringMap.get(s);\n      if (idx == null) {\n        // write a normal string\n        writeStr(s);\n      } else {\n        // write the extern string\n        writeTag(EXTERN_STRING, idx);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"457ac99a6d7227f954082cc753a08b18225e4553":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["457ac99a6d7227f954082cc753a08b18225e4553"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"457ac99a6d7227f954082cc753a08b18225e4553":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","457ac99a6d7227f954082cc753a08b18225e4553","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}