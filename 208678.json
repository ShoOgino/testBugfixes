{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.ApplySuggestions#execute(SimScenario).mjava","commits":[{"id":"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","date":1571856490,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.ApplySuggestions#execute(SimScenario).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      List<Suggester.SuggestionInfo> suggestions = (List<Suggester.SuggestionInfo>) scenario.context.getOrDefault(SUGGESTIONS_CTX_PROP, Collections.emptyList());\n      int unresolvedCount = 0;\n      for (Suggester.SuggestionInfo suggestion : suggestions) {\n        SolrRequest operation = suggestion.getOperation();\n        if (operation == null) {\n          unresolvedCount++;\n          if (suggestion.getViolation() == null) {\n            log.error(\"       -- ignoring suggestion without violation and without operation: \" + suggestion);\n          }\n          continue;\n        }\n        SolrParams params = operation.getParams();\n        if (operation instanceof V2Request) {\n          params = SimUtils.v2AdminRequestToV1Params((V2Request)operation);\n        }\n        Map<String, Object> paramsMap = new LinkedHashMap<>();\n        params.toMap(paramsMap);\n        ReplicaInfo info = scenario.cluster.getSimClusterStateProvider().simGetReplicaInfo(\n            params.get(CollectionAdminParams.COLLECTION), params.get(\"replica\"));\n        if (info == null) {\n          log.error(\"Could not find ReplicaInfo for params: \" + params);\n        } else if (scenario.verbose) {\n          paramsMap.put(\"replicaInfo\", info);\n        } else if (info.getVariable(Variable.Type.CORE_IDX.tagName) != null) {\n          paramsMap.put(Variable.Type.CORE_IDX.tagName, info.getVariable(Variable.Type.CORE_IDX.tagName));\n        }\n        try {\n          scenario.cluster.request(operation);\n        } catch (Exception e) {\n          log.error(\"Aborting - error executing suggestion \" + suggestion, e);\n          break;\n        }\n      }\n      if (suggestions.size() > 0 && unresolvedCount == suggestions.size()) {\n        log.info(\"        -- aborting simulation, only \" + unresolvedCount + \" unresolved violations remain\");\n        scenario.abortLoop = true;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.ApplySuggestions#execute(SimScenario).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.ApplySuggestions#execute(SimScenario).mjava","sourceNew":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      List<Suggester.SuggestionInfo> suggestions = (List<Suggester.SuggestionInfo>) scenario.context.getOrDefault(SUGGESTIONS_CTX_PROP, Collections.emptyList());\n      int unresolvedCount = 0;\n      for (Suggester.SuggestionInfo suggestion : suggestions) {\n        SolrRequest operation = suggestion.getOperation();\n        if (operation == null) {\n          unresolvedCount++;\n          if (suggestion.getViolation() == null) {\n            log.error(\"       -- ignoring suggestion without violation and without operation: {}\", suggestion);\n          }\n          continue;\n        }\n        SolrParams params = operation.getParams();\n        if (operation instanceof V2Request) {\n          params = SimUtils.v2AdminRequestToV1Params((V2Request)operation);\n        }\n        Map<String, Object> paramsMap = new LinkedHashMap<>();\n        params.toMap(paramsMap);\n        ReplicaInfo info = scenario.cluster.getSimClusterStateProvider().simGetReplicaInfo(\n            params.get(CollectionAdminParams.COLLECTION), params.get(\"replica\"));\n        if (info == null) {\n          log.error(\"Could not find ReplicaInfo for params: {}\", params);\n        } else if (scenario.verbose) {\n          paramsMap.put(\"replicaInfo\", info);\n        } else if (info.getVariable(Variable.Type.CORE_IDX.tagName) != null) {\n          paramsMap.put(Variable.Type.CORE_IDX.tagName, info.getVariable(Variable.Type.CORE_IDX.tagName));\n        }\n        try {\n          scenario.cluster.request(operation);\n        } catch (Exception e) {\n          log.error(\"Aborting - error executing suggestion {}\", suggestion, e);\n          break;\n        }\n      }\n      if (suggestions.size() > 0 && unresolvedCount == suggestions.size()) {\n        log.info(\"        -- aborting simulation, only {} unresolved violations remain.\", unresolvedCount);\n        scenario.abortLoop = true;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      List<Suggester.SuggestionInfo> suggestions = (List<Suggester.SuggestionInfo>) scenario.context.getOrDefault(SUGGESTIONS_CTX_PROP, Collections.emptyList());\n      int unresolvedCount = 0;\n      for (Suggester.SuggestionInfo suggestion : suggestions) {\n        SolrRequest operation = suggestion.getOperation();\n        if (operation == null) {\n          unresolvedCount++;\n          if (suggestion.getViolation() == null) {\n            log.error(\"       -- ignoring suggestion without violation and without operation: \" + suggestion);\n          }\n          continue;\n        }\n        SolrParams params = operation.getParams();\n        if (operation instanceof V2Request) {\n          params = SimUtils.v2AdminRequestToV1Params((V2Request)operation);\n        }\n        Map<String, Object> paramsMap = new LinkedHashMap<>();\n        params.toMap(paramsMap);\n        ReplicaInfo info = scenario.cluster.getSimClusterStateProvider().simGetReplicaInfo(\n            params.get(CollectionAdminParams.COLLECTION), params.get(\"replica\"));\n        if (info == null) {\n          log.error(\"Could not find ReplicaInfo for params: \" + params);\n        } else if (scenario.verbose) {\n          paramsMap.put(\"replicaInfo\", info);\n        } else if (info.getVariable(Variable.Type.CORE_IDX.tagName) != null) {\n          paramsMap.put(Variable.Type.CORE_IDX.tagName, info.getVariable(Variable.Type.CORE_IDX.tagName));\n        }\n        try {\n          scenario.cluster.request(operation);\n        } catch (Exception e) {\n          log.error(\"Aborting - error executing suggestion \" + suggestion, e);\n          break;\n        }\n      }\n      if (suggestions.size() > 0 && unresolvedCount == suggestions.size()) {\n        log.info(\"        -- aborting simulation, only \" + unresolvedCount + \" unresolved violations remain\");\n        scenario.abortLoop = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.ApplySuggestions#execute(SimScenario).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.ApplySuggestions#execute(SimScenario).mjava","sourceNew":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      @SuppressWarnings({\"unchecked\"})\n      List<Suggester.SuggestionInfo> suggestions = (List<Suggester.SuggestionInfo>) scenario.context.getOrDefault(SUGGESTIONS_CTX_PROP, Collections.emptyList());\n      int unresolvedCount = 0;\n      for (Suggester.SuggestionInfo suggestion : suggestions) {\n        @SuppressWarnings({\"rawtypes\"})\n        SolrRequest operation = suggestion.getOperation();\n        if (operation == null) {\n          unresolvedCount++;\n          if (suggestion.getViolation() == null) {\n            log.error(\"       -- ignoring suggestion without violation and without operation: {}\", suggestion);\n          }\n          continue;\n        }\n        SolrParams params = operation.getParams();\n        if (operation instanceof V2Request) {\n          params = SimUtils.v2AdminRequestToV1Params((V2Request)operation);\n        }\n        Map<String, Object> paramsMap = new LinkedHashMap<>();\n        params.toMap(paramsMap);\n        ReplicaInfo info = scenario.cluster.getSimClusterStateProvider().simGetReplicaInfo(\n            params.get(CollectionAdminParams.COLLECTION), params.get(\"replica\"));\n        if (info == null) {\n          log.error(\"Could not find ReplicaInfo for params: {}\", params);\n        } else if (scenario.verbose) {\n          paramsMap.put(\"replicaInfo\", info);\n        } else if (info.getVariable(Variable.Type.CORE_IDX.tagName) != null) {\n          paramsMap.put(Variable.Type.CORE_IDX.tagName, info.getVariable(Variable.Type.CORE_IDX.tagName));\n        }\n        try {\n          scenario.cluster.request(operation);\n        } catch (Exception e) {\n          log.error(\"Aborting - error executing suggestion {}\", suggestion, e);\n          break;\n        }\n      }\n      if (suggestions.size() > 0 && unresolvedCount == suggestions.size()) {\n        log.info(\"        -- aborting simulation, only {} unresolved violations remain.\", unresolvedCount);\n        scenario.abortLoop = true;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      List<Suggester.SuggestionInfo> suggestions = (List<Suggester.SuggestionInfo>) scenario.context.getOrDefault(SUGGESTIONS_CTX_PROP, Collections.emptyList());\n      int unresolvedCount = 0;\n      for (Suggester.SuggestionInfo suggestion : suggestions) {\n        SolrRequest operation = suggestion.getOperation();\n        if (operation == null) {\n          unresolvedCount++;\n          if (suggestion.getViolation() == null) {\n            log.error(\"       -- ignoring suggestion without violation and without operation: {}\", suggestion);\n          }\n          continue;\n        }\n        SolrParams params = operation.getParams();\n        if (operation instanceof V2Request) {\n          params = SimUtils.v2AdminRequestToV1Params((V2Request)operation);\n        }\n        Map<String, Object> paramsMap = new LinkedHashMap<>();\n        params.toMap(paramsMap);\n        ReplicaInfo info = scenario.cluster.getSimClusterStateProvider().simGetReplicaInfo(\n            params.get(CollectionAdminParams.COLLECTION), params.get(\"replica\"));\n        if (info == null) {\n          log.error(\"Could not find ReplicaInfo for params: {}\", params);\n        } else if (scenario.verbose) {\n          paramsMap.put(\"replicaInfo\", info);\n        } else if (info.getVariable(Variable.Type.CORE_IDX.tagName) != null) {\n          paramsMap.put(Variable.Type.CORE_IDX.tagName, info.getVariable(Variable.Type.CORE_IDX.tagName));\n        }\n        try {\n          scenario.cluster.request(operation);\n        } catch (Exception e) {\n          log.error(\"Aborting - error executing suggestion {}\", suggestion, e);\n          break;\n        }\n      }\n      if (suggestions.size() > 0 && unresolvedCount == suggestions.size()) {\n        log.info(\"        -- aborting simulation, only {} unresolved violations remain.\", unresolvedCount);\n        scenario.abortLoop = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.ApplySuggestions#execute(SimScenario).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.ApplySuggestions#execute(SimScenario).mjava","sourceNew":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      @SuppressWarnings({\"unchecked\"})\n      List<Suggester.SuggestionInfo> suggestions = (List<Suggester.SuggestionInfo>) scenario.context.getOrDefault(SUGGESTIONS_CTX_PROP, Collections.emptyList());\n      int unresolvedCount = 0;\n      for (Suggester.SuggestionInfo suggestion : suggestions) {\n        @SuppressWarnings({\"rawtypes\"})\n        SolrRequest operation = suggestion.getOperation();\n        if (operation == null) {\n          unresolvedCount++;\n          if (suggestion.getViolation() == null) {\n            log.error(\"       -- ignoring suggestion without violation and without operation: {}\", suggestion);\n          }\n          continue;\n        }\n        SolrParams params = operation.getParams();\n        if (operation instanceof V2Request) {\n          params = SimUtils.v2AdminRequestToV1Params((V2Request)operation);\n        }\n        Map<String, Object> paramsMap = new LinkedHashMap<>();\n        params.toMap(paramsMap);\n        Replica info = scenario.cluster.getSimClusterStateProvider().simGetReplicaInfo(\n            params.get(CollectionAdminParams.COLLECTION), params.get(\"replica\"));\n        if (info == null) {\n          log.error(\"Could not find ReplicaInfo for params: {}\", params);\n        } else if (scenario.verbose) {\n          paramsMap.put(\"replicaInfo\", info);\n        } else if (info.get(Variable.Type.CORE_IDX.tagName) != null) {\n          paramsMap.put(Variable.Type.CORE_IDX.tagName, info.get(Variable.Type.CORE_IDX.tagName));\n        }\n        try {\n          scenario.cluster.request(operation);\n        } catch (Exception e) {\n          log.error(\"Aborting - error executing suggestion {}\", suggestion, e);\n          break;\n        }\n      }\n      if (suggestions.size() > 0 && unresolvedCount == suggestions.size()) {\n        log.info(\"        -- aborting simulation, only {} unresolved violations remain.\", unresolvedCount);\n        scenario.abortLoop = true;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      @SuppressWarnings({\"unchecked\"})\n      List<Suggester.SuggestionInfo> suggestions = (List<Suggester.SuggestionInfo>) scenario.context.getOrDefault(SUGGESTIONS_CTX_PROP, Collections.emptyList());\n      int unresolvedCount = 0;\n      for (Suggester.SuggestionInfo suggestion : suggestions) {\n        @SuppressWarnings({\"rawtypes\"})\n        SolrRequest operation = suggestion.getOperation();\n        if (operation == null) {\n          unresolvedCount++;\n          if (suggestion.getViolation() == null) {\n            log.error(\"       -- ignoring suggestion without violation and without operation: {}\", suggestion);\n          }\n          continue;\n        }\n        SolrParams params = operation.getParams();\n        if (operation instanceof V2Request) {\n          params = SimUtils.v2AdminRequestToV1Params((V2Request)operation);\n        }\n        Map<String, Object> paramsMap = new LinkedHashMap<>();\n        params.toMap(paramsMap);\n        ReplicaInfo info = scenario.cluster.getSimClusterStateProvider().simGetReplicaInfo(\n            params.get(CollectionAdminParams.COLLECTION), params.get(\"replica\"));\n        if (info == null) {\n          log.error(\"Could not find ReplicaInfo for params: {}\", params);\n        } else if (scenario.verbose) {\n          paramsMap.put(\"replicaInfo\", info);\n        } else if (info.getVariable(Variable.Type.CORE_IDX.tagName) != null) {\n          paramsMap.put(Variable.Type.CORE_IDX.tagName, info.getVariable(Variable.Type.CORE_IDX.tagName));\n        }\n        try {\n          scenario.cluster.request(operation);\n        } catch (Exception e) {\n          log.error(\"Aborting - error executing suggestion {}\", suggestion, e);\n          break;\n        }\n      }\n      if (suggestions.size() > 0 && unresolvedCount == suggestions.size()) {\n        log.info(\"        -- aborting simulation, only {} unresolved violations remain.\", unresolvedCount);\n        scenario.abortLoop = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.ApplySuggestions#execute(SimScenario).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      @SuppressWarnings({\"unchecked\"})\n      List<Suggester.SuggestionInfo> suggestions = (List<Suggester.SuggestionInfo>) scenario.context.getOrDefault(SUGGESTIONS_CTX_PROP, Collections.emptyList());\n      int unresolvedCount = 0;\n      for (Suggester.SuggestionInfo suggestion : suggestions) {\n        @SuppressWarnings({\"rawtypes\"})\n        SolrRequest operation = suggestion.getOperation();\n        if (operation == null) {\n          unresolvedCount++;\n          if (suggestion.getViolation() == null) {\n            log.error(\"       -- ignoring suggestion without violation and without operation: {}\", suggestion);\n          }\n          continue;\n        }\n        SolrParams params = operation.getParams();\n        if (operation instanceof V2Request) {\n          params = SimUtils.v2AdminRequestToV1Params((V2Request)operation);\n        }\n        Map<String, Object> paramsMap = new LinkedHashMap<>();\n        params.toMap(paramsMap);\n        Replica info = scenario.cluster.getSimClusterStateProvider().simGetReplicaInfo(\n            params.get(CollectionAdminParams.COLLECTION), params.get(\"replica\"));\n        if (info == null) {\n          log.error(\"Could not find ReplicaInfo for params: {}\", params);\n        } else if (scenario.verbose) {\n          paramsMap.put(\"replicaInfo\", info);\n        } else if (info.get(Variable.Type.CORE_IDX.tagName) != null) {\n          paramsMap.put(Variable.Type.CORE_IDX.tagName, info.get(Variable.Type.CORE_IDX.tagName));\n        }\n        try {\n          scenario.cluster.request(operation);\n        } catch (Exception e) {\n          log.error(\"Aborting - error executing suggestion {}\", suggestion, e);\n          break;\n        }\n      }\n      if (suggestions.size() > 0 && unresolvedCount == suggestions.size()) {\n        log.info(\"        -- aborting simulation, only {} unresolved violations remain.\", unresolvedCount);\n        scenario.abortLoop = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"e35f2dde06b35aa9904949a3a93fabd090371077":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["e35f2dde06b35aa9904949a3a93fabd090371077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}