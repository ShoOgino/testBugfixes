{"path":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#buildSlice(String,long,long).mjava","commits":[{"id":"f986320666d675a260eb4529a0c3c40595731441","date":1401729997,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#buildSlice(String,long,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Builds the actual sliced IndexInput (may apply extra offset in subclasses). **/\n  protected ByteBufferIndexInput buildSlice(String sliceDescription, long offset, long length) {\n    if (buffers == null) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n\n    final ByteBuffer newBuffers[] = buildSlice(buffers, offset, length);\n    final String newResourceDescription = (sliceDescription == null) ? toString() : (toString() + \" [slice=\" + sliceDescription + \"]\");\n    final int ofs = (int) (offset & chunkSizeMask);\n    \n    final ByteBufferIndexInput clone = newCloneInstance(newResourceDescription, newBuffers, ofs, length);\n    clone.isClone = true;\n\n    // register the new clone in our clone list to clean it up on closing:\n    if (clones != null) {\n      this.clones.put(clone, Boolean.TRUE);\n    }\n    \n    return clone;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["54f1af08a87af1f14572b41c90f55de83d083077"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54f1af08a87af1f14572b41c90f55de83d083077","date":1425143806,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#buildSlice(String,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#buildSlice(String,long,long).mjava","sourceNew":"  /** Builds the actual sliced IndexInput (may apply extra offset in subclasses). **/\n  protected ByteBufferIndexInput buildSlice(String sliceDescription, long offset, long length) {\n    if (buffers == null) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n\n    final ByteBuffer newBuffers[] = buildSlice(buffers, offset, length);\n    final int ofs = (int) (offset & chunkSizeMask);\n    \n    final ByteBufferIndexInput clone = newCloneInstance(getFullSliceDescription(sliceDescription), newBuffers, ofs, length);\n    clone.isClone = true;\n\n    // register the new clone in our clone list to clean it up on closing:\n    if (clones != null) {\n      this.clones.put(clone, Boolean.TRUE);\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  /** Builds the actual sliced IndexInput (may apply extra offset in subclasses). **/\n  protected ByteBufferIndexInput buildSlice(String sliceDescription, long offset, long length) {\n    if (buffers == null) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n\n    final ByteBuffer newBuffers[] = buildSlice(buffers, offset, length);\n    final String newResourceDescription = (sliceDescription == null) ? toString() : (toString() + \" [slice=\" + sliceDescription + \"]\");\n    final int ofs = (int) (offset & chunkSizeMask);\n    \n    final ByteBufferIndexInput clone = newCloneInstance(newResourceDescription, newBuffers, ofs, length);\n    clone.isClone = true;\n\n    // register the new clone in our clone list to clean it up on closing:\n    if (clones != null) {\n      this.clones.put(clone, Boolean.TRUE);\n    }\n    \n    return clone;\n  }\n\n","bugFix":["f986320666d675a260eb4529a0c3c40595731441"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#buildSlice(String,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#buildSlice(String,long,long).mjava","sourceNew":"  /** Builds the actual sliced IndexInput (may apply extra offset in subclasses). **/\n  protected ByteBufferIndexInput buildSlice(String sliceDescription, long offset, long length) {\n    if (buffers == null) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n\n    final ByteBuffer newBuffers[] = buildSlice(buffers, offset, length);\n    final int ofs = (int) (offset & chunkSizeMask);\n    \n    final ByteBufferIndexInput clone = newCloneInstance(getFullSliceDescription(sliceDescription), newBuffers, ofs, length);\n    clone.isClone = true;\n\n    // register the new clone in our clone list to clean it up on closing:\n    if (clones != null) {\n      this.clones.put(clone, Boolean.TRUE);\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  /** Builds the actual sliced IndexInput (may apply extra offset in subclasses). **/\n  protected ByteBufferIndexInput buildSlice(String sliceDescription, long offset, long length) {\n    if (buffers == null) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n\n    final ByteBuffer newBuffers[] = buildSlice(buffers, offset, length);\n    final String newResourceDescription = (sliceDescription == null) ? toString() : (toString() + \" [slice=\" + sliceDescription + \"]\");\n    final int ofs = (int) (offset & chunkSizeMask);\n    \n    final ByteBufferIndexInput clone = newCloneInstance(newResourceDescription, newBuffers, ofs, length);\n    clone.isClone = true;\n\n    // register the new clone in our clone list to clean it up on closing:\n    if (clones != null) {\n      this.clones.put(clone, Boolean.TRUE);\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71f8255d67554b78ea0a26a5cdb916a759261aab","date":1471024473,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#buildSlice(String,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#buildSlice(String,long,long).mjava","sourceNew":"  /** Builds the actual sliced IndexInput (may apply extra offset in subclasses). **/\n  protected ByteBufferIndexInput buildSlice(String sliceDescription, long offset, long length) {\n    if (buffers == null) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n\n    final ByteBuffer newBuffers[] = buildSlice(buffers, offset, length);\n    final int ofs = (int) (offset & chunkSizeMask);\n    \n    final ByteBufferIndexInput clone = newCloneInstance(getFullSliceDescription(sliceDescription), newBuffers, ofs, length);\n    clone.isClone = true;\n    \n    return clone;\n  }\n\n","sourceOld":"  /** Builds the actual sliced IndexInput (may apply extra offset in subclasses). **/\n  protected ByteBufferIndexInput buildSlice(String sliceDescription, long offset, long length) {\n    if (buffers == null) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n\n    final ByteBuffer newBuffers[] = buildSlice(buffers, offset, length);\n    final int ofs = (int) (offset & chunkSizeMask);\n    \n    final ByteBufferIndexInput clone = newCloneInstance(getFullSliceDescription(sliceDescription), newBuffers, ofs, length);\n    clone.isClone = true;\n\n    // register the new clone in our clone list to clean it up on closing:\n    if (clones != null) {\n      this.clones.put(clone, Boolean.TRUE);\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#buildSlice(String,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#buildSlice(String,long,long).mjava","sourceNew":"  /** Builds the actual sliced IndexInput (may apply extra offset in subclasses). **/\n  protected ByteBufferIndexInput buildSlice(String sliceDescription, long offset, long length) {\n    if (buffers == null) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n\n    final ByteBuffer newBuffers[] = buildSlice(buffers, offset, length);\n    final int ofs = (int) (offset & chunkSizeMask);\n    \n    final ByteBufferIndexInput clone = newCloneInstance(getFullSliceDescription(sliceDescription), newBuffers, ofs, length);\n    clone.isClone = true;\n    \n    return clone;\n  }\n\n","sourceOld":"  /** Builds the actual sliced IndexInput (may apply extra offset in subclasses). **/\n  protected ByteBufferIndexInput buildSlice(String sliceDescription, long offset, long length) {\n    if (buffers == null) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n\n    final ByteBuffer newBuffers[] = buildSlice(buffers, offset, length);\n    final int ofs = (int) (offset & chunkSizeMask);\n    \n    final ByteBufferIndexInput clone = newCloneInstance(getFullSliceDescription(sliceDescription), newBuffers, ofs, length);\n    clone.isClone = true;\n\n    // register the new clone in our clone list to clean it up on closing:\n    if (clones != null) {\n      this.clones.put(clone, Boolean.TRUE);\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#buildSlice(String,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#buildSlice(String,long,long).mjava","sourceNew":"  /** Builds the actual sliced IndexInput (may apply extra offset in subclasses). **/\n  protected ByteBufferIndexInput buildSlice(String sliceDescription, long offset, long length) {\n    if (buffers == null) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n\n    final ByteBuffer newBuffers[] = buildSlice(buffers, offset, length);\n    final int ofs = (int) (offset & chunkSizeMask);\n    \n    final ByteBufferIndexInput clone = newCloneInstance(getFullSliceDescription(sliceDescription), newBuffers, ofs, length);\n    clone.isClone = true;\n    \n    return clone;\n  }\n\n","sourceOld":"  /** Builds the actual sliced IndexInput (may apply extra offset in subclasses). **/\n  protected ByteBufferIndexInput buildSlice(String sliceDescription, long offset, long length) {\n    if (buffers == null) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n\n    final ByteBuffer newBuffers[] = buildSlice(buffers, offset, length);\n    final int ofs = (int) (offset & chunkSizeMask);\n    \n    final ByteBufferIndexInput clone = newCloneInstance(getFullSliceDescription(sliceDescription), newBuffers, ofs, length);\n    clone.isClone = true;\n\n    // register the new clone in our clone list to clean it up on closing:\n    if (clones != null) {\n      this.clones.put(clone, Boolean.TRUE);\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#buildSlice(String,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBufferIndexInput#buildSlice(String,long,long).mjava","sourceNew":"  /** Builds the actual sliced IndexInput (may apply extra offset in subclasses). **/\n  protected ByteBufferIndexInput buildSlice(String sliceDescription, long offset, long length) {\n    if (buffers == null) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n\n    final ByteBuffer newBuffers[] = buildSlice(buffers, offset, length);\n    final int ofs = (int) (offset & chunkSizeMask);\n    \n    final ByteBufferIndexInput clone = newCloneInstance(getFullSliceDescription(sliceDescription), newBuffers, ofs, length);\n    clone.isClone = true;\n    \n    return clone;\n  }\n\n","sourceOld":"  /** Builds the actual sliced IndexInput (may apply extra offset in subclasses). **/\n  protected ByteBufferIndexInput buildSlice(String sliceDescription, long offset, long length) {\n    if (buffers == null) {\n      throw new AlreadyClosedException(\"Already closed: \" + this);\n    }\n\n    final ByteBuffer newBuffers[] = buildSlice(buffers, offset, length);\n    final int ofs = (int) (offset & chunkSizeMask);\n    \n    final ByteBufferIndexInput clone = newCloneInstance(getFullSliceDescription(sliceDescription), newBuffers, ofs, length);\n    clone.isClone = true;\n\n    // register the new clone in our clone list to clean it up on closing:\n    if (clones != null) {\n      this.clones.put(clone, Boolean.TRUE);\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f986320666d675a260eb4529a0c3c40595731441","54f1af08a87af1f14572b41c90f55de83d083077"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["54f1af08a87af1f14572b41c90f55de83d083077","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"f986320666d675a260eb4529a0c3c40595731441":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"54f1af08a87af1f14572b41c90f55de83d083077":["f986320666d675a260eb4529a0c3c40595731441"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["54f1af08a87af1f14572b41c90f55de83d083077","71f8255d67554b78ea0a26a5cdb916a759261aab"],"71f8255d67554b78ea0a26a5cdb916a759261aab":["54f1af08a87af1f14572b41c90f55de83d083077"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["54f1af08a87af1f14572b41c90f55de83d083077","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f986320666d675a260eb4529a0c3c40595731441":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","54f1af08a87af1f14572b41c90f55de83d083077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f986320666d675a260eb4529a0c3c40595731441"],"54f1af08a87af1f14572b41c90f55de83d083077":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","71f8255d67554b78ea0a26a5cdb916a759261aab","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"71f8255d67554b78ea0a26a5cdb916a759261aab":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}