{"path":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    writer.setMergePolicy(mp);\n\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(newRandom(),\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(newRandom(),\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(newRandom(),\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    Random random = newRandom();\n    MockRAMDirectory directory = newDirectory(random);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(newRandom(),\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    Random random = newRandom();\n    MockDirectoryWrapper directory = newDirectory(random);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    Random random = newRandom();\n    MockRAMDirectory directory = newDirectory(random);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    Random random = newRandom();\n    MockDirectoryWrapper directory = newDirectory(random);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMergePolicy(mp));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["06584e6e98d592b34e1329b384182f368d2025e8","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["06584e6e98d592b34e1329b384182f368d2025e8"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","132903c28af3aa6f67284b78de91c0f0a99488c2"],"c19f985e36a65cc969e8e564fe337a0d41512075":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["132903c28af3aa6f67284b78de91c0f0a99488c2","c19f985e36a65cc969e8e564fe337a0d41512075"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["06584e6e98d592b34e1329b384182f368d2025e8","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"06584e6e98d592b34e1329b384182f368d2025e8":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}