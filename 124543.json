{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointMultiTermQuery#GeoPointMultiTermQuery(String,TermEncoding,double,double,double,double).mjava","commits":[{"id":"8a093d23e938d132b81b5f2de3d6b168afe3608e","date":1455076308,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointMultiTermQuery#GeoPointMultiTermQuery(String,TermEncoding,double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointMultiTermQuery#GeoPointMultiTermQuery(String,TermEncoding,double,double,double,double).mjava","sourceNew":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointMultiTermQuery(String field, final TermEncoding termEncoding, final double minLon, final double minLat, final double maxLon, final double maxLat) {\n    super(field);\n\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n\n    final long minHash = GeoEncodingUtils.mortonHash(minLon, minLat);\n    final long maxHash = GeoEncodingUtils.mortonHash(maxLon, maxLat);\n    this.minLon = GeoEncodingUtils.mortonUnhashLon(minHash);\n    this.minLat = GeoEncodingUtils.mortonUnhashLat(minHash);\n    this.maxLon = GeoEncodingUtils.mortonUnhashLon(maxHash);\n    this.maxLat = GeoEncodingUtils.mortonUnhashLat(maxHash);\n\n    this.maxShift = computeMaxShift();\n    this.termEncoding = termEncoding;\n    this.cellComparator = newCellComparator();\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointMultiTermQuery(String field, final TermEncoding termEncoding, final double minLon, final double minLat, final double maxLon, final double maxLat) {\n    super(field);\n\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n\n    final long minHash = GeoEncodingUtils.mortonHash(minLon, minLat);\n    final long maxHash = GeoEncodingUtils.mortonHash(maxLon, maxLat);\n    this.minLon = GeoEncodingUtils.mortonUnhashLon(minHash);\n    this.minLat = GeoEncodingUtils.mortonUnhashLat(minHash);\n    this.maxLon = GeoEncodingUtils.mortonUnhashLon(maxHash);\n    this.maxLat = GeoEncodingUtils.mortonUnhashLat(maxHash);\n\n    this.maxShift = computeMaxShift();\n    this.termEncoding = termEncoding;\n    this.cellComparator = newCellComparator();\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointMultiTermQuery#GeoPointMultiTermQuery(String,TermEncoding,double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointMultiTermQuery#GeoPointMultiTermQuery(String,TermEncoding,double,double,double,double).mjava","sourceNew":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointMultiTermQuery(String field, final TermEncoding termEncoding, final double minLat, final double maxLat, final double minLon, final double maxLon) {\n    super(field);\n\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n\n    final long minHash = GeoEncodingUtils.mortonHash(minLat, minLon);\n    final long maxHash = GeoEncodingUtils.mortonHash(maxLat, maxLon);\n    this.minLat = GeoEncodingUtils.mortonUnhashLat(minHash);\n    this.maxLat = GeoEncodingUtils.mortonUnhashLat(maxHash);\n    this.minLon = GeoEncodingUtils.mortonUnhashLon(minHash);\n    this.maxLon = GeoEncodingUtils.mortonUnhashLon(maxHash);\n\n    this.maxShift = computeMaxShift();\n    this.termEncoding = termEncoding;\n    this.cellComparator = newCellComparator();\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointMultiTermQuery(String field, final TermEncoding termEncoding, final double minLon, final double minLat, final double maxLon, final double maxLat) {\n    super(field);\n\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n\n    final long minHash = GeoEncodingUtils.mortonHash(minLon, minLat);\n    final long maxHash = GeoEncodingUtils.mortonHash(maxLon, maxLat);\n    this.minLon = GeoEncodingUtils.mortonUnhashLon(minHash);\n    this.minLat = GeoEncodingUtils.mortonUnhashLat(minHash);\n    this.maxLon = GeoEncodingUtils.mortonUnhashLon(maxHash);\n    this.maxLat = GeoEncodingUtils.mortonUnhashLat(maxHash);\n\n    this.maxShift = computeMaxShift();\n    this.termEncoding = termEncoding;\n    this.cellComparator = newCellComparator();\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","bugFix":null,"bugIntro":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0da288484d638cec72e8fc33363e4c0532d35ff0","date":1459115234,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointMultiTermQuery#GeoPointMultiTermQuery(String,TermEncoding,double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointMultiTermQuery#GeoPointMultiTermQuery(String,TermEncoding,double,double,double,double).mjava","sourceNew":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointMultiTermQuery(String field, final TermEncoding termEncoding, final double minLat, final double maxLat, final double minLon, final double maxLon) {\n    super(field);\n\n    GeoUtils.checkLatitude(minLat);\n    GeoUtils.checkLatitude(maxLat);\n    GeoUtils.checkLongitude(minLon);\n    GeoUtils.checkLongitude(maxLon);\n\n    final long minHash = GeoEncodingUtils.mortonHash(minLat, minLon);\n    final long maxHash = GeoEncodingUtils.mortonHash(maxLat, maxLon);\n    this.minLat = GeoEncodingUtils.mortonUnhashLat(minHash);\n    this.maxLat = GeoEncodingUtils.mortonUnhashLat(maxHash);\n    this.minLon = GeoEncodingUtils.mortonUnhashLon(minHash);\n    this.maxLon = GeoEncodingUtils.mortonUnhashLon(maxHash);\n\n    this.maxShift = computeMaxShift();\n    this.termEncoding = termEncoding;\n    this.cellComparator = newCellComparator();\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointMultiTermQuery(String field, final TermEncoding termEncoding, final double minLat, final double maxLat, final double minLon, final double maxLon) {\n    super(field);\n\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n\n    final long minHash = GeoEncodingUtils.mortonHash(minLat, minLon);\n    final long maxHash = GeoEncodingUtils.mortonHash(maxLat, maxLon);\n    this.minLat = GeoEncodingUtils.mortonUnhashLat(minHash);\n    this.maxLat = GeoEncodingUtils.mortonUnhashLat(maxHash);\n    this.minLon = GeoEncodingUtils.mortonUnhashLon(minHash);\n    this.maxLon = GeoEncodingUtils.mortonUnhashLon(maxHash);\n\n    this.maxShift = computeMaxShift();\n    this.termEncoding = termEncoding;\n    this.cellComparator = newCellComparator();\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97","date":1459595815,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointMultiTermQuery#GeoPointMultiTermQuery(String,TermEncoding,double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointMultiTermQuery#GeoPointMultiTermQuery(String,TermEncoding,double,double,double,double).mjava","sourceNew":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointMultiTermQuery(String field, final TermEncoding termEncoding, final double minLat, final double maxLat, final double minLon, final double maxLon) {\n    super(field);\n\n    GeoUtils.checkLatitude(minLat);\n    GeoUtils.checkLatitude(maxLat);\n    GeoUtils.checkLongitude(minLon);\n    GeoUtils.checkLongitude(maxLon);\n\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n\n    this.maxShift = computeMaxShift();\n    this.termEncoding = termEncoding;\n    this.cellComparator = newCellComparator();\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointMultiTermQuery(String field, final TermEncoding termEncoding, final double minLat, final double maxLat, final double minLon, final double maxLon) {\n    super(field);\n\n    GeoUtils.checkLatitude(minLat);\n    GeoUtils.checkLatitude(maxLat);\n    GeoUtils.checkLongitude(minLon);\n    GeoUtils.checkLongitude(maxLon);\n\n    final long minHash = GeoEncodingUtils.mortonHash(minLat, minLon);\n    final long maxHash = GeoEncodingUtils.mortonHash(maxLat, maxLon);\n    this.minLat = GeoEncodingUtils.mortonUnhashLat(minHash);\n    this.maxLat = GeoEncodingUtils.mortonUnhashLat(maxHash);\n    this.minLon = GeoEncodingUtils.mortonUnhashLon(minHash);\n    this.maxLon = GeoEncodingUtils.mortonUnhashLon(maxHash);\n\n    this.maxShift = computeMaxShift();\n    this.termEncoding = termEncoding;\n    this.cellComparator = newCellComparator();\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","bugFix":["62cc423073d23f01208c6cf85844dedd80011121","ec996bf2daff09d61a876319e8fae4aebbea58e3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be46ccf1a05985ba9fec84cb8674b607a23d5442","date":1465576866,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointMultiTermQuery#GeoPointMultiTermQuery(String,double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointMultiTermQuery#GeoPointMultiTermQuery(String,TermEncoding,double,double,double,double).mjava","sourceNew":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointMultiTermQuery(String field, final double minLat, final double maxLat, final double minLon, final double maxLon) {\n    super(field);\n\n    GeoUtils.checkLatitude(minLat);\n    GeoUtils.checkLatitude(maxLat);\n    GeoUtils.checkLongitude(minLon);\n    GeoUtils.checkLongitude(maxLon);\n\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n\n    this.maxShift = computeMaxShift();\n    this.cellComparator = newCellComparator();\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointMultiTermQuery(String field, final TermEncoding termEncoding, final double minLat, final double maxLat, final double minLon, final double maxLon) {\n    super(field);\n\n    GeoUtils.checkLatitude(minLat);\n    GeoUtils.checkLatitude(maxLat);\n    GeoUtils.checkLongitude(minLon);\n    GeoUtils.checkLongitude(maxLon);\n\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n\n    this.maxShift = computeMaxShift();\n    this.termEncoding = termEncoding;\n    this.cellComparator = newCellComparator();\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointMultiTermQuery#GeoPointMultiTermQuery(String,TermEncoding,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointMultiTermQuery(String field, final TermEncoding termEncoding, final double minLat, final double maxLat, final double minLon, final double maxLon) {\n    super(field);\n\n    GeoUtils.checkLatitude(minLat);\n    GeoUtils.checkLatitude(maxLat);\n    GeoUtils.checkLongitude(minLon);\n    GeoUtils.checkLongitude(maxLon);\n\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n\n    this.maxShift = computeMaxShift();\n    this.termEncoding = termEncoding;\n    this.cellComparator = newCellComparator();\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["8a093d23e938d132b81b5f2de3d6b168afe3608e"],"0da288484d638cec72e8fc33363e4c0532d35ff0":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"be46ccf1a05985ba9fec84cb8674b607a23d5442":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97":["0da288484d638cec72e8fc33363e4c0532d35ff0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97","be46ccf1a05985ba9fec84cb8674b607a23d5442"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["be46ccf1a05985ba9fec84cb8674b607a23d5442"]},"commit2Childs":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["0da288484d638cec72e8fc33363e4c0532d35ff0"],"0da288484d638cec72e8fc33363e4c0532d35ff0":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a093d23e938d132b81b5f2de3d6b168afe3608e"],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"be46ccf1a05985ba9fec84cb8674b607a23d5442":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97":["be46ccf1a05985ba9fec84cb8674b607a23d5442","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}