{"path":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor#approxBestDistanceSquared(byte[],byte[],float[]).mjava","commits":[{"id":"1b73cddaec09172a09da82e758d0014ab8810ffa","date":1506898255,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor#approxBestDistanceSquared(byte[],byte[],float[]).mjava","pathOld":"/dev/null","sourceNew":"  private static double approxBestDistanceSquared(byte[] minPackedValue, byte[] maxPackedValue, float[] value) {\n    boolean insideCell = true;\n    float[] min = new float[value.length];\n    float[] max = new float[value.length];\n    double[] closest = new double[value.length];\n    for (int i = 0, offset = 0 ; i < value.length ; ++i, offset += Float.BYTES) {\n      min[i] = FloatPoint.decodeDimension(minPackedValue, offset);\n      max[i] = FloatPoint.decodeDimension(maxPackedValue, offset);\n      if (insideCell) {\n        if (value[i] < min[i] || value[i] > max[i]) {\n          insideCell = false;\n        }\n      }\n      double minDiff = Math.abs((double)value[i] - (double)min[i]);\n      double maxDiff = Math.abs((double)value[i] - (double)max[i]);\n      closest[i] = minDiff < maxDiff ? minDiff : maxDiff;\n    }\n    if (insideCell) {\n      return 0.0f;\n    }\n    double sumOfSquaredDiffs = 0.0d;\n    for (int d = 0 ; d < value.length ; ++d) {\n      sumOfSquaredDiffs += closest[d] * closest[d];\n    }\n    return sumOfSquaredDiffs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor#approxBestDistanceSquared(byte[],byte[],float[]).mjava","pathOld":"/dev/null","sourceNew":"  private static double approxBestDistanceSquared(byte[] minPackedValue, byte[] maxPackedValue, float[] value) {\n    boolean insideCell = true;\n    float[] min = new float[value.length];\n    float[] max = new float[value.length];\n    double[] closest = new double[value.length];\n    for (int i = 0, offset = 0 ; i < value.length ; ++i, offset += Float.BYTES) {\n      min[i] = FloatPoint.decodeDimension(minPackedValue, offset);\n      max[i] = FloatPoint.decodeDimension(maxPackedValue, offset);\n      if (insideCell) {\n        if (value[i] < min[i] || value[i] > max[i]) {\n          insideCell = false;\n        }\n      }\n      double minDiff = Math.abs((double)value[i] - (double)min[i]);\n      double maxDiff = Math.abs((double)value[i] - (double)max[i]);\n      closest[i] = minDiff < maxDiff ? minDiff : maxDiff;\n    }\n    if (insideCell) {\n      return 0.0f;\n    }\n    double sumOfSquaredDiffs = 0.0d;\n    for (int d = 0 ; d < value.length ; ++d) {\n      sumOfSquaredDiffs += closest[d] * closest[d];\n    }\n    return sumOfSquaredDiffs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"097748fa4ff327a26994476115f52d1a899b549f","date":1568267320,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/FloatPointNearestNeighbor#approxBestDistanceSquared(byte[],byte[],float[]).mjava","sourceNew":null,"sourceOld":"  private static double approxBestDistanceSquared(byte[] minPackedValue, byte[] maxPackedValue, float[] value) {\n    boolean insideCell = true;\n    float[] min = new float[value.length];\n    float[] max = new float[value.length];\n    double[] closest = new double[value.length];\n    for (int i = 0, offset = 0 ; i < value.length ; ++i, offset += Float.BYTES) {\n      min[i] = FloatPoint.decodeDimension(minPackedValue, offset);\n      max[i] = FloatPoint.decodeDimension(maxPackedValue, offset);\n      if (insideCell) {\n        if (value[i] < min[i] || value[i] > max[i]) {\n          insideCell = false;\n        }\n      }\n      double minDiff = Math.abs((double)value[i] - (double)min[i]);\n      double maxDiff = Math.abs((double)value[i] - (double)max[i]);\n      closest[i] = minDiff < maxDiff ? minDiff : maxDiff;\n    }\n    if (insideCell) {\n      return 0.0f;\n    }\n    double sumOfSquaredDiffs = 0.0d;\n    for (int d = 0 ; d < value.length ; ++d) {\n      sumOfSquaredDiffs += closest[d] * closest[d];\n    }\n    return sumOfSquaredDiffs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b73cddaec09172a09da82e758d0014ab8810ffa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1b73cddaec09172a09da82e758d0014ab8810ffa"],"097748fa4ff327a26994476115f52d1a899b549f":["1b73cddaec09172a09da82e758d0014ab8810ffa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["097748fa4ff327a26994476115f52d1a899b549f"]},"commit2Childs":{"1b73cddaec09172a09da82e758d0014ab8810ffa":["6240b74b884c5587f2a4062dd27d6c32bf228889","097748fa4ff327a26994476115f52d1a899b549f"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"097748fa4ff327a26994476115f52d1a899b549f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b73cddaec09172a09da82e758d0014ab8810ffa","6240b74b884c5587f2a4062dd27d6c32bf228889"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}