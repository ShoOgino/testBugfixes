{"path":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#setUp().mjava","commits":[{"id":"c83f985d9828d30801541f1eed26aa3169646baf","date":1409315453,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n    \n    zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.create(\"/protectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/protectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(\"/unprotectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/unprotectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.close();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n    \n    zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.create(\"/protectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/protectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(\"/unprotectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/unprotectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.close();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n    \n    zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.create(\"/protectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/protectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(\"/unprotectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/unprotectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.close();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n    \n    zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.create(\"/protectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/protectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(\"/unprotectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/unprotectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.close();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n    \n    zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.create(\"/protectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/protectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(\"/unprotectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/unprotectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.close();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n    \n    zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.create(\"/protectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/protectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(\"/unprotectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/unprotectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.close();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n    \n    zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.create(\"/protectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/protectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(\"/unprotectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/unprotectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.close();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    zkDir = createTempDir().resolve(\"zookeeper/server1/data\");\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.create(\"/protectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/protectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(\"/unprotectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/unprotectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.close();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n    \n    zkDir = createTempDir() + File.separator\n        + \"zookeeper/server1/data\";\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.create(\"/protectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/protectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(\"/unprotectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/unprotectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.close();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (log.isInfoEnabled()) {\n      log.info(\"####SETUP_START {}\", getTestName());\n    }\n    createTempDir();\n\n    zkDir = createTempDir().resolve(\"zookeeper/server1/data\");\n    log.info(\"ZooKeeper dataDir:{}\", zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.create(\"/protectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/protectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(\"/unprotectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/unprotectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.close();\n\n    if (log.isInfoEnabled()) {\n      log.info(\"####SETUP_END {}\", getTestName());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    log.info(\"####SETUP_START \" + getTestName());\n    createTempDir();\n\n    zkDir = createTempDir().resolve(\"zookeeper/server1/data\");\n    log.info(\"ZooKeeper dataDir:\" + zkDir);\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(\"/solr\", false, true);\n    zkClient.close();\n\n    zkClient = new SolrZkClient(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    zkClient.create(\"/protectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/protectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(\"/unprotectedCreateNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.makePath(\"/unprotectedMakePathNode\", \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.create(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, \"content\".getBytes(DATA_ENCODING), CreateMode.PERSISTENT, false);\n    zkClient.close();\n\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["20be168d828ac40d262f85364d02f15b491dd88b"],"20be168d828ac40d262f85364d02f15b491dd88b":["c83f985d9828d30801541f1eed26aa3169646baf"],"c83f985d9828d30801541f1eed26aa3169646baf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c83f985d9828d30801541f1eed26aa3169646baf","20be168d828ac40d262f85364d02f15b491dd88b"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["c83f985d9828d30801541f1eed26aa3169646baf","20be168d828ac40d262f85364d02f15b491dd88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c83f985d9828d30801541f1eed26aa3169646baf"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"20be168d828ac40d262f85364d02f15b491dd88b":["1778938cb7fb298e6e07a43e2d5acaf552d61518","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"c83f985d9828d30801541f1eed26aa3169646baf":["20be168d828ac40d262f85364d02f15b491dd88b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}