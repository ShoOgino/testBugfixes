{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfo>(size());\n      sis.segmentSet = new HashSet<SegmentInfo>(size());\n      sis.cachedUnmodifiableList = null;\n      sis.cachedUnmodifiableSet = null;\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add((SegmentInfo) info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfo>(size());\n      sis.segmentSet = new HashSet<SegmentInfo>(size());\n      sis.cachedUnmodifiableList = null;\n      sis.cachedUnmodifiableSet = null;\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add((SegmentInfo) info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5bf508bfc98425280b4bb708ab724f718705c9d","date":1332973345,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public SegmentInfos clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfo>(size());\n      sis.segmentSet = new HashSet<SegmentInfo>(size());\n      sis.cachedUnmodifiableList = null;\n      sis.cachedUnmodifiableSet = null;\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add((SegmentInfo) info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public Object clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfo>(size());\n      sis.segmentSet = new HashSet<SegmentInfo>(size());\n      sis.cachedUnmodifiableList = null;\n      sis.cachedUnmodifiableSet = null;\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add((SegmentInfo) info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public SegmentInfos clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfo>(size());\n      sis.segmentSet = new HashSet<SegmentInfo>(size());\n      sis.cachedUnmodifiableList = null;\n      sis.cachedUnmodifiableSet = null;\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add(info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public SegmentInfos clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfo>(size());\n      sis.segmentSet = new HashSet<SegmentInfo>(size());\n      sis.cachedUnmodifiableList = null;\n      sis.cachedUnmodifiableSet = null;\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add((SegmentInfo) info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b499b901349db9e283a9d9427099d9e7d9a45a3","date":1337608641,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public SegmentInfos clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfo>(size());\n      sis.segmentSet = new HashSet<SegmentInfo>(size());\n      sis.cachedUnmodifiableList = null;\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add(info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public SegmentInfos clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfo>(size());\n      sis.segmentSet = new HashSet<SegmentInfo>(size());\n      sis.cachedUnmodifiableList = null;\n      sis.cachedUnmodifiableSet = null;\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add(info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public SegmentInfos clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfoPerCommit>(size());\n      for(final SegmentInfoPerCommit info : this) {\n        assert info.info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add(info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public SegmentInfos clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfo>(size());\n      sis.segmentSet = new HashSet<SegmentInfo>(size());\n      sis.cachedUnmodifiableList = null;\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add(info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public SegmentInfos clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfoPerCommit>(size());\n      for(final SegmentInfoPerCommit info : this) {\n        assert info.info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add(info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public SegmentInfos clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfo>(size());\n      sis.segmentSet = new HashSet<SegmentInfo>(size());\n      sis.cachedUnmodifiableList = null;\n      sis.cachedUnmodifiableSet = null;\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add(info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public SegmentInfos clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentCommitInfo>(size());\n      for(final SegmentCommitInfo info : this) {\n        assert info.info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add(info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public SegmentInfos clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentInfoPerCommit>(size());\n      for(final SegmentInfoPerCommit info : this) {\n        assert info.info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add(info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#clone().mjava","sourceNew":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public SegmentInfos clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<>(size());\n      for(final SegmentCommitInfo info : this) {\n        assert info.info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add(info.clone());\n      }\n      sis.userData = new HashMap<>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a copy of this instance, also copying each\n   * SegmentInfo.\n   */\n  \n  @Override\n  public SegmentInfos clone() {\n    try {\n      final SegmentInfos sis = (SegmentInfos) super.clone();\n      // deep clone, first recreate all collections:\n      sis.segments = new ArrayList<SegmentCommitInfo>(size());\n      for(final SegmentCommitInfo info : this) {\n        assert info.info.getCodec() != null;\n        // dont directly access segments, use add method!!!\n        sis.add(info.clone());\n      }\n      sis.userData = new HashMap<String,String>(userData);\n      return sis;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(\"should not happen\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b499b901349db9e283a9d9427099d9e7d9a45a3":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["399d5903979ca52514d2bc7e3a362e1c45885c94","9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["7b499b901349db9e283a9d9427099d9e7d9a45a3"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"7b499b901349db9e283a9d9427099d9e7d9a45a3":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["7b499b901349db9e283a9d9427099d9e7d9a45a3","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}