{"path":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms().mjava","sourceNew":"  private void mergeNorms() throws IOException {\n    byte[] normBuffer = null;\n    IndexOutput output = null;\n    try {\n      int numFieldInfos = fieldInfos.size();\n      for (int i = 0; i < numFieldInfos; i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.isIndexed && !fi.omitNorms) {\n          if (output == null) { \n            output = directory.createOutput(segment + \".\" + IndexFileNames.NORMS_EXTENSION);\n            output.writeBytes(NORMS_HEADER,NORMS_HEADER.length);\n          }\n          for ( IndexReader reader : readers) {\n            int maxDoc = reader.maxDoc();\n            if (normBuffer == null || normBuffer.length < maxDoc) {\n              // the buffer is too small for the current segment\n              normBuffer = new byte[maxDoc];\n            }\n            reader.norms(fi.name, normBuffer, 0);\n            if (!reader.hasDeletions()) {\n              //optimized case for segments without deleted docs\n              output.writeBytes(normBuffer, maxDoc);\n            } else {\n              // this segment has deleted docs, so we have to\n              // check for every doc if it is deleted or not\n              for (int k = 0; k < maxDoc; k++) {\n                if (!reader.isDeleted(k)) {\n                  output.writeByte(normBuffer[k]);\n                }\n              }\n            }\n            checkAbort.work(maxDoc);\n          }\n        }\n      }\n    } finally {\n      if (output != null) { \n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  private void mergeNorms() throws IOException {\n    byte[] normBuffer = null;\n    IndexOutput output = null;\n    try {\n      int numFieldInfos = fieldInfos.size();\n      for (int i = 0; i < numFieldInfos; i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.isIndexed && !fi.omitNorms) {\n          if (output == null) { \n            output = directory.createOutput(segment + \".\" + IndexFileNames.NORMS_EXTENSION);\n            output.writeBytes(NORMS_HEADER,NORMS_HEADER.length);\n          }\n          for ( IndexReader reader : readers) {\n            int maxDoc = reader.maxDoc();\n            if (normBuffer == null || normBuffer.length < maxDoc) {\n              // the buffer is too small for the current segment\n              normBuffer = new byte[maxDoc];\n            }\n            reader.norms(fi.name, normBuffer, 0);\n            if (!reader.hasDeletions()) {\n              //optimized case for segments without deleted docs\n              output.writeBytes(normBuffer, maxDoc);\n            } else {\n              // this segment has deleted docs, so we have to\n              // check for every doc if it is deleted or not\n              for (int k = 0; k < maxDoc; k++) {\n                if (!reader.isDeleted(k)) {\n                  output.writeByte(normBuffer[k]);\n                }\n              }\n            }\n            checkAbort.work(maxDoc);\n          }\n        }\n      }\n    } finally {\n      if (output != null) { \n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#mergeNorms().mjava","sourceNew":null,"sourceOld":"  private void mergeNorms() throws IOException {\n    byte[] normBuffer = null;\n    IndexOutput output = null;\n    try {\n      int numFieldInfos = fieldInfos.size();\n      for (int i = 0; i < numFieldInfos; i++) {\n        FieldInfo fi = fieldInfos.fieldInfo(i);\n        if (fi.isIndexed && !fi.omitNorms) {\n          if (output == null) { \n            output = directory.createOutput(segment + \".\" + IndexFileNames.NORMS_EXTENSION);\n            output.writeBytes(NORMS_HEADER,NORMS_HEADER.length);\n          }\n          for ( IndexReader reader : readers) {\n            int maxDoc = reader.maxDoc();\n            if (normBuffer == null || normBuffer.length < maxDoc) {\n              // the buffer is too small for the current segment\n              normBuffer = new byte[maxDoc];\n            }\n            reader.norms(fi.name, normBuffer, 0);\n            if (!reader.hasDeletions()) {\n              //optimized case for segments without deleted docs\n              output.writeBytes(normBuffer, maxDoc);\n            } else {\n              // this segment has deleted docs, so we have to\n              // check for every doc if it is deleted or not\n              for (int k = 0; k < maxDoc; k++) {\n                if (!reader.isDeleted(k)) {\n                  output.writeByte(normBuffer[k]);\n                }\n              }\n            }\n            checkAbort.work(maxDoc);\n          }\n        }\n      }\n    } finally {\n      if (output != null) { \n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}