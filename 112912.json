{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testRandomPolygons().mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testRandomPolygons().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomPolygons() throws Exception {\n    long avgIdxTime = 0;\n    int numVertices;\n    int numPolys = RandomNumbers.randomIntBetween(random(), 50, 100);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    long start, end;\n\n    Polygon polygon;\n    Document document;\n    System.out.println(\"generating \" + numPolys + \" polygons\");\n    for (int i = 0; i < numPolys;) {\n      document = new Document();\n      numVertices = TestUtil.nextInt(random(), 200000, 500000);\n      polygon = GeoTestUtil.createRegularPolygon(0, 0, atLeast(1000000), numVertices);\n      System.out.println(\"adding polygon \" + i);\n      start = System.currentTimeMillis();\n      addPolygonsToDoc(FIELDNAME, document, polygon);\n      writer.addDocument(document);\n      end = System.currentTimeMillis();\n      avgIdxTime += ((end - start) - avgIdxTime) / ++i;\n    }\n    System.out.println(\"avg index time: \" + avgIdxTime);\n\n    // search within 50km and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    start = System.currentTimeMillis();\n    assertEquals(0, searcher.count(newRectQuery(\"field\", -89.9, -89.8, -179.9, -179.8d)));\n    end = System.currentTimeMillis();\n\n    System.out.println(\"search: \" + (end - start));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testRandomPolygons().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomPolygons() throws Exception {\n    long avgIdxTime = 0;\n    int numVertices;\n    int numPolys = RandomNumbers.randomIntBetween(random(), 50, 100);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    long start, end;\n\n    Polygon polygon;\n    Document document;\n    System.out.println(\"generating \" + numPolys + \" polygons\");\n    for (int i = 0; i < numPolys;) {\n      document = new Document();\n      numVertices = TestUtil.nextInt(random(), 200000, 500000);\n      polygon = GeoTestUtil.createRegularPolygon(0, 0, atLeast(1000000), numVertices);\n      System.out.println(\"adding polygon \" + i);\n      start = System.currentTimeMillis();\n      addPolygonsToDoc(FIELDNAME, document, polygon);\n      writer.addDocument(document);\n      end = System.currentTimeMillis();\n      avgIdxTime += ((end - start) - avgIdxTime) / ++i;\n    }\n    System.out.println(\"avg index time: \" + avgIdxTime);\n\n    // search within 50km and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    start = System.currentTimeMillis();\n    assertEquals(0, searcher.count(newRectQuery(\"field\", -89.9, -89.8, -179.9, -179.8d)));\n    end = System.currentTimeMillis();\n\n    System.out.println(\"search: \" + (end - start));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b28f5844df6825353e5e7b16b17a0d517745071","date":1531590508,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testRandomPolygons().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testRandomPolygons().mjava","sourceNew":"  @Ignore\n  public void testRandomPolygons() throws Exception {\n    int numVertices;\n    int numPolys = RandomNumbers.randomIntBetween(random(), 10, 20);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Polygon polygon;\n    Document document;\n    for (int i = 0; i < numPolys;) {\n      document = new Document();\n      numVertices = TestUtil.nextInt(random(), 100000, 200000);\n      polygon = GeoTestUtil.createRegularPolygon(0, 0, atLeast(1000000), numVertices);\n      addPolygonsToDoc(FIELDNAME, document, polygon);\n      writer.addDocument(document);\n    }\n\n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(0, searcher.count(newRectQuery(\"field\", -89.9, -89.8, -179.9, -179.8d)));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomPolygons() throws Exception {\n    long avgIdxTime = 0;\n    int numVertices;\n    int numPolys = RandomNumbers.randomIntBetween(random(), 50, 100);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    long start, end;\n\n    Polygon polygon;\n    Document document;\n    System.out.println(\"generating \" + numPolys + \" polygons\");\n    for (int i = 0; i < numPolys;) {\n      document = new Document();\n      numVertices = TestUtil.nextInt(random(), 200000, 500000);\n      polygon = GeoTestUtil.createRegularPolygon(0, 0, atLeast(1000000), numVertices);\n      System.out.println(\"adding polygon \" + i);\n      start = System.currentTimeMillis();\n      addPolygonsToDoc(FIELDNAME, document, polygon);\n      writer.addDocument(document);\n      end = System.currentTimeMillis();\n      avgIdxTime += ((end - start) - avgIdxTime) / ++i;\n    }\n    System.out.println(\"avg index time: \" + avgIdxTime);\n\n    // search within 50km and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    start = System.currentTimeMillis();\n    assertEquals(0, searcher.count(newRectQuery(\"field\", -89.9, -89.8, -179.9, -179.8d)));\n    end = System.currentTimeMillis();\n\n    System.out.println(\"search: \" + (end - start));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testRandomPolygons().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore\n  public void testRandomPolygons() throws Exception {\n    int numVertices;\n    int numPolys = RandomNumbers.randomIntBetween(random(), 10, 20);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Polygon polygon;\n    Document document;\n    for (int i = 0; i < numPolys;) {\n      document = new Document();\n      numVertices = TestUtil.nextInt(random(), 100000, 200000);\n      polygon = GeoTestUtil.createRegularPolygon(0, 0, atLeast(1000000), numVertices);\n      addPolygonsToDoc(FIELDNAME, document, polygon);\n      writer.addDocument(document);\n    }\n\n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(0, searcher.count(newRectQuery(\"field\", -89.9, -89.8, -179.9, -179.8d)));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42210058b8ae092085fa2658880b69931512e8bf","date":1579289439,"type":3,"author":"Mike","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testRandomPolygons().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testRandomPolygons().mjava","sourceNew":"  @Ignore\n  public void testRandomPolygons() throws Exception {\n    int numVertices;\n    int numPolys = RandomNumbers.randomIntBetween(random(), 10, 20);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Polygon polygon;\n    Document document;\n    for (int i = 0; i < numPolys; i++) {\n      document = new Document();\n      numVertices = TestUtil.nextInt(random(), 100000, 200000);\n      polygon = GeoTestUtil.createRegularPolygon(0, 0, atLeast(1000000), numVertices);\n      addPolygonsToDoc(FIELDNAME, document, polygon);\n      writer.addDocument(document);\n    }\n\n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(0, searcher.count(newRectQuery(\"field\", -89.9, -89.8, -179.9, -179.8d)));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Ignore\n  public void testRandomPolygons() throws Exception {\n    int numVertices;\n    int numPolys = RandomNumbers.randomIntBetween(random(), 10, 20);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Polygon polygon;\n    Document document;\n    for (int i = 0; i < numPolys;) {\n      document = new Document();\n      numVertices = TestUtil.nextInt(random(), 100000, 200000);\n      polygon = GeoTestUtil.createRegularPolygon(0, 0, atLeast(1000000), numVertices);\n      addPolygonsToDoc(FIELDNAME, document, polygon);\n      writer.addDocument(document);\n    }\n\n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(0, searcher.count(newRectQuery(\"field\", -89.9, -89.8, -179.9, -179.8d)));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonShape#testRandomPolygons().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testRandomPolygons().mjava","sourceNew":"  @Ignore\n  public void testRandomPolygons() throws Exception {\n    int numVertices;\n    int numPolys = RandomNumbers.randomIntBetween(random(), 10, 20);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Polygon polygon;\n    Document document;\n    for (int i = 0; i < numPolys; i++) {\n      document = new Document();\n      numVertices = TestUtil.nextInt(random(), 100000, 200000);\n      polygon = GeoTestUtil.createRegularPolygon(0, 0, atLeast(1000000), numVertices);\n      addPolygonsToDoc(FIELDNAME, document, polygon);\n      writer.addDocument(document);\n    }\n\n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(0, searcher.count(newRectQuery(\"field\", -89.9, -89.8, -179.9, -179.8d)));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Ignore\n  public void testRandomPolygons() throws Exception {\n    int numVertices;\n    int numPolys = RandomNumbers.randomIntBetween(random(), 10, 20);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Polygon polygon;\n    Document document;\n    for (int i = 0; i < numPolys; i++) {\n      document = new Document();\n      numVertices = TestUtil.nextInt(random(), 100000, 200000);\n      polygon = GeoTestUtil.createRegularPolygon(0, 0, atLeast(1000000), numVertices);\n      addPolygonsToDoc(FIELDNAME, document, polygon);\n      writer.addDocument(document);\n    }\n\n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(0, searcher.count(newRectQuery(\"field\", -89.9, -89.8, -179.9, -179.8d)));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42210058b8ae092085fa2658880b69931512e8bf":["5b28f5844df6825353e5e7b16b17a0d517745071"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b28f5844df6825353e5e7b16b17a0d517745071"],"5b28f5844df6825353e5e7b16b17a0d517745071":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["42210058b8ae092085fa2658880b69931512e8bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["5b28f5844df6825353e5e7b16b17a0d517745071","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"42210058b8ae092085fa2658880b69931512e8bf":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"5b28f5844df6825353e5e7b16b17a0d517745071":["42210058b8ae092085fa2658880b69931512e8bf","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}