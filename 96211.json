{"path":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","commits":[{"id":"11982a7b6834a8571852448312db4624c32990b5","date":1321300684,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","pathOld":"/dev/null","sourceNew":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf795ee457272965bd751f513787065bbf0a650a","date":1385015231,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","sourceNew":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"f.active_s.stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\",\n            \"//long[@name='countDistinct'][.='3']\",\n            \"count(//arr[@name='distinctValues']/str)='3'\");\n  }\n\n","sourceOld":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\");\n  }\n\n","bugFix":null,"bugIntro":["d0c238d519ed8e8343ab723bcc8f1846786e42a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","sourceNew":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"f.active_s.stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\",\n            \"//long[@name='countDistinct'][.='3']\",\n            \"count(//arr[@name='distinctValues']/str)='3'\");\n  }\n\n","sourceOld":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","sourceNew":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"f.active_s.stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\",\n            \"//long[@name='countDistinct'][.='3']\",\n            \"count(//arr[@name='distinctValues']/str)='3'\");\n  }\n\n","sourceOld":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"f.active_s.stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\",\n            \"//long[@name='countDistinct'][.='3']\",\n            \"count(//arr[@name='distinctValues']/str)='3'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0c238d519ed8e8343ab723bcc8f1846786e42a6","date":1409789996,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","sourceNew":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"f.active_s.stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\",\n            \"//long[@name='countDistinct'][.='3']\",\n            \"count(//arr[@name='distinctValues']/str)=3\");\n  }\n\n","sourceOld":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"f.active_s.stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\",\n            \"//long[@name='countDistinct'][.='3']\",\n            \"count(//arr[@name='distinctValues']/str)='3'\");\n  }\n\n","bugFix":["bf795ee457272965bd751f513787065bbf0a650a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"283ff02f401ec3e7a2fad73643970f052383fb0c","date":1411407953,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","sourceNew":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"f.active_s.stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\",\n            \"//long[@name='countDistinct'][.='3']\",\n            \"count(//arr[@name='distinctValues']/str)=3\");\n\n    // stats over a string function\n    assertQ(\"strdist func stats\",\n            req(\"q\", \"*:*\",\n                \"fq\", \"-id:4\", // SOLR-6540\n                \"stats\",\"true\",\n                \"stats.field\",\"{!func}strdist('string22',active_s,edit)\")\n            , \"//double[@name='min'][.='0.75']\"\n            , \"//double[@name='max'][.='0.875']\"\n            , \"//double[@name='sum'][.='2.375']\"\n            , \"//long[@name='count'][.='3']\"\n            ,\"//long[@name='missing'][.='0']\" // SOLR-6540 ==> '1'\n            );\n\n  }\n\n","sourceOld":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"f.active_s.stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\",\n            \"//long[@name='countDistinct'][.='3']\",\n            \"count(//arr[@name='distinctValues']/str)=3\");\n  }\n\n","bugFix":null,"bugIntro":["dc94927307192de225bc9f9277b907947b679bc0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc94927307192de225bc9f9277b907947b679bc0","date":1413235187,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","sourceNew":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"f.active_s.stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\",\n            \"//long[@name='countDistinct'][.='3']\",\n            \"count(//arr[@name='distinctValues']/str)=3\");\n\n    // stats over a string function\n    assertQ(\"strdist func stats\",\n            req(\"q\", \"*:*\",\n                \"stats\",\"true\",\n                \"stats.field\",\"{!func}strdist('string22',active_s,edit)\")\n            , \"//double[@name='min'][.='0.75']\"\n            , \"//double[@name='max'][.='0.875']\"\n            , \"//double[@name='sum'][.='2.375']\"\n            , \"//long[@name='count'][.='3']\"\n            ,\"//long[@name='missing'][.='1']\"\n            );\n\n  }\n\n","sourceOld":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"f.active_s.stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\",\n            \"//long[@name='countDistinct'][.='3']\",\n            \"count(//arr[@name='distinctValues']/str)=3\");\n\n    // stats over a string function\n    assertQ(\"strdist func stats\",\n            req(\"q\", \"*:*\",\n                \"fq\", \"-id:4\", // SOLR-6540\n                \"stats\",\"true\",\n                \"stats.field\",\"{!func}strdist('string22',active_s,edit)\")\n            , \"//double[@name='min'][.='0.75']\"\n            , \"//double[@name='max'][.='0.875']\"\n            , \"//double[@name='sum'][.='2.375']\"\n            , \"//long[@name='count'][.='3']\"\n            ,\"//long[@name='missing'][.='0']\" // SOLR-6540 ==> '1'\n            );\n\n  }\n\n","bugFix":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","sourceNew":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"f.active_s.stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\",\n            \"//long[@name='countDistinct'][.='3']\",\n            \"count(//arr[@name='distinctValues']/str)=3\");\n\n    // stats over a string function\n    assertQ(\"strdist func stats\",\n            req(\"q\", \"*:*\",\n                \"stats\",\"true\",\n                \"stats.field\",\"{!func}strdist('string22',active_s,edit)\")\n            , \"//double[@name='min'][.='0.75']\"\n            , \"//double[@name='max'][.='0.875']\"\n            , \"//double[@name='sum'][.='2.375']\"\n            , \"//long[@name='count'][.='3']\"\n            ,\"//long[@name='missing'][.='1']\"\n            );\n\n  }\n\n","sourceOld":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"f.active_s.stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\",\n            \"//long[@name='countDistinct'][.='3']\",\n            \"count(//arr[@name='distinctValues']/str)=3\");\n\n    // stats over a string function\n    assertQ(\"strdist func stats\",\n            req(\"q\", \"*:*\",\n                \"fq\", \"-id:4\", // SOLR-6540\n                \"stats\",\"true\",\n                \"stats.field\",\"{!func}strdist('string22',active_s,edit)\")\n            , \"//double[@name='min'][.='0.75']\"\n            , \"//double[@name='max'][.='0.875']\"\n            , \"//double[@name='sum'][.='2.375']\"\n            , \"//long[@name='count'][.='3']\"\n            ,\"//long[@name='missing'][.='0']\" // SOLR-6540 ==> '1'\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a4e2c829188fb99886a64558664d79c9ac0fdf1","date":1431021538,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","sourceNew":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"f.active_s.stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\",\n            \"//long[@name='countDistinct'][.='3']\",\n            \"count(//arr[@name='distinctValues']/str)=3\");\n\n    assertQ(\"test string cardinality\"\n            , req(\"q\", \"*:*\",\n                  \"rows\", \"0\",\n                  \"stats\",\"true\",\n                  \"stats.field\",\"{!cardinality=true}active_s\")\n            , \"//long[@name='cardinality'][.='3']\");\n\n    // stats over a string function\n    assertQ(\"strdist func stats\",\n            req(\"q\", \"*:*\",\n                \"stats\",\"true\",\n                \"stats.field\",\"{!func}strdist('string22',active_s,edit)\")\n            , \"//double[@name='min'][.='0.75']\"\n            , \"//double[@name='max'][.='0.875']\"\n            , \"//double[@name='sum'][.='2.375']\"\n            , \"//long[@name='count'][.='3']\"\n            ,\"//long[@name='missing'][.='1']\"\n            );\n\n  }\n\n","sourceOld":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"f.active_s.stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\",\n            \"//long[@name='countDistinct'][.='3']\",\n            \"count(//arr[@name='distinctValues']/str)=3\");\n\n    // stats over a string function\n    assertQ(\"strdist func stats\",\n            req(\"q\", \"*:*\",\n                \"stats\",\"true\",\n                \"stats.field\",\"{!func}strdist('string22',active_s,edit)\")\n            , \"//double[@name='min'][.='0.75']\"\n            , \"//double[@name='max'][.='0.875']\"\n            , \"//double[@name='sum'][.='2.375']\"\n            , \"//long[@name='count'][.='3']\"\n            ,\"//long[@name='missing'][.='1']\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8593fa01b5c0220a9685cabbcb5a8dd4a659ae8c","date":1584625917,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","sourceNew":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    String f = \"active_s\";\n\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", f, \"string1\"));\n    assertU(adoc(\"id\", \"2\", f, \"string2\"));\n    assertU(adoc(\"id\", \"3\", f, \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, f);\n    args.put(\"f.\" + f +\".stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n\n    for (SolrParams baseParams : new SolrParams[] {\n        params(\"stats.field\", f, \"stats\", \"true\", \"f.\" + f +\".stats.calcdistinct\",\"true\"),\n        params(\"json.facet\", // note: no distinctValues support\n            \"{min:'min(\"+f+\")',count:'countvals(\"+f+\")',missing:'missing(\"+f+\")',max:'max(\"+f+\")', \" +\n                \" countDistinct:'unique(\"+f+\")'}\")\n    }) {\n      final boolean json = (null != baseParams.get(\"json.facet\"));\n      assertQ(\"test string statistics values\", req(baseParams, \"q\", \"*:*\", \"rows\", \"0\"),\n          \"//str[@name='min'][.='string1']\",\n          \"//str[@name='max'][.='string3']\",\n          \"//long[@name='count'][.='3']\",\n          \"//long[@name='missing'][.='1']\",\n          \"//long[@name='countDistinct'][.='3']\",\n          json ? \"//*\": \"count(//arr[@name='distinctValues']/str)=3\"); // SOLR-14011\n    }\n\n    // string field cardinality\n    for (SolrParams baseParams : new SolrParams[] {\n        params(\"stats.field\", \"{!cardinality=true}\"+f, \"stats\", \"true\"),\n        params(\"json.facet\", \"{cardinality:'hll(\"+f+\")'}\")\n    }) {\n      assertQ(\"test string cardinality\",\n          req(baseParams, \"q\", \"*:*\", \"rows\", \"0\"),\n          \"//long[@name='cardinality'][.='3']\"\n      );\n    }\n\n    String strFunc = \"strdist(\\\"string22\\\",\"+ f +\",edit)\";\n    // stats over a string function\n    for (SolrParams baseParams : new SolrParams[] {\n        params(\"stats.field\", \"{!func}\"+strFunc, \"stats\", \"true\"),\n        params(\"json.facet\", // note: no function support for unique\n            \"{min:'min(\"+strFunc+\")',count:'countvals(\"+strFunc+\")',missing:'missing(\"+strFunc+\")',\" +\n                \"sum:'sum(\"+ strFunc +\")', max:'max(\"+strFunc+\")'}\")\n    }) {\n      final boolean json = (null != baseParams.get(\"json.facet\"));\n      assertQ(\"strdist func stats\",\n          req(baseParams, \"q\", \"*:*\", \"rows\", \"0\")\n          , \"//double[@name='min'][.='0.75']\"\n          , \"//double[@name='max'][.='0.875']\"\n          , \"//double[@name='sum'][.='2.375']\"\n          , json? \"//*\": \"//long[@name='count'][.='3']\" // SOLR-14010\n          ,\"//long[@name='missing'][.='1']\"\n      );\n    }\n  }\n\n","sourceOld":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", \"active_s\", \"string1\"));\n    assertU(adoc(\"id\", \"2\", \"active_s\", \"string2\"));\n    assertU(adoc(\"id\", \"3\", \"active_s\", \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"active_s\");\n    args.put(\"f.active_s.stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test string statistics values\", req,\n            \"//str[@name='min'][.='string1']\",\n            \"//str[@name='max'][.='string3']\",\n            \"//long[@name='count'][.='3']\",\n            \"//long[@name='missing'][.='1']\",\n            \"//long[@name='countDistinct'][.='3']\",\n            \"count(//arr[@name='distinctValues']/str)=3\");\n\n    assertQ(\"test string cardinality\"\n            , req(\"q\", \"*:*\",\n                  \"rows\", \"0\",\n                  \"stats\",\"true\",\n                  \"stats.field\",\"{!cardinality=true}active_s\")\n            , \"//long[@name='cardinality'][.='3']\");\n\n    // stats over a string function\n    assertQ(\"strdist func stats\",\n            req(\"q\", \"*:*\",\n                \"stats\",\"true\",\n                \"stats.field\",\"{!func}strdist('string22',active_s,edit)\")\n            , \"//double[@name='min'][.='0.75']\"\n            , \"//double[@name='max'][.='0.875']\"\n            , \"//double[@name='sum'][.='2.375']\"\n            , \"//long[@name='count'][.='3']\"\n            ,\"//long[@name='missing'][.='1']\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsResultsStringField().mjava","sourceNew":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    String f = \"active_s\";\n\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", f, \"string1\"));\n    assertU(adoc(\"id\", \"2\", f, \"string2\"));\n    assertU(adoc(\"id\", \"3\", f, \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, f);\n    args.put(\"f.\" + f +\".stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n\n    for (SolrParams baseParams : new SolrParams[] {\n        params(\"stats.field\", f, \"stats\", \"true\", \"f.\" + f +\".stats.calcdistinct\",\"true\"),\n        params(\"json.facet\", // note: no distinctValues support\n            \"{min:'min(\"+f+\")',count:'countvals(\"+f+\")',missing:'missing(\"+f+\")',max:'max(\"+f+\")', \" +\n                \" countDistinct:'unique(\"+f+\")'}\")\n    }) {\n      final boolean json = (null != baseParams.get(\"json.facet\"));\n      assertQ(\"test string statistics values\", req(baseParams, \"q\", \"*:*\", \"rows\", \"0\"),\n          \"//str[@name='min'][.='string1']\",\n          \"//str[@name='max'][.='string3']\",\n          \"//long[@name='count'][.='3']\",\n          \"//long[@name='missing'][.='1']\",\n          \"//long[@name='countDistinct'][.='3']\",\n          json ? \"//*\": \"count(//arr[@name='distinctValues']/str)=3\"); // SOLR-14011\n    }\n\n    // string field cardinality\n    for (SolrParams baseParams : new SolrParams[] {\n        params(\"stats.field\", \"{!cardinality=true}\"+f, \"stats\", \"true\"),\n        params(\"json.facet\", \"{cardinality:'hll(\"+f+\")'}\")\n    }) {\n      assertQ(\"test string cardinality\",\n          req(baseParams, \"q\", \"*:*\", \"rows\", \"0\"),\n          \"//long[@name='cardinality'][.='3']\"\n      );\n    }\n\n    String strFunc = \"strdist(\\\"string22\\\",\"+ f +\",edit)\";\n    // stats over a string function\n    for (SolrParams baseParams : new SolrParams[] {\n        params(\"stats.field\", \"{!func}\"+strFunc, \"stats\", \"true\"),\n        params(\"json.facet\", // note: no function support for unique\n            \"{min:'min(\"+strFunc+\")',count:'countvals(\"+strFunc+\")',missing:'missing(\"+strFunc+\")',\" +\n                \"sum:'sum(\"+ strFunc +\")', max:'max(\"+strFunc+\")'}\")\n    }) {\n      final boolean json = (null != baseParams.get(\"json.facet\"));\n      assertQ(\"strdist func stats\",\n          req(baseParams, \"q\", \"*:*\", \"rows\", \"0\")\n          , \"//double[@name='min'][.='0.75']\"\n          , \"//double[@name='max'][.='0.875']\"\n          , \"//double[@name='sum'][.='2.375']\"\n          , json? \"//*\": \"//long[@name='count'][.='3']\" // SOLR-14010\n          ,\"//long[@name='missing'][.='1']\"\n      );\n    }\n  }\n\n","sourceOld":"  public void testFieldStatisticsResultsStringField() throws Exception {\n    String f = \"active_s\";\n\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\", f, \"string1\"));\n    assertU(adoc(\"id\", \"2\", f, \"string2\"));\n    assertU(adoc(\"id\", \"3\", f, \"string3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, f);\n    args.put(\"f.\" + f +\".stats.calcdistinct\",\"true\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n\n    for (SolrParams baseParams : new SolrParams[] {\n        params(\"stats.field\", f, \"stats\", \"true\", \"f.\" + f +\".stats.calcdistinct\",\"true\"),\n        params(\"json.facet\", // note: no distinctValues support\n            \"{min:'min(\"+f+\")',count:'countvals(\"+f+\")',missing:'missing(\"+f+\")',max:'max(\"+f+\")', \" +\n                \" countDistinct:'unique(\"+f+\")'}\")\n    }) {\n      final boolean json = (null != baseParams.get(\"json.facet\"));\n      assertQ(\"test string statistics values\", req(baseParams, \"q\", \"*:*\", \"rows\", \"0\"),\n          \"//str[@name='min'][.='string1']\",\n          \"//str[@name='max'][.='string3']\",\n          \"//long[@name='count'][.='3']\",\n          \"//long[@name='missing'][.='1']\",\n          \"//long[@name='countDistinct'][.='3']\",\n          json ? \"//*\": \"count(//arr[@name='distinctValues']/str)=3\"); // SOLR-14011\n    }\n\n    // string field cardinality\n    for (SolrParams baseParams : new SolrParams[] {\n        params(\"stats.field\", \"{!cardinality=true}\"+f, \"stats\", \"true\"),\n        params(\"json.facet\", \"{cardinality:'hll(\"+f+\")'}\")\n    }) {\n      assertQ(\"test string cardinality\",\n          req(baseParams, \"q\", \"*:*\", \"rows\", \"0\"),\n          \"//long[@name='cardinality'][.='3']\"\n      );\n    }\n\n    String strFunc = \"strdist(\\\"string22\\\",\"+ f +\",edit)\";\n    // stats over a string function\n    for (SolrParams baseParams : new SolrParams[] {\n        params(\"stats.field\", \"{!func}\"+strFunc, \"stats\", \"true\"),\n        params(\"json.facet\", // note: no function support for unique\n            \"{min:'min(\"+strFunc+\")',count:'countvals(\"+strFunc+\")',missing:'missing(\"+strFunc+\")',\" +\n                \"sum:'sum(\"+ strFunc +\")', max:'max(\"+strFunc+\")'}\")\n    }) {\n      final boolean json = (null != baseParams.get(\"json.facet\"));\n      assertQ(\"strdist func stats\",\n          req(baseParams, \"q\", \"*:*\", \"rows\", \"0\")\n          , \"//double[@name='min'][.='0.75']\"\n          , \"//double[@name='max'][.='0.875']\"\n          , \"//double[@name='sum'][.='2.375']\"\n          , json? \"//*\": \"//long[@name='count'][.='3']\" // SOLR-14010\n          ,\"//long[@name='missing'][.='1']\"\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bf795ee457272965bd751f513787065bbf0a650a"],"8593fa01b5c0220a9685cabbcb5a8dd4a659ae8c":["4a4e2c829188fb99886a64558664d79c9ac0fdf1"],"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["dc94927307192de225bc9f9277b907947b679bc0"],"55980207f1977bd1463465de1659b821347e2fa8":["283ff02f401ec3e7a2fad73643970f052383fb0c","dc94927307192de225bc9f9277b907947b679bc0"],"bf795ee457272965bd751f513787065bbf0a650a":["11982a7b6834a8571852448312db4624c32990b5"],"d0c238d519ed8e8343ab723bcc8f1846786e42a6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"283ff02f401ec3e7a2fad73643970f052383fb0c":["d0c238d519ed8e8343ab723bcc8f1846786e42a6"],"ba055e19afc289adcb5bedaf68513793a7254012":["8593fa01b5c0220a9685cabbcb5a8dd4a659ae8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["11982a7b6834a8571852448312db4624c32990b5","bf795ee457272965bd751f513787065bbf0a650a"],"dc94927307192de225bc9f9277b907947b679bc0":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"],"11982a7b6834a8571852448312db4624c32990b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d0c238d519ed8e8343ab723bcc8f1846786e42a6"],"8593fa01b5c0220a9685cabbcb5a8dd4a659ae8c":["ba055e19afc289adcb5bedaf68513793a7254012"],"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["8593fa01b5c0220a9685cabbcb5a8dd4a659ae8c"],"55980207f1977bd1463465de1659b821347e2fa8":[],"bf795ee457272965bd751f513787065bbf0a650a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"d0c238d519ed8e8343ab723bcc8f1846786e42a6":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"283ff02f401ec3e7a2fad73643970f052383fb0c":["55980207f1977bd1463465de1659b821347e2fa8","dc94927307192de225bc9f9277b907947b679bc0"],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11982a7b6834a8571852448312db4624c32990b5"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"dc94927307192de225bc9f9277b907947b679bc0":["4a4e2c829188fb99886a64558664d79c9ac0fdf1","55980207f1977bd1463465de1659b821347e2fa8"],"11982a7b6834a8571852448312db4624c32990b5":["bf795ee457272965bd751f513787065bbf0a650a","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}