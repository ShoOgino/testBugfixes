{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsProducer#readFields(IndexInput,FieldInfos).mjava","commits":[{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.bytesPerValue = meta.readByte();\n      switch (entry.bytesPerValue) {\n        case 0: case 1: case 2: case 4: case 8:\n          break;\n        default:\n          throw new CorruptIndexException(\"Invalid bytesPerValue: \" + entry.bytesPerValue + \", field: \" + info.name, meta);\n      }\n      entry.offset = meta.readLong();\n      norms.put(info.number, entry);\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.bytesPerValue = meta.readByte();\n      switch (entry.bytesPerValue) {\n        case 0: case 1: case 2: case 4: case 8:\n          break;\n        default:\n          throw new CorruptIndexException(\"Invalid bytesPerValue: \" + entry.bytesPerValue + \", field: \" + info.name, meta);\n      }\n      entry.offset = meta.readLong();\n      norms.put(info.number, entry);\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.bytesPerValue = meta.readByte();\n      switch (entry.bytesPerValue) {\n        case 0: case 1: case 2: case 4: case 8:\n          break;\n        default:\n          throw new CorruptIndexException(\"Invalid bytesPerValue: \" + entry.bytesPerValue + \", field: \" + info.name, meta);\n      }\n      entry.offset = meta.readLong();\n      norms.put(info.number, entry);\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.bytesPerValue = meta.readByte();\n      switch (entry.bytesPerValue) {\n        case 0: case 1: case 2: case 4: case 8:\n          break;\n        default:\n          throw new CorruptIndexException(\"Invalid bytesPerValue: \" + entry.bytesPerValue + \", field: \" + info.name, meta);\n      }\n      entry.offset = meta.readLong();\n      norms.put(info.number, entry);\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      } else if (!info.hasNorms()) {\n        throw new CorruptIndexException(\"Invalid field: \" + info.name, meta);\n      }\n      NormsEntry entry = new NormsEntry();\n      entry.bytesPerValue = meta.readByte();\n      switch (entry.bytesPerValue) {\n        case 0: case 1: case 2: case 4: case 8:\n          break;\n        default:\n          throw new CorruptIndexException(\"Invalid bytesPerValue: \" + entry.bytesPerValue + \", field: \" + info.name, meta);\n      }\n      entry.offset = meta.readLong();\n      norms.put(info.number, entry);\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}