{"path":"lucene/luke/src/java/org/apache/lucene/luke/app/desktop/components/fragments/search/QueryParserPaneProvider#getConfig().mjava","commits":[{"id":"f554f2d9b5456248ab6467b9d4f6015686797a6c","date":1554891357,"type":0,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/app/desktop/components/fragments/search/QueryParserPaneProvider#getConfig().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public QueryParserConfig getConfig() {\n    int phraseSlop = (int) slopFTF.getValue();\n    float fuzzyMinSimFloat = (float) minSimFTF.getValue();\n    int fuzzyPrefLenInt = (int) prefLenFTF.getValue();\n\n    Map<String, Class<? extends Number>> typeMap = new HashMap<>();\n    for (int row = 0; row < pointRangeQueryTable.getModel().getRowCount(); row++) {\n      String field = (String) pointRangeQueryTable.getValueAt(row, PointTypesTableModel.Column.FIELD.getIndex());\n      String type = (String) pointRangeQueryTable.getValueAt(row, PointTypesTableModel.Column.TYPE.getIndex());\n      switch (PointTypesTableModel.NumType.valueOf(type)) {\n        case INT:\n          typeMap.put(field, Integer.class);\n          break;\n        case LONG:\n          typeMap.put(field, Long.class);\n          break;\n        case FLOAT:\n          typeMap.put(field, Float.class);\n          break;\n        case DOUBLE:\n          typeMap.put(field, Double.class);\n          break;\n        default:\n          break;\n      }\n    }\n\n    return new QueryParserConfig.Builder()\n        .useClassicParser(classicRB.isSelected())\n        .defaultOperator(QueryParserConfig.Operator.valueOf((String) defOpCombo.getSelectedItem()))\n        .enablePositionIncrements(posIncCB.isSelected())\n        .allowLeadingWildcard(wildCardCB.isSelected())\n        .splitOnWhitespace(splitWSCB.isSelected())\n        .autoGeneratePhraseQueries(genPhraseQueryCB.isSelected())\n        .autoGenerateMultiTermSynonymsPhraseQuery(genMultiTermSynonymsPhraseQueryCB.isSelected())\n        .phraseSlop(phraseSlop)\n        .fuzzyMinSim(fuzzyMinSimFloat)\n        .fuzzyPrefixLength(fuzzyPrefLenInt)\n        .dateResolution(DateTools.Resolution.valueOf((String) dateResCB.getSelectedItem()))\n        .locale(new Locale(locationTF.getText()))\n        .timeZone(TimeZone.getTimeZone(timezoneTF.getText()))\n        .typeMap(typeMap)\n        .build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f554f2d9b5456248ab6467b9d4f6015686797a6c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}