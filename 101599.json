{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#advanceRpts(PhrasePositions).mjava","commits":[{"id":"2eaa5d4d2618a012373ae4574ebb6563933aa9f6","date":1331337973,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#advanceRpts(PhrasePositions).mjava","pathOld":"/dev/null","sourceNew":"  /** pp was just advanced. If that caused a repeater collision, resolve by advancing the lesser\n   * of the two colliding pps. Note that there can only be one collision, as by the initialization\n   * there were no collisions before pp was advanced.  */\n  private boolean advanceRpts(PhrasePositions pp) throws IOException {\n    if (pp.rptGroup < 0) {\n      return true; // not a repeater\n    }\n    PhrasePositions[] rg = rptGroups[pp.rptGroup];\n    OpenBitSet bits = new OpenBitSet(rg.length); // for re-queuing after collisions are resolved\n    int k0 = pp.rptInd;\n    int k;\n    while((k=collide(pp)) >= 0) {\n      pp = lesser(pp, rg[k]); // always advance the lesser of the (only) two colliding pps\n      if (!advancePP(pp)) {\n        return false; // exhausted\n      }\n      if (k != k0) { // careful: mark only those currently in the queue\n        bits.set(k); // mark that pp2 need to be re-queued\n      }\n    }\n    // collisions resolved, now re-queue\n    // empty (partially) the queue until seeing all pps advanced for resolving collisions\n    int n = 0;\n    while (bits.cardinality() > 0) {\n      PhrasePositions pp2 = pq.pop();\n      rptStack[n++] = pp2;\n      if (pp2.rptGroup >= 0 && bits.get(pp2.rptInd)) {\n        bits.clear(pp2.rptInd);\n      }\n    }\n    // add back to queue\n    for (int i=n-1; i>=0; i--) {\n      pq.add(rptStack[i]);\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#advanceRpts(PhrasePositions).mjava","pathOld":"/dev/null","sourceNew":"  /** pp was just advanced. If that caused a repeater collision, resolve by advancing the lesser\n   * of the two colliding pps. Note that there can only be one collision, as by the initialization\n   * there were no collisions before pp was advanced.  */\n  private boolean advanceRpts(PhrasePositions pp) throws IOException {\n    if (pp.rptGroup < 0) {\n      return true; // not a repeater\n    }\n    PhrasePositions[] rg = rptGroups[pp.rptGroup];\n    OpenBitSet bits = new OpenBitSet(rg.length); // for re-queuing after collisions are resolved\n    int k0 = pp.rptInd;\n    int k;\n    while((k=collide(pp)) >= 0) {\n      pp = lesser(pp, rg[k]); // always advance the lesser of the (only) two colliding pps\n      if (!advancePP(pp)) {\n        return false; // exhausted\n      }\n      if (k != k0) { // careful: mark only those currently in the queue\n        bits.set(k); // mark that pp2 need to be re-queued\n      }\n    }\n    // collisions resolved, now re-queue\n    // empty (partially) the queue until seeing all pps advanced for resolving collisions\n    int n = 0;\n    while (bits.cardinality() > 0) {\n      PhrasePositions pp2 = pq.pop();\n      rptStack[n++] = pp2;\n      if (pp2.rptGroup >= 0 && bits.get(pp2.rptInd)) {\n        bits.clear(pp2.rptInd);\n      }\n    }\n    // add back to queue\n    for (int i=n-1; i>=0; i--) {\n      pq.add(rptStack[i]);\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#advanceRpts(PhrasePositions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#advanceRpts(PhrasePositions).mjava","sourceNew":"  /** pp was just advanced. If that caused a repeater collision, resolve by advancing the lesser\n   * of the two colliding pps. Note that there can only be one collision, as by the initialization\n   * there were no collisions before pp was advanced.  */\n  private boolean advanceRpts(PhrasePositions pp) throws IOException {\n    if (pp.rptGroup < 0) {\n      return true; // not a repeater\n    }\n    PhrasePositions[] rg = rptGroups[pp.rptGroup];\n    FixedBitSet bits = new FixedBitSet(rg.length); // for re-queuing after collisions are resolved\n    int k0 = pp.rptInd;\n    int k;\n    while((k=collide(pp)) >= 0) {\n      pp = lesser(pp, rg[k]); // always advance the lesser of the (only) two colliding pps\n      if (!advancePP(pp)) {\n        return false; // exhausted\n      }\n      if (k != k0) { // careful: mark only those currently in the queue\n        bits.set(k); // mark that pp2 need to be re-queued\n      }\n    }\n    // collisions resolved, now re-queue\n    // empty (partially) the queue until seeing all pps advanced for resolving collisions\n    int n = 0;\n    // TODO can't this be checked once and decremented as we clear bits?\n    // in fact, we don't even need to clear any bits, since the bitset is totally discarded\n    // only need to pop as many set bits from the pq.\n    while (bits.cardinality() > 0) {\n      PhrasePositions pp2 = pq.pop();\n      rptStack[n++] = pp2;\n      if (pp2.rptGroup >= 0 && bits.get(pp2.rptInd)) {\n        bits.clear(pp2.rptInd);\n      }\n    }\n    // add back to queue\n    for (int i=n-1; i>=0; i--) {\n      pq.add(rptStack[i]);\n    }\n    return true;\n  }\n\n","sourceOld":"  /** pp was just advanced. If that caused a repeater collision, resolve by advancing the lesser\n   * of the two colliding pps. Note that there can only be one collision, as by the initialization\n   * there were no collisions before pp was advanced.  */\n  private boolean advanceRpts(PhrasePositions pp) throws IOException {\n    if (pp.rptGroup < 0) {\n      return true; // not a repeater\n    }\n    PhrasePositions[] rg = rptGroups[pp.rptGroup];\n    OpenBitSet bits = new OpenBitSet(rg.length); // for re-queuing after collisions are resolved\n    int k0 = pp.rptInd;\n    int k;\n    while((k=collide(pp)) >= 0) {\n      pp = lesser(pp, rg[k]); // always advance the lesser of the (only) two colliding pps\n      if (!advancePP(pp)) {\n        return false; // exhausted\n      }\n      if (k != k0) { // careful: mark only those currently in the queue\n        bits.set(k); // mark that pp2 need to be re-queued\n      }\n    }\n    // collisions resolved, now re-queue\n    // empty (partially) the queue until seeing all pps advanced for resolving collisions\n    int n = 0;\n    while (bits.cardinality() > 0) {\n      PhrasePositions pp2 = pq.pop();\n      rptStack[n++] = pp2;\n      if (pp2.rptGroup >= 0 && bits.get(pp2.rptInd)) {\n        bits.clear(pp2.rptInd);\n      }\n    }\n    // add back to queue\n    for (int i=n-1; i>=0; i--) {\n      pq.add(rptStack[i]);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c45e126affe0a63800f45775366eff15d6246001","date":1392132889,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#advanceRpts(PhrasePositions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#advanceRpts(PhrasePositions).mjava","sourceNew":"  /** pp was just advanced. If that caused a repeater collision, resolve by advancing the lesser\n   * of the two colliding pps. Note that there can only be one collision, as by the initialization\n   * there were no collisions before pp was advanced.  */\n  private boolean advanceRpts(PhrasePositions pp) throws IOException {\n    if (pp.rptGroup < 0) {\n      return true; // not a repeater\n    }\n    PhrasePositions[] rg = rptGroups[pp.rptGroup];\n    FixedBitSet bits = new FixedBitSet(rg.length); // for re-queuing after collisions are resolved\n    int k0 = pp.rptInd;\n    int k;\n    while((k=collide(pp)) >= 0) {\n      pp = lesser(pp, rg[k]); // always advance the lesser of the (only) two colliding pps\n      if (!advancePP(pp)) {\n        return false; // exhausted\n      }\n      if (k != k0) { // careful: mark only those currently in the queue\n        bits = FixedBitSet.ensureCapacity(bits, k);\n        bits.set(k); // mark that pp2 need to be re-queued\n      }\n    }\n    // collisions resolved, now re-queue\n    // empty (partially) the queue until seeing all pps advanced for resolving collisions\n    int n = 0;\n    // TODO would be good if we can avoid calling cardinality() in each iteration!\n    int numBits = bits.length(); // larges bit we set\n    while (bits.cardinality() > 0) {\n      PhrasePositions pp2 = pq.pop();\n      rptStack[n++] = pp2;\n      if (pp2.rptGroup >= 0 \n          && pp2.rptInd < numBits  // this bit may not have been set\n          && bits.get(pp2.rptInd)) {\n        bits.clear(pp2.rptInd);\n      }\n    }\n    // add back to queue\n    for (int i=n-1; i>=0; i--) {\n      pq.add(rptStack[i]);\n    }\n    return true;\n  }\n\n","sourceOld":"  /** pp was just advanced. If that caused a repeater collision, resolve by advancing the lesser\n   * of the two colliding pps. Note that there can only be one collision, as by the initialization\n   * there were no collisions before pp was advanced.  */\n  private boolean advanceRpts(PhrasePositions pp) throws IOException {\n    if (pp.rptGroup < 0) {\n      return true; // not a repeater\n    }\n    PhrasePositions[] rg = rptGroups[pp.rptGroup];\n    FixedBitSet bits = new FixedBitSet(rg.length); // for re-queuing after collisions are resolved\n    int k0 = pp.rptInd;\n    int k;\n    while((k=collide(pp)) >= 0) {\n      pp = lesser(pp, rg[k]); // always advance the lesser of the (only) two colliding pps\n      if (!advancePP(pp)) {\n        return false; // exhausted\n      }\n      if (k != k0) { // careful: mark only those currently in the queue\n        bits.set(k); // mark that pp2 need to be re-queued\n      }\n    }\n    // collisions resolved, now re-queue\n    // empty (partially) the queue until seeing all pps advanced for resolving collisions\n    int n = 0;\n    // TODO can't this be checked once and decremented as we clear bits?\n    // in fact, we don't even need to clear any bits, since the bitset is totally discarded\n    // only need to pop as many set bits from the pq.\n    while (bits.cardinality() > 0) {\n      PhrasePositions pp2 = pq.pop();\n      rptStack[n++] = pp2;\n      if (pp2.rptGroup >= 0 && bits.get(pp2.rptInd)) {\n        bits.clear(pp2.rptInd);\n      }\n    }\n    // add back to queue\n    for (int i=n-1; i>=0; i--) {\n      pq.add(rptStack[i]);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#advanceRpts(PhrasePositions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#advanceRpts(PhrasePositions).mjava","sourceNew":"  /** pp was just advanced. If that caused a repeater collision, resolve by advancing the lesser\n   * of the two colliding pps. Note that there can only be one collision, as by the initialization\n   * there were no collisions before pp was advanced.  */\n  private boolean advanceRpts(PhrasePositions pp) throws IOException {\n    if (pp.rptGroup < 0) {\n      return true; // not a repeater\n    }\n    PhrasePositions[] rg = rptGroups[pp.rptGroup];\n    FixedBitSet bits = new FixedBitSet(rg.length); // for re-queuing after collisions are resolved\n    int k0 = pp.rptInd;\n    int k;\n    while((k=collide(pp)) >= 0) {\n      pp = lesser(pp, rg[k]); // always advance the lesser of the (only) two colliding pps\n      if (!advancePP(pp)) {\n        return false; // exhausted\n      }\n      if (k != k0) { // careful: mark only those currently in the queue\n        bits = FixedBitSet.ensureCapacity(bits, k);\n        bits.set(k); // mark that pp2 need to be re-queued\n      }\n    }\n    // collisions resolved, now re-queue\n    // empty (partially) the queue until seeing all pps advanced for resolving collisions\n    int n = 0;\n    // TODO would be good if we can avoid calling cardinality() in each iteration!\n    int numBits = bits.length(); // larges bit we set\n    while (bits.cardinality() > 0) {\n      PhrasePositions pp2 = pq.pop();\n      rptStack[n++] = pp2;\n      if (pp2.rptGroup >= 0 \n          && pp2.rptInd < numBits  // this bit may not have been set\n          && bits.get(pp2.rptInd)) {\n        bits.clear(pp2.rptInd);\n      }\n    }\n    // add back to queue\n    for (int i=n-1; i>=0; i--) {\n      pq.add(rptStack[i]);\n    }\n    return true;\n  }\n\n","sourceOld":"  /** pp was just advanced. If that caused a repeater collision, resolve by advancing the lesser\n   * of the two colliding pps. Note that there can only be one collision, as by the initialization\n   * there were no collisions before pp was advanced.  */\n  private boolean advanceRpts(PhrasePositions pp) throws IOException {\n    if (pp.rptGroup < 0) {\n      return true; // not a repeater\n    }\n    PhrasePositions[] rg = rptGroups[pp.rptGroup];\n    FixedBitSet bits = new FixedBitSet(rg.length); // for re-queuing after collisions are resolved\n    int k0 = pp.rptInd;\n    int k;\n    while((k=collide(pp)) >= 0) {\n      pp = lesser(pp, rg[k]); // always advance the lesser of the (only) two colliding pps\n      if (!advancePP(pp)) {\n        return false; // exhausted\n      }\n      if (k != k0) { // careful: mark only those currently in the queue\n        bits = FixedBitSet.ensureCapacity(bits, k);\n        bits.set(k); // mark that pp2 need to be re-queued\n      }\n    }\n    // collisions resolved, now re-queue\n    // empty (partially) the queue until seeing all pps advanced for resolving collisions\n    int n = 0;\n    // TODO would be good if we can avoid calling cardinality() in each iteration!\n    int numBits = bits.length(); // larges bit we set\n    while (bits.cardinality() > 0) {\n      PhrasePositions pp2 = pq.pop();\n      rptStack[n++] = pp2;\n      if (pp2.rptGroup >= 0 \n          && pp2.rptInd < numBits  // this bit may not have been set\n          && bits.get(pp2.rptInd)) {\n        bits.clear(pp2.rptInd);\n      }\n    }\n    // add back to queue\n    for (int i=n-1; i>=0; i--) {\n      pq.add(rptStack[i]);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"c45e126affe0a63800f45775366eff15d6246001":["3995f83351082af8ae83bb017e63c56818fc1568"],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b11b9d5eaf9707760ca5151530830a825197023":["c45e126affe0a63800f45775366eff15d6246001"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3995f83351082af8ae83bb017e63c56818fc1568":["2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b11b9d5eaf9707760ca5151530830a825197023"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"c45e126affe0a63800f45775366eff15d6246001":["3b11b9d5eaf9707760ca5151530830a825197023"],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["38e3b736c7ca086d61b7dbb841c905ee115490da","3995f83351082af8ae83bb017e63c56818fc1568"],"3b11b9d5eaf9707760ca5151530830a825197023":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"3995f83351082af8ae83bb017e63c56818fc1568":["c45e126affe0a63800f45775366eff15d6246001"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}