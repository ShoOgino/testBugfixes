{"path":"lucene/core/src/java/org/apache/lucene/store/Directory#createSlicer(String,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Directory#createSlicer(String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/Directory#createSlicer(String,IOContext).mjava","sourceNew":"  /**\n   * Creates an {@link IndexInputSlicer} for the given file name.\n   * IndexInputSlicer allows other {@link Directory} implementations to\n   * efficiently open one or more sliced {@link IndexInput} instances from a\n   * single file handle. The underlying file handle is kept open until the\n   * {@link IndexInputSlicer} is closed.\n   *\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @lucene.internal\n   * @lucene.experimental\n   */\n  public IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    return new IndexInputSlicer() {\n      private final IndexInput base = Directory.this.openInput(name, context);\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SlicedIndexInput(\"SlicedIndexInput(\" + sliceDescription + \" in \" + base + \")\", base, offset, length);\n      }\n      @Override\n      public void close() throws IOException {\n        base.close();\n      }\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        return (IndexInput) base.clone();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates an {@link IndexInputSlicer} for the given file name.\n   * IndexInputSlicer allows other {@link Directory} implementations to\n   * efficiently open one or more sliced {@link IndexInput} instances from a\n   * single file handle. The underlying file handle is kept open until the\n   * {@link IndexInputSlicer} is closed.\n   *\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @lucene.internal\n   * @lucene.experimental\n   */\n  public IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    return new IndexInputSlicer() {\n      private final IndexInput base = Directory.this.openInput(name, context);\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SlicedIndexInput(\"SlicedIndexInput(\" + sliceDescription + \" in \" + base + \")\", base, offset, length);\n      }\n      @Override\n      public void close() throws IOException {\n        base.close();\n      }\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        return (IndexInput) base.clone();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Directory#createSlicer(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Directory#createSlicer(String,IOContext).mjava","sourceNew":"  /**\n   * Creates an {@link IndexInputSlicer} for the given file name.\n   * IndexInputSlicer allows other {@link Directory} implementations to\n   * efficiently open one or more sliced {@link IndexInput} instances from a\n   * single file handle. The underlying file handle is kept open until the\n   * {@link IndexInputSlicer} is closed.\n   *\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @lucene.internal\n   * @lucene.experimental\n   */\n  public IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    return new IndexInputSlicer() {\n      private final IndexInput base = Directory.this.openInput(name, context);\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SlicedIndexInput(\"SlicedIndexInput(\" + sliceDescription + \" in \" + base + \")\", base, offset, length);\n      }\n      @Override\n      public void close() throws IOException {\n        base.close();\n      }\n      @Override\n      public IndexInput openFullSlice() {\n        return (IndexInput) base.clone();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates an {@link IndexInputSlicer} for the given file name.\n   * IndexInputSlicer allows other {@link Directory} implementations to\n   * efficiently open one or more sliced {@link IndexInput} instances from a\n   * single file handle. The underlying file handle is kept open until the\n   * {@link IndexInputSlicer} is closed.\n   *\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @lucene.internal\n   * @lucene.experimental\n   */\n  public IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    return new IndexInputSlicer() {\n      private final IndexInput base = Directory.this.openInput(name, context);\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SlicedIndexInput(\"SlicedIndexInput(\" + sliceDescription + \" in \" + base + \")\", base, offset, length);\n      }\n      @Override\n      public void close() throws IOException {\n        base.close();\n      }\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        return (IndexInput) base.clone();\n      }\n    };\n  }\n\n","bugFix":["67aadace85f701c87a4e0721eedcda25d8415a70"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Directory#createSlicer(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Directory#createSlicer(String,IOContext).mjava","sourceNew":"  /**\n   * Creates an {@link IndexInputSlicer} for the given file name.\n   * IndexInputSlicer allows other {@link Directory} implementations to\n   * efficiently open one or more sliced {@link IndexInput} instances from a\n   * single file handle. The underlying file handle is kept open until the\n   * {@link IndexInputSlicer} is closed.\n   *\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @lucene.internal\n   * @lucene.experimental\n   */\n  public IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    return new IndexInputSlicer() {\n      private final IndexInput base = Directory.this.openInput(name, context);\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SlicedIndexInput(\"SlicedIndexInput(\" + sliceDescription + \" in \" + base + \")\", base, offset, length);\n      }\n      @Override\n      public void close() throws IOException {\n        base.close();\n      }\n      @Override\n      public IndexInput openFullSlice() {\n        return (IndexInput) base.clone();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates an {@link IndexInputSlicer} for the given file name.\n   * IndexInputSlicer allows other {@link Directory} implementations to\n   * efficiently open one or more sliced {@link IndexInput} instances from a\n   * single file handle. The underlying file handle is kept open until the\n   * {@link IndexInputSlicer} is closed.\n   *\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @lucene.internal\n   * @lucene.experimental\n   */\n  public IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    return new IndexInputSlicer() {\n      private final IndexInput base = Directory.this.openInput(name, context);\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SlicedIndexInput(\"SlicedIndexInput(\" + sliceDescription + \" in \" + base + \")\", base, offset, length);\n      }\n      @Override\n      public void close() throws IOException {\n        base.close();\n      }\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        return (IndexInput) base.clone();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7460755aa94143153400f49c8ac2746f5d092e1a","date":1345536974,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Directory#createSlicer(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Directory#createSlicer(String,IOContext).mjava","sourceNew":"  /**\n   * Creates an {@link IndexInputSlicer} for the given file name.\n   * IndexInputSlicer allows other {@link Directory} implementations to\n   * efficiently open one or more sliced {@link IndexInput} instances from a\n   * single file handle. The underlying file handle is kept open until the\n   * {@link IndexInputSlicer} is closed.\n   *\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @lucene.internal\n   * @lucene.experimental\n   */\n  public IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    return new IndexInputSlicer() {\n      private final IndexInput base = Directory.this.openInput(name, context);\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SlicedIndexInput(\"SlicedIndexInput(\" + sliceDescription + \" in \" + base + \")\", base, offset, length);\n      }\n      @Override\n      public void close() throws IOException {\n        base.close();\n      }\n      @Override\n      public IndexInput openFullSlice() {\n        return base.clone();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates an {@link IndexInputSlicer} for the given file name.\n   * IndexInputSlicer allows other {@link Directory} implementations to\n   * efficiently open one or more sliced {@link IndexInput} instances from a\n   * single file handle. The underlying file handle is kept open until the\n   * {@link IndexInputSlicer} is closed.\n   *\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @lucene.internal\n   * @lucene.experimental\n   */\n  public IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    return new IndexInputSlicer() {\n      private final IndexInput base = Directory.this.openInput(name, context);\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SlicedIndexInput(\"SlicedIndexInput(\" + sliceDescription + \" in \" + base + \")\", base, offset, length);\n      }\n      @Override\n      public void close() throws IOException {\n        base.close();\n      }\n      @Override\n      public IndexInput openFullSlice() {\n        return (IndexInput) base.clone();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Directory#createSlicer(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Directory#createSlicer(String,IOContext).mjava","sourceNew":"  /**\n   * Creates an {@link IndexInputSlicer} for the given file name.\n   * IndexInputSlicer allows other {@link Directory} implementations to\n   * efficiently open one or more sliced {@link IndexInput} instances from a\n   * single file handle. The underlying file handle is kept open until the\n   * {@link IndexInputSlicer} is closed.\n   *\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @lucene.internal\n   * @lucene.experimental\n   */\n  public IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    return new IndexInputSlicer() {\n      private final IndexInput base = Directory.this.openInput(name, context);\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SlicedIndexInput(\"SlicedIndexInput(\" + sliceDescription + \" in \" + base + \")\", base, offset, length);\n      }\n      @Override\n      public void close() throws IOException {\n        base.close();\n      }\n      @Override\n      public IndexInput openFullSlice() {\n        return base.clone();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates an {@link IndexInputSlicer} for the given file name.\n   * IndexInputSlicer allows other {@link Directory} implementations to\n   * efficiently open one or more sliced {@link IndexInput} instances from a\n   * single file handle. The underlying file handle is kept open until the\n   * {@link IndexInputSlicer} is closed.\n   *\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @lucene.internal\n   * @lucene.experimental\n   */\n  public IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    return new IndexInputSlicer() {\n      private final IndexInput base = Directory.this.openInput(name, context);\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SlicedIndexInput(\"SlicedIndexInput(\" + sliceDescription + \" in \" + base + \")\", base, offset, length);\n      }\n      @Override\n      public void close() throws IOException {\n        base.close();\n      }\n      @Override\n      public IndexInput openFullSlice() {\n        return (IndexInput) base.clone();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","date":1347072117,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Directory#createSlicer(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Directory#createSlicer(String,IOContext).mjava","sourceNew":"  /**\n   * Creates an {@link IndexInputSlicer} for the given file name.\n   * IndexInputSlicer allows other {@link Directory} implementations to\n   * efficiently open one or more sliced {@link IndexInput} instances from a\n   * single file handle. The underlying file handle is kept open until the\n   * {@link IndexInputSlicer} is closed.\n   *\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @lucene.internal\n   * @lucene.experimental\n   */\n  public IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    return new IndexInputSlicer() {\n      private final IndexInput base = Directory.this.openInput(name, context);\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SlicedIndexInput(\"SlicedIndexInput(\" + sliceDescription + \" in \" + base + \")\", base, offset, length);\n      }\n      @Override\n      public void close() throws IOException {\n        base.close();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates an {@link IndexInputSlicer} for the given file name.\n   * IndexInputSlicer allows other {@link Directory} implementations to\n   * efficiently open one or more sliced {@link IndexInput} instances from a\n   * single file handle. The underlying file handle is kept open until the\n   * {@link IndexInputSlicer} is closed.\n   *\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @lucene.internal\n   * @lucene.experimental\n   */\n  public IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    return new IndexInputSlicer() {\n      private final IndexInput base = Directory.this.openInput(name, context);\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SlicedIndexInput(\"SlicedIndexInput(\" + sliceDescription + \" in \" + base + \")\", base, offset, length);\n      }\n      @Override\n      public void close() throws IOException {\n        base.close();\n      }\n      @Override\n      public IndexInput openFullSlice() {\n        return base.clone();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52","date":1370989568,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Directory#createSlicer(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Directory#createSlicer(String,IOContext).mjava","sourceNew":"  /**\n   * Creates an {@link IndexInputSlicer} for the given file name.\n   * IndexInputSlicer allows other {@link Directory} implementations to\n   * efficiently open one or more sliced {@link IndexInput} instances from a\n   * single file handle. The underlying file handle is kept open until the\n   * {@link IndexInputSlicer} is closed.\n   * <p>Throws {@link FileNotFoundException} or {@link NoSuchFileException}\n   * if the file does not exist.\n   *\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @lucene.internal\n   * @lucene.experimental\n   */\n  public IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    return new IndexInputSlicer() {\n      private final IndexInput base = Directory.this.openInput(name, context);\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SlicedIndexInput(\"SlicedIndexInput(\" + sliceDescription + \" in \" + base + \")\", base, offset, length);\n      }\n      @Override\n      public void close() throws IOException {\n        base.close();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates an {@link IndexInputSlicer} for the given file name.\n   * IndexInputSlicer allows other {@link Directory} implementations to\n   * efficiently open one or more sliced {@link IndexInput} instances from a\n   * single file handle. The underlying file handle is kept open until the\n   * {@link IndexInputSlicer} is closed.\n   *\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @lucene.internal\n   * @lucene.experimental\n   */\n  public IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    return new IndexInputSlicer() {\n      private final IndexInput base = Directory.this.openInput(name, context);\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SlicedIndexInput(\"SlicedIndexInput(\" + sliceDescription + \" in \" + base + \")\", base, offset, length);\n      }\n      @Override\n      public void close() throws IOException {\n        base.close();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","date":1400334249,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/Directory#createSlicer(String,IOContext).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates an {@link IndexInputSlicer} for the given file name.\n   * IndexInputSlicer allows other {@link Directory} implementations to\n   * efficiently open one or more sliced {@link IndexInput} instances from a\n   * single file handle. The underlying file handle is kept open until the\n   * {@link IndexInputSlicer} is closed.\n   * <p>Throws {@link FileNotFoundException} or {@link NoSuchFileException}\n   * if the file does not exist.\n   *\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @lucene.internal\n   * @lucene.experimental\n   */\n  public IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    return new IndexInputSlicer() {\n      private final IndexInput base = Directory.this.openInput(name, context);\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SlicedIndexInput(\"SlicedIndexInput(\" + sliceDescription + \" in \" + base + \")\", base, offset, length);\n      }\n      @Override\n      public void close() throws IOException {\n        base.close();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/Directory#createSlicer(String,IOContext).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates an {@link IndexInputSlicer} for the given file name.\n   * IndexInputSlicer allows other {@link Directory} implementations to\n   * efficiently open one or more sliced {@link IndexInput} instances from a\n   * single file handle. The underlying file handle is kept open until the\n   * {@link IndexInputSlicer} is closed.\n   * <p>Throws {@link FileNotFoundException} or {@link NoSuchFileException}\n   * if the file does not exist.\n   *\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @lucene.internal\n   * @lucene.experimental\n   */\n  public IndexInputSlicer createSlicer(final String name, final IOContext context) throws IOException {\n    ensureOpen();\n    return new IndexInputSlicer() {\n      private final IndexInput base = Directory.this.openInput(name, context);\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SlicedIndexInput(\"SlicedIndexInput(\" + sliceDescription + \" in \" + base + \")\", base, offset, length);\n      }\n      @Override\n      public void close() throws IOException {\n        base.close();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7460755aa94143153400f49c8ac2746f5d092e1a"],"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["7460755aa94143153400f49c8ac2746f5d092e1a"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"56572ec06f1407c066d6b7399413178b33176cd8":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52","e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"7460755aa94143153400f49c8ac2746f5d092e1a":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","56572ec06f1407c066d6b7399413178b33176cd8"],"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["001b25b42373b22a52f399dbf072f1224632e8e6","fe33227f6805edab2036cbb80645cc4e2d1fa424","7460755aa94143153400f49c8ac2746f5d092e1a"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"7460755aa94143153400f49c8ac2746f5d092e1a":["001b25b42373b22a52f399dbf072f1224632e8e6","4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","fe33227f6805edab2036cbb80645cc4e2d1fa424","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}