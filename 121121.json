{"path":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStringsLight#getRandomAcceptedString(Random).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStringsLight#getRandomAcceptedString(Random).mjava","pathOld":"/dev/null","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<>();\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final LightAutomaton.Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<LightAutomaton.Transition> toAccept = new ArrayList<>();\n          for(LightAutomaton.Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        soFar.add(getRandomCodePoint(r, t.min, t.max));\n        s = t.dest;\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStringsLight#getRandomAcceptedString(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStringsLight#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<>();\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        soFar.add(getRandomCodePoint(r, t.min, t.max));\n        s = t.dest;\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<>();\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final LightAutomaton.Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<LightAutomaton.Transition> toAccept = new ArrayList<>();\n          for(LightAutomaton.Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        soFar.add(getRandomCodePoint(r, t.min, t.max));\n        s = t.dest;\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#getRandomAcceptedString(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStringsLight#getRandomAcceptedString(Random).mjava","sourceNew":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<>();\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        soFar.add(getRandomCodePoint(r, t.min, t.max));\n        s = t.dest;\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","sourceOld":"    public int[] getRandomAcceptedString(Random r) {\n\n      final List<Integer> soFar = new ArrayList<>();\n\n      int s = 0;\n\n      while(true) {\n      \n        if (a.isAccept(s)) {\n          if (a.getNumTransitions(s) == 0) {\n            // stop now\n            break;\n          } else {\n            if (r.nextBoolean()) {\n              break;\n            }\n          }\n        }\n\n        if (a.getNumTransitions(s) == 0) {\n          throw new RuntimeException(\"this automaton has dead states\");\n        }\n\n        boolean cheat = r.nextBoolean();\n\n        final Transition t;\n        if (cheat) {\n          // pick a transition that we know is the fastest\n          // path to an accept state\n          List<Transition> toAccept = new ArrayList<>();\n          for(Transition t0 : transitions[s]) {\n            if (leadsToAccept.containsKey(t0)) {\n              toAccept.add(t0);\n            }\n          }\n          if (toAccept.size() == 0) {\n            // this is OK -- it means we jumped into a cycle\n            t = transitions[s][r.nextInt(transitions[s].length)];\n          } else {\n            t = toAccept.get(r.nextInt(toAccept.size()));\n          }\n        } else {\n          t = transitions[s][r.nextInt(transitions[s].length)];\n        }\n        soFar.add(getRandomCodePoint(r, t.min, t.max));\n        s = t.dest;\n      }\n\n      return ArrayUtil.toIntArray(soFar);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c8cfaac638acc80d26d08288440ede37e6539e9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}