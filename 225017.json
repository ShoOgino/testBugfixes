{"path":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testCoreContainerMetrics().mjava","commits":[{"id":"056ef30406180176075c44183ec40de4d2b8c68a","date":1501495731,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testCoreContainerMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCoreContainerMetrics() throws Exception {\n    String registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.node);\n    assertTrue(cc.getMetricManager().registryNames().toString(), cc.getMetricManager().registryNames().contains(registryName));\n    MetricRegistry registry = cc.getMetricManager().registry(registryName);\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.loaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.lazy\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.unloaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.specification\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.implementation\"));\n    Gauge<?> g = (Gauge<?>)metrics.get(\"CONTAINER.fs.path\");\n    assertEquals(g.getValue(), cc.getResourceLoader().getInstancePath().toAbsolutePath().toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testCoreContainerMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCoreContainerMetrics() throws Exception {\n    String registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.node);\n    assertTrue(cc.getMetricManager().registryNames().toString(), cc.getMetricManager().registryNames().contains(registryName));\n    MetricRegistry registry = cc.getMetricManager().registry(registryName);\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.loaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.lazy\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.unloaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.specification\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.implementation\"));\n    Gauge<?> g = (Gauge<?>)metrics.get(\"CONTAINER.fs.path\");\n    assertEquals(g.getValue(), cc.getResourceLoader().getInstancePath().toAbsolutePath().toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a9fde5df1c4cdd5292c6a5292c39c630896af8c","date":1502287655,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testCoreContainerMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testCoreContainerMetrics().mjava","sourceNew":"  @Test\n  public void testCoreContainerMetrics() throws Exception {\n    String registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.node);\n    assertTrue(cc.getMetricManager().registryNames().toString(), cc.getMetricManager().registryNames().contains(registryName));\n    MetricRegistry registry = cc.getMetricManager().registry(registryName);\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.loaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.lazy\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.unloaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.spins\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.spins\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.specification\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.implementation\"));\n    Gauge<?> g = (Gauge<?>)metrics.get(\"CONTAINER.fs.path\");\n    assertEquals(g.getValue(), cc.getResourceLoader().getInstancePath().toAbsolutePath().toString());\n    boolean spins = IOUtils.spins(cc.getCoreRootDirectory());\n    g = (Gauge<?>)metrics.get(\"CONTAINER.fs.coreRoot.spins\");\n    g = (Gauge<?>)metrics.get(\"CONTAINER.fs.coreRoot.spins\");\n    assertEquals(spins, g.getValue());\n    if (cc.getConfig().getSolrDataHome() != null) {\n      spins = IOUtils.spins(cc.getConfig().getSolrDataHome());\n      g = (Gauge<?>)metrics.get(\"CONTAINER.fs.spins\");\n      assertEquals(spins, g.getValue());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoreContainerMetrics() throws Exception {\n    String registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.node);\n    assertTrue(cc.getMetricManager().registryNames().toString(), cc.getMetricManager().registryNames().contains(registryName));\n    MetricRegistry registry = cc.getMetricManager().registry(registryName);\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.loaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.lazy\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.unloaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.specification\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.implementation\"));\n    Gauge<?> g = (Gauge<?>)metrics.get(\"CONTAINER.fs.path\");\n    assertEquals(g.getValue(), cc.getResourceLoader().getInstancePath().toAbsolutePath().toString());\n  }\n\n","bugFix":null,"bugIntro":["f5bbcf309247eced63db2b2eb0d35bb3e8c9384d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5bbcf309247eced63db2b2eb0d35bb3e8c9384d","date":1502291750,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testCoreContainerMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testCoreContainerMetrics().mjava","sourceNew":"  @Test\n  public void testCoreContainerMetrics() throws Exception {\n    String registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.node);\n    assertTrue(cc.getMetricManager().registryNames().toString(), cc.getMetricManager().registryNames().contains(registryName));\n    MetricRegistry registry = cc.getMetricManager().registry(registryName);\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.loaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.lazy\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.unloaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.spins\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.spins\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.specification\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.implementation\"));\n    Gauge<?> g = (Gauge<?>)metrics.get(\"CONTAINER.fs.path\");\n    assertEquals(g.getValue(), cc.getResourceLoader().getInstancePath().toAbsolutePath().toString());\n    boolean spins = IOUtils.spins(cc.getCoreRootDirectory());\n    g = (Gauge<?>)metrics.get(\"CONTAINER.fs.coreRoot.spins\");\n    assertEquals(spins, g.getValue());\n    g = (Gauge<?>)metrics.get(\"CONTAINER.fs.spins\");\n    if (cc.getConfig().getSolrDataHome() != null) {\n      spins = IOUtils.spins(cc.getConfig().getSolrDataHome());\n      assertEquals(spins, g.getValue());\n    } else {\n      assertEquals(spins, g.getValue());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoreContainerMetrics() throws Exception {\n    String registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.node);\n    assertTrue(cc.getMetricManager().registryNames().toString(), cc.getMetricManager().registryNames().contains(registryName));\n    MetricRegistry registry = cc.getMetricManager().registry(registryName);\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.loaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.lazy\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.unloaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.spins\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.spins\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.specification\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.implementation\"));\n    Gauge<?> g = (Gauge<?>)metrics.get(\"CONTAINER.fs.path\");\n    assertEquals(g.getValue(), cc.getResourceLoader().getInstancePath().toAbsolutePath().toString());\n    boolean spins = IOUtils.spins(cc.getCoreRootDirectory());\n    g = (Gauge<?>)metrics.get(\"CONTAINER.fs.coreRoot.spins\");\n    g = (Gauge<?>)metrics.get(\"CONTAINER.fs.coreRoot.spins\");\n    assertEquals(spins, g.getValue());\n    if (cc.getConfig().getSolrDataHome() != null) {\n      spins = IOUtils.spins(cc.getConfig().getSolrDataHome());\n      g = (Gauge<?>)metrics.get(\"CONTAINER.fs.spins\");\n      assertEquals(spins, g.getValue());\n    }\n  }\n\n","bugFix":["6a9fde5df1c4cdd5292c6a5292c39c630896af8c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testCoreContainerMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testCoreContainerMetrics().mjava","sourceNew":"  @Test\n  public void testCoreContainerMetrics() throws Exception {\n    String registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.node);\n    assertTrue(cc.getMetricManager().registryNames().toString(), cc.getMetricManager().registryNames().contains(registryName));\n    MetricRegistry registry = cc.getMetricManager().registry(registryName);\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.loaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.lazy\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.unloaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.spins\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.spins\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.specification\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.implementation\"));\n    Gauge<?> g = (Gauge<?>)metrics.get(\"CONTAINER.fs.path\");\n    assertEquals(g.getValue(), cc.getResourceLoader().getInstancePath().toAbsolutePath().toString());\n    boolean spins = IOUtils.spins(cc.getCoreRootDirectory());\n    g = (Gauge<?>)metrics.get(\"CONTAINER.fs.coreRoot.spins\");\n    assertEquals(spins, g.getValue());\n    g = (Gauge<?>)metrics.get(\"CONTAINER.fs.spins\");\n    if (cc.getConfig().getSolrDataHome() != null) {\n      spins = IOUtils.spins(cc.getConfig().getSolrDataHome());\n      assertEquals(spins, g.getValue());\n    } else {\n      assertEquals(spins, g.getValue());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoreContainerMetrics() throws Exception {\n    String registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.node);\n    assertTrue(cc.getMetricManager().registryNames().toString(), cc.getMetricManager().registryNames().contains(registryName));\n    MetricRegistry registry = cc.getMetricManager().registry(registryName);\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.loaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.lazy\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.unloaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.specification\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.implementation\"));\n    Gauge<?> g = (Gauge<?>)metrics.get(\"CONTAINER.fs.path\");\n    assertEquals(g.getValue(), cc.getResourceLoader().getInstancePath().toAbsolutePath().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testCoreContainerMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testCoreContainerMetrics().mjava","sourceNew":"  @Test\n  public void testCoreContainerMetrics() throws Exception {\n    String registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.node);\n    assertTrue(cc.getMetricManager().registryNames().toString(), cc.getMetricManager().registryNames().contains(registryName));\n    MetricRegistry registry = cc.getMetricManager().registry(registryName);\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.loaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.lazy\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.unloaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.spins\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.spins\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.specification\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.implementation\"));\n    Gauge<?> g = (Gauge<?>)metrics.get(\"CONTAINER.fs.path\");\n    assertEquals(g.getValue(), cc.getResourceLoader().getInstancePath().toAbsolutePath().toString());\n    boolean spins = IOUtils.spins(cc.getCoreRootDirectory());\n    g = (Gauge<?>)metrics.get(\"CONTAINER.fs.coreRoot.spins\");\n    assertEquals(spins, g.getValue());\n    g = (Gauge<?>)metrics.get(\"CONTAINER.fs.spins\");\n    if (cc.getConfig().getSolrDataHome() != null) {\n      spins = IOUtils.spins(cc.getConfig().getSolrDataHome());\n      assertEquals(spins, g.getValue());\n    } else {\n      assertEquals(spins, g.getValue());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoreContainerMetrics() throws Exception {\n    String registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.node);\n    assertTrue(cc.getMetricManager().registryNames().toString(), cc.getMetricManager().registryNames().contains(registryName));\n    MetricRegistry registry = cc.getMetricManager().registry(registryName);\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.loaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.lazy\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.unloaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.specification\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.implementation\"));\n    Gauge<?> g = (Gauge<?>)metrics.get(\"CONTAINER.fs.path\");\n    assertEquals(g.getValue(), cc.getResourceLoader().getInstancePath().toAbsolutePath().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testCoreContainerMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testCoreContainerMetrics().mjava","sourceNew":"  @Test\n  public void testCoreContainerMetrics() throws Exception {\n    String registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.node);\n    assertTrue(cc.getMetricManager().registryNames().toString(), cc.getMetricManager().registryNames().contains(registryName));\n    MetricRegistry registry = cc.getMetricManager().registry(registryName);\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.loaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.lazy\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.unloaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.spins\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.spins\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.specification\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.implementation\"));\n    Gauge<?> g = (Gauge<?>)metrics.get(\"CONTAINER.fs.path\");\n    assertEquals(g.getValue(), cc.getSolrHome());\n    boolean spins = IOUtils.spins(cc.getCoreRootDirectory());\n    g = (Gauge<?>)metrics.get(\"CONTAINER.fs.coreRoot.spins\");\n    assertEquals(spins, g.getValue());\n    g = (Gauge<?>)metrics.get(\"CONTAINER.fs.spins\");\n    if (cc.getConfig().getSolrDataHome() != null) {\n      spins = IOUtils.spins(cc.getConfig().getSolrDataHome());\n      assertEquals(spins, g.getValue());\n    } else {\n      assertEquals(spins, g.getValue());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoreContainerMetrics() throws Exception {\n    String registryName = SolrMetricManager.getRegistryName(SolrInfoBean.Group.node);\n    assertTrue(cc.getMetricManager().registryNames().toString(), cc.getMetricManager().registryNames().contains(registryName));\n    MetricRegistry registry = cc.getMetricManager().registry(registryName);\n    Map<String, Metric> metrics = registry.getMetrics();\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.loaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.lazy\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.cores.unloaded\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.spins\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.totalSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.usableSpace\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.path\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.fs.coreRoot.spins\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.specification\"));\n    assertTrue(metrics.containsKey(\"CONTAINER.version.implementation\"));\n    Gauge<?> g = (Gauge<?>)metrics.get(\"CONTAINER.fs.path\");\n    assertEquals(g.getValue(), cc.getResourceLoader().getInstancePath().toAbsolutePath().toString());\n    boolean spins = IOUtils.spins(cc.getCoreRootDirectory());\n    g = (Gauge<?>)metrics.get(\"CONTAINER.fs.coreRoot.spins\");\n    assertEquals(spins, g.getValue());\n    g = (Gauge<?>)metrics.get(\"CONTAINER.fs.spins\");\n    if (cc.getConfig().getSolrDataHome() != null) {\n      spins = IOUtils.spins(cc.getConfig().getSolrDataHome());\n      assertEquals(spins, g.getValue());\n    } else {\n      assertEquals(spins, g.getValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["f5bbcf309247eced63db2b2eb0d35bb3e8c9384d"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","056ef30406180176075c44183ec40de4d2b8c68a"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["056ef30406180176075c44183ec40de4d2b8c68a","f5bbcf309247eced63db2b2eb0d35bb3e8c9384d"],"f5bbcf309247eced63db2b2eb0d35bb3e8c9384d":["6a9fde5df1c4cdd5292c6a5292c39c630896af8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a9fde5df1c4cdd5292c6a5292c39c630896af8c":["056ef30406180176075c44183ec40de4d2b8c68a"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","f5bbcf309247eced63db2b2eb0d35bb3e8c9384d"],"056ef30406180176075c44183ec40de4d2b8c68a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"]},"commit2Childs":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"f5bbcf309247eced63db2b2eb0d35bb3e8c9384d":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","056ef30406180176075c44183ec40de4d2b8c68a"],"6a9fde5df1c4cdd5292c6a5292c39c630896af8c":["f5bbcf309247eced63db2b2eb0d35bb3e8c9384d"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"056ef30406180176075c44183ec40de4d2b8c68a":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","58884af1f68e9d61c217c753fbd6266d86a63b14","6a9fde5df1c4cdd5292c6a5292c39c630896af8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}