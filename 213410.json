{"path":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","commits":[{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","sourceNew":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","sourceOld":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","sourceNew":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","sourceOld":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","sourceNew":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","sourceOld":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","sourceNew":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","sourceOld":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","sourceNew":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","sourceOld":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","sourceNew":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","sourceOld":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","sourceNew":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","sourceOld":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","sourceNew":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","sourceOld":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","sourceNew":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // fully merge and validate MultiNorms against single segment.\n    riw.forceMerge(1);\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","sourceOld":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // optimize and validate MultiNorms against single segment.\n    riw.optimize();\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d","date":1325789720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","sourceNew":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    // todo: generalize\n    DocValues dv1 = MultiDocValues.getNormDocValues(ir1, field);\n    byte[] norms1 = dv1 == null ? null : (byte[]) dv1.getSource().getArray();\n    \n    // fully merge and validate MultiNorms against single segment.\n    riw.forceMerge(1);\n    IndexReader ir2 = riw.getReader();\n    DocValues dv2 = ir2.getSequentialSubReaders()[0].normValues(field);\n    byte[] norms2 = dv2 == null ? null : (byte[]) dv2.getSource().getArray();\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","sourceOld":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    byte[] norms1 = MultiNorms.norms(ir1, field);\n    \n    // fully merge and validate MultiNorms against single segment.\n    riw.forceMerge(1);\n    IndexReader ir2 = riw.getReader();\n    byte[] norms2 = ir2.getSequentialSubReaders()[0].norms(field);\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af906d697b0a05f75caf94b03a28adb76579c66","date":1327856985,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","sourceNew":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    // todo: generalize\n    DocValues dv1 = MultiDocValues.getNormDocValues(ir1, field);\n    byte[] norms1 = dv1 == null ? null : (byte[]) dv1.getSource().getArray();\n    \n    // fully merge and validate MultiNorms against single segment.\n    riw.forceMerge(1);\n    DirectoryReader ir2 = riw.getReader();\n    DocValues dv2 = getOnlySegmentReader(ir2).normValues(field);\n    byte[] norms2 = dv2 == null ? null : (byte[]) dv2.getSource().getArray();\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","sourceOld":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    // todo: generalize\n    DocValues dv1 = MultiDocValues.getNormDocValues(ir1, field);\n    byte[] norms1 = dv1 == null ? null : (byte[]) dv1.getSource().getArray();\n    \n    // fully merge and validate MultiNorms against single segment.\n    riw.forceMerge(1);\n    IndexReader ir2 = riw.getReader();\n    DocValues dv2 = ir2.getSequentialSubReaders()[0].normValues(field);\n    byte[] norms2 = dv2 == null ? null : (byte[]) dv2.getSource().getArray();\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","sourceNew":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    // todo: generalize\n    DocValues dv1 = MultiDocValues.getNormDocValues(ir1, field);\n    byte[] norms1 = dv1 == null ? null : (byte[]) dv1.getSource().getArray();\n    \n    // fully merge and validate MultiNorms against single segment.\n    riw.forceMerge(1);\n    DirectoryReader ir2 = riw.getReader();\n    DocValues dv2 = getOnlySegmentReader(ir2).normValues(field);\n    byte[] norms2 = dv2 == null ? null : (byte[]) dv2.getSource().getArray();\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","sourceOld":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    // todo: generalize\n    DocValues dv1 = MultiDocValues.getNormDocValues(ir1, field);\n    byte[] norms1 = dv1 == null ? null : (byte[]) dv1.getSource().getArray();\n    \n    // fully merge and validate MultiNorms against single segment.\n    riw.forceMerge(1);\n    IndexReader ir2 = riw.getReader();\n    DocValues dv2 = ir2.getSequentialSubReaders()[0].normValues(field);\n    byte[] norms2 = dv2 == null ? null : (byte[]) dv2.getSource().getArray();\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#getNorms(String,Field,Field).mjava","sourceNew":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    // todo: generalize\n    DocValues dv1 = MultiDocValues.getNormDocValues(ir1, field);\n    byte[] norms1 = dv1 == null ? null : (byte[]) dv1.getSource().getArray();\n    \n    // fully merge and validate MultiNorms against single segment.\n    riw.forceMerge(1);\n    DirectoryReader ir2 = riw.getReader();\n    DocValues dv2 = getOnlySegmentReader(ir2).normValues(field);\n    byte[] norms2 = dv2 == null ? null : (byte[]) dv2.getSource().getArray();\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","sourceOld":"  /**\n   * Indexes at least 1 document with f1, and at least 1 document with f2.\n   * returns the norms for \"field\".\n   */\n  static byte[] getNorms(String field, Field f1, Field f2) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n    \n    // add f1\n    Document d = new Document();\n    d.add(f1);\n    riw.addDocument(d);\n    \n    // add f2\n    d = new Document();\n    d.add(f2);\n    riw.addDocument(d);\n    \n    // add a mix of f1's and f2's\n    int numExtraDocs = _TestUtil.nextInt(random, 1, 1000);\n    for (int i = 0; i < numExtraDocs; i++) {\n      d = new Document();\n      d.add(random.nextBoolean() ? f1 : f2);\n      riw.addDocument(d);\n    }\n\n    IndexReader ir1 = riw.getReader();\n    // todo: generalize\n    DocValues dv1 = MultiDocValues.getNormDocValues(ir1, field);\n    byte[] norms1 = dv1 == null ? null : (byte[]) dv1.getSource().getArray();\n    \n    // fully merge and validate MultiNorms against single segment.\n    riw.forceMerge(1);\n    DirectoryReader ir2 = riw.getReader();\n    DocValues dv2 = getOnlySegmentReader(ir2).normValues(field);\n    byte[] norms2 = dv2 == null ? null : (byte[]) dv2.getSource().getArray();\n    \n    assertArrayEquals(norms1, norms2);\n    ir1.close();\n    ir2.close();\n    riw.close();\n    dir.close();\n    return norms1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5af906d697b0a05f75caf94b03a28adb76579c66":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"c19f985e36a65cc969e8e564fe337a0d41512075":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d","5af906d697b0a05f75caf94b03a28adb76579c66"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["c19f985e36a65cc969e8e564fe337a0d41512075"],"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5af906d697b0a05f75caf94b03a28adb76579c66":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["c19f985e36a65cc969e8e564fe337a0d41512075","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d"],"962d04139994fce5193143ef35615499a9a96d78":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c19f985e36a65cc969e8e564fe337a0d41512075":["01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d":["5af906d697b0a05f75caf94b03a28adb76579c66","5cab9a86bd67202d20b6adc463008c8e982b070a"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d14e8d18c0e3970c20354dbeeb49da11bd587fbd","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}