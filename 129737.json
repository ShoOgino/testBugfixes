{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getFlagParsingStrategy(String).mjava","commits":[{"id":"8f976917c54bb925b908d73fc4c2092e4abb8508","date":1315634439,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getFlagParsingStrategy(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definiton line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definiton\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d2676f60312754dc25ef542551cb2623527013a4","d2676f60312754dc25ef542551cb2623527013a4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6adfdb3f33dbaf27203539f573faac3966cc55f","date":1318443641,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getFlagParsingStrategy(String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getFlagParsingStrategy(String).mjava","sourceNew":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","sourceOld":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definiton line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definiton\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getFlagParsingStrategy(String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#getFlagParsingStrategy(String).mjava","sourceNew":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","sourceOld":"  /**\n   * Determines the appropriate {@link FlagParsingStrategy} based on the FLAG definition line taken from the affix file\n   *\n   * @param flagLine Line containing the flag information\n   * @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition\n   */\n  private FlagParsingStrategy getFlagParsingStrategy(String flagLine) {\n    String flagType = flagLine.substring(5);\n\n    if (NUM_FLAG_TYPE.equals(flagType)) {\n      return new NumFlagParsingStrategy();\n    } else if (UTF8_FLAG_TYPE.equals(flagType)) {\n      return new SimpleFlagParsingStrategy();\n    } else if (LONG_FLAG_TYPE.equals(flagType)) {\n      return new DoubleASCIIFlagParsingStrategy();\n    }\n\n    throw new IllegalArgumentException(\"Unknown flag type: \" + flagType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a6adfdb3f33dbaf27203539f573faac3966cc55f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f976917c54bb925b908d73fc4c2092e4abb8508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a6adfdb3f33dbaf27203539f573faac3966cc55f":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"8f976917c54bb925b908d73fc4c2092e4abb8508":["a6adfdb3f33dbaf27203539f573faac3966cc55f"],"a6adfdb3f33dbaf27203539f573faac3966cc55f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}