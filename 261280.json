{"path":"src/java/org/apache/solr/handler/SnapPuller#checkCompressed(HttpMethod,InputStream).mjava","commits":[{"id":"c6e1afc23adf8af4aa2dfc781b02b63710546b33","date":1227622754,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#checkCompressed(HttpMethod,InputStream).mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * This is copied from CommonsHttpSolrServer\n   */\n  private InputStream checkCompressed(HttpMethod method, InputStream respBody) throws IOException {\n    Header contentEncodingHeader = method.getResponseHeader(\"Content-Encoding\");\n    if (contentEncodingHeader != null) {\n      String contentEncoding = contentEncodingHeader.getValue();\n      if (contentEncoding.contains(\"gzip\")) {\n        respBody = new GZIPInputStream(respBody);\n      } else if (contentEncoding.contains(\"deflate\")) {\n        respBody = new InflaterInputStream(respBody);\n      }\n    } else {\n      Header contentTypeHeader = method.getResponseHeader(\"Content-Type\");\n      if (contentTypeHeader != null) {\n        String contentType = contentTypeHeader.getValue();\n        if (contentType != null) {\n          if (contentType.startsWith(\"application/x-gzip-compressed\")) {\n            respBody = new GZIPInputStream(respBody);\n          } else if (contentType.startsWith(\"application/x-deflate\")) {\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n      }\n    }\n    return respBody;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#checkCompressed(HttpMethod,InputStream).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#checkCompressed(HttpMethod,InputStream).mjava","sourceNew":"  /*\n   * This is copied from CommonsHttpSolrServer\n   */\n  private InputStream checkCompressed(HttpMethod method, InputStream respBody) throws IOException {\n    Header contentEncodingHeader = method.getResponseHeader(\"Content-Encoding\");\n    if (contentEncodingHeader != null) {\n      String contentEncoding = contentEncodingHeader.getValue();\n      if (contentEncoding.contains(\"gzip\")) {\n        respBody = new GZIPInputStream(respBody);\n      } else if (contentEncoding.contains(\"deflate\")) {\n        respBody = new InflaterInputStream(respBody);\n      }\n    } else {\n      Header contentTypeHeader = method.getResponseHeader(\"Content-Type\");\n      if (contentTypeHeader != null) {\n        String contentType = contentTypeHeader.getValue();\n        if (contentType != null) {\n          if (contentType.startsWith(\"application/x-gzip-compressed\")) {\n            respBody = new GZIPInputStream(respBody);\n          } else if (contentType.startsWith(\"application/x-deflate\")) {\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n      }\n    }\n    return respBody;\n  }\n\n","sourceOld":"  /*\n   * This is copied from CommonsHttpSolrServer\n   */\n  private InputStream checkCompressed(HttpMethod method, InputStream respBody) throws IOException {\n    Header contentEncodingHeader = method.getResponseHeader(\"Content-Encoding\");\n    if (contentEncodingHeader != null) {\n      String contentEncoding = contentEncodingHeader.getValue();\n      if (contentEncoding.contains(\"gzip\")) {\n        respBody = new GZIPInputStream(respBody);\n      } else if (contentEncoding.contains(\"deflate\")) {\n        respBody = new InflaterInputStream(respBody);\n      }\n    } else {\n      Header contentTypeHeader = method.getResponseHeader(\"Content-Type\");\n      if (contentTypeHeader != null) {\n        String contentType = contentTypeHeader.getValue();\n        if (contentType != null) {\n          if (contentType.startsWith(\"application/x-gzip-compressed\")) {\n            respBody = new GZIPInputStream(respBody);\n          } else if (contentType.startsWith(\"application/x-deflate\")) {\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n      }\n    }\n    return respBody;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}