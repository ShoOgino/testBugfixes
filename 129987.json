{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/DistanceUnits#findDistanceUnit(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/DistanceUnits#findDistanceUnit(String).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/geometry/DistanceUnits#findDistanceUnit(String).mjava","sourceNew":"  /**\n   * Returns the DistanceUnit which represents the given unit\n   *\n   * @param unit Unit whose DistanceUnit should be found\n   * @return DistanceUnit representing the unit\n   * @throws IllegalArgumentException if no DistanceUnit which represents the given unit is found\n   */\n  public static DistanceUnits findDistanceUnit(String unit) {\n    if (MILES.getUnit().equals(unit)) {\n      return MILES;\n    }\n\n    if (KILOMETERS.getUnit().equals(unit)) {\n      return KILOMETERS;\n    }\n\n    throw new IllegalArgumentException(\"Unknown distance unit \" + unit);\n  }\n\n","sourceOld":"  /**\n   * Returns the DistanceUnit which represents the given unit\n   *\n   * @param unit Unit whose DistanceUnit should be found\n   * @return DistanceUnit representing the unit\n   * @throws IllegalArgumentException if no DistanceUnit which represents the given unit is found\n   */\n  public static DistanceUnits findDistanceUnit(String unit) {\n    if (MILES.getUnit().equals(unit)) {\n      return MILES;\n    }\n\n    if (KILOMETERS.getUnit().equals(unit)) {\n      return KILOMETERS;\n    }\n\n    throw new IllegalArgumentException(\"Unknown distance unit \" + unit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/DistanceUnits#findDistanceUnit(String).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/DistanceUnits#findDistanceUnit(String).mjava","sourceNew":"  /**\n   * Returns the DistanceUnit which represents the given unit\n   *\n   * @param unit Unit whose DistanceUnit should be found\n   * @return DistanceUnit representing the unit\n   * @throws IllegalArgumentException if no DistanceUnit which represents the given unit is found\n   */\n  public static DistanceUnits findDistanceUnit(String unit) {\n    if (MILES.getUnit().equalsIgnoreCase(unit) || unit.equalsIgnoreCase(\"mi\")) {\n      return MILES;\n    }\n\n    if (KILOMETERS.getUnit().equalsIgnoreCase(unit)) {\n      return KILOMETERS;\n    }\n\n    throw new IllegalArgumentException(\"Unknown distance unit \" + unit);\n  }\n\n","sourceOld":"  /**\n   * Returns the DistanceUnit which represents the given unit\n   *\n   * @param unit Unit whose DistanceUnit should be found\n   * @return DistanceUnit representing the unit\n   * @throws IllegalArgumentException if no DistanceUnit which represents the given unit is found\n   */\n  public static DistanceUnits findDistanceUnit(String unit) {\n    if (MILES.getUnit().equals(unit)) {\n      return MILES;\n    }\n\n    if (KILOMETERS.getUnit().equals(unit)) {\n      return KILOMETERS;\n    }\n\n    throw new IllegalArgumentException(\"Unknown distance unit \" + unit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/DistanceUnits#findDistanceUnit(String).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/DistanceUnits#findDistanceUnit(String).mjava","sourceNew":"  /**\n   * Returns the DistanceUnit which represents the given unit\n   *\n   * @param unit Unit whose DistanceUnit should be found\n   * @return DistanceUnit representing the unit\n   * @throws IllegalArgumentException if no DistanceUnit which represents the given unit is found\n   */\n  public static DistanceUnits findDistanceUnit(String unit) {\n    if (MILES.getUnit().equalsIgnoreCase(unit) || unit.equalsIgnoreCase(\"mi\")) {\n      return MILES;\n    }\n\n    if (KILOMETERS.getUnit().equalsIgnoreCase(unit)) {\n      return KILOMETERS;\n    }\n\n    throw new IllegalArgumentException(\"Unknown distance unit \" + unit);\n  }\n\n","sourceOld":"  /**\n   * Returns the DistanceUnit which represents the given unit\n   *\n   * @param unit Unit whose DistanceUnit should be found\n   * @return DistanceUnit representing the unit\n   * @throws IllegalArgumentException if no DistanceUnit which represents the given unit is found\n   */\n  public static DistanceUnits findDistanceUnit(String unit) {\n    if (MILES.getUnit().equals(unit)) {\n      return MILES;\n    }\n\n    if (KILOMETERS.getUnit().equals(unit)) {\n      return KILOMETERS;\n    }\n\n    throw new IllegalArgumentException(\"Unknown distance unit \" + unit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fb7e38713d15939e085d376c6391e6e6262a81f","date":1329897272,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/DistanceUnits#findDistanceUnit(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the DistanceUnit which represents the given unit\n   *\n   * @param unit Unit whose DistanceUnit should be found\n   * @return DistanceUnit representing the unit\n   * @throws IllegalArgumentException if no DistanceUnit which represents the given unit is found\n   */\n  public static DistanceUnits findDistanceUnit(String unit) {\n    if (MILES.getUnit().equalsIgnoreCase(unit) || unit.equalsIgnoreCase(\"mi\")) {\n      return MILES;\n    }\n\n    if (KILOMETERS.getUnit().equalsIgnoreCase(unit)) {\n      return KILOMETERS;\n    }\n\n    throw new IllegalArgumentException(\"Unknown distance unit \" + unit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/DistanceUnits#findDistanceUnit(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the DistanceUnit which represents the given unit\n   *\n   * @param unit Unit whose DistanceUnit should be found\n   * @return DistanceUnit representing the unit\n   * @throws IllegalArgumentException if no DistanceUnit which represents the given unit is found\n   */\n  public static DistanceUnits findDistanceUnit(String unit) {\n    if (MILES.getUnit().equalsIgnoreCase(unit) || unit.equalsIgnoreCase(\"mi\")) {\n      return MILES;\n    }\n\n    if (KILOMETERS.getUnit().equalsIgnoreCase(unit)) {\n      return KILOMETERS;\n    }\n\n    throw new IllegalArgumentException(\"Unknown distance unit \" + unit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"e47768b261c28e7e6032060e8331475c81057953":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","2fb7e38713d15939e085d376c6391e6e6262a81f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e47768b261c28e7e6032060e8331475c81057953"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["5f4e87790277826a2aea119328600dfb07761f32","e47768b261c28e7e6032060e8331475c81057953","2fb7e38713d15939e085d376c6391e6e6262a81f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":[],"e47768b261c28e7e6032060e8331475c81057953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","5f4e87790277826a2aea119328600dfb07761f32"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}