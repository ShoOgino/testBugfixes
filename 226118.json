{"path":"solr/core/src/test/org/apache/solr/cloud/CloudTestUtils#waitForState(SolrCloudManager,String,long,TimeUnit,CollectionStatePredicate).mjava","commits":[{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudTestUtils#waitForState(SolrCloudManager,String,long,TimeUnit,CollectionStatePredicate).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#waitForState(String,long,TimeUnit,CollectionStatePredicate).mjava","sourceNew":"  /**\n   * Wait for a particular collection state to appear.\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param cloudManager current instance of {@link SolrCloudManager}\n   * @param collection  the collection to watch\n   * @param wait timeout value\n   * @param unit timeout unit\n   * @param predicate   a predicate to match against the collection state\n   */\n  public static long waitForState(final SolrCloudManager cloudManager,\n                                  final String collection,\n                                  long wait,\n                                  final TimeUnit unit,\n                                  final CollectionStatePredicate predicate) throws InterruptedException, TimeoutException, IOException {\n    TimeOut timeout = new TimeOut(wait, unit, cloudManager.getTimeSource());\n    long timeWarn = timeout.timeLeft(TimeUnit.MILLISECONDS) / 4;\n    while (!timeout.hasTimedOut()) {\n      ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n      DocCollection coll = state.getCollectionOrNull(collection);\n      // due to the way we manage collections in SimClusterStateProvider a null here\n      // can mean that a collection is still being created but has no replicas\n      if (coll == null) { // does not yet exist?\n        timeout.sleep(50);\n        continue;\n      }\n      if (predicate.matches(state.getLiveNodes(), coll)) {\n        log.trace(\"-- predicate matched with state {}\", state);\n        return timeout.timeElapsed(TimeUnit.MILLISECONDS);\n      }\n      timeout.sleep(50);\n      if (timeout.timeLeft(TimeUnit.MILLISECONDS) < timeWarn) {\n        log.trace(\"-- still not matching predicate: {}\", state);\n      }\n    }\n    throw new TimeoutException();\n  }\n\n","sourceOld":"  /**\n   * Block until a CollectionStatePredicate returns true, or the wait times out\n   *\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   *\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @return number of milliseconds elapsed\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException on timeout\n   * @throws IOException on watcher register / unregister error\n   */\n  public long waitForState(final String collection, long wait, TimeUnit unit, CollectionStatePredicate predicate)\n      throws InterruptedException, TimeoutException, IOException {\n    TimeOut timeout = new TimeOut(wait, unit, cluster.getTimeSource());\n    long timeWarn = timeout.timeLeft(TimeUnit.MILLISECONDS) / 4;\n    while (!timeout.hasTimedOut()) {\n      ClusterState state = cluster.getClusterStateProvider().getClusterState();\n      DocCollection coll = state.getCollectionOrNull(collection);\n      // due to the way we manage collections in SimClusterStateProvider a null here\n      // can mean that a collection is still being created but has no replicas\n      if (coll == null) { // does not yet exist?\n        timeout.sleep(50);\n        continue;\n      }\n      if (predicate.matches(state.getLiveNodes(), coll)) {\n        log.trace(\"-- predicate matched with state {}\", state);\n        return timeout.timeElapsed(TimeUnit.MILLISECONDS);\n      }\n      timeout.sleep(50);\n      if (timeout.timeLeft(TimeUnit.MILLISECONDS) < timeWarn) {\n        log.trace(\"-- still not matching predicate: {}\", state);\n      }\n    }\n    throw new TimeoutException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a","date":1524514741,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudTestUtils#waitForState(SolrCloudManager,String,long,TimeUnit,CollectionStatePredicate).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudTestUtils#waitForState(SolrCloudManager,String,long,TimeUnit,CollectionStatePredicate).mjava","sourceNew":"  /**\n   * Wait for a particular collection state to appear.\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param cloudManager current instance of {@link SolrCloudManager}\n   * @param collection  the collection to watch\n   * @param wait timeout value\n   * @param unit timeout unit\n   * @param predicate   a predicate to match against the collection state\n   */\n  public static long waitForState(final SolrCloudManager cloudManager,\n                                  final String collection,\n                                  long wait,\n                                  final TimeUnit unit,\n                                  final CollectionStatePredicate predicate) throws InterruptedException, TimeoutException, IOException {\n    TimeOut timeout = new TimeOut(wait, unit, cloudManager.getTimeSource());\n    long timeWarn = timeout.timeLeft(TimeUnit.MILLISECONDS) / 4;\n    ClusterState state = null;\n    DocCollection coll = null;\n    while (!timeout.hasTimedOut()) {\n      state = cloudManager.getClusterStateProvider().getClusterState();\n      coll = state.getCollectionOrNull(collection);\n      // due to the way we manage collections in SimClusterStateProvider a null here\n      // can mean that a collection is still being created but has no replicas\n      if (coll == null) { // does not yet exist?\n        timeout.sleep(50);\n        continue;\n      }\n      if (predicate.matches(state.getLiveNodes(), coll)) {\n        log.trace(\"-- predicate matched with state {}\", state);\n        return timeout.timeElapsed(TimeUnit.MILLISECONDS);\n      }\n      timeout.sleep(50);\n      if (timeout.timeLeft(TimeUnit.MILLISECONDS) < timeWarn) {\n        log.trace(\"-- still not matching predicate: {}\", state);\n      }\n    }\n    throw new TimeoutException(\"last state: \" + coll);\n  }\n\n","sourceOld":"  /**\n   * Wait for a particular collection state to appear.\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param cloudManager current instance of {@link SolrCloudManager}\n   * @param collection  the collection to watch\n   * @param wait timeout value\n   * @param unit timeout unit\n   * @param predicate   a predicate to match against the collection state\n   */\n  public static long waitForState(final SolrCloudManager cloudManager,\n                                  final String collection,\n                                  long wait,\n                                  final TimeUnit unit,\n                                  final CollectionStatePredicate predicate) throws InterruptedException, TimeoutException, IOException {\n    TimeOut timeout = new TimeOut(wait, unit, cloudManager.getTimeSource());\n    long timeWarn = timeout.timeLeft(TimeUnit.MILLISECONDS) / 4;\n    while (!timeout.hasTimedOut()) {\n      ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n      DocCollection coll = state.getCollectionOrNull(collection);\n      // due to the way we manage collections in SimClusterStateProvider a null here\n      // can mean that a collection is still being created but has no replicas\n      if (coll == null) { // does not yet exist?\n        timeout.sleep(50);\n        continue;\n      }\n      if (predicate.matches(state.getLiveNodes(), coll)) {\n        log.trace(\"-- predicate matched with state {}\", state);\n        return timeout.timeElapsed(TimeUnit.MILLISECONDS);\n      }\n      timeout.sleep(50);\n      if (timeout.timeLeft(TimeUnit.MILLISECONDS) < timeWarn) {\n        log.trace(\"-- still not matching predicate: {}\", state);\n      }\n    }\n    throw new TimeoutException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudTestUtils#waitForState(SolrCloudManager,String,long,TimeUnit,CollectionStatePredicate).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudTestUtils#waitForState(SolrCloudManager,String,long,TimeUnit,CollectionStatePredicate).mjava","sourceNew":"  /**\n   * Wait for a particular collection state to appear.\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param cloudManager current instance of {@link SolrCloudManager}\n   * @param collection  the collection to watch\n   * @param wait timeout value\n   * @param unit timeout unit\n   * @param predicate   a predicate to match against the collection state\n   */\n  public static long waitForState(final SolrCloudManager cloudManager,\n                                  final String collection,\n                                  long wait,\n                                  final TimeUnit unit,\n                                  final CollectionStatePredicate predicate) throws InterruptedException, TimeoutException, IOException {\n    TimeOut timeout = new TimeOut(wait, unit, cloudManager.getTimeSource());\n    long timeWarn = timeout.timeLeft(TimeUnit.MILLISECONDS) / 4;\n    ClusterState state = null;\n    DocCollection coll = null;\n    while (!timeout.hasTimedOut()) {\n      state = cloudManager.getClusterStateProvider().getClusterState();\n      coll = state.getCollectionOrNull(collection);\n      // due to the way we manage collections in SimClusterStateProvider a null here\n      // can mean that a collection is still being created but has no replicas\n      if (coll == null) { // does not yet exist?\n        timeout.sleep(50);\n        continue;\n      }\n      if (predicate.matches(state.getLiveNodes(), coll)) {\n        log.trace(\"-- predicate matched with state {}\", state);\n        return timeout.timeElapsed(TimeUnit.MILLISECONDS);\n      }\n      timeout.sleep(50);\n      if (timeout.timeLeft(TimeUnit.MILLISECONDS) < timeWarn) {\n        log.trace(\"-- still not matching predicate: {}\", state);\n      }\n    }\n    throw new TimeoutException(\"last ClusterState: \" + state + \", last coll state: \" + coll);\n  }\n\n","sourceOld":"  /**\n   * Wait for a particular collection state to appear.\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param cloudManager current instance of {@link SolrCloudManager}\n   * @param collection  the collection to watch\n   * @param wait timeout value\n   * @param unit timeout unit\n   * @param predicate   a predicate to match against the collection state\n   */\n  public static long waitForState(final SolrCloudManager cloudManager,\n                                  final String collection,\n                                  long wait,\n                                  final TimeUnit unit,\n                                  final CollectionStatePredicate predicate) throws InterruptedException, TimeoutException, IOException {\n    TimeOut timeout = new TimeOut(wait, unit, cloudManager.getTimeSource());\n    long timeWarn = timeout.timeLeft(TimeUnit.MILLISECONDS) / 4;\n    ClusterState state = null;\n    DocCollection coll = null;\n    while (!timeout.hasTimedOut()) {\n      state = cloudManager.getClusterStateProvider().getClusterState();\n      coll = state.getCollectionOrNull(collection);\n      // due to the way we manage collections in SimClusterStateProvider a null here\n      // can mean that a collection is still being created but has no replicas\n      if (coll == null) { // does not yet exist?\n        timeout.sleep(50);\n        continue;\n      }\n      if (predicate.matches(state.getLiveNodes(), coll)) {\n        log.trace(\"-- predicate matched with state {}\", state);\n        return timeout.timeElapsed(TimeUnit.MILLISECONDS);\n      }\n      timeout.sleep(50);\n      if (timeout.timeLeft(TimeUnit.MILLISECONDS) < timeWarn) {\n        log.trace(\"-- still not matching predicate: {}\", state);\n      }\n    }\n    throw new TimeoutException(\"last state: \" + coll);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8254aa20264eb7a88d556bbe0346667937ed9c2a","date":1538494545,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudTestUtils#waitForState(SolrCloudManager,String,long,TimeUnit,CollectionStatePredicate).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudTestUtils#waitForState(SolrCloudManager,String,long,TimeUnit,CollectionStatePredicate).mjava","sourceNew":"  /**\n   * Wait for a particular collection state to appear.\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param cloudManager current instance of {@link SolrCloudManager}\n   * @param collection  the collection to watch\n   * @param wait timeout value\n   * @param unit timeout unit\n   * @param predicate   a predicate to match against the collection state\n   */\n  public static long waitForState(final SolrCloudManager cloudManager,\n                                  final String collection,\n                                  long wait,\n                                  final TimeUnit unit,\n                                  final CollectionStatePredicate predicate) throws InterruptedException, TimeoutException, IOException {\n    TimeOut timeout = new TimeOut(wait, unit, cloudManager.getTimeSource());\n    long timeWarn = timeout.timeLeft(TimeUnit.MILLISECONDS) / 4;\n    ClusterState state = null;\n    DocCollection coll = null;\n    while (!timeout.hasTimedOut()) {\n      state = cloudManager.getClusterStateProvider().getClusterState();\n      coll = state.getCollectionOrNull(collection);\n      // due to the way we manage collections in SimClusterStateProvider a null here\n      // can mean that a collection is still being created but has no replicas\n      if (coll == null) { // does not yet exist?\n        timeout.sleep(100);\n        continue;\n      }\n      if (predicate.matches(state.getLiveNodes(), coll)) {\n        log.trace(\"-- predicate matched with state {}\", state);\n        return timeout.timeElapsed(TimeUnit.MILLISECONDS);\n      }\n      timeout.sleep(100);\n      if (timeout.timeLeft(TimeUnit.MILLISECONDS) < timeWarn) {\n        log.trace(\"-- still not matching predicate: {}\", state);\n      }\n    }\n    throw new TimeoutException(\"last ClusterState: \" + state + \", last coll state: \" + coll);\n  }\n\n","sourceOld":"  /**\n   * Wait for a particular collection state to appear.\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param cloudManager current instance of {@link SolrCloudManager}\n   * @param collection  the collection to watch\n   * @param wait timeout value\n   * @param unit timeout unit\n   * @param predicate   a predicate to match against the collection state\n   */\n  public static long waitForState(final SolrCloudManager cloudManager,\n                                  final String collection,\n                                  long wait,\n                                  final TimeUnit unit,\n                                  final CollectionStatePredicate predicate) throws InterruptedException, TimeoutException, IOException {\n    TimeOut timeout = new TimeOut(wait, unit, cloudManager.getTimeSource());\n    long timeWarn = timeout.timeLeft(TimeUnit.MILLISECONDS) / 4;\n    ClusterState state = null;\n    DocCollection coll = null;\n    while (!timeout.hasTimedOut()) {\n      state = cloudManager.getClusterStateProvider().getClusterState();\n      coll = state.getCollectionOrNull(collection);\n      // due to the way we manage collections in SimClusterStateProvider a null here\n      // can mean that a collection is still being created but has no replicas\n      if (coll == null) { // does not yet exist?\n        timeout.sleep(50);\n        continue;\n      }\n      if (predicate.matches(state.getLiveNodes(), coll)) {\n        log.trace(\"-- predicate matched with state {}\", state);\n        return timeout.timeElapsed(TimeUnit.MILLISECONDS);\n      }\n      timeout.sleep(50);\n      if (timeout.timeLeft(TimeUnit.MILLISECONDS) < timeWarn) {\n        log.trace(\"-- still not matching predicate: {}\", state);\n      }\n    }\n    throw new TimeoutException(\"last ClusterState: \" + state + \", last coll state: \" + coll);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#waitForState(SolrCloudManager,String,long,TimeUnit,CollectionStatePredicate).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudTestUtils#waitForState(SolrCloudManager,String,long,TimeUnit,CollectionStatePredicate).mjava","sourceNew":"  /**\n   * Wait for a particular collection state to appear.\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param cloudManager current instance of {@link SolrCloudManager}\n   * @param collection  the collection to watch\n   * @param wait timeout value\n   * @param unit timeout unit\n   * @param predicate   a predicate to match against the collection state\n   */\n  public static long waitForState(final SolrCloudManager cloudManager,\n                                  final String collection,\n                                  long wait,\n                                  final TimeUnit unit,\n                                  final CollectionStatePredicate predicate) throws InterruptedException, TimeoutException, IOException {\n    TimeOut timeout = new TimeOut(wait, unit, cloudManager.getTimeSource());\n    long timeWarn = timeout.timeLeft(TimeUnit.MILLISECONDS) / 4;\n    ClusterState state = null;\n    DocCollection coll = null;\n    while (!timeout.hasTimedOut()) {\n      state = cloudManager.getClusterStateProvider().getClusterState();\n      coll = state.getCollectionOrNull(collection);\n      // due to the way we manage collections in SimClusterStateProvider a null here\n      // can mean that a collection is still being created but has no replicas\n      if (coll == null) { // does not yet exist?\n        timeout.sleep(100);\n        continue;\n      }\n      if (predicate.matches(state.getLiveNodes(), coll)) {\n        log.trace(\"-- predicate matched with state {}\", state);\n        return timeout.timeElapsed(TimeUnit.MILLISECONDS);\n      }\n      timeout.sleep(100);\n      if (timeout.timeLeft(TimeUnit.MILLISECONDS) < timeWarn) {\n        log.trace(\"-- still not matching predicate: {}\", state);\n      }\n    }\n    throw new TimeoutException(\"last ClusterState: \" + state + \", last coll state: \" + coll);\n  }\n\n","sourceOld":"  /**\n   * Wait for a particular collection state to appear.\n   *\n   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}\n   *\n   * @param cloudManager current instance of {@link SolrCloudManager}\n   * @param collection  the collection to watch\n   * @param wait timeout value\n   * @param unit timeout unit\n   * @param predicate   a predicate to match against the collection state\n   */\n  public static long waitForState(final SolrCloudManager cloudManager,\n                                  final String collection,\n                                  long wait,\n                                  final TimeUnit unit,\n                                  final CollectionStatePredicate predicate) throws InterruptedException, TimeoutException, IOException {\n    TimeOut timeout = new TimeOut(wait, unit, cloudManager.getTimeSource());\n    long timeWarn = timeout.timeLeft(TimeUnit.MILLISECONDS) / 4;\n    ClusterState state = null;\n    DocCollection coll = null;\n    while (!timeout.hasTimedOut()) {\n      state = cloudManager.getClusterStateProvider().getClusterState();\n      coll = state.getCollectionOrNull(collection);\n      // due to the way we manage collections in SimClusterStateProvider a null here\n      // can mean that a collection is still being created but has no replicas\n      if (coll == null) { // does not yet exist?\n        timeout.sleep(100);\n        continue;\n      }\n      if (predicate.matches(state.getLiveNodes(), coll)) {\n        log.trace(\"-- predicate matched with state {}\", state);\n        return timeout.timeElapsed(TimeUnit.MILLISECONDS);\n      }\n      timeout.sleep(100);\n      if (timeout.timeLeft(TimeUnit.MILLISECONDS) < timeWarn) {\n        log.trace(\"-- still not matching predicate: {}\", state);\n      }\n    }\n    throw new TimeoutException(\"last ClusterState: \" + state + \", last coll state: \" + coll);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["9c6c0dad4932399aec99b4818086cb1772773916"],"9c6c0dad4932399aec99b4818086cb1772773916":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"9c6c0dad4932399aec99b4818086cb1772773916":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9c6c0dad4932399aec99b4818086cb1772773916"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}