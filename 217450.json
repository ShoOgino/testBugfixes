{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#prepareCloudPlugins(PluginInfo[],String,String,Map[String,String],Map[String,Object],PluginInfo).mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#prepareCloudPlugins(PluginInfo[],String,String,Map[String,String],Map[String,Object],PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  private List<PluginInfo> prepareCloudPlugins(PluginInfo[] pluginInfos, String group, String className,\n                                                      Map<String, String> defaultAttributes,\n                                                      Map<String, Object> defaultInitArgs,\n                                                      PluginInfo defaultPlugin) {\n    List<PluginInfo> result = new ArrayList<>();\n    if (pluginInfos == null) {\n      pluginInfos = new PluginInfo[0];\n    }\n    for (PluginInfo info : pluginInfos) {\n      String groupAttr = info.attributes.get(\"group\");\n      if (!group.equals(groupAttr)) {\n        continue;\n      }\n      info = preparePlugin(info, className, defaultAttributes, defaultInitArgs);\n      if (info != null) {\n        result.add(info);\n      }\n    }\n    if (result.isEmpty() && defaultPlugin != null) {\n      defaultPlugin = preparePlugin(defaultPlugin, className, defaultAttributes, defaultInitArgs);\n      if (defaultPlugin != null) {\n        result.add(defaultPlugin);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4faf5124b4b354fe3f62334db03e25aef2098617","date":1501582472,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#prepareCloudPlugins(PluginInfo[],String,String,Map[String,String],Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#prepareCloudPlugins(PluginInfo[],String,String,Map[String,String],Map[String,Object],PluginInfo).mjava","sourceNew":"  private List<PluginInfo> prepareCloudPlugins(PluginInfo[] pluginInfos, String group, String className,\n                                                      Map<String, String> defaultAttributes,\n                                                      Map<String, Object> defaultInitArgs) {\n    List<PluginInfo> result = new ArrayList<>();\n    if (pluginInfos == null) {\n      pluginInfos = new PluginInfo[0];\n    }\n    for (PluginInfo info : pluginInfos) {\n      String groupAttr = info.attributes.get(\"group\");\n      if (!group.equals(groupAttr)) {\n        continue;\n      }\n      info = preparePlugin(info, className, defaultAttributes, defaultInitArgs);\n      if (info != null) {\n        result.add(info);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private List<PluginInfo> prepareCloudPlugins(PluginInfo[] pluginInfos, String group, String className,\n                                                      Map<String, String> defaultAttributes,\n                                                      Map<String, Object> defaultInitArgs,\n                                                      PluginInfo defaultPlugin) {\n    List<PluginInfo> result = new ArrayList<>();\n    if (pluginInfos == null) {\n      pluginInfos = new PluginInfo[0];\n    }\n    for (PluginInfo info : pluginInfos) {\n      String groupAttr = info.attributes.get(\"group\");\n      if (!group.equals(groupAttr)) {\n        continue;\n      }\n      info = preparePlugin(info, className, defaultAttributes, defaultInitArgs);\n      if (info != null) {\n        result.add(info);\n      }\n    }\n    if (result.isEmpty() && defaultPlugin != null) {\n      defaultPlugin = preparePlugin(defaultPlugin, className, defaultAttributes, defaultInitArgs);\n      if (defaultPlugin != null) {\n        result.add(defaultPlugin);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#prepareCloudPlugins(PluginInfo[],String,String,Map[String,String],Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#prepareCloudPlugins(PluginInfo[],String,String,Map[String,String],Map[String,Object],PluginInfo).mjava","sourceNew":"  private List<PluginInfo> prepareCloudPlugins(PluginInfo[] pluginInfos, String group, String className,\n                                                      Map<String, String> defaultAttributes,\n                                                      Map<String, Object> defaultInitArgs) {\n    List<PluginInfo> result = new ArrayList<>();\n    if (pluginInfos == null) {\n      pluginInfos = new PluginInfo[0];\n    }\n    for (PluginInfo info : pluginInfos) {\n      String groupAttr = info.attributes.get(\"group\");\n      if (!group.equals(groupAttr)) {\n        continue;\n      }\n      info = preparePlugin(info, className, defaultAttributes, defaultInitArgs);\n      if (info != null) {\n        result.add(info);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private List<PluginInfo> prepareCloudPlugins(PluginInfo[] pluginInfos, String group, String className,\n                                                      Map<String, String> defaultAttributes,\n                                                      Map<String, Object> defaultInitArgs,\n                                                      PluginInfo defaultPlugin) {\n    List<PluginInfo> result = new ArrayList<>();\n    if (pluginInfos == null) {\n      pluginInfos = new PluginInfo[0];\n    }\n    for (PluginInfo info : pluginInfos) {\n      String groupAttr = info.attributes.get(\"group\");\n      if (!group.equals(groupAttr)) {\n        continue;\n      }\n      info = preparePlugin(info, className, defaultAttributes, defaultInitArgs);\n      if (info != null) {\n        result.add(info);\n      }\n    }\n    if (result.isEmpty() && defaultPlugin != null) {\n      defaultPlugin = preparePlugin(defaultPlugin, className, defaultAttributes, defaultInitArgs);\n      if (defaultPlugin != null) {\n        result.add(defaultPlugin);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["073f1aa70444ec64f3e216816af2a3b43fa38fe7","4faf5124b4b354fe3f62334db03e25aef2098617"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4faf5124b4b354fe3f62334db03e25aef2098617":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4faf5124b4b354fe3f62334db03e25aef2098617"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","4faf5124b4b354fe3f62334db03e25aef2098617"],"4faf5124b4b354fe3f62334db03e25aef2098617":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}