{"path":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#clearMaps(ConfigSolr).mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#clearMaps(ConfigSolr).mjava","pathOld":"/dev/null","sourceNew":"  // We are shutting down. We don't want to risk deadlock, so do this manipulation the expensive way. Note, I've\n  // already deadlocked with closing/opening cores while keeping locks here....\n  protected void clearMaps(ConfigSolr cfg) {\n    List<String> coreNames;\n    List<String> transientNames;\n    List<SolrCore> pendingClosers;\n    synchronized (locker) {\n      coreNames = new ArrayList(cores.keySet());\n      transientNames = new ArrayList(transientCores.keySet());\n      pendingClosers = new ArrayList(pendingDynamicCloses);\n    }\n    for (String coreName : coreNames) {\n      SolrCore core = cores.get(coreName);\n      if (core != null) {\n        try {\n          addPersistOneCore(cfg, core, container.loader);\n\n          core.close();\n        } catch (Throwable t) {\n          SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n        }\n      }\n    }\n    cores.clear();\n\n    for (String coreName : transientNames) {\n      SolrCore core = transientCores.get(coreName);\n      if (core != null) {\n        try {\n          core.close();\n        } catch (Throwable t) {\n          SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n        }\n      }\n    }\n    transientCores.clear();\n\n    // We might have some cores that we were _thinking_ about shutting down, so take care of those too.\n    for (SolrCore core : pendingClosers) {\n      core.close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b16415d71f34d00bd12f3db116f7cac330f123e0","338ae28910f94d90dc1177c1f745412354fa2f96"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245","date":1363106546,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#clearMaps(ConfigSolr).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#clearMaps(ConfigSolr).mjava","sourceNew":"  // We are shutting down. We don't want to risk deadlock, so do this manipulation the expensive way. Note, I've\n  // already deadlocked with closing/opening cores while keeping locks here....\n  protected void clearMaps(ConfigSolr cfg) {\n    List<String> coreNames;\n    List<String> transientNames;\n    List<SolrCore> pendingToClose;\n    synchronized (locker) {\n      coreNames = new ArrayList(cores.keySet());\n      transientNames = new ArrayList(transientCores.keySet());\n      pendingToClose = new ArrayList(pendingCloses);\n    }\n    for (String coreName : coreNames) {\n      SolrCore core = cores.get(coreName);\n      if (core != null) {\n        try {\n          addPersistOneCore(cfg, core, container.loader);\n\n          core.close();\n        } catch (Throwable t) {\n          SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n        }\n      }\n    }\n    cores.clear();\n\n    for (String coreName : transientNames) {\n      SolrCore core = transientCores.get(coreName);\n      if (core != null) {\n        try {\n          core.close();\n        } catch (Throwable t) {\n          SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n        }\n      }\n    }\n    transientCores.clear();\n\n    // We might have some cores that we were _thinking_ about shutting down, so take care of those too.\n    for (SolrCore core : pendingToClose) {\n      try {\n        core.close();\n      } catch (Throwable t) {\n        SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n      }\n    }\n\n  }\n\n","sourceOld":"  // We are shutting down. We don't want to risk deadlock, so do this manipulation the expensive way. Note, I've\n  // already deadlocked with closing/opening cores while keeping locks here....\n  protected void clearMaps(ConfigSolr cfg) {\n    List<String> coreNames;\n    List<String> transientNames;\n    List<SolrCore> pendingClosers;\n    synchronized (locker) {\n      coreNames = new ArrayList(cores.keySet());\n      transientNames = new ArrayList(transientCores.keySet());\n      pendingClosers = new ArrayList(pendingDynamicCloses);\n    }\n    for (String coreName : coreNames) {\n      SolrCore core = cores.get(coreName);\n      if (core != null) {\n        try {\n          addPersistOneCore(cfg, core, container.loader);\n\n          core.close();\n        } catch (Throwable t) {\n          SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n        }\n      }\n    }\n    cores.clear();\n\n    for (String coreName : transientNames) {\n      SolrCore core = transientCores.get(coreName);\n      if (core != null) {\n        try {\n          core.close();\n        } catch (Throwable t) {\n          SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n        }\n      }\n    }\n    transientCores.clear();\n\n    // We might have some cores that we were _thinking_ about shutting down, so take care of those too.\n    for (SolrCore core : pendingClosers) {\n      core.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["b16415d71f34d00bd12f3db116f7cac330f123e0","338ae28910f94d90dc1177c1f745412354fa2f96"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bdcaae89af8d976c4fd37deb584705a6f94b32d1","date":1364568907,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#clearMaps(ConfigSolr).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#clearMaps(ConfigSolr).mjava","sourceNew":"  // We are shutting down. We don't want to risk deadlock, so do this manipulation the expensive way. Note, I've\n  // already deadlocked with closing/opening cores while keeping locks here....\n  protected void clearMaps(ConfigSolr cfg) {\n    List<String> coreNames;\n    List<String> transientNames;\n    List<SolrCore> pendingToClose;\n    synchronized (locker) {\n      coreNames = new ArrayList(cores.keySet());\n      transientNames = new ArrayList(transientCores.keySet());\n      pendingToClose = new ArrayList(pendingCloses);\n    }\n    for (String coreName : coreNames) {\n      SolrCore core = cores.get(coreName);\n      if (core != null) {\n        try {\n          addPersistOneCore(cfg, core, container.loader);\n\n          core.close();\n        } catch (Throwable t) {\n          SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n        } finally {\n          synchronized (locker) {\n            cores.remove(coreName);\n          }\n        }\n      }\n    }\n\n    for (String coreName : transientNames) {\n      SolrCore core = transientCores.get(coreName);\n      if (core != null) {\n        try {\n          core.close();\n        } catch (Throwable t) {\n          SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n        } finally {\n          synchronized (locker) {\n            transientCores.remove(coreName);\n          }\n        }\n      }\n    }\n\n    // We might have some cores that we were _thinking_ about shutting down, so take care of those too.\n    for (SolrCore core : pendingToClose) {\n      try {\n        core.close();\n      } catch (Throwable t) {\n        SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n      } finally {\n        synchronized (locker) {\n          pendingCloses.remove(core);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // We are shutting down. We don't want to risk deadlock, so do this manipulation the expensive way. Note, I've\n  // already deadlocked with closing/opening cores while keeping locks here....\n  protected void clearMaps(ConfigSolr cfg) {\n    List<String> coreNames;\n    List<String> transientNames;\n    List<SolrCore> pendingToClose;\n    synchronized (locker) {\n      coreNames = new ArrayList(cores.keySet());\n      transientNames = new ArrayList(transientCores.keySet());\n      pendingToClose = new ArrayList(pendingCloses);\n    }\n    for (String coreName : coreNames) {\n      SolrCore core = cores.get(coreName);\n      if (core != null) {\n        try {\n          addPersistOneCore(cfg, core, container.loader);\n\n          core.close();\n        } catch (Throwable t) {\n          SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n        }\n      }\n    }\n    cores.clear();\n\n    for (String coreName : transientNames) {\n      SolrCore core = transientCores.get(coreName);\n      if (core != null) {\n        try {\n          core.close();\n        } catch (Throwable t) {\n          SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n        }\n      }\n    }\n    transientCores.clear();\n\n    // We might have some cores that we were _thinking_ about shutting down, so take care of those too.\n    for (SolrCore core : pendingToClose) {\n      try {\n        core.close();\n      } catch (Throwable t) {\n        SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["b16415d71f34d00bd12f3db116f7cac330f123e0","338ae28910f94d90dc1177c1f745412354fa2f96"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"338ae28910f94d90dc1177c1f745412354fa2f96","date":1364772668,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#clearMaps(ConfigSolr).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#clearMaps(ConfigSolr).mjava","sourceNew":"  // We are shutting down. You can't hold the lock on the various lists of cores while they shut down, so we need to\n  // make a temporary copy of the names and shut them down outside the lock.\n  protected void clearMaps(ConfigSolr cfg) {\n    List<String> coreNames;\n    List<String> transientNames;\n    List<SolrCore> pendingToClose;\n\n    // It might be possible for one of the cores to move from one list to another while we're closing them. So\n    // loop through the lists until they're all empty. In particular, the core could have moved from the transient\n    // list to the pendingCloses list.\n\n    while (true) {\n      synchronized (locker) {\n        coreNames = new ArrayList(cores.keySet());\n        transientNames = new ArrayList(transientCores.keySet());\n        pendingToClose = new ArrayList(pendingCloses);\n      }\n\n      if (coreNames.size() == 0 && transientNames.size() == 0 && pendingToClose.size() == 0) break;\n\n      for (String coreName : coreNames) {\n        SolrCore core = cores.get(coreName);\n        if (core == null) {\n          CoreContainer.log.info(\"Core \" + coreName + \" moved from core container list before closing.\");\n        } else {\n          try {\n            addPersistOneCore(cfg, core, container.loader);\n\n            core.close();\n          } catch (Throwable t) {\n            SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n          } finally {\n            synchronized (locker) {\n              cores.remove(coreName);\n            }\n          }\n        }\n      }\n\n      for (String coreName : transientNames) {\n        SolrCore core = transientCores.get(coreName);\n        if (core == null) {\n          CoreContainer.log.info(\"Core \" + coreName + \" moved from transient core container list before closing.\");\n        } else {\n          try {\n            core.close();\n          } catch (Throwable t) {\n            SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n          } finally {\n            synchronized (locker) {\n              transientCores.remove(coreName);\n            }\n          }\n        }\n      }\n\n      // We might have some cores that we were _thinking_ about shutting down, so take care of those too.\n      for (SolrCore core : pendingToClose) {\n        try {\n          core.close();\n        } catch (Throwable t) {\n          SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n        } finally {\n          synchronized (locker) {\n            pendingCloses.remove(core);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // We are shutting down. We don't want to risk deadlock, so do this manipulation the expensive way. Note, I've\n  // already deadlocked with closing/opening cores while keeping locks here....\n  protected void clearMaps(ConfigSolr cfg) {\n    List<String> coreNames;\n    List<String> transientNames;\n    List<SolrCore> pendingToClose;\n    synchronized (locker) {\n      coreNames = new ArrayList(cores.keySet());\n      transientNames = new ArrayList(transientCores.keySet());\n      pendingToClose = new ArrayList(pendingCloses);\n    }\n    for (String coreName : coreNames) {\n      SolrCore core = cores.get(coreName);\n      if (core != null) {\n        try {\n          addPersistOneCore(cfg, core, container.loader);\n\n          core.close();\n        } catch (Throwable t) {\n          SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n        } finally {\n          synchronized (locker) {\n            cores.remove(coreName);\n          }\n        }\n      }\n    }\n\n    for (String coreName : transientNames) {\n      SolrCore core = transientCores.get(coreName);\n      if (core != null) {\n        try {\n          core.close();\n        } catch (Throwable t) {\n          SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n        } finally {\n          synchronized (locker) {\n            transientCores.remove(coreName);\n          }\n        }\n      }\n    }\n\n    // We might have some cores that we were _thinking_ about shutting down, so take care of those too.\n    for (SolrCore core : pendingToClose) {\n      try {\n        core.close();\n      } catch (Throwable t) {\n        SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n      } finally {\n        synchronized (locker) {\n          pendingCloses.remove(core);\n        }\n      }\n    }\n  }\n\n","bugFix":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245","bdcaae89af8d976c4fd37deb584705a6f94b32d1","a837c064b67fa63a9394136e31218b908cdcf783"],"bugIntro":["b16415d71f34d00bd12f3db116f7cac330f123e0","a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#clearMaps(ConfigSolr).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#clearMaps(ConfigSolr).mjava","sourceNew":"  // We are shutting down. You can't hold the lock on the various lists of cores while they shut down, so we need to\n  // make a temporary copy of the names and shut them down outside the lock.\n  protected void clearMaps(ConfigSolr cfg) {\n    List<String> coreNames;\n    List<String> transientNames;\n    List<SolrCore> pendingToClose;\n\n    // It might be possible for one of the cores to move from one list to another while we're closing them. So\n    // loop through the lists until they're all empty. In particular, the core could have moved from the transient\n    // list to the pendingCloses list.\n\n    while (true) {\n      synchronized (locker) {\n        coreNames = new ArrayList(cores.keySet());\n        transientNames = new ArrayList(transientCores.keySet());\n        pendingToClose = new ArrayList(pendingCloses);\n      }\n\n      if (coreNames.size() == 0 && transientNames.size() == 0 && pendingToClose.size() == 0) break;\n\n      for (String coreName : coreNames) {\n        SolrCore core = cores.get(coreName);\n        if (core == null) {\n          CoreContainer.log.info(\"Core \" + coreName + \" moved from core container list before closing.\");\n        } else {\n          try {\n            addPersistOneCore(cfg, container.loader, core.getCoreDescriptor(), getCoreToOrigName(core));\n\n            core.close();\n          } catch (Throwable t) {\n            SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n          } finally {\n            synchronized (locker) {\n              cores.remove(coreName);\n            }\n          }\n        }\n      }\n\n      for (String coreName : transientNames) {\n        SolrCore core = transientCores.get(coreName);\n        if (core == null) {\n          CoreContainer.log.info(\"Core \" + coreName + \" moved from transient core container list before closing.\");\n        } else {\n          try {\n            core.close();\n          } catch (Throwable t) {\n            SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n          } finally {\n            synchronized (locker) {\n              transientCores.remove(coreName);\n            }\n          }\n        }\n      }\n\n      // We might have some cores that we were _thinking_ about shutting down, so take care of those too.\n      for (SolrCore core : pendingToClose) {\n        try {\n          core.close();\n        } catch (Throwable t) {\n          SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n        } finally {\n          synchronized (locker) {\n            pendingCloses.remove(core);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // We are shutting down. You can't hold the lock on the various lists of cores while they shut down, so we need to\n  // make a temporary copy of the names and shut them down outside the lock.\n  protected void clearMaps(ConfigSolr cfg) {\n    List<String> coreNames;\n    List<String> transientNames;\n    List<SolrCore> pendingToClose;\n\n    // It might be possible for one of the cores to move from one list to another while we're closing them. So\n    // loop through the lists until they're all empty. In particular, the core could have moved from the transient\n    // list to the pendingCloses list.\n\n    while (true) {\n      synchronized (locker) {\n        coreNames = new ArrayList(cores.keySet());\n        transientNames = new ArrayList(transientCores.keySet());\n        pendingToClose = new ArrayList(pendingCloses);\n      }\n\n      if (coreNames.size() == 0 && transientNames.size() == 0 && pendingToClose.size() == 0) break;\n\n      for (String coreName : coreNames) {\n        SolrCore core = cores.get(coreName);\n        if (core == null) {\n          CoreContainer.log.info(\"Core \" + coreName + \" moved from core container list before closing.\");\n        } else {\n          try {\n            addPersistOneCore(cfg, core, container.loader);\n\n            core.close();\n          } catch (Throwable t) {\n            SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n          } finally {\n            synchronized (locker) {\n              cores.remove(coreName);\n            }\n          }\n        }\n      }\n\n      for (String coreName : transientNames) {\n        SolrCore core = transientCores.get(coreName);\n        if (core == null) {\n          CoreContainer.log.info(\"Core \" + coreName + \" moved from transient core container list before closing.\");\n        } else {\n          try {\n            core.close();\n          } catch (Throwable t) {\n            SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n          } finally {\n            synchronized (locker) {\n              transientCores.remove(coreName);\n            }\n          }\n        }\n      }\n\n      // We might have some cores that we were _thinking_ about shutting down, so take care of those too.\n      for (SolrCore core : pendingToClose) {\n        try {\n          core.close();\n        } catch (Throwable t) {\n          SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n        } finally {\n          synchronized (locker) {\n            pendingCloses.remove(core);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["338ae28910f94d90dc1177c1f745412354fa2f96"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps#clearMaps(ConfigSolr).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#clearMaps(ConfigSolr).mjava","sourceNew":"  // We are shutting down. You can't hold the lock on the various lists of cores while they shut down, so we need to\n  // make a temporary copy of the names and shut them down outside the lock.\n  protected void clearMaps(ConfigSolr cfg) {\n    List<String> coreNames;\n    List<String> transientNames;\n    List<SolrCore> pendingToClose;\n\n    // It might be possible for one of the cores to move from one list to another while we're closing them. So\n    // loop through the lists until they're all empty. In particular, the core could have moved from the transient\n    // list to the pendingCloses list.\n\n    while (true) {\n      synchronized (locker) {\n        coreNames = new ArrayList<String>(cores.keySet());\n        transientNames = new ArrayList<String>(transientCores.keySet());\n        pendingToClose = new ArrayList<SolrCore>(pendingCloses);\n      }\n\n      if (coreNames.size() == 0 && transientNames.size() == 0 && pendingToClose.size() == 0) break;\n\n      for (String coreName : coreNames) {\n        SolrCore core = cores.get(coreName);\n        if (core == null) {\n          CoreContainer.log.info(\"Core \" + coreName + \" moved from core container list before closing.\");\n        } else {\n          try {\n            // nocommit: wtf is this?\n           // addPersistOneCore(cfg, container.loader, core.getCoreDescriptor(), getCoreToOrigName(core));\n\n            core.close();\n          } catch (Throwable t) {\n            SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n          } finally {\n            synchronized (locker) {\n              cores.remove(coreName);\n            }\n          }\n        }\n      }\n\n      for (String coreName : transientNames) {\n        SolrCore core = transientCores.get(coreName);\n        if (core == null) {\n          CoreContainer.log.info(\"Core \" + coreName + \" moved from transient core container list before closing.\");\n        } else {\n          try {\n            core.close();\n          } catch (Throwable t) {\n            SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n          } finally {\n            synchronized (locker) {\n              transientCores.remove(coreName);\n            }\n          }\n        }\n      }\n\n      // We might have some cores that we were _thinking_ about shutting down, so take care of those too.\n      for (SolrCore core : pendingToClose) {\n        try {\n          core.close();\n        } catch (Throwable t) {\n          SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n        } finally {\n          synchronized (locker) {\n            pendingCloses.remove(core);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // We are shutting down. You can't hold the lock on the various lists of cores while they shut down, so we need to\n  // make a temporary copy of the names and shut them down outside the lock.\n  protected void clearMaps(ConfigSolr cfg) {\n    List<String> coreNames;\n    List<String> transientNames;\n    List<SolrCore> pendingToClose;\n\n    // It might be possible for one of the cores to move from one list to another while we're closing them. So\n    // loop through the lists until they're all empty. In particular, the core could have moved from the transient\n    // list to the pendingCloses list.\n\n    while (true) {\n      synchronized (locker) {\n        coreNames = new ArrayList(cores.keySet());\n        transientNames = new ArrayList(transientCores.keySet());\n        pendingToClose = new ArrayList(pendingCloses);\n      }\n\n      if (coreNames.size() == 0 && transientNames.size() == 0 && pendingToClose.size() == 0) break;\n\n      for (String coreName : coreNames) {\n        SolrCore core = cores.get(coreName);\n        if (core == null) {\n          CoreContainer.log.info(\"Core \" + coreName + \" moved from core container list before closing.\");\n        } else {\n          try {\n            addPersistOneCore(cfg, container.loader, core.getCoreDescriptor(), getCoreToOrigName(core));\n\n            core.close();\n          } catch (Throwable t) {\n            SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n          } finally {\n            synchronized (locker) {\n              cores.remove(coreName);\n            }\n          }\n        }\n      }\n\n      for (String coreName : transientNames) {\n        SolrCore core = transientCores.get(coreName);\n        if (core == null) {\n          CoreContainer.log.info(\"Core \" + coreName + \" moved from transient core container list before closing.\");\n        } else {\n          try {\n            core.close();\n          } catch (Throwable t) {\n            SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n          } finally {\n            synchronized (locker) {\n              transientCores.remove(coreName);\n            }\n          }\n        }\n      }\n\n      // We might have some cores that we were _thinking_ about shutting down, so take care of those too.\n      for (SolrCore core : pendingToClose) {\n        try {\n          core.close();\n        } catch (Throwable t) {\n          SolrException.log(CoreContainer.log, \"Error shutting down core\", t);\n        } finally {\n          synchronized (locker) {\n            pendingCloses.remove(core);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["b16415d71f34d00bd12f3db116f7cac330f123e0"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245":["a837c064b67fa63a9394136e31218b908cdcf783"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["338ae28910f94d90dc1177c1f745412354fa2f96"],"bdcaae89af8d976c4fd37deb584705a6f94b32d1":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245"],"338ae28910f94d90dc1177c1f745412354fa2f96":["bdcaae89af8d976c4fd37deb584705a6f94b32d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"]},"commit2Childs":{"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245":["bdcaae89af8d976c4fd37deb584705a6f94b32d1"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"bdcaae89af8d976c4fd37deb584705a6f94b32d1":["338ae28910f94d90dc1177c1f745412354fa2f96"],"338ae28910f94d90dc1177c1f745412354fa2f96":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a837c064b67fa63a9394136e31218b908cdcf783":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}