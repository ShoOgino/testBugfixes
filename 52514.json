{"path":"lucene/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery#rewrite(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery#rewrite(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n\n        @Override\n        public Similarity getSimilarity(Searcher searcher) {\n          return new DefaultSimilarity() {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n\n        @Override\n        public Similarity getSimilarity(Searcher searcher) {\n          return new DefaultSimilarity() {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery#rewrite(IndexReader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n\n        @Override\n        public Similarity getSimilarity(IndexSearcher searcher) {\n          return new DefaultSimilarity() {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n\n        @Override\n        public Similarity getSimilarity(Searcher searcher) {\n          return new DefaultSimilarity() {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery#rewrite(IndexReader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n\n        @Override\n        public Similarity getSimilarity(IndexSearcher searcher) {\n          return new DefaultSimilarity() {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n\n        @Override\n        public Similarity getSimilarity(Searcher searcher) {\n          return new DefaultSimilarity() {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery#rewrite(IndexReader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n\n        @Override\n        public Similarity getSimilarity(IndexSearcher searcher) {\n          return new DefaultSimilarity() {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n\n        @Override\n        public Similarity getSimilarity(Searcher searcher) {\n          return new DefaultSimilarity() {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","date":1295478199,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery#rewrite(IndexReader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher) throws IOException {\n          return new BooleanWeight(searcher, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n\n        @Override\n        public Similarity getSimilarity(IndexSearcher searcher) {\n          return new DefaultSimilarity() {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery#rewrite(IndexReader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher) throws IOException {\n          return new BooleanWeight(searcher, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n\n        @Override\n        public Similarity getSimilarity(IndexSearcher searcher) {\n          return new DefaultSimilarity() {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery#rewrite(IndexReader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher) throws IOException {\n          return new BooleanWeight(searcher, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n\n        @Override\n        public Similarity getSimilarity(IndexSearcher searcher) {\n          return new DefaultSimilarity() {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/BoostingQuery#rewrite(IndexReader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BoostingQuery#rewrite(IndexReader).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher) throws IOException {\n          return new BooleanWeight(searcher, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader) throws IOException {\n      BooleanQuery result = new BooleanQuery() {\n        @Override\n        public Weight createWeight(IndexSearcher searcher) throws IOException {\n          return new BooleanWeight(searcher, false) {\n\n            @Override\n            public float coord(int overlap, int max) {\n              switch (overlap) {\n\n              case 1:                               // matched only one clause\n                return 1.0f;                        // use the score as-is\n\n              case 2:                               // matched both clauses\n                return boost;                       // multiply by boost\n\n              default:\n                return 0.0f;\n                \n              }\n            }\n          };\n        }\n      };\n\n      result.add(match, BooleanClause.Occur.MUST);\n      result.add(context, BooleanClause.Occur.SHOULD);\n\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f9f2355d68aab1348539f7a1603279405e566a4"],"1f9f2355d68aab1348539f7a1603279405e566a4":["03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","1f9f2355d68aab1348539f7a1603279405e566a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1f9f2355d68aab1348539f7a1603279405e566a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}