{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.StandardTermState#copyFrom(TermState).mjava","commits":[{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.StandardTermState#copyFrom(TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.DocTermState#copyFrom(TermState).mjava","sourceNew":"    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n    }\n\n","sourceOld":"    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      DocTermState other = (DocTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.StandardTermState#copyFrom(TermState).mjava","pathOld":"/dev/null","sourceNew":"    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.StandardTermState#copyFrom(TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.StandardTermState#copyFrom(TermState).mjava","sourceNew":"    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n\n      // Do not copy bytes, bytesReader (else TermState is\n      // very heavy, ie drags around the entire block's\n      // byte[]).  On seek back, if next() is in fact used\n      // (rare!), they will be re-read from disk.\n    }\n\n","sourceOld":"    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.StandardTermState#copyFrom(TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.StandardTermState#copyFrom(TermState).mjava","sourceNew":"    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n\n      // Do not copy bytes, bytesReader (else TermState is\n      // very heavy, ie drags around the entire block's\n      // byte[]).  On seek back, if next() is in fact used\n      // (rare!), they will be re-read from disk.\n    }\n\n","sourceOld":"    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.StandardTermState#copyFrom(TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.StandardTermState#copyFrom(TermState).mjava","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n\n      // Do not copy bytes, bytesReader (else TermState is\n      // very heavy, ie drags around the entire block's\n      // byte[]).  On seek back, if next() is in fact used\n      // (rare!), they will be re-read from disk.\n    }\n\n","sourceOld":"    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n\n      // Do not copy bytes, bytesReader (else TermState is\n      // very heavy, ie drags around the entire block's\n      // byte[]).  On seek back, if next() is in fact used\n      // (rare!), they will be re-read from disk.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.StandardTermState#copyFrom(TermState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n\n      // Do not copy bytes, bytesReader (else TermState is\n      // very heavy, ie drags around the entire block's\n      // byte[]).  On seek back, if next() is in fact used\n      // (rare!), they will be re-read from disk.\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.StandardTermState#copyFrom(TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.StandardTermState#copyFrom(TermState).mjava","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n\n      // Do not copy bytes, bytesReader (else TermState is\n      // very heavy, ie drags around the entire block's\n      // byte[]).  On seek back, if next() is in fact used\n      // (rare!), they will be re-read from disk.\n    }\n\n","sourceOld":"    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n\n      // Do not copy bytes, bytesReader (else TermState is\n      // very heavy, ie drags around the entire block's\n      // byte[]).  On seek back, if next() is in fact used\n      // (rare!), they will be re-read from disk.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.StandardTermState#copyFrom(TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.StandardTermState#copyFrom(TermState).mjava","sourceNew":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n\n      // Do not copy bytes, bytesReader (else TermState is\n      // very heavy, ie drags around the entire block's\n      // byte[]).  On seek back, if next() is in fact used\n      // (rare!), they will be re-read from disk.\n    }\n\n","sourceOld":"    @Override\n    public void copyFrom(TermState _other) {\n      super.copyFrom(_other);\n      StandardTermState other = (StandardTermState) _other;\n      freqOffset = other.freqOffset;\n      proxOffset = other.proxOffset;\n      skipOffset = other.skipOffset;\n\n      // Do not copy bytes, bytesReader (else TermState is\n      // very heavy, ie drags around the entire block's\n      // byte[]).  On seek back, if next() is in fact used\n      // (rare!), they will be re-read from disk.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","b1add9ddc0005b07550d4350720aac22dc9886b3"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["7b91922b55d15444d554721b352861d028eb8278","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","fa1a999d6674423e5c4ac858b410283f6fe03f20","868da859b43505d9d2a023bfeae6dd0c795f5295"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["b1add9ddc0005b07550d4350720aac22dc9886b3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}