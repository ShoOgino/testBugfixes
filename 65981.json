{"path":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#doCacheHeaderValidation(SolrQueryRequest,HttpServletRequest,Method,HttpServletResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#doCacheHeaderValidation(SolrQueryRequest,HttpServletRequest,Method,HttpServletResponse).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#doCacheHeaderValidation(SolrQueryRequest,HttpServletRequest,Method,HttpServletResponse).mjava","sourceNew":"  /**\n   * Sets HTTP Response cache validator headers appropriately and\n   * validates the HTTP Request against these using any conditional\n   * request headers.\n   *\n   * If the request contains conditional headers, and those headers\n   * indicate a match with the current known state of the system, this\n   * method will return \"true\" indicating that a 304 Status code can be\n   * returned, and no further processing is needed.\n   *\n   * \n   * @return true if the request contains conditional headers, and those\n   *         headers indicate a match with the current known state of the\n   *         system -- indicating that a 304 Status code can be returned to\n   *         the client, and no further request processing is needed.  \n   */\n  public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,\n                                                final HttpServletRequest req,\n                                                final Method reqMethod,\n                                                final HttpServletResponse resp)\n    throws IOException {\n    \n    if (Method.POST==reqMethod || Method.OTHER==reqMethod) {\n      return false;\n    }\n    \n    final long lastMod = HttpCacheHeaderUtil.calcLastModified(solrReq);\n    final String etag = HttpCacheHeaderUtil.calcEtag(solrReq);\n    \n    resp.setDateHeader(\"Last-Modified\", lastMod);\n    resp.setHeader(\"ETag\", etag);\n\n    if (checkETagValidators(req, resp, reqMethod, etag)) {\n      return true;\n    }\n\n    if (checkLastModValidators(req, resp, lastMod)) {\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Sets HTTP Response cache validator headers appropriately and\n   * validates the HTTP Request against these using any conditional\n   * request headers.\n   *\n   * If the request contains conditional headers, and those headers\n   * indicate a match with the current known state of the system, this\n   * method will return \"true\" indicating that a 304 Status code can be\n   * returned, and no further processing is needed.\n   *\n   * \n   * @return true if the request contains conditional headers, and those\n   *         headers indicate a match with the current known state of the\n   *         system -- indicating that a 304 Status code can be returned to\n   *         the client, and no further request processing is needed.  \n   */\n  public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,\n                                                final HttpServletRequest req,\n                                                final Method reqMethod,\n                                                final HttpServletResponse resp)\n    throws IOException {\n    \n    if (Method.POST==reqMethod || Method.OTHER==reqMethod) {\n      return false;\n    }\n    \n    final long lastMod = HttpCacheHeaderUtil.calcLastModified(solrReq);\n    final String etag = HttpCacheHeaderUtil.calcEtag(solrReq);\n    \n    resp.setDateHeader(\"Last-Modified\", lastMod);\n    resp.setHeader(\"ETag\", etag);\n\n    if (checkETagValidators(req, resp, reqMethod, etag)) {\n      return true;\n    }\n\n    if (checkLastModValidators(req, resp, lastMod)) {\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#doCacheHeaderValidation(SolrQueryRequest,HttpServletRequest,Method,HttpServletResponse).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#doCacheHeaderValidation(SolrQueryRequest,HttpServletRequest,Method,HttpServletResponse).mjava","sourceNew":"  /**\n   * Sets HTTP Response cache validator headers appropriately and\n   * validates the HTTP Request against these using any conditional\n   * request headers.\n   *\n   * If the request contains conditional headers, and those headers\n   * indicate a match with the current known state of the system, this\n   * method will return \"true\" indicating that a 304 Status code can be\n   * returned, and no further processing is needed.\n   *\n   * \n   * @return true if the request contains conditional headers, and those\n   *         headers indicate a match with the current known state of the\n   *         system -- indicating that a 304 Status code can be returned to\n   *         the client, and no further request processing is needed.  \n   */\n  public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,\n                                                final HttpServletRequest req,\n                                                final Method reqMethod,\n                                                final HttpServletResponse resp)\n    throws IOException {\n    \n    if (Method.POST==reqMethod || Method.OTHER==reqMethod) {\n      return false;\n    }\n    \n    final long lastMod = HttpCacheHeaderUtil.calcLastModified(solrReq);\n    final String etag = HttpCacheHeaderUtil.calcEtag(solrReq);\n    \n    resp.setDateHeader(\"Last-Modified\", lastMod);\n    resp.setHeader(\"ETag\", etag);\n\n    if (checkETagValidators(req, resp, reqMethod, etag)) {\n      return true;\n    }\n\n    if (checkLastModValidators(req, resp, lastMod)) {\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Sets HTTP Response cache validator headers appropriately and\n   * validates the HTTP Request against these using any conditional\n   * request headers.\n   *\n   * If the request contains conditional headers, and those headers\n   * indicate a match with the current known state of the system, this\n   * method will return \"true\" indicating that a 304 Status code can be\n   * returned, and no further processing is needed.\n   *\n   * \n   * @return true if the request contains conditional headers, and those\n   *         headers indicate a match with the current known state of the\n   *         system -- indicating that a 304 Status code can be returned to\n   *         the client, and no further request processing is needed.  \n   */\n  public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,\n                                                final HttpServletRequest req,\n                                                final Method reqMethod,\n                                                final HttpServletResponse resp)\n    throws IOException {\n    \n    if (Method.POST==reqMethod || Method.OTHER==reqMethod) {\n      return false;\n    }\n    \n    final long lastMod = HttpCacheHeaderUtil.calcLastModified(solrReq);\n    final String etag = HttpCacheHeaderUtil.calcEtag(solrReq);\n    \n    resp.setDateHeader(\"Last-Modified\", lastMod);\n    resp.setHeader(\"ETag\", etag);\n\n    if (checkETagValidators(req, resp, reqMethod, etag)) {\n      return true;\n    }\n\n    if (checkLastModValidators(req, resp, lastMod)) {\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#doCacheHeaderValidation(SolrQueryRequest,HttpServletRequest,Method,HttpServletResponse).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#doCacheHeaderValidation(SolrQueryRequest,HttpServletRequest,Method,HttpServletResponse).mjava","sourceNew":"  /**\n   * Sets HTTP Response cache validator headers appropriately and\n   * validates the HTTP Request against these using any conditional\n   * request headers.\n   *\n   * If the request contains conditional headers, and those headers\n   * indicate a match with the current known state of the system, this\n   * method will return \"true\" indicating that a 304 Status code can be\n   * returned, and no further processing is needed.\n   *\n   * \n   * @return true if the request contains conditional headers, and those\n   *         headers indicate a match with the current known state of the\n   *         system -- indicating that a 304 Status code can be returned to\n   *         the client, and no further request processing is needed.  \n   */\n  public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,\n                                                final HttpServletRequest req,\n                                                final Method reqMethod,\n                                                final HttpServletResponse resp)\n    throws IOException {\n    \n    if (Method.POST==reqMethod || Method.OTHER==reqMethod) {\n      return false;\n    }\n    \n    final long lastMod = HttpCacheHeaderUtil.calcLastModified(solrReq);\n    final String etag = HttpCacheHeaderUtil.calcEtag(solrReq);\n    \n    resp.setDateHeader(\"Last-Modified\", lastMod);\n    resp.setHeader(\"ETag\", etag);\n\n    if (checkETagValidators(req, resp, reqMethod, etag)) {\n      return true;\n    }\n\n    if (checkLastModValidators(req, resp, lastMod)) {\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Sets HTTP Response cache validator headers appropriately and\n   * validates the HTTP Request against these using any conditional\n   * request headers.\n   *\n   * If the request contains conditional headers, and those headers\n   * indicate a match with the current known state of the system, this\n   * method will return \"true\" indicating that a 304 Status code can be\n   * returned, and no further processing is needed.\n   *\n   * \n   * @return true if the request contains conditional headers, and those\n   *         headers indicate a match with the current known state of the\n   *         system -- indicating that a 304 Status code can be returned to\n   *         the client, and no further request processing is needed.  \n   */\n  public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,\n                                                final HttpServletRequest req,\n                                                final Method reqMethod,\n                                                final HttpServletResponse resp)\n    throws IOException {\n    \n    if (Method.POST==reqMethod || Method.OTHER==reqMethod) {\n      return false;\n    }\n    \n    final long lastMod = HttpCacheHeaderUtil.calcLastModified(solrReq);\n    final String etag = HttpCacheHeaderUtil.calcEtag(solrReq);\n    \n    resp.setDateHeader(\"Last-Modified\", lastMod);\n    resp.setHeader(\"ETag\", etag);\n\n    if (checkETagValidators(req, resp, reqMethod, etag)) {\n      return true;\n    }\n\n    if (checkLastModValidators(req, resp, lastMod)) {\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#doCacheHeaderValidation(SolrQueryRequest,HttpServletRequest,Method,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#doCacheHeaderValidation(SolrQueryRequest,HttpServletRequest,Method,HttpServletResponse).mjava","sourceNew":"  /**\n   * Sets HTTP Response cache validator headers appropriately and\n   * validates the HTTP Request against these using any conditional\n   * request headers.\n   *\n   * If the request contains conditional headers, and those headers\n   * indicate a match with the current known state of the system, this\n   * method will return \"true\" indicating that a 304 Status code can be\n   * returned, and no further processing is needed.\n   *\n   * \n   * @return true if the request contains conditional headers, and those\n   *         headers indicate a match with the current known state of the\n   *         system -- indicating that a 304 Status code can be returned to\n   *         the client, and no further request processing is needed.  \n   */\n  public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,\n                                                final HttpServletRequest req,\n                                                final Method reqMethod,\n                                                final HttpServletResponse resp) {\n    \n    if (Method.POST==reqMethod || Method.OTHER==reqMethod) {\n      return false;\n    }\n    \n    final long lastMod = HttpCacheHeaderUtil.calcLastModified(solrReq);\n    final String etag = HttpCacheHeaderUtil.calcEtag(solrReq);\n    \n    resp.setDateHeader(\"Last-Modified\", lastMod);\n    resp.setHeader(\"ETag\", etag);\n\n    if (checkETagValidators(req, resp, reqMethod, etag)) {\n      return true;\n    }\n\n    if (checkLastModValidators(req, resp, lastMod)) {\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Sets HTTP Response cache validator headers appropriately and\n   * validates the HTTP Request against these using any conditional\n   * request headers.\n   *\n   * If the request contains conditional headers, and those headers\n   * indicate a match with the current known state of the system, this\n   * method will return \"true\" indicating that a 304 Status code can be\n   * returned, and no further processing is needed.\n   *\n   * \n   * @return true if the request contains conditional headers, and those\n   *         headers indicate a match with the current known state of the\n   *         system -- indicating that a 304 Status code can be returned to\n   *         the client, and no further request processing is needed.  \n   */\n  public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,\n                                                final HttpServletRequest req,\n                                                final Method reqMethod,\n                                                final HttpServletResponse resp)\n    throws IOException {\n    \n    if (Method.POST==reqMethod || Method.OTHER==reqMethod) {\n      return false;\n    }\n    \n    final long lastMod = HttpCacheHeaderUtil.calcLastModified(solrReq);\n    final String etag = HttpCacheHeaderUtil.calcEtag(solrReq);\n    \n    resp.setDateHeader(\"Last-Modified\", lastMod);\n    resp.setHeader(\"ETag\", etag);\n\n    if (checkETagValidators(req, resp, reqMethod, etag)) {\n      return true;\n    }\n\n    if (checkLastModValidators(req, resp, lastMod)) {\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":["b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#doCacheHeaderValidation(SolrQueryRequest,HttpServletRequest,Method,HttpServletResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#doCacheHeaderValidation(SolrQueryRequest,HttpServletRequest,Method,HttpServletResponse).mjava","sourceNew":"  /**\n   * Sets HTTP Response cache validator headers appropriately and\n   * validates the HTTP Request against these using any conditional\n   * request headers.\n   *\n   * If the request contains conditional headers, and those headers\n   * indicate a match with the current known state of the system, this\n   * method will return \"true\" indicating that a 304 Status code can be\n   * returned, and no further processing is needed.\n   *\n   * \n   * @return true if the request contains conditional headers, and those\n   *         headers indicate a match with the current known state of the\n   *         system -- indicating that a 304 Status code can be returned to\n   *         the client, and no further request processing is needed.  \n   */\n  public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,\n                                                final HttpServletRequest req,\n                                                final Method reqMethod,\n                                                final HttpServletResponse resp) {\n    \n    if (Method.POST==reqMethod || Method.OTHER==reqMethod) {\n      return false;\n    }\n    \n    final long lastMod = HttpCacheHeaderUtil.calcLastModified(solrReq);\n    final String etag = HttpCacheHeaderUtil.calcEtag(solrReq);\n    \n    resp.setDateHeader(\"Last-Modified\", lastMod);\n    resp.setHeader(\"ETag\", etag);\n\n    if (checkETagValidators(req, resp, reqMethod, etag)) {\n      return true;\n    }\n\n    if (checkLastModValidators(req, resp, lastMod)) {\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Sets HTTP Response cache validator headers appropriately and\n   * validates the HTTP Request against these using any conditional\n   * request headers.\n   *\n   * If the request contains conditional headers, and those headers\n   * indicate a match with the current known state of the system, this\n   * method will return \"true\" indicating that a 304 Status code can be\n   * returned, and no further processing is needed.\n   *\n   * \n   * @return true if the request contains conditional headers, and those\n   *         headers indicate a match with the current known state of the\n   *         system -- indicating that a 304 Status code can be returned to\n   *         the client, and no further request processing is needed.  \n   */\n  public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,\n                                                final HttpServletRequest req,\n                                                final Method reqMethod,\n                                                final HttpServletResponse resp)\n    throws IOException {\n    \n    if (Method.POST==reqMethod || Method.OTHER==reqMethod) {\n      return false;\n    }\n    \n    final long lastMod = HttpCacheHeaderUtil.calcLastModified(solrReq);\n    final String etag = HttpCacheHeaderUtil.calcEtag(solrReq);\n    \n    resp.setDateHeader(\"Last-Modified\", lastMod);\n    resp.setHeader(\"ETag\", etag);\n\n    if (checkETagValidators(req, resp, reqMethod, etag)) {\n      return true;\n    }\n\n    if (checkLastModValidators(req, resp, lastMod)) {\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}