{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#TimeRoutedAlias(String,Map[String,String]).mjava","commits":[{"id":"46589ed5cc841861bf6b5e2afc55f718ebcd02a0","date":1516984620,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#TimeRoutedAlias(String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  public TimeRoutedAlias(String aliasName, Map<String, String> aliasMetadata) {\n    this.aliasName = aliasName;\n    final MapSolrParams params = new MapSolrParams(aliasMetadata); // for convenience\n    final RequiredSolrParams required = params.required();\n    if (!\"time\".equals(required.get(ROUTER_TYPE_NAME))) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only 'time' routed aliases is supported right now.\");\n    }\n    routeField = required.get(ROUTER_FIELD);\n    intervalDateMath = required.get(ROUTER_INTERVAL);\n\n    //optional:\n    maxFutureMs = params.getLong(ROUTER_MAX_FUTURE, TimeUnit.MINUTES.toMillis(10));\n    timeZone = TimeZoneUtils.parseTimezone(aliasMetadata.get(CommonParams.TZ));\n\n    // More validation:\n\n    // check that the interval is valid date math\n    try {\n      new DateMathParser(timeZone).parseMath(intervalDateMath);\n    } catch (ParseException e) {\n      throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_INTERVAL + \", \" + e, e);\n    }\n\n    if (maxFutureMs < 0) {\n      throw new SolrException(BAD_REQUEST, ROUTER_MAX_FUTURE + \" must be >= 0\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cbd743a4843f513f793670e3ab0e272bf824faf","date":1518149529,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#TimeRoutedAlias(String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#TimeRoutedAlias(String,Map[String,String]).mjava","sourceNew":"  public TimeRoutedAlias(String aliasName, Map<String, String> aliasMetadata) {\n    this.aliasName = aliasName;\n    final MapSolrParams params = new MapSolrParams(aliasMetadata); // for convenience\n    final RequiredSolrParams required = params.required();\n    if (!\"time\".equals(required.get(ROUTER_TYPE_NAME))) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only 'time' routed aliases is supported right now.\");\n    }\n    routeField = required.get(ROUTER_FIELD);\n    intervalMath = required.get(ROUTER_INTERVAL);\n\n    //optional:\n    maxFutureMs = params.getLong(ROUTER_MAX_FUTURE, TimeUnit.MINUTES.toMillis(10));\n    autoDeleteAgeMath = params.get(ROUTER_AUTO_DELETE_AGE); // no default\n    timeZone = TimeZoneUtils.parseTimezone(aliasMetadata.get(CommonParams.TZ));\n\n    // More validation:\n\n    // check that the date math is valid\n    final Date now = new Date();\n    try {\n      final Date after = new DateMathParser(now, timeZone).parseMath(intervalMath);\n      if (!after.after(now)) {\n        throw new SolrException(BAD_REQUEST, \"duration must add to produce a time in the future\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_INTERVAL + \", \" + e, e);\n    }\n\n    if (autoDeleteAgeMath != null) {\n      try {\n        final Date before =  new DateMathParser(now, timeZone).parseMath(autoDeleteAgeMath);\n        if (now.before(before)) {\n          throw new SolrException(BAD_REQUEST, \"duration must round or subtract to produce a time in the past\");\n        }\n      } catch (Exception e) {\n        throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_AUTO_DELETE_AGE + \", \" + e, e);\n      }\n    }\n\n    if (maxFutureMs < 0) {\n      throw new SolrException(BAD_REQUEST, ROUTER_MAX_FUTURE + \" must be >= 0\");\n    }\n  }\n\n","sourceOld":"  public TimeRoutedAlias(String aliasName, Map<String, String> aliasMetadata) {\n    this.aliasName = aliasName;\n    final MapSolrParams params = new MapSolrParams(aliasMetadata); // for convenience\n    final RequiredSolrParams required = params.required();\n    if (!\"time\".equals(required.get(ROUTER_TYPE_NAME))) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only 'time' routed aliases is supported right now.\");\n    }\n    routeField = required.get(ROUTER_FIELD);\n    intervalDateMath = required.get(ROUTER_INTERVAL);\n\n    //optional:\n    maxFutureMs = params.getLong(ROUTER_MAX_FUTURE, TimeUnit.MINUTES.toMillis(10));\n    timeZone = TimeZoneUtils.parseTimezone(aliasMetadata.get(CommonParams.TZ));\n\n    // More validation:\n\n    // check that the interval is valid date math\n    try {\n      new DateMathParser(timeZone).parseMath(intervalDateMath);\n    } catch (ParseException e) {\n      throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_INTERVAL + \", \" + e, e);\n    }\n\n    if (maxFutureMs < 0) {\n      throw new SolrException(BAD_REQUEST, ROUTER_MAX_FUTURE + \" must be >= 0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849083f8095b1ffaff05a66e0b1e024617b9968d","date":1536291524,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#TimeRoutedAlias(String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#TimeRoutedAlias(String,Map[String,String]).mjava","sourceNew":"  public TimeRoutedAlias(String aliasName, Map<String, String> aliasMetadata) {\n    this.aliasName = aliasName;\n    final MapSolrParams params = new MapSolrParams(aliasMetadata); // for convenience\n    final RequiredSolrParams required = params.required();\n    if (!\"time\".equals(required.get(ROUTER_TYPE_NAME))) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only 'time' routed aliases is supported right now.\");\n    }\n    routeField = required.get(ROUTER_FIELD);\n    intervalMath = required.get(ROUTER_INTERVAL);\n\n    //optional:\n    maxFutureMs = params.getLong(ROUTER_MAX_FUTURE, TimeUnit.MINUTES.toMillis(10));\n    // the date math configured is an interval to be subtracted from the most recent collection's time stamp\n    String pcmTmp = params.get(ROUTER_PREEMPTIVE_CREATE_MATH);\n    preemptiveCreateMath = pcmTmp != null ? (pcmTmp.startsWith(\"-\") ? pcmTmp : \"-\" + pcmTmp) : null;\n    autoDeleteAgeMath = params.get(ROUTER_AUTO_DELETE_AGE); // no default\n    timeZone = TimeZoneUtils.parseTimezone(aliasMetadata.get(CommonParams.TZ));\n\n    // More validation:\n\n    // check that the date math is valid\n    final Date now = new Date();\n    try {\n      final Date after = new DateMathParser(now, timeZone).parseMath(intervalMath);\n      if (!after.after(now)) {\n        throw new SolrException(BAD_REQUEST, \"duration must add to produce a time in the future\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_INTERVAL + \", \" + e, e);\n    }\n\n    if (autoDeleteAgeMath != null) {\n      try {\n        final Date before =  new DateMathParser(now, timeZone).parseMath(autoDeleteAgeMath);\n        if (now.before(before)) {\n          throw new SolrException(BAD_REQUEST, \"duration must round or subtract to produce a time in the past\");\n        }\n      } catch (Exception e) {\n        throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_AUTO_DELETE_AGE + \", \" + e, e);\n      }\n    }\n    if (preemptiveCreateMath != null) {\n      try {\n        new DateMathParser().parseMath(preemptiveCreateMath);\n      } catch (ParseException e) {\n        throw new SolrException(BAD_REQUEST, \"Invalid date math for preemptiveCreateMath:\" + preemptiveCreateMath);\n      }\n    }\n\n    if (maxFutureMs < 0) {\n      throw new SolrException(BAD_REQUEST, ROUTER_MAX_FUTURE + \" must be >= 0\");\n    }\n  }\n\n","sourceOld":"  public TimeRoutedAlias(String aliasName, Map<String, String> aliasMetadata) {\n    this.aliasName = aliasName;\n    final MapSolrParams params = new MapSolrParams(aliasMetadata); // for convenience\n    final RequiredSolrParams required = params.required();\n    if (!\"time\".equals(required.get(ROUTER_TYPE_NAME))) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only 'time' routed aliases is supported right now.\");\n    }\n    routeField = required.get(ROUTER_FIELD);\n    intervalMath = required.get(ROUTER_INTERVAL);\n\n    //optional:\n    maxFutureMs = params.getLong(ROUTER_MAX_FUTURE, TimeUnit.MINUTES.toMillis(10));\n    autoDeleteAgeMath = params.get(ROUTER_AUTO_DELETE_AGE); // no default\n    timeZone = TimeZoneUtils.parseTimezone(aliasMetadata.get(CommonParams.TZ));\n\n    // More validation:\n\n    // check that the date math is valid\n    final Date now = new Date();\n    try {\n      final Date after = new DateMathParser(now, timeZone).parseMath(intervalMath);\n      if (!after.after(now)) {\n        throw new SolrException(BAD_REQUEST, \"duration must add to produce a time in the future\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_INTERVAL + \", \" + e, e);\n    }\n\n    if (autoDeleteAgeMath != null) {\n      try {\n        final Date before =  new DateMathParser(now, timeZone).parseMath(autoDeleteAgeMath);\n        if (now.before(before)) {\n          throw new SolrException(BAD_REQUEST, \"duration must round or subtract to produce a time in the past\");\n        }\n      } catch (Exception e) {\n        throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_AUTO_DELETE_AGE + \", \" + e, e);\n      }\n    }\n\n    if (maxFutureMs < 0) {\n      throw new SolrException(BAD_REQUEST, ROUTER_MAX_FUTURE + \" must be >= 0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#TimeRoutedAlias(String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#TimeRoutedAlias(String,Map[String,String]).mjava","sourceNew":"  TimeRoutedAlias(String aliasName, Map<String, String> aliasMetadata) throws SolrException {\n    // Validate we got everything we need\n    if (!aliasMetadata.keySet().containsAll(TimeRoutedAlias.REQUIRED_ROUTER_PARAMS)) {\n      throw new SolrException(BAD_REQUEST, \"A time routed alias requires these params: \" + TimeRoutedAlias.REQUIRED_ROUTER_PARAMS\n          + \" plus some create-collection prefixed ones.\");\n    }\n\n    this.aliasMetadata = aliasMetadata;\n\n    this.start = this.aliasMetadata.get(ROUTER_START);\n    this.aliasName = aliasName;\n    final MapSolrParams params = new MapSolrParams(this.aliasMetadata); // for convenience\n    final RequiredSolrParams required = params.required();\n    if (!\"time\".equals(required.get(ROUTER_TYPE_NAME))) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only 'time' routed aliases is supported right now.\");\n    }\n    routeField = required.get(ROUTER_FIELD);\n    intervalMath = required.get(ROUTER_INTERVAL);\n\n    //optional:\n    maxFutureMs = params.getLong(ROUTER_MAX_FUTURE, TimeUnit.MINUTES.toMillis(10));\n    // the date math configured is an interval to be subtracted from the most recent collection's time stamp\n    String pcmTmp = params.get(ROUTER_PREEMPTIVE_CREATE_MATH);\n    preemptiveCreateMath = pcmTmp != null ? (pcmTmp.startsWith(\"-\") ? pcmTmp : \"-\" + pcmTmp) : null;\n    autoDeleteAgeMath = params.get(ROUTER_AUTO_DELETE_AGE); // no default\n    timeZone = TimeZoneUtils.parseTimezone(this.aliasMetadata.get(CommonParams.TZ));\n\n    // More validation:\n\n    // check that the date math is valid\n    final Date now = new Date();\n    try {\n      final Date after = new DateMathParser(now, timeZone).parseMath(intervalMath);\n      if (!after.after(now)) {\n        throw new SolrException(BAD_REQUEST, \"duration must add to produce a time in the future\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_INTERVAL + \", \" + e, e);\n    }\n\n    if (autoDeleteAgeMath != null) {\n      try {\n        final Date before =  new DateMathParser(now, timeZone).parseMath(autoDeleteAgeMath);\n        if (now.before(before)) {\n          throw new SolrException(BAD_REQUEST, \"duration must round or subtract to produce a time in the past\");\n        }\n      } catch (Exception e) {\n        throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_AUTO_DELETE_AGE + \", \" + e, e);\n      }\n    }\n    if (preemptiveCreateMath != null) {\n      try {\n        new DateMathParser().parseMath(preemptiveCreateMath);\n      } catch (ParseException e) {\n        throw new SolrException(BAD_REQUEST, \"Invalid date math for preemptiveCreateMath:\" + preemptiveCreateMath);\n      }\n    }\n\n    if (maxFutureMs < 0) {\n      throw new SolrException(BAD_REQUEST, ROUTER_MAX_FUTURE + \" must be >= 0\");\n    }\n  }\n\n","sourceOld":"  public TimeRoutedAlias(String aliasName, Map<String, String> aliasMetadata) {\n    this.aliasName = aliasName;\n    final MapSolrParams params = new MapSolrParams(aliasMetadata); // for convenience\n    final RequiredSolrParams required = params.required();\n    if (!\"time\".equals(required.get(ROUTER_TYPE_NAME))) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only 'time' routed aliases is supported right now.\");\n    }\n    routeField = required.get(ROUTER_FIELD);\n    intervalMath = required.get(ROUTER_INTERVAL);\n\n    //optional:\n    maxFutureMs = params.getLong(ROUTER_MAX_FUTURE, TimeUnit.MINUTES.toMillis(10));\n    // the date math configured is an interval to be subtracted from the most recent collection's time stamp\n    String pcmTmp = params.get(ROUTER_PREEMPTIVE_CREATE_MATH);\n    preemptiveCreateMath = pcmTmp != null ? (pcmTmp.startsWith(\"-\") ? pcmTmp : \"-\" + pcmTmp) : null;\n    autoDeleteAgeMath = params.get(ROUTER_AUTO_DELETE_AGE); // no default\n    timeZone = TimeZoneUtils.parseTimezone(aliasMetadata.get(CommonParams.TZ));\n\n    // More validation:\n\n    // check that the date math is valid\n    final Date now = new Date();\n    try {\n      final Date after = new DateMathParser(now, timeZone).parseMath(intervalMath);\n      if (!after.after(now)) {\n        throw new SolrException(BAD_REQUEST, \"duration must add to produce a time in the future\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_INTERVAL + \", \" + e, e);\n    }\n\n    if (autoDeleteAgeMath != null) {\n      try {\n        final Date before =  new DateMathParser(now, timeZone).parseMath(autoDeleteAgeMath);\n        if (now.before(before)) {\n          throw new SolrException(BAD_REQUEST, \"duration must round or subtract to produce a time in the past\");\n        }\n      } catch (Exception e) {\n        throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_AUTO_DELETE_AGE + \", \" + e, e);\n      }\n    }\n    if (preemptiveCreateMath != null) {\n      try {\n        new DateMathParser().parseMath(preemptiveCreateMath);\n      } catch (ParseException e) {\n        throw new SolrException(BAD_REQUEST, \"Invalid date math for preemptiveCreateMath:\" + preemptiveCreateMath);\n      }\n    }\n\n    if (maxFutureMs < 0) {\n      throw new SolrException(BAD_REQUEST, ROUTER_MAX_FUTURE + \" must be >= 0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105e345cf3c0abed3cb6c109274a379cb2655adc","date":1561038472,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#TimeRoutedAlias(String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#TimeRoutedAlias(String,Map[String,String]).mjava","sourceNew":"  TimeRoutedAlias(String aliasName, Map<String, String> aliasMetadata) throws SolrException {\n    // Validate we got everything we need\n    if (!aliasMetadata.keySet().containsAll(TimeRoutedAlias.REQUIRED_ROUTER_PARAMS)) {\n      throw new SolrException(BAD_REQUEST, \"A time routed alias requires these params: \" + TimeRoutedAlias.REQUIRED_ROUTER_PARAMS\n          + \" plus some create-collection prefixed ones.\");\n    }\n\n    this.aliasMetadata = aliasMetadata;\n\n    this.start = this.aliasMetadata.get(ROUTER_START);\n    this.aliasName = aliasName;\n    final MapSolrParams params = new MapSolrParams(this.aliasMetadata); // for convenience\n    final RequiredSolrParams required = params.required();\n    if (!\"time\".equals(required.get(ROUTER_TYPE_NAME))) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only 'time' routed aliases is supported by TimeRoutedAlias.\");\n    }\n    routeField = required.get(ROUTER_FIELD);\n    intervalMath = required.get(ROUTER_INTERVAL);\n\n    //optional:\n    maxFutureMs = params.getLong(ROUTER_MAX_FUTURE, TimeUnit.MINUTES.toMillis(10));\n    // the date math configured is an interval to be subtracted from the most recent collection's time stamp\n    String pcmTmp = params.get(ROUTER_PREEMPTIVE_CREATE_MATH);\n    preemptiveCreateMath = pcmTmp != null ? (pcmTmp.startsWith(\"-\") ? pcmTmp : \"-\" + pcmTmp) : null;\n    autoDeleteAgeMath = params.get(ROUTER_AUTO_DELETE_AGE); // no default\n    timeZone = TimeZoneUtils.parseTimezone(this.aliasMetadata.get(CommonParams.TZ));\n\n    // More validation:\n\n    // check that the date math is valid\n    final Date now = new Date();\n    try {\n      final Date after = new DateMathParser(now, timeZone).parseMath(intervalMath);\n      if (!after.after(now)) {\n        throw new SolrException(BAD_REQUEST, \"duration must add to produce a time in the future\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_INTERVAL + \", \" + e, e);\n    }\n\n    if (autoDeleteAgeMath != null) {\n      try {\n        final Date before =  new DateMathParser(now, timeZone).parseMath(autoDeleteAgeMath);\n        if (now.before(before)) {\n          throw new SolrException(BAD_REQUEST, \"duration must round or subtract to produce a time in the past\");\n        }\n      } catch (Exception e) {\n        throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_AUTO_DELETE_AGE + \", \" + e, e);\n      }\n    }\n    if (preemptiveCreateMath != null) {\n      try {\n        new DateMathParser().parseMath(preemptiveCreateMath);\n      } catch (ParseException e) {\n        throw new SolrException(BAD_REQUEST, \"Invalid date math for preemptiveCreateMath:\" + preemptiveCreateMath);\n      }\n    }\n\n    if (maxFutureMs < 0) {\n      throw new SolrException(BAD_REQUEST, ROUTER_MAX_FUTURE + \" must be >= 0\");\n    }\n  }\n\n","sourceOld":"  TimeRoutedAlias(String aliasName, Map<String, String> aliasMetadata) throws SolrException {\n    // Validate we got everything we need\n    if (!aliasMetadata.keySet().containsAll(TimeRoutedAlias.REQUIRED_ROUTER_PARAMS)) {\n      throw new SolrException(BAD_REQUEST, \"A time routed alias requires these params: \" + TimeRoutedAlias.REQUIRED_ROUTER_PARAMS\n          + \" plus some create-collection prefixed ones.\");\n    }\n\n    this.aliasMetadata = aliasMetadata;\n\n    this.start = this.aliasMetadata.get(ROUTER_START);\n    this.aliasName = aliasName;\n    final MapSolrParams params = new MapSolrParams(this.aliasMetadata); // for convenience\n    final RequiredSolrParams required = params.required();\n    if (!\"time\".equals(required.get(ROUTER_TYPE_NAME))) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only 'time' routed aliases is supported right now.\");\n    }\n    routeField = required.get(ROUTER_FIELD);\n    intervalMath = required.get(ROUTER_INTERVAL);\n\n    //optional:\n    maxFutureMs = params.getLong(ROUTER_MAX_FUTURE, TimeUnit.MINUTES.toMillis(10));\n    // the date math configured is an interval to be subtracted from the most recent collection's time stamp\n    String pcmTmp = params.get(ROUTER_PREEMPTIVE_CREATE_MATH);\n    preemptiveCreateMath = pcmTmp != null ? (pcmTmp.startsWith(\"-\") ? pcmTmp : \"-\" + pcmTmp) : null;\n    autoDeleteAgeMath = params.get(ROUTER_AUTO_DELETE_AGE); // no default\n    timeZone = TimeZoneUtils.parseTimezone(this.aliasMetadata.get(CommonParams.TZ));\n\n    // More validation:\n\n    // check that the date math is valid\n    final Date now = new Date();\n    try {\n      final Date after = new DateMathParser(now, timeZone).parseMath(intervalMath);\n      if (!after.after(now)) {\n        throw new SolrException(BAD_REQUEST, \"duration must add to produce a time in the future\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_INTERVAL + \", \" + e, e);\n    }\n\n    if (autoDeleteAgeMath != null) {\n      try {\n        final Date before =  new DateMathParser(now, timeZone).parseMath(autoDeleteAgeMath);\n        if (now.before(before)) {\n          throw new SolrException(BAD_REQUEST, \"duration must round or subtract to produce a time in the past\");\n        }\n      } catch (Exception e) {\n        throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_AUTO_DELETE_AGE + \", \" + e, e);\n      }\n    }\n    if (preemptiveCreateMath != null) {\n      try {\n        new DateMathParser().parseMath(preemptiveCreateMath);\n      } catch (ParseException e) {\n        throw new SolrException(BAD_REQUEST, \"Invalid date math for preemptiveCreateMath:\" + preemptiveCreateMath);\n      }\n    }\n\n    if (maxFutureMs < 0) {\n      throw new SolrException(BAD_REQUEST, ROUTER_MAX_FUTURE + \" must be >= 0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#TimeRoutedAlias(String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#TimeRoutedAlias(String,Map[String,String]).mjava","sourceNew":"  TimeRoutedAlias(String aliasName, Map<String, String> aliasMetadata) throws SolrException {\n    // Validate we got everything we need\n    if (!aliasMetadata.keySet().containsAll(TimeRoutedAlias.REQUIRED_ROUTER_PARAMS)) {\n      throw new SolrException(BAD_REQUEST, \"A time routed alias requires these params: \" + TimeRoutedAlias.REQUIRED_ROUTER_PARAMS\n          + \" plus some create-collection prefixed ones.\");\n    }\n\n    this.aliasMetadata = aliasMetadata;\n\n    this.start = this.aliasMetadata.get(ROUTER_START);\n    this.aliasName = aliasName;\n    final MapSolrParams params = new MapSolrParams(this.aliasMetadata); // for convenience\n    final RequiredSolrParams required = params.required();\n    String type = required.get(ROUTER_TYPE_NAME).toLowerCase(Locale.ROOT);\n    if (!\"time\".equals(type)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only 'time' routed aliases is supported by TimeRoutedAlias, found:\" + type);\n    }\n    routeField = required.get(ROUTER_FIELD);\n    intervalMath = required.get(ROUTER_INTERVAL);\n\n    //optional:\n    maxFutureMs = params.getLong(ROUTER_MAX_FUTURE, TimeUnit.MINUTES.toMillis(10));\n    // the date math configured is an interval to be subtracted from the most recent collection's time stamp\n    String pcmTmp = params.get(ROUTER_PREEMPTIVE_CREATE_MATH);\n    preemptiveCreateMath = pcmTmp != null ? (pcmTmp.startsWith(\"-\") ? pcmTmp : \"-\" + pcmTmp) : null;\n    autoDeleteAgeMath = params.get(ROUTER_AUTO_DELETE_AGE); // no default\n    timeZone = TimeZoneUtils.parseTimezone(this.aliasMetadata.get(CommonParams.TZ));\n\n    // More validation:\n\n    // check that the date math is valid\n    final Date now = new Date();\n    try {\n      final Date after = new DateMathParser(now, timeZone).parseMath(getIntervalMath());\n      if (!after.after(now)) {\n        throw new SolrException(BAD_REQUEST, \"duration must add to produce a time in the future\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_INTERVAL + \", \" + e, e);\n    }\n\n    if (autoDeleteAgeMath != null) {\n      try {\n        final Date before = new DateMathParser(now, timeZone).parseMath(autoDeleteAgeMath);\n        if (now.before(before)) {\n          throw new SolrException(BAD_REQUEST, \"duration must round or subtract to produce a time in the past\");\n        }\n      } catch (Exception e) {\n        throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_AUTO_DELETE_AGE + \", \" + e, e);\n      }\n    }\n    if (preemptiveCreateMath != null) {\n      try {\n        new DateMathParser().parseMath(preemptiveCreateMath);\n      } catch (ParseException e) {\n        throw new SolrException(BAD_REQUEST, \"Invalid date math for preemptiveCreateMath:\" + preemptiveCreateMath);\n      }\n    }\n\n    if (maxFutureMs < 0) {\n      throw new SolrException(BAD_REQUEST, ROUTER_MAX_FUTURE + \" must be >= 0\");\n    }\n  }\n\n","sourceOld":"  TimeRoutedAlias(String aliasName, Map<String, String> aliasMetadata) throws SolrException {\n    // Validate we got everything we need\n    if (!aliasMetadata.keySet().containsAll(TimeRoutedAlias.REQUIRED_ROUTER_PARAMS)) {\n      throw new SolrException(BAD_REQUEST, \"A time routed alias requires these params: \" + TimeRoutedAlias.REQUIRED_ROUTER_PARAMS\n          + \" plus some create-collection prefixed ones.\");\n    }\n\n    this.aliasMetadata = aliasMetadata;\n\n    this.start = this.aliasMetadata.get(ROUTER_START);\n    this.aliasName = aliasName;\n    final MapSolrParams params = new MapSolrParams(this.aliasMetadata); // for convenience\n    final RequiredSolrParams required = params.required();\n    if (!\"time\".equals(required.get(ROUTER_TYPE_NAME))) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only 'time' routed aliases is supported by TimeRoutedAlias.\");\n    }\n    routeField = required.get(ROUTER_FIELD);\n    intervalMath = required.get(ROUTER_INTERVAL);\n\n    //optional:\n    maxFutureMs = params.getLong(ROUTER_MAX_FUTURE, TimeUnit.MINUTES.toMillis(10));\n    // the date math configured is an interval to be subtracted from the most recent collection's time stamp\n    String pcmTmp = params.get(ROUTER_PREEMPTIVE_CREATE_MATH);\n    preemptiveCreateMath = pcmTmp != null ? (pcmTmp.startsWith(\"-\") ? pcmTmp : \"-\" + pcmTmp) : null;\n    autoDeleteAgeMath = params.get(ROUTER_AUTO_DELETE_AGE); // no default\n    timeZone = TimeZoneUtils.parseTimezone(this.aliasMetadata.get(CommonParams.TZ));\n\n    // More validation:\n\n    // check that the date math is valid\n    final Date now = new Date();\n    try {\n      final Date after = new DateMathParser(now, timeZone).parseMath(intervalMath);\n      if (!after.after(now)) {\n        throw new SolrException(BAD_REQUEST, \"duration must add to produce a time in the future\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_INTERVAL + \", \" + e, e);\n    }\n\n    if (autoDeleteAgeMath != null) {\n      try {\n        final Date before =  new DateMathParser(now, timeZone).parseMath(autoDeleteAgeMath);\n        if (now.before(before)) {\n          throw new SolrException(BAD_REQUEST, \"duration must round or subtract to produce a time in the past\");\n        }\n      } catch (Exception e) {\n        throw new SolrException(BAD_REQUEST, \"bad \" + TimeRoutedAlias.ROUTER_AUTO_DELETE_AGE + \", \" + e, e);\n      }\n    }\n    if (preemptiveCreateMath != null) {\n      try {\n        new DateMathParser().parseMath(preemptiveCreateMath);\n      } catch (ParseException e) {\n        throw new SolrException(BAD_REQUEST, \"Invalid date math for preemptiveCreateMath:\" + preemptiveCreateMath);\n      }\n    }\n\n    if (maxFutureMs < 0) {\n      throw new SolrException(BAD_REQUEST, ROUTER_MAX_FUTURE + \" must be >= 0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"105e345cf3c0abed3cb6c109274a379cb2655adc":["b627755385655c7cd3fb296f17593658805cf4d5"],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cbd743a4843f513f793670e3ab0e272bf824faf":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"849083f8095b1ffaff05a66e0b1e024617b9968d":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["849083f8095b1ffaff05a66e0b1e024617b9968d"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["105e345cf3c0abed3cb6c109274a379cb2655adc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"105e345cf3c0abed3cb6c109274a379cb2655adc":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"3cbd743a4843f513f793670e3ab0e272bf824faf":["849083f8095b1ffaff05a66e0b1e024617b9968d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"849083f8095b1ffaff05a66e0b1e024617b9968d":["b627755385655c7cd3fb296f17593658805cf4d5"],"b627755385655c7cd3fb296f17593658805cf4d5":["105e345cf3c0abed3cb6c109274a379cb2655adc"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}