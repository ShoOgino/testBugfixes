{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,String,IOContext).mjava","commits":[{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,int,String,IOContext).mjava","sourceNew":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, String segmentSuffix, IOContext context)\n    throws IOException {\n    final IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n\n    try {\n      \n      version = readHeader(in);\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(in, fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, String segmentSuffix, IOContext context)\n    throws IOException {\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    try {\n      \n      version = readHeader(in);\n      this.indexDivisor = indexDivisor;\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,int,String,IOContext).mjava","sourceNew":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, String segmentSuffix, IOContext context)\n    throws IOException {\n    final IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n\n    try {\n      \n      version = readHeader(in);\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(in, fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, String segmentSuffix, IOContext context)\n    throws IOException {\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    try {\n      \n      version = readHeader(in);\n      this.indexDivisor = indexDivisor;\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,String,IOContext).mjava","sourceNew":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, String segmentSuffix, IOContext context)\n    throws IOException {\n    final IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n\n    try {\n      \n      version = readHeader(in);\n      \n      if (version >= VariableGapTermsIndexWriter.VERSION_CHECKSUM) {\n        CodecUtil.checksumEntireFile(in);\n      }\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(in, fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, String segmentSuffix, IOContext context)\n    throws IOException {\n    final IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n\n    try {\n      \n      version = readHeader(in);\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(in, fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,String,IOContext).mjava","sourceNew":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, String segmentSuffix, IOContext context)\n    throws IOException {\n    final IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n\n    try {\n      \n      version = readHeader(in);\n      \n      if (version >= VariableGapTermsIndexWriter.VERSION_CHECKSUM) {\n        CodecUtil.checksumEntireFile(in);\n      }\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(in, fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, String segmentSuffix, IOContext context)\n    throws IOException {\n    final IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n\n    try {\n      \n      version = readHeader(in);\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(in, fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,String,IOContext).mjava","sourceNew":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, String segmentSuffix, IOContext context)\n    throws IOException {\n    final IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n\n    try {\n      \n      version = readHeader(in);\n      \n      if (version >= VariableGapTermsIndexWriter.VERSION_CHECKSUM) {\n        CodecUtil.checksumEntireFile(in);\n      }\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo.name, new FieldIndexData(in, fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, String segmentSuffix, IOContext context)\n    throws IOException {\n    final IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n\n    try {\n      \n      version = readHeader(in);\n      \n      if (version >= VariableGapTermsIndexWriter.VERSION_CHECKSUM) {\n        CodecUtil.checksumEntireFile(in);\n      }\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(in, fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,String,IOContext).mjava","sourceNew":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, String segmentSuffix, IOContext context)\n    throws IOException {\n    final IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n\n    try {\n      \n      version = readHeader(in);\n      \n      if (version >= VariableGapTermsIndexWriter.VERSION_CHECKSUM) {\n        CodecUtil.checksumEntireFile(in);\n      }\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields, in);\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo.name, new FieldIndexData(in, fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name, in);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, String segmentSuffix, IOContext context)\n    throws IOException {\n    final IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n\n    try {\n      \n      version = readHeader(in);\n      \n      if (version >= VariableGapTermsIndexWriter.VERSION_CHECKSUM) {\n        CodecUtil.checksumEntireFile(in);\n      }\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo.name, new FieldIndexData(in, fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":["6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdfd4a8fd5df3958475e4dde3633adb237373a27","date":1412166431,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,String,IOContext).mjava","sourceNew":"  public VariableGapTermsIndexReader(SegmentReadState state) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                     state.segmentSuffix, \n                                                     VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION);\n    final IndexInput in = state.directory.openInput(fileName, new IOContext(state.context, true));\n    boolean success = false;\n\n    try {\n      \n      CodecUtil.checkSegmentHeader(in, VariableGapTermsIndexWriter.CODEC_NAME,\n                                       VariableGapTermsIndexWriter.VERSION_START,\n                                       VariableGapTermsIndexWriter.VERSION_CURRENT,\n                                       state.segmentInfo.getId(), state.segmentSuffix);\n      \n      CodecUtil.checksumEntireFile(in);\n\n      seekDir(in);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields, in);\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo.name, new FieldIndexData(in, fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name, in);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, String segmentSuffix, IOContext context)\n    throws IOException {\n    final IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n\n    try {\n      \n      version = readHeader(in);\n      \n      if (version >= VariableGapTermsIndexWriter.VERSION_CHECKSUM) {\n        CodecUtil.checksumEntireFile(in);\n      }\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields, in);\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo.name, new FieldIndexData(in, fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name, in);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(SegmentReadState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,String,IOContext).mjava","sourceNew":"  public VariableGapTermsIndexReader(SegmentReadState state) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, \n                                                     state.segmentSuffix, \n                                                     VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION);\n    final IndexInput in = state.directory.openInput(fileName, new IOContext(state.context, true));\n    boolean success = false;\n\n    try {\n      \n      CodecUtil.checkSegmentHeader(in, VariableGapTermsIndexWriter.CODEC_NAME,\n                                       VariableGapTermsIndexWriter.VERSION_START,\n                                       VariableGapTermsIndexWriter.VERSION_CURRENT,\n                                       state.segmentInfo.getId(), state.segmentSuffix);\n      \n      CodecUtil.checksumEntireFile(in);\n\n      seekDir(in);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields, in);\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo.name, new FieldIndexData(in, fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name, in);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, String segmentSuffix, IOContext context)\n    throws IOException {\n    final IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n\n    try {\n      \n      version = readHeader(in);\n      \n      if (version >= VariableGapTermsIndexWriter.VERSION_CHECKSUM) {\n        CodecUtil.checksumEntireFile(in);\n      }\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields, in);\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo.name, new FieldIndexData(in, fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name, in);\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cdfd4a8fd5df3958475e4dde3633adb237373a27":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"5eb2511ababf862ea11e10761c70ee560cd84510":["a45bec74b98f6fc05f52770cfb425739e6563960","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["a45bec74b98f6fc05f52770cfb425739e6563960"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"a45bec74b98f6fc05f52770cfb425739e6563960":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","cdfd4a8fd5df3958475e4dde3633adb237373a27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"cdfd4a8fd5df3958475e4dde3633adb237373a27":["9bb9a29a5e71a90295f175df8919802993142c9a"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","0936055c0eed56be3e4ae5c9db5b0e355390736a"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["cdfd4a8fd5df3958475e4dde3633adb237373a27","9bb9a29a5e71a90295f175df8919802993142c9a"],"a45bec74b98f6fc05f52770cfb425739e6563960":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}