{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/search/index/GDataIndexer#doDeltete().mjava","commits":[{"id":"09fe963da2613c724ffe82353b4ca2364a1f93c6","date":1155249160,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/search/index/GDataIndexer#doDeltete().mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * This should only be called in a synchronized block\n     */\n    protected void doDeltete() throws IOException {\n        if (this.action.size() == 0)\n            return;\n        if (LOG.isInfoEnabled())\n            LOG\n                    .info(\"Deleting documents and duplicates from index, size of IndexDocuments \"\n                            + this.action.size());\n        closeWriter();\n        openSearcher();\n\n        IndexReader reader = this.searcher.getIndexReader();\n        TermDocs termDocs = reader.termDocs();\n        for (Map.Entry<IndexDocument, Integer> entry : this.action.entrySet()) {\n            IndexDocument indexDocument = entry.getKey();\n            Integer docToKeep = entry.getValue();\n            // extend the array if needed\n            if (this.documentNumber == null\n                    || docToKeep > this.documentNumber.length)\n                this.documentNumber = new int[docToKeep];\n\n            for (int i = 0; i < this.documentNumber.length; i++) {\n\n                this.documentNumber[i] = -1;\n            }\n            /*\n             * get the term to find the document from the document itself\n             */\n            termDocs.seek(indexDocument.getDeletealbe());\n\n            int pos = 0;\n\n            while (termDocs.next()) {\n                /*\n                 * if this is a pure delete just delete it an continue\n                 */\n                if (docToKeep == 0) {\n                    reader.deleteDocument(termDocs.doc());\n                    continue;\n                }\n\n                int prev = this.documentNumber[pos];\n                this.documentNumber[pos] = termDocs.doc();\n                if (prev != -1) {\n                    reader.deleteDocument(prev);\n                }\n\n                if (++pos >= docToKeep)\n                    pos = 0;\n\n            }\n        }\n        /*\n         * clear the map after all documents are processed\n         */\n        this.action.clear();\n        closeSearcher();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/search/index/GDataIndexer#doDeltete().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/search/index/GDataIndexer#doDeltete().mjava","sourceNew":"    /*\n     * This should only be called in a synchronized block\n     */\n    protected void doDeltete() throws IOException {\n        if (this.action.size() == 0)\n            return;\n        if (LOG.isInfoEnabled())\n            LOG\n                    .info(\"Deleting documents and duplicates from index, size of IndexDocuments \"\n                            + this.action.size());\n        closeWriter();\n        openSearcher();\n\n        IndexReader reader = this.searcher.getIndexReader();\n        TermDocs termDocs = reader.termDocs();\n        for (Map.Entry<IndexDocument, Integer> entry : this.action.entrySet()) {\n            IndexDocument indexDocument = entry.getKey();\n            Integer docToKeep = entry.getValue();\n            // extend the array if needed\n            if (this.documentNumber == null\n                    || docToKeep > this.documentNumber.length)\n                this.documentNumber = new int[docToKeep];\n\n            for (int i = 0; i < this.documentNumber.length; i++) {\n\n                this.documentNumber[i] = -1;\n            }\n            /*\n             * get the term to find the document from the document itself\n             */\n            termDocs.seek(indexDocument.getDeletealbe());\n\n            int pos = 0;\n\n            while (termDocs.next()) {\n                /*\n                 * if this is a pure delete just delete it an continue\n                 */\n                if (docToKeep == 0) {\n                    reader.deleteDocument(termDocs.doc());\n                    continue;\n                }\n\n                int prev = this.documentNumber[pos];\n                this.documentNumber[pos] = termDocs.doc();\n                if (prev != -1) {\n                    reader.deleteDocument(prev);\n                }\n\n                if (++pos >= docToKeep)\n                    pos = 0;\n\n            }\n        }\n        /*\n         * clear the map after all documents are processed\n         */\n        this.action.clear();\n        closeSearcher();\n    }\n\n","sourceOld":"    /*\n     * This should only be called in a synchronized block\n     */\n    protected void doDeltete() throws IOException {\n        if (this.action.size() == 0)\n            return;\n        if (LOG.isInfoEnabled())\n            LOG\n                    .info(\"Deleting documents and duplicates from index, size of IndexDocuments \"\n                            + this.action.size());\n        closeWriter();\n        openSearcher();\n\n        IndexReader reader = this.searcher.getIndexReader();\n        TermDocs termDocs = reader.termDocs();\n        for (Map.Entry<IndexDocument, Integer> entry : this.action.entrySet()) {\n            IndexDocument indexDocument = entry.getKey();\n            Integer docToKeep = entry.getValue();\n            // extend the array if needed\n            if (this.documentNumber == null\n                    || docToKeep > this.documentNumber.length)\n                this.documentNumber = new int[docToKeep];\n\n            for (int i = 0; i < this.documentNumber.length; i++) {\n\n                this.documentNumber[i] = -1;\n            }\n            /*\n             * get the term to find the document from the document itself\n             */\n            termDocs.seek(indexDocument.getDeletealbe());\n\n            int pos = 0;\n\n            while (termDocs.next()) {\n                /*\n                 * if this is a pure delete just delete it an continue\n                 */\n                if (docToKeep == 0) {\n                    reader.deleteDocument(termDocs.doc());\n                    continue;\n                }\n\n                int prev = this.documentNumber[pos];\n                this.documentNumber[pos] = termDocs.doc();\n                if (prev != -1) {\n                    reader.deleteDocument(prev);\n                }\n\n                if (++pos >= docToKeep)\n                    pos = 0;\n\n            }\n        }\n        /*\n         * clear the map after all documents are processed\n         */\n        this.action.clear();\n        closeSearcher();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}