{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields).mjava","commits":[{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n      try {\n        for(String field : fields) {\n          Terms terms = fields.terms(field);\n          if (terms == null) {\n            continue;\n          }\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n          TermsEnum termsEnum = terms.iterator(null);\n\n          FuzzySet bloomFilter = null;\n\n          DocsEnum docsEnum = null;\n          while (true) {\n            BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            if (bloomFilter == null) {\n              bloomFilter = bloomFilterFactory.getSetForField(state, fieldInfo);\n              if (bloomFilter == null) {\n                // Field not bloom'd\n                break;\n              }\n              assert bloomFilters.containsKey(field) == false;\n              bloomFilters.put(fieldInfo, bloomFilter);\n            }\n            // Make sure there's at least one doc for this term:\n            docsEnum = termsEnum.docs(null, docsEnum, 0);\n            if (docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              bloomFilter.addValue(term);\n            }\n          }\n        }\n      } finally {\n        close();\n      }\n\n      delegateFieldsConsumer.write(fields);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ca7ce5fac6538cd984a02c972f2a5251d05e331","date":1381782064,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Delegate must write first: it may have opened files\n      // on creating the class\n      // (e.g. Lucene41PostingsConsumer), and write() will\n      // close them; alternatively, if we delayed pulling\n      // the fields consumer until here, we could do it\n      // afterwards:\n      delegateFieldsConsumer.write(fields);\n\n      try {\n        for(String field : fields) {\n          Terms terms = fields.terms(field);\n          if (terms == null) {\n            continue;\n          }\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n          TermsEnum termsEnum = terms.iterator(null);\n\n          FuzzySet bloomFilter = null;\n\n          DocsEnum docsEnum = null;\n          while (true) {\n            BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            if (bloomFilter == null) {\n              bloomFilter = bloomFilterFactory.getSetForField(state, fieldInfo);\n              if (bloomFilter == null) {\n                // Field not bloom'd\n                break;\n              }\n              assert bloomFilters.containsKey(field) == false;\n              bloomFilters.put(fieldInfo, bloomFilter);\n            }\n            // Make sure there's at least one doc for this term:\n            docsEnum = termsEnum.docs(null, docsEnum, 0);\n            if (docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              bloomFilter.addValue(term);\n            }\n          }\n        }\n      } finally {\n        close();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      try {\n        for(String field : fields) {\n          Terms terms = fields.terms(field);\n          if (terms == null) {\n            continue;\n          }\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n          TermsEnum termsEnum = terms.iterator(null);\n\n          FuzzySet bloomFilter = null;\n\n          DocsEnum docsEnum = null;\n          while (true) {\n            BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            if (bloomFilter == null) {\n              bloomFilter = bloomFilterFactory.getSetForField(state, fieldInfo);\n              if (bloomFilter == null) {\n                // Field not bloom'd\n                break;\n              }\n              assert bloomFilters.containsKey(field) == false;\n              bloomFilters.put(fieldInfo, bloomFilter);\n            }\n            // Make sure there's at least one doc for this term:\n            docsEnum = termsEnum.docs(null, docsEnum, 0);\n            if (docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              bloomFilter.addValue(term);\n            }\n          }\n        }\n      } finally {\n        close();\n      }\n\n      delegateFieldsConsumer.write(fields);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63","date":1398957288,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Delegate must write first: it may have opened files\n      // on creating the class\n      // (e.g. Lucene41PostingsConsumer), and write() will\n      // close them; alternatively, if we delayed pulling\n      // the fields consumer until here, we could do it\n      // afterwards:\n      delegateFieldsConsumer.write(fields);\n\n      for(String field : fields) {\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsEnum termsEnum = terms.iterator(null);\n\n        FuzzySet bloomFilter = null;\n\n        DocsEnum docsEnum = null;\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (bloomFilter == null) {\n            bloomFilter = bloomFilterFactory.getSetForField(state, fieldInfo);\n            if (bloomFilter == null) {\n              // Field not bloom'd\n              break;\n            }\n            assert bloomFilters.containsKey(field) == false;\n            bloomFilters.put(fieldInfo, bloomFilter);\n          }\n          // Make sure there's at least one doc for this term:\n          docsEnum = termsEnum.docs(null, docsEnum, 0);\n          if (docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            bloomFilter.addValue(term);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Delegate must write first: it may have opened files\n      // on creating the class\n      // (e.g. Lucene41PostingsConsumer), and write() will\n      // close them; alternatively, if we delayed pulling\n      // the fields consumer until here, we could do it\n      // afterwards:\n      delegateFieldsConsumer.write(fields);\n\n      try {\n        for(String field : fields) {\n          Terms terms = fields.terms(field);\n          if (terms == null) {\n            continue;\n          }\n          FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n          TermsEnum termsEnum = terms.iterator(null);\n\n          FuzzySet bloomFilter = null;\n\n          DocsEnum docsEnum = null;\n          while (true) {\n            BytesRef term = termsEnum.next();\n            if (term == null) {\n              break;\n            }\n            if (bloomFilter == null) {\n              bloomFilter = bloomFilterFactory.getSetForField(state, fieldInfo);\n              if (bloomFilter == null) {\n                // Field not bloom'd\n                break;\n              }\n              assert bloomFilters.containsKey(field) == false;\n              bloomFilters.put(fieldInfo, bloomFilter);\n            }\n            // Make sure there's at least one doc for this term:\n            docsEnum = termsEnum.docs(null, docsEnum, 0);\n            if (docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              bloomFilter.addValue(term);\n            }\n          }\n        }\n      } finally {\n        close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Delegate must write first: it may have opened files\n      // on creating the class\n      // (e.g. Lucene41PostingsConsumer), and write() will\n      // close them; alternatively, if we delayed pulling\n      // the fields consumer until here, we could do it\n      // afterwards:\n      delegateFieldsConsumer.write(fields);\n\n      for(String field : fields) {\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsEnum termsEnum = terms.iterator(null);\n\n        FuzzySet bloomFilter = null;\n\n        PostingsEnum postingsEnum = null;\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (bloomFilter == null) {\n            bloomFilter = bloomFilterFactory.getSetForField(state, fieldInfo);\n            if (bloomFilter == null) {\n              // Field not bloom'd\n              break;\n            }\n            assert bloomFilters.containsKey(field) == false;\n            bloomFilters.put(fieldInfo, bloomFilter);\n          }\n          // Make sure there's at least one doc for this term:\n          postingsEnum = termsEnum.postings(null, postingsEnum, 0);\n          if (postingsEnum.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n            bloomFilter.addValue(term);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Delegate must write first: it may have opened files\n      // on creating the class\n      // (e.g. Lucene41PostingsConsumer), and write() will\n      // close them; alternatively, if we delayed pulling\n      // the fields consumer until here, we could do it\n      // afterwards:\n      delegateFieldsConsumer.write(fields);\n\n      for(String field : fields) {\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsEnum termsEnum = terms.iterator(null);\n\n        FuzzySet bloomFilter = null;\n\n        DocsEnum docsEnum = null;\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (bloomFilter == null) {\n            bloomFilter = bloomFilterFactory.getSetForField(state, fieldInfo);\n            if (bloomFilter == null) {\n              // Field not bloom'd\n              break;\n            }\n            assert bloomFilters.containsKey(field) == false;\n            bloomFilters.put(fieldInfo, bloomFilter);\n          }\n          // Make sure there's at least one doc for this term:\n          docsEnum = termsEnum.docs(null, docsEnum, 0);\n          if (docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            bloomFilter.addValue(term);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Delegate must write first: it may have opened files\n      // on creating the class\n      // (e.g. Lucene41PostingsConsumer), and write() will\n      // close them; alternatively, if we delayed pulling\n      // the fields consumer until here, we could do it\n      // afterwards:\n      delegateFieldsConsumer.write(fields);\n\n      for(String field : fields) {\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsEnum termsEnum = terms.iterator();\n\n        FuzzySet bloomFilter = null;\n\n        PostingsEnum postingsEnum = null;\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (bloomFilter == null) {\n            bloomFilter = bloomFilterFactory.getSetForField(state, fieldInfo);\n            if (bloomFilter == null) {\n              // Field not bloom'd\n              break;\n            }\n            assert bloomFilters.containsKey(field) == false;\n            bloomFilters.put(fieldInfo, bloomFilter);\n          }\n          // Make sure there's at least one doc for this term:\n          postingsEnum = termsEnum.postings(null, postingsEnum, 0);\n          if (postingsEnum.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n            bloomFilter.addValue(term);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Delegate must write first: it may have opened files\n      // on creating the class\n      // (e.g. Lucene41PostingsConsumer), and write() will\n      // close them; alternatively, if we delayed pulling\n      // the fields consumer until here, we could do it\n      // afterwards:\n      delegateFieldsConsumer.write(fields);\n\n      for(String field : fields) {\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsEnum termsEnum = terms.iterator(null);\n\n        FuzzySet bloomFilter = null;\n\n        PostingsEnum postingsEnum = null;\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (bloomFilter == null) {\n            bloomFilter = bloomFilterFactory.getSetForField(state, fieldInfo);\n            if (bloomFilter == null) {\n              // Field not bloom'd\n              break;\n            }\n            assert bloomFilters.containsKey(field) == false;\n            bloomFilters.put(fieldInfo, bloomFilter);\n          }\n          // Make sure there's at least one doc for this term:\n          postingsEnum = termsEnum.postings(null, postingsEnum, 0);\n          if (postingsEnum.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n            bloomFilter.addValue(term);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Delegate must write first: it may have opened files\n      // on creating the class\n      // (e.g. Lucene41PostingsConsumer), and write() will\n      // close them; alternatively, if we delayed pulling\n      // the fields consumer until here, we could do it\n      // afterwards:\n      delegateFieldsConsumer.write(fields);\n\n      for(String field : fields) {\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsEnum termsEnum = terms.iterator();\n\n        FuzzySet bloomFilter = null;\n\n        PostingsEnum postingsEnum = null;\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (bloomFilter == null) {\n            bloomFilter = bloomFilterFactory.getSetForField(state, fieldInfo);\n            if (bloomFilter == null) {\n              // Field not bloom'd\n              break;\n            }\n            assert bloomFilters.containsKey(field) == false;\n            bloomFilters.put(fieldInfo, bloomFilter);\n          }\n          // Make sure there's at least one doc for this term:\n          postingsEnum = termsEnum.postings(postingsEnum, 0);\n          if (postingsEnum.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n            bloomFilter.addValue(term);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Delegate must write first: it may have opened files\n      // on creating the class\n      // (e.g. Lucene41PostingsConsumer), and write() will\n      // close them; alternatively, if we delayed pulling\n      // the fields consumer until here, we could do it\n      // afterwards:\n      delegateFieldsConsumer.write(fields);\n\n      for(String field : fields) {\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsEnum termsEnum = terms.iterator();\n\n        FuzzySet bloomFilter = null;\n\n        PostingsEnum postingsEnum = null;\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (bloomFilter == null) {\n            bloomFilter = bloomFilterFactory.getSetForField(state, fieldInfo);\n            if (bloomFilter == null) {\n              // Field not bloom'd\n              break;\n            }\n            assert bloomFilters.containsKey(field) == false;\n            bloomFilters.put(fieldInfo, bloomFilter);\n          }\n          // Make sure there's at least one doc for this term:\n          postingsEnum = termsEnum.postings(null, postingsEnum, 0);\n          if (postingsEnum.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n            bloomFilter.addValue(term);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields,NormsProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields, NormsProducer norms) throws IOException {\n\n      // Delegate must write first: it may have opened files\n      // on creating the class\n      // (e.g. Lucene41PostingsConsumer), and write() will\n      // close them; alternatively, if we delayed pulling\n      // the fields consumer until here, we could do it\n      // afterwards:\n      delegateFieldsConsumer.write(fields, norms);\n\n      for(String field : fields) {\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsEnum termsEnum = terms.iterator();\n\n        FuzzySet bloomFilter = null;\n\n        PostingsEnum postingsEnum = null;\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (bloomFilter == null) {\n            bloomFilter = bloomFilterFactory.getSetForField(state, fieldInfo);\n            if (bloomFilter == null) {\n              // Field not bloom'd\n              break;\n            }\n            assert bloomFilters.containsKey(field) == false;\n            bloomFilters.put(fieldInfo, bloomFilter);\n          }\n          // Make sure there's at least one doc for this term:\n          postingsEnum = termsEnum.postings(postingsEnum, 0);\n          if (postingsEnum.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n            bloomFilter.addValue(term);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Delegate must write first: it may have opened files\n      // on creating the class\n      // (e.g. Lucene41PostingsConsumer), and write() will\n      // close them; alternatively, if we delayed pulling\n      // the fields consumer until here, we could do it\n      // afterwards:\n      delegateFieldsConsumer.write(fields);\n\n      for(String field : fields) {\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsEnum termsEnum = terms.iterator();\n\n        FuzzySet bloomFilter = null;\n\n        PostingsEnum postingsEnum = null;\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (bloomFilter == null) {\n            bloomFilter = bloomFilterFactory.getSetForField(state, fieldInfo);\n            if (bloomFilter == null) {\n              // Field not bloom'd\n              break;\n            }\n            assert bloomFilters.containsKey(field) == false;\n            bloomFilters.put(fieldInfo, bloomFilter);\n          }\n          // Make sure there's at least one doc for this term:\n          postingsEnum = termsEnum.postings(postingsEnum, 0);\n          if (postingsEnum.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n            bloomFilter.addValue(term);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["51f5280f31484820499077f41fcdfe92d527d9dc"],"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63":["0ca7ce5fac6538cd984a02c972f2a5251d05e331"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0ca7ce5fac6538cd984a02c972f2a5251d05e331":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"51f5280f31484820499077f41fcdfe92d527d9dc":["7afb64ff3a701f68b2689cafff6c5bdeb4f67f63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["622a708571e534680618b3c5e0c28ac539a47776"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63":["51f5280f31484820499077f41fcdfe92d527d9dc"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["622a708571e534680618b3c5e0c28ac539a47776"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"622a708571e534680618b3c5e0c28ac539a47776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ca7ce5fac6538cd984a02c972f2a5251d05e331":["7afb64ff3a701f68b2689cafff6c5bdeb4f67f63"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["0ca7ce5fac6538cd984a02c972f2a5251d05e331"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}