{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#checkIntegrity().mjava","commits":[{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#checkIntegrity().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#checkIntegrity().mjava","sourceNew":"  @Override\n  public void checkIntegrity() throws IOException {\n    if (version >= BlockTreeTermsWriter.VERSION_CHECKSUM) {      \n      // term dictionary\n      CodecUtil.checksumEntireFile(in);\n      \n      // postings\n      postingsReader.checkIntegrity();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void checkIntegrity() throws IOException {\n    if (version >= BlockTreeTermsWriter.VERSION_CHECKSUM) {      \n      // term dictionary\n      CodecUtil.checksumEntireFile(in);\n      \n      // postings\n      postingsReader.checkIntegrity();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#checkIntegrity().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#checkIntegrity().mjava","sourceNew":"  @Override\n  public void checkIntegrity() throws IOException {\n    if (version >= BlockTreeTermsWriter.VERSION_CHECKSUM) {      \n      // term dictionary\n      CodecUtil.checksumEntireFile(in);\n      \n      // postings\n      postingsReader.checkIntegrity();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void checkIntegrity() throws IOException {\n    if (version >= BlockTreeTermsWriter.VERSION_CHECKSUM) {      \n      // term dictionary\n      CodecUtil.checksumEntireFile(in);\n      \n      // postings\n      postingsReader.checkIntegrity();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#checkIntegrity().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#checkIntegrity().mjava","sourceNew":"  @Override\n  public void checkIntegrity() throws IOException { \n    // term dictionary\n    CodecUtil.checksumEntireFile(in);\n      \n    // postings\n    postingsReader.checkIntegrity();\n  }\n\n","sourceOld":"  @Override\n  public void checkIntegrity() throws IOException {\n    if (version >= BlockTreeTermsWriter.VERSION_CHECKSUM) {      \n      // term dictionary\n      CodecUtil.checksumEntireFile(in);\n      \n      // postings\n      postingsReader.checkIntegrity();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6d238816bcdf9bbe4ec886226d89bd93834eb7e","date":1413925889,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#checkIntegrity().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#checkIntegrity().mjava","sourceNew":"  @Override\n  public void checkIntegrity() throws IOException { \n    // term dictionary\n    CodecUtil.checksumEntireFile(termsIn);\n      \n    // postings\n    postingsReader.checkIntegrity();\n  }\n\n","sourceOld":"  @Override\n  public void checkIntegrity() throws IOException { \n    // term dictionary\n    CodecUtil.checksumEntireFile(in);\n      \n    // postings\n    postingsReader.checkIntegrity();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#checkIntegrity().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#checkIntegrity().mjava","sourceNew":"  @Override\n  public void checkIntegrity() throws IOException { \n    // term dictionary\n    CodecUtil.checksumEntireFile(termsIn);\n      \n    // postings\n    postingsReader.checkIntegrity();\n  }\n\n","sourceOld":"  @Override\n  public void checkIntegrity() throws IOException {\n    if (version >= BlockTreeTermsWriter.VERSION_CHECKSUM) {      \n      // term dictionary\n      CodecUtil.checksumEntireFile(in);\n      \n      // postings\n      postingsReader.checkIntegrity();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"733b02d82d76739a6c079b56e3d1e11f93ed7b84","date":1583946929,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#checkIntegrity().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#checkIntegrity().mjava","sourceNew":"  @Override\n  public void checkIntegrity() throws IOException { \n    // terms index\n    CodecUtil.checksumEntireFile(indexIn);\n\n    // term dictionary\n    CodecUtil.checksumEntireFile(termsIn);\n      \n    // postings\n    postingsReader.checkIntegrity();\n  }\n\n","sourceOld":"  @Override\n  public void checkIntegrity() throws IOException { \n    // term dictionary\n    CodecUtil.checksumEntireFile(termsIn);\n      \n    // postings\n    postingsReader.checkIntegrity();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["0628077afea69a2955260949478afabab8e500d8"],"733b02d82d76739a6c079b56e3d1e11f93ed7b84":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["4d637064d608752565d4f9f41b2497dfdfdde50e","c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"0628077afea69a2955260949478afabab8e500d8":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["733b02d82d76739a6c079b56e3d1e11f93ed7b84"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","0628077afea69a2955260949478afabab8e500d8"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"733b02d82d76739a6c079b56e3d1e11f93ed7b84":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["733b02d82d76739a6c079b56e3d1e11f93ed7b84"],"0628077afea69a2955260949478afabab8e500d8":["c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}