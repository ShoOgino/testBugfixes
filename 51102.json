{"path":"solr/core/src/java/org/apache/solr/search/ExportQParserPlugin.ExportQuery#getTopDocsCollector(int,QueryCommand,IndexSearcher).mjava","commits":[{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExportQParserPlugin.ExportQuery#getTopDocsCollector(int,QueryCommand,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExportQParserPlugin.ExportQuery#getTopDocsCollector(int,SolrIndexSearcher.QueryCommand,IndexSearcher).mjava","sourceNew":"    public TopDocsCollector getTopDocsCollector(int len,\n                                                QueryCommand cmd,\n                                                IndexSearcher searcher) throws IOException {\n      int leafCount = searcher.getTopReaderContext().leaves().size();\n      FixedBitSet[] sets = new FixedBitSet[leafCount];\n      return new ExportCollector(sets);\n    }\n\n","sourceOld":"    public TopDocsCollector getTopDocsCollector(int len,\n                                                SolrIndexSearcher.QueryCommand cmd,\n                                                IndexSearcher searcher) throws IOException {\n      int leafCount = searcher.getTopReaderContext().leaves().size();\n      FixedBitSet[] sets = new FixedBitSet[leafCount];\n      return new ExportCollector(sets);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExportQParserPlugin.ExportQuery#getTopDocsCollector(int,QueryCommand,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExportQParserPlugin.ExportQuery#getTopDocsCollector(int,QueryCommand,IndexSearcher).mjava","sourceNew":"    @SuppressWarnings({\"rawtypes\"})\n    public TopDocsCollector getTopDocsCollector(int len,\n                                                QueryCommand cmd,\n                                                IndexSearcher searcher) throws IOException {\n      int leafCount = searcher.getTopReaderContext().leaves().size();\n      FixedBitSet[] sets = new FixedBitSet[leafCount];\n      return new ExportCollector(sets);\n    }\n\n","sourceOld":"    public TopDocsCollector getTopDocsCollector(int len,\n                                                QueryCommand cmd,\n                                                IndexSearcher searcher) throws IOException {\n      int leafCount = searcher.getTopReaderContext().leaves().size();\n      FixedBitSet[] sets = new FixedBitSet[leafCount];\n      return new ExportCollector(sets);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"50dfd19525c8d73e856dca6edb64b7aea074037f":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"]},"commit2Childs":{"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}