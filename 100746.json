{"path":"solr/core/src/test/org/apache/solr/cloud/TestQueryingOnDownCollection#downAllReplicas().mjava","commits":[{"id":"3ce90eebc5ea0ea353b865b3db6dbe0c51fc1710","date":1571130800,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestQueryingOnDownCollection#downAllReplicas().mjava","pathOld":"/dev/null","sourceNew":"  private void downAllReplicas() throws Exception {\n    byte[] collectionState = cluster.getZkClient().getData(\"/collections/\" + COLLECTION_NAME + \"/state.json\",\n        null, null, true);\n\n    Map<String,Map<String,?>> infectedState = (Map<String,Map<String,?>>) Utils.fromJSON(collectionState);\n    Map<String, Object> shards = (Map<String, Object>) infectedState.get(COLLECTION_NAME).get(\"shards\");\n    for(Map.Entry<String, Object> shard: shards.entrySet()) {\n      Map<String, Object> replicas = (Map<String, Object>) ((Map<String, Object>) shard.getValue() ).get(\"replicas\");\n      for (Map.Entry<String, Object> replica : replicas.entrySet()) {\n        ((Map<String, Object>) replica.getValue()).put(\"state\", Replica.State.DOWN.toString());\n      }\n    }\n\n    cluster.getZkClient().setData(\"/collections/\" + COLLECTION_NAME + \"/state.json\", Utils.toJSON(infectedState)\n        , true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestQueryingOnDownCollection#downAllReplicas().mjava","pathOld":"/dev/null","sourceNew":"  private void downAllReplicas() throws Exception {\n    byte[] collectionState = cluster.getZkClient().getData(\"/collections/\" + COLLECTION_NAME + \"/state.json\",\n        null, null, true);\n\n    Map<String,Map<String,?>> infectedState = (Map<String,Map<String,?>>) Utils.fromJSON(collectionState);\n    Map<String, Object> shards = (Map<String, Object>) infectedState.get(COLLECTION_NAME).get(\"shards\");\n    for(Map.Entry<String, Object> shard: shards.entrySet()) {\n      Map<String, Object> replicas = (Map<String, Object>) ((Map<String, Object>) shard.getValue() ).get(\"replicas\");\n      for (Map.Entry<String, Object> replica : replicas.entrySet()) {\n        ((Map<String, Object>) replica.getValue()).put(\"state\", Replica.State.DOWN.toString());\n      }\n    }\n\n    cluster.getZkClient().setData(\"/collections/\" + COLLECTION_NAME + \"/state.json\", Utils.toJSON(infectedState)\n        , true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestQueryingOnDownCollection#downAllReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestQueryingOnDownCollection#downAllReplicas().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void downAllReplicas() throws Exception {\n    byte[] collectionState = cluster.getZkClient().getData(\"/collections/\" + COLLECTION_NAME + \"/state.json\",\n        null, null, true);\n\n    Map<String,Map<String,?>> infectedState = (Map<String,Map<String,?>>) Utils.fromJSON(collectionState);\n    Map<String, Object> shards = (Map<String, Object>) infectedState.get(COLLECTION_NAME).get(\"shards\");\n    for(Map.Entry<String, Object> shard: shards.entrySet()) {\n      Map<String, Object> replicas = (Map<String, Object>) ((Map<String, Object>) shard.getValue() ).get(\"replicas\");\n      for (Map.Entry<String, Object> replica : replicas.entrySet()) {\n        ((Map<String, Object>) replica.getValue()).put(\"state\", Replica.State.DOWN.toString());\n      }\n    }\n\n    cluster.getZkClient().setData(\"/collections/\" + COLLECTION_NAME + \"/state.json\", Utils.toJSON(infectedState)\n        , true);\n  }\n\n","sourceOld":"  private void downAllReplicas() throws Exception {\n    byte[] collectionState = cluster.getZkClient().getData(\"/collections/\" + COLLECTION_NAME + \"/state.json\",\n        null, null, true);\n\n    Map<String,Map<String,?>> infectedState = (Map<String,Map<String,?>>) Utils.fromJSON(collectionState);\n    Map<String, Object> shards = (Map<String, Object>) infectedState.get(COLLECTION_NAME).get(\"shards\");\n    for(Map.Entry<String, Object> shard: shards.entrySet()) {\n      Map<String, Object> replicas = (Map<String, Object>) ((Map<String, Object>) shard.getValue() ).get(\"replicas\");\n      for (Map.Entry<String, Object> replica : replicas.entrySet()) {\n        ((Map<String, Object>) replica.getValue()).put(\"state\", Replica.State.DOWN.toString());\n      }\n    }\n\n    cluster.getZkClient().setData(\"/collections/\" + COLLECTION_NAME + \"/state.json\", Utils.toJSON(infectedState)\n        , true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3ce90eebc5ea0ea353b865b3db6dbe0c51fc1710":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["3ce90eebc5ea0ea353b865b3db6dbe0c51fc1710"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3ce90eebc5ea0ea353b865b3db6dbe0c51fc1710"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ce90eebc5ea0ea353b865b3db6dbe0c51fc1710","b0b597c65628ca9e73913a07e81691f8229bae35"],"3ce90eebc5ea0ea353b865b3db6dbe0c51fc1710":["e98520789adb1d5ad05afb4956eca0944a929688","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}