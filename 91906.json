{"path":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#assertLastSearcherOpen(int).mjava","commits":[{"id":"edfb471a48a4bd226eefc6d6fd96195d9ce1db73","date":1260015437,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#assertLastSearcherOpen(int).mjava","pathOld":"/dev/null","sourceNew":"  private void assertLastSearcherOpen(int numSearchers) {\n    assertEquals(numSearchers, searchers.size());\n    IndexSearcher[] searcherArray = searchers.toArray(new IndexSearcher[0]);\n    for (int i = 0; i < searcherArray.length; i++) {\n      if (i == searcherArray.length - 1) {\n        assertTrue(\"expected last searcher open but was closed\",\n            searcherArray[i].getIndexReader().getRefCount() > 0);\n      } else {\n        assertFalse(\"expected closed searcher but was open - Index: \" + i,\n            searcherArray[i].getIndexReader().getRefCount() > 0);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#assertLastSearcherOpen(int).mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#assertLastSearcherOpen(int).mjava","sourceNew":"  private void assertLastSearcherOpen(int numSearchers) {\n    assertEquals(numSearchers, searchers.size());\n    IndexSearcher[] searcherArray = searchers.toArray(new IndexSearcher[0]);\n    for (int i = 0; i < searcherArray.length; i++) {\n      if (i == searcherArray.length - 1) {\n        assertTrue(\"expected last searcher open but was closed\",\n            searcherArray[i].getIndexReader().getRefCount() > 0);\n      } else {\n        assertFalse(\"expected closed searcher but was open - Index: \" + i,\n            searcherArray[i].getIndexReader().getRefCount() > 0);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertLastSearcherOpen(int numSearchers) {\n    assertEquals(numSearchers, searchers.size());\n    IndexSearcher[] searcherArray = searchers.toArray(new IndexSearcher[0]);\n    for (int i = 0; i < searcherArray.length; i++) {\n      if (i == searcherArray.length - 1) {\n        assertTrue(\"expected last searcher open but was closed\",\n            searcherArray[i].getIndexReader().getRefCount() > 0);\n      } else {\n        assertFalse(\"expected closed searcher but was open - Index: \" + i,\n            searcherArray[i].getIndexReader().getRefCount() > 0);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edfb471a48a4bd226eefc6d6fd96195d9ce1db73"],"edfb471a48a4bd226eefc6d6fd96195d9ce1db73":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}