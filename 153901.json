{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testKmeans().mjava","commits":[{"id":"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6","date":1516045834,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testKmeans().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(doc1, doc2, doc3, doc4)),\" +\n        \"               f=kmeans(e, 2),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    //Assert that the docs are not in both clusters\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels1\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n              ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels2\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testKmeans().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(doc1, doc2, doc3, doc4)),\" +\n        \"               f=kmeans(e, 2),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    //Assert that the docs are not in both clusters\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels1\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n              ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels2\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKmeans().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testKmeans().mjava","sourceNew":"  @Test\n  public void testKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(doc1, doc2, doc3, doc4)),\" +\n        \"               f=kmeans(e, 2),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    //Assert that the docs are not in both clusters\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels1\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n        ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels2\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testKmeans() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,1,1,0,0,0),\" +\n        \"               b=array(1,1,1,0,0,0),\" +\n        \"               c=array(0,0,0,1,1,1),\" +\n        \"               d=array(0,0,0,1,1,1),\" +\n        \"               e=setRowLabels(matrix(a,b,c,d), \" +\n        \"                              array(doc1, doc2, doc3, doc4)),\" +\n        \"               f=kmeans(e, 2),\" +\n        \"               g=getCluster(f, 0),\" +\n        \"               h=getCluster(f, 1),\" +\n        \"               i=getCentroids(f),\" +\n        \"               j=getRowLabels(g),\" +\n        \"               k=getRowLabels(h))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cluster1 = (List<List<Number>>)tuples.get(0).get(\"g\");\n    List<List<Number>> cluster2 = (List<List<Number>>)tuples.get(0).get(\"h\");\n    List<List<Number>> centroids = (List<List<Number>>)tuples.get(0).get(\"i\");\n    List<String> labels1 = (List<String>)tuples.get(0).get(\"j\");\n    List<String> labels2 = (List<String>)tuples.get(0).get(\"k\");\n\n    assertEquals(cluster1.size(), 2);\n    assertEquals(cluster2.size(), 2);\n    assertEquals(centroids.size(), 2);\n\n    //Assert that the docs are not in both clusters\n    assertTrue(!(labels1.contains(\"doc1\") && labels2.contains(\"doc1\")));\n    assertTrue(!(labels1.contains(\"doc2\") && labels2.contains(\"doc2\")));\n    assertTrue(!(labels1.contains(\"doc3\") && labels2.contains(\"doc3\")));\n    assertTrue(!(labels1.contains(\"doc4\") && labels2.contains(\"doc4\")));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels1\n    assertTrue((labels1.contains(\"doc1\") && labels1.contains(\"doc2\")) ||\n              ((labels1.contains(\"doc3\") && labels1.contains(\"doc4\"))));\n\n    //Assert that (doc1 and doc2) or (doc3 and doc4) are in labels2\n    assertTrue((labels2.contains(\"doc1\") && labels2.contains(\"doc2\")) ||\n        ((labels2.contains(\"doc3\") && labels2.contains(\"doc4\"))));\n\n    if(labels1.contains(\"doc1\")) {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 0.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 1.0, 0.0);\n    } else {\n      assertEquals(centroids.get(0).get(0).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(1).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(2).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(0).get(3).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(4).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(0).get(5).doubleValue(), 1.0, 0.0);\n\n      assertEquals(centroids.get(1).get(0).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(1).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(2).doubleValue(), 1.0, 0.0);\n      assertEquals(centroids.get(1).get(3).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(4).doubleValue(), 0.0, 0.0);\n      assertEquals(centroids.get(1).get(5).doubleValue(), 0.0, 0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6"],"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}