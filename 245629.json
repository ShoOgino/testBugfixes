{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","commits":[{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,ValueType).mjava","sourceNew":"  private AbstractAllGroupHeadsCollector createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector collector;\n    if (random.nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap(), sortWithinGroup);\n    } else if (canUseIDV && random.nextBoolean()) {\n      boolean diskResident = random.nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","sourceOld":"  private AbstractAllGroupHeadsCollector createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, ValueType valueType) throws IOException {\n    AbstractAllGroupHeadsCollector collector;\n    if (random.nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap(), sortWithinGroup);\n    } else if (canUseIDV && random.nextBoolean()) {\n      boolean diskResident = random.nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,ValueType).mjava","sourceNew":"  private AbstractAllGroupHeadsCollector createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector collector;\n    if (random.nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap(), sortWithinGroup);\n    } else if (canUseIDV && random.nextBoolean()) {\n      boolean diskResident = random.nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","sourceOld":"  private AbstractAllGroupHeadsCollector createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, ValueType valueType) throws IOException {\n    AbstractAllGroupHeadsCollector collector;\n    if (random.nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap(), sortWithinGroup);\n    } else if (canUseIDV && random.nextBoolean()) {\n      boolean diskResident = random.nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"200be48c182b79811a4fed24fd2d2ad852f092cb","date":1331204120,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","sourceNew":"  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector<?> collector;\n    if (random.nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random.nextBoolean()) {\n      boolean diskResident = random.nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","sourceOld":"  private AbstractAllGroupHeadsCollector createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector collector;\n    if (random.nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap(), sortWithinGroup);\n    } else if (canUseIDV && random.nextBoolean()) {\n      boolean diskResident = random.nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fde7d38af1a90c9b08d016021745c83fa7648e28","date":1331215173,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","sourceNew":"  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random.nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random.nextBoolean()) {\n      boolean diskResident = random.nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","sourceOld":"  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector<?> collector;\n    if (random.nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random.nextBoolean()) {\n      boolean diskResident = random.nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","sourceNew":"  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random.nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random.nextBoolean()) {\n      boolean diskResident = random.nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","sourceOld":"  private AbstractAllGroupHeadsCollector createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector collector;\n    if (random.nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap(), sortWithinGroup);\n    } else if (canUseIDV && random.nextBoolean()) {\n      boolean diskResident = random.nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"166661dd25a09458b128e5c0b86e3b762a6ded68","date":1332333666,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random.nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random.nextBoolean()) {\n      boolean diskResident = random.nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","sourceOld":"  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random.nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random.nextBoolean()) {\n      boolean diskResident = random.nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random.nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random.nextBoolean()) {\n      boolean diskResident = random.nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["d638301ad1cfcae567b681b893bc8781f0ee48a5","fde7d38af1a90c9b08d016021745c83fa7648e28"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"200be48c182b79811a4fed24fd2d2ad852f092cb":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"fde7d38af1a90c9b08d016021745c83fa7648e28":["200be48c182b79811a4fed24fd2d2ad852f092cb"],"166661dd25a09458b128e5c0b86e3b762a6ded68":["fde7d38af1a90c9b08d016021745c83fa7648e28"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"200be48c182b79811a4fed24fd2d2ad852f092cb":["fde7d38af1a90c9b08d016021745c83fa7648e28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fde7d38af1a90c9b08d016021745c83fa7648e28":["38e3b736c7ca086d61b7dbb841c905ee115490da","166661dd25a09458b128e5c0b86e3b762a6ded68"],"166661dd25a09458b128e5c0b86e3b762a6ded68":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["38e3b736c7ca086d61b7dbb841c905ee115490da","200be48c182b79811a4fed24fd2d2ad852f092cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}