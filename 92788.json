{"path":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFuncStrdist().mjava","commits":[{"id":"69227e655c7a72315c68e596f0a899f339b1ec2b","date":1340137626,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFuncStrdist().mjava","pathOld":"/dev/null","sourceNew":"  public void testFuncStrdist() throws Exception {\n    SolrQueryRequest req = req(\"myVal\",\"zot\", \"myOtherVal\", \"yak\",\n                               \"myField\",\"foo_s1\");\n    try {\n      assertFuncEquals(req,\n                       \"strdist(\\\"zot\\\",literal('yak'),edit)\", \n                       \"strdist(literal(\\\"zot\\\"),'yak',   edit  )\", \n                       \"strdist(literal($myVal),literal($myOtherVal),edit)\");\n      assertFuncEquals(req,\n                       \"strdist(\\\"zot\\\",literal($myOtherVal),ngram)\", \n                       \"strdist(\\\"zot\\\",'yak', ngram, 2)\");\n      assertFuncEquals(req,\n                       \"strdist(field('foo_s1'),literal($myOtherVal),jw)\", \n                       \"strdist(field($myField),\\\"yak\\\",jw)\", \n                       \"strdist($myField,'yak', jw)\");\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0","date":1576656084,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFuncStrdist().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFuncStrdist().mjava","sourceNew":"  public void testFuncStrdist() throws Exception {\n    SolrQueryRequest req = req(\"myVal\",\"zot\", \"myOtherVal\", \"yak\",\n                               \"myField\",\"foo_s1\");\n    try {\n      assertFuncEquals(req,\n                       \"strdist(\\\"zot\\\",literal('yak'),edit)\",\n                       \"strdist(literal(\\\"zot\\\"),'yak',   edit  )\",\n                       \"strdist(literal($myVal),literal($myOtherVal),edit)\");\n      assertFuncEquals(req,\n                       \"strdist(\\\"zot\\\",literal($myOtherVal),ngram)\",\n                       \"strdist(\\\"zot\\\",'yak', ngram, 2)\");\n      assertFuncEquals(req,\n                       \"strdist(field('foo_s1'),literal($myOtherVal),jw)\",\n                       \"strdist(field($myField),\\\"yak\\\",jw)\",\n                       \"strdist($myField,'yak', jw)\");\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testFuncStrdist() throws Exception {\n    SolrQueryRequest req = req(\"myVal\",\"zot\", \"myOtherVal\", \"yak\",\n                               \"myField\",\"foo_s1\");\n    try {\n      assertFuncEquals(req,\n                       \"strdist(\\\"zot\\\",literal('yak'),edit)\", \n                       \"strdist(literal(\\\"zot\\\"),'yak',   edit  )\", \n                       \"strdist(literal($myVal),literal($myOtherVal),edit)\");\n      assertFuncEquals(req,\n                       \"strdist(\\\"zot\\\",literal($myOtherVal),ngram)\", \n                       \"strdist(\\\"zot\\\",'yak', ngram, 2)\");\n      assertFuncEquals(req,\n                       \"strdist(field('foo_s1'),literal($myOtherVal),jw)\", \n                       \"strdist(field($myField),\\\"yak\\\",jw)\", \n                       \"strdist($myField,'yak', jw)\");\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFuncStrdist().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFuncStrdist().mjava","sourceNew":"  public void testFuncStrdist() throws Exception {\n    SolrQueryRequest req = req(\"myVal\",\"zot\", \"myOtherVal\", \"yak\",\n                               \"myField\",\"foo_s1\");\n    try {\n      assertFuncEquals(req,\n                       \"strdist(\\\"zot\\\",literal('yak'),edit)\",\n                       \"strdist(literal(\\\"zot\\\"),'yak',   edit  )\",\n                       \"strdist(literal($myVal),literal($myOtherVal),edit)\");\n      assertFuncEquals(req,\n                       \"strdist(\\\"zot\\\",literal($myOtherVal),ngram)\",\n                       \"strdist(\\\"zot\\\",'yak', ngram, 2)\");\n      assertFuncEquals(req,\n                       \"strdist(field('foo_s1'),literal($myOtherVal),jw)\",\n                       \"strdist(field($myField),\\\"yak\\\",jw)\",\n                       \"strdist($myField,'yak', jw)\");\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testFuncStrdist() throws Exception {\n    SolrQueryRequest req = req(\"myVal\",\"zot\", \"myOtherVal\", \"yak\",\n                               \"myField\",\"foo_s1\");\n    try {\n      assertFuncEquals(req,\n                       \"strdist(\\\"zot\\\",literal('yak'),edit)\", \n                       \"strdist(literal(\\\"zot\\\"),'yak',   edit  )\", \n                       \"strdist(literal($myVal),literal($myOtherVal),edit)\");\n      assertFuncEquals(req,\n                       \"strdist(\\\"zot\\\",literal($myOtherVal),ngram)\", \n                       \"strdist(\\\"zot\\\",'yak', ngram, 2)\");\n      assertFuncEquals(req,\n                       \"strdist(field('foo_s1'),literal($myOtherVal),jw)\", \n                       \"strdist(field($myField),\\\"yak\\\",jw)\", \n                       \"strdist($myField,'yak', jw)\");\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["69227e655c7a72315c68e596f0a899f339b1ec2b","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"69227e655c7a72315c68e596f0a899f339b1ec2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["69227e655c7a72315c68e596f0a899f339b1ec2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"69227e655c7a72315c68e596f0a899f339b1ec2b":["246314af59d76a47fccc31e9494eefee01ec9c00","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69227e655c7a72315c68e596f0a899f339b1ec2b"],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}