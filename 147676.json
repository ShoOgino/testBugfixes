{"path":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.TermFacet#randomLimitParam(Random,String).mjava","commits":[{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.TermFacet#randomLimitParam(Random,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG.TermFacet#randomLimitParam(Random,String).mjava","sourceNew":"    /**\n     * picks a random value for the \"limit\" param, biased in favor of interesting test cases\n     *\n     * <p>\n     * <b>NOTE:</b> Due to SOLR-12556, we have to force an overrequest of \"all\" possible terms for \n     * some sort values.\n     * </p>\n     *\n     * @return a number to specify in the request, or null to specify nothing (trigger default behavior)\n     * @see #UNIQUE_FIELD_VALS\n     * @see #randomSortParam\n     */\n    public static Integer randomLimitParam(Random r, final String sort) {\n      if (null != sort) {\n        if (sort.equals(\"count asc\") || sort.startsWith(\"skg\")) {\n          // of the known types of sorts produced, these are at risk of SOLR-12556\n          // so request (effectively) unlimited num buckets\n          return r.nextBoolean() ? UNIQUE_FIELD_VALS : -1;\n        }\n      }\n      final int limit = 1 + r.nextInt((int) (UNIQUE_FIELD_VALS * 1.5F));\n      if (limit >= UNIQUE_FIELD_VALS && r.nextBoolean()) {\n        return -1; // unlimited\n      } else if (limit == DEFAULT_LIMIT && r.nextBoolean()) { \n        return null; // sometimes, don't specify limit if it's the default\n      }\n      return limit;\n    }\n\n","sourceOld":"    /**\n     * picks a random value for the \"limit\" param, biased in favor of interesting test cases\n     *\n     * <p>\n     * <b>NOTE:</b> Due to SOLR-12556, we have to force an overrequest of \"all\" possible terms for \n     * some sort values.\n     * </p>\n     *\n     * @return a number to specify in the request, or null to specify nothing (trigger default behavior)\n     * @see #UNIQUE_FIELD_VALS\n     * @see #randomSortParam\n     */\n    public static Integer randomLimitParam(Random r, final String sort) {\n      if (null != sort) {\n        if (sort.equals(\"count asc\") || sort.startsWith(\"skg\")) {\n          // of the known types of sorts produced, these are at risk of SOLR-12556\n          // so request (effectively) unlimited num buckets\n          return r.nextBoolean() ? UNIQUE_FIELD_VALS : -1;\n        }\n      }\n      final int limit = 1 + r.nextInt((int) (UNIQUE_FIELD_VALS * 1.5F));\n      if (limit >= UNIQUE_FIELD_VALS && r.nextBoolean()) {\n        return -1; // unlimited\n      } else if (limit == DEFAULT_LIMIT && r.nextBoolean()) { \n        return null; // sometimes, don't specify limit if it's the default\n      }\n      return limit;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92910727264a23a47b7a6c94b0f75d655537b9ea"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}