{"path":"src/java/org/apache/lucene/index/TermsHashPerField#postingEquals(char[],int).mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermsHashPerField#postingEquals(char[],int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriterFieldData#postingEquals(char[],int).mjava","sourceNew":"  /** Test whether the text for current RawPostingList p equals\n   *  current tokenText. */\n  private boolean postingEquals(final char[] tokenText, final int tokenTextLen) {\n\n    final char[] text = perThread.charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    assert text != null;\n    int pos = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    int tokenPos = 0;\n    for(;tokenPos<tokenTextLen;pos++,tokenPos++)\n      if (tokenText[tokenPos] != text[pos])\n        return false;\n    return 0xffff == text[pos];\n  }\n\n","sourceOld":"  /** Test whether the text for current Posting p equals\n   *  current tokenText. */\n  boolean postingEquals(final char[] tokenText, final int tokenTextLen) {\n\n    final char[] text = threadState.charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    assert text != null;\n    int pos = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    int tokenPos = 0;\n    for(;tokenPos<tokenTextLen;pos++,tokenPos++)\n      if (tokenText[tokenPos] != text[pos])\n        return false;\n    return 0xffff == text[pos];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#postingEquals(char[],int).mjava","pathOld":"src/java/org/apache/lucene/index/TermsHashPerField#postingEquals(char[],int).mjava","sourceNew":"  /** Test whether the text for current RawPostingList p equals\n   *  current tokenText. */\n  private boolean postingEquals(final char[] tokenText, final int tokenTextLen) {\n\n    final char[] text = perThread.charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    assert text != null;\n    int pos = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    int tokenPos = 0;\n    for(;tokenPos<tokenTextLen;pos++,tokenPos++)\n      if (tokenText[tokenPos] != text[pos])\n        return false;\n    return 0xffff == text[pos];\n  }\n\n","sourceOld":"  /** Test whether the text for current RawPostingList p equals\n   *  current tokenText. */\n  private boolean postingEquals(final char[] tokenText, final int tokenTextLen) {\n\n    final char[] text = perThread.charPool.buffers[p.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n    assert text != null;\n    int pos = p.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n    int tokenPos = 0;\n    for(;tokenPos<tokenTextLen;pos++,tokenPos++)\n      if (tokenText[tokenPos] != text[pos])\n        return false;\n    return 0xffff == text[pos];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5350389bf83287111f7760b9e3db3af8e3648474"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}