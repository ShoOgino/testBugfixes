{"path":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.TopLevelReplicaListTransformer#transform(List[#]).mjava","commits":[{"id":"78d42a7a80ee59932aca8a1fe42b53cf202e75ad","date":1566412272,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.TopLevelReplicaListTransformer#transform(List[#]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void transform(List<?> choices) {\n      if (choices.size() > 1) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applying the following sorting preferences to replicas: {}\",\n              Arrays.toString(replicaComp.preferenceRules.toArray()));\n        }\n\n        // First, sort according to comparator rules.\n        try {\n          choices.sort(replicaComp);\n        } catch (IllegalArgumentException iae) {\n          throw new SolrException(\n              SolrException.ErrorCode.BAD_REQUEST,\n              iae.getMessage()\n          );\n        }\n\n        // Next determine all boundaries between replicas ranked as \"equivalent\" by the comparator\n        Iterator<?> iter = choices.iterator();\n        Object prev = iter.next();\n        Object current;\n        int idx = 1;\n        int boundaryCount = 0;\n        int[] boundaries = new int[choices.size() - 1];\n        do {\n          current = iter.next();\n          if (replicaComp.compare(prev, current) != 0) {\n            boundaries[boundaryCount++] = idx;\n          }\n          prev = current;\n          idx++;\n        } while (iter.hasNext());\n\n        // Finally inspect boundaries to apply base transformation, where necessary (separate phase to avoid ConcurrentModificationException)\n        int startIdx = 0;\n        int endIdx;\n        for (int i = 0; i < boundaryCount; i++) {\n          endIdx = boundaries[i];\n          if (endIdx - startIdx > 1) {\n            baseReplicaListTransformer.transform(choices.subList(startIdx, endIdx));\n          }\n          startIdx = endIdx;\n        }\n\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applied sorting preferences to replica list: {}\",\n              Arrays.toString(choices.toArray()));\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGenerator.TopLevelReplicaListTransformer#transform(List[#]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.TopLevelReplicaListTransformer#transform(List[#]).mjava","sourceNew":"    @Override\n    public void transform(List<?> choices) {\n      if (choices.size() > 1) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applying the following sorting preferences to replicas: {}\",\n              Arrays.toString(replicaComp.getPreferenceRules().toArray()));\n        }\n\n        // First, sort according to comparator rules.\n        try {\n          choices.sort(replicaComp);\n        } catch (IllegalArgumentException iae) {\n          throw new SolrException(\n              ErrorCode.BAD_REQUEST,\n              iae.getMessage()\n          );\n        }\n\n        // Next determine all boundaries between replicas ranked as \"equivalent\" by the comparator\n        Iterator<?> iter = choices.iterator();\n        Object prev = iter.next();\n        Object current;\n        int idx = 1;\n        int boundaryCount = 0;\n        int[] boundaries = new int[choices.size() - 1];\n        do {\n          current = iter.next();\n          if (replicaComp.compare(prev, current) != 0) {\n            boundaries[boundaryCount++] = idx;\n          }\n          prev = current;\n          idx++;\n        } while (iter.hasNext());\n\n        // Finally inspect boundaries to apply base transformation, where necessary (separate phase to avoid ConcurrentModificationException)\n        int startIdx = 0;\n        int endIdx;\n        for (int i = 0; i < boundaryCount; i++) {\n          endIdx = boundaries[i];\n          if (endIdx - startIdx > 1) {\n            baseReplicaListTransformer.transform(choices.subList(startIdx, endIdx));\n          }\n          startIdx = endIdx;\n        }\n\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applied sorting preferences to replica list: {}\",\n              Arrays.toString(choices.toArray()));\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void transform(List<?> choices) {\n      if (choices.size() > 1) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applying the following sorting preferences to replicas: {}\",\n              Arrays.toString(replicaComp.preferenceRules.toArray()));\n        }\n\n        // First, sort according to comparator rules.\n        try {\n          choices.sort(replicaComp);\n        } catch (IllegalArgumentException iae) {\n          throw new SolrException(\n              SolrException.ErrorCode.BAD_REQUEST,\n              iae.getMessage()\n          );\n        }\n\n        // Next determine all boundaries between replicas ranked as \"equivalent\" by the comparator\n        Iterator<?> iter = choices.iterator();\n        Object prev = iter.next();\n        Object current;\n        int idx = 1;\n        int boundaryCount = 0;\n        int[] boundaries = new int[choices.size() - 1];\n        do {\n          current = iter.next();\n          if (replicaComp.compare(prev, current) != 0) {\n            boundaries[boundaryCount++] = idx;\n          }\n          prev = current;\n          idx++;\n        } while (iter.hasNext());\n\n        // Finally inspect boundaries to apply base transformation, where necessary (separate phase to avoid ConcurrentModificationException)\n        int startIdx = 0;\n        int endIdx;\n        for (int i = 0; i < boundaryCount; i++) {\n          endIdx = boundaries[i];\n          if (endIdx - startIdx > 1) {\n            baseReplicaListTransformer.transform(choices.subList(startIdx, endIdx));\n          }\n          startIdx = endIdx;\n        }\n\n        if (log.isDebugEnabled()) {\n          log.debug(\"Applied sorting preferences to replica list: {}\",\n              Arrays.toString(choices.toArray()));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["78d42a7a80ee59932aca8a1fe42b53cf202e75ad"],"78d42a7a80ee59932aca8a1fe42b53cf202e75ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["833432c363468a5df50f87446a68015404b1fbcf"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"78d42a7a80ee59932aca8a1fe42b53cf202e75ad":["833432c363468a5df50f87446a68015404b1fbcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78d42a7a80ee59932aca8a1fe42b53cf202e75ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}