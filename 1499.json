{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","commits":[{"id":"4ef0bc276292640209b4a2a0cb33ebdab85e1a5b","date":1143666100,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","pathOld":"/dev/null","sourceNew":"\tpublic void testGetBestFragmentsFilteredQuery() throws Exception\n\t{\n\t\tRangeFilter rf=new RangeFilter(\"contents\",\"john\",\"john\",true,true);\n\t\tSpanQuery clauses[]={\n\t\t\t\tnew SpanTermQuery(new Term(\"contents\",\"john\")),\n\t\t\t\tnew SpanTermQuery(new Term(\"contents\",\"kennedy\")),\n\t\t\t\t}; \n\t\tSpanNearQuery snq=new SpanNearQuery(clauses,1,true);\n\t\tFilteredQuery fq=new FilteredQuery(snq,rf);\n\t\t\n\t\tdoSearching(fq);\n\t\tdoStandardHighlights();\n\t\t//Currently highlights \"John\" and \"Kennedy\" separately\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 2);\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","sourceNew":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        RangeFilter rf = new RangeFilter(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"\tpublic void testGetBestFragmentsFilteredQuery() throws Exception\n\t{\n\t\tRangeFilter rf=new RangeFilter(\"contents\",\"john\",\"john\",true,true);\n\t\tSpanQuery clauses[]={\n\t\t\t\tnew SpanTermQuery(new Term(\"contents\",\"john\")),\n\t\t\t\tnew SpanTermQuery(new Term(\"contents\",\"kennedy\")),\n\t\t\t\t}; \n\t\tSpanNearQuery snq=new SpanNearQuery(clauses,1,true);\n\t\tFilteredQuery fq=new FilteredQuery(snq,rf);\n\t\t\n\t\tdoSearching(fq);\n\t\tdoStandardHighlights();\n\t\t//Currently highlights \"John\" and \"Kennedy\" separately\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 2);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","sourceNew":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = new TermRangeFilter(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        RangeFilter rf = new RangeFilter(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","sourceNew":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = new TermRangeFilter(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = new TermRangeFilter(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","sourceNew":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = new TermRangeFilter(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = new TermRangeFilter(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsFilteredQuery().mjava","sourceNew":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = new TermRangeFilter(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsFilteredQuery() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        TermRangeFilter rf = new TermRangeFilter(\"contents\", \"john\", \"john\", true, true);\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        FilteredQuery fq = new FilteredQuery(snq, rf);\n\n        doSearching(fq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["296b8b38a87feb478921f77834a2302dfe77641c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"4ef0bc276292640209b4a2a0cb33ebdab85e1a5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"296b8b38a87feb478921f77834a2302dfe77641c":["4ef0bc276292640209b4a2a0cb33ebdab85e1a5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ef0bc276292640209b4a2a0cb33ebdab85e1a5b"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4ef0bc276292640209b4a2a0cb33ebdab85e1a5b":["296b8b38a87feb478921f77834a2302dfe77641c"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"296b8b38a87feb478921f77834a2302dfe77641c":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}