{"path":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    RrdDb db = new RrdDb(createDef(), factory);\n    List<String> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0));\n    timeSource.sleep(2000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = ((Date)doc.getFieldValue(\"timestamp\")).getTime();\n    timeSource.sleep(2000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    long firstTimestamp = TimeUnit.SECONDS.convert(timestamp, TimeUnit.MILLISECONDS);\n    long lastTimestamp = firstTimestamp + 60;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTimestamp);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTimestamp = lastTimestamp + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = ((Date)newDoc.getFieldValue(\"timestamp\")).getTime();\n    assertNotSame(newTimestamp, timestamp);\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, firstTimestamp + 60, lastTimestamp - 60, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    assertEquals(\"one\", 101, one.length);\n    assertEquals(Double.NaN, one[0], 0.00001);\n    assertEquals(Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(1.0, one[i], 0.00001);\n    }\n    double[] two = fd.getValues(\"two\");\n    assertEquals(Double.NaN, two[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(\"wrong value at pos \" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0));\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTimestamp);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = ((Date)newDoc.getFieldValue(\"timestamp\")).getTime();\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, firstTimestamp + 60, lastTimestamp, 60);\n    fd = fr.fetchData();\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one\", 102, one.length);\n    assertEquals(Double.NaN, one[0], 0.00001);\n    assertEquals(Double.NaN, one[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(1.0, one[i], 0.00001);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(Double.NaN, two[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(100.0, two[i], 0.00001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTimestamp + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = ((Date)newDoc.getFieldValue(\"timestamp\")).getTime();\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f0f2472d437d44ec2144932e1d13fb494e82a3","date":1528403207,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    RrdDb db = new RrdDb(createDef(), factory);\n    List<Pair<String, Long>> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n    timeSource.sleep(2000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = (Long)doc.getFieldValue(\"timestamp_l\");\n    timeSource.sleep(2000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    long firstTimestamp = TimeUnit.SECONDS.convert(timestamp, TimeUnit.MILLISECONDS);\n    long lastTimestamp = firstTimestamp + 60;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTimestamp);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTimestamp = lastTimestamp + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, firstTimestamp + 60, lastTimestamp - 60, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    assertEquals(\"one\", 101, one.length);\n    assertEquals(Double.NaN, one[0], 0.00001);\n    assertEquals(Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(1.0, one[i], 0.00001);\n    }\n    double[] two = fd.getValues(\"two\");\n    assertEquals(Double.NaN, two[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(\"wrong value at pos \" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTimestamp);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, firstTimestamp + 60, lastTimestamp, 60);\n    fd = fr.fetchData();\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one\", 102, one.length);\n    assertEquals(Double.NaN, one[0], 0.00001);\n    assertEquals(Double.NaN, one[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(1.0, one[i], 0.00001);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(Double.NaN, two[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(100.0, two[i], 0.00001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTimestamp + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    RrdDb db = new RrdDb(createDef(), factory);\n    List<String> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0));\n    timeSource.sleep(2000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = ((Date)doc.getFieldValue(\"timestamp\")).getTime();\n    timeSource.sleep(2000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    long firstTimestamp = TimeUnit.SECONDS.convert(timestamp, TimeUnit.MILLISECONDS);\n    long lastTimestamp = firstTimestamp + 60;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTimestamp);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTimestamp = lastTimestamp + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = ((Date)newDoc.getFieldValue(\"timestamp\")).getTime();\n    assertNotSame(newTimestamp, timestamp);\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, firstTimestamp + 60, lastTimestamp - 60, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    assertEquals(\"one\", 101, one.length);\n    assertEquals(Double.NaN, one[0], 0.00001);\n    assertEquals(Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(1.0, one[i], 0.00001);\n    }\n    double[] two = fd.getValues(\"two\");\n    assertEquals(Double.NaN, two[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(\"wrong value at pos \" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0));\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTimestamp);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = ((Date)newDoc.getFieldValue(\"timestamp\")).getTime();\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, firstTimestamp + 60, lastTimestamp, 60);\n    fd = fr.fetchData();\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one\", 102, one.length);\n    assertEquals(Double.NaN, one[0], 0.00001);\n    assertEquals(Double.NaN, one[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(1.0, one[i], 0.00001);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(Double.NaN, two[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(100.0, two[i], 0.00001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTimestamp + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = ((Date)newDoc.getFieldValue(\"timestamp\")).getTime();\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","bugFix":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a62ebeb413c3f10ba3484c756e3d35563ff95a9","date":1528712587,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    long startTime = 1000000000;\n    RrdDb db = new RrdDb(createDef(startTime), factory);\n    List<Pair<String, Long>> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n    timeSource.sleep(2000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = (Long)doc.getFieldValue(\"timestamp_l\");\n    timeSource.sleep(2000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    // make sure the update doesn't race with the sampling boundaries\n    long lastTime = startTime + 30;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTime);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTime = lastTime + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    // don't race with the sampling boundary\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime - 20, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    double[] two = fd.getValues(\"two\");\n    String dump = dumpData(db, fd);\n    assertEquals(\"one: \" + dump, 101, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(dump + \"\\npos=\" + i, 1.0, one[i], 0.00001);\n    }\n    assertEquals(\"two: \" + dump, Double.NaN, two[100], 0.00001);\n    for (int i = 0; i < 100; i++) {\n      assertEquals(dump + \"\\ntwo pos=\" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTime);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime + 20, 60);\n    fd = fr.fetchData();\n    dump = dumpData(db, fd);\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one: \" + dump, 102, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 1.0, one[i], 0.00001);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(\"two: \" + dump, Double.NaN, two[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 100.0, two[i], 0.00001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTime + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    RrdDb db = new RrdDb(createDef(), factory);\n    List<Pair<String, Long>> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n    timeSource.sleep(2000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = (Long)doc.getFieldValue(\"timestamp_l\");\n    timeSource.sleep(2000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    long firstTimestamp = TimeUnit.SECONDS.convert(timestamp, TimeUnit.MILLISECONDS);\n    long lastTimestamp = firstTimestamp + 60;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTimestamp);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTimestamp = lastTimestamp + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, firstTimestamp + 60, lastTimestamp - 60, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    assertEquals(\"one\", 101, one.length);\n    assertEquals(Double.NaN, one[0], 0.00001);\n    assertEquals(Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(1.0, one[i], 0.00001);\n    }\n    double[] two = fd.getValues(\"two\");\n    assertEquals(Double.NaN, two[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(\"wrong value at pos \" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTimestamp);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, firstTimestamp + 60, lastTimestamp, 60);\n    fd = fr.fetchData();\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one\", 102, one.length);\n    assertEquals(Double.NaN, one[0], 0.00001);\n    assertEquals(Double.NaN, one[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(1.0, one[i], 0.00001);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(Double.NaN, two[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(100.0, two[i], 0.00001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTimestamp + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d6f92dfa9251d9da6d80ec5963a9cbecc90180","date":1530559969,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testBasic() throws Exception {\n    long startTime = 1000000000;\n    RrdDb db = new RrdDb(createDef(startTime), factory);\n    List<Pair<String, Long>> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n    timeSource.sleep(2000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = (Long)doc.getFieldValue(\"timestamp_l\");\n    timeSource.sleep(2000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    // make sure the update doesn't race with the sampling boundaries\n    long lastTime = startTime + 30;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTime);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTime = lastTime + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    // don't race with the sampling boundary\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime - 20, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    double[] two = fd.getValues(\"two\");\n    String dump = dumpData(db, fd);\n    assertEquals(\"one: \" + dump, 101, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(dump + \"\\npos=\" + i, 1.0, one[i], 0.00001);\n    }\n    assertEquals(\"two: \" + dump, Double.NaN, two[100], 0.00001);\n    for (int i = 0; i < 100; i++) {\n      assertEquals(dump + \"\\ntwo pos=\" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTime);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime + 20, 60);\n    fd = fr.fetchData();\n    dump = dumpData(db, fd);\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one: \" + dump, 102, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 1.0, one[i], 0.00001);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(\"two: \" + dump, Double.NaN, two[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 100.0, two[i], 0.00001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTime + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    long startTime = 1000000000;\n    RrdDb db = new RrdDb(createDef(startTime), factory);\n    List<Pair<String, Long>> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n    timeSource.sleep(2000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = (Long)doc.getFieldValue(\"timestamp_l\");\n    timeSource.sleep(2000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    // make sure the update doesn't race with the sampling boundaries\n    long lastTime = startTime + 30;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTime);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTime = lastTime + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    // don't race with the sampling boundary\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime - 20, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    double[] two = fd.getValues(\"two\");\n    String dump = dumpData(db, fd);\n    assertEquals(\"one: \" + dump, 101, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(dump + \"\\npos=\" + i, 1.0, one[i], 0.00001);\n    }\n    assertEquals(\"two: \" + dump, Double.NaN, two[100], 0.00001);\n    for (int i = 0; i < 100; i++) {\n      assertEquals(dump + \"\\ntwo pos=\" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTime);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime + 20, 60);\n    fd = fr.fetchData();\n    dump = dumpData(db, fd);\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one: \" + dump, 102, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 1.0, one[i], 0.00001);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(\"two: \" + dump, Double.NaN, two[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 100.0, two[i], 0.00001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTime + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testBasic() throws Exception {\n    long startTime = 1000000000;\n    RrdDb db = new RrdDb(createDef(startTime), factory);\n    List<Pair<String, Long>> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n    timeSource.sleep(2000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = (Long)doc.getFieldValue(\"timestamp_l\");\n    timeSource.sleep(2000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    // make sure the update doesn't race with the sampling boundaries\n    long lastTime = startTime + 30;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTime);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTime = lastTime + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    // don't race with the sampling boundary\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime - 20, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    double[] two = fd.getValues(\"two\");\n    String dump = dumpData(db, fd);\n    assertEquals(\"one: \" + dump, 101, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(dump + \"\\npos=\" + i, 1.0, one[i], 0.00001);\n    }\n    assertEquals(\"two: \" + dump, Double.NaN, two[100], 0.00001);\n    for (int i = 0; i < 100; i++) {\n      assertEquals(dump + \"\\ntwo pos=\" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTime);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime + 20, 60);\n    fd = fr.fetchData();\n    dump = dumpData(db, fd);\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one: \" + dump, 102, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 1.0, one[i], 0.00001);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(\"two: \" + dump, Double.NaN, two[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 100.0, two[i], 0.00001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTime + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    RrdDb db = new RrdDb(createDef(), factory);\n    List<String> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0));\n    timeSource.sleep(2000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = ((Date)doc.getFieldValue(\"timestamp\")).getTime();\n    timeSource.sleep(2000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    long firstTimestamp = TimeUnit.SECONDS.convert(timestamp, TimeUnit.MILLISECONDS);\n    long lastTimestamp = firstTimestamp + 60;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTimestamp);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTimestamp = lastTimestamp + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = ((Date)newDoc.getFieldValue(\"timestamp\")).getTime();\n    assertNotSame(newTimestamp, timestamp);\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, firstTimestamp + 60, lastTimestamp - 60, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    assertEquals(\"one\", 101, one.length);\n    assertEquals(Double.NaN, one[0], 0.00001);\n    assertEquals(Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(1.0, one[i], 0.00001);\n    }\n    double[] two = fd.getValues(\"two\");\n    assertEquals(Double.NaN, two[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(\"wrong value at pos \" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0));\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTimestamp);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = ((Date)newDoc.getFieldValue(\"timestamp\")).getTime();\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, firstTimestamp + 60, lastTimestamp, 60);\n    fd = fr.fetchData();\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one\", 102, one.length);\n    assertEquals(Double.NaN, one[0], 0.00001);\n    assertEquals(Double.NaN, one[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(1.0, one[i], 0.00001);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(Double.NaN, two[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(100.0, two[i], 0.00001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTimestamp + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = ((Date)newDoc.getFieldValue(\"timestamp\")).getTime();\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testBasic() throws Exception {\n    long startTime = 1000000000;\n    RrdDb db = new RrdDb(createDef(startTime), factory);\n    List<Pair<String, Long>> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n    timeSource.sleep(2000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = (Long)doc.getFieldValue(\"timestamp_l\");\n    timeSource.sleep(2000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    // make sure the update doesn't race with the sampling boundaries\n    long lastTime = startTime + 30;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTime);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTime = lastTime + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    // don't race with the sampling boundary\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime - 20, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    double[] two = fd.getValues(\"two\");\n    String dump = dumpData(db, fd);\n    assertEquals(\"one: \" + dump, 101, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(dump + \"\\npos=\" + i, 1.0, one[i], 0.00001);\n    }\n    assertEquals(\"two: \" + dump, Double.NaN, two[100], 0.00001);\n    for (int i = 0; i < 100; i++) {\n      assertEquals(dump + \"\\ntwo pos=\" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTime);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime + 20, 60);\n    fd = fr.fetchData();\n    dump = dumpData(db, fd);\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one: \" + dump, 102, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 1.0, one[i], 0.00001);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(\"two: \" + dump, Double.NaN, two[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 100.0, two[i], 0.00001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTime + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    RrdDb db = new RrdDb(createDef(), factory);\n    List<String> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0));\n    timeSource.sleep(2000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = ((Date)doc.getFieldValue(\"timestamp\")).getTime();\n    timeSource.sleep(2000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    long firstTimestamp = TimeUnit.SECONDS.convert(timestamp, TimeUnit.MILLISECONDS);\n    long lastTimestamp = firstTimestamp + 60;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTimestamp);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTimestamp = lastTimestamp + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = ((Date)newDoc.getFieldValue(\"timestamp\")).getTime();\n    assertNotSame(newTimestamp, timestamp);\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, firstTimestamp + 60, lastTimestamp - 60, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    assertEquals(\"one\", 101, one.length);\n    assertEquals(Double.NaN, one[0], 0.00001);\n    assertEquals(Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(1.0, one[i], 0.00001);\n    }\n    double[] two = fd.getValues(\"two\");\n    assertEquals(Double.NaN, two[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(\"wrong value at pos \" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0));\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTimestamp);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = ((Date)newDoc.getFieldValue(\"timestamp\")).getTime();\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, firstTimestamp + 60, lastTimestamp, 60);\n    fd = fr.fetchData();\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one\", 102, one.length);\n    assertEquals(Double.NaN, one[0], 0.00001);\n    assertEquals(Double.NaN, one[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(1.0, one[i], 0.00001);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(Double.NaN, two[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(100.0, two[i], 0.00001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTimestamp + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = ((Date)newDoc.getFieldValue(\"timestamp\")).getTime();\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2d6b868457b26b5a2145b8441b1cfcfc0692b02","date":1534307099,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testBasic() throws Exception {\n    long startTime = 1000000000;\n    RrdDb db = new RrdDb(createDef(startTime), factory);\n    List<Pair<String, Long>> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n    timeSource.sleep(2000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = (Long)doc.getFieldValue(\"timestamp_l\");\n    timeSource.sleep(2000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    // make sure the update doesn't race with the sampling boundaries\n    long lastTime = startTime + 30;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTime);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTime = lastTime + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    // don't race with the sampling boundary\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime - 20, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    double[] two = fd.getValues(\"two\");\n    String dump = dumpData(db, fd);\n    assertEquals(\"one: \" + dump, 101, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(dump + \"\\npos=\" + i, 1.0, one[i], 0.00001);\n    }\n    assertEquals(\"two: \" + dump, Double.NaN, two[100], 0.00001);\n    for (int i = 0; i < 100; i++) {\n      assertEquals(dump + \"\\ntwo pos=\" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTime);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime + 20, 60);\n    fd = fr.fetchData();\n    dump = dumpData(db, fd);\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one: \" + dump, 102, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 1.0, one[i], 0.00001);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(\"two: \" + dump, Double.NaN, two[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 100.0, two[i], 0.00001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTime + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testBasic() throws Exception {\n    long startTime = 1000000000;\n    RrdDb db = new RrdDb(createDef(startTime), factory);\n    List<Pair<String, Long>> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n    timeSource.sleep(2000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = (Long)doc.getFieldValue(\"timestamp_l\");\n    timeSource.sleep(2000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    // make sure the update doesn't race with the sampling boundaries\n    long lastTime = startTime + 30;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTime);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTime = lastTime + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    // don't race with the sampling boundary\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime - 20, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    double[] two = fd.getValues(\"two\");\n    String dump = dumpData(db, fd);\n    assertEquals(\"one: \" + dump, 101, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(dump + \"\\npos=\" + i, 1.0, one[i], 0.00001);\n    }\n    assertEquals(\"two: \" + dump, Double.NaN, two[100], 0.00001);\n    for (int i = 0; i < 100; i++) {\n      assertEquals(dump + \"\\ntwo pos=\" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTime);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime + 20, 60);\n    fd = fr.fetchData();\n    dump = dumpData(db, fd);\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one: \" + dump, 102, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 1.0, one[i], 0.00001);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(\"two: \" + dump, Double.NaN, two[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 100.0, two[i], 0.00001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTime + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","date":1536291831,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 6-Sep-2018\n  public void testBasic() throws Exception {\n    long startTime = 1000000000;\n    RrdDb db = new RrdDb(createDef(startTime), factory);\n    List<Pair<String, Long>> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n    timeSource.sleep(2000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = (Long)doc.getFieldValue(\"timestamp_l\");\n    timeSource.sleep(2000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    // make sure the update doesn't race with the sampling boundaries\n    long lastTime = startTime + 30;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTime);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTime = lastTime + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    // don't race with the sampling boundary\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime - 20, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    double[] two = fd.getValues(\"two\");\n    String dump = dumpData(db, fd);\n    assertEquals(\"one: \" + dump, 101, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(dump + \"\\npos=\" + i, 1.0, one[i], 0.00001);\n    }\n    assertEquals(\"two: \" + dump, Double.NaN, two[100], 0.00001);\n    for (int i = 0; i < 100; i++) {\n      assertEquals(dump + \"\\ntwo pos=\" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTime);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime + 20, 60);\n    fd = fr.fetchData();\n    dump = dumpData(db, fd);\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one: \" + dump, 102, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 1.0, one[i], 0.00001);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(\"two: \" + dump, Double.NaN, two[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 100.0, two[i], 0.00001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTime + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testBasic() throws Exception {\n    long startTime = 1000000000;\n    RrdDb db = new RrdDb(createDef(startTime), factory);\n    List<Pair<String, Long>> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n    timeSource.sleep(2000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = (Long)doc.getFieldValue(\"timestamp_l\");\n    timeSource.sleep(2000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    // make sure the update doesn't race with the sampling boundaries\n    long lastTime = startTime + 30;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTime);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTime = lastTime + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    // don't race with the sampling boundary\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime - 20, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    double[] two = fd.getValues(\"two\");\n    String dump = dumpData(db, fd);\n    assertEquals(\"one: \" + dump, 101, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(dump + \"\\npos=\" + i, 1.0, one[i], 0.00001);\n    }\n    assertEquals(\"two: \" + dump, Double.NaN, two[100], 0.00001);\n    for (int i = 0; i < 100; i++) {\n      assertEquals(dump + \"\\ntwo pos=\" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTime);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime + 20, 60);\n    fd = fr.fetchData();\n    dump = dumpData(db, fd);\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one: \" + dump, 102, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 1.0, one[i], 0.00001);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(\"two: \" + dump, Double.NaN, two[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 100.0, two[i], 0.00001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTime + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06652af5b45a8dc038dc5cfa27e5a501f6dd03ba","date":1544417719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 6-Sep-2018\n  public void testBasic() throws Exception {\n    long startTime = 1000000000;\n    RrdDb db = new RrdDb(createDef(startTime), factory);\n    List<Pair<String, Long>> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n    timeSource.sleep(4000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = (Long)doc.getFieldValue(\"timestamp_l\");\n    timeSource.sleep(4000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    // make sure the update doesn't race with the sampling boundaries\n    long lastTime = startTime + 30;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTime);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTime = lastTime + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    // don't race with the sampling boundary\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime - 20, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    double[] two = fd.getValues(\"two\");\n    String dump = dumpData(db, fd);\n    assertEquals(\"one: \" + dump, 101, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(dump + \"\\npos=\" + i, 1.0, one[i], 0.00001);\n    }\n    assertEquals(\"two: \" + dump, Double.NaN, two[100], 0.00001);\n    for (int i = 0; i < 100; i++) {\n      assertEquals(dump + \"\\ntwo pos=\" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTime);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime + 20, 60);\n    fd = fr.fetchData();\n    dump = dumpData(db, fd);\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one: \" + dump, 102, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.01);\n    assertEquals(dump, Double.NaN, one[101], 0.01);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 1.0, one[i], 0.01);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(\"two: \" + dump, Double.NaN, two[101], 0.001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 100.0, two[i], 0.001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTime + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 6-Sep-2018\n  public void testBasic() throws Exception {\n    long startTime = 1000000000;\n    RrdDb db = new RrdDb(createDef(startTime), factory);\n    List<Pair<String, Long>> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n    timeSource.sleep(2000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = (Long)doc.getFieldValue(\"timestamp_l\");\n    timeSource.sleep(2000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    // make sure the update doesn't race with the sampling boundaries\n    long lastTime = startTime + 30;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTime);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTime = lastTime + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    // don't race with the sampling boundary\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime - 20, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    double[] two = fd.getValues(\"two\");\n    String dump = dumpData(db, fd);\n    assertEquals(\"one: \" + dump, 101, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(dump + \"\\npos=\" + i, 1.0, one[i], 0.00001);\n    }\n    assertEquals(\"two: \" + dump, Double.NaN, two[100], 0.00001);\n    for (int i = 0; i < 100; i++) {\n      assertEquals(dump + \"\\ntwo pos=\" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTime);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime + 20, 60);\n    fd = fr.fetchData();\n    dump = dumpData(db, fd);\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one: \" + dump, 102, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 1.0, one[i], 0.00001);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(\"two: \" + dump, Double.NaN, two[101], 0.00001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 100.0, two[i], 0.00001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTime + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 6-Sep-2018\n  public void testBasic() throws Exception {\n    long startTime = 1000000000;\n    RrdDb db = new RrdDb(createDef(startTime), factory);\n    List<Pair<String, Long>> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n    timeSource.sleep(4000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = (Long)doc.getFieldValue(\"timestamp_l\");\n    timeSource.sleep(4000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    // make sure the update doesn't race with the sampling boundaries\n    long lastTime = startTime + 30;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTime);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTime = lastTime + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    // don't race with the sampling boundary\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime - 20, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    double[] two = fd.getValues(\"two\");\n    String dump = dumpData(db, fd);\n    assertEquals(\"one: \" + dump, 101, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(dump + \"\\npos=\" + i, 1.0, one[i], 0.00001);\n    }\n    assertEquals(\"two: \" + dump, Double.NaN, two[100], 0.00001);\n    for (int i = 0; i < 100; i++) {\n      assertEquals(dump + \"\\ntwo pos=\" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTime);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime + 20, 60);\n    fd = fr.fetchData();\n    dump = dumpData(db, fd);\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one: \" + dump, 102, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.01);\n    assertEquals(dump, Double.NaN, one[101], 0.01);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 1.0, one[i], 0.01);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(\"two: \" + dump, Double.NaN, two[101], 0.001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 100.0, two[i], 0.001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTime + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 6-Sep-2018\n  public void testBasic() throws Exception {\n    long startTime = 1000000000;\n    RrdDb db = new RrdDb(createDef(startTime), factory);\n    List<Pair<String, Long>> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n    timeSource.sleep(4000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = (Long)doc.getFieldValue(\"timestamp_l\");\n    timeSource.sleep(4000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    // make sure the update doesn't race with the sampling boundaries\n    long lastTime = startTime + 30;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTime);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTime = lastTime + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    // don't race with the sampling boundary\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime - 20, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    double[] two = fd.getValues(\"two\");\n    String dump = dumpData(db, fd);\n    assertEquals(\"one: \" + dump, 101, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(dump + \"\\npos=\" + i, 1.0, one[i], 0.00001);\n    }\n    assertEquals(\"two: \" + dump, Double.NaN, two[100], 0.00001);\n    for (int i = 0; i < 100; i++) {\n      assertEquals(dump + \"\\ntwo pos=\" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTime);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime + 20, 60);\n    fd = fr.fetchData();\n    dump = dumpData(db, fd);\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one: \" + dump, 102, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.01);\n    assertEquals(dump, Double.NaN, one[101], 0.01);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 1.0, one[i], 0.01);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(\"two: \" + dump, Double.NaN, two[101], 0.001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 100.0, two[i], 0.001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTime + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fcabe49715bf68189751a1e27f0af5151ae9437","date":1560255030,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/rrd/SolrRrdBackendFactoryTest#testBasic().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 6-Sep-2018\n  public void testBasic() throws Exception {\n    long startTime = 1000000000;\n    RrdDb db = new RrdDb(createDef(startTime), factory);\n    long lastNumUpdates = solrClient.getNumUpdates();\n    List<Pair<String, Long>> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    timeSource.sleep(4000);\n    lastNumUpdates = waitForUpdates(lastNumUpdates);\n\n    // wait until updates stop coming - the first update could have been partial\n    lastNumUpdates = waitForUpdatesToStop(lastNumUpdates);\n\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = (Long)doc.getFieldValue(\"timestamp_l\");\n\n    timeSource.sleep(4000);\n\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    // make sure the update doesn't race with the sampling boundaries\n    long lastTime = startTime + 30;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTime);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTime = lastTime + 60;\n    }\n    timeSource.sleep(3000);\n    lastNumUpdates = waitForUpdates(lastNumUpdates);\n\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    // don't race with the sampling boundary\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime - 20, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    double[] two = fd.getValues(\"two\");\n    String dump = dumpData(db, fd);\n    assertEquals(\"one: \" + dump, 101, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(dump + \"\\npos=\" + i, 1.0, one[i], 0.00001);\n    }\n    assertEquals(\"two: \" + dump, Double.NaN, two[100], 0.00001);\n    for (int i = 0; i < 100; i++) {\n      assertEquals(dump + \"\\ntwo pos=\" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    lastNumUpdates = solrClient.getNumUpdates();\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTime);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    lastNumUpdates = waitForUpdates(lastNumUpdates);\n\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime + 20, 60);\n    fd = fr.fetchData();\n    dump = dumpData(db, fd);\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one: \" + dump, 102, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.01);\n    assertEquals(dump, Double.NaN, one[101], 0.01);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 1.0, one[i], 0.01);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(\"two: \" + dump, Double.NaN, two[101], 0.001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 100.0, two[i], 0.001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTime + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 6-Sep-2018\n  public void testBasic() throws Exception {\n    long startTime = 1000000000;\n    RrdDb db = new RrdDb(createDef(startTime), factory);\n    List<Pair<String, Long>> list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n    timeSource.sleep(4000);\n    // there should be one sync data\n    assertEquals(solrClient.docs.toString(), 1, solrClient.docs.size());\n    String id = SolrRrdBackendFactory.ID_PREFIX + SolrRrdBackendFactory.ID_SEP + \"foo\";\n    SolrInputDocument doc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    long timestamp = (Long)doc.getFieldValue(\"timestamp_l\");\n    timeSource.sleep(4000);\n    SolrInputDocument newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertEquals(newDoc.toString(), newDoc, doc);\n    // make sure the update doesn't race with the sampling boundaries\n    long lastTime = startTime + 30;\n    // update the db\n    Sample s = db.createSample();\n    for (int i = 0; i < 100; i++) {\n      s.setTime(lastTime);\n      s.setValue(\"one\", 1000 + i * 60);\n      s.setValue(\"two\", 100);\n      s.update();\n      lastTime = lastTime + 60;\n    }\n    timeSource.sleep(3000);\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    long newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    // don't race with the sampling boundary\n    FetchRequest fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime - 20, 60);\n    FetchData fd = fr.fetchData();\n    int rowCount = fd.getRowCount();\n    double[] one = fd.getValues(\"one\");\n    double[] two = fd.getValues(\"two\");\n    String dump = dumpData(db, fd);\n    assertEquals(\"one: \" + dump, 101, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.00001);\n    assertEquals(dump, Double.NaN, one[100], 0.00001);\n    for (int i = 1; i < 100; i++) {\n      assertEquals(dump + \"\\npos=\" + i, 1.0, one[i], 0.00001);\n    }\n    assertEquals(\"two: \" + dump, Double.NaN, two[100], 0.00001);\n    for (int i = 0; i < 100; i++) {\n      assertEquals(dump + \"\\ntwo pos=\" + i, 100.0, two[i], 0.00001);\n    }\n    db.close();\n\n    // should still be listed\n    list = factory.list(100);\n    assertEquals(list.toString(), 1, list.size());\n    assertEquals(list.toString(), \"foo\", list.get(0).first());\n\n    // re-open read-write\n    db = new RrdDb(\"solr:foo\", factory);\n    s = db.createSample();\n    s.setTime(lastTime);\n    s.setValue(\"one\", 7000);\n    s.setValue(\"two\", 100);\n    s.update();\n    timeSource.sleep(3000);\n    // should update\n    timestamp = newTimestamp;\n    doc = newDoc;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertFalse(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertNotSame(newTimestamp, timestamp);\n    fr = db.createFetchRequest(ConsolFun.AVERAGE, startTime + 20, lastTime + 20, 60);\n    fd = fr.fetchData();\n    dump = dumpData(db, fd);\n    rowCount = fd.getRowCount();\n    one = fd.getValues(\"one\");\n    assertEquals(\"one: \" + dump, 102, one.length);\n    assertEquals(dump, Double.NaN, one[0], 0.01);\n    assertEquals(dump, Double.NaN, one[101], 0.01);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 1.0, one[i], 0.01);\n    }\n    two = fd.getValues(\"two\");\n    assertEquals(\"two: \" + dump, Double.NaN, two[101], 0.001);\n    for (int i = 1; i < 101; i++) {\n      assertEquals(dump, 100.0, two[i], 0.001);\n    }\n\n    db.close();\n\n    // open a read-only version of the db\n    RrdDb readOnly = new RrdDb(\"solr:foo\", true, factory);\n    s = readOnly.createSample();\n    s.setTime(lastTime + 120);\n    s.setValue(\"one\", 10000001);\n    s.setValue(\"two\", 100);\n    s.update();\n    // these updates should not be synced\n    timeSource.sleep(3000);\n    doc = newDoc;\n    timestamp = newTimestamp;\n    newDoc = solrClient.docs.get(CollectionAdminParams.SYSTEM_COLL).get(id);\n    assertTrue(newDoc.toString(), newDoc.equals(doc));\n    newTimestamp = (Long)newDoc.getFieldValue(\"timestamp_l\");\n    assertEquals(newTimestamp, timestamp);\n    readOnly.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2d6b868457b26b5a2145b8441b1cfcfc0692b02":["11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"7a62ebeb413c3f10ba3484c756e3d35563ff95a9":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["06652af5b45a8dc038dc5cfa27e5a501f6dd03ba"],"06652af5b45a8dc038dc5cfa27e5a501f6dd03ba":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"11d6f92dfa9251d9da6d80ec5963a9cbecc90180":["7a62ebeb413c3f10ba3484c756e3d35563ff95a9"],"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5fcabe49715bf68189751a1e27f0af5151ae9437":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["d2d6b868457b26b5a2145b8441b1cfcfc0692b02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5fcabe49715bf68189751a1e27f0af5151ae9437"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","11d6f92dfa9251d9da6d80ec5963a9cbecc90180"]},"commit2Childs":{"d2d6b868457b26b5a2145b8441b1cfcfc0692b02":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"7a62ebeb413c3f10ba3484c756e3d35563ff95a9":["11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["5fcabe49715bf68189751a1e27f0af5151ae9437"],"06652af5b45a8dc038dc5cfa27e5a501f6dd03ba":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"11d6f92dfa9251d9da6d80ec5963a9cbecc90180":["d2d6b868457b26b5a2145b8441b1cfcfc0692b02","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["7a62ebeb413c3f10ba3484c756e3d35563ff95a9"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["f8f0f2472d437d44ec2144932e1d13fb494e82a3","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"5fcabe49715bf68189751a1e27f0af5151ae9437":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["06652af5b45a8dc038dc5cfa27e5a501f6dd03ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}