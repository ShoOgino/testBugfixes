{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#populateData(Connection).mjava","commits":[{"id":"b4804614e0358954d5d9f51128fcf3cd79e6e25b","date":1352831451,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#populateData(Connection).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void populateData(Connection conn) throws Exception {\n    Statement s = null;\n    PreparedStatement ps = null;\n    Timestamp theTime = new Timestamp(System.currentTimeMillis() - 10000); // 10 seconds ago\n    try {\n      s = conn.createStatement();\n      s.executeUpdate(\"create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      \n      ps = conn\n          .prepareStatement(\"insert into countries (code, country_name, last_modified) values (?,?,?)\");\n      for (String[] country : countries) {\n        ps.setString(1, country[0]);\n        ps.setString(2, country[1]);\n        ps.setTimestamp(3, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people (id, name, country_code, last_modified) values (?,?,?,?)\");\n      for (Object[] person : people) {\n        ps.setInt(1, (Integer) person[0]);\n        ps.setString(2, (String) person[1]);\n        ps.setString(3, (String) person[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people_sports (id, person_id, sport_name, last_modified) values (?,?,?,?)\");\n      for (Object[] sport : people_sports) {\n        ps.setInt(1, (Integer) sport[0]);\n        ps.setInt(2, (Integer) sport[1]);\n        ps.setString(3, (String) sport[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      conn.commit();\n      conn.close();\n    } catch (Exception e) {\n      throw e;\n    } finally {\n      try {\n        ps.close();\n      } catch (Exception ex) {}\n      try {\n        s.close();\n      } catch (Exception ex) {}\n      try {\n        conn.close();\n      } catch (Exception ex) {}\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9996c9e8eaf37a4104c98ae4e08f2d78514021c3","date":1354643140,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#populateData(Connection).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#populateData(Connection).mjava","sourceNew":"  @Override\n  protected void populateData(Connection conn) throws Exception {\n    Statement s = null;\n    PreparedStatement ps = null;\n    Timestamp theTime = new Timestamp(System.currentTimeMillis() - 10000); // 10 seconds ago\n    try {\n      s = conn.createStatement();\n      s.executeUpdate(\"create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      log.info(\"INSERTING DB DATA USING TIMESTAMP: \"\n          + new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", Locale.ROOT)\n              .format(theTime));\n      ps = conn\n          .prepareStatement(\"insert into countries (code, country_name, last_modified) values (?,?,?)\");\n      for (String[] country : countries) {\n        ps.setString(1, country[0]);\n        ps.setString(2, country[1]);\n        ps.setTimestamp(3, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people (id, name, country_code, last_modified) values (?,?,?,?)\");\n      for (Object[] person : people) {\n        ps.setInt(1, (Integer) person[0]);\n        ps.setString(2, (String) person[1]);\n        ps.setString(3, (String) person[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people_sports (id, person_id, sport_name, last_modified) values (?,?,?,?)\");\n      for (Object[] sport : people_sports) {\n        ps.setInt(1, (Integer) sport[0]);\n        ps.setInt(2, (Integer) sport[1]);\n        ps.setString(3, (String) sport[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      conn.commit();\n      conn.close();\n    } catch (Exception e) {\n      throw e;\n    } finally {\n      try {\n        ps.close();\n      } catch (Exception ex) {}\n      try {\n        s.close();\n      } catch (Exception ex) {}\n      try {\n        conn.close();\n      } catch (Exception ex) {}\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void populateData(Connection conn) throws Exception {\n    Statement s = null;\n    PreparedStatement ps = null;\n    Timestamp theTime = new Timestamp(System.currentTimeMillis() - 10000); // 10 seconds ago\n    try {\n      s = conn.createStatement();\n      s.executeUpdate(\"create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      \n      ps = conn\n          .prepareStatement(\"insert into countries (code, country_name, last_modified) values (?,?,?)\");\n      for (String[] country : countries) {\n        ps.setString(1, country[0]);\n        ps.setString(2, country[1]);\n        ps.setTimestamp(3, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people (id, name, country_code, last_modified) values (?,?,?,?)\");\n      for (Object[] person : people) {\n        ps.setInt(1, (Integer) person[0]);\n        ps.setString(2, (String) person[1]);\n        ps.setString(3, (String) person[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people_sports (id, person_id, sport_name, last_modified) values (?,?,?,?)\");\n      for (Object[] sport : people_sports) {\n        ps.setInt(1, (Integer) sport[0]);\n        ps.setInt(2, (Integer) sport[1]);\n        ps.setString(3, (String) sport[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      conn.commit();\n      conn.close();\n    } catch (Exception e) {\n      throw e;\n    } finally {\n      try {\n        ps.close();\n      } catch (Exception ex) {}\n      try {\n        s.close();\n      } catch (Exception ex) {}\n      try {\n        conn.close();\n      } catch (Exception ex) {}\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"602d00a40b81360150f946906e46824f91cd3860","date":1354739380,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#populateData(Connection).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#populateData(Connection).mjava","sourceNew":"  @Override\n  protected void populateData(Connection conn) throws Exception {\n    Statement s = null;\n    PreparedStatement ps = null;\n    Timestamp theTime = new Timestamp(System.currentTimeMillis() - 10000); // 10 seconds ago\n    try {\n      s = conn.createStatement();\n      s.executeUpdate(\"create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      log.debug(\"INSERTING DB DATA USING TIMESTAMP: \"\n          + new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", Locale.ROOT)\n              .format(theTime));\n      ps = conn\n          .prepareStatement(\"insert into countries (code, country_name, last_modified) values (?,?,?)\");\n      for (String[] country : countries) {\n        ps.setString(1, country[0]);\n        ps.setString(2, country[1]);\n        ps.setTimestamp(3, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people (id, name, country_code, last_modified) values (?,?,?,?)\");\n      for (Object[] person : people) {\n        ps.setInt(1, (Integer) person[0]);\n        ps.setString(2, (String) person[1]);\n        ps.setString(3, (String) person[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people_sports (id, person_id, sport_name, last_modified) values (?,?,?,?)\");\n      for (Object[] sport : people_sports) {\n        ps.setInt(1, (Integer) sport[0]);\n        ps.setInt(2, (Integer) sport[1]);\n        ps.setString(3, (String) sport[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      conn.commit();\n      conn.close();\n    } catch (Exception e) {\n      throw e;\n    } finally {\n      try {\n        ps.close();\n      } catch (Exception ex) {}\n      try {\n        s.close();\n      } catch (Exception ex) {}\n      try {\n        conn.close();\n      } catch (Exception ex) {}\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void populateData(Connection conn) throws Exception {\n    Statement s = null;\n    PreparedStatement ps = null;\n    Timestamp theTime = new Timestamp(System.currentTimeMillis() - 10000); // 10 seconds ago\n    try {\n      s = conn.createStatement();\n      s.executeUpdate(\"create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      log.info(\"INSERTING DB DATA USING TIMESTAMP: \"\n          + new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", Locale.ROOT)\n              .format(theTime));\n      ps = conn\n          .prepareStatement(\"insert into countries (code, country_name, last_modified) values (?,?,?)\");\n      for (String[] country : countries) {\n        ps.setString(1, country[0]);\n        ps.setString(2, country[1]);\n        ps.setTimestamp(3, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people (id, name, country_code, last_modified) values (?,?,?,?)\");\n      for (Object[] person : people) {\n        ps.setInt(1, (Integer) person[0]);\n        ps.setString(2, (String) person[1]);\n        ps.setString(3, (String) person[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people_sports (id, person_id, sport_name, last_modified) values (?,?,?,?)\");\n      for (Object[] sport : people_sports) {\n        ps.setInt(1, (Integer) sport[0]);\n        ps.setInt(2, (Integer) sport[1]);\n        ps.setString(3, (String) sport[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      conn.commit();\n      conn.close();\n    } catch (Exception e) {\n      throw e;\n    } finally {\n      try {\n        ps.close();\n      } catch (Exception ex) {}\n      try {\n        s.close();\n      } catch (Exception ex) {}\n      try {\n        conn.close();\n      } catch (Exception ex) {}\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#populateData(Connection).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void populateData(Connection conn) throws Exception {\n    Statement s = null;\n    PreparedStatement ps = null;\n    Timestamp theTime = new Timestamp(System.currentTimeMillis() - 10000); // 10 seconds ago\n    try {\n      s = conn.createStatement();\n      s.executeUpdate(\"create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      log.debug(\"INSERTING DB DATA USING TIMESTAMP: \"\n          + new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", Locale.ROOT)\n              .format(theTime));\n      ps = conn\n          .prepareStatement(\"insert into countries (code, country_name, last_modified) values (?,?,?)\");\n      for (String[] country : countries) {\n        ps.setString(1, country[0]);\n        ps.setString(2, country[1]);\n        ps.setTimestamp(3, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people (id, name, country_code, last_modified) values (?,?,?,?)\");\n      for (Object[] person : people) {\n        ps.setInt(1, (Integer) person[0]);\n        ps.setString(2, (String) person[1]);\n        ps.setString(3, (String) person[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people_sports (id, person_id, sport_name, last_modified) values (?,?,?,?)\");\n      for (Object[] sport : people_sports) {\n        ps.setInt(1, (Integer) sport[0]);\n        ps.setInt(2, (Integer) sport[1]);\n        ps.setString(3, (String) sport[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      conn.commit();\n      conn.close();\n    } catch (Exception e) {\n      throw e;\n    } finally {\n      try {\n        ps.close();\n      } catch (Exception ex) {}\n      try {\n        s.close();\n      } catch (Exception ex) {}\n      try {\n        conn.close();\n      } catch (Exception ex) {}\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#populateData(Connection).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#populateData(Connection).mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set change time for SQL query\")\n  @Override\n  protected void populateData(Connection conn) throws Exception {\n    Statement s = null;\n    PreparedStatement ps = null;\n    Timestamp theTime = new Timestamp(System.currentTimeMillis() - 10000); // 10 seconds ago\n    try {\n      s = conn.createStatement();\n      s.executeUpdate(\"create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      log.debug(\"INSERTING DB DATA USING TIMESTAMP: \"\n          + new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", Locale.ROOT)\n              .format(theTime));\n      ps = conn\n          .prepareStatement(\"insert into countries (code, country_name, last_modified) values (?,?,?)\");\n      for (String[] country : countries) {\n        ps.setString(1, country[0]);\n        ps.setString(2, country[1]);\n        ps.setTimestamp(3, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people (id, name, country_code, last_modified) values (?,?,?,?)\");\n      for (Object[] person : people) {\n        ps.setInt(1, (Integer) person[0]);\n        ps.setString(2, (String) person[1]);\n        ps.setString(3, (String) person[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people_sports (id, person_id, sport_name, last_modified) values (?,?,?,?)\");\n      for (Object[] sport : people_sports) {\n        ps.setInt(1, (Integer) sport[0]);\n        ps.setInt(2, (Integer) sport[1]);\n        ps.setString(3, (String) sport[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      conn.commit();\n      conn.close();\n    } catch (Exception e) {\n      throw e;\n    } finally {\n      try {\n        ps.close();\n      } catch (Exception ex) {}\n      try {\n        s.close();\n      } catch (Exception ex) {}\n      try {\n        conn.close();\n      } catch (Exception ex) {}\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void populateData(Connection conn) throws Exception {\n    Statement s = null;\n    PreparedStatement ps = null;\n    Timestamp theTime = new Timestamp(System.currentTimeMillis() - 10000); // 10 seconds ago\n    try {\n      s = conn.createStatement();\n      s.executeUpdate(\"create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      log.debug(\"INSERTING DB DATA USING TIMESTAMP: \"\n          + new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", Locale.ROOT)\n              .format(theTime));\n      ps = conn\n          .prepareStatement(\"insert into countries (code, country_name, last_modified) values (?,?,?)\");\n      for (String[] country : countries) {\n        ps.setString(1, country[0]);\n        ps.setString(2, country[1]);\n        ps.setTimestamp(3, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people (id, name, country_code, last_modified) values (?,?,?,?)\");\n      for (Object[] person : people) {\n        ps.setInt(1, (Integer) person[0]);\n        ps.setString(2, (String) person[1]);\n        ps.setString(3, (String) person[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people_sports (id, person_id, sport_name, last_modified) values (?,?,?,?)\");\n      for (Object[] sport : people_sports) {\n        ps.setInt(1, (Integer) sport[0]);\n        ps.setInt(2, (Integer) sport[1]);\n        ps.setString(3, (String) sport[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      conn.commit();\n      conn.close();\n    } catch (Exception e) {\n      throw e;\n    } finally {\n      try {\n        ps.close();\n      } catch (Exception ex) {}\n      try {\n        s.close();\n      } catch (Exception ex) {}\n      try {\n        conn.close();\n      } catch (Exception ex) {}\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#populateData(Connection).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#populateData(Connection).mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set change time for SQL query\")\n  @Override\n  protected void populateData(Connection conn) throws Exception {\n    Statement s = null;\n    PreparedStatement ps = null;\n    Timestamp theTime = new Timestamp(System.currentTimeMillis() - 10000); // 10 seconds ago\n    try {\n      s = conn.createStatement();\n      s.executeUpdate(\"create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      if (log.isDebugEnabled()) {\n        log.debug(\"INSERTING DB DATA USING TIMESTAMP: {}\",\n            new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", Locale.ROOT).format(theTime));\n      }\n      ps = conn\n          .prepareStatement(\"insert into countries (code, country_name, last_modified) values (?,?,?)\");\n      for (String[] country : countries) {\n        ps.setString(1, country[0]);\n        ps.setString(2, country[1]);\n        ps.setTimestamp(3, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people (id, name, country_code, last_modified) values (?,?,?,?)\");\n      for (Object[] person : people) {\n        ps.setInt(1, (Integer) person[0]);\n        ps.setString(2, (String) person[1]);\n        ps.setString(3, (String) person[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people_sports (id, person_id, sport_name, last_modified) values (?,?,?,?)\");\n      for (Object[] sport : people_sports) {\n        ps.setInt(1, (Integer) sport[0]);\n        ps.setInt(2, (Integer) sport[1]);\n        ps.setString(3, (String) sport[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      conn.commit();\n      conn.close();\n    } catch (Exception e) {\n      throw e;\n    } finally {\n      try {\n        ps.close();\n      } catch (Exception ex) {}\n      try {\n        s.close();\n      } catch (Exception ex) {}\n      try {\n        conn.close();\n      } catch (Exception ex) {}\n    }\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set change time for SQL query\")\n  @Override\n  protected void populateData(Connection conn) throws Exception {\n    Statement s = null;\n    PreparedStatement ps = null;\n    Timestamp theTime = new Timestamp(System.currentTimeMillis() - 10000); // 10 seconds ago\n    try {\n      s = conn.createStatement();\n      s.executeUpdate(\"create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      log.debug(\"INSERTING DB DATA USING TIMESTAMP: \"\n          + new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", Locale.ROOT)\n              .format(theTime));\n      ps = conn\n          .prepareStatement(\"insert into countries (code, country_name, last_modified) values (?,?,?)\");\n      for (String[] country : countries) {\n        ps.setString(1, country[0]);\n        ps.setString(2, country[1]);\n        ps.setTimestamp(3, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people (id, name, country_code, last_modified) values (?,?,?,?)\");\n      for (Object[] person : people) {\n        ps.setInt(1, (Integer) person[0]);\n        ps.setString(2, (String) person[1]);\n        ps.setString(3, (String) person[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people_sports (id, person_id, sport_name, last_modified) values (?,?,?,?)\");\n      for (Object[] sport : people_sports) {\n        ps.setInt(1, (Integer) sport[0]);\n        ps.setInt(2, (Integer) sport[1]);\n        ps.setString(3, (String) sport[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      conn.commit();\n      conn.close();\n    } catch (Exception e) {\n      throw e;\n    } finally {\n      try {\n        ps.close();\n      } catch (Exception ex) {}\n      try {\n        s.close();\n      } catch (Exception ex) {}\n      try {\n        conn.close();\n      } catch (Exception ex) {}\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractSqlEntityProcessorTestCase#populateData(Connection).mjava","sourceNew":null,"sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set change time for SQL query\")\n  @Override\n  protected void populateData(Connection conn) throws Exception {\n    Statement s = null;\n    PreparedStatement ps = null;\n    Timestamp theTime = new Timestamp(System.currentTimeMillis() - 10000); // 10 seconds ago\n    try {\n      s = conn.createStatement();\n      s.executeUpdate(\"create table countries(code varchar(3) not null primary key, country_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people(id int not null primary key, name varchar(50), country_code char(2), deleted char(1) default 'N', last_modified timestamp not null)\");\n      s.executeUpdate(\"create table people_sports(id int not null primary key, person_id int, sport_name varchar(50), deleted char(1) default 'N', last_modified timestamp not null)\");\n      if (log.isDebugEnabled()) {\n        log.debug(\"INSERTING DB DATA USING TIMESTAMP: {}\",\n            new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", Locale.ROOT).format(theTime));\n      }\n      ps = conn\n          .prepareStatement(\"insert into countries (code, country_name, last_modified) values (?,?,?)\");\n      for (String[] country : countries) {\n        ps.setString(1, country[0]);\n        ps.setString(2, country[1]);\n        ps.setTimestamp(3, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people (id, name, country_code, last_modified) values (?,?,?,?)\");\n      for (Object[] person : people) {\n        ps.setInt(1, (Integer) person[0]);\n        ps.setString(2, (String) person[1]);\n        ps.setString(3, (String) person[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      \n      ps = conn\n          .prepareStatement(\"insert into people_sports (id, person_id, sport_name, last_modified) values (?,?,?,?)\");\n      for (Object[] sport : people_sports) {\n        ps.setInt(1, (Integer) sport[0]);\n        ps.setInt(2, (Integer) sport[1]);\n        ps.setString(3, (String) sport[2]);\n        ps.setTimestamp(4, theTime);\n        Assert.assertEquals(1, ps.executeUpdate());\n      }\n      ps.close();\n      conn.commit();\n      conn.close();\n    } catch (Exception e) {\n      throw e;\n    } finally {\n      try {\n        ps.close();\n      } catch (Exception ex) {}\n      try {\n        s.close();\n      } catch (Exception ex) {}\n      try {\n        conn.close();\n      } catch (Exception ex) {}\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","602d00a40b81360150f946906e46824f91cd3860"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["602d00a40b81360150f946906e46824f91cd3860"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"602d00a40b81360150f946906e46824f91cd3860":["9996c9e8eaf37a4104c98ae4e08f2d78514021c3"],"9996c9e8eaf37a4104c98ae4e08f2d78514021c3":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["9996c9e8eaf37a4104c98ae4e08f2d78514021c3"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4804614e0358954d5d9f51128fcf3cd79e6e25b","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"602d00a40b81360150f946906e46824f91cd3860":["407687e67faf6e1f02a211ca078d8e3eed631027","bcf9886c8ff537aafde14de48ebf744f5673f08b"],"9996c9e8eaf37a4104c98ae4e08f2d78514021c3":["602d00a40b81360150f946906e46824f91cd3860"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}