{"path":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equals(Object).mjava","commits":[{"id":"06a4493f0c732d2928d1a4f773f15d19434aa8ba","date":1405856163,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof TermAutomatonQuery)) {\n      return false;\n    }\n    TermAutomatonQuery other = (TermAutomatonQuery) o;\n\n    if (det == null) {\n      throw new IllegalStateException(\"please call finish first\");\n    }\n    if (other.det == null) {\n      throw new IllegalStateException(\"please call other.finish first\");\n    }\n\n    // NOTE: not quite correct, because if terms were added in different\n    // order in each query but the language is the same, we return false:\n    return (this.getBoost() == other.getBoost())\n      && this.termToID.equals(other.termToID) &&\n      Operations.sameLanguage(det, other.det);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdd0e99daabe8cd52cd4d7755679337bede8abe0","date":1425571318,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equals(Object).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof TermAutomatonQuery)) {\n      return false;\n    }\n    TermAutomatonQuery other = (TermAutomatonQuery) o;\n\n    if (det == null) {\n      throw new IllegalStateException(\"please call finish first\");\n    }\n    if (other.det == null) {\n      throw new IllegalStateException(\"please call other.finish first\");\n    }\n\n    // NOTE: not quite correct, because if terms were added in different\n    // order in each query but the language is the same, we return false:\n    return super.equals(o)\n      && this.termToID.equals(other.termToID) &&\n      Operations.sameLanguage(det, other.det);\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof TermAutomatonQuery)) {\n      return false;\n    }\n    TermAutomatonQuery other = (TermAutomatonQuery) o;\n\n    if (det == null) {\n      throw new IllegalStateException(\"please call finish first\");\n    }\n    if (other.det == null) {\n      throw new IllegalStateException(\"please call other.finish first\");\n    }\n\n    // NOTE: not quite correct, because if terms were added in different\n    // order in each query but the language is the same, we return false:\n    return (this.getBoost() == other.getBoost())\n      && this.termToID.equals(other.termToID) &&\n      Operations.sameLanguage(det, other.det);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equals(Object).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof TermAutomatonQuery)) {\n      return false;\n    }\n    TermAutomatonQuery other = (TermAutomatonQuery) o;\n\n    if (det == null) {\n      throw new IllegalStateException(\"please call finish first\");\n    }\n    if (other.det == null) {\n      throw new IllegalStateException(\"please call other.finish first\");\n    }\n\n    // NOTE: not quite correct, because if terms were added in different\n    // order in each query but the language is the same, we return false:\n    return super.equals(o)\n      && this.termToID.equals(other.termToID) &&\n      Operations.sameLanguage(det, other.det);\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof TermAutomatonQuery)) {\n      return false;\n    }\n    TermAutomatonQuery other = (TermAutomatonQuery) o;\n\n    if (det == null) {\n      throw new IllegalStateException(\"please call finish first\");\n    }\n    if (other.det == null) {\n      throw new IllegalStateException(\"please call other.finish first\");\n    }\n\n    // NOTE: not quite correct, because if terms were added in different\n    // order in each query but the language is the same, we return false:\n    return (this.getBoost() == other.getBoost())\n      && this.termToID.equals(other.termToID) &&\n      Operations.sameLanguage(det, other.det);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equals(Object).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof TermAutomatonQuery)) {\n      return false;\n    }\n    TermAutomatonQuery other = (TermAutomatonQuery) o;\n\n    if (det == null) {\n      throw new IllegalStateException(\"please call finish first\");\n    }\n    if (other.det == null) {\n      throw new IllegalStateException(\"please call other.finish first\");\n    }\n\n    // NOTE: not quite correct, because if terms were added in different\n    // order in each query but the language is the same, we return false:\n    return super.equals(o)\n      && this.termToID.equals(other.termToID) &&\n      Operations.sameLanguage(det, other.det);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equals(Object).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           equalsTo(getClass().cast(other));\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof TermAutomatonQuery)) {\n      return false;\n    }\n    TermAutomatonQuery other = (TermAutomatonQuery) o;\n\n    if (det == null) {\n      throw new IllegalStateException(\"please call finish first\");\n    }\n    if (other.det == null) {\n      throw new IllegalStateException(\"please call other.finish first\");\n    }\n\n    // NOTE: not quite correct, because if terms were added in different\n    // order in each query but the language is the same, we return false:\n    return super.equals(o)\n      && this.termToID.equals(other.termToID) &&\n      Operations.sameLanguage(det, other.det);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fdd0e99daabe8cd52cd4d7755679337bede8abe0":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["06a4493f0c732d2928d1a4f773f15d19434aa8ba","fdd0e99daabe8cd52cd4d7755679337bede8abe0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["fdd0e99daabe8cd52cd4d7755679337bede8abe0"],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["fdd0e99daabe8cd52cd4d7755679337bede8abe0","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"fdd0e99daabe8cd52cd4d7755679337bede8abe0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["fdd0e99daabe8cd52cd4d7755679337bede8abe0","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}