{"path":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,int,int).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","sourceNew":"  /** picks a random int code point, avoiding surrogates;\n   * throws IllegalArgumentException if this transition only\n   * accepts surrogates */\n  private static int getRandomCodePoint(final Random r, int min, int max) {\n    final int code;\n    if (max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = min+r.nextInt(max-min+1);\n    } else if (min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(max-UnicodeUtil.UNI_SUR_LOW_END);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: min=\" + min + \" max=\" + max);\n      }\n    } else if (max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: min=\" + min + \" max=\" + max);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - min;\n      int gap2 = max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= min && code <= max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + min + \" max=\" + max;\n    return code;\n  }\n\n","sourceOld":"  /** picks a random int code point, avoiding surrogates;\n   * throws IllegalArgumentException if this transition only\n   * accepts surrogates */\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    final int code;\n    if (t.max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        t.min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = t.min+r.nextInt(t.max-t.min+1);\n    } else if (t.min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (t.max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(t.max-UnicodeUtil.UNI_SUR_LOW_END);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else if (t.max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (t.min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = t.min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - t.min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - t.min;\n      int gap2 = t.max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = t.min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= t.min && code <= t.max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + t.min + \" max=\" + t.max;\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","sourceNew":"  /** picks a random int code point, avoiding surrogates;\n   * throws IllegalArgumentException if this transition only\n   * accepts surrogates */\n  private static int getRandomCodePoint(final Random r, int min, int max) {\n    final int code;\n    if (max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = min+r.nextInt(max-min+1);\n    } else if (min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(max-UnicodeUtil.UNI_SUR_LOW_END);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: min=\" + min + \" max=\" + max);\n      }\n    } else if (max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: min=\" + min + \" max=\" + max);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - min;\n      int gap2 = max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= min && code <= max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + min + \" max=\" + max;\n    return code;\n  }\n\n","sourceOld":"  /** picks a random int code point, avoiding surrogates;\n   * throws IllegalArgumentException if this transition only\n   * accepts surrogates */\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    final int code;\n    if (t.max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        t.min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = t.min+r.nextInt(t.max-t.min+1);\n    } else if (t.min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (t.max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(t.max-UnicodeUtil.UNI_SUR_LOW_END);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else if (t.max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (t.min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = t.min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - t.min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - t.min;\n      int gap2 = t.max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = t.min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= t.min && code <= t.max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + t.min + \" max=\" + t.max;\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["5c84485629d80d203608e8975a1139de9933cc38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}