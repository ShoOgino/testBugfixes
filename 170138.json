{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#checkAZombieServer(ServerWrapper).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#checkAZombieServer(ServerWrapper).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#checkAZombieServer(ServerWrapper).mjava","sourceNew":"  /**\n   * Takes up one dead server and check for aliveness. The check is done in a roundrobin. Each server is checked for\n   * aliveness once in 'x' millis where x is decided by the setAliveCheckinterval() or it is defaulted to 1 minute\n   *\n   * @param zombieServer a server in the dead pool\n   */\n  private void checkAZombieServer(ServerWrapper zombieServer) {\n    long currTime = System.currentTimeMillis();\n    try {\n      zombieServer.lastChecked = currTime;\n      QueryResponse resp = zombieServer.client.query(solrQuery);\n      if (resp.getStatus() == 0) {\n        // server has come back up.\n        // make sure to remove from zombies before adding to alive to avoid a race condition\n        // where another thread could mark it down, move it back to zombie, and then we delete\n        // from zombie and lose it forever.\n        ServerWrapper wrapper = zombieServers.remove(zombieServer.getKey());\n        if (wrapper != null) {\n          wrapper.failedPings = 0;\n          if (wrapper.standard) {\n            addToAlive(wrapper);\n          }\n        } else {\n          // something else already moved the server from zombie to alive\n        }\n      }\n    } catch (Exception e) {\n      //Expected. The server is still down.\n      zombieServer.failedPings++;\n\n      // If the server doesn't belong in the standard set belonging to this load balancer\n      // then simply drop it after a certain number of failed pings.\n      if (!zombieServer.standard && zombieServer.failedPings >= NONSTANDARD_PING_LIMIT) {\n        zombieServers.remove(zombieServer.getKey());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Takes up one dead server and check for aliveness. The check is done in a roundrobin. Each server is checked for\n   * aliveness once in 'x' millis where x is decided by the setAliveCheckinterval() or it is defaulted to 1 minute\n   *\n   * @param zombieServer a server in the dead pool\n   */\n  private void checkAZombieServer(ServerWrapper zombieServer) {\n    long currTime = System.currentTimeMillis();\n    try {\n      zombieServer.lastChecked = currTime;\n      QueryResponse resp = zombieServer.solrServer.query(solrQuery);\n      if (resp.getStatus() == 0) {\n        // server has come back up.\n        // make sure to remove from zombies before adding to alive to avoid a race condition\n        // where another thread could mark it down, move it back to zombie, and then we delete\n        // from zombie and lose it forever.\n        ServerWrapper wrapper = zombieServers.remove(zombieServer.getKey());\n        if (wrapper != null) {\n          wrapper.failedPings = 0;\n          if (wrapper.standard) {\n            addToAlive(wrapper);\n          }\n        } else {\n          // something else already moved the server from zombie to alive\n        }\n      }\n    } catch (Exception e) {\n      //Expected. The server is still down.\n      zombieServer.failedPings++;\n\n      // If the server doesn't belong in the standard set belonging to this load balancer\n      // then simply drop it after a certain number of failed pings.\n      if (!zombieServer.standard && zombieServer.failedPings >= NONSTANDARD_PING_LIMIT) {\n        zombieServers.remove(zombieServer.getKey());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#checkAZombieServer(ServerWrapper).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#checkAZombieServer(ServerWrapper).mjava","sourceNew":"  /**\n   * Takes up one dead server and check for aliveness. The check is done in a roundrobin. Each server is checked for\n   * aliveness once in 'x' millis where x is decided by the setAliveCheckinterval() or it is defaulted to 1 minute\n   *\n   * @param zombieServer a server in the dead pool\n   */\n  private void checkAZombieServer(ServerWrapper zombieServer) {\n    try {\n      QueryResponse resp = zombieServer.client.query(solrQuery);\n      if (resp.getStatus() == 0) {\n        // server has come back up.\n        // make sure to remove from zombies before adding to alive to avoid a race condition\n        // where another thread could mark it down, move it back to zombie, and then we delete\n        // from zombie and lose it forever.\n        ServerWrapper wrapper = zombieServers.remove(zombieServer.getKey());\n        if (wrapper != null) {\n          wrapper.failedPings = 0;\n          if (wrapper.standard) {\n            addToAlive(wrapper);\n          }\n        } else {\n          // something else already moved the server from zombie to alive\n        }\n      }\n    } catch (Exception e) {\n      //Expected. The server is still down.\n      zombieServer.failedPings++;\n\n      // If the server doesn't belong in the standard set belonging to this load balancer\n      // then simply drop it after a certain number of failed pings.\n      if (!zombieServer.standard && zombieServer.failedPings >= NONSTANDARD_PING_LIMIT) {\n        zombieServers.remove(zombieServer.getKey());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Takes up one dead server and check for aliveness. The check is done in a roundrobin. Each server is checked for\n   * aliveness once in 'x' millis where x is decided by the setAliveCheckinterval() or it is defaulted to 1 minute\n   *\n   * @param zombieServer a server in the dead pool\n   */\n  private void checkAZombieServer(ServerWrapper zombieServer) {\n    long currTime = System.currentTimeMillis();\n    try {\n      zombieServer.lastChecked = currTime;\n      QueryResponse resp = zombieServer.client.query(solrQuery);\n      if (resp.getStatus() == 0) {\n        // server has come back up.\n        // make sure to remove from zombies before adding to alive to avoid a race condition\n        // where another thread could mark it down, move it back to zombie, and then we delete\n        // from zombie and lose it forever.\n        ServerWrapper wrapper = zombieServers.remove(zombieServer.getKey());\n        if (wrapper != null) {\n          wrapper.failedPings = 0;\n          if (wrapper.standard) {\n            addToAlive(wrapper);\n          }\n        } else {\n          // something else already moved the server from zombie to alive\n        }\n      }\n    } catch (Exception e) {\n      //Expected. The server is still down.\n      zombieServer.failedPings++;\n\n      // If the server doesn't belong in the standard set belonging to this load balancer\n      // then simply drop it after a certain number of failed pings.\n      if (!zombieServer.standard && zombieServer.failedPings >= NONSTANDARD_PING_LIMIT) {\n        zombieServers.remove(zombieServer.getKey());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient#checkAZombieServer(ServerWrapper).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#checkAZombieServer(ServerWrapper).mjava","sourceNew":"  private void checkAZombieServer(ServerWrapper zombieServer) {\n    try {\n      QueryRequest queryRequest = new QueryRequest(solrQuery);\n      queryRequest.setBasePath(zombieServer.baseUrl);\n      QueryResponse resp = queryRequest.process(getClient(zombieServer.getBaseUrl()));\n      if (resp.getStatus() == 0) {\n        // server has come back up.\n        // make sure to remove from zombies before adding to alive to avoid a race condition\n        // where another thread could mark it down, move it back to zombie, and then we delete\n        // from zombie and lose it forever.\n        ServerWrapper wrapper = zombieServers.remove(zombieServer.getBaseUrl());\n        if (wrapper != null) {\n          wrapper.failedPings = 0;\n          if (wrapper.standard) {\n            addToAlive(wrapper);\n          }\n        } else {\n          // something else already moved the server from zombie to alive\n        }\n      }\n    } catch (Exception e) {\n      //Expected. The server is still down.\n      zombieServer.failedPings++;\n\n      // If the server doesn't belong in the standard set belonging to this load balancer\n      // then simply drop it after a certain number of failed pings.\n      if (!zombieServer.standard && zombieServer.failedPings >= NONSTANDARD_PING_LIMIT) {\n        zombieServers.remove(zombieServer.getBaseUrl());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Takes up one dead server and check for aliveness. The check is done in a roundrobin. Each server is checked for\n   * aliveness once in 'x' millis where x is decided by the setAliveCheckinterval() or it is defaulted to 1 minute\n   *\n   * @param zombieServer a server in the dead pool\n   */\n  private void checkAZombieServer(ServerWrapper zombieServer) {\n    try {\n      QueryResponse resp = zombieServer.client.query(solrQuery);\n      if (resp.getStatus() == 0) {\n        // server has come back up.\n        // make sure to remove from zombies before adding to alive to avoid a race condition\n        // where another thread could mark it down, move it back to zombie, and then we delete\n        // from zombie and lose it forever.\n        ServerWrapper wrapper = zombieServers.remove(zombieServer.getKey());\n        if (wrapper != null) {\n          wrapper.failedPings = 0;\n          if (wrapper.standard) {\n            addToAlive(wrapper);\n          }\n        } else {\n          // something else already moved the server from zombie to alive\n        }\n      }\n    } catch (Exception e) {\n      //Expected. The server is still down.\n      zombieServer.failedPings++;\n\n      // If the server doesn't belong in the standard set belonging to this load balancer\n      // then simply drop it after a certain number of failed pings.\n      if (!zombieServer.standard && zombieServer.failedPings >= NONSTANDARD_PING_LIMIT) {\n        zombieServers.remove(zombieServer.getKey());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"bafca15d8e408346a67f4282ad1143b88023893b":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}