{"path":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"/dev/null","sourceNew":"    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      if (isConf) {\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      post.addParameter(\"wt\", FILE_STREAM);\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      client.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      return new FastInputStream(is);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d6028dbe4a16095efe9f1651fe1a8e88d683e92","date":1224723463,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      post.addParameter(\"wt\", FILE_STREAM);\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      client.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      return new FastInputStream(is);\n    }\n\n","sourceOld":"    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      if (isConf) {\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      post.addParameter(\"wt\", FILE_STREAM);\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      client.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      return new FastInputStream(is);\n    }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9","date":1225202752,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      //This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      client.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      return new FastInputStream(is);\n    }\n\n","sourceOld":"    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      post.addParameter(\"wt\", FILE_STREAM);\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      client.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      return new FastInputStream(is);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8620c64e323e74078214cf931e505179d14c888e","date":1225270494,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      client.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      return new FastInputStream(is);\n    }\n\n","sourceOld":"    /**Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      //This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      client.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      return new FastInputStream(is);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6e1afc23adf8af4aa2dfc781b02b63710546b33","date":1227622754,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      client.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      client.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      return new FastInputStream(is);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9","date":1239612124,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      myHttpClient.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      client.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#getStream().mjava","sourceNew":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      myHttpClient.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","sourceOld":"    /**\n     * Open a new stream using HttpClient\n     */\n    FastInputStream getStream() throws IOException {\n      post = new PostMethod(masterUrl);\n      //the method is command=filecontent\n      post.addParameter(COMMAND, CMD_GET_FILE);\n      //add the version to download. This is used to reserve the download\n      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());\n      if (isConf) {\n        //set cf instead of file for config file\n        post.addParameter(CONF_FILE_SHORT, fileName);\n      } else {\n        post.addParameter(FILE, fileName);\n      }\n      if (useInternal) {\n        post.addParameter(COMPRESSION, \"true\");\n      }\n      if (useExternal) {\n        post.setRequestHeader(new Header(\"Accept-Encoding\", \"gzip,deflate\"));\n      }\n      //use checksum\n      if (this.includeChecksum)\n        post.addParameter(CHECKSUM, \"true\");\n      //wt=filestream this is a custom protocol\n      post.addParameter(\"wt\", FILE_STREAM);\n      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that\n      // the server starts from the offset\n      if (bytesDownloaded > 0) {\n        post.addParameter(OFFSET, \"\" + bytesDownloaded);\n      }\n      myHttpClient.executeMethod(post);\n      InputStream is = post.getResponseBodyAsStream();\n      //wrap it using FastInputStream\n      if (useInternal) {\n        is = new InflaterInputStream(is);\n      } else if (useExternal) {\n        is = checkCompressed(post, is);\n      }\n      return new FastInputStream(is);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"1d6028dbe4a16095efe9f1651fe1a8e88d683e92":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8620c64e323e74078214cf931e505179d14c888e":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"ad94625fb8d088209f46650c8097196fec67f00c":["7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9"],"7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["8620c64e323e74078214cf931e505179d14c888e"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92"],"1d6028dbe4a16095efe9f1651fe1a8e88d683e92":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8620c64e323e74078214cf931e505179d14c888e":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["8620c64e323e74078214cf931e505179d14c888e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9":["ad94625fb8d088209f46650c8097196fec67f00c"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}