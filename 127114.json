{"path":"solr/core/src/java/org/apache/solr/search/JoinQuery.JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher,ScoreMode,float).mjava","commits":[{"id":"1e1491db4de13536b70146fc5a8f03101f0f84de","date":1593014806,"type":1,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery.JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher,ScoreMode,float).mjava","sourceNew":"    public JoinQueryWeight(SolrIndexSearcher searcher, ScoreMode scoreMode, float boost) {\n      super(JoinQuery.this, boost);\n      this.scoreMode = scoreMode;\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","sourceOld":"    public JoinQueryWeight(SolrIndexSearcher searcher, ScoreMode scoreMode, float boost) {\n      super(JoinQuery.this, boost);\n      this.scoreMode = scoreMode;\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e1491db4de13536b70146fc5a8f03101f0f84de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e1491db4de13536b70146fc5a8f03101f0f84de"]},"commit2Childs":{"1e1491db4de13536b70146fc5a8f03101f0f84de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e1491db4de13536b70146fc5a8f03101f0f84de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}