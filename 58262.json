{"path":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,boolean,Analyzer,MaxFieldLength).mjava","commits":[{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,boolean,Analyzer,MaxFieldLength).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param autoCommit see <a href=\"#autoCommit\">above</a>\n   * @param a the analyzer to use\n   * @param mfl whether or not to limit field lengths\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, boolean autoCommit, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, null, autoCommit, mfl.getLimit());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2471b6d10532bd030255898b2d4a4c228b37b7a8","date":1202408541,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,boolean,Analyzer,MaxFieldLength).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,boolean,Analyzer,MaxFieldLength).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param autoCommit see <a href=\"#autoCommit\">above</a>\n   * @param a the analyzer to use\n   * @param mfl Maximum field length: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, boolean autoCommit, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, null, autoCommit, mfl.getLimit());\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param autoCommit see <a href=\"#autoCommit\">above</a>\n   * @param a the analyzer to use\n   * @param mfl whether or not to limit field lengths\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, boolean autoCommit, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, null, autoCommit, mfl.getLimit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,boolean,Analyzer,MaxFieldLength).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,boolean,Analyzer,MaxFieldLength).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param autoCommit see <a href=\"#autoCommit\">above</a>\n   * @param a the analyzer to use\n   * @param mfl Maximum field length: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   * @deprecated This will be removed in 3.0, when\n   * autoCommit will be hardwired to false.  Use {@link\n   * #IndexWriter(Directory,Analyzer,MaxFieldLength)}\n   * instead, and call {@link #commit} when needed.\n   */\n  public IndexWriter(Directory d, boolean autoCommit, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, null, autoCommit, mfl.getLimit());\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param autoCommit see <a href=\"#autoCommit\">above</a>\n   * @param a the analyzer to use\n   * @param mfl Maximum field length: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, boolean autoCommit, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, null, autoCommit, mfl.getLimit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05ec4e7e3569b6c85ac07e8813a5d5ed5d1ef6dc","date":1221503613,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,boolean,Analyzer,MaxFieldLength).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,boolean,Analyzer,MaxFieldLength).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param autoCommit see <a href=\"#autoCommit\">above</a>\n   * @param a the analyzer to use\n   * @param mfl Maximum field length: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   * @deprecated This will be removed in 3.0, when\n   * autoCommit will be hardwired to false.  Use {@link\n   * #IndexWriter(Directory,Analyzer,MaxFieldLength)}\n   * instead, and call {@link #commit()} when needed.\n   */\n  public IndexWriter(Directory d, boolean autoCommit, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, null, autoCommit, mfl.getLimit());\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param autoCommit see <a href=\"#autoCommit\">above</a>\n   * @param a the analyzer to use\n   * @param mfl Maximum field length: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   * @deprecated This will be removed in 3.0, when\n   * autoCommit will be hardwired to false.  Use {@link\n   * #IndexWriter(Directory,Analyzer,MaxFieldLength)}\n   * instead, and call {@link #commit} when needed.\n   */\n  public IndexWriter(Directory d, boolean autoCommit, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, null, autoCommit, mfl.getLimit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,boolean,Analyzer,MaxFieldLength).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param autoCommit see <a href=\"#autoCommit\">above</a>\n   * @param a the analyzer to use\n   * @param mfl Maximum field length: LIMITED, UNLIMITED, or user-specified\n   *   via the MaxFieldLength constructor.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   * @deprecated This will be removed in 3.0, when\n   * autoCommit will be hardwired to false.  Use {@link\n   * #IndexWriter(Directory,Analyzer,MaxFieldLength)}\n   * instead, and call {@link #commit()} when needed.\n   */\n  public IndexWriter(Directory d, boolean autoCommit, Analyzer a, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, null, autoCommit, mfl.getLimit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["05ec4e7e3569b6c85ac07e8813a5d5ed5d1ef6dc"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["2471b6d10532bd030255898b2d4a4c228b37b7a8"],"05ec4e7e3569b6c85ac07e8813a5d5ed5d1ef6dc":["e82780afe6097066eb5befb86e9432f077667e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"2471b6d10532bd030255898b2d4a4c228b37b7a8":["235efcba838a273934c5dd0ef66bb07c7fb0d718"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["2471b6d10532bd030255898b2d4a4c228b37b7a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"e82780afe6097066eb5befb86e9432f077667e3d":["05ec4e7e3569b6c85ac07e8813a5d5ed5d1ef6dc"],"05ec4e7e3569b6c85ac07e8813a5d5ed5d1ef6dc":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"2471b6d10532bd030255898b2d4a4c228b37b7a8":["e82780afe6097066eb5befb86e9432f077667e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}