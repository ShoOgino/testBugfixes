{"path":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    Directory ramDir = new RAMDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    Directory ramDir = new RAMDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = new RAMDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    Directory ramDir = new RAMDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = new MockRAMDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = new RAMDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Random random = newRandom();\n    Directory ramDir = newDirectory(random);\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = new MockRAMDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Random random = newRandom();\n    Directory ramDir = newDirectory(random);\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = new RAMDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer();\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testStopWordSearching().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStopWordSearching().mjava","sourceNew":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testStopWordSearching() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    Directory ramDir = newDirectory();\n    IndexWriter iw =  new IndexWriter(ramDir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(newField(\"body\", \"blah the footest blah\", Field.Store.NO, Field.Index.ANALYZED));\n    iw.addDocument(doc);\n    iw.close();\n    \n    MultiFieldQueryParser mfqp = \n      new MultiFieldQueryParser(TEST_VERSION_CURRENT, new String[] {\"body\"}, analyzer);\n    mfqp.setDefaultOperator(QueryParser.Operator.AND);\n    Query q = mfqp.parse(\"the footest\");\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    is.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","132903c28af3aa6f67284b78de91c0f0a99488c2"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}