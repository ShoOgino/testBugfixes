{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#loadDecodeAndCacheBlob(String,BlobRepository.Decoder[Object]).mjava","commits":[{"id":"5fab1d180f47e9924e0e56501b42034b3476f2b1","date":1460974879,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadDecodeAndCacheBlob(String,BlobRepository.Decoder[Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convenience method to load a blob. This method minimizes the degree to which component and other code needs \n   * to depend on the structure of solr's object graph and ensures that a proper close hook is registered. This method \n   * should normally be called in {@link SolrCoreAware#inform(SolrCore)}, and should never be called during request\n   * processing. The Decoder will only run on the first invocations, subsequent invocations will return the \n   * cached object. \n   * \n   * @param key A key in the format of name/version for a blob stored in the .system blob store via the Blob Store API\n   * @param decoder a decoder with which to convert the blob into a Java Object representation (first time only)\n   * @return a reference to the blob that has already cached the decoded version.\n   */\n  public BlobRepository.BlobContentRef loadDecodeAndCacheBlob(String key, BlobRepository.Decoder<Object> decoder) {\n    // make sure component authors don't give us oddball keys with no version...\n    if (!BlobRepository.BLOB_KEY_PATTERN_CHECKER.matcher(key).matches()) {\n      throw new IllegalArgumentException(\"invalid key format, must end in /N where N is the version number\");\n    }\n    CoreContainer coreContainer = getCoreDescriptor().getCoreContainer();\n    // define the blob\n    BlobRepository.BlobContentRef blobRef = coreContainer.getBlobRepository().getBlobIncRef(key, decoder);\n    addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        core.getCoreDescriptor().getCoreContainer().getBlobRepository().decrementBlobRefCount(blobRef);\n      }\n    });\n    return blobRef;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadDecodeAndCacheBlob(String,BlobRepository.Decoder[Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convenience method to load a blob. This method minimizes the degree to which component and other code needs \n   * to depend on the structure of solr's object graph and ensures that a proper close hook is registered. This method \n   * should normally be called in {@link SolrCoreAware#inform(SolrCore)}, and should never be called during request\n   * processing. The Decoder will only run on the first invocations, subsequent invocations will return the \n   * cached object. \n   * \n   * @param key A key in the format of name/version for a blob stored in the .system blob store via the Blob Store API\n   * @param decoder a decoder with which to convert the blob into a Java Object representation (first time only)\n   * @return a reference to the blob that has already cached the decoded version.\n   */\n  public BlobRepository.BlobContentRef loadDecodeAndCacheBlob(String key, BlobRepository.Decoder<Object> decoder) {\n    // make sure component authors don't give us oddball keys with no version...\n    if (!BlobRepository.BLOB_KEY_PATTERN_CHECKER.matcher(key).matches()) {\n      throw new IllegalArgumentException(\"invalid key format, must end in /N where N is the version number\");\n    }\n    CoreContainer coreContainer = getCoreDescriptor().getCoreContainer();\n    // define the blob\n    BlobRepository.BlobContentRef blobRef = coreContainer.getBlobRepository().getBlobIncRef(key, decoder);\n    addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        core.getCoreDescriptor().getCoreContainer().getBlobRepository().decrementBlobRefCount(blobRef);\n      }\n    });\n    return blobRef;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadDecodeAndCacheBlob(String,BlobRepository.Decoder[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#loadDecodeAndCacheBlob(String,BlobRepository.Decoder[Object]).mjava","sourceNew":"  /**\n   * Convenience method to load a blob. This method minimizes the degree to which component and other code needs \n   * to depend on the structure of solr's object graph and ensures that a proper close hook is registered. This method \n   * should normally be called in {@link SolrCoreAware#inform(SolrCore)}, and should never be called during request\n   * processing. The Decoder will only run on the first invocations, subsequent invocations will return the \n   * cached object. \n   * \n   * @param key A key in the format of name/version for a blob stored in the .system blob store via the Blob Store API\n   * @param decoder a decoder with which to convert the blob into a Java Object representation (first time only)\n   * @return a reference to the blob that has already cached the decoded version.\n   */\n  public BlobRepository.BlobContentRef loadDecodeAndCacheBlob(String key, BlobRepository.Decoder<Object> decoder) {\n    // make sure component authors don't give us oddball keys with no version...\n    if (!BlobRepository.BLOB_KEY_PATTERN_CHECKER.matcher(key).matches()) {\n      throw new IllegalArgumentException(\"invalid key format, must end in /N where N is the version number\");\n    }\n    // define the blob\n    BlobRepository.BlobContentRef blobRef = coreContainer.getBlobRepository().getBlobIncRef(key, decoder);\n    addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        coreContainer.getBlobRepository().decrementBlobRefCount(blobRef);\n      }\n    });\n    return blobRef;\n  }\n\n","sourceOld":"  /**\n   * Convenience method to load a blob. This method minimizes the degree to which component and other code needs \n   * to depend on the structure of solr's object graph and ensures that a proper close hook is registered. This method \n   * should normally be called in {@link SolrCoreAware#inform(SolrCore)}, and should never be called during request\n   * processing. The Decoder will only run on the first invocations, subsequent invocations will return the \n   * cached object. \n   * \n   * @param key A key in the format of name/version for a blob stored in the .system blob store via the Blob Store API\n   * @param decoder a decoder with which to convert the blob into a Java Object representation (first time only)\n   * @return a reference to the blob that has already cached the decoded version.\n   */\n  public BlobRepository.BlobContentRef loadDecodeAndCacheBlob(String key, BlobRepository.Decoder<Object> decoder) {\n    // make sure component authors don't give us oddball keys with no version...\n    if (!BlobRepository.BLOB_KEY_PATTERN_CHECKER.matcher(key).matches()) {\n      throw new IllegalArgumentException(\"invalid key format, must end in /N where N is the version number\");\n    }\n    CoreContainer coreContainer = getCoreDescriptor().getCoreContainer();\n    // define the blob\n    BlobRepository.BlobContentRef blobRef = coreContainer.getBlobRepository().getBlobIncRef(key, decoder);\n    addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        core.getCoreDescriptor().getCoreContainer().getBlobRepository().decrementBlobRefCount(blobRef);\n      }\n    });\n    return blobRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadDecodeAndCacheBlob(String,BlobRepository.Decoder[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#loadDecodeAndCacheBlob(String,BlobRepository.Decoder[Object]).mjava","sourceNew":"  /**\n   * Convenience method to load a blob. This method minimizes the degree to which component and other code needs \n   * to depend on the structure of solr's object graph and ensures that a proper close hook is registered. This method \n   * should normally be called in {@link SolrCoreAware#inform(SolrCore)}, and should never be called during request\n   * processing. The Decoder will only run on the first invocations, subsequent invocations will return the \n   * cached object. \n   * \n   * @param key A key in the format of name/version for a blob stored in the .system blob store via the Blob Store API\n   * @param decoder a decoder with which to convert the blob into a Java Object representation (first time only)\n   * @return a reference to the blob that has already cached the decoded version.\n   */\n  public BlobRepository.BlobContentRef loadDecodeAndCacheBlob(String key, BlobRepository.Decoder<Object> decoder) {\n    // make sure component authors don't give us oddball keys with no version...\n    if (!BlobRepository.BLOB_KEY_PATTERN_CHECKER.matcher(key).matches()) {\n      throw new IllegalArgumentException(\"invalid key format, must end in /N where N is the version number\");\n    }\n    // define the blob\n    BlobRepository.BlobContentRef blobRef = coreContainer.getBlobRepository().getBlobIncRef(key, decoder);\n    addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        coreContainer.getBlobRepository().decrementBlobRefCount(blobRef);\n      }\n    });\n    return blobRef;\n  }\n\n","sourceOld":"  /**\n   * Convenience method to load a blob. This method minimizes the degree to which component and other code needs \n   * to depend on the structure of solr's object graph and ensures that a proper close hook is registered. This method \n   * should normally be called in {@link SolrCoreAware#inform(SolrCore)}, and should never be called during request\n   * processing. The Decoder will only run on the first invocations, subsequent invocations will return the \n   * cached object. \n   * \n   * @param key A key in the format of name/version for a blob stored in the .system blob store via the Blob Store API\n   * @param decoder a decoder with which to convert the blob into a Java Object representation (first time only)\n   * @return a reference to the blob that has already cached the decoded version.\n   */\n  public BlobRepository.BlobContentRef loadDecodeAndCacheBlob(String key, BlobRepository.Decoder<Object> decoder) {\n    // make sure component authors don't give us oddball keys with no version...\n    if (!BlobRepository.BLOB_KEY_PATTERN_CHECKER.matcher(key).matches()) {\n      throw new IllegalArgumentException(\"invalid key format, must end in /N where N is the version number\");\n    }\n    CoreContainer coreContainer = getCoreDescriptor().getCoreContainer();\n    // define the blob\n    BlobRepository.BlobContentRef blobRef = coreContainer.getBlobRepository().getBlobIncRef(key, decoder);\n    addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        core.getCoreDescriptor().getCoreContainer().getBlobRepository().decrementBlobRefCount(blobRef);\n      }\n    });\n    return blobRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadDecodeAndCacheBlob(String,BlobRepository.Decoder[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#loadDecodeAndCacheBlob(String,BlobRepository.Decoder[Object]).mjava","sourceNew":"  /**\n   * Convenience method to load a blob. This method minimizes the degree to which component and other code needs \n   * to depend on the structure of solr's object graph and ensures that a proper close hook is registered. This method \n   * should normally be called in {@link SolrCoreAware#inform(SolrCore)}, and should never be called during request\n   * processing. The Decoder will only run on the first invocations, subsequent invocations will return the \n   * cached object. \n   * \n   * @param key A key in the format of name/version for a blob stored in the\n   *            {@link CollectionAdminParams#SYSTEM_COLL} blob store via the Blob Store API\n   * @param decoder a decoder with which to convert the blob into a Java Object representation (first time only)\n   * @return a reference to the blob that has already cached the decoded version.\n   */\n  public BlobRepository.BlobContentRef loadDecodeAndCacheBlob(String key, BlobRepository.Decoder<Object> decoder) {\n    // make sure component authors don't give us oddball keys with no version...\n    if (!BlobRepository.BLOB_KEY_PATTERN_CHECKER.matcher(key).matches()) {\n      throw new IllegalArgumentException(\"invalid key format, must end in /N where N is the version number\");\n    }\n    // define the blob\n    BlobRepository.BlobContentRef blobRef = coreContainer.getBlobRepository().getBlobIncRef(key, decoder);\n    addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        coreContainer.getBlobRepository().decrementBlobRefCount(blobRef);\n      }\n    });\n    return blobRef;\n  }\n\n","sourceOld":"  /**\n   * Convenience method to load a blob. This method minimizes the degree to which component and other code needs \n   * to depend on the structure of solr's object graph and ensures that a proper close hook is registered. This method \n   * should normally be called in {@link SolrCoreAware#inform(SolrCore)}, and should never be called during request\n   * processing. The Decoder will only run on the first invocations, subsequent invocations will return the \n   * cached object. \n   * \n   * @param key A key in the format of name/version for a blob stored in the .system blob store via the Blob Store API\n   * @param decoder a decoder with which to convert the blob into a Java Object representation (first time only)\n   * @return a reference to the blob that has already cached the decoded version.\n   */\n  public BlobRepository.BlobContentRef loadDecodeAndCacheBlob(String key, BlobRepository.Decoder<Object> decoder) {\n    // make sure component authors don't give us oddball keys with no version...\n    if (!BlobRepository.BLOB_KEY_PATTERN_CHECKER.matcher(key).matches()) {\n      throw new IllegalArgumentException(\"invalid key format, must end in /N where N is the version number\");\n    }\n    // define the blob\n    BlobRepository.BlobContentRef blobRef = coreContainer.getBlobRepository().getBlobIncRef(key, decoder);\n    addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        coreContainer.getBlobRepository().decrementBlobRefCount(blobRef);\n      }\n    });\n    return blobRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadDecodeAndCacheBlob(String,BlobRepository.Decoder[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#loadDecodeAndCacheBlob(String,BlobRepository.Decoder[Object]).mjava","sourceNew":"  /**\n   * Convenience method to load a blob. This method minimizes the degree to which component and other code needs \n   * to depend on the structure of solr's object graph and ensures that a proper close hook is registered. This method \n   * should normally be called in {@link SolrCoreAware#inform(SolrCore)}, and should never be called during request\n   * processing. The Decoder will only run on the first invocations, subsequent invocations will return the \n   * cached object. \n   * \n   * @param key A key in the format of name/version for a blob stored in the\n   *            {@link CollectionAdminParams#SYSTEM_COLL} blob store via the Blob Store API\n   * @param decoder a decoder with which to convert the blob into a Java Object representation (first time only)\n   * @return a reference to the blob that has already cached the decoded version.\n   */\n  public BlobRepository.BlobContentRef loadDecodeAndCacheBlob(String key, BlobRepository.Decoder<Object> decoder) {\n    // make sure component authors don't give us oddball keys with no version...\n    if (!BlobRepository.BLOB_KEY_PATTERN_CHECKER.matcher(key).matches()) {\n      throw new IllegalArgumentException(\"invalid key format, must end in /N where N is the version number\");\n    }\n    // define the blob\n    BlobRepository.BlobContentRef blobRef = coreContainer.getBlobRepository().getBlobIncRef(key, decoder);\n    addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        coreContainer.getBlobRepository().decrementBlobRefCount(blobRef);\n      }\n    });\n    return blobRef;\n  }\n\n","sourceOld":"  /**\n   * Convenience method to load a blob. This method minimizes the degree to which component and other code needs \n   * to depend on the structure of solr's object graph and ensures that a proper close hook is registered. This method \n   * should normally be called in {@link SolrCoreAware#inform(SolrCore)}, and should never be called during request\n   * processing. The Decoder will only run on the first invocations, subsequent invocations will return the \n   * cached object. \n   * \n   * @param key A key in the format of name/version for a blob stored in the .system blob store via the Blob Store API\n   * @param decoder a decoder with which to convert the blob into a Java Object representation (first time only)\n   * @return a reference to the blob that has already cached the decoded version.\n   */\n  public BlobRepository.BlobContentRef loadDecodeAndCacheBlob(String key, BlobRepository.Decoder<Object> decoder) {\n    // make sure component authors don't give us oddball keys with no version...\n    if (!BlobRepository.BLOB_KEY_PATTERN_CHECKER.matcher(key).matches()) {\n      throw new IllegalArgumentException(\"invalid key format, must end in /N where N is the version number\");\n    }\n    // define the blob\n    BlobRepository.BlobContentRef blobRef = coreContainer.getBlobRepository().getBlobIncRef(key, decoder);\n    addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        coreContainer.getBlobRepository().decrementBlobRefCount(blobRef);\n      }\n    });\n    return blobRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadDecodeAndCacheBlob(String,BlobRepository.Decoder[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#loadDecodeAndCacheBlob(String,BlobRepository.Decoder[Object]).mjava","sourceNew":"  /**\n   * Convenience method to load a blob. This method minimizes the degree to which component and other code needs \n   * to depend on the structure of solr's object graph and ensures that a proper close hook is registered. This method \n   * should normally be called in {@link SolrCoreAware#inform(SolrCore)}, and should never be called during request\n   * processing. The Decoder will only run on the first invocations, subsequent invocations will return the \n   * cached object. \n   * \n   * @param key A key in the format of name/version for a blob stored in the\n   *            {@link CollectionAdminParams#SYSTEM_COLL} blob store via the Blob Store API\n   * @param decoder a decoder with which to convert the blob into a Java Object representation (first time only)\n   * @return a reference to the blob that has already cached the decoded version.\n   */\n  public BlobRepository.BlobContentRef loadDecodeAndCacheBlob(String key, BlobRepository.Decoder<Object> decoder) {\n    // make sure component authors don't give us oddball keys with no version...\n    if (!BlobRepository.BLOB_KEY_PATTERN_CHECKER.matcher(key).matches()) {\n      throw new IllegalArgumentException(\"invalid key format, must end in /N where N is the version number\");\n    }\n    // define the blob\n    BlobRepository.BlobContentRef blobRef = coreContainer.getBlobRepository().getBlobIncRef(key, decoder);\n    addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        coreContainer.getBlobRepository().decrementBlobRefCount(blobRef);\n      }\n    });\n    return blobRef;\n  }\n\n","sourceOld":"  /**\n   * Convenience method to load a blob. This method minimizes the degree to which component and other code needs \n   * to depend on the structure of solr's object graph and ensures that a proper close hook is registered. This method \n   * should normally be called in {@link SolrCoreAware#inform(SolrCore)}, and should never be called during request\n   * processing. The Decoder will only run on the first invocations, subsequent invocations will return the \n   * cached object. \n   * \n   * @param key A key in the format of name/version for a blob stored in the .system blob store via the Blob Store API\n   * @param decoder a decoder with which to convert the blob into a Java Object representation (first time only)\n   * @return a reference to the blob that has already cached the decoded version.\n   */\n  public BlobRepository.BlobContentRef loadDecodeAndCacheBlob(String key, BlobRepository.Decoder<Object> decoder) {\n    // make sure component authors don't give us oddball keys with no version...\n    if (!BlobRepository.BLOB_KEY_PATTERN_CHECKER.matcher(key).matches()) {\n      throw new IllegalArgumentException(\"invalid key format, must end in /N where N is the version number\");\n    }\n    // define the blob\n    BlobRepository.BlobContentRef blobRef = coreContainer.getBlobRepository().getBlobIncRef(key, decoder);\n    addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        coreContainer.getBlobRepository().decrementBlobRefCount(blobRef);\n      }\n    });\n    return blobRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadDecodeAndCacheBlob(String,BlobRepository.Decoder[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#loadDecodeAndCacheBlob(String,BlobRepository.Decoder[Object]).mjava","sourceNew":"  /**\n   * Convenience method to load a blob. This method minimizes the degree to which component and other code needs\n   * to depend on the structure of solr's object graph and ensures that a proper close hook is registered. This method\n   * should normally be called in {@link SolrCoreAware#inform(SolrCore)}, and should never be called during request\n   * processing. The Decoder will only run on the first invocations, subsequent invocations will return the\n   * cached object.\n   *\n   * @param key     A key in the format of name/version for a blob stored in the\n   *                {@link CollectionAdminParams#SYSTEM_COLL} blob store via the Blob Store API\n   * @param decoder a decoder with which to convert the blob into a Java Object representation (first time only)\n   * @return a reference to the blob that has already cached the decoded version.\n   */\n  public BlobRepository.BlobContentRef loadDecodeAndCacheBlob(String key, BlobRepository.Decoder<Object> decoder) {\n    // make sure component authors don't give us oddball keys with no version...\n    if (!BlobRepository.BLOB_KEY_PATTERN_CHECKER.matcher(key).matches()) {\n      throw new IllegalArgumentException(\"invalid key format, must end in /N where N is the version number\");\n    }\n    // define the blob\n    BlobRepository.BlobContentRef blobRef = coreContainer.getBlobRepository().getBlobIncRef(key, decoder);\n    addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        coreContainer.getBlobRepository().decrementBlobRefCount(blobRef);\n      }\n    });\n    return blobRef;\n  }\n\n","sourceOld":"  /**\n   * Convenience method to load a blob. This method minimizes the degree to which component and other code needs \n   * to depend on the structure of solr's object graph and ensures that a proper close hook is registered. This method \n   * should normally be called in {@link SolrCoreAware#inform(SolrCore)}, and should never be called during request\n   * processing. The Decoder will only run on the first invocations, subsequent invocations will return the \n   * cached object. \n   * \n   * @param key A key in the format of name/version for a blob stored in the\n   *            {@link CollectionAdminParams#SYSTEM_COLL} blob store via the Blob Store API\n   * @param decoder a decoder with which to convert the blob into a Java Object representation (first time only)\n   * @return a reference to the blob that has already cached the decoded version.\n   */\n  public BlobRepository.BlobContentRef loadDecodeAndCacheBlob(String key, BlobRepository.Decoder<Object> decoder) {\n    // make sure component authors don't give us oddball keys with no version...\n    if (!BlobRepository.BLOB_KEY_PATTERN_CHECKER.matcher(key).matches()) {\n      throw new IllegalArgumentException(\"invalid key format, must end in /N where N is the version number\");\n    }\n    // define the blob\n    BlobRepository.BlobContentRef blobRef = coreContainer.getBlobRepository().getBlobIncRef(key, decoder);\n    addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        coreContainer.getBlobRepository().decrementBlobRefCount(blobRef);\n      }\n    });\n    return blobRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#loadDecodeAndCacheBlob(String,BlobRepository.Decoder[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#loadDecodeAndCacheBlob(String,BlobRepository.Decoder[Object]).mjava","sourceNew":"  /**\n   * Convenience method to load a blob. This method minimizes the degree to which component and other code needs\n   * to depend on the structure of solr's object graph and ensures that a proper close hook is registered. This method\n   * should normally be called in {@link SolrCoreAware#inform(SolrCore)}, and should never be called during request\n   * processing. The Decoder will only run on the first invocations, subsequent invocations will return the\n   * cached object.\n   *\n   * @param key     A key in the format of name/version for a blob stored in the\n   *                {@link CollectionAdminParams#SYSTEM_COLL} blob store via the Blob Store API\n   * @param decoder a decoder with which to convert the blob into a Java Object representation (first time only)\n   * @return a reference to the blob that has already cached the decoded version.\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public BlobRepository.BlobContentRef loadDecodeAndCacheBlob(String key, BlobRepository.Decoder<Object> decoder) {\n    // make sure component authors don't give us oddball keys with no version...\n    if (!BlobRepository.BLOB_KEY_PATTERN_CHECKER.matcher(key).matches()) {\n      throw new IllegalArgumentException(\"invalid key format, must end in /N where N is the version number\");\n    }\n    // define the blob\n    @SuppressWarnings({\"rawtypes\"})\n    BlobRepository.BlobContentRef blobRef = coreContainer.getBlobRepository().getBlobIncRef(key, decoder);\n    addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        coreContainer.getBlobRepository().decrementBlobRefCount(blobRef);\n      }\n    });\n    return blobRef;\n  }\n\n","sourceOld":"  /**\n   * Convenience method to load a blob. This method minimizes the degree to which component and other code needs\n   * to depend on the structure of solr's object graph and ensures that a proper close hook is registered. This method\n   * should normally be called in {@link SolrCoreAware#inform(SolrCore)}, and should never be called during request\n   * processing. The Decoder will only run on the first invocations, subsequent invocations will return the\n   * cached object.\n   *\n   * @param key     A key in the format of name/version for a blob stored in the\n   *                {@link CollectionAdminParams#SYSTEM_COLL} blob store via the Blob Store API\n   * @param decoder a decoder with which to convert the blob into a Java Object representation (first time only)\n   * @return a reference to the blob that has already cached the decoded version.\n   */\n  public BlobRepository.BlobContentRef loadDecodeAndCacheBlob(String key, BlobRepository.Decoder<Object> decoder) {\n    // make sure component authors don't give us oddball keys with no version...\n    if (!BlobRepository.BLOB_KEY_PATTERN_CHECKER.matcher(key).matches()) {\n      throw new IllegalArgumentException(\"invalid key format, must end in /N where N is the version number\");\n    }\n    // define the blob\n    BlobRepository.BlobContentRef blobRef = coreContainer.getBlobRepository().getBlobIncRef(key, decoder);\n    addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        coreContainer.getBlobRepository().decrementBlobRefCount(blobRef);\n      }\n    });\n    return blobRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["713122036535651642e6d4fe57ce12b449e18473"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","55ed5a78f8a4b37108ac73a894a105db562d303e"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["560c18d71dad43d675158783c3840f8c80d6d39c"],"713122036535651642e6d4fe57ce12b449e18473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["713122036535651642e6d4fe57ce12b449e18473"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"713122036535651642e6d4fe57ce12b449e18473":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["713122036535651642e6d4fe57ce12b449e18473","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["713122036535651642e6d4fe57ce12b449e18473"],"560c18d71dad43d675158783c3840f8c80d6d39c":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}