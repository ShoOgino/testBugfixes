{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorFC[FacetField]#collectDocs().mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorFC[FacetField]#collectDocs().mjava","pathOld":"/dev/null","sourceNew":"  protected void collectDocs() throws IOException {\n    final List<LeafReaderContext> leaves = fcontext.searcher.getIndexReader().leaves();\n    final Iterator<LeafReaderContext> ctxIt = leaves.iterator();\n    LeafReaderContext ctx = null;\n    int segBase = 0;\n    int segMax;\n    int adjustedMax = 0;\n    for (DocIterator docsIt = fcontext.base.iterator(); docsIt.hasNext(); ) {\n      final int doc = docsIt.nextDoc();\n      if (doc >= adjustedMax) {\n        do {\n          ctx = ctxIt.next();\n          segBase = ctx.docBase;\n          segMax = ctx.reader().maxDoc();\n          adjustedMax = segBase + segMax;\n        } while (doc >= adjustedMax);\n        assert doc >= ctx.docBase;\n        setNextReader(ctx);\n      }\n\n      int term = sortedDocValues.getOrd( doc );\n      int arrIdx = term - startTermIndex;\n      if (arrIdx>=0 && arrIdx<nTerms) {\n        countAcc.incrementCount(arrIdx, 1);\n        collect(doc - segBase, arrIdx);  // per-seg collectors\n        if (allBucketsSlot >= 0 && term >= 0) {\n          countAcc.incrementCount(allBucketsSlot, 1);\n          collect(doc - segBase, allBucketsSlot);  // per-seg collectors\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorFC[FacetField]#collectDocs().mjava","pathOld":"/dev/null","sourceNew":"  protected void collectDocs() throws IOException {\n    final List<LeafReaderContext> leaves = fcontext.searcher.getIndexReader().leaves();\n    final Iterator<LeafReaderContext> ctxIt = leaves.iterator();\n    LeafReaderContext ctx = null;\n    int segBase = 0;\n    int segMax;\n    int adjustedMax = 0;\n    for (DocIterator docsIt = fcontext.base.iterator(); docsIt.hasNext(); ) {\n      final int doc = docsIt.nextDoc();\n      if (doc >= adjustedMax) {\n        do {\n          ctx = ctxIt.next();\n          segBase = ctx.docBase;\n          segMax = ctx.reader().maxDoc();\n          adjustedMax = segBase + segMax;\n        } while (doc >= adjustedMax);\n        assert doc >= ctx.docBase;\n        setNextReader(ctx);\n      }\n\n      int term = sortedDocValues.getOrd( doc );\n      int arrIdx = term - startTermIndex;\n      if (arrIdx>=0 && arrIdx<nTerms) {\n        countAcc.incrementCount(arrIdx, 1);\n        collect(doc - segBase, arrIdx);  // per-seg collectors\n        if (allBucketsSlot >= 0 && term >= 0) {\n          countAcc.incrementCount(allBucketsSlot, 1);\n          collect(doc - segBase, allBucketsSlot);  // per-seg collectors\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e13d0d4d8b6dc352cb304974502b9a36c153f78","date":1436492687,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/SlotAcc#collect(DocSet,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorFC[FacetField]#collectDocs().mjava","sourceNew":"  public int collect(DocSet docs, int slot) throws IOException {\n    int count = 0;\n    SolrIndexSearcher searcher = fcontext.searcher;\n\n    final List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    final Iterator<LeafReaderContext> ctxIt = leaves.iterator();\n    LeafReaderContext ctx = null;\n    int segBase = 0;\n    int segMax;\n    int adjustedMax = 0;\n    for (DocIterator docsIt = docs.iterator(); docsIt.hasNext(); ) {\n      final int doc = docsIt.nextDoc();\n      if (doc >= adjustedMax) {\n        do {\n          ctx = ctxIt.next();\n          if (ctx == null) {\n            // should be impossible\n            throw new RuntimeException(\"INTERNAL FACET ERROR\");\n          }\n          segBase = ctx.docBase;\n          segMax = ctx.reader().maxDoc();\n          adjustedMax = segBase + segMax;\n        } while (doc >= adjustedMax);\n        assert doc >= ctx.docBase;\n        setNextReader(ctx);\n      }\n      count++;\n      collect(doc - segBase, slot);  // per-seg collectors\n    }\n    return count;\n  }\n\n","sourceOld":"  protected void collectDocs() throws IOException {\n    final List<LeafReaderContext> leaves = fcontext.searcher.getIndexReader().leaves();\n    final Iterator<LeafReaderContext> ctxIt = leaves.iterator();\n    LeafReaderContext ctx = null;\n    int segBase = 0;\n    int segMax;\n    int adjustedMax = 0;\n    for (DocIterator docsIt = fcontext.base.iterator(); docsIt.hasNext(); ) {\n      final int doc = docsIt.nextDoc();\n      if (doc >= adjustedMax) {\n        do {\n          ctx = ctxIt.next();\n          segBase = ctx.docBase;\n          segMax = ctx.reader().maxDoc();\n          adjustedMax = segBase + segMax;\n        } while (doc >= adjustedMax);\n        assert doc >= ctx.docBase;\n        setNextReader(ctx);\n      }\n\n      int term = sortedDocValues.getOrd( doc );\n      int arrIdx = term - startTermIndex;\n      if (arrIdx>=0 && arrIdx<nTerms) {\n        countAcc.incrementCount(arrIdx, 1);\n        collect(doc - segBase, arrIdx);  // per-seg collectors\n        if (allBucketsSlot >= 0 && term >= 0) {\n          countAcc.incrementCount(allBucketsSlot, 1);\n          collect(doc - segBase, allBucketsSlot);  // per-seg collectors\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}