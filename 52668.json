{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","sourceNew":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_FIXED_SORTED, docValues, comp, mergeState.mergedDocCount);\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState.docBase, mergeState.docMaps, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, new IndexOutputBytesRefConsumer(datOut), slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_FIXED_SORTED, docValues, comp, mergeState.mergedDocCount);\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState.docBase, mergeState.docMaps, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, new IndexOutputBytesRefConsumer(datOut), slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff82b51516e4a8d24bb6182e5235be1c88b8ac2e","date":1337803615,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","sourceNew":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_FIXED_SORTED, docValues, comp, mergeState.segmentInfo.getDocCount());\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState.docBase, mergeState.docMaps, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, new IndexOutputBytesRefConsumer(datOut), slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_FIXED_SORTED, docValues, comp, mergeState.mergedDocCount);\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState.docBase, mergeState.docMaps, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, new IndexOutputBytesRefConsumer(datOut), slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","sourceNew":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_FIXED_SORTED, docValues, comp, mergeState.mergedDocCount);\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState.docBase, mergeState.docMaps, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, new IndexOutputBytesRefConsumer(datOut), slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd), PackedInts.DEFAULT);\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_FIXED_SORTED, docValues, comp, mergeState.mergedDocCount);\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState.docBase, mergeState.docMaps, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, new IndexOutputBytesRefConsumer(datOut), slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","sourceNew":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_FIXED_SORTED, docValues, comp, mergeState.segmentInfo.getDocCount());\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState.docBase, mergeState.docMaps, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, new IndexOutputBytesRefConsumer(datOut), slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd), PackedInts.DEFAULT);\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_FIXED_SORTED, docValues, comp, mergeState.mergedDocCount);\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState.docBase, mergeState.docMaps, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, new IndexOutputBytesRefConsumer(datOut), slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd), PackedInts.DEFAULT);\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_FIXED_SORTED, docValues, comp, mergeState.segmentInfo.getDocCount());\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState.docBase, mergeState.docMaps, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, new IndexOutputBytesRefConsumer(datOut), slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd), PackedInts.DEFAULT);\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/FixedSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        final MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_FIXED_SORTED, docValues, comp, mergeState.segmentInfo.getDocCount());\n        List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState.docBase, mergeState.docMaps, docValues, ctx);\n        final IndexOutput datOut = getOrCreateDataOut();\n        datOut.writeInt(ctx.sizePerValues);\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, new IndexOutputBytesRefConsumer(datOut), slices);\n        \n        final IndexOutput idxOut = getOrCreateIndexOut();\n        idxOut.writeInt(maxOrd);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd), PackedInts.DEFAULT);\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["4a470c93b2b0f8f51241f52705fc110a01f27ad2","ff82b51516e4a8d24bb6182e5235be1c88b8ac2e"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"ff82b51516e4a8d24bb6182e5235be1c88b8ac2e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ff82b51516e4a8d24bb6182e5235be1c88b8ac2e","4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ff82b51516e4a8d24bb6182e5235be1c88b8ac2e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}