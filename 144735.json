{"path":"solr/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","commits":[{"id":"b967739c936b1616f0a7ed24fe5f046dfa7559ca","date":1285734295,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSortMissingFirstLast() \n  {\n    clearIndex();\n    \n    assertU(adoc(\"id\", \"M1\" ));\n    assertU(adoc( getDoc( \"+4\",  4 ) ));\n    assertU(adoc( getDoc( \"+5\",  5 ) ));\n    assertU(adoc( getDoc( \"-3\", -3 ) ));\n    assertU(adoc(\"id\", \"M2\" ));\n    assertU(commit());\n\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='M1']\",\n              \"//result/doc[3]/str[@name='id'][.='M2']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='M1']\",\n              \"//result/doc[4]/str[@name='id'][.='M2']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n    \n    \n    // sortMissingLast = true \n    suffix = \"_last\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true \n    suffix = \"_first\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSortMissingFirstLast() \n  {\n    clearIndex();\n    \n    assertU(adoc(\"id\", \"M1\" ));\n    assertU(adoc( getDoc( \"+4\",  4 ) ));\n    assertU(adoc( getDoc( \"+5\",  5 ) ));\n    assertU(adoc( getDoc( \"-3\", -3 ) ));\n    assertU(adoc(\"id\", \"M2\" ));\n    assertU(commit());\n\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='M1']\",\n              \"//result/doc[3]/str[@name='id'][.='M2']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='M1']\",\n              \"//result/doc[4]/str[@name='id'][.='M2']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n    \n    \n    // sortMissingLast = true \n    suffix = \"_last\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true \n    suffix = \"_first\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","pathOld":"solr/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","sourceNew":"  @Test\n  public void testSortMissingFirstLast() \n  {\n    clearIndex();\n    \n    assertU(adoc(\"id\", \"M1\" ));\n    assertU(adoc( getDoc( \"+4\",  4 ) ));\n    assertU(adoc( getDoc( \"+5\",  5 ) ));\n    assertU(adoc( getDoc( \"-3\", -3 ) ));\n    assertU(adoc(\"id\", \"M2\" ));\n    assertU(commit());\n\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='M1']\",\n              \"//result/doc[3]/str[@name='id'][.='M2']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='M1']\",\n              \"//result/doc[4]/str[@name='id'][.='M2']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n    \n    \n    // sortMissingLast = true \n    suffix = \"_last\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true \n    suffix = \"_first\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortMissingFirstLast() \n  {\n    clearIndex();\n    \n    assertU(adoc(\"id\", \"M1\" ));\n    assertU(adoc( getDoc( \"+4\",  4 ) ));\n    assertU(adoc( getDoc( \"+5\",  5 ) ));\n    assertU(adoc( getDoc( \"-3\", -3 ) ));\n    assertU(adoc(\"id\", \"M2\" ));\n    assertU(commit());\n\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='M1']\",\n              \"//result/doc[3]/str[@name='id'][.='M2']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='M1']\",\n              \"//result/doc[4]/str[@name='id'][.='M2']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n    \n    \n    // sortMissingLast = true \n    suffix = \"_last\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true \n    suffix = \"_first\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","pathOld":"solr/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","sourceNew":"  @Test\n  public void testSortMissingFirstLast() \n  {\n    clearIndex();\n    \n    assertU(adoc(\"id\", \"M1\" ));\n    assertU(adoc( getDoc( \"+4\",  4 ) ));\n    assertU(adoc( getDoc( \"+5\",  5 ) ));\n    assertU(adoc( getDoc( \"-3\", -3 ) ));\n    assertU(adoc(\"id\", \"M2\" ));\n    assertU(commit());\n\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='M1']\",\n              \"//result/doc[3]/str[@name='id'][.='M2']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='M1']\",\n              \"//result/doc[4]/str[@name='id'][.='M2']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n    \n    \n    // sortMissingLast = true \n    suffix = \"_last\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true \n    suffix = \"_first\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortMissingFirstLast() \n  {\n    clearIndex();\n    \n    assertU(adoc(\"id\", \"M1\" ));\n    assertU(adoc( getDoc( \"+4\",  4 ) ));\n    assertU(adoc( getDoc( \"+5\",  5 ) ));\n    assertU(adoc( getDoc( \"-3\", -3 ) ));\n    assertU(adoc(\"id\", \"M2\" ));\n    assertU(commit());\n\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='M1']\",\n              \"//result/doc[3]/str[@name='id'][.='M2']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='M1']\",\n              \"//result/doc[4]/str[@name='id'][.='M2']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n    \n    \n    // sortMissingLast = true \n    suffix = \"_last\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true \n    suffix = \"_first\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","pathOld":"solr/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","sourceNew":"  @Test\n  public void testSortMissingFirstLast() \n  {\n    clearIndex();\n    \n    assertU(adoc(\"id\", \"M1\" ));\n    assertU(adoc( getDoc( \"+4\",  4 ) ));\n    assertU(adoc( getDoc( \"+5\",  5 ) ));\n    assertU(adoc( getDoc( \"-3\", -3 ) ));\n    assertU(adoc(\"id\", \"M2\" ));\n    assertU(commit());\n\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='M1']\",\n              \"//result/doc[3]/str[@name='id'][.='M2']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='M1']\",\n              \"//result/doc[4]/str[@name='id'][.='M2']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n    \n    \n    // sortMissingLast = true \n    suffix = \"_last\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true \n    suffix = \"_first\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortMissingFirstLast() \n  {\n    clearIndex();\n    \n    assertU(adoc(\"id\", \"M1\" ));\n    assertU(adoc( getDoc( \"+4\",  4 ) ));\n    assertU(adoc( getDoc( \"+5\",  5 ) ));\n    assertU(adoc( getDoc( \"-3\", -3 ) ));\n    assertU(adoc(\"id\", \"M2\" ));\n    assertU(commit());\n\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='M1']\",\n              \"//result/doc[3]/str[@name='id'][.='M2']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='M1']\",\n              \"//result/doc[4]/str[@name='id'][.='M2']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n    \n    \n    // sortMissingLast = true \n    suffix = \"_last\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true \n    suffix = \"_first\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["b967739c936b1616f0a7ed24fe5f046dfa7559ca"],"b967739c936b1616f0a7ed24fe5f046dfa7559ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["b967739c936b1616f0a7ed24fe5f046dfa7559ca","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b967739c936b1616f0a7ed24fe5f046dfa7559ca"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b967739c936b1616f0a7ed24fe5f046dfa7559ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"b967739c936b1616f0a7ed24fe5f046dfa7559ca":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b967739c936b1616f0a7ed24fe5f046dfa7559ca","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}