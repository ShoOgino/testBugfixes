{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicaLeaderlast().mjava","commits":[{"id":"af573cf1aa31058532f304c30b68f17eeb011fbb","date":1516626771,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicaLeaderlast().mjava","pathOld":"/dev/null","sourceNew":"  public void testMoveReplicaLeaderlast(){\n\n    List<Pair<ReplicaInfo, Row>> validReplicas =  new ArrayList<>();\n    Replica replica = new Replica(\"r1\", Utils.makeMap(\"leader\", \"true\"));\n    ReplicaInfo replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replicaInfo = new ReplicaInfo(\"r4\", \"c1_s2_r1\",\"c1\", \"s2\", Replica.Type.NRT, \"n1\", Collections.singletonMap(\"leader\", \"true\"));\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    replica = new Replica(\"r2\", Utils.makeMap(\"leader\", false));\n    replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replica = new Replica(\"r3\", Utils.makeMap(\"leader\", false));\n    replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    validReplicas.sort(MoveReplicaSuggester.leaderLast);\n    assertEquals(\"r2\", validReplicas.get(0).first().getName());\n    assertEquals(\"r3\", validReplicas.get(1).first().getName());\n    assertEquals(\"r1\", validReplicas.get(2).first().getName());\n    assertEquals(\"r4\", validReplicas.get(3).first().getName());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicaLeaderlast().mjava","pathOld":"/dev/null","sourceNew":"  public void testMoveReplicaLeaderlast(){\n\n    List<Pair<ReplicaInfo, Row>> validReplicas =  new ArrayList<>();\n    Replica replica = new Replica(\"r1\", Utils.makeMap(\"leader\", \"true\"));\n    ReplicaInfo replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replicaInfo = new ReplicaInfo(\"r4\", \"c1_s2_r1\",\"c1\", \"s2\", Replica.Type.NRT, \"n1\", Collections.singletonMap(\"leader\", \"true\"));\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    replica = new Replica(\"r2\", Utils.makeMap(\"leader\", false));\n    replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replica = new Replica(\"r3\", Utils.makeMap(\"leader\", false));\n    replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    validReplicas.sort(MoveReplicaSuggester.leaderLast);\n    assertEquals(\"r2\", validReplicas.get(0).first().getName());\n    assertEquals(\"r3\", validReplicas.get(1).first().getName());\n    assertEquals(\"r1\", validReplicas.get(2).first().getName());\n    assertEquals(\"r4\", validReplicas.get(3).first().getName());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicaLeaderlast().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicaLeaderlast().mjava","sourceNew":"  public void testMoveReplicaLeaderlast() {\n\n    List<Pair<ReplicaInfo, Row>> validReplicas = new ArrayList<>();\n    Replica replica = new Replica(\"r1\", Utils.makeMap(\"leader\", \"true\"));\n    ReplicaInfo replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replicaInfo = new ReplicaInfo(\"r4\", \"c1_s2_r1\", \"c1\", \"s2\", Replica.Type.NRT, \"n1\", Collections.singletonMap(\"leader\", \"true\"));\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    replica = new Replica(\"r2\", Utils.makeMap(\"leader\", false));\n    replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replica = new Replica(\"r3\", Utils.makeMap(\"leader\", false));\n    replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    validReplicas.sort(MoveReplicaSuggester.leaderLast);\n    assertEquals(\"r2\", validReplicas.get(0).first().getName());\n    assertEquals(\"r3\", validReplicas.get(1).first().getName());\n    assertEquals(\"r1\", validReplicas.get(2).first().getName());\n    assertEquals(\"r4\", validReplicas.get(3).first().getName());\n\n  }\n\n","sourceOld":"  public void testMoveReplicaLeaderlast(){\n\n    List<Pair<ReplicaInfo, Row>> validReplicas =  new ArrayList<>();\n    Replica replica = new Replica(\"r1\", Utils.makeMap(\"leader\", \"true\"));\n    ReplicaInfo replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replicaInfo = new ReplicaInfo(\"r4\", \"c1_s2_r1\",\"c1\", \"s2\", Replica.Type.NRT, \"n1\", Collections.singletonMap(\"leader\", \"true\"));\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    replica = new Replica(\"r2\", Utils.makeMap(\"leader\", false));\n    replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replica = new Replica(\"r3\", Utils.makeMap(\"leader\", false));\n    replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    validReplicas.sort(MoveReplicaSuggester.leaderLast);\n    assertEquals(\"r2\", validReplicas.get(0).first().getName());\n    assertEquals(\"r3\", validReplicas.get(1).first().getName());\n    assertEquals(\"r1\", validReplicas.get(2).first().getName());\n    assertEquals(\"r4\", validReplicas.get(3).first().getName());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicaLeaderlast().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicaLeaderlast().mjava","sourceNew":"  public void testMoveReplicaLeaderlast() {\n\n    List<Pair<ReplicaInfo, Row>> validReplicas = new ArrayList<>();\n    Replica replica = new Replica(\"r1\", Utils.makeMap(\"leader\", \"true\"), \"c1\", \"s1\");\n    ReplicaInfo replicaInfo = new ReplicaInfo(replica.collection, replica.slice ,replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replicaInfo = new ReplicaInfo(\"r4\", \"c1_s2_r1\", \"c1\", \"s2\", Replica.Type.NRT, \"n1\", Collections.singletonMap(\"leader\", \"true\"));\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    replica = new Replica(\"r2\", Utils.makeMap(\"leader\", false),\"c1\",\"s1\");\n    replicaInfo = new ReplicaInfo(replica.collection, replica.slice, replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replica = new Replica(\"r3\", Utils.makeMap(\"leader\", false),\"c1\",\"s1\");\n    replicaInfo = new ReplicaInfo(replica.collection,replica.slice, replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    validReplicas.sort(MoveReplicaSuggester.leaderLast);\n    assertEquals(\"r2\", validReplicas.get(0).first().getName());\n    assertEquals(\"r3\", validReplicas.get(1).first().getName());\n    assertEquals(\"r1\", validReplicas.get(2).first().getName());\n    assertEquals(\"r4\", validReplicas.get(3).first().getName());\n\n  }\n\n","sourceOld":"  public void testMoveReplicaLeaderlast() {\n\n    List<Pair<ReplicaInfo, Row>> validReplicas = new ArrayList<>();\n    Replica replica = new Replica(\"r1\", Utils.makeMap(\"leader\", \"true\"));\n    ReplicaInfo replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replicaInfo = new ReplicaInfo(\"r4\", \"c1_s2_r1\", \"c1\", \"s2\", Replica.Type.NRT, \"n1\", Collections.singletonMap(\"leader\", \"true\"));\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    replica = new Replica(\"r2\", Utils.makeMap(\"leader\", false));\n    replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replica = new Replica(\"r3\", Utils.makeMap(\"leader\", false));\n    replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    validReplicas.sort(MoveReplicaSuggester.leaderLast);\n    assertEquals(\"r2\", validReplicas.get(0).first().getName());\n    assertEquals(\"r3\", validReplicas.get(1).first().getName());\n    assertEquals(\"r1\", validReplicas.get(2).first().getName());\n    assertEquals(\"r4\", validReplicas.get(3).first().getName());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicaLeaderlast().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicaLeaderlast().mjava","sourceNew":"  public void testMoveReplicaLeaderlast() {\n\n    List<Pair<ReplicaInfo, Row>> validReplicas = new ArrayList<>();\n    Replica replica = new Replica(\"r1\", Utils.makeMap(\"leader\", \"true\"), \"c1\", \"s1\");\n    ReplicaInfo replicaInfo = new ReplicaInfo(replica.collection, replica.slice ,replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replicaInfo = new ReplicaInfo(\"r4\", \"c1_s2_r1\", \"c1\", \"s2\", Replica.Type.NRT, \"n1\", Collections.singletonMap(\"leader\", \"true\"));\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    replica = new Replica(\"r2\", Utils.makeMap(\"leader\", false),\"c1\",\"s1\");\n    replicaInfo = new ReplicaInfo(replica.collection, replica.slice, replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replica = new Replica(\"r3\", Utils.makeMap(\"leader\", false),\"c1\",\"s1\");\n    replicaInfo = new ReplicaInfo(replica.collection,replica.slice, replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    validReplicas.sort(MoveReplicaSuggester.leaderLast);\n    assertEquals(\"r2\", validReplicas.get(0).first().getName());\n    assertEquals(\"r3\", validReplicas.get(1).first().getName());\n    assertEquals(\"r1\", validReplicas.get(2).first().getName());\n    assertEquals(\"r4\", validReplicas.get(3).first().getName());\n\n  }\n\n","sourceOld":"  public void testMoveReplicaLeaderlast() {\n\n    List<Pair<ReplicaInfo, Row>> validReplicas = new ArrayList<>();\n    Replica replica = new Replica(\"r1\", Utils.makeMap(\"leader\", \"true\"));\n    ReplicaInfo replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replicaInfo = new ReplicaInfo(\"r4\", \"c1_s2_r1\", \"c1\", \"s2\", Replica.Type.NRT, \"n1\", Collections.singletonMap(\"leader\", \"true\"));\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    replica = new Replica(\"r2\", Utils.makeMap(\"leader\", false));\n    replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replica = new Replica(\"r3\", Utils.makeMap(\"leader\", false));\n    replicaInfo = new ReplicaInfo(\"c1\", \"s1\", replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    validReplicas.sort(MoveReplicaSuggester.leaderLast);\n    assertEquals(\"r2\", validReplicas.get(0).first().getName());\n    assertEquals(\"r3\", validReplicas.get(1).first().getName());\n    assertEquals(\"r1\", validReplicas.get(2).first().getName());\n    assertEquals(\"r4\", validReplicas.get(3).first().getName());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ea07d22cef2406e950de111f8aa7bc2edb91d56","date":1581094599,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicaLeaderlast().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicaLeaderlast().mjava","sourceNew":"  public void testMoveReplicaLeaderlast() {\n\n    List<Pair<ReplicaInfo, Row>> validReplicas = new ArrayList<>();\n    Map<String, Object> propMap = Utils.makeMap(\n        \"leader\", \"true\",\n        ZkStateReader.NODE_NAME_PROP, \"node1\",\n        ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.toString(),\n        ZkStateReader.CORE_NAME_PROP, \"core1\");\n    Replica replica = new Replica(\"r1\", propMap, \"c1\", \"s1\");\n    ReplicaInfo replicaInfo = new ReplicaInfo(replica.collection, replica.slice ,replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replicaInfo = new ReplicaInfo(\"r4\", \"c1_s2_r1\", \"c1\", \"s2\", Replica.Type.NRT, \"n1\", Collections.singletonMap(\"leader\", \"true\"));\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    propMap.put(\"leader\", false);\n    replica = new Replica(\"r2\", propMap,\"c1\",\"s1\");\n    replicaInfo = new ReplicaInfo(replica.collection, replica.slice, replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replica = new Replica(\"r3\", propMap,\"c1\",\"s1\");\n    replicaInfo = new ReplicaInfo(replica.collection,replica.slice, replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    validReplicas.sort(MoveReplicaSuggester.leaderLast);\n    assertEquals(\"r2\", validReplicas.get(0).first().getName());\n    assertEquals(\"r3\", validReplicas.get(1).first().getName());\n    assertEquals(\"r1\", validReplicas.get(2).first().getName());\n    assertEquals(\"r4\", validReplicas.get(3).first().getName());\n\n  }\n\n","sourceOld":"  public void testMoveReplicaLeaderlast() {\n\n    List<Pair<ReplicaInfo, Row>> validReplicas = new ArrayList<>();\n    Replica replica = new Replica(\"r1\", Utils.makeMap(\"leader\", \"true\"), \"c1\", \"s1\");\n    ReplicaInfo replicaInfo = new ReplicaInfo(replica.collection, replica.slice ,replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replicaInfo = new ReplicaInfo(\"r4\", \"c1_s2_r1\", \"c1\", \"s2\", Replica.Type.NRT, \"n1\", Collections.singletonMap(\"leader\", \"true\"));\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    replica = new Replica(\"r2\", Utils.makeMap(\"leader\", false),\"c1\",\"s1\");\n    replicaInfo = new ReplicaInfo(replica.collection, replica.slice, replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replica = new Replica(\"r3\", Utils.makeMap(\"leader\", false),\"c1\",\"s1\");\n    replicaInfo = new ReplicaInfo(replica.collection,replica.slice, replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    validReplicas.sort(MoveReplicaSuggester.leaderLast);\n    assertEquals(\"r2\", validReplicas.get(0).first().getName());\n    assertEquals(\"r3\", validReplicas.get(1).first().getName());\n    assertEquals(\"r1\", validReplicas.get(2).first().getName());\n    assertEquals(\"r4\", validReplicas.get(3).first().getName());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicaLeaderlast().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicaLeaderlast().mjava","sourceNew":"  public void testMoveReplicaLeaderlast() {\n\n    List<Pair<Replica, Row>> validReplicas = new ArrayList<>();\n    Map<String, Object> propMap = Utils.makeMap(\n        \"leader\", \"true\",\n        ZkStateReader.NODE_NAME_PROP, \"node1\",\n        ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.toString(),\n        ZkStateReader.CORE_NAME_PROP, \"core1\");\n    Replica replica = new Replica(\"r1\", propMap, \"c1\", \"s1\");\n    Replica replicaInfo = new Replica(replica.name, replica.node, replica.collection, replica.shard, replica.core,\n        replica.getState(), replica.type, replica.getProperties());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replicaInfo = new Replica(\"r4\", \"n1\", \"c1_s2_r1\", \"c1\", \"s2\", Replica.State.ACTIVE, Replica.Type.NRT,\n        Utils.makeMap(ZkStateReader.LEADER_PROP, \"true\"));\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    propMap.put(\"leader\", false);\n    propMap.put(\"core\", \"r2\");\n    propMap.put(\"node_name\", \"n1\");\n    replica = new Replica(\"r2\", propMap,\"c1\",\"s1\");\n    replicaInfo = new Replica(replica.name, replica.node, replica.collection, replica.shard, replica.core,\n        replica.getState(), replica.type, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    propMap.put(\"core\", \"r2\");\n    replica = new Replica(\"r3\", propMap,\"c1\",\"s1\");\n    replicaInfo = new Replica(replica.name, replica.node, replica.collection, replica.shard, replica.core,\n        replica.getState(), replica.type, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    validReplicas.sort(MoveReplicaSuggester.leaderLast);\n    assertEquals(\"r2\", validReplicas.get(0).first().getName());\n    assertEquals(\"r3\", validReplicas.get(1).first().getName());\n    assertEquals(\"r1\", validReplicas.get(2).first().getName());\n    assertEquals(\"r4\", validReplicas.get(3).first().getName());\n\n  }\n\n","sourceOld":"  public void testMoveReplicaLeaderlast() {\n\n    List<Pair<ReplicaInfo, Row>> validReplicas = new ArrayList<>();\n    Map<String, Object> propMap = Utils.makeMap(\n        \"leader\", \"true\",\n        ZkStateReader.NODE_NAME_PROP, \"node1\",\n        ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.toString(),\n        ZkStateReader.CORE_NAME_PROP, \"core1\");\n    Replica replica = new Replica(\"r1\", propMap, \"c1\", \"s1\");\n    ReplicaInfo replicaInfo = new ReplicaInfo(replica.collection, replica.slice ,replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replicaInfo = new ReplicaInfo(\"r4\", \"c1_s2_r1\", \"c1\", \"s2\", Replica.Type.NRT, \"n1\", Collections.singletonMap(\"leader\", \"true\"));\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    propMap.put(\"leader\", false);\n    replica = new Replica(\"r2\", propMap,\"c1\",\"s1\");\n    replicaInfo = new ReplicaInfo(replica.collection, replica.slice, replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replica = new Replica(\"r3\", propMap,\"c1\",\"s1\");\n    replicaInfo = new ReplicaInfo(replica.collection,replica.slice, replica, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    validReplicas.sort(MoveReplicaSuggester.leaderLast);\n    assertEquals(\"r2\", validReplicas.get(0).first().getName());\n    assertEquals(\"r3\", validReplicas.get(1).first().getName());\n    assertEquals(\"r1\", validReplicas.get(2).first().getName());\n    assertEquals(\"r4\", validReplicas.get(3).first().getName());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplicaLeaderlast().mjava","sourceNew":null,"sourceOld":"  public void testMoveReplicaLeaderlast() {\n\n    List<Pair<Replica, Row>> validReplicas = new ArrayList<>();\n    Map<String, Object> propMap = Utils.makeMap(\n        \"leader\", \"true\",\n        ZkStateReader.NODE_NAME_PROP, \"node1\",\n        ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.toString(),\n        ZkStateReader.CORE_NAME_PROP, \"core1\");\n    Replica replica = new Replica(\"r1\", propMap, \"c1\", \"s1\");\n    Replica replicaInfo = new Replica(replica.name, replica.node, replica.collection, replica.shard, replica.core,\n        replica.getState(), replica.type, replica.getProperties());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    replicaInfo = new Replica(\"r4\", \"n1\", \"c1_s2_r1\", \"c1\", \"s2\", Replica.State.ACTIVE, Replica.Type.NRT,\n        Utils.makeMap(ZkStateReader.LEADER_PROP, \"true\"));\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    propMap.put(\"leader\", false);\n    propMap.put(\"core\", \"r2\");\n    propMap.put(\"node_name\", \"n1\");\n    replica = new Replica(\"r2\", propMap,\"c1\",\"s1\");\n    replicaInfo = new Replica(replica.name, replica.node, replica.collection, replica.shard, replica.core,\n        replica.getState(), replica.type, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n    propMap.put(\"core\", \"r2\");\n    replica = new Replica(\"r3\", propMap,\"c1\",\"s1\");\n    replicaInfo = new Replica(replica.name, replica.node, replica.collection, replica.shard, replica.core,\n        replica.getState(), replica.type, new HashMap<>());\n    validReplicas.add(new Pair<>(replicaInfo, null));\n\n\n    validReplicas.sort(MoveReplicaSuggester.leaderLast);\n    assertEquals(\"r2\", validReplicas.get(0).first().getName());\n    assertEquals(\"r3\", validReplicas.get(1).first().getName());\n    assertEquals(\"r1\", validReplicas.get(2).first().getName());\n    assertEquals(\"r4\", validReplicas.get(3).first().getName());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["9f0e33082a86447f4f2b59a1a5f69a310500276a","6681d02f2302c363be938426e68f8dfd090cc1bf"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af573cf1aa31058532f304c30b68f17eeb011fbb"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"af573cf1aa31058532f304c30b68f17eeb011fbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["9f0e33082a86447f4f2b59a1a5f69a310500276a"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af573cf1aa31058532f304c30b68f17eeb011fbb":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","af573cf1aa31058532f304c30b68f17eeb011fbb"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf"],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}