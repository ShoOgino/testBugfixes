{"path":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","commits":[{"id":"5c2336584348b3646859b03caea74ba6c89f49ab","date":1332511944,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    //explicitly creates the temp dataDir so we know where the index will be located\n    createTempDir();\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(Version.LUCENE_40, null);\n    Directory directory = newFSDirectory(new File(dataDir, \"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bf41419d452997826ec5f17684993377be77f49"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    //explicitly creates the temp dataDir so we know where the index will be located\n    createTempDir();\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(Version.LUCENE_40, null);\n    Directory directory = newFSDirectory(new File(dataDir, \"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    //explicitly creates the temp dataDir so we know where the index will be located\n    createTempDir();\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(Version.LUCENE_40, null);\n    Directory directory = newFSDirectory(new File(dataDir, \"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    //explicitly creates the temp dataDir so we know where the index will be located\n    createTempDir();\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(Version.LUCENE_40, null);\n    Directory directory = newFSDirectory(new File(dataDir, \"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    //explicitly creates the temp dataDir so we know where the index will be located\n    createTempDir();\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(Version.LUCENE_40, null);\n    Directory directory = newFSDirectory(new File(dataDir, \"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bf41419d452997826ec5f17684993377be77f49","date":1386629618,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    //explicitly creates the temp dataDir so we know where the index will be located\n    createTempDir();\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    Directory directory = newFSDirectory(new File(dataDir, \"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    //explicitly creates the temp dataDir so we know where the index will be located\n    createTempDir();\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(Version.LUCENE_40, null);\n    Directory directory = newFSDirectory(new File(dataDir, \"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","bugFix":["5c2336584348b3646859b03caea74ba6c89f49ab"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    //explicitly creates the temp dataDir so we know where the index will be located\n    createTempDir();\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    Directory directory = newFSDirectory(new File(dataDir, \"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    //explicitly creates the temp dataDir so we know where the index will be located\n    createTempDir();\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(Version.LUCENE_40, null);\n    Directory directory = newFSDirectory(new File(dataDir, \"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    Directory directory = newFSDirectory(new File(dataDir, \"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    //explicitly creates the temp dataDir so we know where the index will be located\n    createTempDir();\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    Directory directory = newFSDirectory(new File(dataDir, \"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    Directory directory = newFSDirectory(new File(createTempDir(), \"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    //explicitly creates the temp dataDir so we know where the index will be located\n    createTempDir();\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    Directory directory = newFSDirectory(new File(dataDir, \"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    Directory directory = newFSDirectory(createTempDir(\"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    Directory directory = newFSDirectory(new File(createTempDir(), \"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","bugFix":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    Directory directory = newFSDirectory(createTempDir(\"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    Directory directory = newFSDirectory(new File(dataDir, \"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    Directory directory = newFSDirectory(createTempDir(\"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).shutdown();\n    directory.close();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    Directory directory = newFSDirectory(createTempDir(\"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50805be75df24f05d29a4d2a496c7ec825cde9eb","date":1398078566,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n    // test tests native and simple in the same jvm in the same exact directory:\n    // the file will remain after the native test (it cannot safely be deleted without the risk of deleting another guys lock)\n    // its ok, these aren't \"compatible\" anyway: really this test should not re-use the same directory at all.\n    new File(new File(initCoreDataDir, \"index\"), IndexWriter.WRITE_LOCK_NAME).delete();\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n\n    IndexWriterConfig indexWriterConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    Directory directory = newFSDirectory(createTempDir(\"index\"));\n    //creates a new index on the known location\n    new IndexWriter(\n        directory,\n        indexWriterConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n    ).shutdown();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n    // test tests native and simple in the same jvm in the same exact directory:\n    // the file will remain after the native test (it cannot safely be deleted without the risk of deleting another guys lock)\n    // its ok, these aren't \"compatible\" anyway: really this test should not re-use the same directory at all.\n    Files.deleteIfExists(new File(new File(initCoreDataDir, \"index\"), IndexWriter.WRITE_LOCK_NAME).toPath());\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n    // test tests native and simple in the same jvm in the same exact directory:\n    // the file will remain after the native test (it cannot safely be deleted without the risk of deleting another guys lock)\n    // its ok, these aren't \"compatible\" anyway: really this test should not re-use the same directory at all.\n    new File(new File(initCoreDataDir, \"index\"), IndexWriter.WRITE_LOCK_NAME).delete();\n  }\n\n","bugFix":["50805be75df24f05d29a4d2a496c7ec825cde9eb"],"bugIntro":["9799ebcab48102552d92f7807965a91fb6e116f7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n    // test tests native and simple in the same jvm in the same exact directory:\n    // the file will remain after the native test (it cannot safely be deleted without the risk of deleting another guys lock)\n    // it's ok, these aren't \"compatible\" anyway: really this test should not re-use the same directory at all.\n    Files.deleteIfExists(new File(new File(initCoreDataDir, \"index\"), IndexWriter.WRITE_LOCK_NAME).toPath());\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n    // test tests native and simple in the same jvm in the same exact directory:\n    // the file will remain after the native test (it cannot safely be deleted without the risk of deleting another guys lock)\n    // its ok, these aren't \"compatible\" anyway: really this test should not re-use the same directory at all.\n    Files.deleteIfExists(new File(new File(initCoreDataDir, \"index\"), IndexWriter.WRITE_LOCK_NAME).toPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9799ebcab48102552d92f7807965a91fb6e116f7","date":1564676118,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n    // test tests native and simple in the same jvm in the same exact directory:\n    // the file will remain after the native test (it cannot safely be deleted without the risk of deleting another guys lock)\n    // it's ok, these aren't \"compatible\" anyway: really this test should not re-use the same directory at all.\n    Files.deleteIfExists(new File(new File(initAndGetDataDir(), \"index\"), IndexWriter.WRITE_LOCK_NAME).toPath());\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n    // test tests native and simple in the same jvm in the same exact directory:\n    // the file will remain after the native test (it cannot safely be deleted without the risk of deleting another guys lock)\n    // it's ok, these aren't \"compatible\" anyway: really this test should not re-use the same directory at all.\n    Files.deleteIfExists(new File(new File(initCoreDataDir, \"index\"), IndexWriter.WRITE_LOCK_NAME).toPath());\n  }\n\n","bugFix":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n    // test tests native and simple in the same jvm in the same exact directory:\n    // the file will remain after the native test (it cannot safely be deleted without the risk of deleting another guys lock)\n    // it's ok, these aren't \"compatible\" anyway: really this test should not re-use the same directory at all.\n    Files.deleteIfExists(new File(new File(initAndGetDataDir(), \"index\"), IndexWriter.WRITE_LOCK_NAME).toPath());\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n    // test tests native and simple in the same jvm in the same exact directory:\n    // the file will remain after the native test (it cannot safely be deleted without the risk of deleting another guys lock)\n    // it's ok, these aren't \"compatible\" anyway: really this test should not re-use the same directory at all.\n    Files.deleteIfExists(new File(new File(initCoreDataDir, \"index\"), IndexWriter.WRITE_LOCK_NAME).toPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ae13d58e10d8dc818c75db483ed8b53c725f1d","date":1583449465,"type":3,"author":"Yannick Welsch","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.NIOFSDirectoryFactory\");\n    // test tests native and simple in the same jvm in the same exact directory:\n    // the file will remain after the native test (it cannot safely be deleted without the risk of deleting another guys lock)\n    // it's ok, these aren't \"compatible\" anyway: really this test should not re-use the same directory at all.\n    Files.deleteIfExists(new File(new File(initAndGetDataDir(), \"index\"), IndexWriter.WRITE_LOCK_NAME).toPath());\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n    // test tests native and simple in the same jvm in the same exact directory:\n    // the file will remain after the native test (it cannot safely be deleted without the risk of deleting another guys lock)\n    // it's ok, these aren't \"compatible\" anyway: really this test should not re-use the same directory at all.\n    Files.deleteIfExists(new File(new File(initAndGetDataDir(), \"index\"), IndexWriter.WRITE_LOCK_NAME).toPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ca2a57dbb0665332572cf1a0dffa67234089615","date":1583491342,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreCheckLockOnStartupTest#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.NIOFSDirectoryFactory\");\n    // test tests native and simple in the same jvm in the same exact directory:\n    // the file will remain after the native test (it cannot safely be deleted without the risk of deleting another guys lock)\n    // it's ok, these aren't \"compatible\" anyway: really this test should not re-use the same directory at all.\n    Files.deleteIfExists(new File(new File(initAndGetDataDir(), \"index\"), IndexWriter.WRITE_LOCK_NAME).toPath());\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n    // test tests native and simple in the same jvm in the same exact directory:\n    // the file will remain after the native test (it cannot safely be deleted without the risk of deleting another guys lock)\n    // it's ok, these aren't \"compatible\" anyway: really this test should not re-use the same directory at all.\n    Files.deleteIfExists(new File(new File(initAndGetDataDir(), \"index\"), IndexWriter.WRITE_LOCK_NAME).toPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["5c2336584348b3646859b03caea74ba6c89f49ab","7530de27b87b961b51f01bd1299b7004d46e8823"],"9ca2a57dbb0665332572cf1a0dffa67234089615":["9799ebcab48102552d92f7807965a91fb6e116f7","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["0bf41419d452997826ec5f17684993377be77f49"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["9799ebcab48102552d92f7807965a91fb6e116f7"],"f8061ddd97f3352007d927dae445884a6f3d857b":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","9799ebcab48102552d92f7807965a91fb6e116f7"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"0bf41419d452997826ec5f17684993377be77f49":["7530de27b87b961b51f01bd1299b7004d46e8823"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["50805be75df24f05d29a4d2a496c7ec825cde9eb"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["0bf41419d452997826ec5f17684993377be77f49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9799ebcab48102552d92f7807965a91fb6e116f7":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"50805be75df24f05d29a4d2a496c7ec825cde9eb":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["7530de27b87b961b51f01bd1299b7004d46e8823","0bf41419d452997826ec5f17684993377be77f49"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"7530de27b87b961b51f01bd1299b7004d46e8823":["5c2336584348b3646859b03caea74ba6c89f49ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"5c2336584348b3646859b03caea74ba6c89f49ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"9ca2a57dbb0665332572cf1a0dffa67234089615":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["f8061ddd97f3352007d927dae445884a6f3d857b","9799ebcab48102552d92f7807965a91fb6e116f7"],"0bf41419d452997826ec5f17684993377be77f49":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","1416f9d09d016a6894cd17e1caac137dad2bba59","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c2336584348b3646859b03caea74ba6c89f49ab"],"9799ebcab48102552d92f7807965a91fb6e116f7":["9ca2a57dbb0665332572cf1a0dffa67234089615","09ae13d58e10d8dc818c75db483ed8b53c725f1d","f8061ddd97f3352007d927dae445884a6f3d857b"],"50805be75df24f05d29a4d2a496c7ec825cde9eb":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["50805be75df24f05d29a4d2a496c7ec825cde9eb"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0bf41419d452997826ec5f17684993377be77f49","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"5c2336584348b3646859b03caea74ba6c89f49ab":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f8061ddd97f3352007d927dae445884a6f3d857b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}