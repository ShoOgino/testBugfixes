{"path":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefixBytesRef(Automaton).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefixBytesRef(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: this currently requites a determinized machine,\n  // but it need not -- we can speed it up by walking the\n  // NFA instead.  it'd still be fail fast.\n  public static BytesRef getCommonPrefixBytesRef(Automaton a) {\n    if (a.isSingleton()) return new BytesRef(a.singleton);\n    BytesRef ref = new BytesRef(10);\n    HashSet<State> visited = new HashSet<State>();\n    State s = a.initial;\n    boolean done;\n    do {\n      done = true;\n      visited.add(s);\n      if (!s.accept && s.numTransitions() == 1) {\n        Transition t = s.getTransitions().iterator().next();\n        if (t.min == t.max && !visited.contains(t.to)) {\n          ref.grow(++ref.length);\n          ref.bytes[ref.length - 1] = (byte)t.min;\n          s = t.to;\n          done = false;\n        }\n      }\n    } while (!done);\n    return ref;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefixBytesRef(Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#getCommonPrefixBytesRef(Automaton).mjava","sourceNew":"  // TODO: this currently requites a determinized machine,\n  // but it need not -- we can speed it up by walking the\n  // NFA instead.  it'd still be fail fast.\n  public static BytesRef getCommonPrefixBytesRef(Automaton a) {\n    if (a.isSingleton()) return new BytesRef(a.singleton);\n    BytesRef ref = new BytesRef(10);\n    HashSet<State> visited = new HashSet<State>();\n    State s = a.initial;\n    boolean done;\n    do {\n      done = true;\n      visited.add(s);\n      if (!s.accept && s.numTransitions() == 1) {\n        Transition t = s.getTransitions().iterator().next();\n        if (t.min == t.max && !visited.contains(t.to)) {\n          ref.grow(++ref.length);\n          ref.bytes[ref.length - 1] = (byte)t.min;\n          s = t.to;\n          done = false;\n        }\n      }\n    } while (!done);\n    return ref;\n  }\n\n","sourceOld":"  // TODO: this currently requites a determinized machine,\n  // but it need not -- we can speed it up by walking the\n  // NFA instead.  it'd still be fail fast.\n  public static BytesRef getCommonPrefixBytesRef(Automaton a) {\n    if (a.isSingleton()) return new BytesRef(a.singleton);\n    BytesRef ref = new BytesRef(10);\n    HashSet<State> visited = new HashSet<State>();\n    State s = a.initial;\n    boolean done;\n    do {\n      done = true;\n      visited.add(s);\n      if (!s.accept && s.numTransitions() == 1) {\n        Transition t = s.getTransitions().iterator().next();\n        if (t.min == t.max && !visited.contains(t.to)) {\n          ref.grow(++ref.length);\n          ref.bytes[ref.length - 1] = (byte)t.min;\n          s = t.to;\n          done = false;\n        }\n      }\n    } while (!done);\n    return ref;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}