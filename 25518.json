{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#SimpleTextBKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","commits":[{"id":"251c5b33f0a2c8988550b63c78ed22b0e84524e5","date":1456961997,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#SimpleTextBKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#SimpleTextBKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long).mjava","sourceNew":"  public SimpleTextBKDReader(IndexInput datIn, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                             byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    super(datIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minPackedValue, maxPackedValue, pointCount, docCount);\n  }\n\n","sourceOld":"  public SimpleTextBKDReader(IndexInput datIn, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                             byte[] minPackedValue, byte[] maxPackedValue, long pointCount) throws IOException {\n    super(datIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minPackedValue, maxPackedValue, pointCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#SimpleTextBKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#SimpleTextBKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[]).mjava","sourceNew":"  public SimpleTextBKDReader(IndexInput datIn, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                             byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    super(datIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minPackedValue, maxPackedValue, pointCount, docCount);\n  }\n\n","sourceOld":"  public SimpleTextBKDReader(IndexInput datIn, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                             byte[] minPackedValue, byte[] maxPackedValue) throws IOException {\n    super(datIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minPackedValue, maxPackedValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#SimpleTextBKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#SimpleTextBKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","sourceNew":"  public SimpleTextBKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                             byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    // no version check here because callers of this API (SimpleText) have no back compat:\n    bytesPerIndexEntry = numDims == 1 ? bytesPerDim : bytesPerDim + 1;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = SimpleTextBKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","sourceOld":"  public SimpleTextBKDReader(IndexInput datIn, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                             byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    super(datIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minPackedValue, maxPackedValue, pointCount, docCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#SimpleTextBKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#SimpleTextBKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","sourceNew":"  public SimpleTextBKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                             byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    // no version check here because callers of this API (SimpleText) have no back compat:\n    bytesPerIndexEntry = numDims == 1 ? bytesPerDim : bytesPerDim + 1;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = SimpleTextBKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","sourceOld":"  public SimpleTextBKDReader(IndexInput datIn, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                             byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    super(datIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minPackedValue, maxPackedValue, pointCount, docCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#SimpleTextBKDReader(IndexInput,int,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#SimpleTextBKDReader(IndexInput,int,int,int,long[],byte[],byte[],byte[],long,int).mjava","sourceNew":"  public SimpleTextBKDReader(IndexInput in, int numDataDims, int numIndexDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                             byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDataDims = numDataDims;\n    this.numIndexDims = numIndexDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    // no version check here because callers of this API (SimpleText) have no back compat:\n    bytesPerIndexEntry = numIndexDims == 1 ? bytesPerDim : bytesPerDim + 1;\n    packedBytesLength = numDataDims * bytesPerDim;\n    packedIndexBytesLength = numIndexDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = SimpleTextBKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedIndexBytesLength;\n    assert maxPackedValue.length == packedIndexBytesLength;\n  }\n\n","sourceOld":"  public SimpleTextBKDReader(IndexInput in, int numDims, int maxPointsInLeafNode, int bytesPerDim, long[] leafBlockFPs, byte[] splitPackedValues,\n                             byte[] minPackedValue, byte[] maxPackedValue, long pointCount, int docCount) throws IOException {\n    this.in = in;\n    this.numDims = numDims;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.bytesPerDim = bytesPerDim;\n    // no version check here because callers of this API (SimpleText) have no back compat:\n    bytesPerIndexEntry = numDims == 1 ? bytesPerDim : bytesPerDim + 1;\n    packedBytesLength = numDims * bytesPerDim;\n    this.leafNodeOffset = leafBlockFPs.length;\n    this.leafBlockFPs = leafBlockFPs;\n    this.splitPackedValues = splitPackedValues;\n    this.minPackedValue = minPackedValue;\n    this.maxPackedValue = maxPackedValue;\n    this.pointCount = pointCount;\n    this.docCount = docCount;\n    this.version = SimpleTextBKDWriter.VERSION_CURRENT;\n    assert minPackedValue.length == packedBytesLength;\n    assert maxPackedValue.length == packedBytesLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"251c5b33f0a2c8988550b63c78ed22b0e84524e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f6652c943595e92c187ee904c382863013eae28f":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","251c5b33f0a2c8988550b63c78ed22b0e84524e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6652c943595e92c187ee904c382863013eae28f"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["f6652c943595e92c187ee904c382863013eae28f","9856095f7afb5a607bf5e65077615ed91273508c"],"251c5b33f0a2c8988550b63c78ed22b0e84524e5":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"f6652c943595e92c187ee904c382863013eae28f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["251c5b33f0a2c8988550b63c78ed22b0e84524e5","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}