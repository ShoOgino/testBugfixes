{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#startBlock(SegmentTermsEnumFrame,boolean).mjava","commits":[{"id":"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4","date":1400183621,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#startBlock(SegmentTermsEnumFrame,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#startBlock(SegmentTermsEnum.Frame,boolean).mjava","sourceNew":"  void startBlock(SegmentTermsEnumFrame frame, boolean isFloor) {\n    totalBlockCount++;\n    if (isFloor) {\n      if (frame.fp == frame.fpOrig) {\n        floorBlockCount++;\n      }\n      floorSubBlockCount++;\n    } else {\n      nonFloorBlockCount++;\n    }\n\n    if (blockCountByPrefixLen.length <= frame.prefix) {\n      blockCountByPrefixLen = ArrayUtil.grow(blockCountByPrefixLen, 1+frame.prefix);\n    }\n    blockCountByPrefixLen[frame.prefix]++;\n    startBlockCount++;\n    totalBlockSuffixBytes += frame.suffixesReader.length();\n    totalBlockStatsBytes += frame.statsReader.length();\n  }\n\n","sourceOld":"  void startBlock(SegmentTermsEnum.Frame frame, boolean isFloor) {\n    totalBlockCount++;\n    if (isFloor) {\n      if (frame.fp == frame.fpOrig) {\n        floorBlockCount++;\n      }\n      floorSubBlockCount++;\n    } else {\n      nonFloorBlockCount++;\n    }\n\n    if (blockCountByPrefixLen.length <= frame.prefix) {\n      blockCountByPrefixLen = ArrayUtil.grow(blockCountByPrefixLen, 1+frame.prefix);\n    }\n    blockCountByPrefixLen[frame.prefix]++;\n    startBlockCount++;\n    totalBlockSuffixBytes += frame.suffixesReader.length();\n    totalBlockStatsBytes += frame.statsReader.length();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#startBlock(SegmentTermsEnumFrame,boolean).mjava","pathOld":"/dev/null","sourceNew":"  void startBlock(SegmentTermsEnumFrame frame, boolean isFloor) {\n    totalBlockCount++;\n    if (isFloor) {\n      if (frame.fp == frame.fpOrig) {\n        floorBlockCount++;\n      }\n      floorSubBlockCount++;\n    } else {\n      nonFloorBlockCount++;\n    }\n\n    if (blockCountByPrefixLen.length <= frame.prefix) {\n      blockCountByPrefixLen = ArrayUtil.grow(blockCountByPrefixLen, 1+frame.prefix);\n    }\n    blockCountByPrefixLen[frame.prefix]++;\n    startBlockCount++;\n    totalBlockSuffixBytes += frame.suffixesReader.length();\n    totalBlockStatsBytes += frame.statsReader.length();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#startBlock(SegmentTermsEnumFrame,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#startBlock(SegmentTermsEnumFrame,boolean).mjava","sourceNew":"  void startBlock(SegmentTermsEnumFrame frame, boolean isFloor) {\n    totalBlockCount++;\n    if (isFloor) {\n      if (frame.fp == frame.fpOrig) {\n        floorBlockCount++;\n      }\n      floorSubBlockCount++;\n    } else {\n      nonFloorBlockCount++;\n    }\n\n    if (blockCountByPrefixLen.length <= frame.prefix) {\n      blockCountByPrefixLen = ArrayUtil.grow(blockCountByPrefixLen, 1+frame.prefix);\n    }\n    blockCountByPrefixLen[frame.prefix]++;\n    startBlockCount++;\n    totalBlockSuffixBytes += frame.totalSuffixBytes;\n    totalUncompressedBlockSuffixBytes += frame.suffixesReader.length();\n    if (frame.suffixesReader != frame.suffixLengthsReader) {\n      totalUncompressedBlockSuffixBytes += frame.suffixLengthsReader.length();\n    }\n    totalBlockStatsBytes += frame.totalStatsBytes;\n    compressionAlgorithms[frame.compressionAlg.code]++;\n    totalUncompressedBlockStatsBytes += frame.statsReader.length();\n  }\n\n","sourceOld":"  void startBlock(SegmentTermsEnumFrame frame, boolean isFloor) {\n    totalBlockCount++;\n    if (isFloor) {\n      if (frame.fp == frame.fpOrig) {\n        floorBlockCount++;\n      }\n      floorSubBlockCount++;\n    } else {\n      nonFloorBlockCount++;\n    }\n\n    if (blockCountByPrefixLen.length <= frame.prefix) {\n      blockCountByPrefixLen = ArrayUtil.grow(blockCountByPrefixLen, 1+frame.prefix);\n    }\n    blockCountByPrefixLen[frame.prefix]++;\n    startBlockCount++;\n    totalBlockSuffixBytes += frame.suffixesReader.length();\n    totalBlockStatsBytes += frame.statsReader.length();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a356e37aed258bcd168680472f8d1dbc6f396935","date":1580233110,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#startBlock(SegmentTermsEnumFrame,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#startBlock(SegmentTermsEnumFrame,boolean).mjava","sourceNew":"  void startBlock(SegmentTermsEnumFrame frame, boolean isFloor) {\n    totalBlockCount++;\n    if (isFloor) {\n      if (frame.fp == frame.fpOrig) {\n        floorBlockCount++;\n      }\n      floorSubBlockCount++;\n    } else {\n      nonFloorBlockCount++;\n    }\n\n    if (blockCountByPrefixLen.length <= frame.prefix) {\n      blockCountByPrefixLen = ArrayUtil.grow(blockCountByPrefixLen, 1+frame.prefix);\n    }\n    blockCountByPrefixLen[frame.prefix]++;\n    startBlockCount++;\n    totalBlockSuffixBytes += frame.totalSuffixBytes;\n    totalUncompressedBlockSuffixBytes += frame.suffixesReader.length();\n    if (frame.suffixesReader != frame.suffixLengthsReader) {\n      totalUncompressedBlockSuffixBytes += frame.suffixLengthsReader.length();\n    }\n    totalBlockStatsBytes += frame.statsReader.length();\n    compressionAlgorithms[frame.compressionAlg.code]++;\n  }\n\n","sourceOld":"  void startBlock(SegmentTermsEnumFrame frame, boolean isFloor) {\n    totalBlockCount++;\n    if (isFloor) {\n      if (frame.fp == frame.fpOrig) {\n        floorBlockCount++;\n      }\n      floorSubBlockCount++;\n    } else {\n      nonFloorBlockCount++;\n    }\n\n    if (blockCountByPrefixLen.length <= frame.prefix) {\n      blockCountByPrefixLen = ArrayUtil.grow(blockCountByPrefixLen, 1+frame.prefix);\n    }\n    blockCountByPrefixLen[frame.prefix]++;\n    startBlockCount++;\n    totalBlockSuffixBytes += frame.totalSuffixBytes;\n    totalUncompressedBlockSuffixBytes += frame.suffixesReader.length();\n    if (frame.suffixesReader != frame.suffixLengthsReader) {\n      totalUncompressedBlockSuffixBytes += frame.suffixLengthsReader.length();\n    }\n    totalBlockStatsBytes += frame.totalStatsBytes;\n    compressionAlgorithms[frame.compressionAlg.code]++;\n    totalUncompressedBlockStatsBytes += frame.statsReader.length();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f4ef2de7b0fd59ef22e20888773ad260c90bfb4"],"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9407318969e8504257b4c5764c65755a043e5404":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"a356e37aed258bcd168680472f8d1dbc6f396935":["9407318969e8504257b4c5764c65755a043e5404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a356e37aed258bcd168680472f8d1dbc6f396935"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["9407318969e8504257b4c5764c65755a043e5404"],"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","3f4ef2de7b0fd59ef22e20888773ad260c90bfb4"],"9407318969e8504257b4c5764c65755a043e5404":["a356e37aed258bcd168680472f8d1dbc6f396935"],"a356e37aed258bcd168680472f8d1dbc6f396935":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}