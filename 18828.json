{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#isFinite(LightAutomaton.Transition,LightAutomaton,int,BitSet,BitSet).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#isFinite(LightAutomaton.Transition,LightAutomaton,int,BitSet,BitSet).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFinite(LightAutomaton.Transition scratch, LightAutomaton a, int state, BitSet path, BitSet visited) {\n    path.set(state);\n    int numTransitions = a.initTransition(state, scratch);\n    for(int t=0;t<numTransitions;t++) {\n      a.getTransition(state, t, scratch);\n      if (path.get(scratch.dest) || (!visited.get(scratch.dest) && !isFinite(scratch, a, scratch.dest, path, visited))) {\n        return false;\n      }\n    }\n    path.clear(state);\n    visited.set(state);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#isFinite(Transition,LightAutomaton,int,BitSet,BitSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#isFinite(LightAutomaton.Transition,LightAutomaton,int,BitSet,BitSet).mjava","sourceNew":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFinite(Transition scratch, LightAutomaton a, int state, BitSet path, BitSet visited) {\n    path.set(state);\n    int numTransitions = a.initTransition(state, scratch);\n    for(int t=0;t<numTransitions;t++) {\n      a.getTransition(state, t, scratch);\n      if (path.get(scratch.dest) || (!visited.get(scratch.dest) && !isFinite(scratch, a, scratch.dest, path, visited))) {\n        return false;\n      }\n    }\n    path.clear(state);\n    visited.set(state);\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Checks whether there is a loop containing s. (This is sufficient since\n   * there are never transitions to dead states.)\n   */\n  // TODO: not great that this is recursive... in theory a\n  // large automata could exceed java's stack\n  private static boolean isFinite(LightAutomaton.Transition scratch, LightAutomaton a, int state, BitSet path, BitSet visited) {\n    path.set(state);\n    int numTransitions = a.initTransition(state, scratch);\n    for(int t=0;t<numTransitions;t++) {\n      a.getTransition(state, t, scratch);\n      if (path.get(scratch.dest) || (!visited.get(scratch.dest) && !isFinite(scratch, a, scratch.dest, path, visited))) {\n        return false;\n      }\n    }\n    path.clear(state);\n    visited.set(state);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c8cfaac638acc80d26d08288440ede37e6539e9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0c8cfaac638acc80d26d08288440ede37e6539e9":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0c8cfaac638acc80d26d08288440ede37e6539e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}