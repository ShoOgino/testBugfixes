{"path":"lucene/backwards/src/java/org/apache/lucene/util/BitUtil#ntz2(long).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/BitUtil#ntz2(long).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/BitUtil#ntz2(long).mjava","sourceNew":"  /** returns 0 based index of first set bit\n   * (only works for x!=0)\n   * <br/> This is an alternate implementation of ntz()\n   */\n  public static int ntz2(long x) {\n   int n = 0;\n   int y = (int)x;\n   if (y==0) {n+=32; y = (int)(x>>>32); }   // the only 64 bit shift necessary\n   if ((y & 0x0000FFFF) == 0) { n+=16; y>>>=16; }\n   if ((y & 0x000000FF) == 0) { n+=8; y>>>=8; }\n   return (ntzTable[ y & 0xff ]) + n;\n  }\n\n","sourceOld":"  /** returns 0 based index of first set bit\n   * (only works for x!=0)\n   * <br/> This is an alternate implementation of ntz()\n   */\n  public static int ntz2(long x) {\n   int n = 0;\n   int y = (int)x;\n   if (y==0) {n+=32; y = (int)(x>>>32); }   // the only 64 bit shift necessary\n   if ((y & 0x0000FFFF) == 0) { n+=16; y>>>=16; }\n   if ((y & 0x000000FF) == 0) { n+=8; y>>>=8; }\n   return (ntzTable[ y & 0xff ]) + n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/util/BitUtil#ntz2(long).mjava","sourceNew":null,"sourceOld":"  /** returns 0 based index of first set bit\n   * (only works for x!=0)\n   * <br/> This is an alternate implementation of ntz()\n   */\n  public static int ntz2(long x) {\n   int n = 0;\n   int y = (int)x;\n   if (y==0) {n+=32; y = (int)(x>>>32); }   // the only 64 bit shift necessary\n   if ((y & 0x0000FFFF) == 0) { n+=16; y>>>=16; }\n   if ((y & 0x000000FF) == 0) { n+=8; y>>>=8; }\n   return (ntzTable[ y & 0xff ]) + n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}