{"path":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#runMerge(int,int,int,int,int).mjava","commits":[{"id":"5108a3a331b23a7fba7e7a4037fcb87085e0112e","date":1364415244,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#runMerge(int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Sort out trivial cases and reduce the scope of the merge as much as\n   *  possible before calling {@link #merge}/ */\n  private void runMerge(int lo, int pivot, int hi, int len1, int len2) {\n    if (len1 == 0 || len2 == 0) {\n      return;\n    }\n    setPivot(pivot - 1);\n    if (comparePivot(pivot) <= 0) {\n      // all values from the first run are below all values from the 2nd run\n      // this shortcut makes mergeSort run in linear time on sorted arrays\n      return;\n    }\n    while (comparePivot(hi - 1) <= 0) {\n      --hi;\n      --len2;\n    }\n    setPivot(pivot);\n    while (comparePivot(lo) >= 0) {\n      ++lo;\n      --len1;\n    }\n    if (len1 + len2 == 2) {\n      assert len1 == len2;\n      assert compare(lo, pivot) > 0;\n      swap(pivot, lo);\n      return;\n    }\n    merge(lo, pivot, hi, len1, len2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#runMerge(int,int,int,int,int).mjava","sourceNew":null,"sourceOld":"  /** Sort out trivial cases and reduce the scope of the merge as much as\n   *  possible before calling {@link #merge}/ */\n  private void runMerge(int lo, int pivot, int hi, int len1, int len2) {\n    if (len1 == 0 || len2 == 0) {\n      return;\n    }\n    setPivot(pivot - 1);\n    if (comparePivot(pivot) <= 0) {\n      // all values from the first run are below all values from the 2nd run\n      // this shortcut makes mergeSort run in linear time on sorted arrays\n      return;\n    }\n    while (comparePivot(hi - 1) <= 0) {\n      --hi;\n      --len2;\n    }\n    setPivot(pivot);\n    while (comparePivot(lo) >= 0) {\n      ++lo;\n      --len1;\n    }\n    if (len1 + len2 == 2) {\n      assert len1 == len2;\n      assert compare(lo, pivot) > 0;\n      swap(pivot, lo);\n      return;\n    }\n    merge(lo, pivot, hi, len1, len2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5108a3a331b23a7fba7e7a4037fcb87085e0112e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["5108a3a331b23a7fba7e7a4037fcb87085e0112e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"]},"commit2Childs":{"5108a3a331b23a7fba7e7a4037fcb87085e0112e":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5108a3a331b23a7fba7e7a4037fcb87085e0112e"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}