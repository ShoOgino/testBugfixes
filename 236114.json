{"path":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotTf().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotTf().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotTf().mjava","sourceNew":"  public void testSweetSpotTf() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n\n    TFIDFSimilarity d = new DefaultSimilarity();\n    TFIDFSimilarity s = ss;\n    \n    // tf equal\n\n    ss.setBaselineTfFactors(0.0f, 0.0f);\n  \n    for (int i = 1; i < 1000; i++) {\n      assertEquals(\"tf: i=\"+i,\n                   d.tf(i), s.tf(i), 0.0f);\n    }\n\n    // tf higher\n  \n    ss.setBaselineTfFactors(1.0f, 0.0f);\n  \n    for (int i = 1; i < 1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : d=\"+d.tf(i)+\n                 \" < s=\"+s.tf(i),\n                 d.tf(i) < s.tf(i));\n    }\n\n    // tf flat\n  \n    ss.setBaselineTfFactors(1.0f, 6.0f);\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf flat1: i=\"+i, 1.0f, s.tf(i), 0.0f);\n    }\n    ss.setBaselineTfFactors(2.0f, 6.0f);\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf flat2: i=\"+i, 2.0f, s.tf(i), 0.0f);\n    }\n    for (int i = 6; i <=1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : s=\"+s.tf(i)+\n                 \" < d=\"+d.tf(i),\n                 s.tf(i) < d.tf(i));\n    }\n\n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n  }\n\n","sourceOld":"  public void testSweetSpotTf() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n\n    TFIDFSimilarity d = new DefaultSimilarity();\n    TFIDFSimilarity s = ss;\n    \n    // tf equal\n\n    ss.setBaselineTfFactors(0.0f, 0.0f);\n  \n    for (int i = 1; i < 1000; i++) {\n      assertEquals(\"tf: i=\"+i,\n                   d.tf(i), s.tf(i), 0.0f);\n    }\n\n    // tf higher\n  \n    ss.setBaselineTfFactors(1.0f, 0.0f);\n  \n    for (int i = 1; i < 1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : d=\"+d.tf(i)+\n                 \" < s=\"+s.tf(i),\n                 d.tf(i) < s.tf(i));\n    }\n\n    // tf flat\n  \n    ss.setBaselineTfFactors(1.0f, 6.0f);\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf flat1: i=\"+i, 1.0f, s.tf(i), 0.0f);\n    }\n    ss.setBaselineTfFactors(2.0f, 6.0f);\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf flat2: i=\"+i, 2.0f, s.tf(i), 0.0f);\n    }\n    for (int i = 6; i <=1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : s=\"+s.tf(i)+\n                 \" < d=\"+d.tf(i),\n                 s.tf(i) < d.tf(i));\n    }\n\n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotTf().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotTf().mjava","sourceNew":"  public void testSweetSpotTf() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n\n    TFIDFSimilarity d = new ClassicSimilarity();\n    TFIDFSimilarity s = ss;\n    \n    // tf equal\n\n    ss.setBaselineTfFactors(0.0f, 0.0f);\n  \n    for (int i = 1; i < 1000; i++) {\n      assertEquals(\"tf: i=\"+i,\n                   d.tf(i), s.tf(i), 0.0f);\n    }\n\n    // tf higher\n  \n    ss.setBaselineTfFactors(1.0f, 0.0f);\n  \n    for (int i = 1; i < 1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : d=\"+d.tf(i)+\n                 \" < s=\"+s.tf(i),\n                 d.tf(i) < s.tf(i));\n    }\n\n    // tf flat\n  \n    ss.setBaselineTfFactors(1.0f, 6.0f);\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf flat1: i=\"+i, 1.0f, s.tf(i), 0.0f);\n    }\n    ss.setBaselineTfFactors(2.0f, 6.0f);\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf flat2: i=\"+i, 2.0f, s.tf(i), 0.0f);\n    }\n    for (int i = 6; i <=1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : s=\"+s.tf(i)+\n                 \" < d=\"+d.tf(i),\n                 s.tf(i) < d.tf(i));\n    }\n\n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n  }\n\n","sourceOld":"  public void testSweetSpotTf() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n\n    TFIDFSimilarity d = new DefaultSimilarity();\n    TFIDFSimilarity s = ss;\n    \n    // tf equal\n\n    ss.setBaselineTfFactors(0.0f, 0.0f);\n  \n    for (int i = 1; i < 1000; i++) {\n      assertEquals(\"tf: i=\"+i,\n                   d.tf(i), s.tf(i), 0.0f);\n    }\n\n    // tf higher\n  \n    ss.setBaselineTfFactors(1.0f, 0.0f);\n  \n    for (int i = 1; i < 1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : d=\"+d.tf(i)+\n                 \" < s=\"+s.tf(i),\n                 d.tf(i) < s.tf(i));\n    }\n\n    // tf flat\n  \n    ss.setBaselineTfFactors(1.0f, 6.0f);\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf flat1: i=\"+i, 1.0f, s.tf(i), 0.0f);\n    }\n    ss.setBaselineTfFactors(2.0f, 6.0f);\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf flat2: i=\"+i, 2.0f, s.tf(i), 0.0f);\n    }\n    for (int i = 6; i <=1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : s=\"+s.tf(i)+\n                 \" < d=\"+d.tf(i),\n                 s.tf(i) < d.tf(i));\n    }\n\n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81d0720146de53dd3a4a023d2a3d1089d86d748d"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}