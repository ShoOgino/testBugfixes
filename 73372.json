{"path":"src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(String).mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an int from prefixCoded characters.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode e.g. a stored field.\n   * @throws NumberFormatException if the supplied string is\n   * not correctly prefix encoded.\n   * @see #intToPrefixCoded(int)\n   */\n  public static int prefixCodedToInt(final String prefixCoded) {\n    final int shift = prefixCoded.charAt(0)-SHIFT_START_INT;\n    if (shift>31 || shift<0)\n      throw new NumberFormatException(\"Invalid shift value in prefixCoded string (is encoded value really an INT?)\");\n    int sortableBits = 0;\n    for (int i=1, len=prefixCoded.length(); i<len; i++) {\n      sortableBits <<= 7;\n      final char ch = prefixCoded.charAt(i);\n      if (ch>0x7f) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (char \"+\n          Integer.toHexString((int)ch)+\" at position \"+i+\" is invalid)\"\n        );\n      }\n      sortableBits |= (int)ch;\n    }\n    return (sortableBits << shift) ^ 0x80000000;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(String).mjava","pathOld":"src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(String).mjava","sourceNew":"  /**\n   * Returns an int from prefixCoded characters.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode e.g. a stored field.\n   * @throws NumberFormatException if the supplied string is\n   * not correctly prefix encoded.\n   * @see #intToPrefixCoded(int)\n   */\n  public static int prefixCodedToInt(final String prefixCoded) {\n    final int shift = prefixCoded.charAt(0)-SHIFT_START_INT;\n    if (shift>31 || shift<0)\n      throw new NumberFormatException(\"Invalid shift value in prefixCoded string (is encoded value really an INT?)\");\n    int sortableBits = 0;\n    for (int i=1, len=prefixCoded.length(); i<len; i++) {\n      sortableBits <<= 7;\n      final char ch = prefixCoded.charAt(i);\n      if (ch>0x7f) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (char \"+\n          Integer.toHexString(ch)+\" at position \"+i+\" is invalid)\"\n        );\n      }\n      sortableBits |= ch;\n    }\n    return (sortableBits << shift) ^ 0x80000000;\n  }\n\n","sourceOld":"  /**\n   * Returns an int from prefixCoded characters.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode e.g. a stored field.\n   * @throws NumberFormatException if the supplied string is\n   * not correctly prefix encoded.\n   * @see #intToPrefixCoded(int)\n   */\n  public static int prefixCodedToInt(final String prefixCoded) {\n    final int shift = prefixCoded.charAt(0)-SHIFT_START_INT;\n    if (shift>31 || shift<0)\n      throw new NumberFormatException(\"Invalid shift value in prefixCoded string (is encoded value really an INT?)\");\n    int sortableBits = 0;\n    for (int i=1, len=prefixCoded.length(); i<len; i++) {\n      sortableBits <<= 7;\n      final char ch = prefixCoded.charAt(i);\n      if (ch>0x7f) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (char \"+\n          Integer.toHexString((int)ch)+\" at position \"+i+\" is invalid)\"\n        );\n      }\n      sortableBits |= (int)ch;\n    }\n    return (sortableBits << shift) ^ 0x80000000;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(String).mjava","pathOld":"src/java/org/apache/lucene/util/NumericUtils#prefixCodedToInt(String).mjava","sourceNew":"  /**\n   * Returns an int from prefixCoded characters.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode e.g. a stored field.\n   * @throws NumberFormatException if the supplied string is\n   * not correctly prefix encoded.\n   * @see #intToPrefixCoded(int)\n   */\n  public static int prefixCodedToInt(final String prefixCoded) {\n    final int shift = prefixCoded.charAt(0)-SHIFT_START_INT;\n    if (shift>31 || shift<0)\n      throw new NumberFormatException(\"Invalid shift value in prefixCoded string (is encoded value really an INT?)\");\n    int sortableBits = 0;\n    for (int i=1, len=prefixCoded.length(); i<len; i++) {\n      sortableBits <<= 7;\n      final char ch = prefixCoded.charAt(i);\n      if (ch>0x7f) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (char \"+\n          Integer.toHexString(ch)+\" at position \"+i+\" is invalid)\"\n        );\n      }\n      sortableBits |= ch;\n    }\n    return (sortableBits << shift) ^ 0x80000000;\n  }\n\n","sourceOld":"  /**\n   * Returns an int from prefixCoded characters.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode e.g. a stored field.\n   * @throws NumberFormatException if the supplied string is\n   * not correctly prefix encoded.\n   * @see #intToPrefixCoded(int)\n   */\n  public static int prefixCodedToInt(final String prefixCoded) {\n    final int shift = prefixCoded.charAt(0)-SHIFT_START_INT;\n    if (shift>31 || shift<0)\n      throw new NumberFormatException(\"Invalid shift value in prefixCoded string (is encoded value really an INT?)\");\n    int sortableBits = 0;\n    for (int i=1, len=prefixCoded.length(); i<len; i++) {\n      sortableBits <<= 7;\n      final char ch = prefixCoded.charAt(i);\n      if (ch>0x7f) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (char \"+\n          Integer.toHexString(ch)+\" at position \"+i+\" is invalid)\"\n        );\n      }\n      sortableBits |= ch;\n    }\n    return (sortableBits << shift) ^ 0x80000000;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["53b6c192847de8643a5da505cc433cbf8476a175"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"53b6c192847de8643a5da505cc433cbf8476a175":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}