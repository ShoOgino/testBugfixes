{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testPointValuesMemoryIndexVsNormalIndex().mjava","commits":[{"id":"74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275","date":1458043999,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testPointValuesMemoryIndexVsNormalIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testPointValuesMemoryIndexVsNormalIndex() throws Exception {\n    int size = atLeast(12);\n\n    List<Integer> randomValues = new ArrayList<>();\n\n    Document doc = new Document();\n    for (Integer randomInteger : random().ints(size).toArray()) {\n      doc.add(new IntPoint(\"int\", randomInteger));\n      randomValues.add(randomInteger);\n      doc.add(new LongPoint(\"long\", randomInteger));\n      doc.add(new FloatPoint(\"float\", randomInteger));\n      doc.add(new DoublePoint(\"double\", randomInteger));\n    }\n\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    MemoryIndex memoryIndex = MemoryIndex.fromDocument(doc, mockAnalyzer);\n    IndexSearcher memoryIndexSearcher = memoryIndex.createSearcher();\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader controlIndexReader = DirectoryReader.open(dir);\n    IndexSearcher controlIndexSearcher = new IndexSearcher(controlIndexReader);\n\n    Supplier<Integer> valueSupplier = () -> randomValues.get(random().nextInt(randomValues.size()));\n    Query[] queries = new Query[] {\n        IntPoint.newExactQuery(\"int\", valueSupplier.get()),\n        LongPoint.newExactQuery(\"long\", valueSupplier.get()),\n        FloatPoint.newExactQuery(\"float\", valueSupplier.get()),\n        DoublePoint.newExactQuery(\"double\", valueSupplier.get()),\n        IntPoint.newSetQuery(\"int\", valueSupplier.get(), valueSupplier.get()),\n        LongPoint.newSetQuery(\"long\", valueSupplier.get(), valueSupplier.get()),\n        FloatPoint.newSetQuery(\"float\", valueSupplier.get(), valueSupplier.get()),\n        DoublePoint.newSetQuery(\"double\", valueSupplier.get(), valueSupplier.get()),\n        IntPoint.newRangeQuery(\"int\", valueSupplier.get(), valueSupplier.get()),\n        LongPoint.newRangeQuery(\"long\", valueSupplier.get(), valueSupplier.get()),\n        FloatPoint.newRangeQuery(\"float\", valueSupplier.get(), valueSupplier.get()),\n        DoublePoint.newRangeQuery(\"double\", valueSupplier.get(), valueSupplier.get())\n    };\n    for (Query query : queries) {\n      assertEquals(controlIndexSearcher.count(query), controlIndexSearcher.count(query));\n    }\n\n    memoryIndexSearcher.getIndexReader().close();\n    controlIndexReader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#testPointValuesMemoryIndexVsNormalIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testPointValuesMemoryIndexVsNormalIndex().mjava","sourceNew":"  public void testPointValuesMemoryIndexVsNormalIndex() throws Exception {\n    int size = atLeast(12);\n\n    List<Integer> randomValues = new ArrayList<>();\n\n    Document doc = new Document();\n    for (Integer randomInteger : random().ints(size).toArray()) {\n      doc.add(new IntPoint(\"int\", randomInteger));\n      randomValues.add(randomInteger);\n      doc.add(new LongPoint(\"long\", randomInteger));\n      doc.add(new FloatPoint(\"float\", randomInteger));\n      doc.add(new DoublePoint(\"double\", randomInteger));\n    }\n\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    MemoryIndex memoryIndex = MemoryIndex.fromDocument(doc, mockAnalyzer);\n    IndexSearcher memoryIndexSearcher = memoryIndex.createSearcher();\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader controlIndexReader = DirectoryReader.open(dir);\n    IndexSearcher controlIndexSearcher = new IndexSearcher(controlIndexReader);\n\n    Supplier<Integer> valueSupplier = () -> randomValues.get(random().nextInt(randomValues.size()));\n    Query[] queries = new Query[] {\n        IntPoint.newExactQuery(\"int\", valueSupplier.get()),\n        LongPoint.newExactQuery(\"long\", valueSupplier.get()),\n        FloatPoint.newExactQuery(\"float\", valueSupplier.get()),\n        DoublePoint.newExactQuery(\"double\", valueSupplier.get()),\n        IntPoint.newSetQuery(\"int\", valueSupplier.get(), valueSupplier.get()),\n        LongPoint.newSetQuery(\"long\", valueSupplier.get(), valueSupplier.get()),\n        FloatPoint.newSetQuery(\"float\", valueSupplier.get(), valueSupplier.get()),\n        DoublePoint.newSetQuery(\"double\", valueSupplier.get(), valueSupplier.get()),\n        IntPoint.newRangeQuery(\"int\", valueSupplier.get(), valueSupplier.get()),\n        LongPoint.newRangeQuery(\"long\", valueSupplier.get(), valueSupplier.get()),\n        FloatPoint.newRangeQuery(\"float\", valueSupplier.get(), valueSupplier.get()),\n        DoublePoint.newRangeQuery(\"double\", valueSupplier.get(), valueSupplier.get())\n    };\n    for (Query query : queries) {\n      assertEquals(controlIndexSearcher.count(query), controlIndexSearcher.count(query));\n    }\n\n    memoryIndexSearcher.getIndexReader().close();\n    controlIndexReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPointValuesMemoryIndexVsNormalIndex() throws Exception {\n    int size = atLeast(12);\n\n    List<Integer> randomValues = new ArrayList<>();\n\n    Document doc = new Document();\n    for (Integer randomInteger : random().ints(size).toArray()) {\n      doc.add(new IntPoint(\"int\", randomInteger));\n      randomValues.add(randomInteger);\n      doc.add(new LongPoint(\"long\", randomInteger));\n      doc.add(new FloatPoint(\"float\", randomInteger));\n      doc.add(new DoublePoint(\"double\", randomInteger));\n    }\n\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    MemoryIndex memoryIndex = MemoryIndex.fromDocument(doc, mockAnalyzer);\n    IndexSearcher memoryIndexSearcher = memoryIndex.createSearcher();\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader controlIndexReader = DirectoryReader.open(dir);\n    IndexSearcher controlIndexSearcher = new IndexSearcher(controlIndexReader);\n\n    Supplier<Integer> valueSupplier = () -> randomValues.get(random().nextInt(randomValues.size()));\n    Query[] queries = new Query[] {\n        IntPoint.newExactQuery(\"int\", valueSupplier.get()),\n        LongPoint.newExactQuery(\"long\", valueSupplier.get()),\n        FloatPoint.newExactQuery(\"float\", valueSupplier.get()),\n        DoublePoint.newExactQuery(\"double\", valueSupplier.get()),\n        IntPoint.newSetQuery(\"int\", valueSupplier.get(), valueSupplier.get()),\n        LongPoint.newSetQuery(\"long\", valueSupplier.get(), valueSupplier.get()),\n        FloatPoint.newSetQuery(\"float\", valueSupplier.get(), valueSupplier.get()),\n        DoublePoint.newSetQuery(\"double\", valueSupplier.get(), valueSupplier.get()),\n        IntPoint.newRangeQuery(\"int\", valueSupplier.get(), valueSupplier.get()),\n        LongPoint.newRangeQuery(\"long\", valueSupplier.get(), valueSupplier.get()),\n        FloatPoint.newRangeQuery(\"float\", valueSupplier.get(), valueSupplier.get()),\n        DoublePoint.newRangeQuery(\"double\", valueSupplier.get(), valueSupplier.get())\n    };\n    for (Query query : queries) {\n      assertEquals(controlIndexSearcher.count(query), controlIndexSearcher.count(query));\n    }\n\n    memoryIndexSearcher.getIndexReader().close();\n    controlIndexReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275":["d77dafd89756a5161d244985903e3487ca109182"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74d5d70ec9df9b59ea6d0dbdb5f7af1991ba7275"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}