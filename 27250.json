{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","commits":[{"id":"abe5a5b55ce06226629251ec4c197c1d08c70b18","date":1341826007,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testCharFilters().mjava","sourceNew":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","sourceOld":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22659e4b60cbbd3c13216360578240ddeca2d8b4","date":1341827398,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testCharFilters().mjava","sourceNew":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","sourceOld":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e7f30683f53928b2fce016e6430c9795caff22","date":1341839598,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalzyerWrapper#testCharFilters().mjava","sourceNew":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","sourceOld":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc706b1e03a539d44d99998108feb684bb44cbb2","date":1342522408,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","sourceNew":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(reader, 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","sourceOld":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","pathOld":"/dev/null","sourceNew":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(reader, 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","sourceNew":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(reader, 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","sourceOld":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","sourceNew":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(reader, 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","sourceOld":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new MockTokenizer(reader));\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(reader, 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","sourceNew":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(reader, 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    p.close();\n    a.close(); // TODO: fix this about PFAW, its a trap\n  }\n\n","sourceOld":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(reader, 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPerFieldAnalyzerWrapper#testCharFilters().mjava","sourceNew":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(reader, 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    p.close();\n    a.close(); // TODO: fix this about PFAW, its a trap\n  }\n\n","sourceOld":"  public void testCharFilters() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new MockTokenizer());\n      }\n\n      @Override\n      protected Reader initReader(String fieldName, Reader reader) {\n        return new MockCharFilter(reader, 7);\n      }\n    };\n    assertAnalyzesTo(a, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    // now wrap in PFAW\n    PerFieldAnalyzerWrapper p = new PerFieldAnalyzerWrapper(a, Collections.<String,Analyzer>emptyMap());\n    \n    assertAnalyzesTo(p, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","a56958d7f71a28824f20031ffbb2e13502a0274e"],"04e7f30683f53928b2fce016e6430c9795caff22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","abe5a5b55ce06226629251ec4c197c1d08c70b18"],"aba371508186796cc6151d8223a5b4e16d02e26e":["04e7f30683f53928b2fce016e6430c9795caff22","fc706b1e03a539d44d99998108feb684bb44cbb2"],"fc706b1e03a539d44d99998108feb684bb44cbb2":["abe5a5b55ce06226629251ec4c197c1d08c70b18"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["fc706b1e03a539d44d99998108feb684bb44cbb2"],"abe5a5b55ce06226629251ec4c197c1d08c70b18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fc706b1e03a539d44d99998108feb684bb44cbb2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22659e4b60cbbd3c13216360578240ddeca2d8b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","abe5a5b55ce06226629251ec4c197c1d08c70b18"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"04e7f30683f53928b2fce016e6430c9795caff22":["aba371508186796cc6151d8223a5b4e16d02e26e"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fc706b1e03a539d44d99998108feb684bb44cbb2":["aba371508186796cc6151d8223a5b4e16d02e26e","ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"abe5a5b55ce06226629251ec4c197c1d08c70b18":["04e7f30683f53928b2fce016e6430c9795caff22","fc706b1e03a539d44d99998108feb684bb44cbb2","22659e4b60cbbd3c13216360578240ddeca2d8b4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04e7f30683f53928b2fce016e6430c9795caff22","abe5a5b55ce06226629251ec4c197c1d08c70b18","fe33227f6805edab2036cbb80645cc4e2d1fa424","22659e4b60cbbd3c13216360578240ddeca2d8b4"],"22659e4b60cbbd3c13216360578240ddeca2d8b4":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","22659e4b60cbbd3c13216360578240ddeca2d8b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}