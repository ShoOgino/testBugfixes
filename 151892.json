{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for(;;) {\n        synchronized( runners ) {\n          if( runners.isEmpty()\n                  || (queue.remainingCapacity() < queue.size()    // queue is half full and we can add more runners\n                  && runners.size() < threadCount) )\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add( r );\n            scheduler.execute( r );\n          } else {\n            // break out of the retry loop if we added the element to the queue successfully, *and*\n            // while we are still holding the runners lock to prevent race conditions.\n            // race conditions.\n            if (success) break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all runners stopped.\n        // In all cases, we should loop back to the top to see if we need to start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n\n      }\n\n\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for(;;) {\n        synchronized( runners ) {\n          if( runners.isEmpty()\n                  || (queue.remainingCapacity() < queue.size()    // queue is half full and we can add more runners\n                  && runners.size() < threadCount) )\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add( r );\n            scheduler.execute( r );\n          } else {\n            // break out of the retry loop if we added the element to the queue successfully, *and*\n            // while we are still holding the runners lock to prevent race conditions.\n            // race conditions.\n            if (success) break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all runners stopped.\n        // In all cases, we should loop back to the top to see if we need to start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n\n      }\n\n\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for(;;) {\n        synchronized( runners ) {\n          if( runners.isEmpty()\n                  || (queue.remainingCapacity() < queue.size()    // queue is half full and we can add more runners\n                  && runners.size() < threadCount) )\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add( r );\n            scheduler.execute( r );\n          } else {\n            // break out of the retry loop if we added the element to the queue successfully, *and*\n            // while we are still holding the runners lock to prevent race conditions.\n            // race conditions.\n            if (success) break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all runners stopped.\n        // In all cases, we should loop back to the top to see if we need to start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n\n      }\n\n\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for(;;) {\n        synchronized( runners ) {\n          if( runners.isEmpty()\n                  || (queue.remainingCapacity() < queue.size()    // queue is half full and we can add more runners\n                  && runners.size() < threadCount) )\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add( r );\n            scheduler.execute( r );\n          } else {\n            // break out of the retry loop if we added the element to the queue successfully, *and*\n            // while we are still holding the runners lock to prevent race conditions.\n            // race conditions.\n            if (success) break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all runners stopped.\n        // In all cases, we should loop back to the top to see if we need to start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n\n      }\n\n\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for(;;) {\n        synchronized( runners ) {\n          if( runners.isEmpty()\n                  || (queue.remainingCapacity() < queue.size()    // queue is half full and we can add more runners\n                  && runners.size() < threadCount) )\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add( r );\n            scheduler.execute( r );\n          } else {\n            // break out of the retry loop if we added the element to the queue successfully, *and*\n            // while we are still holding the runners lock to prevent race conditions.\n            // race conditions.\n            if (success) break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all runners stopped.\n        // In all cases, we should loop back to the top to see if we need to start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n\n      }\n\n\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for(;;) {\n        synchronized( runners ) {\n          if( runners.isEmpty()\n                  || (queue.remainingCapacity() < queue.size()    // queue is half full and we can add more runners\n                  && runners.size() < threadCount) )\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add( r );\n            scheduler.execute( r );\n          } else {\n            // break out of the retry loop if we added the element to the queue successfully, *and*\n            // while we are still holding the runners lock to prevent race conditions.\n            // race conditions.\n            if (success) break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all runners stopped.\n        // In all cases, we should loop back to the top to see if we need to start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n\n      }\n\n\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":5,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServer#request(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","sourceNew":"  public NamedList<Object> request(final SolrRequest request)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return server.request(request);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (req.getDocuments() == null || req.getDocuments().isEmpty()) {\n      blockUntilFinished();\n      return server.request(request);\n    }\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return server.request(request);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for (;;) {\n        synchronized (runners) {\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() // queue\n                                                                             // is\n                                                                             // half\n                                                                             // full\n                                                                             // and\n                                                                             // we\n                                                                             // can\n                                                                             // add\n                                                                             // more\n                                                                             // runners\n              && runners.size() < threadCount)) {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add(r);\n            scheduler.execute(r);\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            // race conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n\n      }\n\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for(;;) {\n        synchronized( runners ) {\n          if( runners.isEmpty()\n                  || (queue.remainingCapacity() < queue.size()    // queue is half full and we can add more runners\n                  && runners.size() < threadCount) )\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add( r );\n            scheduler.execute( r );\n          } else {\n            // break out of the retry loop if we added the element to the queue successfully, *and*\n            // while we are still holding the runners lock to prevent race conditions.\n            // race conditions.\n            if (success) break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all runners stopped.\n        // In all cases, we should loop back to the top to see if we need to start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n\n      }\n\n\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":["945902ae43d8dd7e920418efe36981403c2ee669"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}