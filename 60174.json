{"path":"solr/core/src/test/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactoryTest#testCloneFieldExample().mjava","commits":[{"id":"a82f17a4aec53026c4ca0f2fa62ad8eaed017bb0","date":1446511397,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactoryTest#testCloneFieldExample().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testCloneFieldExample().mjava","sourceNew":"  public void testCloneFieldExample() throws Exception {\n\n    SolrInputDocument d;\n\n    // test example from the javadocs\n    d = processAdd(\"multiple-clones\",\n                   doc(f(\"id\", \"1111\"),\n                       f(\"category\", \"misc\"),\n                       f(\"authors\", \"Isaac Asimov\", \"John Brunner\"),\n                       f(\"editors\", \"John W. Campbell\"),\n                       f(\"store1_price\", 87),\n                       f(\"store2_price\", 78),\n                       f(\"store3_price\", (Object) null),\n                       f(\"list_price\", 1000),\n                       f(\"features\", \"Pages!\", \"Binding!\"),\n                       f(\"feat_of_strengths\", \"Pullups\")));\n                       \n    assertNotNull(d);\n    assertEquals(\"misc\", d.getFieldValue(\"category\"));\n    assertEquals(\"misc\", d.getFieldValue(\"category_s\"));\n    assertEquals(Arrays.asList(\"Isaac Asimov\", \"John Brunner\"),\n                 d.getFieldValues(\"authors\"));\n    assertEquals(Collections.singletonList(\"John W. Campbell\"),\n                 d.getFieldValues(\"editors\"));\n    assertEquals(Arrays.asList(\"Isaac Asimov\", \"John Brunner\",\n                               \"John W. Campbell\"),\n                 d.getFieldValues(\"contributors\"));\n    assertEquals(87, d.getFieldValue(\"store1_price\"));\n    assertEquals(78, d.getFieldValue(\"store2_price\"));\n    assertEquals(1000, d.getFieldValue(\"list_price\"));\n    assertEquals(Arrays.asList(87, 78),\n                 d.getFieldValues(\"all_prices\"));\n    \n    assertEquals(Arrays.asList(\"Pages!\", \"Binding!\"),\n                 d.getFieldValues(\"key_feature\"));\n    assertEquals(\"Pullups\", d.getFieldValue(\"key_feat_of_strength\"));\n  }\n\n","sourceOld":"  public void testCloneFieldExample() throws Exception {\n\n    SolrInputDocument d = null;\n\n    // test example from the javadocs\n    d = processAdd(\"multiple-clones\",       \n                   doc(f(\"id\", \"1111\"),\n                       f(\"category\", \"misc\"),\n                       f(\"authors\", \"Isaac Asimov\", \"John Brunner\"),\n                       f(\"editors\", \"John W. Campbell\"),\n                       f(\"store1_price\", 87),\n                       f(\"store2_price\", 78),\n                       f(\"store3_price\", (Object) null),\n                       f(\"list_price\", 1000)));\n    assertNotNull(d);\n    assertEquals(\"misc\",d.getFieldValue(\"category\"));\n    assertEquals(\"misc\",d.getFieldValue(\"category_s\"));\n    assertEquals(Arrays.asList(\"Isaac Asimov\", \"John Brunner\"),\n                 d.getFieldValues(\"authors\"));\n    assertEquals(Arrays.asList(\"John W. Campbell\"),\n                 d.getFieldValues(\"editors\"));\n    assertEquals(Arrays.asList(\"Isaac Asimov\", \"John Brunner\", \n                               \"John W. Campbell\"),\n                 d.getFieldValues(\"contributors\"));\n    assertEquals(87,d.getFieldValue(\"store1_price\"));\n    assertEquals(78,d.getFieldValue(\"store2_price\"));\n    assertEquals(1000,d.getFieldValue(\"list_price\"));\n    assertEquals(Arrays.asList(87, 78),\n                 d.getFieldValues(\"all_prices\"));\n\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a82f17a4aec53026c4ca0f2fa62ad8eaed017bb0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a82f17a4aec53026c4ca0f2fa62ad8eaed017bb0"]},"commit2Childs":{"a82f17a4aec53026c4ca0f2fa62ad8eaed017bb0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a82f17a4aec53026c4ca0f2fa62ad8eaed017bb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}