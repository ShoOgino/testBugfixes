{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#doWrapperModelPersistenceChecks(String,String,String).mjava","commits":[{"id":"a03034a121f635bebacef74693404e3273b614a6","date":1511880957,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#doWrapperModelPersistenceChecks(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static void doWrapperModelPersistenceChecks(String modelName,\n      String featureStoreName, String baseModelFileName) throws Exception {\n    // note that the wrapper and the wrapped model always have the same name\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        // the wrapped model shouldn't be registered\n        \"!/models/[1]/name=='\"+modelName+\"'\",\n        // but the wrapper model should be registered\n        \"/models/[0]/name=='\"+modelName+\"'\",\n        \"/models/[0]/class=='\" + DefaultWrapperModel.class.getCanonicalName() + \"'\",\n        \"/models/[0]/store=='\" + featureStoreName + \"'\",\n        // the wrapper model shouldn't contain the definitions of the wrapped model\n        \"/models/[0]/features/==[]\",\n        // but only its own parameters\n        \"/models/[0]/params=={resource:'\"+baseModelFileName+\"'}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bf344c7efad3160a74c52ef1fd53f535978fc5b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#doWrapperModelPersistenceChecks(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static void doWrapperModelPersistenceChecks(String modelName,\n      String featureStoreName, String baseModelFileName) throws Exception {\n    // note that the wrapper and the wrapped model always have the same name\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        // the wrapped model shouldn't be registered\n        \"!/models/[1]/name=='\"+modelName+\"'\",\n        // but the wrapper model should be registered\n        \"/models/[0]/name=='\"+modelName+\"'\",\n        \"/models/[0]/class=='\" + DefaultWrapperModel.class.getCanonicalName() + \"'\",\n        \"/models/[0]/store=='\" + featureStoreName + \"'\",\n        // the wrapper model shouldn't contain the definitions of the wrapped model\n        \"/models/[0]/features/==[]\",\n        // but only its own parameters\n        \"/models/[0]/params=={resource:'\"+baseModelFileName+\"'}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf344c7efad3160a74c52ef1fd53f535978fc5b7","date":1518199939,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#doWrapperModelPersistenceChecks(String,String,String).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#doWrapperModelPersistenceChecks(String,String,String).mjava","sourceNew":"  private static void doWrapperModelPersistenceChecks(String modelName,\n      String featureStoreName, String baseModelFileName) throws Exception {\n    // note that the wrapper and the wrapped model always have the same name\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        // the wrapped model shouldn't be registered\n        \"!/models/[1]/name=='\"+modelName+\"'\",\n        // but the wrapper model should be registered\n        \"/models/[0]/name=='\"+modelName+\"'\",\n        \"/models/[0]/class=='\" + DefaultWrapperModel.class.getName() + \"'\",\n        \"/models/[0]/store=='\" + featureStoreName + \"'\",\n        // the wrapper model shouldn't contain the definitions of the wrapped model\n        \"/models/[0]/features/==[]\",\n        // but only its own parameters\n        \"/models/[0]/params=={resource:'\"+baseModelFileName+\"'}\");\n  }\n\n","sourceOld":"  private static void doWrapperModelPersistenceChecks(String modelName,\n      String featureStoreName, String baseModelFileName) throws Exception {\n    // note that the wrapper and the wrapped model always have the same name\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        // the wrapped model shouldn't be registered\n        \"!/models/[1]/name=='\"+modelName+\"'\",\n        // but the wrapper model should be registered\n        \"/models/[0]/name=='\"+modelName+\"'\",\n        \"/models/[0]/class=='\" + DefaultWrapperModel.class.getCanonicalName() + \"'\",\n        \"/models/[0]/store=='\" + featureStoreName + \"'\",\n        // the wrapper model shouldn't contain the definitions of the wrapped model\n        \"/models/[0]/features/==[]\",\n        // but only its own parameters\n        \"/models/[0]/params=={resource:'\"+baseModelFileName+\"'}\");\n  }\n\n","bugFix":["a03034a121f635bebacef74693404e3273b614a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f906c3206e7eb174774f938416460e39170d819","date":1518202619,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#doWrapperModelPersistenceChecks(String,String,String).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#doWrapperModelPersistenceChecks(String,String,String).mjava","sourceNew":"  private static void doWrapperModelPersistenceChecks(String modelName,\n      String featureStoreName, String baseModelFileName) throws Exception {\n    // note that the wrapper and the wrapped model always have the same name\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        // the wrapped model shouldn't be registered\n        \"!/models/[1]/name=='\"+modelName+\"'\",\n        // but the wrapper model should be registered\n        \"/models/[0]/name=='\"+modelName+\"'\",\n        \"/models/[0]/class=='\" + DefaultWrapperModel.class.getName() + \"'\",\n        \"/models/[0]/store=='\" + featureStoreName + \"'\",\n        // the wrapper model shouldn't contain the definitions of the wrapped model\n        \"/models/[0]/features/==[]\",\n        // but only its own parameters\n        \"/models/[0]/params=={resource:'\"+baseModelFileName+\"'}\");\n  }\n\n","sourceOld":"  private static void doWrapperModelPersistenceChecks(String modelName,\n      String featureStoreName, String baseModelFileName) throws Exception {\n    // note that the wrapper and the wrapped model always have the same name\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        // the wrapped model shouldn't be registered\n        \"!/models/[1]/name=='\"+modelName+\"'\",\n        // but the wrapper model should be registered\n        \"/models/[0]/name=='\"+modelName+\"'\",\n        \"/models/[0]/class=='\" + DefaultWrapperModel.class.getCanonicalName() + \"'\",\n        \"/models/[0]/store=='\" + featureStoreName + \"'\",\n        // the wrapper model shouldn't contain the definitions of the wrapped model\n        \"/models/[0]/features/==[]\",\n        // but only its own parameters\n        \"/models/[0]/params=={resource:'\"+baseModelFileName+\"'}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bf344c7efad3160a74c52ef1fd53f535978fc5b7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a03034a121f635bebacef74693404e3273b614a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a03034a121f635bebacef74693404e3273b614a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f906c3206e7eb174774f938416460e39170d819"],"3f906c3206e7eb174774f938416460e39170d819":["1aad05eeff7818b0833c02ac6b743aa72054963b","bf344c7efad3160a74c52ef1fd53f535978fc5b7"]},"commit2Childs":{"bf344c7efad3160a74c52ef1fd53f535978fc5b7":["3f906c3206e7eb174774f938416460e39170d819"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["bf344c7efad3160a74c52ef1fd53f535978fc5b7","3f906c3206e7eb174774f938416460e39170d819"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1aad05eeff7818b0833c02ac6b743aa72054963b","a03034a121f635bebacef74693404e3273b614a6"],"a03034a121f635bebacef74693404e3273b614a6":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3f906c3206e7eb174774f938416460e39170d819":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}