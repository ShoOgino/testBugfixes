{"path":"lucene/core/src/java/org/apache/lucene/index/ReaderManager#ReaderManager(IndexWriter,boolean).mjava","commits":[{"id":"8b7a1bc6030c258e47d63eff3455a2b1bbf32683","date":1339494023,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReaderManager#ReaderManager(IndexWriter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates and returns a new ReaderManager from the given\n   * {@link IndexWriter}.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes\n   *          If <code>true</code>, all buffered deletes will be applied (made\n   *          visible) in the {@link IndexSearcher} / {@link DirectoryReader}.\n   *          If <code>false</code>, the deletes may or may not be applied, but\n   *          remain buffered (in IndexWriter) so that they will be applied in\n   *          the future. Applying deletes can be costly, so if your app can\n   *          tolerate deleted documents being returned you might gain some\n   *          performance by passing <code>false</code>. See\n   *          {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter, boolean)}.\n   * \n   * @throws IOException\n   */\n  public ReaderManager(IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    current = DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReaderManager#ReaderManager(IndexWriter,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReaderManager#ReaderManager(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Creates and returns a new ReaderManager from the given\n   * {@link IndexWriter}.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes\n   *          If <code>true</code>, all buffered deletes will be applied (made\n   *          visible) in the {@link IndexSearcher} / {@link DirectoryReader}.\n   *          If <code>false</code>, the deletes may or may not be applied, but\n   *          remain buffered (in IndexWriter) so that they will be applied in\n   *          the future. Applying deletes can be costly, so if your app can\n   *          tolerate deleted documents being returned you might gain some\n   *          performance by passing <code>false</code>. See\n   *          {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter, boolean)}.\n   * \n   * @throws IOException If there is a low-level I/O error\n   */\n  public ReaderManager(IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    current = DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new ReaderManager from the given\n   * {@link IndexWriter}.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes\n   *          If <code>true</code>, all buffered deletes will be applied (made\n   *          visible) in the {@link IndexSearcher} / {@link DirectoryReader}.\n   *          If <code>false</code>, the deletes may or may not be applied, but\n   *          remain buffered (in IndexWriter) so that they will be applied in\n   *          the future. Applying deletes can be costly, so if your app can\n   *          tolerate deleted documents being returned you might gain some\n   *          performance by passing <code>false</code>. See\n   *          {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter, boolean)}.\n   * \n   * @throws IOException\n   */\n  public ReaderManager(IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    current = DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReaderManager#ReaderManager(IndexWriter,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReaderManager#ReaderManager(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Creates and returns a new ReaderManager from the given\n   * {@link IndexWriter}.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes\n   *          If <code>true</code>, all buffered deletes will be applied (made\n   *          visible) in the {@link IndexSearcher} / {@link DirectoryReader}.\n   *          If <code>false</code>, the deletes may or may not be applied, but\n   *          remain buffered (in IndexWriter) so that they will be applied in\n   *          the future. Applying deletes can be costly, so if your app can\n   *          tolerate deleted documents being returned you might gain some\n   *          performance by passing <code>false</code>. See\n   *          {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter, boolean)}.\n   * \n   * @throws IOException If there is a low-level I/O error\n   */\n  public ReaderManager(IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    current = DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new ReaderManager from the given\n   * {@link IndexWriter}.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes\n   *          If <code>true</code>, all buffered deletes will be applied (made\n   *          visible) in the {@link IndexSearcher} / {@link DirectoryReader}.\n   *          If <code>false</code>, the deletes may or may not be applied, but\n   *          remain buffered (in IndexWriter) so that they will be applied in\n   *          the future. Applying deletes can be costly, so if your app can\n   *          tolerate deleted documents being returned you might gain some\n   *          performance by passing <code>false</code>. See\n   *          {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter, boolean)}.\n   * \n   * @throws IOException If there is a low-level I/O error\n   */\n  public ReaderManager(IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    current = DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReaderManager#ReaderManager(IndexWriter,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReaderManager#ReaderManager(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Creates and returns a new ReaderManager from the given\n   * {@link IndexWriter}.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes\n   *          If <code>true</code>, all buffered deletes will be applied (made\n   *          visible) in the {@link IndexSearcher} / {@link DirectoryReader}.\n   *          If <code>false</code>, the deletes may or may not be applied, but\n   *          remain buffered (in IndexWriter) so that they will be applied in\n   *          the future. Applying deletes can be costly, so if your app can\n   *          tolerate deleted documents being returned you might gain some\n   *          performance by passing <code>false</code>. See\n   *          {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter, boolean)}.\n   * \n   * @throws IOException If there is a low-level I/O error\n   */\n  public ReaderManager(IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    current = DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new ReaderManager from the given\n   * {@link IndexWriter}.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes\n   *          If <code>true</code>, all buffered deletes will be applied (made\n   *          visible) in the {@link IndexSearcher} / {@link DirectoryReader}.\n   *          If <code>false</code>, the deletes may or may not be applied, but\n   *          remain buffered (in IndexWriter) so that they will be applied in\n   *          the future. Applying deletes can be costly, so if your app can\n   *          tolerate deleted documents being returned you might gain some\n   *          performance by passing <code>false</code>. See\n   *          {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter, boolean)}.\n   * \n   * @throws IOException If there is a low-level I/O error\n   */\n  public ReaderManager(IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    current = DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReaderManager#ReaderManager(IndexWriter,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReaderManager#ReaderManager(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Expert: creates and returns a new ReaderManager from the given\n   * {@link IndexWriter}, controlling whether past deletions should be applied.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes\n   *          If <code>true</code>, all buffered deletes will be applied (made\n   *          visible) in the {@link IndexSearcher} / {@link DirectoryReader}.\n   *          If <code>false</code>, the deletes may or may not be applied, but\n   *          remain buffered (in IndexWriter) so that they will be applied in\n   *          the future. Applying deletes can be costly, so if your app can\n   *          tolerate deleted documents being returned you might gain some\n   *          performance by passing <code>false</code>. See\n   *          {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter, boolean)}.\n   * \n   * @throws IOException If there is a low-level I/O error\n   */\n  public ReaderManager(IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    current = DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new ReaderManager from the given\n   * {@link IndexWriter}.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes\n   *          If <code>true</code>, all buffered deletes will be applied (made\n   *          visible) in the {@link IndexSearcher} / {@link DirectoryReader}.\n   *          If <code>false</code>, the deletes may or may not be applied, but\n   *          remain buffered (in IndexWriter) so that they will be applied in\n   *          the future. Applying deletes can be costly, so if your app can\n   *          tolerate deleted documents being returned you might gain some\n   *          performance by passing <code>false</code>. See\n   *          {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter, boolean)}.\n   * \n   * @throws IOException If there is a low-level I/O error\n   */\n  public ReaderManager(IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    current = DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReaderManager#ReaderManager(IndexWriter,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReaderManager#ReaderManager(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Expert: creates and returns a new ReaderManager from the given\n   * {@link IndexWriter}, controlling whether past deletions should be applied.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes\n   *          If <code>true</code>, all buffered deletes will be applied (made\n   *          visible) in the {@link IndexSearcher} / {@link DirectoryReader}.\n   *          If <code>false</code>, the deletes may or may not be applied, but\n   *          remain buffered (in IndexWriter) so that they will be applied in\n   *          the future. Applying deletes can be costly, so if your app can\n   *          tolerate deleted documents being returned you might gain some\n   *          performance by passing <code>false</code>. See\n   *          {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter, boolean)}.\n   * @param writeAllDeletes\n   *          If <code>true</code>, new deletes will be forcefully written to index files.\n   * \n   * @throws IOException If there is a low-level I/O error\n   */\n  public ReaderManager(IndexWriter writer, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    current = DirectoryReader.open(writer, applyAllDeletes, writeAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Expert: creates and returns a new ReaderManager from the given\n   * {@link IndexWriter}, controlling whether past deletions should be applied.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes\n   *          If <code>true</code>, all buffered deletes will be applied (made\n   *          visible) in the {@link IndexSearcher} / {@link DirectoryReader}.\n   *          If <code>false</code>, the deletes may or may not be applied, but\n   *          remain buffered (in IndexWriter) so that they will be applied in\n   *          the future. Applying deletes can be costly, so if your app can\n   *          tolerate deleted documents being returned you might gain some\n   *          performance by passing <code>false</code>. See\n   *          {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter, boolean)}.\n   * \n   * @throws IOException If there is a low-level I/O error\n   */\n  public ReaderManager(IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    current = DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReaderManager#ReaderManager(IndexWriter,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReaderManager#ReaderManager(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Expert: creates and returns a new ReaderManager from the given\n   * {@link IndexWriter}, controlling whether past deletions should be applied.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes\n   *          If <code>true</code>, all buffered deletes will be applied (made\n   *          visible) in the {@link IndexSearcher} / {@link DirectoryReader}.\n   *          If <code>false</code>, the deletes may or may not be applied, but\n   *          remain buffered (in IndexWriter) so that they will be applied in\n   *          the future. Applying deletes can be costly, so if your app can\n   *          tolerate deleted documents being returned you might gain some\n   *          performance by passing <code>false</code>. See\n   *          {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter, boolean)}.\n   * @param writeAllDeletes\n   *          If <code>true</code>, new deletes will be forcefully written to index files.\n   * \n   * @throws IOException If there is a low-level I/O error\n   */\n  public ReaderManager(IndexWriter writer, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    current = DirectoryReader.open(writer, applyAllDeletes, writeAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Expert: creates and returns a new ReaderManager from the given\n   * {@link IndexWriter}, controlling whether past deletions should be applied.\n   * \n   * @param writer\n   *          the IndexWriter to open the IndexReader from.\n   * @param applyAllDeletes\n   *          If <code>true</code>, all buffered deletes will be applied (made\n   *          visible) in the {@link IndexSearcher} / {@link DirectoryReader}.\n   *          If <code>false</code>, the deletes may or may not be applied, but\n   *          remain buffered (in IndexWriter) so that they will be applied in\n   *          the future. Applying deletes can be costly, so if your app can\n   *          tolerate deleted documents being returned you might gain some\n   *          performance by passing <code>false</code>. See\n   *          {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter, boolean)}.\n   * \n   * @throws IOException If there is a low-level I/O error\n   */\n  public ReaderManager(IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    current = DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["8b7a1bc6030c258e47d63eff3455a2b1bbf32683"],"2a1862266772deb28cdcb7d996b64d2177022687":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"8b7a1bc6030c258e47d63eff3455a2b1bbf32683":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68496c2200e559fb7802f7575427b7a482659afb":["2a1862266772deb28cdcb7d996b64d2177022687","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["2a1862266772deb28cdcb7d996b64d2177022687"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"2a1862266772deb28cdcb7d996b64d2177022687":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b7a1bc6030c258e47d63eff3455a2b1bbf32683"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"8b7a1bc6030c258e47d63eff3455a2b1bbf32683":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["2a1862266772deb28cdcb7d996b64d2177022687"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}