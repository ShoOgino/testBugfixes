{"path":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(Config,Command,Command,MorphlineContext).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/solr-morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public TokenizeText(Config config, Command parent, Command child, MorphlineContext context) {\n      super(config, parent, child, context);\n      this.inputFieldName = getConfigs().getString(config, \"inputField\");\n      this.outputFieldName = getConfigs().getString(config, \"outputField\");      \n      String solrFieldType = getConfigs().getString(config, \"solrFieldType\");      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      FieldType fieldType = schema.getFieldTypeByName(solrFieldType);\n      if (fieldType == null) {\n        throw new MorphlineCompilationException(\"Missing Solr field type in schema.xml for name: \" + solrFieldType, config);\n      }\n      this.analyzer = fieldType.getAnalyzer();\n      Preconditions.checkNotNull(analyzer);\n      try { // register CharTermAttribute for later (implicit) reuse\n        this.token = analyzer.tokenStream(\"content\", reader).addAttribute(CharTermAttribute.class);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot create token stream\", config, e);\n      }\n      Preconditions.checkNotNull(token);\n      validateArguments();\n    }\n\n","sourceOld":"    public TokenizeText(Config config, Command parent, Command child, MorphlineContext context) {\n      super(config, parent, child, context);\n      this.inputFieldName = getConfigs().getString(config, \"inputField\");\n      this.outputFieldName = getConfigs().getString(config, \"outputField\");      \n      String solrFieldType = getConfigs().getString(config, \"solrFieldType\");      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      FieldType fieldType = schema.getFieldTypeByName(solrFieldType);\n      if (fieldType == null) {\n        throw new MorphlineCompilationException(\"Missing Solr field type in schema.xml for name: \" + solrFieldType, config);\n      }\n      this.analyzer = fieldType.getAnalyzer();\n      Preconditions.checkNotNull(analyzer);\n      try { // register CharTermAttribute for later (implicit) reuse\n        this.token = analyzer.tokenStream(\"content\", reader).addAttribute(CharTermAttribute.class);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot create token stream\", config, e);\n      }\n      Preconditions.checkNotNull(token);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b291fa953aeb2a135ed14740cb774eb76bfc64b0","date":1386184301,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public TokenizeText(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      this.inputFieldName = getConfigs().getString(config, \"inputField\");\n      this.outputFieldName = getConfigs().getString(config, \"outputField\");      \n      String solrFieldType = getConfigs().getString(config, \"solrFieldType\");      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      FieldType fieldType = schema.getFieldTypeByName(solrFieldType);\n      if (fieldType == null) {\n        throw new MorphlineCompilationException(\"Missing Solr field type in schema.xml for name: \" + solrFieldType, config);\n      }\n      this.analyzer = fieldType.getAnalyzer();\n      Preconditions.checkNotNull(analyzer);\n      try { // register CharTermAttribute for later (implicit) reuse\n        this.token = analyzer.tokenStream(\"content\", reader).addAttribute(CharTermAttribute.class);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot create token stream\", config, e);\n      }\n      Preconditions.checkNotNull(token);\n      validateArguments();\n    }\n\n","sourceOld":"    public TokenizeText(Config config, Command parent, Command child, MorphlineContext context) {\n      super(config, parent, child, context);\n      this.inputFieldName = getConfigs().getString(config, \"inputField\");\n      this.outputFieldName = getConfigs().getString(config, \"outputField\");      \n      String solrFieldType = getConfigs().getString(config, \"solrFieldType\");      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      FieldType fieldType = schema.getFieldTypeByName(solrFieldType);\n      if (fieldType == null) {\n        throw new MorphlineCompilationException(\"Missing Solr field type in schema.xml for name: \" + solrFieldType, config);\n      }\n      this.analyzer = fieldType.getAnalyzer();\n      Preconditions.checkNotNull(analyzer);\n      try { // register CharTermAttribute for later (implicit) reuse\n        this.token = analyzer.tokenStream(\"content\", reader).addAttribute(CharTermAttribute.class);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot create token stream\", config, e);\n      }\n      Preconditions.checkNotNull(token);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b291fa953aeb2a135ed14740cb774eb76bfc64b0":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b291fa953aeb2a135ed14740cb774eb76bfc64b0"]},"commit2Childs":{"b291fa953aeb2a135ed14740cb774eb76bfc64b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["b291fa953aeb2a135ed14740cb774eb76bfc64b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}