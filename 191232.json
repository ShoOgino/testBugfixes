{"path":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","commits":[{"id":"583cdb620dea20ef2bfafd8639a73b29de305103","date":1174543740,"type":1,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/request/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","sourceNew":"    /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n     * index pointed to by the current {@link IndexSearcher}.\n     */\n    private void rebuild(SolrQueryRequest req) throws IOException {\n        IndexReader indexReader = req.getSearcher().getReader();\n        Dictionary dictionary = new LuceneDictionary(indexReader, termSourceField);\n        spellChecker.indexDictionary(dictionary);\n        spellChecker.setSpellIndex(FSDirectory.getDirectory(spellcheckerIndexDir));\n    }\n\n","sourceOld":"    /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n     * index pointed to by the current {@link IndexSearcher}.\n     */\n    private void rebuild(SolrQueryRequest req) throws IOException {\n        IndexReader indexReader = req.getSearcher().getReader();\n        Dictionary dictionary = new LuceneDictionary(indexReader, termSourceField);\n        spellChecker.indexDictionary(dictionary);\n        spellChecker.setSpellIndex(FSDirectory.getDirectory(spellcheckerIndexDir));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c51a4de58ddc877061c374826b0232414b06c08b","date":1174943473,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","sourceNew":"    /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n     * index pointed to by the current {@link IndexSearcher}.\n     */\n    private void rebuild(SolrQueryRequest req) throws IOException, SolrException {\n      if (null == termSourceField) {\n        throw new SolrException\n          (500, \"can't rebuild spellchecker index without termSourceField configured\");\n      }\n      \n        IndexReader indexReader = req.getSearcher().getReader();\n        Dictionary dictionary = new LuceneDictionary(indexReader, termSourceField);\n        spellChecker.indexDictionary(dictionary);\n        reopen();\n    }\n\n","sourceOld":"    /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n     * index pointed to by the current {@link IndexSearcher}.\n     */\n    private void rebuild(SolrQueryRequest req) throws IOException {\n        IndexReader indexReader = req.getSearcher().getReader();\n        Dictionary dictionary = new LuceneDictionary(indexReader, termSourceField);\n        spellChecker.indexDictionary(dictionary);\n        spellChecker.setSpellIndex(FSDirectory.getDirectory(spellcheckerIndexDir));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6855049ff6427dd05716183aaeb715f5c84abf44","date":1174943640,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","sourceNew":"  /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n   * index pointed to by the current {@link IndexSearcher}.\n   */\n  private void rebuild(SolrQueryRequest req) throws IOException, SolrException {\n    if (null == termSourceField) {\n      throw new SolrException\n        (500, \"can't rebuild spellchecker index without termSourceField configured\");\n    }\n      \n    IndexReader indexReader = req.getSearcher().getReader();\n    Dictionary dictionary = new LuceneDictionary(indexReader, termSourceField);\n    spellChecker.indexDictionary(dictionary);\n    reopen();\n  }\n\n","sourceOld":"    /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n     * index pointed to by the current {@link IndexSearcher}.\n     */\n    private void rebuild(SolrQueryRequest req) throws IOException, SolrException {\n      if (null == termSourceField) {\n        throw new SolrException\n          (500, \"can't rebuild spellchecker index without termSourceField configured\");\n      }\n      \n        IndexReader indexReader = req.getSearcher().getReader();\n        Dictionary dictionary = new LuceneDictionary(indexReader, termSourceField);\n        spellChecker.indexDictionary(dictionary);\n        reopen();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4e55a5772cb42b76d11a9df57b6bb7333facde","date":1177860498,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","sourceNew":"  /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n   * index pointed to by the current {@link IndexSearcher}.\n   */\n  private void rebuild(SolrQueryRequest req) throws IOException, SolrException {\n    if (null == termSourceField) {\n      throw new SolrException\n        (500, \"can't rebuild spellchecker index without termSourceField configured\");\n    }\n      \n    IndexReader indexReader = req.getSearcher().getReader();\n    Dictionary dictionary = new LuceneDictionary(indexReader, termSourceField);\n    spellChecker.clearIndex();\n    spellChecker.indexDictionary(dictionary);\n    reopen();\n  }\n\n","sourceOld":"  /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n   * index pointed to by the current {@link IndexSearcher}.\n   */\n  private void rebuild(SolrQueryRequest req) throws IOException, SolrException {\n    if (null == termSourceField) {\n      throw new SolrException\n        (500, \"can't rebuild spellchecker index without termSourceField configured\");\n    }\n      \n    IndexReader indexReader = req.getSearcher().getReader();\n    Dictionary dictionary = new LuceneDictionary(indexReader, termSourceField);\n    spellChecker.indexDictionary(dictionary);\n    reopen();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","sourceNew":"  /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n   * index pointed to by the current {@link IndexSearcher}.\n   */\n  private void rebuild(SolrQueryRequest req) throws IOException, SolrException {\n    if (null == termSourceField) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \"can't rebuild spellchecker index without termSourceField configured\");\n    }\n      \n    IndexReader indexReader = req.getSearcher().getReader();\n    Dictionary dictionary = new LuceneDictionary(indexReader, termSourceField);\n    spellChecker.clearIndex();\n    spellChecker.indexDictionary(dictionary);\n    reopen();\n  }\n\n","sourceOld":"  /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n   * index pointed to by the current {@link IndexSearcher}.\n   */\n  private void rebuild(SolrQueryRequest req) throws IOException, SolrException {\n    if (null == termSourceField) {\n      throw new SolrException\n        (500, \"can't rebuild spellchecker index without termSourceField configured\");\n    }\n      \n    IndexReader indexReader = req.getSearcher().getReader();\n    Dictionary dictionary = new LuceneDictionary(indexReader, termSourceField);\n    spellChecker.clearIndex();\n    spellChecker.indexDictionary(dictionary);\n    reopen();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"071bae97f774d86dca206e837de23a56b71c8b29","date":1194291554,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","sourceNew":"  /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n   * index pointed to by the current {@link IndexSearcher}.\n   * Any word appearing in less that thresh documents will not be added to the spellcheck index.\n   */\n  private void rebuild(SolrQueryRequest req) throws IOException, SolrException {\n    if (null == termSourceField) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \"can't rebuild spellchecker index without termSourceField configured\");\n    }\n      \n    Float threshold;\n    try {\n      threshold = req.getParams().getFloat(\"sp.dictionary.threshold\", DEFAULT_DICTIONARY_THRESHOLD);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Threshold must be a valid positive float\", e);\n    }\n\n    IndexReader indexReader = req.getSearcher().getReader();\n    Dictionary dictionary = new HiFrequencyDictionary(indexReader, termSourceField, threshold);\n    spellChecker.clearIndex();\n    spellChecker.indexDictionary(dictionary);\n    reopen();\n  }\n\n","sourceOld":"  /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n   * index pointed to by the current {@link IndexSearcher}.\n   */\n  private void rebuild(SolrQueryRequest req) throws IOException, SolrException {\n    if (null == termSourceField) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \"can't rebuild spellchecker index without termSourceField configured\");\n    }\n      \n    IndexReader indexReader = req.getSearcher().getReader();\n    Dictionary dictionary = new LuceneDictionary(indexReader, termSourceField);\n    spellChecker.clearIndex();\n    spellChecker.indexDictionary(dictionary);\n    reopen();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560d9ff06b001421d5b77a46b7595c913deef74e","date":1195092229,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","sourceNew":"  /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n   * index pointed to by the current {@link IndexSearcher}.\n   * Any word appearing in less that thresh documents will not be added to the spellcheck index.\n   */\n  private void rebuild(SolrQueryRequest req) throws IOException, SolrException {\n    if (null == termSourceField) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \"can't rebuild spellchecker index without termSourceField configured\");\n    }\n      \n    Float threshold;\n    try {\n      threshold = req.getParams().getFloat(\"sp.dictionary.threshold\", DEFAULT_DICTIONARY_THRESHOLD);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Threshold must be a valid positive float\", e);\n    }\n\n    IndexReader indexReader = req.getSearcher().getReader();\n    Dictionary dictionary = new HighFrequencyDictionary(indexReader, termSourceField, threshold);\n    spellChecker.clearIndex();\n    spellChecker.indexDictionary(dictionary);\n    reopen();\n  }\n\n","sourceOld":"  /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n   * index pointed to by the current {@link IndexSearcher}.\n   * Any word appearing in less that thresh documents will not be added to the spellcheck index.\n   */\n  private void rebuild(SolrQueryRequest req) throws IOException, SolrException {\n    if (null == termSourceField) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \"can't rebuild spellchecker index without termSourceField configured\");\n    }\n      \n    Float threshold;\n    try {\n      threshold = req.getParams().getFloat(\"sp.dictionary.threshold\", DEFAULT_DICTIONARY_THRESHOLD);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Threshold must be a valid positive float\", e);\n    }\n\n    IndexReader indexReader = req.getSearcher().getReader();\n    Dictionary dictionary = new HiFrequencyDictionary(indexReader, termSourceField, threshold);\n    spellChecker.clearIndex();\n    spellChecker.indexDictionary(dictionary);\n    reopen();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3bfc556d7cb56ca5111e86544512fb1304ba00d","date":1195514291,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","sourceNew":"  /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n   * index pointed to by the current {@link IndexSearcher}.\n   * Any word appearing in less that thresh documents will not be added to the spellcheck index.\n   */\n  private void rebuild(SolrQueryRequest req) throws IOException, SolrException {\n    if (null == termSourceField) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \"can't rebuild spellchecker index without termSourceField configured\");\n    }\n\n    Dictionary dictionary = getDictionary(req);\n    spellChecker.clearIndex();\n    spellChecker.indexDictionary(dictionary);\n    reopen();\n  }\n\n","sourceOld":"  /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n   * index pointed to by the current {@link IndexSearcher}.\n   * Any word appearing in less that thresh documents will not be added to the spellcheck index.\n   */\n  private void rebuild(SolrQueryRequest req) throws IOException, SolrException {\n    if (null == termSourceField) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \"can't rebuild spellchecker index without termSourceField configured\");\n    }\n      \n    Float threshold;\n    try {\n      threshold = req.getParams().getFloat(\"sp.dictionary.threshold\", DEFAULT_DICTIONARY_THRESHOLD);\n    } catch (NumberFormatException e) {\n      throw new RuntimeException(\"Threshold must be a valid positive float\", e);\n    }\n\n    IndexReader indexReader = req.getSearcher().getReader();\n    Dictionary dictionary = new HighFrequencyDictionary(indexReader, termSourceField, threshold);\n    spellChecker.clearIndex();\n    spellChecker.indexDictionary(dictionary);\n    reopen();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/SpellCheckerRequestHandler#rebuild(SolrQueryRequest).mjava","sourceNew":"  /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n   * index pointed to by the current {@link IndexSearcher}.\n   * Any word appearing in less that thresh documents will not be added to the spellcheck index.\n   */\n  private void rebuild(SolrQueryRequest req) throws IOException, SolrException {\n    if (null == termSourceField) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \"can't rebuild spellchecker index without termSourceField configured\");\n    }\n\n    Dictionary dictionary = getDictionary(req);\n    spellChecker.clearIndex();\n    spellChecker.indexDictionary(dictionary);\n    reopen();\n  }\n\n","sourceOld":"  /** Rebuilds the SpellChecker index using values from the <code>termSourceField</code> from the\n   * index pointed to by the current {@link IndexSearcher}.\n   * Any word appearing in less that thresh documents will not be added to the spellcheck index.\n   */\n  private void rebuild(SolrQueryRequest req) throws IOException, SolrException {\n    if (null == termSourceField) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \"can't rebuild spellchecker index without termSourceField configured\");\n    }\n\n    Dictionary dictionary = getDictionary(req);\n    spellChecker.clearIndex();\n    spellChecker.indexDictionary(dictionary);\n    reopen();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c51a4de58ddc877061c374826b0232414b06c08b":["583cdb620dea20ef2bfafd8639a73b29de305103"],"583cdb620dea20ef2bfafd8639a73b29de305103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"071bae97f774d86dca206e837de23a56b71c8b29":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"560d9ff06b001421d5b77a46b7595c913deef74e":["071bae97f774d86dca206e837de23a56b71c8b29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"6855049ff6427dd05716183aaeb715f5c84abf44":["c51a4de58ddc877061c374826b0232414b06c08b"],"d3bfc556d7cb56ca5111e86544512fb1304ba00d":["560d9ff06b001421d5b77a46b7595c913deef74e"],"ad94625fb8d088209f46650c8097196fec67f00c":["d3bfc556d7cb56ca5111e86544512fb1304ba00d"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["ff4e55a5772cb42b76d11a9df57b6bb7333facde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff4e55a5772cb42b76d11a9df57b6bb7333facde":["6855049ff6427dd05716183aaeb715f5c84abf44"]},"commit2Childs":{"c51a4de58ddc877061c374826b0232414b06c08b":["6855049ff6427dd05716183aaeb715f5c84abf44"],"583cdb620dea20ef2bfafd8639a73b29de305103":["c51a4de58ddc877061c374826b0232414b06c08b"],"071bae97f774d86dca206e837de23a56b71c8b29":["560d9ff06b001421d5b77a46b7595c913deef74e"],"560d9ff06b001421d5b77a46b7595c913deef74e":["d3bfc556d7cb56ca5111e86544512fb1304ba00d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["583cdb620dea20ef2bfafd8639a73b29de305103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6855049ff6427dd05716183aaeb715f5c84abf44":["ff4e55a5772cb42b76d11a9df57b6bb7333facde"],"d3bfc556d7cb56ca5111e86544512fb1304ba00d":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["071bae97f774d86dca206e837de23a56b71c8b29"],"ff4e55a5772cb42b76d11a9df57b6bb7333facde":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}