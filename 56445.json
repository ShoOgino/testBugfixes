{"path":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/PassageFormatter#format(CharSequence,List[Passage],List[OffsetRange]).mjava","commits":[{"id":"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c","date":1597407672,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/PassageFormatter#format(CharSequence,List[Passage],List[OffsetRange]).mjava","pathOld":"/dev/null","sourceNew":"  public List<String> format(CharSequence value, List<Passage> passages, List<OffsetRange> ranges) {\n    assert PassageSelector.sortedAndNonOverlapping(passages);\n    assert PassageSelector.sortedAndNonOverlapping(ranges);\n    assert ranges instanceof RandomAccess;\n\n    if (ranges.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    ArrayList<String> result = new ArrayList<>();\n    StringBuilder buf = new StringBuilder();\n\n    int rangeIndex = 0;\n    OffsetRange range = ranges.get(rangeIndex);\n    passageFormatting:\n    for (Passage passage : passages) {\n      // Move to the range of the current passage.\n      while (passage.from >= range.to) {\n        if (++rangeIndex == ranges.size()) {\n          break passageFormatting;\n        }\n        range = ranges.get(rangeIndex);\n      }\n\n      assert range.from <= passage.from && range.to >= passage.to : range + \" ? \" + passage;\n\n      buf.setLength(0);\n      if (range.from < passage.from) {\n        buf.append(ellipsis);\n      }\n      format(buf, value, passage);\n      if (range.to > passage.to) {\n        buf.append(ellipsis);\n      }\n      result.add(buf.toString());\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18fbb6cfc751884a8cdadea8eebaa704e9c2263f","date":1600077733,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/PassageFormatter#format(CharSequence,List[Passage],List[OffsetRange]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/PassageFormatter#format(CharSequence,List[Passage],List[OffsetRange]).mjava","sourceNew":"  public List<String> format(CharSequence value, List<Passage> passages, List<OffsetRange> ranges) {\n    assert PassageSelector.sortedAndNonOverlapping(passages);\n    assert PassageSelector.sortedAndNonOverlapping(ranges);\n    assert withinRange(new OffsetRange(0, value.length()), passages);\n    assert ranges instanceof RandomAccess;\n\n    if (ranges.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    ArrayList<String> result = new ArrayList<>();\n    StringBuilder buf = new StringBuilder();\n\n    int rangeIndex = 0;\n    OffsetRange range = ranges.get(rangeIndex);\n    passageFormatting:\n    for (Passage passage : passages) {\n      // Move to the range of the current passage.\n      while (passage.from >= range.to) {\n        if (++rangeIndex == ranges.size()) {\n          break passageFormatting;\n        }\n        range = ranges.get(rangeIndex);\n      }\n\n      assert range.from <= passage.from && range.to >= passage.to : range + \" ? \" + passage;\n\n      buf.setLength(0);\n      if (range.from < passage.from) {\n        buf.append(ellipsis);\n      }\n      format(buf, value, passage);\n      if (range.to > passage.to) {\n        buf.append(ellipsis);\n      }\n      result.add(buf.toString());\n    }\n    return result;\n  }\n\n","sourceOld":"  public List<String> format(CharSequence value, List<Passage> passages, List<OffsetRange> ranges) {\n    assert PassageSelector.sortedAndNonOverlapping(passages);\n    assert PassageSelector.sortedAndNonOverlapping(ranges);\n    assert ranges instanceof RandomAccess;\n\n    if (ranges.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    ArrayList<String> result = new ArrayList<>();\n    StringBuilder buf = new StringBuilder();\n\n    int rangeIndex = 0;\n    OffsetRange range = ranges.get(rangeIndex);\n    passageFormatting:\n    for (Passage passage : passages) {\n      // Move to the range of the current passage.\n      while (passage.from >= range.to) {\n        if (++rangeIndex == ranges.size()) {\n          break passageFormatting;\n        }\n        range = ranges.get(rangeIndex);\n      }\n\n      assert range.from <= passage.from && range.to >= passage.to : range + \" ? \" + passage;\n\n      buf.setLength(0);\n      if (range.from < passage.from) {\n        buf.append(ellipsis);\n      }\n      format(buf, value, passage);\n      if (range.to > passage.to) {\n        buf.append(ellipsis);\n      }\n      result.add(buf.toString());\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/PassageFormatter#format(CharSequence,List[Passage],List[OffsetRange]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/PassageFormatter#format(CharSequence,List[Passage],List[OffsetRange]).mjava","sourceNew":"  public List<String> format(CharSequence value, List<Passage> passages, List<OffsetRange> ranges) {\n    assert PassageSelector.sortedAndNonOverlapping(passages);\n    assert PassageSelector.sortedAndNonOverlapping(ranges);\n    assert withinRange(new OffsetRange(0, value.length()), passages);\n    assert ranges instanceof RandomAccess;\n\n    if (ranges.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    ArrayList<String> result = new ArrayList<>();\n    StringBuilder buf = new StringBuilder();\n\n    int rangeIndex = 0;\n    OffsetRange range = ranges.get(rangeIndex);\n    passageFormatting:\n    for (Passage passage : passages) {\n      // Move to the range of the current passage.\n      while (passage.from >= range.to) {\n        if (++rangeIndex == ranges.size()) {\n          break passageFormatting;\n        }\n        range = ranges.get(rangeIndex);\n      }\n\n      assert range.from <= passage.from && range.to >= passage.to : range + \" ? \" + passage;\n\n      buf.setLength(0);\n      if (range.from < passage.from) {\n        buf.append(ellipsis);\n      }\n      format(buf, value, passage);\n      if (range.to > passage.to) {\n        buf.append(ellipsis);\n      }\n      result.add(buf.toString());\n    }\n    return result;\n  }\n\n","sourceOld":"  public List<String> format(CharSequence value, List<Passage> passages, List<OffsetRange> ranges) {\n    assert PassageSelector.sortedAndNonOverlapping(passages);\n    assert PassageSelector.sortedAndNonOverlapping(ranges);\n    assert ranges instanceof RandomAccess;\n\n    if (ranges.isEmpty()) {\n      return Collections.emptyList();\n    }\n\n    ArrayList<String> result = new ArrayList<>();\n    StringBuilder buf = new StringBuilder();\n\n    int rangeIndex = 0;\n    OffsetRange range = ranges.get(rangeIndex);\n    passageFormatting:\n    for (Passage passage : passages) {\n      // Move to the range of the current passage.\n      while (passage.from >= range.to) {\n        if (++rangeIndex == ranges.size()) {\n          break passageFormatting;\n        }\n        range = ranges.get(rangeIndex);\n      }\n\n      assert range.from <= passage.from && range.to >= passage.to : range + \" ? \" + passage;\n\n      buf.setLength(0);\n      if (range.from < passage.from) {\n        buf.append(ellipsis);\n      }\n      format(buf, value, passage);\n      if (range.to > passage.to) {\n        buf.append(ellipsis);\n      }\n      result.add(buf.toString());\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"680b6449f09827f58fe987aff279e014c311d966":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c","18fbb6cfc751884a8cdadea8eebaa704e9c2263f"],"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"18fbb6cfc751884a8cdadea8eebaa704e9c2263f":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["680b6449f09827f58fe987aff279e014c311d966","18fbb6cfc751884a8cdadea8eebaa704e9c2263f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"18fbb6cfc751884a8cdadea8eebaa704e9c2263f":["680b6449f09827f58fe987aff279e014c311d966"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}