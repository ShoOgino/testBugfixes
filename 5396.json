{"path":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","commits":[{"id":"a5684446f7742dfb07c42296decc5e4d6515a0fe","date":1292978807,"type":1,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(\"solrId\", sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(DocList docList,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    // Names of fields to deliver content for clustering\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n            titleField);\n    if (StringUtils.isBlank(snippetField)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n              + \" must not be blank.\");\n    }\n    Set<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n            snippetField, idFieldName);\n\n    // Get the documents\n    DocIterator docsIter = docList.iterator();\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n            false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    List<Document> result = new ArrayList<Document>(docList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      Integer id = docsIter.next();\n      org.apache.lucene.document.Document doc = searcher.doc(id,\n              fieldsToLoad);\n      String snippet = getValue(doc, snippetField);\n      if (produceSummary == true) {\n        docsHolder[0] = id.intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(doc, titleField),\n              snippet, doc.get(urlField));\n      carrotDocument.setField(\"solrId\", doc.get(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc5ecd93bcd50b2199757091d526fc1bcbce0db1","date":1293154244,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(\"solrId\", sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(DocList docList,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    // Names of fields to deliver content for clustering\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n            titleField);\n    if (StringUtils.isBlank(snippetField)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n              + \" must not be blank.\");\n    }\n    Set<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n            snippetField, idFieldName);\n\n    // Get the documents\n    DocIterator docsIter = docList.iterator();\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n            false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    List<Document> result = new ArrayList<Document>(docList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      Integer id = docsIter.next();\n      org.apache.lucene.document.Document doc = searcher.doc(id,\n              fieldsToLoad);\n      String snippet = getValue(doc, snippetField);\n      if (produceSummary == true) {\n        docsHolder[0] = id.intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(doc, titleField),\n              snippet, doc.get(urlField));\n      carrotDocument.setField(\"solrId\", doc.get(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"863f5f4b9cd4134d4bd9d6528419bf72ddbe4433","date":1293817845,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = HighlightComponent.getHighlighter(core);\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(\"solrId\", sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(\"solrId\", sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = HighlightComponent.getHighlighter(core);\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(\"solrId\", sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(\"solrId\", sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = HighlightComponent.getHighlighter(core);\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(\"solrId\", sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"017c035439201490351b0f5f3d33a393c6c24551","date":1305551986,"type":3,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = HighlightComponent.getHighlighter(core);\n      if (highlighter != null){\n        Map<String, Object> args = Maps.newHashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList<Object> highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          @SuppressWarnings(\"unchecked\")\n\t\t\t\t\tNamedList<String []> tmp = (NamedList<String[]>) highlights.getVal(0);\n          String [] highlt = tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(SOLR_DOCUMENT_ID, sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = HighlightComponent.getHighlighter(core);\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(\"solrId\", sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = HighlightComponent.getHighlighter(core);\n      if (highlighter != null){\n        Map<String, Object> args = Maps.newHashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList<Object> highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          @SuppressWarnings(\"unchecked\")\n\t\t\t\t\tNamedList<String []> tmp = (NamedList<String[]>) highlights.getVal(0);\n          String [] highlt = tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(SOLR_DOCUMENT_ID, sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = HighlightComponent.getHighlighter(core);\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(\"solrId\", sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = HighlightComponent.getHighlighter(core);\n      if (highlighter != null){\n        Map<String, Object> args = Maps.newHashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList<Object> highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          @SuppressWarnings(\"unchecked\")\n\t\t\t\t\tNamedList<String []> tmp = (NamedList<String[]>) highlights.getVal(0);\n          String [] highlt = tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(SOLR_DOCUMENT_ID, sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = HighlightComponent.getHighlighter(core);\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(\"solrId\", sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = HighlightComponent.getHighlighter(core);\n      if (highlighter != null){\n        Map<String, Object> args = Maps.newHashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList<Object> highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          @SuppressWarnings(\"unchecked\")\n\t\t\t\t\tNamedList<String []> tmp = (NamedList<String[]>) highlights.getVal(0);\n          String [] highlt = tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(SOLR_DOCUMENT_ID, sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = HighlightComponent.getHighlighter(core);\n      if (highlighter != null){\n        Map<String, Object> args = Maps.newHashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList<Object> highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          @SuppressWarnings(\"unchecked\")\n\t\t\t\t\tNamedList<String []> tmp = (NamedList<String[]>) highlights.getVal(0);\n          String [] highlt = tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(SOLR_DOCUMENT_ID, sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(SolrDocumentList,Map[SolrDocument,Integer],Query,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = HighlightComponent.getHighlighter(core);\n      if (highlighter != null){\n        Map<String, Object> args = Maps.newHashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList<Object> highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          @SuppressWarnings(\"unchecked\")\n\t\t\t\t\tNamedList<String []> tmp = (NamedList<String[]>) highlights.getVal(0);\n          String [] highlt = tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(SOLR_DOCUMENT_ID, sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(SolrDocumentList solrDocList, Map<SolrDocument, Integer> docIds,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME, titleField);\n    \n    // Get the documents\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY, false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = HighlightComponent.getHighlighter(core);\n      if (highlighter != null){\n        Map<String, Object> args = Maps.newHashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    Iterator<SolrDocument> docsIter = solrDocList.iterator();\n    List<Document> result = new ArrayList<Document>(solrDocList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      SolrDocument sdoc = docsIter.next();\n      String snippet = getValue(sdoc, snippetField);\n      // TODO: docIds will be null when running distributed search.\n      // See comment in ClusteringComponent#finishStage().\n      if (produceSummary && docIds != null) {\n        docsHolder[0] = docIds.get(sdoc).intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList<Object> highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          @SuppressWarnings(\"unchecked\")\n\t\t\t\t\tNamedList<String []> tmp = (NamedList<String[]>) highlights.getVal(0);\n          String [] highlt = tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(sdoc, titleField),\n              snippet, (String)sdoc.getFieldValue(urlField));\n      carrotDocument.setField(SOLR_DOCUMENT_ID, sdoc.getFieldValue(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"017c035439201490351b0f5f3d33a393c6c24551":["863f5f4b9cd4134d4bd9d6528419bf72ddbe4433"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","863f5f4b9cd4134d4bd9d6528419bf72ddbe4433"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["dc5ecd93bcd50b2199757091d526fc1bcbce0db1","863f5f4b9cd4134d4bd9d6528419bf72ddbe4433"],"863f5f4b9cd4134d4bd9d6528419bf72ddbe4433":["a5684446f7742dfb07c42296decc5e4d6515a0fe"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["70ad682703b8585f5d0a637efec044d57ec05efb","017c035439201490351b0f5f3d33a393c6c24551"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","017c035439201490351b0f5f3d33a393c6c24551"],"c26f00b574427b55127e869b935845554afde1fa":["017c035439201490351b0f5f3d33a393c6c24551","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a3776dccca01c11e7046323cfad46a3b4a471233":["863f5f4b9cd4134d4bd9d6528419bf72ddbe4433","017c035439201490351b0f5f3d33a393c6c24551"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5684446f7742dfb07c42296decc5e4d6515a0fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"017c035439201490351b0f5f3d33a393c6c24551":["c3a8a449466c1ff7ce2274fe73dab487256964b4","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233"],"70ad682703b8585f5d0a637efec044d57ec05efb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"863f5f4b9cd4134d4bd9d6528419bf72ddbe4433":["017c035439201490351b0f5f3d33a393c6c24551","70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a3776dccca01c11e7046323cfad46a3b4a471233"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","a5684446f7742dfb07c42296decc5e4d6515a0fe"],"a5684446f7742dfb07c42296decc5e4d6515a0fe":["863f5f4b9cd4134d4bd9d6528419bf72ddbe4433","dc5ecd93bcd50b2199757091d526fc1bcbce0db1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","c3a8a449466c1ff7ce2274fe73dab487256964b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}