{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#queryHeatmapRecursive(Rectangle,int).mjava","commits":[{"id":"d19946da5b8a6505034a72adcb5bae87dd043ddd","date":1423451445,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#queryHeatmapRecursive(Rectangle,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Build heatmap, validate results, then descend recursively to another facet level. */\n  private boolean queryHeatmapRecursive(Rectangle inputRange, int facetLevel) throws IOException {\n    Filter filter = null; //FYI testing filtering of underlying PrefixTreeFacetCounter is done in another test\n    //Calculate facets\n    final int maxCells = 10_000;\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), filter, inputRange, facetLevel, maxCells);\n\n    validateHeatmapResult(inputRange, facetLevel, heatmap);\n\n    boolean foundNonZeroCount = false;\n    for (int count : heatmap.counts) {\n      if (count > 0) {\n        foundNonZeroCount = true;\n        break;\n      }\n    }\n\n    //Test again recursively to higher facetLevel (more detailed cells)\n    if (foundNonZeroCount && cellsValidated <= 500 && facetLevel != grid.getMaxLevels() && inputRange.hasArea()) {\n      for (int i = 0; i < 5; i++) {//try multiple times until we find non-zero counts\n        if (queryHeatmapRecursive(randomRectangle(inputRange), facetLevel + 1)) {\n          break;//we found data here so we needn't try again\n        }\n      }\n    }\n    return foundNonZeroCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc48284320633242e1caf7993f4b3d5494006faf","date":1423681981,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#queryHeatmapRecursive(Rectangle,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#queryHeatmapRecursive(Rectangle,int).mjava","sourceNew":"  /** Build heatmap, validate results, then descend recursively to another facet level. */\n  private boolean queryHeatmapRecursive(Rectangle inputRange, int facetLevel) throws IOException {\n    if (!inputRange.hasArea()) {\n      // Don't test line inputs. It's not that we don't support it but it is more challenging to test if per-chance it\n      // coincides with a grid line due due to edge overlap issue for some grid implementations (geo & quad).\n      return false;\n    }\n    Filter filter = null; //FYI testing filtering of underlying PrefixTreeFacetCounter is done in another test\n    //Calculate facets\n    final int maxCells = 10_000;\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), filter, inputRange, facetLevel, maxCells);\n\n    validateHeatmapResult(inputRange, facetLevel, heatmap);\n\n    boolean foundNonZeroCount = false;\n    for (int count : heatmap.counts) {\n      if (count > 0) {\n        foundNonZeroCount = true;\n        break;\n      }\n    }\n\n    //Test again recursively to higher facetLevel (more detailed cells)\n    if (foundNonZeroCount && cellsValidated <= 500 && facetLevel != grid.getMaxLevels() && inputRange.hasArea()) {\n      for (int i = 0; i < 5; i++) {//try multiple times until we find non-zero counts\n        if (queryHeatmapRecursive(randomRectangle(inputRange), facetLevel + 1)) {\n          break;//we found data here so we needn't try again\n        }\n      }\n    }\n    return foundNonZeroCount;\n  }\n\n","sourceOld":"  /** Build heatmap, validate results, then descend recursively to another facet level. */\n  private boolean queryHeatmapRecursive(Rectangle inputRange, int facetLevel) throws IOException {\n    Filter filter = null; //FYI testing filtering of underlying PrefixTreeFacetCounter is done in another test\n    //Calculate facets\n    final int maxCells = 10_000;\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), filter, inputRange, facetLevel, maxCells);\n\n    validateHeatmapResult(inputRange, facetLevel, heatmap);\n\n    boolean foundNonZeroCount = false;\n    for (int count : heatmap.counts) {\n      if (count > 0) {\n        foundNonZeroCount = true;\n        break;\n      }\n    }\n\n    //Test again recursively to higher facetLevel (more detailed cells)\n    if (foundNonZeroCount && cellsValidated <= 500 && facetLevel != grid.getMaxLevels() && inputRange.hasArea()) {\n      for (int i = 0; i < 5; i++) {//try multiple times until we find non-zero counts\n        if (queryHeatmapRecursive(randomRectangle(inputRange), facetLevel + 1)) {\n          break;//we found data here so we needn't try again\n        }\n      }\n    }\n    return foundNonZeroCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#queryHeatmapRecursive(Rectangle,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#queryHeatmapRecursive(Rectangle,int).mjava","sourceNew":"  /** Build heatmap, validate results, then descend recursively to another facet level. */\n  private boolean queryHeatmapRecursive(Rectangle inputRange, int facetLevel) throws IOException {\n    if (!inputRange.hasArea()) {\n      // Don't test line inputs. It's not that we don't support it but it is more challenging to test if per-chance it\n      // coincides with a grid line due due to edge overlap issue for some grid implementations (geo & quad).\n      return false;\n    }\n    Bits filter = null; //FYI testing filtering of underlying PrefixTreeFacetCounter is done in another test\n    //Calculate facets\n    final int maxCells = 10_000;\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), filter, inputRange, facetLevel, maxCells);\n\n    validateHeatmapResult(inputRange, facetLevel, heatmap);\n\n    boolean foundNonZeroCount = false;\n    for (int count : heatmap.counts) {\n      if (count > 0) {\n        foundNonZeroCount = true;\n        break;\n      }\n    }\n\n    //Test again recursively to higher facetLevel (more detailed cells)\n    if (foundNonZeroCount && cellsValidated <= 500 && facetLevel != grid.getMaxLevels() && inputRange.hasArea()) {\n      for (int i = 0; i < 5; i++) {//try multiple times until we find non-zero counts\n        if (queryHeatmapRecursive(randomRectangle(inputRange), facetLevel + 1)) {\n          break;//we found data here so we needn't try again\n        }\n      }\n    }\n    return foundNonZeroCount;\n  }\n\n","sourceOld":"  /** Build heatmap, validate results, then descend recursively to another facet level. */\n  private boolean queryHeatmapRecursive(Rectangle inputRange, int facetLevel) throws IOException {\n    if (!inputRange.hasArea()) {\n      // Don't test line inputs. It's not that we don't support it but it is more challenging to test if per-chance it\n      // coincides with a grid line due due to edge overlap issue for some grid implementations (geo & quad).\n      return false;\n    }\n    Filter filter = null; //FYI testing filtering of underlying PrefixTreeFacetCounter is done in another test\n    //Calculate facets\n    final int maxCells = 10_000;\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), filter, inputRange, facetLevel, maxCells);\n\n    validateHeatmapResult(inputRange, facetLevel, heatmap);\n\n    boolean foundNonZeroCount = false;\n    for (int count : heatmap.counts) {\n      if (count > 0) {\n        foundNonZeroCount = true;\n        break;\n      }\n    }\n\n    //Test again recursively to higher facetLevel (more detailed cells)\n    if (foundNonZeroCount && cellsValidated <= 500 && facetLevel != grid.getMaxLevels() && inputRange.hasArea()) {\n      for (int i = 0; i < 5; i++) {//try multiple times until we find non-zero counts\n        if (queryHeatmapRecursive(randomRectangle(inputRange), facetLevel + 1)) {\n          break;//we found data here so we needn't try again\n        }\n      }\n    }\n    return foundNonZeroCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#queryHeatmapRecursive(Rectangle,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#queryHeatmapRecursive(Rectangle,int).mjava","sourceNew":"  /** Build heatmap, validate results, then descend recursively to another facet level. */\n  private boolean queryHeatmapRecursive(Rectangle inputRange, int facetLevel) throws IOException {\n    if (!inputRange.hasArea()) {\n      // Don't test line inputs. It's not that we don't support it but it is more challenging to test if per-chance it\n      // coincides with a grid line due due to edge overlap issue for some grid implementations (geo & quad).\n      return false;\n    }\n    Bits filter = null; //FYI testing filtering of underlying PrefixTreeFacetCounter is done in another test\n    //Calculate facets\n    final int maxCells = 10_000;\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), filter, inputRange, facetLevel, maxCells);\n\n    validateHeatmapResult(inputRange, facetLevel, heatmap);\n\n    boolean foundNonZeroCount = false;\n    for (int count : heatmap.counts) {\n      if (count > 0) {\n        foundNonZeroCount = true;\n        break;\n      }\n    }\n\n    //Test again recursively to higher facetLevel (more detailed cells)\n    if (foundNonZeroCount && cellsValidated <= 500 && facetLevel != grid.getMaxLevels() && inputRange.hasArea()) {\n      for (int i = 0; i < 5; i++) {//try multiple times until we find non-zero counts\n        if (queryHeatmapRecursive(randomRectangle(inputRange), facetLevel + 1)) {\n          break;//we found data here so we needn't try again\n        }\n      }\n    }\n    return foundNonZeroCount;\n  }\n\n","sourceOld":"  /** Build heatmap, validate results, then descend recursively to another facet level. */\n  private boolean queryHeatmapRecursive(Rectangle inputRange, int facetLevel) throws IOException {\n    if (!inputRange.hasArea()) {\n      // Don't test line inputs. It's not that we don't support it but it is more challenging to test if per-chance it\n      // coincides with a grid line due due to edge overlap issue for some grid implementations (geo & quad).\n      return false;\n    }\n    Bits filter = null; //FYI testing filtering of underlying PrefixTreeFacetCounter is done in another test\n    //Calculate facets\n    final int maxCells = 10_000;\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), filter, inputRange, facetLevel, maxCells);\n\n    validateHeatmapResult(inputRange, facetLevel, heatmap);\n\n    boolean foundNonZeroCount = false;\n    for (int count : heatmap.counts) {\n      if (count > 0) {\n        foundNonZeroCount = true;\n        break;\n      }\n    }\n\n    //Test again recursively to higher facetLevel (more detailed cells)\n    if (foundNonZeroCount && cellsValidated <= 500 && facetLevel != grid.getMaxLevels() && inputRange.hasArea()) {\n      for (int i = 0; i < 5; i++) {//try multiple times until we find non-zero counts\n        if (queryHeatmapRecursive(randomRectangle(inputRange), facetLevel + 1)) {\n          break;//we found data here so we needn't try again\n        }\n      }\n    }\n    return foundNonZeroCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#queryHeatmapRecursive(Rectangle,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#queryHeatmapRecursive(Rectangle,int).mjava","sourceNew":"  /** Build heatmap, validate results, then descend recursively to another facet level. */\n  private boolean queryHeatmapRecursive(Rectangle inputRange, int facetLevel) throws IOException {\n    if (!inputRange.hasArea()) {\n      // Don't test line inputs. It's not that we don't support it but it is more challenging to test if per-chance it\n      // coincides with a grid line due due to edge overlap issue for some grid implementations (geo & quad).\n      return false;\n    }\n    Bits filter = null; //FYI testing filtering of underlying PrefixTreeFacetCounter is done in another test\n    //Calculate facets\n    final int maxCells = 10_000;\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), filter, inputRange, facetLevel, maxCells);\n\n    validateHeatmapResult(inputRange, facetLevel, heatmap);\n\n    boolean foundNonZeroCount = false;\n    for (int count : heatmap.counts) {\n      if (count > 0) {\n        foundNonZeroCount = true;\n        break;\n      }\n    }\n\n    //Test again recursively to higher facetLevel (more detailed cells)\n    if (foundNonZeroCount && cellsValidated <= 500 && facetLevel != grid.getMaxLevels() && inputRange.hasArea()) {\n      for (int i = 0; i < 5; i++) {//try multiple times until we find non-zero counts\n        if (queryHeatmapRecursive(randomRectangle(inputRange), facetLevel + 1)) {\n          break;//we found data here so we needn't try again\n        }\n      }\n    }\n    return foundNonZeroCount;\n  }\n\n","sourceOld":"  /** Build heatmap, validate results, then descend recursively to another facet level. */\n  private boolean queryHeatmapRecursive(Rectangle inputRange, int facetLevel) throws IOException {\n    if (!inputRange.hasArea()) {\n      // Don't test line inputs. It's not that we don't support it but it is more challenging to test if per-chance it\n      // coincides with a grid line due due to edge overlap issue for some grid implementations (geo & quad).\n      return false;\n    }\n    Bits filter = null; //FYI testing filtering of underlying PrefixTreeFacetCounter is done in another test\n    //Calculate facets\n    final int maxCells = 10_000;\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), filter, inputRange, facetLevel, maxCells);\n\n    validateHeatmapResult(inputRange, facetLevel, heatmap);\n\n    boolean foundNonZeroCount = false;\n    for (int count : heatmap.counts) {\n      if (count > 0) {\n        foundNonZeroCount = true;\n        break;\n      }\n    }\n\n    //Test again recursively to higher facetLevel (more detailed cells)\n    if (foundNonZeroCount && cellsValidated <= 500 && facetLevel != grid.getMaxLevels() && inputRange.hasArea()) {\n      for (int i = 0; i < 5; i++) {//try multiple times until we find non-zero counts\n        if (queryHeatmapRecursive(randomRectangle(inputRange), facetLevel + 1)) {\n          break;//we found data here so we needn't try again\n        }\n      }\n    }\n    return foundNonZeroCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["672b198fc3dce868916c727917cae58c2906763d","112d77ac8d3e10a362516ad834c9a11d35c94234"],"672b198fc3dce868916c727917cae58c2906763d":["fc48284320633242e1caf7993f4b3d5494006faf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["672b198fc3dce868916c727917cae58c2906763d"],"fc48284320633242e1caf7993f4b3d5494006faf":["d19946da5b8a6505034a72adcb5bae87dd043ddd"],"d19946da5b8a6505034a72adcb5bae87dd043ddd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"672b198fc3dce868916c727917cae58c2906763d":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d19946da5b8a6505034a72adcb5bae87dd043ddd"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"fc48284320633242e1caf7993f4b3d5494006faf":["672b198fc3dce868916c727917cae58c2906763d"],"d19946da5b8a6505034a72adcb5bae87dd043ddd":["fc48284320633242e1caf7993f4b3d5494006faf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}