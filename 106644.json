{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","pathOld":"/dev/null","sourceNew":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        final Arc<T>[] newArcs = ArrayUtil.grow(arcs);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f7f6f6eea7367442ccb5f44b36b61ba779f8c96","date":1292267841,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","sourceNew":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings(\"unchecked\") final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        final Arc<T>[] newArcs = ArrayUtil.grow(arcs);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","pathOld":"/dev/null","sourceNew":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings(\"unchecked\") final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","pathOld":"/dev/null","sourceNew":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings(\"unchecked\") final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","sourceNew":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings(\"unchecked\") final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings(\"unchecked\") final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","sourceNew":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings(\"unchecked\") final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings(\"unchecked\") final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder.UnCompiledNode#addArc(int,Node).mjava","sourceNew":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings(\"unchecked\") final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","sourceOld":"    public void addArc(int label, Node target) {\n      assert label >= 0;\n      assert numArcs == 0 || label > arcs[numArcs-1].label: \"arc[-1].label=\" + arcs[numArcs-1].label + \" new label=\" + label + \" numArcs=\" + numArcs;\n      if (numArcs == arcs.length) {\n        @SuppressWarnings(\"unchecked\") final Arc<T>[] newArcs =\n          new Arc[ArrayUtil.oversize(numArcs+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(arcs, 0, newArcs, 0, arcs.length);\n        for(int arcIdx=numArcs;arcIdx<newArcs.length;arcIdx++) {\n          newArcs[arcIdx] = new Arc<T>();\n        }\n        arcs = newArcs;\n      }\n      final Arc<T> arc = arcs[numArcs++];\n      arc.label = label;\n      arc.target = target;\n      arc.output = arc.nextFinalOutput = owner.NO_OUTPUT;\n      arc.isFinal = false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f7f6f6eea7367442ccb5f44b36b61ba779f8c96":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["2f7f6f6eea7367442ccb5f44b36b61ba779f8c96"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["2f7f6f6eea7367442ccb5f44b36b61ba779f8c96","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2f7f6f6eea7367442ccb5f44b36b61ba779f8c96"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2f7f6f6eea7367442ccb5f44b36b61ba779f8c96"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"2f7f6f6eea7367442ccb5f44b36b61ba779f8c96":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["2f7f6f6eea7367442ccb5f44b36b61ba779f8c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}