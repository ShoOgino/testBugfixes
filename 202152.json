{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testFilteringWithReadahead().mjava","commits":[{"id":"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43","date":1529312258,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testFilteringWithReadahead().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilteringWithReadahead() throws IOException {\n\n    CharArraySet protectedTerms = new CharArraySet(2, true);\n    protectedTerms.add(\"two\");\n    protectedTerms.add(\"two three\");\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new StandardTokenizer();\n        TokenStream sink = new ShingleFilter(source, 3);\n        sink = new ProtectedTermFilter(protectedTerms, sink, in -> new TypeTokenFilter(in, Collections.singleton(\"ALL\"), true));\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    String input = \"one two three four\";\n\n    try (TokenStream ts = analyzer.tokenStream(\"\", input)) {\n      assertTokenStreamContents(ts, new String[]{\n          \"two\", \"two three\"\n      }, new int[]{\n           4,     4\n      }, new int[]{\n           7,     13\n      }, new int[]{\n           2,     0\n      }, new int[]{\n           1,     2\n      }, 18);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testFilteringWithReadahead().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilteringWithReadahead() throws IOException {\n\n    CharArraySet protectedTerms = new CharArraySet(2, true);\n    protectedTerms.add(\"two\");\n    protectedTerms.add(\"two three\");\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new StandardTokenizer();\n        TokenStream sink = new ShingleFilter(source, 3);\n        sink = new ProtectedTermFilter(protectedTerms, sink, in -> new TypeTokenFilter(in, Collections.singleton(\"ALL\"), true));\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    String input = \"one two three four\";\n\n    try (TokenStream ts = analyzer.tokenStream(\"\", input)) {\n      assertTokenStreamContents(ts, new String[]{\n          \"two\", \"two three\"\n      }, new int[]{\n           4,     4\n      }, new int[]{\n           7,     13\n      }, new int[]{\n           2,     0\n      }, new int[]{\n           1,     2\n      }, 18);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testFilteringWithReadahead().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilteringWithReadahead() throws IOException {\n\n    CharArraySet protectedTerms = new CharArraySet(2, true);\n    protectedTerms.add(\"two\");\n    protectedTerms.add(\"two three\");\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new StandardTokenizer();\n        TokenStream sink = new ShingleFilter(source, 3);\n        sink = new ProtectedTermFilter(protectedTerms, sink, in -> new TypeTokenFilter(in, Collections.singleton(\"ALL\"), true));\n        return new TokenStreamComponents(source, sink);\n      }\n    };\n\n    String input = \"one two three four\";\n\n    try (TokenStream ts = analyzer.tokenStream(\"\", input)) {\n      assertTokenStreamContents(ts, new String[]{\n          \"two\", \"two three\"\n      }, new int[]{\n           4,     4\n      }, new int[]{\n           7,     13\n      }, new int[]{\n           2,     0\n      }, new int[]{\n           1,     2\n      }, 18);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}