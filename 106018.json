{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#addStopWords(IndexReader,String,int).mjava","commits":[{"id":"79b567157855b86f9f11384706e3d2a5544660ce","date":1202393618,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#addStopWords(IndexReader,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Automatically adds stop words for the given field with terms exceeding the maxPercentDocs\n   *\n   * @param reader     The IndexReader class which will be consulted to identify potential stop words that\n   *                   exceed the required document frequency\n   * @param fieldName  The field for which stopwords will be added\n   * @param maxDocFreq The maximum number of index documents which\n   *                   can contain a term, after which the term is considered to be a stop word.\n   * @return The number of stop words identified.\n   * @throws IOException\n   */\n  public int addStopWords(IndexReader reader, String fieldName, int maxDocFreq) throws IOException {\n    HashSet stopWords = new HashSet();\n    String internedFieldName = fieldName.intern();\n    TermEnum te = reader.terms(new Term(fieldName, \"\"));\n    Term term = te.term();\n    while (term != null) {\n      if (term.field() != internedFieldName) {\n        break;\n      }\n      if (te.docFreq() > maxDocFreq) {\n        stopWords.add(term.text());\n      }\n      if (!te.next()) {\n        break;\n      }\n      term = te.term();\n    }\n    stopWordsPerField.put(fieldName, stopWords);\n    return stopWords.size();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d73678020862536617f065bb3d28a71d8c4020c","date":1219142439,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#addStopWords(IndexReader,String,int).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#addStopWords(IndexReader,String,int).mjava","sourceNew":"  /**\n   * Automatically adds stop words for the given field with terms exceeding the maxPercentDocs\n   *\n   * @param reader     The IndexReader class which will be consulted to identify potential stop words that\n   *                   exceed the required document frequency\n   * @param fieldName  The field for which stopwords will be added\n   * @param maxDocFreq The maximum number of index documents which\n   *                   can contain a term, after which the term is considered to be a stop word.\n   * @return The number of stop words identified.\n   * @throws IOException\n   */\n  public int addStopWords(IndexReader reader, String fieldName, int maxDocFreq) throws IOException {\n    HashSet stopWords = new HashSet();\n    String internedFieldName = fieldName.intern();\n    TermEnum te = reader.terms(new Term(fieldName));\n    Term term = te.term();\n    while (term != null) {\n      if (term.field() != internedFieldName) {\n        break;\n      }\n      if (te.docFreq() > maxDocFreq) {\n        stopWords.add(term.text());\n      }\n      if (!te.next()) {\n        break;\n      }\n      term = te.term();\n    }\n    stopWordsPerField.put(fieldName, stopWords);\n    return stopWords.size();\n  }\n\n","sourceOld":"  /**\n   * Automatically adds stop words for the given field with terms exceeding the maxPercentDocs\n   *\n   * @param reader     The IndexReader class which will be consulted to identify potential stop words that\n   *                   exceed the required document frequency\n   * @param fieldName  The field for which stopwords will be added\n   * @param maxDocFreq The maximum number of index documents which\n   *                   can contain a term, after which the term is considered to be a stop word.\n   * @return The number of stop words identified.\n   * @throws IOException\n   */\n  public int addStopWords(IndexReader reader, String fieldName, int maxDocFreq) throws IOException {\n    HashSet stopWords = new HashSet();\n    String internedFieldName = fieldName.intern();\n    TermEnum te = reader.terms(new Term(fieldName, \"\"));\n    Term term = te.term();\n    while (term != null) {\n      if (term.field() != internedFieldName) {\n        break;\n      }\n      if (te.docFreq() > maxDocFreq) {\n        stopWords.add(term.text());\n      }\n      if (!te.next()) {\n        break;\n      }\n      term = te.term();\n    }\n    stopWordsPerField.put(fieldName, stopWords);\n    return stopWords.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#addStopWords(IndexReader,String,int).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#addStopWords(IndexReader,String,int).mjava","sourceNew":"  /**\n   * Automatically adds stop words for the given field with terms exceeding the maxPercentDocs\n   *\n   * @param reader     The IndexReader class which will be consulted to identify potential stop words that\n   *                   exceed the required document frequency\n   * @param fieldName  The field for which stopwords will be added\n   * @param maxDocFreq The maximum number of index documents which\n   *                   can contain a term, after which the term is considered to be a stop word.\n   * @return The number of stop words identified.\n   * @throws IOException\n   */\n  public int addStopWords(IndexReader reader, String fieldName, int maxDocFreq) throws IOException {\n    HashSet stopWords = new HashSet();\n    String internedFieldName = fieldName.intern();\n    TermEnum te = reader.terms(new Term(fieldName));\n    Term term = te.term();\n    while (term != null) {\n      if (term.field() != internedFieldName) {\n        break;\n      }\n      if (te.docFreq() > maxDocFreq) {\n        stopWords.add(term.text());\n      }\n      if (!te.next()) {\n        break;\n      }\n      term = te.term();\n    }\n    stopWordsPerField.put(fieldName, stopWords);\n    return stopWords.size();\n  }\n\n","sourceOld":"  /**\n   * Automatically adds stop words for the given field with terms exceeding the maxPercentDocs\n   *\n   * @param reader     The IndexReader class which will be consulted to identify potential stop words that\n   *                   exceed the required document frequency\n   * @param fieldName  The field for which stopwords will be added\n   * @param maxDocFreq The maximum number of index documents which\n   *                   can contain a term, after which the term is considered to be a stop word.\n   * @return The number of stop words identified.\n   * @throws IOException\n   */\n  public int addStopWords(IndexReader reader, String fieldName, int maxDocFreq) throws IOException {\n    HashSet stopWords = new HashSet();\n    String internedFieldName = fieldName.intern();\n    TermEnum te = reader.terms(new Term(fieldName));\n    Term term = te.term();\n    while (term != null) {\n      if (term.field() != internedFieldName) {\n        break;\n      }\n      if (te.docFreq() > maxDocFreq) {\n        stopWords.add(term.text());\n      }\n      if (!te.next()) {\n        break;\n      }\n      term = te.term();\n    }\n    stopWordsPerField.put(fieldName, stopWords);\n    return stopWords.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9d73678020862536617f065bb3d28a71d8c4020c"],"79b567157855b86f9f11384706e3d2a5544660ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9d73678020862536617f065bb3d28a71d8c4020c":["79b567157855b86f9f11384706e3d2a5544660ce"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"79b567157855b86f9f11384706e3d2a5544660ce":["9d73678020862536617f065bb3d28a71d8c4020c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79b567157855b86f9f11384706e3d2a5544660ce"],"9d73678020862536617f065bb3d28a71d8c4020c":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}