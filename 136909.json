{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnCloseOptimize().mjava","sourceNew":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","sourceOld":"    /*\n     * Verify that calling optimize when writer is open for\n     * \"commit on close\" works correctly both for rollback()\n     * and close().\n     */\n    public void testCommitOnCloseOptimize() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      for(int j=0;j<17;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n\n      // Open a reader before closing (commiting) the writer:\n      IndexReader reader = IndexReader.open(dir, true);\n\n      // Reader should see index as unoptimized at this\n      // point:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      // Abort the writer:\n      writer.rollback();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertFalse(\"Reader incorrectly sees that the index is optimized\", reader.isOptimized());\n      reader.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      assertNoUnreferencedFiles(dir, \"aborted writer after optimize\");\n\n      // Open a reader after aborting writer:\n      reader = IndexReader.open(dir, true);\n\n      // Reader should still see index as unoptimized:\n      assertTrue(\"Reader incorrectly sees that the index is unoptimized\", reader.isOptimized());\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}