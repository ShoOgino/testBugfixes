{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName()))\n          isInGlobalFieldMap = true;\n          \n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName()))\n          isInGlobalFieldMap = true;\n          \n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1","date":1370803313,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (isCommit && isDelete && isInGlobalFieldMap) {\n          break;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          isCommit = true;\n        }\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName())) {\n          isDelete = true;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName())) {\n          isInGlobalFieldMap = true;\n        }\n          \n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName()))\n          isInGlobalFieldMap = true;\n          \n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":["3cc749c053615f5871f3b95715fe292f34e70a53"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (isCommit && isDelete && isInGlobalFieldMap) {\n          break;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          isCommit = true;\n        }\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"deleteFiles\".equals(trace[i].getMethodName())) {\n          isDelete = true;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName())) {\n          isInGlobalFieldMap = true;\n        }\n          \n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (isCommit && isDelete && isInGlobalFieldMap) {\n          break;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          isCommit = true;\n        }\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName())) {\n          isDelete = true;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName())) {\n          isInGlobalFieldMap = true;\n        }\n          \n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (isCommit && isDelete && isInGlobalFieldMap) {\n          break;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          isCommit = true;\n        }\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName())) {\n          isDelete = true;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName())) {\n          isInGlobalFieldMap = true;\n        }\n          \n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (isCommit && isDelete && isInGlobalFieldMap) {\n          break;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          isCommit = true;\n        }\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"deleteFiles\".equals(trace[i].getMethodName())) {\n          isDelete = true;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName())) {\n          isInGlobalFieldMap = true;\n        }\n          \n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"138741d0260b216d27359469d74d61f8d40b4b57","date":1512493522,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isSyncMetadata = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (isCommit && isDelete && isInGlobalFieldMap && isSyncMetadata) {\n          break;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          isCommit = true;\n        }\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName())) {\n          isDelete = true;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName())) {\n          isInGlobalFieldMap = true;\n        }\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"syncMetaData\".equals(trace[i].getMethodName())) {\n          isSyncMetadata = true;\n        }\n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isSyncMetadata && dontFailDuringSyncMetadata) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          failOnSyncMetadata = isSyncMetadata;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (isCommit && isDelete && isInGlobalFieldMap) {\n          break;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          isCommit = true;\n        }\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName())) {\n          isDelete = true;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName())) {\n          isInGlobalFieldMap = true;\n        }\n          \n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a40eaef29ac5acc2918a895bcfc7ddc6e8c5bc","date":1512493768,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isSyncMetadata = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (isCommit && isDelete && isInGlobalFieldMap && isSyncMetadata) {\n          break;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          isCommit = true;\n        }\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName())) {\n          isDelete = true;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName())) {\n          isInGlobalFieldMap = true;\n        }\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"syncMetaData\".equals(trace[i].getMethodName())) {\n          isSyncMetadata = true;\n        }\n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isSyncMetadata && dontFailDuringSyncMetadata) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          failOnSyncMetadata = isSyncMetadata;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (isCommit && isDelete && isInGlobalFieldMap) {\n          break;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          isCommit = true;\n        }\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName())) {\n          isDelete = true;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName())) {\n          isInGlobalFieldMap = true;\n        }\n          \n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2916966cc9815e973c01452a0d76c98c5e0d0926","date":1577444040,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      boolean isCommit = callStackContains(SegmentInfos.class, stage);\n      boolean isDelete = callStackContains(MockDirectoryWrapper.class, \"deleteFile\");\n      boolean isSyncMetadata = callStackContains(MockDirectoryWrapper.class, \"syncMetaData\");\n      boolean isInGlobalFieldMap = callStackContains(SegmentInfos.class, \"writeGlobalFieldMap\");\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isSyncMetadata && dontFailDuringSyncMetadata) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          failOnSyncMetadata = isSyncMetadata;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isSyncMetadata = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (isCommit && isDelete && isInGlobalFieldMap && isSyncMetadata) {\n          break;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          isCommit = true;\n        }\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName())) {\n          isDelete = true;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName())) {\n          isInGlobalFieldMap = true;\n        }\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"syncMetaData\".equals(trace[i].getMethodName())) {\n          isSyncMetadata = true;\n        }\n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isSyncMetadata && dontFailDuringSyncMetadata) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          failOnSyncMetadata = isSyncMetadata;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ec73c5617c177b1d81ddfe04bbff1d08fccecc","date":1577456244,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      boolean isCommit = callStackContains(SegmentInfos.class, stage);\n      boolean isDelete = callStackContains(MockDirectoryWrapper.class, \"deleteFile\");\n      boolean isSyncMetadata = callStackContains(MockDirectoryWrapper.class, \"syncMetaData\");\n      boolean isInGlobalFieldMap = callStackContains(SegmentInfos.class, \"writeGlobalFieldMap\");\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isSyncMetadata && dontFailDuringSyncMetadata) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          failOnSyncMetadata = isSyncMetadata;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isSyncMetadata = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (isCommit && isDelete && isInGlobalFieldMap && isSyncMetadata) {\n          break;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName())) {\n          isCommit = true;\n        }\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName())) {\n          isDelete = true;\n        }\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName())) {\n          isInGlobalFieldMap = true;\n        }\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"syncMetaData\".equals(trace[i].getMethodName())) {\n          isSyncMetadata = true;\n        }\n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isSyncMetadata && dontFailDuringSyncMetadata) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          failOnSyncMetadata = isSyncMetadata;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5a40eaef29ac5acc2918a895bcfc7ddc6e8c5bc":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1","138741d0260b216d27359469d74d61f8d40b4b57"],"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"138741d0260b216d27359469d74d61f8d40b4b57":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"2916966cc9815e973c01452a0d76c98c5e0d0926":["c5a40eaef29ac5acc2918a895bcfc7ddc6e8c5bc"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":["c5a40eaef29ac5acc2918a895bcfc7ddc6e8c5bc","2916966cc9815e973c01452a0d76c98c5e0d0926"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2916966cc9815e973c01452a0d76c98c5e0d0926"]},"commit2Childs":{"c5a40eaef29ac5acc2918a895bcfc7ddc6e8c5bc":["2916966cc9815e973c01452a0d76c98c5e0d0926","94ec73c5617c177b1d81ddfe04bbff1d08fccecc"],"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1":["c5a40eaef29ac5acc2918a895bcfc7ddc6e8c5bc","138741d0260b216d27359469d74d61f8d40b4b57","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"138741d0260b216d27359469d74d61f8d40b4b57":["c5a40eaef29ac5acc2918a895bcfc7ddc6e8c5bc"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"2916966cc9815e973c01452a0d76c98c5e0d0926":["94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}