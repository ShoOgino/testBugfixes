{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testConcatEmpty().mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testConcatEmpty().mjava","pathOld":"/dev/null","sourceNew":"  public void testConcatEmpty() throws Exception {\n    // If you concat empty automaton to anything the result should still be empty:\n    Automaton a = Operations.concatenate(Automata.makeEmpty(),\n                                                        Automata.makeString(\"foo\"));\n    assertEquals(new HashSet<IntsRef>(), Operations.getFiniteStrings(a, -1));\n\n    a = Operations.concatenate(Automata.makeString(\"foo\"),\n                                         Automata.makeEmpty());\n    assertEquals(new HashSet<IntsRef>(), Operations.getFiniteStrings(a, -1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testConcatEmpty().mjava","pathOld":"/dev/null","sourceNew":"  public void testConcatEmpty() throws Exception {\n    // If you concat empty automaton to anything the result should still be empty:\n    Automaton a = Operations.concatenate(Automata.makeEmpty(),\n                                                        Automata.makeString(\"foo\"));\n    assertEquals(new HashSet<IntsRef>(), Operations.getFiniteStrings(a, -1));\n\n    a = Operations.concatenate(Automata.makeString(\"foo\"),\n                                         Automata.makeEmpty());\n    assertEquals(new HashSet<IntsRef>(), Operations.getFiniteStrings(a, -1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35fa550f45857d99d3d6d743420ee54b4d0c37f8","date":1436039255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testConcatEmpty().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testConcatEmpty().mjava","sourceNew":"  public void testConcatEmpty() throws Exception {\n    // If you concat empty automaton to anything the result should still be empty:\n    Automaton a = Operations.concatenate(Automata.makeEmpty(),\n                                                        Automata.makeString(\"foo\"));\n    assertEquals(new HashSet<IntsRef>(), TestOperations.getFiniteStrings(a));\n\n    a = Operations.concatenate(Automata.makeString(\"foo\"),\n                                         Automata.makeEmpty());\n    assertEquals(new HashSet<IntsRef>(), TestOperations.getFiniteStrings(a));\n  }\n\n","sourceOld":"  public void testConcatEmpty() throws Exception {\n    // If you concat empty automaton to anything the result should still be empty:\n    Automaton a = Operations.concatenate(Automata.makeEmpty(),\n                                                        Automata.makeString(\"foo\"));\n    assertEquals(new HashSet<IntsRef>(), Operations.getFiniteStrings(a, -1));\n\n    a = Operations.concatenate(Automata.makeString(\"foo\"),\n                                         Automata.makeEmpty());\n    assertEquals(new HashSet<IntsRef>(), Operations.getFiniteStrings(a, -1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"]},"commit2Childs":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}