{"path":"src/java/org/apache/lucene/analysis/CharArraySet#iterator().mjava","commits":[{"id":"050b03edbe9b8423ff4c09685c6f03d900e86b83","date":1195514584,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#iterator().mjava","pathOld":"/dev/null","sourceNew":"  public Iterator iterator() {\n    return new CharArraySetIterator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["33339a1fdb890654e488370afb6e5bf6068e1010"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33339a1fdb890654e488370afb6e5bf6068e1010","date":1255860746,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#iterator().mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#iterator().mjava","sourceNew":"  /** returns an iterator of new allocated Strings, this method violates the Set interface */\n  @SuppressWarnings(\"unchecked\")\n  public Iterator<Object> iterator() {\n    return (Iterator) stringIterator();\n  }\n\n","sourceOld":"  public Iterator iterator() {\n    return new CharArraySetIterator();\n  }\n\n","bugFix":["050b03edbe9b8423ff4c09685c6f03d900e86b83"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#iterator().mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#iterator().mjava","sourceNew":"  /** returns an iterator of new allocated Strings, this method violates the Set interface */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Iterator<Object> iterator() {\n    return (Iterator) stringIterator();\n  }\n\n","sourceOld":"  /** returns an iterator of new allocated Strings, this method violates the Set interface */\n  @SuppressWarnings(\"unchecked\")\n  public Iterator<Object> iterator() {\n    return (Iterator) stringIterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c09067bd60a59f680992d62794689898c0148ac","date":1265200673,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#iterator().mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#iterator().mjava","sourceNew":"  /** Returns an {@link Iterator} depending on the version used:\n   * <ul>\n   * <li>if {@code matchVersion} &ge; 3.1, it returns {@code char[]} instances in this set.</li>\n   * <li>if {@code matchVersion} is 3.0 or older, it returns new\n   * allocated Strings, so this method violates the Set interface.\n   * It is kept this way for backwards compatibility, normally it should\n   * return {@code char[]} on {@code next()}</li>\n   * </ul>\n   */\n  @Override @SuppressWarnings(\"unchecked\")\n  public Iterator<Object> iterator() {\n    // use the AbstractSet#keySet()'s iterator (to not produce endless recursion)\n    return map.matchVersion.onOrAfter(Version.LUCENE_31) ?\n      map.originalKeySet().iterator() : (Iterator) stringIterator();\n  }\n\n","sourceOld":"  /** returns an iterator of new allocated Strings, this method violates the Set interface */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public Iterator<Object> iterator() {\n    return (Iterator) stringIterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/CharArraySet#iterator().mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#iterator().mjava","sourceNew":"  /** Returns an {@link Iterator} depending on the version used:\n   * <ul>\n   * <li>if {@code matchVersion} &ge; 3.1, it returns {@code char[]} instances in this set.</li>\n   * <li>if {@code matchVersion} is 3.0 or older, it returns new\n   * allocated Strings, so this method violates the Set interface.\n   * It is kept this way for backwards compatibility, normally it should\n   * return {@code char[]} on {@code next()}</li>\n   * </ul>\n   */\n  @Override @SuppressWarnings(\"unchecked\")\n  public Iterator<Object> iterator() {\n    // use the AbstractSet#keySet()'s iterator (to not produce endless recursion)\n    return map.matchVersion.onOrAfter(Version.LUCENE_31) ?\n      map.originalKeySet().iterator() : (Iterator) stringIterator();\n  }\n\n","sourceOld":"  /** Returns an {@link Iterator} depending on the version used:\n   * <ul>\n   * <li>if {@code matchVersion} &ge; 3.1, it returns {@code char[]} instances in this set.</li>\n   * <li>if {@code matchVersion} is 3.0 or older, it returns new\n   * allocated Strings, so this method violates the Set interface.\n   * It is kept this way for backwards compatibility, normally it should\n   * return {@code char[]} on {@code next()}</li>\n   * </ul>\n   */\n  @Override @SuppressWarnings(\"unchecked\")\n  public Iterator<Object> iterator() {\n    // use the AbstractSet#keySet()'s iterator (to not produce endless recursion)\n    return map.matchVersion.onOrAfter(Version.LUCENE_31) ?\n      map.originalKeySet().iterator() : (Iterator) stringIterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c09067bd60a59f680992d62794689898c0148ac":["8a9e385641d717e641408d8fbbc62be8fc766357"],"33339a1fdb890654e488370afb6e5bf6068e1010":["050b03edbe9b8423ff4c09685c6f03d900e86b83"],"8a9e385641d717e641408d8fbbc62be8fc766357":["33339a1fdb890654e488370afb6e5bf6068e1010"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"050b03edbe9b8423ff4c09685c6f03d900e86b83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3c09067bd60a59f680992d62794689898c0148ac"]},"commit2Childs":{"3c09067bd60a59f680992d62794689898c0148ac":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"33339a1fdb890654e488370afb6e5bf6068e1010":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["3c09067bd60a59f680992d62794689898c0148ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["050b03edbe9b8423ff4c09685c6f03d900e86b83"],"050b03edbe9b8423ff4c09685c6f03d900e86b83":["33339a1fdb890654e488370afb6e5bf6068e1010"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}