{"path":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"/dev/null","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          fis.readFully(buf, 0, packetSize);\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              return 1;\n            }\n          }\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        errorCount++;\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Snappull failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cfd28703065c4b03936cfebdd7192440dc10acf3","cfd28703065c4b03936cfebdd7192440dc10acf3","cfd28703065c4b03936cfebdd7192440dc10acf3","cfd28703065c4b03936cfebdd7192440dc10acf3","cfd28703065c4b03936cfebdd7192440dc10acf3","cfd28703065c4b03936cfebdd7192440dc10acf3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9","date":1225202752,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem  return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Snappull failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          fis.readFully(buf, 0, packetSize);\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              return 1;\n            }\n          }\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        errorCount++;\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Snappull failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8620c64e323e74078214cf931e505179d14c888e","date":1225270494,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Snappull failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem  return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Snappull failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7e0049b151d932b18c3acc1ef8366262ae9809d","date":1247648156,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Snappull failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          fileChannel.write(ByteBuffer.wrap(buf, 0, packetSize));\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8620c64e323e74078214cf931e505179d14c888e":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"c7e0049b151d932b18c3acc1ef8366262ae9809d":["8620c64e323e74078214cf931e505179d14c888e"],"ad94625fb8d088209f46650c8097196fec67f00c":["c7e0049b151d932b18c3acc1ef8366262ae9809d"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8620c64e323e74078214cf931e505179d14c888e":["c7e0049b151d932b18c3acc1ef8366262ae9809d"],"c7e0049b151d932b18c3acc1ef8366262ae9809d":["ad94625fb8d088209f46650c8097196fec67f00c"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["8620c64e323e74078214cf931e505179d14c888e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}