{"path":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/RandomSampler#createSample(ScoredDocIDs,int,int).mjava","commits":[{"id":"99b17503f4e360f8140fe80a593268486cd718b4","date":1318337685,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/RandomSampler#createSample(ScoredDocIDs,int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected SampleResult createSample(ScoredDocIDs docids, int actualSize, int sampleSetSize) throws IOException {\n    final int[] sample = new int[sampleSetSize];\n    final int maxStep = (actualSize * 2 ) / sampleSetSize; //floor\n    int remaining = actualSize;\n    ScoredDocIDsIterator it = docids.iterator();\n    int i = 0;\n    // select sample docs with random skipStep, make sure to leave sufficient #docs for selection after last skip\n    while (i<sample.length && remaining>(sampleSetSize-maxStep-i)) {\n      int skipStep = 1 + random.nextInt(maxStep);\n      // Skip over 'skipStep' documents\n      for (int j=0; j<skipStep; j++) {\n        it.next();\n        -- remaining;\n      }\n      sample[i++] = it.getDocID();\n    }\n    // Add leftover documents to the sample set\n    while (i<sample.length) {\n      it.next();\n      sample[i++] = it.getDocID();\n    }\n    ScoredDocIDs sampleRes = ScoredDocIdsUtils.createScoredDocIDsSubset(docids, sample);\n    SampleResult res = new SampleResult(sampleRes, sampleSetSize/(double)actualSize);\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/RandomSampler#createSample(ScoredDocIDs,int,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/RandomSampler#createSample(ScoredDocIDs,int,int).mjava","sourceNew":"  @Override\n  protected SampleResult createSample(ScoredDocIDs docids, int actualSize, int sampleSetSize) throws IOException {\n    final int[] sample = new int[sampleSetSize];\n    final int maxStep = (actualSize * 2 ) / sampleSetSize; //floor\n    int remaining = actualSize;\n    ScoredDocIDsIterator it = docids.iterator();\n    int i = 0;\n    // select sample docs with random skipStep, make sure to leave sufficient #docs for selection after last skip\n    while (i<sample.length && remaining>(sampleSetSize-maxStep-i)) {\n      int skipStep = 1 + random.nextInt(maxStep);\n      // Skip over 'skipStep' documents\n      for (int j=0; j<skipStep; j++) {\n        it.next();\n        -- remaining;\n      }\n      sample[i++] = it.getDocID();\n    }\n    // Add leftover documents to the sample set\n    while (i<sample.length) {\n      it.next();\n      sample[i++] = it.getDocID();\n    }\n    ScoredDocIDs sampleRes = ScoredDocIdsUtils.createScoredDocIDsSubset(docids, sample);\n    SampleResult res = new SampleResult(sampleRes, sampleSetSize/(double)actualSize);\n    return res;\n  }\n\n","sourceOld":"  @Override\n  protected SampleResult createSample(ScoredDocIDs docids, int actualSize, int sampleSetSize) throws IOException {\n    final int[] sample = new int[sampleSetSize];\n    final int maxStep = (actualSize * 2 ) / sampleSetSize; //floor\n    int remaining = actualSize;\n    ScoredDocIDsIterator it = docids.iterator();\n    int i = 0;\n    // select sample docs with random skipStep, make sure to leave sufficient #docs for selection after last skip\n    while (i<sample.length && remaining>(sampleSetSize-maxStep-i)) {\n      int skipStep = 1 + random.nextInt(maxStep);\n      // Skip over 'skipStep' documents\n      for (int j=0; j<skipStep; j++) {\n        it.next();\n        -- remaining;\n      }\n      sample[i++] = it.getDocID();\n    }\n    // Add leftover documents to the sample set\n    while (i<sample.length) {\n      it.next();\n      sample[i++] = it.getDocID();\n    }\n    ScoredDocIDs sampleRes = ScoredDocIdsUtils.createScoredDocIDsSubset(docids, sample);\n    SampleResult res = new SampleResult(sampleRes, sampleSetSize/(double)actualSize);\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["99b17503f4e360f8140fe80a593268486cd718b4"],"99b17503f4e360f8140fe80a593268486cd718b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"99b17503f4e360f8140fe80a593268486cd718b4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99b17503f4e360f8140fe80a593268486cd718b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}