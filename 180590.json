{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openConfig(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openConfig(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openConfig(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openConfig(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82c0f50a240cf02105b13b11e49095779864d37f","date":1311151772,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openConfig(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession, myName);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openConfig(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5101aff20e65c9a285c274627ec956eb5409d253"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openConfig(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession, myName);\n        }\n      }\n    } catch (Throwable e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openConfig(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession, myName);\n        }\n      }\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b2a6913ca906832d1ef58d72498167acb00a7e4f","date":1330499260,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openResource(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession, myName);\n        }\n      }\n    } catch (Throwable e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openConfig(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession, myName);\n        }\n      }\n    } catch (Throwable e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":["b24326411db492f92ea49f6fb947c90bc73cf19e"],"bugIntro":["5101aff20e65c9a285c274627ec956eb5409d253"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openResource(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession, myName);\n        }\n      }\n    } catch (Throwable e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openConfig(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession, myName);\n        }\n      }\n    } catch (Throwable e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5101aff20e65c9a285c274627ec956eb5409d253","date":1344005120,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Throwable e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openResource(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession, myName);\n        }\n      }\n    } catch (Throwable e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","b2a6913ca906832d1ef58d72498167acb00a7e4f","b24326411db492f92ea49f6fb947c90bc73cf19e","82c0f50a240cf02105b13b11e49095779864d37f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Throwable e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openResource(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession, myName);\n        }\n      }\n    } catch (Throwable e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Throwable e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      NamedList defaults = (NamedList) initArgs.get(\"defaults\");\n      if (defaults != null) {\n        String configLoc = (String) defaults.get(\"config\");\n        if (configLoc != null && configLoc.length() != 0) {\n          processConfiguration(defaults);\n          final InputSource is = new InputSource(core.getResourceLoader().openResource(configLoc));\n          is.setSystemId(SystemIdResolver.createSystemIdFromResourceName(configLoc));\n          importer = new DataImporter(is, core,\n                  dataSources, coreScopeSession, myName);\n        }\n      }\n    } catch (Throwable e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              DataImporter.MSG.INVALID_CONFIG, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Throwable e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Throwable e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Throwable e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Throwable e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Exception e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Throwable e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09b1b2d77cf62a4d7115dce6c9a14e5ffc714049","date":1425037342,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      String name = getPluginInfo().name;\n      if (name.startsWith(\"/\")) {\n        myName = name.substring(1);\n      }\n      // some users may have '/' in the handler name. replace with '_'\n      myName = myName.replaceAll(\"/\", \"_\");\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Exception e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Exception e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      String name = getPluginInfo().name;\n      if (name.startsWith(\"/\")) {\n        myName = name.substring(1);\n      }\n      // some users may have '/' in the handler name. replace with '_'\n      myName = myName.replaceAll(\"/\", \"_\");\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Exception e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      //hack to get the name of this handler\n      for (Map.Entry<String, SolrRequestHandler> e : core.getRequestHandlers().entrySet()) {\n        SolrRequestHandler handler = e.getValue();\n        //this will not work if startup=lazy is set\n        if( this == handler) {\n          String name= e.getKey();\n          if(name.startsWith(\"/\")){\n            myName = name.substring(1);\n          }\n          // some users may have '/' in the handler name. replace with '_'\n          myName = myName.replaceAll(\"/\",\"_\") ;\n        }\n      }\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Exception e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      String name = getPluginInfo().name;\n      if (name.startsWith(\"/\")) {\n        myName = name.substring(1);\n      }\n      // some users may have '/' in the handler name. replace with '_'\n      myName = myName.replaceAll(\"/\", \"_\");\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Exception e) {\n      log.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      String name = getPluginInfo().name;\n      if (name.startsWith(\"/\")) {\n        myName = name.substring(1);\n      }\n      // some users may have '/' in the handler name. replace with '_'\n      myName = myName.replaceAll(\"/\", \"_\");\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Exception e) {\n      LOG.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    try {\n      String name = getPluginInfo().name;\n      if (name.startsWith(\"/\")) {\n        myName = name.substring(1);\n      }\n      // some users may have '/' in the handler name. replace with '_'\n      myName = myName.replaceAll(\"/\", \"_\");\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Exception e) {\n      log.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      String name = getPluginInfo().name;\n      if (name.startsWith(\"/\")) {\n        myName = name.substring(1);\n      }\n      // some users may have '/' in the handler name. replace with '_'\n      myName = myName.replaceAll(\"/\", \"_\");\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Exception e) {\n      log.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      String name = getPluginInfo().name;\n      if (name.startsWith(\"/\")) {\n        myName = name.substring(1);\n      }\n      // some users may have '/' in the handler name. replace with '_'\n      myName = myName.replaceAll(\"/\", \"_\");\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Exception e) {\n      log.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    try {\n      String name = getPluginInfo().name;\n      if (name.startsWith(\"/\")) {\n        myName = name.substring(1);\n      }\n      // some users may have '/' in the handler name. replace with '_'\n      myName = myName.replaceAll(\"/\", \"_\");\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Exception e) {\n      log.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#inform(SolrCore).mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    try {\n      String name = getPluginInfo().name;\n      if (name.startsWith(\"/\")) {\n        myName = name.substring(1);\n      }\n      // some users may have '/' in the handler name. replace with '_'\n      myName = myName.replaceAll(\"/\", \"_\");\n      debugEnabled = StrUtils.parseBool((String)initArgs.get(ENABLE_DEBUG), true);\n      importer = new DataImporter(core, myName);         \n    } catch (Exception e) {\n      log.error( DataImporter.MSG.LOAD_EXP, e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, DataImporter.MSG.LOAD_EXP, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["5101aff20e65c9a285c274627ec956eb5409d253","7530de27b87b961b51f01bd1299b7004d46e8823"],"82c0f50a240cf02105b13b11e49095779864d37f":["c26f00b574427b55127e869b935845554afde1fa"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7b1605dda5afabdc06fd136fa0dd14ad326e3001","b2a6913ca906832d1ef58d72498167acb00a7e4f"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["b2a6913ca906832d1ef58d72498167acb00a7e4f","5101aff20e65c9a285c274627ec956eb5409d253"],"5101aff20e65c9a285c274627ec956eb5409d253":["b2a6913ca906832d1ef58d72498167acb00a7e4f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","09b1b2d77cf62a4d7115dce6c9a14e5ffc714049"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"b2a6913ca906832d1ef58d72498167acb00a7e4f":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"09b1b2d77cf62a4d7115dce6c9a14e5ffc714049":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b2a6913ca906832d1ef58d72498167acb00a7e4f","5101aff20e65c9a285c274627ec956eb5409d253"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["82c0f50a240cf02105b13b11e49095779864d37f"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["5101aff20e65c9a285c274627ec956eb5409d253"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["09b1b2d77cf62a4d7115dce6c9a14e5ffc714049"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"82c0f50a240cf02105b13b11e49095779864d37f":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["82c0f50a240cf02105b13b11e49095779864d37f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"5101aff20e65c9a285c274627ec956eb5409d253":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b2a6913ca906832d1ef58d72498167acb00a7e4f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8fd5be977c105554c6a7b68afcdbc511439723ab","5101aff20e65c9a285c274627ec956eb5409d253","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"09b1b2d77cf62a4d7115dce6c9a14e5ffc714049":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b2a6913ca906832d1ef58d72498167acb00a7e4f"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","09b1b2d77cf62a4d7115dce6c9a14e5ffc714049"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8fd5be977c105554c6a7b68afcdbc511439723ab","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}