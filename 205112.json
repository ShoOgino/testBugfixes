{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#add(CharSequence,CharSequence).mjava","commits":[{"id":"7476b30b7c03f9027676c9df28fda37629da2c97","date":1364206093,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#add(CharSequence,CharSequence).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Adds an input string and it's stemmer override output to this builder.\n     * \n     * @param input the input char sequence \n     * @param output the stemmer override output char sequence\n     * @return <code>false</code> iff the input has already been added to this builder otherwise <code>true</code>.\n     */\n    public boolean add(CharSequence input, CharSequence output) {\n      final int length = input.length();\n      if (ignoreCase) {\n        // convert on the fly to lowercase\n        charsSpare.grow(length);\n        final char[] buffer = charsSpare.chars;\n        for (int i = 0; i < length; ) {\n            i += Character.toChars(\n                    Character.toLowerCase(\n                        Character.codePointAt(input, i)), buffer, i);\n        }\n        UnicodeUtil.UTF16toUTF8(buffer, 0, length, spare);\n      } else {\n        UnicodeUtil.UTF16toUTF8(input, 0, length, spare);\n      }\n      if (hash.add(spare) >= 0) {\n        outputValues.add(output);\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#add(CharSequence,CharSequence).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#add(CharSequence,CharSequence).mjava","sourceNew":"    /**\n     * Adds an input string and it's stemmer override output to this builder.\n     * \n     * @param input the input char sequence \n     * @param output the stemmer override output char sequence\n     * @return <code>false</code> iff the input has already been added to this builder otherwise <code>true</code>.\n     */\n    public boolean add(CharSequence input, CharSequence output) {\n      final int length = input.length();\n      if (ignoreCase) {\n        // convert on the fly to lowercase\n        charsSpare.grow(length);\n        final char[] buffer = charsSpare.chars();\n        for (int i = 0; i < length; ) {\n            i += Character.toChars(\n                    Character.toLowerCase(\n                        Character.codePointAt(input, i)), buffer, i);\n        }\n        spare.copyChars(buffer, 0, length);\n      } else {\n        spare.copyChars(input, 0, length);\n      }\n      if (hash.add(spare.get()) >= 0) {\n        outputValues.add(output);\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":"    /**\n     * Adds an input string and it's stemmer override output to this builder.\n     * \n     * @param input the input char sequence \n     * @param output the stemmer override output char sequence\n     * @return <code>false</code> iff the input has already been added to this builder otherwise <code>true</code>.\n     */\n    public boolean add(CharSequence input, CharSequence output) {\n      final int length = input.length();\n      if (ignoreCase) {\n        // convert on the fly to lowercase\n        charsSpare.grow(length);\n        final char[] buffer = charsSpare.chars;\n        for (int i = 0; i < length; ) {\n            i += Character.toChars(\n                    Character.toLowerCase(\n                        Character.codePointAt(input, i)), buffer, i);\n        }\n        UnicodeUtil.UTF16toUTF8(buffer, 0, length, spare);\n      } else {\n        UnicodeUtil.UTF16toUTF8(input, 0, length, spare);\n      }\n      if (hash.add(spare) >= 0) {\n        outputValues.add(output);\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":["7476b30b7c03f9027676c9df28fda37629da2c97"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#add(CharSequence,CharSequence).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#add(CharSequence,CharSequence).mjava","sourceNew":"    /**\n     * Adds an input string and its stemmer override output to this builder.\n     * \n     * @param input the input char sequence \n     * @param output the stemmer override output char sequence\n     * @return <code>false</code> iff the input has already been added to this builder otherwise <code>true</code>.\n     */\n    public boolean add(CharSequence input, CharSequence output) {\n      final int length = input.length();\n      if (ignoreCase) {\n        // convert on the fly to lowercase\n        charsSpare.grow(length);\n        final char[] buffer = charsSpare.chars();\n        for (int i = 0; i < length; ) {\n            i += Character.toChars(\n                    Character.toLowerCase(\n                        Character.codePointAt(input, i)), buffer, i);\n        }\n        spare.copyChars(buffer, 0, length);\n      } else {\n        spare.copyChars(input, 0, length);\n      }\n      if (hash.add(spare.get()) >= 0) {\n        outputValues.add(output);\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":"    /**\n     * Adds an input string and it's stemmer override output to this builder.\n     * \n     * @param input the input char sequence \n     * @param output the stemmer override output char sequence\n     * @return <code>false</code> iff the input has already been added to this builder otherwise <code>true</code>.\n     */\n    public boolean add(CharSequence input, CharSequence output) {\n      final int length = input.length();\n      if (ignoreCase) {\n        // convert on the fly to lowercase\n        charsSpare.grow(length);\n        final char[] buffer = charsSpare.chars();\n        for (int i = 0; i < length; ) {\n            i += Character.toChars(\n                    Character.toLowerCase(\n                        Character.codePointAt(input, i)), buffer, i);\n        }\n        spare.copyChars(buffer, 0, length);\n      } else {\n        spare.copyChars(input, 0, length);\n      }\n      if (hash.add(spare.get()) >= 0) {\n        outputValues.add(output);\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0df9d8f376ca62f8eb9f1d20afaf38a3e9afc995","date":1427447832,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#add(CharSequence,CharSequence).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#add(CharSequence,CharSequence).mjava","sourceNew":"    /**\n     * Adds an input string and its stemmer override output to this builder.\n     * \n     * @param input the input char sequence \n     * @param output the stemmer override output char sequence\n     * @return <code>false</code> iff the input has already been added to this builder otherwise <code>true</code>.\n     */\n    public boolean add(CharSequence input, CharSequence output) {\n      final int length = input.length();\n      if (ignoreCase) {\n        // convert on the fly to lowercase\n        charsSpare.grow(length);\n        final char[] buffer = charsSpare.chars();\n        for (int i = 0; i < length; ) {\n          i += Character.toChars(\n                  Character.toLowerCase(\n                      Character.codePointAt(input, i)), buffer, i);\n        }\n        spare.copyChars(buffer, 0, length);\n      } else {\n        spare.copyChars(input, 0, length);\n      }\n      if (hash.add(spare.get()) >= 0) {\n        outputValues.add(output);\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":"    /**\n     * Adds an input string and its stemmer override output to this builder.\n     * \n     * @param input the input char sequence \n     * @param output the stemmer override output char sequence\n     * @return <code>false</code> iff the input has already been added to this builder otherwise <code>true</code>.\n     */\n    public boolean add(CharSequence input, CharSequence output) {\n      final int length = input.length();\n      if (ignoreCase) {\n        // convert on the fly to lowercase\n        charsSpare.grow(length);\n        final char[] buffer = charsSpare.chars();\n        for (int i = 0; i < length; ) {\n            i += Character.toChars(\n                    Character.toLowerCase(\n                        Character.codePointAt(input, i)), buffer, i);\n        }\n        spare.copyChars(buffer, 0, length);\n      } else {\n        spare.copyChars(input, 0, length);\n      }\n      if (hash.add(spare.get()) >= 0) {\n        outputValues.add(output);\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#add(CharSequence,CharSequence).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.Builder#add(CharSequence,CharSequence).mjava","sourceNew":"    /**\n     * Adds an input string and its stemmer override output to this builder.\n     * \n     * @param input the input char sequence \n     * @param output the stemmer override output char sequence\n     * @return <code>false</code> iff the input has already been added to this builder otherwise <code>true</code>.\n     */\n    public boolean add(CharSequence input, CharSequence output) {\n      final int length = input.length();\n      if (ignoreCase) {\n        // convert on the fly to lowercase\n        charsSpare.grow(length);\n        final char[] buffer = charsSpare.chars();\n        for (int i = 0; i < length; ) {\n          i += Character.toChars(\n                  Character.toLowerCase(\n                      Character.codePointAt(input, i)), buffer, i);\n        }\n        spare.copyChars(buffer, 0, length);\n      } else {\n        spare.copyChars(input, 0, length);\n      }\n      if (hash.add(spare.get()) >= 0) {\n        outputValues.add(output);\n        return true;\n      }\n      return false;\n    }\n\n","sourceOld":"    /**\n     * Adds an input string and its stemmer override output to this builder.\n     * \n     * @param input the input char sequence \n     * @param output the stemmer override output char sequence\n     * @return <code>false</code> iff the input has already been added to this builder otherwise <code>true</code>.\n     */\n    public boolean add(CharSequence input, CharSequence output) {\n      final int length = input.length();\n      if (ignoreCase) {\n        // convert on the fly to lowercase\n        charsSpare.grow(length);\n        final char[] buffer = charsSpare.chars();\n        for (int i = 0; i < length; ) {\n            i += Character.toChars(\n                    Character.toLowerCase(\n                        Character.codePointAt(input, i)), buffer, i);\n        }\n        spare.copyChars(buffer, 0, length);\n      } else {\n        spare.copyChars(input, 0, length);\n      }\n      if (hash.add(spare.get()) >= 0) {\n        outputValues.add(output);\n        return true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0df9d8f376ca62f8eb9f1d20afaf38a3e9afc995":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","0df9d8f376ca62f8eb9f1d20afaf38a3e9afc995"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7476b30b7c03f9027676c9df28fda37629da2c97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["7476b30b7c03f9027676c9df28fda37629da2c97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0df9d8f376ca62f8eb9f1d20afaf38a3e9afc995"]},"commit2Childs":{"0df9d8f376ca62f8eb9f1d20afaf38a3e9afc995":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["0df9d8f376ca62f8eb9f1d20afaf38a3e9afc995","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"7476b30b7c03f9027676c9df28fda37629da2c97":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7476b30b7c03f9027676c9df28fda37629da2c97"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}