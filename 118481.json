{"path":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n      sortFields();\n      return new MemoryFields();\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n      sortFields();\n      return new MemoryFields();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f657d9837900f4519ca1cbd5e98d86d4bba4dab","date":1417790596,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n      return new MemoryFields();\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n      sortFields();\n      return new MemoryFields();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"253a79e1af11467dd01315b1919025d288aa0ccb","date":1458032260,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n      Map<String, Info> filteredFields = fields.entrySet().stream()\n          .filter(entry ->  entry.getValue().numTokens > 0)\n          .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n              (u,v) -> { throw new IllegalStateException(String.format(Locale.ROOT, \"Duplicate key %s\", u));},\n              TreeMap::new\n          ));\n      return new MemoryFields(filteredFields );\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n      return new MemoryFields();\n    }\n\n","bugFix":null,"bugIntro":["f1d0f7d72954817ee45c2ea1e5ee8df4b8da1115"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1d0f7d72954817ee45c2ea1e5ee8df4b8da1115","date":1469455140,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n      return memoryFields;\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n      Map<String, Info> filteredFields = fields.entrySet().stream()\n          .filter(entry ->  entry.getValue().numTokens > 0)\n          .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n              (u,v) -> { throw new IllegalStateException(String.format(Locale.ROOT, \"Duplicate key %s\", u));},\n              TreeMap::new\n          ));\n      return new MemoryFields(filteredFields );\n    }\n\n","bugFix":["253a79e1af11467dd01315b1919025d288aa0ccb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":"    @Override\n    public Fields fields() {\n      return memoryFields;\n    }\n\n","sourceOld":"    @Override\n    public Fields fields() {\n      Map<String, Info> filteredFields = fields.entrySet().stream()\n          .filter(entry ->  entry.getValue().numTokens > 0)\n          .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n              (u,v) -> { throw new IllegalStateException(String.format(Locale.ROOT, \"Duplicate key %s\", u));},\n              TreeMap::new\n          ));\n      return new MemoryFields(filteredFields );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b6f36bb733c575dd04fdfa785127ebf82b0033f","date":1497502741,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":null,"sourceOld":"    @Override\n    public Fields fields() {\n      return memoryFields;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":null,"sourceOld":"    @Override\n    public Fields fields() {\n      return memoryFields;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#fields().mjava","sourceNew":null,"sourceOld":"    @Override\n    public Fields fields() {\n      return memoryFields;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"253a79e1af11467dd01315b1919025d288aa0ccb":["0f657d9837900f4519ca1cbd5e98d86d4bba4dab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b6f36bb733c575dd04fdfa785127ebf82b0033f":["f1d0f7d72954817ee45c2ea1e5ee8df4b8da1115"],"f1d0f7d72954817ee45c2ea1e5ee8df4b8da1115":["253a79e1af11467dd01315b1919025d288aa0ccb"],"0f657d9837900f4519ca1cbd5e98d86d4bba4dab":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"28288370235ed02234a64753cdbf0c6ec096304a":["f1d0f7d72954817ee45c2ea1e5ee8df4b8da1115","2b6f36bb733c575dd04fdfa785127ebf82b0033f"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["f1d0f7d72954817ee45c2ea1e5ee8df4b8da1115","2b6f36bb733c575dd04fdfa785127ebf82b0033f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["253a79e1af11467dd01315b1919025d288aa0ccb","f1d0f7d72954817ee45c2ea1e5ee8df4b8da1115"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0f657d9837900f4519ca1cbd5e98d86d4bba4dab"],"253a79e1af11467dd01315b1919025d288aa0ccb":["f1d0f7d72954817ee45c2ea1e5ee8df4b8da1115","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2b6f36bb733c575dd04fdfa785127ebf82b0033f":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"f1d0f7d72954817ee45c2ea1e5ee8df4b8da1115":["2b6f36bb733c575dd04fdfa785127ebf82b0033f","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0f657d9837900f4519ca1cbd5e98d86d4bba4dab":["253a79e1af11467dd01315b1919025d288aa0ccb"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}