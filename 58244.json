{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","sourceNew":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1]));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n  }\n\n","sourceOld":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1]));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d88bfdf98b3ce721bb461161e9a8757bf4bc2b3","date":1332604338,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","sourceNew":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1]));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1]));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","sourceNew":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1]));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1]));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","sourceNew":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1]));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1]));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","sourceNew":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1], Field.Store.NO));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1]));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","sourceNew":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1], Field.Store.NO));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", sortData[i][2])));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", sortData[i][3])));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", sortData[i][4])));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", sortData[i][5])));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1], Field.Store.NO));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","sourceNew":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1], Field.Store.NO));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", sortData[i][2])));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", sortData[i][3])));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", sortData[i][4])));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", sortData[i][5])));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1], Field.Store.NO));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", new StringReader(sortData[i][2]))));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", new StringReader(sortData[i][3]))));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", new StringReader(sortData[i][4]))));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", new StringReader(sortData[i][5]))));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","sourceNew":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1], Field.Store.NO));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", sortData[i][2])));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", sortData[i][3])));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", sortData[i][4])));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", sortData[i][5])));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.shutdown();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1], Field.Store.NO));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", sortData[i][2])));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", sortData[i][3])));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", sortData[i][4])));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", sortData[i][5])));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9222ff3275c9f12c3ed1b874004083b8f7fc8e7a","date":1399822162,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","sourceNew":null,"sourceOld":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1], Field.Store.NO));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", sortData[i][2])));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", sortData[i][3])));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", sortData[i][4])));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", sortData[i][5])));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.shutdown();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","sourceNew":null,"sourceOld":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1], Field.Store.NO));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", sortData[i][2])));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", sortData[i][3])));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", sortData[i][4])));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", sortData[i][5])));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.shutdown();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String).mjava","sourceNew":null,"sourceOld":"  // Test using various international locales with accented characters (which\n  // sort differently depending on locale)\n  //\n  // Copied (and slightly modified) from \n  // org.apache.lucene.search.TestSort.testInternationalSort()\n  //  \n  // TODO: this test is really fragile. there are already 3 different cases,\n  // depending upon unicode version.\n  public void testCollationKeySort(Analyzer usAnalyzer,\n                                   Analyzer franceAnalyzer,\n                                   Analyzer swedenAnalyzer,\n                                   Analyzer denmarkAnalyzer,\n                                   String usResult,\n                                   String frResult,\n                                   String svResult,\n                                   String dkResult) throws Exception {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n\n    // document data:\n    // the tracer field is used to determine which document was hit\n    String[][] sortData = new String[][] {\n      // tracer contents US                 France             Sweden (sv_SE)     Denmark (da_DK)\n      {  \"A\",   \"x\",     \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\",      \"p\\u00EAche\"      },\n      {  \"B\",   \"y\",     \"HAT\",             \"HAT\",             \"HAT\",             \"HAT\"             },\n      {  \"C\",   \"x\",     \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\", \"p\\u00E9ch\\u00E9\" },\n      {  \"D\",   \"y\",     \"HUT\",             \"HUT\",             \"HUT\",             \"HUT\"             },\n      {  \"E\",   \"x\",     \"peach\",           \"peach\",           \"peach\",           \"peach\"           },\n      {  \"F\",   \"y\",     \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\",        \"H\\u00C5T\"        },\n      {  \"G\",   \"x\",     \"sin\",             \"sin\",             \"sin\",             \"sin\"             },\n      {  \"H\",   \"y\",     \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\",        \"H\\u00D8T\"        },\n      {  \"I\",   \"x\",     \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\",        \"s\\u00EDn\"        },\n      {  \"J\",   \"y\",     \"HOT\",             \"HOT\",             \"HOT\",             \"HOT\"             },\n    };\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    \n    for (int i = 0 ; i < sortData.length ; ++i) {\n      Document doc = new Document();\n      doc.add(new Field(\"tracer\", sortData[i][0], customType));\n      doc.add(new TextField(\"contents\", sortData[i][1], Field.Store.NO));\n      if (sortData[i][2] != null) \n        doc.add(new TextField(\"US\", usAnalyzer.tokenStream(\"US\", sortData[i][2])));\n      if (sortData[i][3] != null) \n        doc.add(new TextField(\"France\", franceAnalyzer.tokenStream(\"France\", sortData[i][3])));\n      if (sortData[i][4] != null)\n        doc.add(new TextField(\"Sweden\", swedenAnalyzer.tokenStream(\"Sweden\", sortData[i][4])));\n      if (sortData[i][5] != null) \n        doc.add(new TextField(\"Denmark\", denmarkAnalyzer.tokenStream(\"Denmark\", sortData[i][5])));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.shutdown();\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    Sort sort = new Sort();\n    Query queryX = new TermQuery(new Term (\"contents\", \"x\"));\n    Query queryY = new TermQuery(new Term (\"contents\", \"y\"));\n    \n    sort.setSort(new SortField(\"US\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, usResult);\n\n    sort.setSort(new SortField(\"France\", SortField.Type.STRING));\n    assertMatches(searcher, queryX, sort, frResult);\n\n    sort.setSort(new SortField(\"Sweden\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, svResult);\n\n    sort.setSort(new SortField(\"Denmark\", SortField.Type.STRING));\n    assertMatches(searcher, queryY, sort, dkResult);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["04f07771a2a7dd3a395700665ed839c3dae2def2","c83d6c4335f31cae14f625a222bc842f20073dcd"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8d88bfdf98b3ce721bb461161e9a8757bf4bc2b3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","9222ff3275c9f12c3ed1b874004083b8f7fc8e7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9222ff3275c9f12c3ed1b874004083b8f7fc8e7a":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8d88bfdf98b3ce721bb461161e9a8757bf4bc2b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8d88bfdf98b3ce721bb461161e9a8757bf4bc2b3"],"8d88bfdf98b3ce721bb461161e9a8757bf4bc2b3":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9222ff3275c9f12c3ed1b874004083b8f7fc8e7a":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d","9222ff3275c9f12c3ed1b874004083b8f7fc8e7a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}