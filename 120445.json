{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c8b911ab9e4d7823a9dbde3782c4fd4e695c85","date":1288714145,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      \n      if (writer != null) {\n        writer.finish();\n      }\n      \n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      \n      if (writer != null) {\n        writer.finish();\n      }\n      \n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      \n      if (writer != null) {\n        writer.finish();\n      }\n      \n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      @Override\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      \n      if (writer != null) {\n        writer.finish();\n      }\n      \n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      \n      if (writer != null) {\n        writer.finish();\n      }\n      \n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      @Override\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      \n      if (writer != null) {\n        writer.finish();\n      }\n      \n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      \n      if (writer != null) {\n        writer.finish();\n      }\n      \n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      @Override\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      \n      if (writer != null) {\n        writer.finish();\n      }\n      \n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      \n      if (writer != null) {\n        writer.finish();\n      }\n      \n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      @Override\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      \n      if (writer != null) {\n        writer.finish();\n      }\n      \n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      @Override\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      \n      if (writer != null) {\n        writer.finish();\n      }\n      \n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      @Override\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      \n      if (writer != null) {\n        writer.finish();\n      }\n      \n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      @Override\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      \n      if (writer != null) {\n        writer.finish();\n      }\n      \n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["61c8b911ab9e4d7823a9dbde3782c4fd4e695c85"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"85a883878c0af761245ab048babc63d099f835f3":["1da8d55113b689b06716246649de6f62430f15c0","61c8b911ab9e4d7823a9dbde3782c4fd4e695c85"],"61c8b911ab9e4d7823a9dbde3782c4fd4e695c85":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","61c8b911ab9e4d7823a9dbde3782c4fd4e695c85"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["85a883878c0af761245ab048babc63d099f835f3","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"85a883878c0af761245ab048babc63d099f835f3":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"61c8b911ab9e4d7823a9dbde3782c4fd4e695c85":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1da8d55113b689b06716246649de6f62430f15c0":["85a883878c0af761245ab048babc63d099f835f3","61c8b911ab9e4d7823a9dbde3782c4fd4e695c85","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}