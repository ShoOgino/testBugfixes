{"path":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(ReaderContext).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException\n  {\n    OpenBitSetDISI res = null;\n    final IndexReader reader = context.reader;\n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, context), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, context), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, context), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return res;\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(ReaderContext context) throws IOException\n  {\n    OpenBitSetDISI res = null;\n    final IndexReader reader = context.reader;\n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, context), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, context), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, context), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return res;\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException\n  {\n    OpenBitSetDISI res = null;\n    final IndexReader reader = context.reader;\n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, context), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, context), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, context), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return res;\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException\n  {\n    OpenBitSetDISI res = null;\n    final IndexReader reader = context.reader;\n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, context), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, context), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, context), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return res;\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e141595402370bee958745de8b1c9de1fa182581","date":1310547892,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    OpenBitSetDISI res = null;\n    final IndexReader reader = context.reader;\n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, context), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (notFilters != null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, context), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters != null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, context), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, context));\n          }\n        }\n      }\n    }\n\n    return res != null ? res : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException\n  {\n    OpenBitSetDISI res = null;\n    final IndexReader reader = context.reader;\n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, context), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, context), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, context), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return res;\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    OpenBitSetDISI res = null;\n    final IndexReader reader = context.reader;\n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, context), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (notFilters != null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, context), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters != null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, context), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, context));\n          }\n        }\n      }\n    }\n\n    return res != null ? res : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    OpenBitSetDISI res = null;\n    final IndexReader reader = context.reader;\n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, context), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (notFilters != null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, context), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters != null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, context), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, context));\n          }\n        }\n      }\n    }\n\n    return res != null ? res : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"e141595402370bee958745de8b1c9de1fa182581":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f9f2355d68aab1348539f7a1603279405e566a4"],"1f9f2355d68aab1348539f7a1603279405e566a4":["e141595402370bee958745de8b1c9de1fa182581"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","e141595402370bee958745de8b1c9de1fa182581"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"e141595402370bee958745de8b1c9de1fa182581":["1f9f2355d68aab1348539f7a1603279405e566a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1f9f2355d68aab1348539f7a1603279405e566a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}