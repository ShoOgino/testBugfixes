{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testConcurrentReads().mjava","commits":[{"id":"fb04ae9ea4b411d2adefa88bcd40141cfe9a711d","date":1351706460,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testConcurrentReads().mjava","pathOld":"/dev/null","sourceNew":"  public void testConcurrentReads() throws Exception {\n    // make sure the readers are properly cloned\n    final Document doc = new Document();\n    final Field field = new StringField(\"fld\", \"\", Store.YES);\n    doc.add(field);\n    final int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      field.setStringValue(\"\" + i);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    final int concurrentReads = atLeast(5);\n    final int readsPerThread = atLeast(50);\n    final List<Thread> readThreads = new ArrayList<Thread>();\n    final AtomicReference<Exception> ex = new AtomicReference<Exception>();\n    for (int i = 0; i < concurrentReads; ++i) {\n      readThreads.add(new Thread() {\n\n        int[] queries;\n\n        {\n          queries = new int[readsPerThread];\n          for (int i = 0; i < queries.length; ++i) {\n            queries[i] = random().nextInt(numDocs);\n          }\n        }\n\n        @Override\n        public void run() {\n          for (int q : queries) {\n            final Query query = new TermQuery(new Term(\"fld\", \"\" + q));\n            try {\n              final TopDocs topDocs = searcher.search(query, 1);\n              if (topDocs.totalHits != 1) {\n                throw new IllegalStateException(\"Expected 1 hit, got \" + topDocs.totalHits);\n              }\n              final StoredDocument sdoc = rd.document(topDocs.scoreDocs[0].doc);\n              if (sdoc == null || sdoc.get(\"fld\") == null) {\n                throw new IllegalStateException(\"Could not find document \" + q);\n              }\n              if (!Integer.toString(q).equals(sdoc.get(\"fld\"))) {\n                throw new IllegalStateException(\"Expected \" + q + \", but got \" + sdoc.get(\"fld\"));\n              }\n            } catch (Exception e) {\n              ex.compareAndSet(null, e);\n            }\n          }\n        }\n      });\n    }\n    for (Thread thread : readThreads) {\n      thread.start();\n    }\n    for (Thread thread : readThreads) {\n      thread.join();\n    }\n    rd.close();\n    if (ex.get() != null) {\n      throw ex.get();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab","date":1354403647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testConcurrentReads().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testConcurrentReads().mjava","sourceNew":"  public void testConcurrentReads() throws Exception {\n    // make sure the readers are properly cloned\n    final Document doc = new Document();\n    final Field field = new StringField(\"fld\", \"\", Store.YES);\n    doc.add(field);\n    final int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      field.setStringValue(\"\" + i);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    final int concurrentReads = atLeast(5);\n    final int readsPerThread = atLeast(50);\n    final List<Thread> readThreads = new ArrayList<Thread>();\n    final AtomicReference<Exception> ex = new AtomicReference<Exception>();\n    for (int i = 0; i < concurrentReads; ++i) {\n      readThreads.add(new Thread() {\n\n        int[] queries;\n\n        {\n          queries = new int[readsPerThread];\n          for (int i = 0; i < queries.length; ++i) {\n            queries[i] = random().nextInt(numDocs);\n          }\n        }\n\n        @Override\n        public void run() {\n          for (int q : queries) {\n            final Query query = new TermQuery(new Term(\"fld\", \"\" + q));\n            try {\n              final TopDocs topDocs = searcher.search(query, 1);\n              if (topDocs.totalHits != 1) {\n                throw new IllegalStateException(\"Expected 1 hit, got \" + topDocs.totalHits);\n              }\n              final StoredDocument sdoc = rd.document(topDocs.scoreDocs[0].doc);\n              if (sdoc == null || sdoc.get(\"fld\") == null) {\n                throw new IllegalStateException(\"Could not find document \" + q);\n              }\n              if (!Integer.toString(q).equals(sdoc.get(\"fld\"))) {\n                throw new IllegalStateException(\"Expected \" + q + \", but got \" + sdoc.get(\"fld\"));\n              }\n            } catch (Exception e) {\n              ex.compareAndSet(null, e);\n            }\n          }\n        }\n      });\n    }\n    for (Thread thread : readThreads) {\n      thread.start();\n    }\n    for (Thread thread : readThreads) {\n      thread.join();\n    }\n    rd.close();\n    if (ex.get() != null) {\n      throw ex.get();\n    }\n  }\n\n","sourceOld":"  public void testConcurrentReads() throws Exception {\n    // make sure the readers are properly cloned\n    final Document doc = new Document();\n    final Field field = new StringField(\"fld\", \"\", Store.YES);\n    doc.add(field);\n    final int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      field.setStringValue(\"\" + i);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    final int concurrentReads = atLeast(5);\n    final int readsPerThread = atLeast(50);\n    final List<Thread> readThreads = new ArrayList<Thread>();\n    final AtomicReference<Exception> ex = new AtomicReference<Exception>();\n    for (int i = 0; i < concurrentReads; ++i) {\n      readThreads.add(new Thread() {\n\n        int[] queries;\n\n        {\n          queries = new int[readsPerThread];\n          for (int i = 0; i < queries.length; ++i) {\n            queries[i] = random().nextInt(numDocs);\n          }\n        }\n\n        @Override\n        public void run() {\n          for (int q : queries) {\n            final Query query = new TermQuery(new Term(\"fld\", \"\" + q));\n            try {\n              final TopDocs topDocs = searcher.search(query, 1);\n              if (topDocs.totalHits != 1) {\n                throw new IllegalStateException(\"Expected 1 hit, got \" + topDocs.totalHits);\n              }\n              final StoredDocument sdoc = rd.document(topDocs.scoreDocs[0].doc);\n              if (sdoc == null || sdoc.get(\"fld\") == null) {\n                throw new IllegalStateException(\"Could not find document \" + q);\n              }\n              if (!Integer.toString(q).equals(sdoc.get(\"fld\"))) {\n                throw new IllegalStateException(\"Expected \" + q + \", but got \" + sdoc.get(\"fld\"));\n              }\n            } catch (Exception e) {\n              ex.compareAndSet(null, e);\n            }\n          }\n        }\n      });\n    }\n    for (Thread thread : readThreads) {\n      thread.start();\n    }\n    for (Thread thread : readThreads) {\n      thread.join();\n    }\n    rd.close();\n    if (ex.get() != null) {\n      throw ex.get();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testConcurrentReads().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testConcurrentReads().mjava","sourceNew":"  public void testConcurrentReads() throws Exception {\n    // make sure the readers are properly cloned\n    final Document doc = new Document();\n    final Field field = new StringField(\"fld\", \"\", Store.YES);\n    doc.add(field);\n    final int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      field.setStringValue(\"\" + i);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    final int concurrentReads = atLeast(5);\n    final int readsPerThread = atLeast(50);\n    final List<Thread> readThreads = new ArrayList<Thread>();\n    final AtomicReference<Exception> ex = new AtomicReference<Exception>();\n    for (int i = 0; i < concurrentReads; ++i) {\n      readThreads.add(new Thread() {\n\n        int[] queries;\n\n        {\n          queries = new int[readsPerThread];\n          for (int i = 0; i < queries.length; ++i) {\n            queries[i] = random().nextInt(numDocs);\n          }\n        }\n\n        @Override\n        public void run() {\n          for (int q : queries) {\n            final Query query = new TermQuery(new Term(\"fld\", \"\" + q));\n            try {\n              final TopDocs topDocs = searcher.search(query, 1);\n              if (topDocs.totalHits != 1) {\n                throw new IllegalStateException(\"Expected 1 hit, got \" + topDocs.totalHits);\n              }\n              final StoredDocument sdoc = rd.document(topDocs.scoreDocs[0].doc);\n              if (sdoc == null || sdoc.get(\"fld\") == null) {\n                throw new IllegalStateException(\"Could not find document \" + q);\n              }\n              if (!Integer.toString(q).equals(sdoc.get(\"fld\"))) {\n                throw new IllegalStateException(\"Expected \" + q + \", but got \" + sdoc.get(\"fld\"));\n              }\n            } catch (Exception e) {\n              ex.compareAndSet(null, e);\n            }\n          }\n        }\n      });\n    }\n    for (Thread thread : readThreads) {\n      thread.start();\n    }\n    for (Thread thread : readThreads) {\n      thread.join();\n    }\n    rd.close();\n    if (ex.get() != null) {\n      throw ex.get();\n    }\n  }\n\n","sourceOld":"  public void testConcurrentReads() throws Exception {\n    // make sure the readers are properly cloned\n    final Document doc = new Document();\n    final Field field = new StringField(\"fld\", \"\", Store.YES);\n    doc.add(field);\n    final int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; ++i) {\n      field.setStringValue(\"\" + i);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    final int concurrentReads = atLeast(5);\n    final int readsPerThread = atLeast(50);\n    final List<Thread> readThreads = new ArrayList<Thread>();\n    final AtomicReference<Exception> ex = new AtomicReference<Exception>();\n    for (int i = 0; i < concurrentReads; ++i) {\n      readThreads.add(new Thread() {\n\n        int[] queries;\n\n        {\n          queries = new int[readsPerThread];\n          for (int i = 0; i < queries.length; ++i) {\n            queries[i] = random().nextInt(numDocs);\n          }\n        }\n\n        @Override\n        public void run() {\n          for (int q : queries) {\n            final Query query = new TermQuery(new Term(\"fld\", \"\" + q));\n            try {\n              final TopDocs topDocs = searcher.search(query, 1);\n              if (topDocs.totalHits != 1) {\n                throw new IllegalStateException(\"Expected 1 hit, got \" + topDocs.totalHits);\n              }\n              final StoredDocument sdoc = rd.document(topDocs.scoreDocs[0].doc);\n              if (sdoc == null || sdoc.get(\"fld\") == null) {\n                throw new IllegalStateException(\"Could not find document \" + q);\n              }\n              if (!Integer.toString(q).equals(sdoc.get(\"fld\"))) {\n                throw new IllegalStateException(\"Expected \" + q + \", but got \" + sdoc.get(\"fld\"));\n              }\n            } catch (Exception e) {\n              ex.compareAndSet(null, e);\n            }\n          }\n        }\n      });\n    }\n    for (Thread thread : readThreads) {\n      thread.start();\n    }\n    for (Thread thread : readThreads) {\n      thread.join();\n    }\n    rd.close();\n    if (ex.get() != null) {\n      throw ex.get();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["fb04ae9ea4b411d2adefa88bcd40141cfe9a711d","1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"fb04ae9ea4b411d2adefa88bcd40141cfe9a711d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["fb04ae9ea4b411d2adefa88bcd40141cfe9a711d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb04ae9ea4b411d2adefa88bcd40141cfe9a711d"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"fb04ae9ea4b411d2adefa88bcd40141cfe9a711d":["407687e67faf6e1f02a211ca078d8e3eed631027","1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}