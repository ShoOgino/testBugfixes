{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieTokenStream#LongTrieTokenStream(long,int).mjava","commits":[{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieTokenStream#LongTrieTokenStream(long,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Creates a token stream for indexing <code>value</code> with the given\r\n   * <code>precisionStep</code>. As instance creating is a major cost,\r\n   * consider using a {@link #LongTrieTokenStream(int)} instance once for\r\n   * indexing a large number of documents and assign a value with\r\n   * {@link #setValue} for each document.\r\n   * To index double values use the converter {@link TrieUtils#doubleToSortableLong}.\r\n   */\r\n  public LongTrieTokenStream(final long value, final int precisionStep) {\r\n    if (precisionStep<1 || precisionStep>64)\r\n      throw new IllegalArgumentException(\"precisionStep may only be 1..64\");\r\n    this.value = value;\r\n    this.precisionStep = precisionStep;\r\n    termAtt = (TermAttribute) addAttribute(TermAttribute.class);\r\n    typeAtt = (TypeAttribute) addAttribute(TypeAttribute.class);\r\n    posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\r\n    shiftAtt = (ShiftAttribute) addAttribute(ShiftAttribute.class);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc","date":1239886708,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieTokenStream#LongTrieTokenStream(long,int).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieTokenStream#LongTrieTokenStream(long,int).mjava","sourceNew":"  /**\n   * Creates a token stream for indexing <code>value</code> with the given\n   * <code>precisionStep</code>. As instance creating is a major cost,\n   * consider using a {@link #LongTrieTokenStream(int)} instance once for\n   * indexing a large number of documents and assign a value with\n   * {@link #setValue} for each document.\n   * To index double values use the converter {@link TrieUtils#doubleToSortableLong}.\n   */\n  public LongTrieTokenStream(final long value, final int precisionStep) {\n    if (precisionStep<1 || precisionStep>64)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..64\");\n    this.value = value;\n    this.precisionStep = precisionStep;\n    termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n    typeAtt = (TypeAttribute) addAttribute(TypeAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n    shiftAtt = (ShiftAttribute) addAttribute(ShiftAttribute.class);\n  }\n\n","sourceOld":"  /**\r\n   * Creates a token stream for indexing <code>value</code> with the given\r\n   * <code>precisionStep</code>. As instance creating is a major cost,\r\n   * consider using a {@link #LongTrieTokenStream(int)} instance once for\r\n   * indexing a large number of documents and assign a value with\r\n   * {@link #setValue} for each document.\r\n   * To index double values use the converter {@link TrieUtils#doubleToSortableLong}.\r\n   */\r\n  public LongTrieTokenStream(final long value, final int precisionStep) {\r\n    if (precisionStep<1 || precisionStep>64)\r\n      throw new IllegalArgumentException(\"precisionStep may only be 1..64\");\r\n    this.value = value;\r\n    this.precisionStep = precisionStep;\r\n    termAtt = (TermAttribute) addAttribute(TermAttribute.class);\r\n    typeAtt = (TypeAttribute) addAttribute(TypeAttribute.class);\r\n    posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\r\n    shiftAtt = (ShiftAttribute) addAttribute(ShiftAttribute.class);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7997e20249c312f7420d4e348cde0a36c22d9a8c","date":1245413812,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieTokenStream#LongTrieTokenStream(long,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a token stream for indexing <code>value</code> with the given\n   * <code>precisionStep</code>. As instance creating is a major cost,\n   * consider using a {@link #LongTrieTokenStream(int)} instance once for\n   * indexing a large number of documents and assign a value with\n   * {@link #setValue} for each document.\n   * To index double values use the converter {@link TrieUtils#doubleToSortableLong}.\n   */\n  public LongTrieTokenStream(final long value, final int precisionStep) {\n    if (precisionStep<1 || precisionStep>64)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..64\");\n    this.value = value;\n    this.precisionStep = precisionStep;\n    termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n    typeAtt = (TypeAttribute) addAttribute(TypeAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n    shiftAtt = (ShiftAttribute) addAttribute(ShiftAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"],"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7997e20249c312f7420d4e348cde0a36c22d9a8c"]},"commit2Childs":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["7997e20249c312f7420d4e348cde0a36c22d9a8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}