{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#doTestRandom(int).mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#doTestRandom(int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRandom(int count) throws Exception {\n    int numPolygons = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPolygons=\" + numPolygons);\n    }\n\n    Polygon[] polygons = new Polygon[numPolygons];\n    for (int id = 0; id < numPolygons; ++id) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        polygons[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a polygon that does not cross the dateline\n        polygons[id] = GeoTestUtil.nextPolygon();\n      }\n    }\n    verify(polygons);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#doTestRandom(int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRandom(int count) throws Exception {\n    int numPolygons = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPolygons=\" + numPolygons);\n    }\n\n    Polygon[] polygons = new Polygon[numPolygons];\n    for (int id = 0; id < numPolygons; ++id) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        polygons[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a polygon that does not cross the dateline\n        polygons[id] = GeoTestUtil.nextPolygon();\n      }\n    }\n    verify(polygons);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#doTestRandom(int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRandom(int count) throws Exception {\n    int numPolygons = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPolygons=\" + numPolygons);\n    }\n\n    Polygon[] polygons = new Polygon[numPolygons];\n    for (int id = 0; id < numPolygons; ++id) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        polygons[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a polygon that does not cross the dateline\n        polygons[id] = GeoTestUtil.nextPolygon();\n      }\n    }\n    verify(polygons);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980","date":1533125102,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#doTestRandom(int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#doTestRandom(int).mjava","sourceNew":"  private void doTestRandom(int count) throws Exception {\n    int numPolygons = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPolygons=\" + numPolygons);\n    }\n\n    Polygon[] polygons = new Polygon[numPolygons];\n    for (int id = 0; id < numPolygons; ++id) {\n      int x = randomInt(20);\n      if (x == 17) {\n        polygons[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a polygon that does not cross the dateline\n        polygons[id] = GeoTestUtil.nextPolygon();\n      }\n    }\n\n    verify(polygons);\n  }\n\n","sourceOld":"  private void doTestRandom(int count) throws Exception {\n    int numPolygons = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPolygons=\" + numPolygons);\n    }\n\n    Polygon[] polygons = new Polygon[numPolygons];\n    for (int id = 0; id < numPolygons; ++id) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        polygons[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a polygon that does not cross the dateline\n        polygons[id] = GeoTestUtil.nextPolygon();\n      }\n    }\n    verify(polygons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b39f95206bdb2c5b28ef7e848cacce7f2baefea","date":1533131097,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#doTestRandom(int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#doTestRandom(int).mjava","sourceNew":"  private void doTestRandom(int count) throws Exception {\n    int numPolygons = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPolygons=\" + numPolygons);\n    }\n\n    Polygon[] polygons = new Polygon[numPolygons];\n    for (int id = 0; id < numPolygons; ++id) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        polygons[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a polygon that does not cross the dateline\n        polygons[id] = GeoTestUtil.nextPolygon();\n      }\n    }\n    verify(polygons);\n  }\n\n","sourceOld":"  private void doTestRandom(int count) throws Exception {\n    int numPolygons = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPolygons=\" + numPolygons);\n    }\n\n    Polygon[] polygons = new Polygon[numPolygons];\n    for (int id = 0; id < numPolygons; ++id) {\n      int x = randomInt(20);\n      if (x == 17) {\n        polygons[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a polygon that does not cross the dateline\n        polygons[id] = GeoTestUtil.nextPolygon();\n      }\n    }\n\n    verify(polygons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4312aa12218419d320e0966c3f3e72deb359afaa","date":1533146016,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries#doTestRandom(int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#doTestRandom(int).mjava","sourceNew":"  private void doTestRandom(int count) throws Exception {\n    int numPolygons = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPolygons=\" + numPolygons);\n    }\n\n    Polygon[] polygons = new Polygon[numPolygons];\n    for (int id = 0; id < numPolygons; ++id) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        polygons[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a polygon that does not cross the dateline\n        polygons[id] = GeoTestUtil.nextPolygon();\n      }\n    }\n    verify(polygons);\n  }\n\n","sourceOld":"  private void doTestRandom(int count) throws Exception {\n    int numPolygons = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPolygons=\" + numPolygons);\n    }\n\n    Polygon[] polygons = new Polygon[numPolygons];\n    for (int id = 0; id < numPolygons; ++id) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        polygons[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a polygon that does not cross the dateline\n        polygons[id] = GeoTestUtil.nextPolygon();\n      }\n    }\n    verify(polygons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"1b39f95206bdb2c5b28ef7e848cacce7f2baefea":["60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980"],"4312aa12218419d320e0966c3f3e72deb359afaa":["1b39f95206bdb2c5b28ef7e848cacce7f2baefea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4312aa12218419d320e0966c3f3e72deb359afaa"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980":["1b39f95206bdb2c5b28ef7e848cacce7f2baefea"],"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"1b39f95206bdb2c5b28ef7e848cacce7f2baefea":["4312aa12218419d320e0966c3f3e72deb359afaa"],"4312aa12218419d320e0966c3f3e72deb359afaa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}