{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#getChildren().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#getChildren().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#getChildren().mjava","sourceNew":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    List<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n      children.add(new ChildScorer(sub.scorer, sub.prohibited ? Occur.MUST_NOT.toString() : Occur.SHOULD.toString()));\n    }\n    return children;\n  }\n\n","sourceOld":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    List<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n      children.add(new ChildScorer(sub.scorer, sub.prohibited ? Occur.MUST_NOT.toString() : Occur.SHOULD.toString()));\n    }\n    return children;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","date":1342645458,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#getChildren().mjava","sourceNew":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    List<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n      // TODO: fix this if BQ ever sends us required clauses\n      children.add(new ChildScorer(sub.scorer, sub.prohibited ? \"MUST_NOT\" : \"SHOULD\"));\n    }\n    return children;\n  }\n\n","sourceOld":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    List<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n      children.add(new ChildScorer(sub.scorer, sub.prohibited ? Occur.MUST_NOT.toString() : Occur.SHOULD.toString()));\n    }\n    return children;\n  }\n\n","bugFix":["89c5555e75149b469a7756e82bd740777cfb584a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#getChildren().mjava","sourceNew":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    List<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n      // TODO: fix this if BQ ever sends us required clauses\n      children.add(new ChildScorer(sub.scorer, sub.prohibited ? \"MUST_NOT\" : \"SHOULD\"));\n    }\n    return children;\n  }\n\n","sourceOld":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    List<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n      children.add(new ChildScorer(sub.scorer, sub.prohibited ? Occur.MUST_NOT.toString() : Occur.SHOULD.toString()));\n    }\n    return children;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#getChildren().mjava","sourceNew":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    List<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n      // TODO: fix this if BQ ever sends us required clauses\n      children.add(new ChildScorer(sub.scorer, sub.prohibited ? \"MUST_NOT\" : \"SHOULD\"));\n    }\n    return children;\n  }\n\n","sourceOld":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    List<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n      children.add(new ChildScorer(sub.scorer, sub.prohibited ? Occur.MUST_NOT.toString() : Occur.SHOULD.toString()));\n    }\n    return children;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"673e18065a6f75bb55d3b582e794788cceaf6120","date":1347663777,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#getChildren().mjava","sourceNew":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    throw new UnsupportedOperationException();\n  }\n\n","sourceOld":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    List<ChildScorer> children = new ArrayList<ChildScorer>();\n    for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n      // TODO: fix this if BQ ever sends us required clauses\n      children.add(new ChildScorer(sub.scorer, sub.prohibited ? \"MUST_NOT\" : \"SHOULD\"));\n    }\n    return children;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#getChildren().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    throw new UnsupportedOperationException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FakeScorer#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#getChildren().mjava","sourceNew":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    throw new UnsupportedOperationException();\n  }\n\n","sourceOld":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    throw new UnsupportedOperationException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":6,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/FakeScorer#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#getChildren().mjava","sourceNew":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    throw new UnsupportedOperationException();\n  }\n\n","sourceOld":"  @Override\n  public Collection<ChildScorer> getChildren() {\n    throw new UnsupportedOperationException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["673e18065a6f75bb55d3b582e794788cceaf6120"],"673e18065a6f75bb55d3b582e794788cceaf6120":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["673e18065a6f75bb55d3b582e794788cceaf6120","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acf00221f44c5f08ccea014f2492b53af15ecd66"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"673e18065a6f75bb55d3b582e794788cceaf6120":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["673e18065a6f75bb55d3b582e794788cceaf6120","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["aba371508186796cc6151d8223a5b4e16d02e26e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}