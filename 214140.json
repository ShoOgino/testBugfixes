{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPoint#GeoPoint(PlanetModel,double,double,double,double,double,double).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPoint#GeoPoint(PlanetModel,double,double,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPoint#GeoPoint(PlanetModel,double,double,double,double,double,double).mjava","sourceNew":"  /** Construct a GeoPoint from the trig functions of a lat and lon pair.\n   * @param planetModel is the planetModel to put the point on.\n   * @param sinLat is the sin of the latitude.\n   * @param sinLon is the sin of the longitude.\n   * @param cosLat is the cos of the latitude.\n   * @param cosLon is the cos of the longitude.\n   * @param lat is the latitude.\n   * @param lon is the longitude.\n   */\n  public GeoPoint(final PlanetModel planetModel, final double sinLat, final double sinLon, final double cosLat, final double cosLon, final double lat, final double lon) {\n    this(computeDesiredEllipsoidMagnitude(planetModel, cosLat * cosLon, cosLat * sinLon, sinLat),\n      cosLat * cosLon, cosLat * sinLon, sinLat, lat, lon);\n  }\n\n","sourceOld":"  /** Construct a GeoPoint from the trig functions of a lat and lon pair.\n   * @param planetModel is the planetModel to put the point on.\n   * @param sinLat is the sin of the latitude.\n   * @param sinLon is the sin of the longitude.\n   * @param cosLat is the cos of the latitude.\n   * @param cosLon is the cos of the longitude.\n   * @param lat is the latitude.\n   * @param lon is the longitude.\n   */\n  public GeoPoint(final PlanetModel planetModel, final double sinLat, final double sinLon, final double cosLat, final double cosLon, final double lat, final double lon) {\n    this(computeDesiredEllipsoidMagnitude(planetModel, cosLat * cosLon, cosLat * sinLon, sinLat),\n      cosLat * cosLon, cosLat * sinLon, sinLat, lat, lon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}