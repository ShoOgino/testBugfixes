{"path":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String).mjava","commits":[{"id":"255b1d03d3daae9aaaade60819388695622237d8","date":1506179019,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String).mjava","pathOld":"/dev/null","sourceNew":"  private void testRptWithGeometryField(String fieldName) throws Exception {\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName);\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates whether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8557552f7ab8e381c4d1a941a269e14f11e779d","date":1506320429,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String).mjava","pathOld":"/dev/null","sourceNew":"  private void testRptWithGeometryField(String fieldName) throws Exception {\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName);\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates whether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String).mjava","pathOld":"/dev/null","sourceNew":"  private void testRptWithGeometryField(String fieldName) throws Exception {\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName);\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates whether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String).mjava","sourceNew":"  private void testRptWithGeometryField(String fieldName) throws Exception {\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) ((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName)).getGauge();\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates whether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","sourceOld":"  private void testRptWithGeometryField(String fieldName) throws Exception {\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName);\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates whether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","bugFix":["255b1d03d3daae9aaaade60819388695622237d8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String).mjava","sourceNew":"  private void testRptWithGeometryField(String fieldName) throws Exception {\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) ((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName)).getGauge();\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates whether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","sourceOld":"  private void testRptWithGeometryField(String fieldName) throws Exception {\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName);\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates whether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2","date":1529965060,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String).mjava","sourceNew":"  private void testRptWithGeometryField(String fieldName) throws Exception {\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize(\"maxSegments\", \"1\"));// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) ((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName)).getGauge();\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates whether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","sourceOld":"  private void testRptWithGeometryField(String fieldName) throws Exception {\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) ((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName)).getGauge();\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates whether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","bugFix":["255b1d03d3daae9aaaade60819388695622237d8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String).mjava","sourceNew":"  private void testRptWithGeometryField(String fieldName) throws Exception {\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize(\"maxSegments\", \"1\"));// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) ((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName)).getGauge();\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates whether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","sourceOld":"  private void testRptWithGeometryField(String fieldName) throws Exception {\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) ((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName)).getGauge();\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates whether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String).mjava","sourceNew":"  private void testRptWithGeometryField(String fieldName) throws Exception {\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize(\"maxSegments\", \"1\"));// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) ((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName)).getGauge();\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates whether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","sourceOld":"  private void testRptWithGeometryField(String fieldName) throws Exception {\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize());// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) ((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName)).getGauge();\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates whether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a2ab9c07b4811bae96e992c901398ae4d50bc9e","date":1557972913,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial2#testRptWithGeometryField(String).mjava","sourceNew":null,"sourceOld":"  private void testRptWithGeometryField(String fieldName) throws Exception {\n    assertU(adoc(\"id\", \"0\", fieldName, \"ENVELOPE(-10, 20, 15, 10)\"));\n    assertU(adoc(\"id\", \"1\", fieldName, \"BUFFER(POINT(-10 15), 5)\"));//circle at top-left corner\n    assertU(optimize(\"maxSegments\", \"1\"));// one segment.\n    assertU(commit());\n\n    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to\n    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.\n    final SolrQueryRequest sameReq = req(\n        \"q\", \"{!cache=false field f=\" + fieldName + \"}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))\",\n        \"sort\", \"id asc\");\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // The tricky thing is verifying the cache works correctly...\n\n    MetricsMap cacheMetrics = (MetricsMap) ((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get(\"CACHE.searcher.perSegSpatialFieldCache_\" + fieldName)).getGauge();\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_inserts\").toString());\n    assertEquals(\"0\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    // Repeat the query earlier\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n    assertEquals(\"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n    assertEquals(\"1 segment\",\n        1, getSearcher().getRawReader().leaves().size());\n    // Get key of first leaf reader -- this one contains the match for sure.\n    Object leafKey1 = getFirstLeafReaderKey();\n\n    // add new segment\n    assertU(adoc(\"id\", \"3\"));\n\n    assertU(commit()); // sometimes merges (to one seg), sometimes won't\n\n    // can still find the same document\n    assertJQ(sameReq, \"/response/numFound==1\", \"/response/docs/[0]/id=='1'\");\n\n    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.\n    // Checking equality for the first reader's cache key indicates whether the cache should still be valid.\n    Object leafKey2 = getFirstLeafReaderKey();\n    assertEquals(leafKey1.equals(leafKey2) ? \"2\" : \"1\", cacheMetrics.getValue().get(\"cumulative_hits\").toString());\n\n\n    // Now try to see if heatmaps work:\n    assertJQ(req(\"q\", \"*:*\", \"facet\", \"true\", FacetParams.FACET_HEATMAP, fieldName, \"json.nl\", \"map\"),\n        \"/facet_counts/facet_heatmaps/\" + fieldName + \"/minX==-180.0\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"255b1d03d3daae9aaaade60819388695622237d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["43564cbb30b064675027cfb569564e8531096e97","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"bfc52860e6d13d034226a760813c59d984c6817a":["b8557552f7ab8e381c4d1a941a269e14f11e779d"],"7a2ab9c07b4811bae96e992c901398ae4d50bc9e":["fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"],"b8557552f7ab8e381c4d1a941a269e14f11e779d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","255b1d03d3daae9aaaade60819388695622237d8"],"43564cbb30b064675027cfb569564e8531096e97":["b8557552f7ab8e381c4d1a941a269e14f11e779d","bfc52860e6d13d034226a760813c59d984c6817a"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b8557552f7ab8e381c4d1a941a269e14f11e779d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2":["43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a2ab9c07b4811bae96e992c901398ae4d50bc9e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["43564cbb30b064675027cfb569564e8531096e97","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2"]},"commit2Childs":{"255b1d03d3daae9aaaade60819388695622237d8":["b8557552f7ab8e381c4d1a941a269e14f11e779d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fc1a22371a19bbb2a92556c4051ca0aaa823a8c2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b8557552f7ab8e381c4d1a941a269e14f11e779d":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97","6240b74b884c5587f2a4062dd27d6c32bf228889"],"7a2ab9c07b4811bae96e992c901398ae4d50bc9e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["255b1d03d3daae9aaaade60819388695622237d8","b8557552f7ab8e381c4d1a941a269e14f11e779d","6240b74b884c5587f2a4062dd27d6c32bf228889"],"fc1a22371a19bbb2a92556c4051ca0aaa823a8c2":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7a2ab9c07b4811bae96e992c901398ae4d50bc9e","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}