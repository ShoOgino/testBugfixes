{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointStats(String,String,String[],double,double,int,int,double).mjava","commits":[{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointStats(String,String,String[],double,double,int,int,double).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointStats(String,String,String[],double,double,int,int,double).mjava","sourceNew":"  private void doTestPointStats(String field, String dvField, String[] numbers, double min, double max, int count, int missing, double delta) {\n    String minMin = String.valueOf(min - Math.abs(delta*min));\n    String maxMin = String.valueOf(min + Math.abs(delta*min));\n    String minMax = String.valueOf(max - Math.abs(delta*max));\n    String maxMax = String.valueOf(max + Math.abs(delta*max));\n    for (int i = 0; i < numbers.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, numbers[i], field, numbers[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(numbers.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField), \n        \"//*[@numFound='\" + (numbers.length + 1) + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.>=\" + minMin + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.<=\" + maxMin+ \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.>=\" + minMax + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.<=\" + maxMax + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + count + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='\" + missing + \"']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't calculate stats on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointStats(String field, String dvField, String[] numbers, double min, double max, int count, int missing, double delta) {\n    String minMin = String.valueOf(min - Math.abs(delta*min));\n    String maxMin = String.valueOf(min + Math.abs(delta*min));\n    String minMax = String.valueOf(max - Math.abs(delta*max));\n    String maxMax = String.valueOf(max + Math.abs(delta*max));\n    for (int i = 0; i < numbers.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, numbers[i], field, numbers[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(numbers.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField), \n        \"//*[@numFound='\" + (numbers.length + 1) + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.>=\" + minMin + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.<=\" + maxMin+ \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.>=\" + minMax + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.<=\" + maxMax + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + count + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='\" + missing + \"']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't calculate stats on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":1,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointStats(String,String,String[],double,double,int,int,double).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointStats(String,String,String[],double,double,int,int,double).mjava","sourceNew":"  private void doTestPointStats(String field, String dvField, String[] numbers, double min, double max, int count, int missing, double delta) {\n    String minMin = String.valueOf(min - Math.abs(delta*min));\n    String maxMin = String.valueOf(min + Math.abs(delta*min));\n    String minMax = String.valueOf(max - Math.abs(delta*max));\n    String maxMax = String.valueOf(max + Math.abs(delta*max));\n    for (int i = 0; i < numbers.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, numbers[i], field, numbers[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(numbers.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField), \n        \"//*[@numFound='\" + (numbers.length + 1) + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.>=\" + minMin + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.<=\" + maxMin+ \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.>=\" + minMax + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.<=\" + maxMax + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + count + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='\" + missing + \"']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't calculate stats on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointStats(String field, String dvField, String[] numbers, double min, double max, int count, int missing, double delta) {\n    String minMin = String.valueOf(min - Math.abs(delta*min));\n    String maxMin = String.valueOf(min + Math.abs(delta*min));\n    String minMax = String.valueOf(max - Math.abs(delta*max));\n    String maxMax = String.valueOf(max + Math.abs(delta*max));\n    for (int i = 0; i < numbers.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, numbers[i], field, numbers[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(numbers.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField), \n        \"//*[@numFound='\" + (numbers.length + 1) + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.>=\" + minMin + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='min'][.<=\" + maxMin+ \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.>=\" + minMax + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/double[@name='max'][.<=\" + maxMax + \"]\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + count + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='\" + missing + \"']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't calculate stats on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"]},"commit2Childs":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aaf90fc29510e72665ac7934f34c3d1c25efad64","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}