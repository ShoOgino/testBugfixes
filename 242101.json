{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","commits":[{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n    // execute the test only if we are able to set file to read only mode\n    if ((f.exists() || f.createNewFile()) && f.setReadOnly()) {\n      try {\n        List parentRow = new ArrayList();\n        parentRow.add(createMap(\"id\", \"1\"));\n        MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n\n        List childRow = new ArrayList();\n        childRow.add(createMap(\"desc\", \"hello\"));\n        MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n            .iterator());\n\n        runFullImport(dataConfig_delta);\n        assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n      } finally {\n        f.setWritable(true);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7edfc3f7caa7b49a18fe367692768b33b018e9db","date":1308374217,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n    // execute the test only if we are able to set file to read only mode\n    if ((f.exists() || f.createNewFile()) && f.setReadOnly()) {\n      try {\n        List parentRow = new ArrayList();\n        parentRow.add(createMap(\"id\", \"1\"));\n        MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n\n        List childRow = new ArrayList();\n        childRow.add(createMap(\"desc\", \"hello\"));\n        MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n            .iterator());\n\n        runFullImport(dataConfig_delta);\n        assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n      } finally {\n        f.delete();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n    // execute the test only if we are able to set file to read only mode\n    if ((f.exists() || f.createNewFile()) && f.setReadOnly()) {\n      try {\n        List parentRow = new ArrayList();\n        parentRow.add(createMap(\"id\", \"1\"));\n        MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n\n        List childRow = new ArrayList();\n        childRow.add(createMap(\"desc\", \"hello\"));\n        MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n            .iterator());\n\n        runFullImport(dataConfig_delta);\n        assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n      } finally {\n        f.setWritable(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n    // execute the test only if we are able to set file to read only mode\n    if ((f.exists() || f.createNewFile()) && f.setReadOnly()) {\n      try {\n        List parentRow = new ArrayList();\n        parentRow.add(createMap(\"id\", \"1\"));\n        MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n\n        List childRow = new ArrayList();\n        childRow.add(createMap(\"desc\", \"hello\"));\n        MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n            .iterator());\n\n        runFullImport(dataConfig_delta);\n        assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n      } finally {\n        f.delete();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n    // execute the test only if we are able to set file to read only mode\n    if ((f.exists() || f.createNewFile()) && f.setReadOnly()) {\n      try {\n        List parentRow = new ArrayList();\n        parentRow.add(createMap(\"id\", \"1\"));\n        MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n\n        List childRow = new ArrayList();\n        childRow.add(createMap(\"desc\", \"hello\"));\n        MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n            .iterator());\n\n        runFullImport(dataConfig_delta);\n        assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n      } finally {\n        f.delete();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9f747c87024425da9f2e93a8329d664f8df1615","date":1314914781,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n\n    try {\n      // execute the test only if we are able to set file to read only mode\n      assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n      assumeTrue(\"dataimport.proprties can't be set read only\", f.setReadOnly());\n\n      List parentRow = new ArrayList();\n      parentRow.add(createMap(\"id\", \"1\"));\n      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n      List childRow = new ArrayList();\n      childRow.add(createMap(\"desc\", \"hello\"));\n      MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n      runFullImport(dataConfig_delta);\n      assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    } finally {\n      f.delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n    // execute the test only if we are able to set file to read only mode\n    if ((f.exists() || f.createNewFile()) && f.setReadOnly()) {\n      try {\n        List parentRow = new ArrayList();\n        parentRow.add(createMap(\"id\", \"1\"));\n        MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n\n        List childRow = new ArrayList();\n        childRow.add(createMap(\"desc\", \"hello\"));\n        MockDataSource.setIterator(\"select * from y where y.A='1'\", childRow\n            .iterator());\n\n        runFullImport(dataConfig_delta);\n        assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n      } finally {\n        f.delete();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82a1599a276201e39cb935f08f5bd759c7677f82","date":1317060325,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n\n    try {\n      // execute the test only if we are able to set file to read only mode\n      assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n      assumeTrue(\"dataimport.proprties can't be set read only\", f.setReadOnly());\n      assumeFalse(\"dataimport.proprties is still writable even though \" + \n                  \"marked readonly - test running as superuser?\", f.canWrite());\n\n      ignoreException(\"Properties is not writable\");\n\n      List parentRow = new ArrayList();\n      parentRow.add(createMap(\"id\", \"1\"));\n      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n      List childRow = new ArrayList();\n      childRow.add(createMap(\"desc\", \"hello\"));\n      MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n      runFullImport(dataConfig_delta);\n      assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    } finally {\n      f.delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n\n    try {\n      // execute the test only if we are able to set file to read only mode\n      assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n      assumeTrue(\"dataimport.proprties can't be set read only\", f.setReadOnly());\n\n      List parentRow = new ArrayList();\n      parentRow.add(createMap(\"id\", \"1\"));\n      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n      List childRow = new ArrayList();\n      childRow.add(createMap(\"desc\", \"hello\"));\n      MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n      runFullImport(dataConfig_delta);\n      assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    } finally {\n      f.delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"baf341ad3a1a8fb73fb37091af85f8aef0398367","date":1352222680,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#testNonWritablePersistFile().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n\n    try {\n      // execute the test only if we are able to set file to read only mode\n      assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n      assumeTrue(\"dataimport.proprties can't be set read only\", f.setReadOnly());\n      assumeFalse(\"dataimport.proprties is still writable even though \" + \n                  \"marked readonly - test running as superuser?\", f.canWrite());\n\n      ignoreException(\"Properties is not writable\");\n\n      @SuppressWarnings(\"rawtypes\")\n      List parentRow = new ArrayList();\n      parentRow.add(createMap(\"id\", \"1\"));\n      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n      @SuppressWarnings(\"rawtypes\")\n      List childRow = new ArrayList();\n      childRow.add(createMap(\"desc\", \"hello\"));\n      MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n      runFullImport(dataConfig_delta);\n      assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    } finally {\n      f.delete();\n    }\n  }  \n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n\n    try {\n      // execute the test only if we are able to set file to read only mode\n      assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n      assumeTrue(\"dataimport.proprties can't be set read only\", f.setReadOnly());\n      assumeFalse(\"dataimport.proprties is still writable even though \" + \n                  \"marked readonly - test running as superuser?\", f.canWrite());\n\n      ignoreException(\"Properties is not writable\");\n\n      List parentRow = new ArrayList();\n      parentRow.add(createMap(\"id\", \"1\"));\n      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n      List childRow = new ArrayList();\n      childRow.add(createMap(\"desc\", \"hello\"));\n      MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n      runFullImport(dataConfig_delta);\n      assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    } finally {\n      f.delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9f747c87024425da9f2e93a8329d664f8df1615":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7edfc3f7caa7b49a18fe367692768b33b018e9db"],"82a1599a276201e39cb935f08f5bd759c7677f82":["b9f747c87024425da9f2e93a8329d664f8df1615"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["82a1599a276201e39cb935f08f5bd759c7677f82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["baf341ad3a1a8fb73fb37091af85f8aef0398367"]},"commit2Childs":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["7edfc3f7caa7b49a18fe367692768b33b018e9db"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":["c26f00b574427b55127e869b935845554afde1fa"],"b9f747c87024425da9f2e93a8329d664f8df1615":["82a1599a276201e39cb935f08f5bd759c7677f82"],"c26f00b574427b55127e869b935845554afde1fa":["b9f747c87024425da9f2e93a8329d664f8df1615"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","7edfc3f7caa7b49a18fe367692768b33b018e9db","c26f00b574427b55127e869b935845554afde1fa"],"82a1599a276201e39cb935f08f5bd759c7677f82":["baf341ad3a1a8fb73fb37091af85f8aef0398367"],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}