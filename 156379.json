{"path":"backwards/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput,byte[]).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput,byte[]).mjava","pathOld":"/dev/null","sourceNew":"    /** Copy the contents of the file with specified extension into the\n     *  provided output stream. Use the provided buffer for moving data\n     *  to reduce memory allocation.\n     */\n    private void copyFile(FileEntry source, IndexOutput os, byte buffer[])\n    throws IOException\n    {\n        IndexInput is = null;\n        try {\n            long startPtr = os.getFilePointer();\n\n            is = directory.openInput(source.file);\n            long length = is.length();\n            long remainder = length;\n            int chunk = buffer.length;\n\n            while(remainder > 0) {\n                int len = (int) Math.min(chunk, remainder);\n                is.readBytes(buffer, 0, len, false);\n                os.writeBytes(buffer, len);\n                remainder -= len;\n                if (checkAbort != null)\n                  // Roughly every 2 MB we will check if\n                  // it's time to abort\n                  checkAbort.work(80);\n            }\n\n            // Verify that remainder is 0\n            if (remainder != 0)\n                throw new IOException(\n                    \"Non-zero remainder length after copying: \" + remainder\n                    + \" (id: \" + source.file + \", length: \" + length\n                    + \", buffer size: \" + chunk + \")\");\n\n            // Verify that the output length diff is equal to original file\n            long endPtr = os.getFilePointer();\n            long diff = endPtr - startPtr;\n            if (diff != length)\n                throw new IOException(\n                    \"Difference in the output file offsets \" + diff\n                    + \" does not match the original file length \" + length);\n\n        } finally {\n            if (is != null) is.close();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput,byte[]).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/CompoundFileWriter#copyFile(FileEntry,IndexOutput,byte[]).mjava","sourceNew":"    /** Copy the contents of the file with specified extension into the\n     *  provided output stream. Use the provided buffer for moving data\n     *  to reduce memory allocation.\n     */\n    private void copyFile(FileEntry source, IndexOutput os, byte buffer[])\n    throws IOException\n    {\n        IndexInput is = null;\n        try {\n            long startPtr = os.getFilePointer();\n\n            is = directory.openInput(source.file);\n            long length = is.length();\n            long remainder = length;\n            int chunk = buffer.length;\n\n            while(remainder > 0) {\n                int len = (int) Math.min(chunk, remainder);\n                is.readBytes(buffer, 0, len, false);\n                os.writeBytes(buffer, len);\n                remainder -= len;\n                if (checkAbort != null)\n                  // Roughly every 2 MB we will check if\n                  // it's time to abort\n                  checkAbort.work(80);\n            }\n\n            // Verify that remainder is 0\n            if (remainder != 0)\n                throw new IOException(\n                    \"Non-zero remainder length after copying: \" + remainder\n                    + \" (id: \" + source.file + \", length: \" + length\n                    + \", buffer size: \" + chunk + \")\");\n\n            // Verify that the output length diff is equal to original file\n            long endPtr = os.getFilePointer();\n            long diff = endPtr - startPtr;\n            if (diff != length)\n                throw new IOException(\n                    \"Difference in the output file offsets \" + diff\n                    + \" does not match the original file length \" + length);\n\n        } finally {\n            if (is != null) is.close();\n        }\n    }\n\n","sourceOld":"    /** Copy the contents of the file with specified extension into the\n     *  provided output stream. Use the provided buffer for moving data\n     *  to reduce memory allocation.\n     */\n    private void copyFile(FileEntry source, IndexOutput os, byte buffer[])\n    throws IOException\n    {\n        IndexInput is = null;\n        try {\n            long startPtr = os.getFilePointer();\n\n            is = directory.openInput(source.file);\n            long length = is.length();\n            long remainder = length;\n            int chunk = buffer.length;\n\n            while(remainder > 0) {\n                int len = (int) Math.min(chunk, remainder);\n                is.readBytes(buffer, 0, len, false);\n                os.writeBytes(buffer, len);\n                remainder -= len;\n                if (checkAbort != null)\n                  // Roughly every 2 MB we will check if\n                  // it's time to abort\n                  checkAbort.work(80);\n            }\n\n            // Verify that remainder is 0\n            if (remainder != 0)\n                throw new IOException(\n                    \"Non-zero remainder length after copying: \" + remainder\n                    + \" (id: \" + source.file + \", length: \" + length\n                    + \", buffer size: \" + chunk + \")\");\n\n            // Verify that the output length diff is equal to original file\n            long endPtr = os.getFilePointer();\n            long diff = endPtr - startPtr;\n            if (diff != length)\n                throw new IOException(\n                    \"Difference in the output file offsets \" + diff\n                    + \" does not match the original file length \" + length);\n\n        } finally {\n            if (is != null) is.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}