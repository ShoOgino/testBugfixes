{"path":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#checkAbsentFromIndex(String,String,boolean,String[]).mjava","commits":[{"id":"118ba480e87dfe453a6b47a320429be33f1d1653","date":1440320558,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#checkAbsentFromIndex(String,String,boolean,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkAbsentFromIndex(String fromColl, String toColl, boolean isScoresTest, String[] scoreModes) throws SolrServerException, IOException {\n    final String wrongName = fromColl + \"WrongName\";\n    final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest, scoreModes))\n        + \"from=join_s fromIndex=\" + wrongName + \" to=join_s}match_s:c\";\n    final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    try {\n      cloudClient.request(qr);\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n      assertTrue(ex.getMessage().contains(wrongName));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24020c4069004ed08938cdad96858b56f698f6a1","date":1442578977,"type":5,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#checkAbsentFromIndex(String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#checkAbsentFromIndex(String,String,boolean,String[]).mjava","sourceNew":"  private void checkAbsentFromIndex(String fromColl, String toColl, boolean isScoresTest) throws SolrServerException, IOException {\n    final String wrongName = fromColl + \"WrongName\";\n    final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n        + \"from=join_s fromIndex=\" + wrongName + \" to=join_s}match_s:c\";\n    final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    try {\n      cloudClient.request(qr);\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n      assertTrue(ex.getMessage().contains(wrongName));\n    }\n  }\n\n","sourceOld":"  private void checkAbsentFromIndex(String fromColl, String toColl, boolean isScoresTest, String[] scoreModes) throws SolrServerException, IOException {\n    final String wrongName = fromColl + \"WrongName\";\n    final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest, scoreModes))\n        + \"from=join_s fromIndex=\" + wrongName + \" to=join_s}match_s:c\";\n    final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    try {\n      cloudClient.request(qr);\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n      assertTrue(ex.getMessage().contains(wrongName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"118ba480e87dfe453a6b47a320429be33f1d1653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"24020c4069004ed08938cdad96858b56f698f6a1":["118ba480e87dfe453a6b47a320429be33f1d1653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24020c4069004ed08938cdad96858b56f698f6a1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["118ba480e87dfe453a6b47a320429be33f1d1653"],"118ba480e87dfe453a6b47a320429be33f1d1653":["24020c4069004ed08938cdad96858b56f698f6a1"],"24020c4069004ed08938cdad96858b56f698f6a1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}