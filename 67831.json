{"path":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testOperatorsWithLiteralColons().mjava","commits":[{"id":"08cff58bd13a83c87cda0cc4ddae2aec9c35964f","date":1332890691,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testOperatorsWithLiteralColons().mjava","pathOld":"/dev/null","sourceNew":"  public void testOperatorsWithLiteralColons() {\n    assertU(adoc(\"id\", \"142\", \"a_s\", \"bogus:xxx\", \"text_s\", \"yak\"));\n    assertU(adoc(\"id\", \"143\", \"a_s\", \"bogus:xxx\"));\n    assertU(adoc(\"id\", \"144\", \"text_s\", \"yak\"));\n    assertU(adoc(\"id\", \"145\", \"a_s\", \"a_s:xxx\", \"text_s\", \"yak\"));\n    assertU(adoc(\"id\", \"146\", \"a_s\", \"a_s:xxx\"));\n    assertU(adoc(\"id\", \"147\", \"a_s\", \"AND\", \"a_s\", \"NOT\"));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"bogus:xxx AND text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='id'][.='142']\");\n    \n    assertQ(req(\"q\", \"a_s:xxx AND text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"uf\", \"text_s\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='id'][.='145']\");\n\n    assertQ(req(\"q\", \"NOT bogus:xxx +text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"debugQuery\", \"true\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='144']\",\n            \"//str[@name='id'][.='145']\");\n    \n    assertQ(req(\"q\", \"NOT a_s:xxx +text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"uf\", \"text_s\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='142']\",\n            \"//str[@name='id'][.='144']\");\n    \n    assertQ(req(\"q\", \"+bogus:xxx yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s text_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='142']\",\n            \"//str[@name='id'][.='143']\");\n\n    assertQ(req(\"q\", \"+a_s:xxx yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s text_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"uf\", \"b_s\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='145']\",\n            \"//str[@name='id'][.='146']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testOperatorsWithLiteralColons().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testOperatorsWithLiteralColons().mjava","sourceNew":"  public void testOperatorsWithLiteralColons() {\n    assertU(adoc(\"id\", \"142\", \"a_s\", \"bogus:xxx\", \"text_s\", \"yak\"));\n    assertU(adoc(\"id\", \"143\", \"a_s\", \"bogus:xxx\"));\n    assertU(adoc(\"id\", \"144\", \"text_s\", \"yak\"));\n    assertU(adoc(\"id\", \"145\", \"a_s\", \"a_s:xxx\", \"text_s\", \"yak\"));\n    assertU(adoc(\"id\", \"146\", \"a_s\", \"a_s:xxx\"));\n    assertU(adoc(\"id\", \"147\", \"a_s\", \"AND\", \"a_s\", \"NOT\"));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"bogus:xxx AND text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='id'][.='142']\");\n    \n    assertQ(req(\"q\", \"a_s:xxx AND text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"uf\", \"text_s\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='id'][.='145']\");\n\n    assertQ(req(\"q\", \"NOT bogus:xxx +text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"debugQuery\", \"true\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='144']\",\n            \"//str[@name='id'][.='145']\");\n    \n    assertQ(req(\"q\", \"NOT a_s:xxx +text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"uf\", \"text_s\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='142']\",\n            \"//str[@name='id'][.='144']\");\n    \n    assertQ(req(\"q\", \"+bogus:xxx yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s text_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='142']\",\n            \"//str[@name='id'][.='143']\");\n\n    assertQ(req(\"q\", \"+a_s:xxx yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s text_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"uf\", \"b_s\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='145']\",\n            \"//str[@name='id'][.='146']\");\n  }\n\n","sourceOld":"  public void testOperatorsWithLiteralColons() {\n    assertU(adoc(\"id\", \"142\", \"a_s\", \"bogus:xxx\", \"text_s\", \"yak\"));\n    assertU(adoc(\"id\", \"143\", \"a_s\", \"bogus:xxx\"));\n    assertU(adoc(\"id\", \"144\", \"text_s\", \"yak\"));\n    assertU(adoc(\"id\", \"145\", \"a_s\", \"a_s:xxx\", \"text_s\", \"yak\"));\n    assertU(adoc(\"id\", \"146\", \"a_s\", \"a_s:xxx\"));\n    assertU(adoc(\"id\", \"147\", \"a_s\", \"AND\", \"a_s\", \"NOT\"));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"bogus:xxx AND text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='id'][.='142']\");\n    \n    assertQ(req(\"q\", \"a_s:xxx AND text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"uf\", \"text_s\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='id'][.='145']\");\n\n    assertQ(req(\"q\", \"NOT bogus:xxx +text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"debugQuery\", \"true\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='144']\",\n            \"//str[@name='id'][.='145']\");\n    \n    assertQ(req(\"q\", \"NOT a_s:xxx +text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"uf\", \"text_s\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='142']\",\n            \"//str[@name='id'][.='144']\");\n    \n    assertQ(req(\"q\", \"+bogus:xxx yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s text_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='142']\",\n            \"//str[@name='id'][.='143']\");\n\n    assertQ(req(\"q\", \"+a_s:xxx yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s text_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"uf\", \"b_s\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='145']\",\n            \"//str[@name='id'][.='146']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testOperatorsWithLiteralColons().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testOperatorsWithLiteralColons().mjava","sourceNew":"  public void testOperatorsWithLiteralColons() {\n    assertU(adoc(\"id\", \"142\", \"a_s\", \"bogus:xxx\", \"text_s\", \"yak\"));\n    assertU(adoc(\"id\", \"143\", \"a_s\", \"bogus:xxx\"));\n    assertU(adoc(\"id\", \"144\", \"text_s\", \"yak\"));\n    assertU(adoc(\"id\", \"145\", \"a_s\", \"a_s:xxx\", \"text_s\", \"yak\"));\n    assertU(adoc(\"id\", \"146\", \"a_s\", \"a_s:xxx\"));\n    assertU(adoc(\"id\", \"147\", \"a_s\", \"AND\", \"a_s\", \"NOT\"));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"bogus:xxx AND text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='id'][.='142']\");\n    \n    assertQ(req(\"q\", \"a_s:xxx AND text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"uf\", \"text_s\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='id'][.='145']\");\n\n    assertQ(req(\"q\", \"NOT bogus:xxx +text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"debugQuery\", \"true\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='144']\",\n            \"//str[@name='id'][.='145']\");\n    \n    assertQ(req(\"q\", \"NOT a_s:xxx +text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"uf\", \"text_s\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='142']\",\n            \"//str[@name='id'][.='144']\");\n    \n    assertQ(req(\"q\", \"+bogus:xxx yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s text_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='142']\",\n            \"//str[@name='id'][.='143']\");\n\n    assertQ(req(\"q\", \"+a_s:xxx yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s text_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"uf\", \"b_s\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='145']\",\n            \"//str[@name='id'][.='146']\");\n  }\n\n","sourceOld":"  public void testOperatorsWithLiteralColons() {\n    assertU(adoc(\"id\", \"142\", \"a_s\", \"bogus:xxx\", \"text_s\", \"yak\"));\n    assertU(adoc(\"id\", \"143\", \"a_s\", \"bogus:xxx\"));\n    assertU(adoc(\"id\", \"144\", \"text_s\", \"yak\"));\n    assertU(adoc(\"id\", \"145\", \"a_s\", \"a_s:xxx\", \"text_s\", \"yak\"));\n    assertU(adoc(\"id\", \"146\", \"a_s\", \"a_s:xxx\"));\n    assertU(adoc(\"id\", \"147\", \"a_s\", \"AND\", \"a_s\", \"NOT\"));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"bogus:xxx AND text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='id'][.='142']\");\n    \n    assertQ(req(\"q\", \"a_s:xxx AND text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"uf\", \"text_s\"),\n            \"//*[@numFound='1']\",\n            \"//str[@name='id'][.='145']\");\n\n    assertQ(req(\"q\", \"NOT bogus:xxx +text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"debugQuery\", \"true\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='144']\",\n            \"//str[@name='id'][.='145']\");\n    \n    assertQ(req(\"q\", \"NOT a_s:xxx +text_s:yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"uf\", \"text_s\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='142']\",\n            \"//str[@name='id'][.='144']\");\n    \n    assertQ(req(\"q\", \"+bogus:xxx yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s text_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='142']\",\n            \"//str[@name='id'][.='143']\");\n\n    assertQ(req(\"q\", \"+a_s:xxx yak\",\n                \"fl\", \"id\",\n                \"qf\", \"a_s b_s text_s\",\n                \"defType\", \"edismax\",\n                \"mm\", \"0\",\n                \"uf\", \"b_s\"),\n            \"//*[@numFound='2']\",\n            \"//str[@name='id'][.='145']\",\n            \"//str[@name='id'][.='146']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["08cff58bd13a83c87cda0cc4ddae2aec9c35964f","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["08cff58bd13a83c87cda0cc4ddae2aec9c35964f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"08cff58bd13a83c87cda0cc4ddae2aec9c35964f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08cff58bd13a83c87cda0cc4ddae2aec9c35964f"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08cff58bd13a83c87cda0cc4ddae2aec9c35964f":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}