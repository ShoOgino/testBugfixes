{"path":"lucene/src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","pathOld":"src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","sourceNew":"  /**\n   * The default implementation of this method accesses all declared\n   * fields of this object and prints the values in the following syntax:\n   * \n   * <pre>\n   *   public String toString() {\n   *     return \"start=\" + startOffset + \",end=\" + endOffset;\n   *   }\n   * </pre>\n   * \n   * This method may be overridden by subclasses.\n   */\n  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    Class<?> clazz = this.getClass();\n    Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        Object value = f.get(this);\n        if (buffer.length()>0) {\n          buffer.append(',');\n        }\n        if (value == null) {\n          buffer.append(f.getName() + \"=null\");\n        } else {\n          buffer.append(f.getName() + \"=\" + value);\n        }\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n    \n    return buffer.toString();\n  }\n\n","sourceOld":"  /**\n   * The default implementation of this method accesses all declared\n   * fields of this object and prints the values in the following syntax:\n   * \n   * <pre>\n   *   public String toString() {\n   *     return \"start=\" + startOffset + \",end=\" + endOffset;\n   *   }\n   * </pre>\n   * \n   * This method may be overridden by subclasses.\n   */\n  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    Class<?> clazz = this.getClass();\n    Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        Object value = f.get(this);\n        if (buffer.length()>0) {\n          buffer.append(',');\n        }\n        if (value == null) {\n          buffer.append(f.getName() + \"=null\");\n        } else {\n          buffer.append(f.getName() + \"=\" + value);\n        }\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n    \n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec58fb7921964848d01bea54f8ec4a2ac813eaeb","date":1295476876,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","sourceNew":null,"sourceOld":"  /**\n   * The default implementation of this method accesses all declared\n   * fields of this object and prints the values in the following syntax:\n   * \n   * <pre>\n   *   public String toString() {\n   *     return \"start=\" + startOffset + \",end=\" + endOffset;\n   *   }\n   * </pre>\n   * \n   * This method may be overridden by subclasses.\n   */\n  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    Class<?> clazz = this.getClass();\n    Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        Object value = f.get(this);\n        if (buffer.length()>0) {\n          buffer.append(',');\n        }\n        if (value == null) {\n          buffer.append(f.getName() + \"=null\");\n        } else {\n          buffer.append(f.getName() + \"=\" + value);\n        }\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n    \n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","sourceNew":null,"sourceOld":"  /**\n   * The default implementation of this method accesses all declared\n   * fields of this object and prints the values in the following syntax:\n   * \n   * <pre>\n   *   public String toString() {\n   *     return \"start=\" + startOffset + \",end=\" + endOffset;\n   *   }\n   * </pre>\n   * \n   * This method may be overridden by subclasses.\n   */\n  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    Class<?> clazz = this.getClass();\n    Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        Object value = f.get(this);\n        if (buffer.length()>0) {\n          buffer.append(',');\n        }\n        if (value == null) {\n          buffer.append(f.getName() + \"=null\");\n        } else {\n          buffer.append(f.getName() + \"=\" + value);\n        }\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n    \n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeImpl#toString().mjava","sourceNew":null,"sourceOld":"  /**\n   * The default implementation of this method accesses all declared\n   * fields of this object and prints the values in the following syntax:\n   * \n   * <pre>\n   *   public String toString() {\n   *     return \"start=\" + startOffset + \",end=\" + endOffset;\n   *   }\n   * </pre>\n   * \n   * This method may be overridden by subclasses.\n   */\n  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder();\n    Class<?> clazz = this.getClass();\n    Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        Object value = f.get(this);\n        if (buffer.length()>0) {\n          buffer.append(',');\n        }\n        if (value == null) {\n          buffer.append(f.getName() + \"=null\");\n        } else {\n          buffer.append(f.getName() + \"=\" + value);\n        }\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n    \n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["9454a6510e2db155fb01faa5c049b06ece95fab9","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["29ef99d61cda9641b6250bf9567329a6e65f901d","ec58fb7921964848d01bea54f8ec4a2ac813eaeb","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}