{"path":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build().mjava","commits":[{"id":"95395bf94a1949052d9110b07e728d9cf6aba90c","date":1101219438,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build().mjava","pathOld":"/dev/null","sourceNew":"    private void build() {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index,\n                                                 new SimpleAnalyzer(), T);\n\n            for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(Field.Keyword(\"id\",pad(d)));\n                int r= rand.nextInt();\n                if (maxR < r) {\n                    maxR = r;\n                }\n                if (r < minR) {\n                    minR = r;\n                }\n                doc.add(Field.Keyword(\"rand\",pad(r)));\n                doc.add(Field.Keyword(\"body\",\"body\"));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a4dc52db0dc99630653fd43a9eacdc795f57469","date":1101239335,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build().mjava","pathOld":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build().mjava","sourceNew":"    private void build() {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index,\n                                                 new SimpleAnalyzer(), T);\n\n            for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.UN_TOKENIZED));\n                int r= rand.nextInt();\n                if (maxR < r) {\n                    maxR = r;\n                }\n                if (r < minR) {\n                    minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.UN_TOKENIZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","sourceOld":"    private void build() {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index,\n                                                 new SimpleAnalyzer(), T);\n\n            for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(Field.Keyword(\"id\",pad(d)));\n                int r= rand.nextInt();\n                if (maxR < r) {\n                    maxR = r;\n                }\n                if (r < minR) {\n                    minR = r;\n                }\n                doc.add(Field.Keyword(\"rand\",pad(r)));\n                doc.add(Field.Keyword(\"body\",\"body\"));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build().mjava","pathOld":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build().mjava","sourceNew":"    private void build() {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index, new SimpleAnalyzer(), T, \n                                                 IndexWriter.MaxFieldLength.LIMITED);\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.UN_TOKENIZED));\n                int r= rand.nextInt();\n                if (maxR < r) {\n                    maxR = r;\n                }\n                if (r < minR) {\n                    minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.UN_TOKENIZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","sourceOld":"    private void build() {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index,\n                                                 new SimpleAnalyzer(), T);\n\n            for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.UN_TOKENIZED));\n                int r= rand.nextInt();\n                if (maxR < r) {\n                    maxR = r;\n                }\n                if (r < minR) {\n                    minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.UN_TOKENIZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build().mjava","pathOld":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build().mjava","sourceNew":"    private void build() {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index, new SimpleAnalyzer(), T, \n                                                 IndexWriter.MaxFieldLength.LIMITED);\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= rand.nextInt();\n                if (maxR < r) {\n                    maxR = r;\n                }\n                if (r < minR) {\n                    minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","sourceOld":"    private void build() {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index, new SimpleAnalyzer(), T, \n                                                 IndexWriter.MaxFieldLength.LIMITED);\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.UN_TOKENIZED));\n                int r= rand.nextInt();\n                if (maxR < r) {\n                    maxR = r;\n                }\n                if (r < minR) {\n                    minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.UN_TOKENIZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.UN_TOKENIZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b33dc4652df2747e38f9782fde82bd426b77c538","date":1221599001,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build(TestIndex).mjava","pathOld":"src/test/org/apache/lucene/search/BaseTestRangeFilter#build().mjava","sourceNew":"    private void build(TestIndex index) {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index.index, new SimpleAnalyzer(), T, \n                                                 IndexWriter.MaxFieldLength.LIMITED);\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= index.allowNegativeRandomInts \n                       ? rand.nextInt() : rand.nextInt(Integer.MAX_VALUE);\n                if (index.maxR < r) {\n                    index.maxR = r;\n                }\n                  if (r < index.minR) {\n                    index.minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","sourceOld":"    private void build() {\n        try {\n            \n            /* build an index */\n            IndexWriter writer = new IndexWriter(index, new SimpleAnalyzer(), T, \n                                                 IndexWriter.MaxFieldLength.LIMITED);\n\n          for (int d = minId; d <= maxId; d++) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\",pad(d), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                int r= rand.nextInt();\n                if (maxR < r) {\n                    maxR = r;\n                }\n                if (r < minR) {\n                    minR = r;\n                }\n                doc.add(new Field(\"rand\",pad(r), Field.Store.YES, Field.Index.NOT_ANALYZED));\n                doc.add(new Field(\"body\",\"body\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n                writer.addDocument(doc);\n            }\n            \n            writer.optimize();\n            writer.close();\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"can't build index\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b33dc4652df2747e38f9782fde82bd426b77c538":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["8a4dc52db0dc99630653fd43a9eacdc795f57469"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"8a4dc52db0dc99630653fd43a9eacdc795f57469":["95395bf94a1949052d9110b07e728d9cf6aba90c"],"95395bf94a1949052d9110b07e728d9cf6aba90c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b33dc4652df2747e38f9782fde82bd426b77c538"]},"commit2Childs":{"b33dc4652df2747e38f9782fde82bd426b77c538":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95395bf94a1949052d9110b07e728d9cf6aba90c"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["b33dc4652df2747e38f9782fde82bd426b77c538"],"8a4dc52db0dc99630653fd43a9eacdc795f57469":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"95395bf94a1949052d9110b07e728d9cf6aba90c":["8a4dc52db0dc99630653fd43a9eacdc795f57469"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}