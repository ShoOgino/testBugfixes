{"path":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","commits":[{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Accepts JSON add field request, to URL  \n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if ( ! getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if ( ! entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n                         + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if ( ! (object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                           + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                           + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                           + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String,Object> map = (Map<String,Object>)object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String,Object>)map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String)map.remove(IndexSchema.NAME)) && ! fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName \n                             + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String)map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema)getSchema();\n                SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                ManagedIndexSchema newSchema = oldSchema.addField(newField);\n                getSolrCore().setLatestSchema(newSchema);\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"577e41641d2fc8a834d2709dc76cc424b2936e19","date":1373292023,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","sourceNew":"  /**\n   * Accepts JSON add field request, to URL\n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String, Object> map = (Map<String, Object>) object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String, Object>) map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String) map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName\n                  + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String) map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\n                String copyTo = (String) map.get(IndexSchema.COPY_FIELDS);\n                Collection<String> copyFieldNames = Collections.emptySet();\n                if (copyTo != null) {\n                  map.remove(IndexSchema.COPY_FIELDS);\n                  String [] tmp = copyTo.split(\",\");\n                  copyFieldNames = new HashSet<>(tmp.length);\n                  Collections.addAll(copyFieldNames, tmp);\n                }\n                SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                IndexSchema newSchema = oldSchema.addField(newField, copyFieldNames);\n                getSolrCore().setLatestSchema(newSchema);\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  /**\n   * Accepts JSON add field request, to URL  \n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if ( ! getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if ( ! entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n                         + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if ( ! (object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                           + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                           + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                           + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String,Object> map = (Map<String,Object>)object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String,Object>)map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String)map.remove(IndexSchema.NAME)) && ! fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName \n                             + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String)map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema)getSchema();\n                SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                ManagedIndexSchema newSchema = oldSchema.addField(newField);\n                getSolrCore().setLatestSchema(newSchema);\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01257aab3074127b72c3b53a508f396bb968019c","date":1373336679,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","sourceNew":"  /**\n   * Accepts JSON add field request, to URL\n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String, Object> map = (Map<String, Object>) object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String, Object>) map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String) map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName\n                  + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String) map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\n                String copyTo = (String) map.get(IndexSchema.COPY_FIELDS);\n                Collection<String> copyFieldNames = Collections.emptySet();\n                if (copyTo != null) {\n                  map.remove(IndexSchema.COPY_FIELDS);\n                  String [] tmp = copyTo.split(\",\");\n                  if (tmp != null && tmp.length > 0) {\n                    copyFieldNames = new HashSet<>(tmp.length);\n                    for (int i = 0; i < tmp.length; i++) {\n                      copyFieldNames.add(tmp[i].trim());\n                    }\n                  } else {\n                    //the user specified copy fields, but then passed in something invalid\n                    String msg = \"Invalid \" + IndexSchema.COPY_FIELDS + \" for field: \" + fieldName;\n                    log.error(msg);\n                    throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n                  }\n                }\n                SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                IndexSchema newSchema = oldSchema.addField(newField, copyFieldNames);\n                getSolrCore().setLatestSchema(newSchema);\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  /**\n   * Accepts JSON add field request, to URL\n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String, Object> map = (Map<String, Object>) object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String, Object>) map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String) map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName\n                  + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String) map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\n                String copyTo = (String) map.get(IndexSchema.COPY_FIELDS);\n                Collection<String> copyFieldNames = Collections.emptySet();\n                if (copyTo != null) {\n                  map.remove(IndexSchema.COPY_FIELDS);\n                  String [] tmp = copyTo.split(\",\");\n                  copyFieldNames = new HashSet<>(tmp.length);\n                  Collections.addAll(copyFieldNames, tmp);\n                }\n                SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                IndexSchema newSchema = oldSchema.addField(newField, copyFieldNames);\n                getSolrCore().setLatestSchema(newSchema);\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b33d016ca76018790ad668b7a61f7fdf21daeb0a","date":1373453738,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","sourceNew":"  /**\n   * Accepts JSON add field request, to URL\n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String, Object> map = (Map<String, Object>) object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String, Object>) map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String) map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName\n                  + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String) map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\n                List<String> copyFieldNames = (List<String>) map.get(IndexSchema.COPY_FIELDS);\n                if (copyFieldNames != null) {\n                  map.remove(IndexSchema.COPY_FIELDS);\n                }\n                SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                IndexSchema newSchema = oldSchema.addField(newField, copyFieldNames);\n                getSolrCore().setLatestSchema(newSchema);\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  /**\n   * Accepts JSON add field request, to URL\n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String, Object> map = (Map<String, Object>) object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String, Object>) map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String) map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName\n                  + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String) map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\n                String copyTo = (String) map.get(IndexSchema.COPY_FIELDS);\n                Collection<String> copyFieldNames = Collections.emptySet();\n                if (copyTo != null) {\n                  map.remove(IndexSchema.COPY_FIELDS);\n                  String [] tmp = copyTo.split(\",\");\n                  if (tmp != null && tmp.length > 0) {\n                    copyFieldNames = new HashSet<>(tmp.length);\n                    for (int i = 0; i < tmp.length; i++) {\n                      copyFieldNames.add(tmp[i].trim());\n                    }\n                  } else {\n                    //the user specified copy fields, but then passed in something invalid\n                    String msg = \"Invalid \" + IndexSchema.COPY_FIELDS + \" for field: \" + fieldName;\n                    log.error(msg);\n                    throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n                  }\n                }\n                SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                IndexSchema newSchema = oldSchema.addField(newField, copyFieldNames);\n                getSolrCore().setLatestSchema(newSchema);\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404e1b657c8a29a6ad3d35391e2d9fd847c4c632","date":1373556718,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","sourceNew":"  /**\n   * Accepts JSON add field request, to URL\n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String, Object> map = (Map<String, Object>) object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String, Object>) map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String) map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName\n                  + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String) map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\n                Object copies = map.get(IndexSchema.COPY_FIELDS);\n                List<String> copyFieldNames = null;\n                if (copies != null) {\n                  if (copies instanceof List) {\n                    copyFieldNames = (List<String>) copies;\n                  } else if (copies instanceof String) {\n                    copyFieldNames = Collections.singletonList(copies.toString());\n                  } else {\n                    String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                    log.error(message);\n                    throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                  }\n                }\n                if (copyFieldNames != null) {\n                  map.remove(IndexSchema.COPY_FIELDS);\n                }\n                SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                IndexSchema newSchema = oldSchema.addField(newField, copyFieldNames);\n                getSolrCore().setLatestSchema(newSchema);\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  /**\n   * Accepts JSON add field request, to URL\n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String, Object> map = (Map<String, Object>) object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String, Object>) map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String) map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName\n                  + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String) map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\n                List<String> copyFieldNames = (List<String>) map.get(IndexSchema.COPY_FIELDS);\n                if (copyFieldNames != null) {\n                  map.remove(IndexSchema.COPY_FIELDS);\n                }\n                SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                IndexSchema newSchema = oldSchema.addField(newField, copyFieldNames);\n                getSolrCore().setLatestSchema(newSchema);\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","sourceNew":"  /**\n   * Accepts JSON add field request, to URL\n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String, Object> map = (Map<String, Object>) object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String, Object>) map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String) map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName\n                  + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String) map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\n                Object copies = map.get(IndexSchema.COPY_FIELDS);\n                List<String> copyFieldNames = null;\n                if (copies != null) {\n                  if (copies instanceof List) {\n                    copyFieldNames = (List<String>) copies;\n                  } else if (copies instanceof String) {\n                    copyFieldNames = Collections.singletonList(copies.toString());\n                  } else {\n                    String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                    log.error(message);\n                    throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                  }\n                }\n                if (copyFieldNames != null) {\n                  map.remove(IndexSchema.COPY_FIELDS);\n                }\n                SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                IndexSchema newSchema = oldSchema.addField(newField, copyFieldNames);\n                getSolrCore().setLatestSchema(newSchema);\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  /**\n   * Accepts JSON add field request, to URL  \n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if ( ! getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if ( ! entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n                         + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if ( ! (object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                           + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                           + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                           + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String,Object> map = (Map<String,Object>)object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String,Object>)map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String)map.remove(IndexSchema.NAME)) && ! fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName \n                             + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String)map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema)getSchema();\n                SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                ManagedIndexSchema newSchema = oldSchema.addField(newField);\n                getSolrCore().setLatestSchema(newSchema);\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec756ece2bfff759a9615a1d8f833e4f5f26e96b","date":1402433820,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","sourceNew":"  /**\n   * Accepts JSON add field request, to URL\n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String, Object> map = (Map<String, Object>) object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String, Object>) map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String) map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName\n                  + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String) map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\n                Object copies = map.get(IndexSchema.COPY_FIELDS);\n                List<String> copyFieldNames = null;\n                if (copies != null) {\n                  if (copies instanceof List) {\n                    copyFieldNames = (List<String>) copies;\n                  } else if (copies instanceof String) {\n                    copyFieldNames = Collections.singletonList(copies.toString());\n                  } else {\n                    String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                    log.error(message);\n                    throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                  }\n                }\n                if (copyFieldNames != null) {\n                  map.remove(IndexSchema.COPY_FIELDS);\n                }\n                boolean success = false;\n                while (!success) {\n                  try {\n                    SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                    IndexSchema newSchema = oldSchema.addField(newField, copyFieldNames);\n                    if (null != newSchema) {\n                      getSolrCore().setLatestSchema(newSchema);\n                      success = true;\n                    } else {\n                      throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add field.\");\n                    }\n                  } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                    log.debug(\"Schema changed while processing request, retrying\");\n                    oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  /**\n   * Accepts JSON add field request, to URL\n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String, Object> map = (Map<String, Object>) object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String, Object>) map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String) map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName\n                  + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String) map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\n                Object copies = map.get(IndexSchema.COPY_FIELDS);\n                List<String> copyFieldNames = null;\n                if (copies != null) {\n                  if (copies instanceof List) {\n                    copyFieldNames = (List<String>) copies;\n                  } else if (copies instanceof String) {\n                    copyFieldNames = Collections.singletonList(copies.toString());\n                  } else {\n                    String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                    log.error(message);\n                    throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                  }\n                }\n                if (copyFieldNames != null) {\n                  map.remove(IndexSchema.COPY_FIELDS);\n                }\n                SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                IndexSchema newSchema = oldSchema.addField(newField, copyFieldNames);\n                getSolrCore().setLatestSchema(newSchema);\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a54972b2387f87fdd92600308f9a0d477b1f53b0","date":1404789654,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","sourceNew":"  /**\n   * Accepts JSON add field request, to URL\n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String, Object> map = (Map<String, Object>) object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String, Object>) map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String) map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName\n                  + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String) map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\n                Object copies = map.get(IndexSchema.COPY_FIELDS);\n                List<String> copyFieldNames = null;\n                if (copies != null) {\n                  if (copies instanceof List) {\n                    copyFieldNames = (List<String>) copies;\n                  } else if (copies instanceof String) {\n                    copyFieldNames = Collections.singletonList(copies.toString());\n                  } else {\n                    String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                    log.error(message);\n                    throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                  }\n                }\n                if (copyFieldNames != null) {\n                  map.remove(IndexSchema.COPY_FIELDS);\n                }\n                boolean success = false;\n                while (!success) {\n                  try {\n                    SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                    synchronized (oldSchema.getSchemaUpdateLock()) {\n                      IndexSchema newSchema = oldSchema.addField(newField, copyFieldNames);\n                      if (null != newSchema) {\n                        getSolrCore().setLatestSchema(newSchema);\n                        success = true;\n                      } else {\n                        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add field.\");\n                      }\n                    }\n                  } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                    log.debug(\"Schema changed while processing request, retrying\");\n                    oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  /**\n   * Accepts JSON add field request, to URL\n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String, Object> map = (Map<String, Object>) object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String, Object>) map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String) map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName\n                  + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String) map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\n                Object copies = map.get(IndexSchema.COPY_FIELDS);\n                List<String> copyFieldNames = null;\n                if (copies != null) {\n                  if (copies instanceof List) {\n                    copyFieldNames = (List<String>) copies;\n                  } else if (copies instanceof String) {\n                    copyFieldNames = Collections.singletonList(copies.toString());\n                  } else {\n                    String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                    log.error(message);\n                    throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                  }\n                }\n                if (copyFieldNames != null) {\n                  map.remove(IndexSchema.COPY_FIELDS);\n                }\n                boolean success = false;\n                while (!success) {\n                  try {\n                    SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                    IndexSchema newSchema = oldSchema.addField(newField, copyFieldNames);\n                    if (null != newSchema) {\n                      getSolrCore().setLatestSchema(newSchema);\n                      success = true;\n                    } else {\n                      throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add field.\");\n                    }\n                  } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                    log.debug(\"Schema changed while processing request, retrying\");\n                    oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"106069d345c14ee5c76f0ea76397b02a656f883c","date":1411998064,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","sourceNew":"  /**\n   * Accepts JSON add field request, to URL\n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String, Object> map = (Map<String, Object>) object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String, Object>) map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String) map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName\n                  + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String) map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\n                Object copies = map.get(IndexSchema.COPY_FIELDS);\n                List<String> copyFieldNames = null;\n                if (copies != null) {\n                  if (copies instanceof List) {\n                    copyFieldNames = (List<String>) copies;\n                  } else if (copies instanceof String) {\n                    copyFieldNames = Collections.singletonList(copies.toString());\n                  } else {\n                    String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                    log.error(message);\n                    throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                  }\n                }\n                if (copyFieldNames != null) {\n                  map.remove(IndexSchema.COPY_FIELDS);\n                }\n\n                IndexSchema newSchema = null;\n                boolean success = false;\n                while (!success) {\n                  try {\n                    SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                    synchronized (oldSchema.getSchemaUpdateLock()) {\n                      newSchema = oldSchema.addField(newField, copyFieldNames);\n                      if (null != newSchema) {\n                        getSolrCore().setLatestSchema(newSchema);\n                        success = true;\n                      } else {\n                        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add field.\");\n                      }\n                    }\n                  } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                    log.debug(\"Schema changed while processing request, retrying\");\n                    oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n                  }\n                }\n                waitForSchemaUpdateToPropagate(newSchema);\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  /**\n   * Accepts JSON add field request, to URL\n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String, Object> map = (Map<String, Object>) object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String, Object>) map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String) map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName\n                  + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String) map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\n                Object copies = map.get(IndexSchema.COPY_FIELDS);\n                List<String> copyFieldNames = null;\n                if (copies != null) {\n                  if (copies instanceof List) {\n                    copyFieldNames = (List<String>) copies;\n                  } else if (copies instanceof String) {\n                    copyFieldNames = Collections.singletonList(copies.toString());\n                  } else {\n                    String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                    log.error(message);\n                    throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                  }\n                }\n                if (copyFieldNames != null) {\n                  map.remove(IndexSchema.COPY_FIELDS);\n                }\n                boolean success = false;\n                while (!success) {\n                  try {\n                    SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                    synchronized (oldSchema.getSchemaUpdateLock()) {\n                      IndexSchema newSchema = oldSchema.addField(newField, copyFieldNames);\n                      if (null != newSchema) {\n                        getSolrCore().setLatestSchema(newSchema);\n                        success = true;\n                      } else {\n                        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add field.\");\n                      }\n                    }\n                  } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                    log.debug(\"Schema changed while processing request, retrying\");\n                    oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","sourceNew":"  /**\n   * Accepts JSON add field request, to URL\n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String, Object> map = (Map<String, Object>) object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String, Object>) map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String) map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName\n                  + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String) map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\n                Object copies = map.get(IndexSchema.COPY_FIELDS);\n                List<String> copyFieldNames = null;\n                if (copies != null) {\n                  if (copies instanceof List) {\n                    copyFieldNames = (List<String>) copies;\n                  } else if (copies instanceof String) {\n                    copyFieldNames = Collections.singletonList(copies.toString());\n                  } else {\n                    String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                    log.error(message);\n                    throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                  }\n                }\n                if (copyFieldNames != null) {\n                  map.remove(IndexSchema.COPY_FIELDS);\n                }\n\n                IndexSchema newSchema = null;\n                boolean success = false;\n                while (!success) {\n                  try {\n                    SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                    synchronized (oldSchema.getSchemaUpdateLock()) {\n                      newSchema = oldSchema.addField(newField, copyFieldNames);\n                      if (null != newSchema) {\n                        getSolrCore().setLatestSchema(newSchema);\n                        success = true;\n                      } else {\n                        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add field.\");\n                      }\n                    }\n                  } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                    log.debug(\"Schema changed while processing request, retrying\");\n                    oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n                  }\n                }\n                waitForSchemaUpdateToPropagate(newSchema);\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  /**\n   * Accepts JSON add field request, to URL\n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String, Object> map = (Map<String, Object>) object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String, Object>) map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String) map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName\n                  + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String) map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\n                Object copies = map.get(IndexSchema.COPY_FIELDS);\n                List<String> copyFieldNames = null;\n                if (copies != null) {\n                  if (copies instanceof List) {\n                    copyFieldNames = (List<String>) copies;\n                  } else if (copies instanceof String) {\n                    copyFieldNames = Collections.singletonList(copies.toString());\n                  } else {\n                    String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                    log.error(message);\n                    throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                  }\n                }\n                if (copyFieldNames != null) {\n                  map.remove(IndexSchema.COPY_FIELDS);\n                }\n                boolean success = false;\n                while (!success) {\n                  try {\n                    SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                    synchronized (oldSchema.getSchemaUpdateLock()) {\n                      IndexSchema newSchema = oldSchema.addField(newField, copyFieldNames);\n                      if (null != newSchema) {\n                        getSolrCore().setLatestSchema(newSchema);\n                        success = true;\n                      } else {\n                        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add field.\");\n                      }\n                    }\n                  } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                    log.debug(\"Schema changed while processing request, retrying\");\n                    oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldResource#put(Representation).mjava","sourceNew":null,"sourceOld":"  /**\n   * Accepts JSON add field request, to URL\n   */\n  @Override\n  public Representation put(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof Map)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected Map of the form\"\n                + \" (ignore the backslashes): {\\\"type\\\":\\\"text_general\\\", ...}, either with or\"\n                + \" without a \\\"name\\\" mapping.  If the \\\"name\\\" is specified, it must match the\"\n                + \" name given in the request URL: /schema/fields/(name)\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            Map<String, Object> map = (Map<String, Object>) object;\n            if (1 == map.size() && map.containsKey(IndexSchema.FIELD)) {\n              map = (Map<String, Object>) map.get(IndexSchema.FIELD);\n            }\n            String bodyFieldName;\n            if (null != (bodyFieldName = (String) map.remove(IndexSchema.NAME)) && !fieldName.equals(bodyFieldName)) {\n              String message = \"Field name in the request body '\" + bodyFieldName\n                  + \"' doesn't match field name in the request URL '\" + fieldName + \"'\";\n              log.error(message);\n              throw new SolrException(ErrorCode.BAD_REQUEST, message);\n            } else {\n              String fieldType;\n              if (null == (fieldType = (String) map.remove(IndexSchema.TYPE))) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              } else {\n                ManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\n                Object copies = map.get(IndexSchema.COPY_FIELDS);\n                List<String> copyFieldNames = null;\n                if (copies != null) {\n                  if (copies instanceof List) {\n                    copyFieldNames = (List<String>) copies;\n                  } else if (copies instanceof String) {\n                    copyFieldNames = Collections.singletonList(copies.toString());\n                  } else {\n                    String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                    log.error(message);\n                    throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                  }\n                }\n                if (copyFieldNames != null) {\n                  map.remove(IndexSchema.COPY_FIELDS);\n                }\n\n                IndexSchema newSchema = null;\n                boolean success = false;\n                while (!success) {\n                  try {\n                    SchemaField newField = oldSchema.newField(fieldName, fieldType, map);\n                    synchronized (oldSchema.getSchemaUpdateLock()) {\n                      newSchema = oldSchema.addField(newField, copyFieldNames);\n                      if (null != newSchema) {\n                        getSolrCore().setLatestSchema(newSchema);\n                        success = true;\n                      } else {\n                        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add field.\");\n                      }\n                    }\n                  } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                    log.debug(\"Schema changed while processing request, retrying\");\n                    oldSchema = (ManagedIndexSchema)getSolrCore().getLatestSchema();\n                  }\n                }\n                waitForSchemaUpdateToPropagate(newSchema);\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["08970e5b8411182a29412c177eff67ec1110095b","404e1b657c8a29a6ad3d35391e2d9fd847c4c632"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a54972b2387f87fdd92600308f9a0d477b1f53b0","106069d345c14ee5c76f0ea76397b02a656f883c"],"a54972b2387f87fdd92600308f9a0d477b1f53b0":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b"],"b33d016ca76018790ad668b7a61f7fdf21daeb0a":["01257aab3074127b72c3b53a508f396bb968019c"],"08970e5b8411182a29412c177eff67ec1110095b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ec756ece2bfff759a9615a1d8f833e4f5f26e96b":["404e1b657c8a29a6ad3d35391e2d9fd847c4c632"],"577e41641d2fc8a834d2709dc76cc424b2936e19":["08970e5b8411182a29412c177eff67ec1110095b"],"01257aab3074127b72c3b53a508f396bb968019c":["577e41641d2fc8a834d2709dc76cc424b2936e19"],"f494bc636a1302995e4930fdccd371eeda452f87":["106069d345c14ee5c76f0ea76397b02a656f883c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"106069d345c14ee5c76f0ea76397b02a656f883c":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"404e1b657c8a29a6ad3d35391e2d9fd847c4c632":["b33d016ca76018790ad668b7a61f7fdf21daeb0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f494bc636a1302995e4930fdccd371eeda452f87"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"08970e5b8411182a29412c177eff67ec1110095b":["37a0f60745e53927c4c876cfe5b5a58170f0646c","577e41641d2fc8a834d2709dc76cc424b2936e19"],"a54972b2387f87fdd92600308f9a0d477b1f53b0":["d9a47902d6207303f5ed3e7aaca62ca33433af66","106069d345c14ee5c76f0ea76397b02a656f883c"],"b33d016ca76018790ad668b7a61f7fdf21daeb0a":["404e1b657c8a29a6ad3d35391e2d9fd847c4c632"],"ec756ece2bfff759a9615a1d8f833e4f5f26e96b":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"577e41641d2fc8a834d2709dc76cc424b2936e19":["01257aab3074127b72c3b53a508f396bb968019c"],"01257aab3074127b72c3b53a508f396bb968019c":["b33d016ca76018790ad668b7a61f7fdf21daeb0a"],"f494bc636a1302995e4930fdccd371eeda452f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08970e5b8411182a29412c177eff67ec1110095b"],"106069d345c14ee5c76f0ea76397b02a656f883c":["d9a47902d6207303f5ed3e7aaca62ca33433af66","f494bc636a1302995e4930fdccd371eeda452f87"],"404e1b657c8a29a6ad3d35391e2d9fd847c4c632":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ec756ece2bfff759a9615a1d8f833e4f5f26e96b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}