{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50NormsFormat#testNormMapSimple().mjava","commits":[{"id":"e15c57be968dbcac6fd3f87af0bd26a8f023e069","date":1413564565,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50NormsFormat#testNormMapSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testNormMapSimple() {\n    NormMap map = new NormMap();\n    map.add(10);\n    map.add(5);\n    map.add(4);\n    map.add(10);\n    assertEquals(3, map.size);\n    \n    // first come, first serve ord assignment\n    \n    // encode\n    assertEquals(0, map.getOrd(10));\n    assertEquals(1, map.getOrd(5));\n    assertEquals(2, map.getOrd(4));\n    \n    // decode\n    long decode[] = map.getDecodeTable();\n    assertEquals(10, decode[0]);\n    assertEquals(5, decode[1]);\n    assertEquals(4, decode[2]);\n    \n    // freqs\n    int freqs[] = map.getFreqs();\n    assertEquals(2, freqs[0]);\n    assertEquals(1, freqs[1]);\n    assertEquals(1, freqs[2]);\n    \n    assertEquals(2, map.maxFreq());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50NormsFormat#testNormMapSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testNormMapSimple() {\n    NormMap map = new NormMap();\n    map.add(10);\n    map.add(5);\n    map.add(4);\n    map.add(10);\n    assertEquals(3, map.size);\n    \n    // first come, first serve ord assignment\n    \n    // encode\n    assertEquals(0, map.getOrd(10));\n    assertEquals(1, map.getOrd(5));\n    assertEquals(2, map.getOrd(4));\n    \n    // decode\n    long decode[] = map.getDecodeTable();\n    assertEquals(10, decode[0]);\n    assertEquals(5, decode[1]);\n    assertEquals(4, decode[2]);\n    \n    // freqs\n    int freqs[] = map.getFreqs();\n    assertEquals(2, freqs[0]);\n    assertEquals(1, freqs[1]);\n    assertEquals(1, freqs[2]);\n    \n    assertEquals(2, map.maxFreq());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c3fae32338d82a0710e1756793faba13dcb598b","date":1414786590,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50NormsFormat#testNormMapSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50NormsFormat#testNormMapSimple().mjava","sourceNew":"  public void testNormMapSimple() {\n    NormMap map = new NormMap();\n    map.add((byte)4);\n    map.add((byte) 10);\n    map.add((byte) 5);\n    map.add((byte)10);\n    assertEquals(3, map.size);\n    \n    // first come, first serve ord assignment\n    assertEquals(0, map.ord((byte) 4));\n    assertEquals(1, map.ord((byte) 10));\n    assertEquals(2, map.ord((byte) 5));\n    \n    assertEquals(4, map.values[0]);\n    assertEquals(10, map.values[1]);\n    assertEquals(5, map.values[2]);\n    \n    assertEquals(1, map.freqs[0]);\n    assertEquals(2, map.freqs[1]);\n    assertEquals(1, map.freqs[2]);\n\n    // optimizing reorders the ordinals\n    map.optimizeOrdinals();\n    assertEquals(0, map.ord((byte)10));\n    assertEquals(1, map.ord((byte)4));\n    assertEquals(2, map.ord((byte)5));\n\n    assertEquals(10, map.values[0]);\n    assertEquals(4, map.values[1]);\n    assertEquals(5, map.values[2]);\n\n    assertEquals(2, map.freqs[0]);\n    assertEquals(1, map.freqs[1]);\n    assertEquals(1, map.freqs[2]);\n  }\n\n","sourceOld":"  public void testNormMapSimple() {\n    NormMap map = new NormMap();\n    map.add(10);\n    map.add(5);\n    map.add(4);\n    map.add(10);\n    assertEquals(3, map.size);\n    \n    // first come, first serve ord assignment\n    \n    // encode\n    assertEquals(0, map.getOrd(10));\n    assertEquals(1, map.getOrd(5));\n    assertEquals(2, map.getOrd(4));\n    \n    // decode\n    long decode[] = map.getDecodeTable();\n    assertEquals(10, decode[0]);\n    assertEquals(5, decode[1]);\n    assertEquals(4, decode[2]);\n    \n    // freqs\n    int freqs[] = map.getFreqs();\n    assertEquals(2, freqs[0]);\n    assertEquals(1, freqs[1]);\n    assertEquals(1, freqs[2]);\n    \n    assertEquals(2, map.maxFreq());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestLucene50NormsFormat#testNormMapSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50NormsFormat#testNormMapSimple().mjava","sourceNew":"  public void testNormMapSimple() {\n    NormMap map = new NormMap();\n    map.add((byte)4);\n    map.add((byte) 10);\n    map.add((byte) 5);\n    map.add((byte)10);\n    assertEquals(3, map.size);\n    \n    // first come, first serve ord assignment\n    assertEquals(0, map.ord((byte) 4));\n    assertEquals(1, map.ord((byte) 10));\n    assertEquals(2, map.ord((byte) 5));\n    \n    assertEquals(4, map.values[0]);\n    assertEquals(10, map.values[1]);\n    assertEquals(5, map.values[2]);\n    \n    assertEquals(1, map.freqs[0]);\n    assertEquals(2, map.freqs[1]);\n    assertEquals(1, map.freqs[2]);\n\n    // optimizing reorders the ordinals\n    map.optimizeOrdinals();\n    assertEquals(0, map.ord((byte)10));\n    assertEquals(1, map.ord((byte)4));\n    assertEquals(2, map.ord((byte)5));\n\n    assertEquals(10, map.values[0]);\n    assertEquals(4, map.values[1]);\n    assertEquals(5, map.values[2]);\n\n    assertEquals(2, map.freqs[0]);\n    assertEquals(1, map.freqs[1]);\n    assertEquals(1, map.freqs[2]);\n  }\n\n","sourceOld":"  public void testNormMapSimple() {\n    NormMap map = new NormMap();\n    map.add((byte)4);\n    map.add((byte) 10);\n    map.add((byte) 5);\n    map.add((byte)10);\n    assertEquals(3, map.size);\n    \n    // first come, first serve ord assignment\n    assertEquals(0, map.ord((byte) 4));\n    assertEquals(1, map.ord((byte) 10));\n    assertEquals(2, map.ord((byte) 5));\n    \n    assertEquals(4, map.values[0]);\n    assertEquals(10, map.values[1]);\n    assertEquals(5, map.values[2]);\n    \n    assertEquals(1, map.freqs[0]);\n    assertEquals(2, map.freqs[1]);\n    assertEquals(1, map.freqs[2]);\n\n    // optimizing reorders the ordinals\n    map.optimizeOrdinals();\n    assertEquals(0, map.ord((byte)10));\n    assertEquals(1, map.ord((byte)4));\n    assertEquals(2, map.ord((byte)5));\n\n    assertEquals(10, map.values[0]);\n    assertEquals(4, map.values[1]);\n    assertEquals(5, map.values[2]);\n\n    assertEquals(2, map.freqs[0]);\n    assertEquals(1, map.freqs[1]);\n    assertEquals(1, map.freqs[2]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["0c3fae32338d82a0710e1756793faba13dcb598b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c3fae32338d82a0710e1756793faba13dcb598b":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e15c57be968dbcac6fd3f87af0bd26a8f023e069":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e15c57be968dbcac6fd3f87af0bd26a8f023e069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e15c57be968dbcac6fd3f87af0bd26a8f023e069","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"0c3fae32338d82a0710e1756793faba13dcb598b":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"e15c57be968dbcac6fd3f87af0bd26a8f023e069":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["0c3fae32338d82a0710e1756793faba13dcb598b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}