{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkInvalidMincount().mjava","commits":[{"id":"39342cb658ac11dfcbf4459807fb00eb9ada0218","date":1472876688,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkInvalidMincount().mjava","pathOld":"/dev/null","sourceNew":"  private void checkInvalidMincount() throws SolrServerException, IOException {\n    final ModifiableSolrParams params = buildParams();\n    if (random().nextBoolean()) {\n      params.remove(\"facet.exists\");\n      params.set(\"f.\"+FLD+\".facet.exists\",\"true\");\n    }\n    \n    if (random().nextBoolean()) {\n      params.set(\"facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    } else {\n      params.set(\"f.\"+FLD+\".facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    }\n    \n    try {\n      if (random().nextBoolean()) {\n        setDistributedParams(params);\n        queryServer(params);\n      } else {\n        params.set(\"distrib\", \"false\");\n        controlClient.query(params);\n      }\n      fail();\n    } catch(SolrException e) { // check that distr and single index search fail the same\n      assertEquals(e.code(), ErrorCode.BAD_REQUEST.code);\n      assertTrue(e.getMessage().contains(\"facet.exists\"));\n      assertTrue(e.getMessage().contains(\"facet.mincount\"));\n      assertTrue(e.getMessage().contains(FLD));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkInvalidMincount().mjava","pathOld":"/dev/null","sourceNew":"  private void checkInvalidMincount() throws SolrServerException, IOException {\n    final ModifiableSolrParams params = buildParams();\n    if (random().nextBoolean()) {\n      params.remove(\"facet.exists\");\n      params.set(\"f.\"+FLD+\".facet.exists\",\"true\");\n    }\n    \n    if (random().nextBoolean()) {\n      params.set(\"facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    } else {\n      params.set(\"f.\"+FLD+\".facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    }\n    \n    try {\n      if (random().nextBoolean()) {\n        setDistributedParams(params);\n        queryServer(params);\n      } else {\n        params.set(\"distrib\", \"false\");\n        controlClient.query(params);\n      }\n      fail();\n    } catch(SolrException e) { // check that distr and single index search fail the same\n      assertEquals(e.code(), ErrorCode.BAD_REQUEST.code);\n      assertTrue(e.getMessage().contains(\"facet.exists\"));\n      assertTrue(e.getMessage().contains(\"facet.mincount\"));\n      assertTrue(e.getMessage().contains(FLD));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkInvalidMincount().mjava","pathOld":"/dev/null","sourceNew":"  private void checkInvalidMincount() throws SolrServerException, IOException {\n    final ModifiableSolrParams params = buildParams();\n    if (random().nextBoolean()) {\n      params.remove(\"facet.exists\");\n      params.set(\"f.\"+FLD+\".facet.exists\",\"true\");\n    }\n    \n    if (random().nextBoolean()) {\n      params.set(\"facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    } else {\n      params.set(\"f.\"+FLD+\".facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    }\n    \n    try {\n      if (random().nextBoolean()) {\n        setDistributedParams(params);\n        queryServer(params);\n      } else {\n        params.set(\"distrib\", \"false\");\n        controlClient.query(params);\n      }\n      fail();\n    } catch(SolrException e) { // check that distr and single index search fail the same\n      assertEquals(e.code(), ErrorCode.BAD_REQUEST.code);\n      assertTrue(e.getMessage().contains(\"facet.exists\"));\n      assertTrue(e.getMessage().contains(\"facet.mincount\"));\n      assertTrue(e.getMessage().contains(FLD));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkInvalidMincount().mjava","pathOld":"/dev/null","sourceNew":"  private void checkInvalidMincount() throws SolrServerException, IOException {\n    final ModifiableSolrParams params = buildParams();\n    if (random().nextBoolean()) {\n      params.remove(\"facet.exists\");\n      params.set(\"f.\"+FLD+\".facet.exists\",\"true\");\n    }\n    \n    if (random().nextBoolean()) {\n      params.set(\"facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    } else {\n      params.set(\"f.\"+FLD+\".facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    }\n    \n    try {\n      if (random().nextBoolean()) {\n        setDistributedParams(params);\n        queryServer(params);\n      } else {\n        params.set(\"distrib\", \"false\");\n        controlClient.query(params);\n      }\n      fail();\n    } catch(SolrException e) { // check that distr and single index search fail the same\n      assertEquals(e.code(), ErrorCode.BAD_REQUEST.code);\n      assertTrue(e.getMessage().contains(\"facet.exists\"));\n      assertTrue(e.getMessage().contains(\"facet.mincount\"));\n      assertTrue(e.getMessage().contains(FLD));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkInvalidMincount().mjava","pathOld":"/dev/null","sourceNew":"  private void checkInvalidMincount() throws SolrServerException, IOException {\n    final ModifiableSolrParams params = buildParams();\n    if (random().nextBoolean()) {\n      params.remove(\"facet.exists\");\n      params.set(\"f.\"+FLD+\".facet.exists\",\"true\");\n    }\n    \n    if (random().nextBoolean()) {\n      params.set(\"facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    } else {\n      params.set(\"f.\"+FLD+\".facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    }\n    \n    try {\n      if (random().nextBoolean()) {\n        setDistributedParams(params);\n        queryServer(params);\n      } else {\n        params.set(\"distrib\", \"false\");\n        controlClient.query(params);\n      }\n      fail();\n    } catch(SolrException e) { // check that distr and single index search fail the same\n      assertEquals(e.code(), ErrorCode.BAD_REQUEST.code);\n      assertTrue(e.getMessage().contains(\"facet.exists\"));\n      assertTrue(e.getMessage().contains(\"facet.mincount\"));\n      assertTrue(e.getMessage().contains(FLD));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkInvalidMincount().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkInvalidMincount().mjava","sourceNew":"  private void checkInvalidMincount() throws SolrServerException, IOException {\n    final ModifiableSolrParams params = buildParams();\n    if (random().nextBoolean()) {\n      params.remove(\"facet.exists\");\n      params.set(\"f.\"+FLD+\".facet.exists\",\"true\");\n    }\n    \n    if (random().nextBoolean()) {\n      params.set(\"facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    } else {\n      params.set(\"f.\"+FLD+\".facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    }\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      if (random().nextBoolean()) {\n        setDistributedParams(params);\n        queryServer(params);\n      } else {\n        params.set(\"distrib\", \"false\");\n        controlClient.query(params);\n      }\n    });\n    assertEquals(e.code(), ErrorCode.BAD_REQUEST.code);\n    assertTrue(e.getMessage().contains(\"facet.exists\"));\n    assertTrue(e.getMessage().contains(\"facet.mincount\"));\n    assertTrue(e.getMessage().contains(FLD));\n  }\n\n","sourceOld":"  private void checkInvalidMincount() throws SolrServerException, IOException {\n    final ModifiableSolrParams params = buildParams();\n    if (random().nextBoolean()) {\n      params.remove(\"facet.exists\");\n      params.set(\"f.\"+FLD+\".facet.exists\",\"true\");\n    }\n    \n    if (random().nextBoolean()) {\n      params.set(\"facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    } else {\n      params.set(\"f.\"+FLD+\".facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    }\n    \n    try {\n      if (random().nextBoolean()) {\n        setDistributedParams(params);\n        queryServer(params);\n      } else {\n        params.set(\"distrib\", \"false\");\n        controlClient.query(params);\n      }\n      fail();\n    } catch(SolrException e) { // check that distr and single index search fail the same\n      assertEquals(e.code(), ErrorCode.BAD_REQUEST.code);\n      assertTrue(e.getMessage().contains(\"facet.exists\"));\n      assertTrue(e.getMessage().contains(\"facet.mincount\"));\n      assertTrue(e.getMessage().contains(FLD));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkInvalidMincount().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkInvalidMincount().mjava","sourceNew":"  private void checkInvalidMincount() throws SolrServerException, IOException {\n    final ModifiableSolrParams params = buildParams();\n    if (random().nextBoolean()) {\n      params.remove(\"facet.exists\");\n      params.set(\"f.\"+FLD+\".facet.exists\",\"true\");\n    }\n    \n    if (random().nextBoolean()) {\n      params.set(\"facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    } else {\n      params.set(\"f.\"+FLD+\".facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    }\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      if (random().nextBoolean()) {\n        setDistributedParams(params);\n        queryServer(params);\n      } else {\n        params.set(\"distrib\", \"false\");\n        controlClient.query(params);\n      }\n    });\n    assertEquals(e.code(), ErrorCode.BAD_REQUEST.code);\n    assertTrue(e.getMessage().contains(\"facet.exists\"));\n    assertTrue(e.getMessage().contains(\"facet.mincount\"));\n    assertTrue(e.getMessage().contains(FLD));\n  }\n\n","sourceOld":"  private void checkInvalidMincount() throws SolrServerException, IOException {\n    final ModifiableSolrParams params = buildParams();\n    if (random().nextBoolean()) {\n      params.remove(\"facet.exists\");\n      params.set(\"f.\"+FLD+\".facet.exists\",\"true\");\n    }\n    \n    if (random().nextBoolean()) {\n      params.set(\"facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    } else {\n      params.set(\"f.\"+FLD+\".facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    }\n    \n    try {\n      if (random().nextBoolean()) {\n        setDistributedParams(params);\n        queryServer(params);\n      } else {\n        params.set(\"distrib\", \"false\");\n        controlClient.query(params);\n      }\n      fail();\n    } catch(SolrException e) { // check that distr and single index search fail the same\n      assertEquals(e.code(), ErrorCode.BAD_REQUEST.code);\n      assertTrue(e.getMessage().contains(\"facet.exists\"));\n      assertTrue(e.getMessage().contains(\"facet.mincount\"));\n      assertTrue(e.getMessage().contains(FLD));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkInvalidMincount().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkInvalidMincount().mjava","sourceNew":"  private void checkInvalidMincount() throws SolrServerException, IOException {\n    final ModifiableSolrParams params = buildParams();\n    if (random().nextBoolean()) {\n      params.remove(\"facet.exists\");\n      params.set(\"f.\"+FLD+\".facet.exists\",\"true\");\n    }\n    \n    if (random().nextBoolean()) {\n      params.set(\"facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    } else {\n      params.set(\"f.\"+FLD+\".facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    }\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      if (random().nextBoolean()) {\n        setDistributedParams(params);\n        queryServer(params);\n      } else {\n        params.set(\"distrib\", \"false\");\n        controlClient.query(params);\n      }\n    });\n    assertEquals(e.code(), ErrorCode.BAD_REQUEST.code);\n    assertTrue(e.getMessage().contains(\"facet.exists\"));\n    assertTrue(e.getMessage().contains(\"facet.mincount\"));\n    assertTrue(e.getMessage().contains(FLD));\n  }\n\n","sourceOld":"  private void checkInvalidMincount() throws SolrServerException, IOException {\n    final ModifiableSolrParams params = buildParams();\n    if (random().nextBoolean()) {\n      params.remove(\"facet.exists\");\n      params.set(\"f.\"+FLD+\".facet.exists\",\"true\");\n    }\n    \n    if (random().nextBoolean()) {\n      params.set(\"facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    } else {\n      params.set(\"f.\"+FLD+\".facet.mincount\",  \"\"+(2+random().nextInt(100)) );\n    }\n    \n    try {\n      if (random().nextBoolean()) {\n        setDistributedParams(params);\n        queryServer(params);\n      } else {\n        params.set(\"distrib\", \"false\");\n        controlClient.query(params);\n      }\n      fail();\n    } catch(SolrException e) { // check that distr and single index search fail the same\n      assertEquals(e.code(), ErrorCode.BAD_REQUEST.code);\n      assertTrue(e.getMessage().contains(\"facet.exists\"));\n      assertTrue(e.getMessage().contains(\"facet.mincount\"));\n      assertTrue(e.getMessage().contains(FLD));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89424def13674ea17829b41c5883c54ecc31a132"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","39342cb658ac11dfcbf4459807fb00eb9ada0218"],"39342cb658ac11dfcbf4459807fb00eb9ada0218":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"89424def13674ea17829b41c5883c54ecc31a132":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc8f206328a706450934717bec7ccc22ad166fc0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0","39342cb658ac11dfcbf4459807fb00eb9ada0218","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc8f206328a706450934717bec7ccc22ad166fc0":["89424def13674ea17829b41c5883c54ecc31a132"],"39342cb658ac11dfcbf4459807fb00eb9ada0218":["bc8f206328a706450934717bec7ccc22ad166fc0"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}