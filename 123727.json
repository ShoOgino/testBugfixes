{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","sourceNew":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.storePayloads;\n      storeOffsets = fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","sourceOld":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.storePayloads;\n      storeOffsets = fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","sourceNew":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.hasPayloads();\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","sourceOld":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.storePayloads;\n      storeOffsets = fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","sourceNew":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.hasPayloads();\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","sourceOld":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.storePayloads;\n      storeOffsets = fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","sourceNew":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.hasPayloads();\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      freq = 1;\n      if (indexOmitsTF) {\n        Arrays.fill(freqs, 1);\n      }\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","sourceOld":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.hasPayloads();\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","sourceNew":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.hasPayloads();\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      freq = 1;\n      if (indexOmitsTF) {\n        Arrays.fill(freqs, 1);\n      }\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","sourceOld":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.hasPayloads();\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","sourceNew":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.hasPayloads();\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      freq = 1;\n      if (indexOmitsTF) {\n        Arrays.fill(freqs, 1);\n      }\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","sourceOld":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.hasPayloads();\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","sourceNew":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.hasPayloads();\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      freq = 1;\n      if (indexOmitsTF) {\n        Arrays.fill(freqs, 1);\n      }\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","sourceOld":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.hasPayloads();\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      freq = 1;\n      if (indexOmitsTF) {\n        Arrays.fill(freqs, 1);\n      }\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","sourceNew":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.hasPayloads();\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      freq = 1;\n      if (indexOmitsTF) {\n        Arrays.fill(freqs, 1);\n      }\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","sourceOld":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.hasPayloads();\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      freq = 1;\n      if (indexOmitsTF) {\n        Arrays.fill(freqs, 1);\n      }\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["02331260bb246364779cb6f04919ca47900d01bb"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","02331260bb246364779cb6f04919ca47900d01bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"02331260bb246364779cb6f04919ca47900d01bb":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["02331260bb246364779cb6f04919ca47900d01bb","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"02331260bb246364779cb6f04919ca47900d01bb":["4cc45c615dbb82bf79d5f9550286098367874fbf","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}