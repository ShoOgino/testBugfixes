{"path":"src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,File,HttpClient,long).mjava","commits":[{"id":"1d6028dbe4a16095efe9f1651fe1a8e88d683e92","date":1224723463,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,File,HttpClient,long).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,File,HttpClient).mjava","sourceNew":"  private void downloadIndexFiles(boolean snapNeeded, File snapDir,\n                                  HttpClient client, long latestVersion) throws Exception {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file.get(NAME));\n      if (!localIndexFile.exists() || snapNeeded) {\n        fileFetcher = new FileFetcher(snapDir, file, (String) file.get(NAME),\n                client, false, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<String, Object>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + localIndexFile);\n      }\n    }\n  }\n\n","sourceOld":"  private void downloadIndexFiles(boolean snapNeeded, File snapDir,\n                                  HttpClient client) throws Exception {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file.get(NAME));\n      if (!localIndexFile.exists() || snapNeeded) {\n        fileFetcher = new FileFetcher(snapDir, file, (String) file.get(NAME),\n                client, false);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<String, Object>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + localIndexFile);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9","date":1225202752,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,File,HttpClient,long).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,File,HttpClient,long).mjava","sourceNew":"  /** download the index files. if snap needed download all the files .\n   * @param snapNeeded is it a fresh index copy\n   * @param snapDir the directory to which files need to be downloadeed to\n   * @param client the httpclient instance\n   * @param latestVersion the version number\n   */\n  private void downloadIndexFiles(boolean snapNeeded, File snapDir,\n                                  HttpClient client, long latestVersion) throws Exception {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file.get(NAME));\n      if (!localIndexFile.exists() || snapNeeded) {\n        fileFetcher = new FileFetcher(snapDir, file, (String) file.get(NAME),\n                client, false, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<String, Object>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + localIndexFile);\n      }\n    }\n  }\n\n","sourceOld":"  private void downloadIndexFiles(boolean snapNeeded, File snapDir,\n                                  HttpClient client, long latestVersion) throws Exception {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file.get(NAME));\n      if (!localIndexFile.exists() || snapNeeded) {\n        fileFetcher = new FileFetcher(snapDir, file, (String) file.get(NAME),\n                client, false, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<String, Object>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + localIndexFile);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8620c64e323e74078214cf931e505179d14c888e","date":1225270494,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,File,HttpClient,long).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,File,HttpClient,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex    is it a fresh index copy\n   * @param snapDir       the directory to which files need to be downloadeed to\n   * @param client        the httpclient instance\n   * @param latestVersion the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, File snapDir,\n                                  HttpClient client, long latestVersion) throws Exception {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file.get(NAME));\n      if (!localIndexFile.exists() || downloadCompleteIndex) {\n        fileFetcher = new FileFetcher(snapDir, file, (String) file.get(NAME),\n                client, false, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<String, Object>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + localIndexFile);\n      }\n    }\n  }\n\n","sourceOld":"  /** download the index files. if snap needed download all the files .\n   * @param snapNeeded is it a fresh index copy\n   * @param snapDir the directory to which files need to be downloadeed to\n   * @param client the httpclient instance\n   * @param latestVersion the version number\n   */\n  private void downloadIndexFiles(boolean snapNeeded, File snapDir,\n                                  HttpClient client, long latestVersion) throws Exception {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file.get(NAME));\n      if (!localIndexFile.exists() || snapNeeded) {\n        fileFetcher = new FileFetcher(snapDir, file, (String) file.get(NAME),\n                client, false, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<String, Object>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + localIndexFile);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1afc23adf8af4aa2dfc781b02b63710546b33","date":1227622754,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,File,long).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,File,HttpClient,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param snapDir               the directory to which files need to be downloadeed to\n   * @param latestVersion         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, File snapDir, long latestVersion) throws Exception {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file.get(NAME));\n      if (!localIndexFile.exists() || downloadCompleteIndex) {\n        fileFetcher = new FileFetcher(snapDir, file, (String) file.get(NAME), false, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<String, Object>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + localIndexFile);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex    is it a fresh index copy\n   * @param snapDir       the directory to which files need to be downloadeed to\n   * @param client        the httpclient instance\n   * @param latestVersion the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, File snapDir,\n                                  HttpClient client, long latestVersion) throws Exception {\n    for (Map<String, Object> file : filesToDownload) {\n      File localIndexFile = new File(solrCore.getIndexDir(), (String) file.get(NAME));\n      if (!localIndexFile.exists() || downloadCompleteIndex) {\n        fileFetcher = new FileFetcher(snapDir, file, (String) file.get(NAME),\n                client, false, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<String, Object>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + localIndexFile);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1d6028dbe4a16095efe9f1651fe1a8e88d683e92":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8620c64e323e74078214cf931e505179d14c888e":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["8620c64e323e74078214cf931e505179d14c888e"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1d6028dbe4a16095efe9f1651fe1a8e88d683e92":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8620c64e323e74078214cf931e505179d14c888e":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["8620c64e323e74078214cf931e505179d14c888e"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6e1afc23adf8af4aa2dfc781b02b63710546b33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}