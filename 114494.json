{"path":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getParam(SolrQueryRequest,String,String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getParam(SolrQueryRequest,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the param, or the default if it's empty or not specified.\n   * @deprecated use SolrParam.get(String,String)\n   */\n  public static String getParam(SolrQueryRequest req,\n                                String param, String def) {\n        \n    String v = req.getParam(param);\n    // Note: parameters passed but given only white-space value are\n    // considered equivalent to passing nothing for that parameter.\n    if (null == v || \"\".equals(v.trim())) {\n      return def;\n    }\n    return v;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getParam(SolrQueryRequest,String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the param, or the default if it's empty or not specified.\n   * @deprecated use SolrParam.get(String,String)\n   */\n  public static String getParam(SolrQueryRequest req,\n                                String param, String def) {\n        \n    String v = req.getParam(param);\n    // Note: parameters passed but given only white-space value are\n    // considered equivalent to passing nothing for that parameter.\n    if (null == v || \"\".equals(v.trim())) {\n      return def;\n    }\n    return v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getParam(SolrQueryRequest,String,String).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#getParam(SolrQueryRequest,String,String).mjava","sourceNew":"  /**\n   * Returns the param, or the default if it's empty or not specified.\n   * @deprecated use SolrParam.get(String,String)\n   */\n  public static String getParam(SolrQueryRequest req,\n                                String param, String def) {\n        \n    String v = req.getParam(param);\n    // Note: parameters passed but given only white-space value are\n    // considered equivalent to passing nothing for that parameter.\n    if (null == v || \"\".equals(v.trim())) {\n      return def;\n    }\n    return v;\n  }\n\n","sourceOld":"  /**\n   * Returns the param, or the default if it's empty or not specified.\n   * @deprecated use SolrParam.get(String,String)\n   */\n  public static String getParam(SolrQueryRequest req,\n                                String param, String def) {\n        \n    String v = req.getParam(param);\n    // Note: parameters passed but given only white-space value are\n    // considered equivalent to passing nothing for that parameter.\n    if (null == v || \"\".equals(v.trim())) {\n      return def;\n    }\n    return v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getParam(SolrQueryRequest,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the param, or the default if it's empty or not specified.\n   * @deprecated use SolrParam.get(String,String)\n   */\n  public static String getParam(SolrQueryRequest req,\n                                String param, String def) {\n        \n    String v = req.getParam(param);\n    // Note: parameters passed but given only white-space value are\n    // considered equivalent to passing nothing for that parameter.\n    if (null == v || \"\".equals(v.trim())) {\n      return def;\n    }\n    return v;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd00dd91853514614379b0e680d65bd19cac0f30","date":1283087816,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getParam(SolrQueryRequest,String,String).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getParam(SolrQueryRequest,String,String).mjava","sourceNew":"  /**\n   * Returns the param, or the default if it's empty or not specified.\n   * @deprecated use SolrParam.get(String,String)\n   */\n  public static String getParam(SolrQueryRequest req,\n                                String param, String def) {\n\n    String v = req.getParam(param);\n    // Note: parameters passed but given only white-space value are\n    // considered equivalent to passing nothing for that parameter.\n    if (null == v || \"\".equals(v.trim())) {\n      return def;\n    }\n    return v;\n  }\n\n","sourceOld":"  /**\n   * Returns the param, or the default if it's empty or not specified.\n   * @deprecated use SolrParam.get(String,String)\n   */\n  public static String getParam(SolrQueryRequest req,\n                                String param, String def) {\n        \n    String v = req.getParam(param);\n    // Note: parameters passed but given only white-space value are\n    // considered equivalent to passing nothing for that parameter.\n    if (null == v || \"\".equals(v.trim())) {\n      return def;\n    }\n    return v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","date":1286157263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getParam(SolrQueryRequest,String,String).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getParam(SolrQueryRequest,String,String).mjava","sourceNew":"  /**\n   * Returns the param, or the default if it's empty or not specified.\n   * @deprecated use SolrParam.get(String,String)\n   */\n  @Deprecated\n  public static String getParam(SolrQueryRequest req,\n                                String param, String def) {\n\n    String v = req.getParam(param);\n    // Note: parameters passed but given only white-space value are\n    // considered equivalent to passing nothing for that parameter.\n    if (null == v || \"\".equals(v.trim())) {\n      return def;\n    }\n    return v;\n  }\n\n","sourceOld":"  /**\n   * Returns the param, or the default if it's empty or not specified.\n   * @deprecated use SolrParam.get(String,String)\n   */\n  public static String getParam(SolrQueryRequest req,\n                                String param, String def) {\n\n    String v = req.getParam(param);\n    // Note: parameters passed but given only white-space value are\n    // considered equivalent to passing nothing for that parameter.\n    if (null == v || \"\".equals(v.trim())) {\n      return def;\n    }\n    return v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getParam(SolrQueryRequest,String,String).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getParam(SolrQueryRequest,String,String).mjava","sourceNew":"  /**\n   * Returns the param, or the default if it's empty or not specified.\n   * @deprecated use SolrParam.get(String,String)\n   */\n  @Deprecated\n  public static String getParam(SolrQueryRequest req,\n                                String param, String def) {\n\n    String v = req.getParam(param);\n    // Note: parameters passed but given only white-space value are\n    // considered equivalent to passing nothing for that parameter.\n    if (null == v || \"\".equals(v.trim())) {\n      return def;\n    }\n    return v;\n  }\n\n","sourceOld":"  /**\n   * Returns the param, or the default if it's empty or not specified.\n   * @deprecated use SolrParam.get(String,String)\n   */\n  public static String getParam(SolrQueryRequest req,\n                                String param, String def) {\n        \n    String v = req.getParam(param);\n    // Note: parameters passed but given only white-space value are\n    // considered equivalent to passing nothing for that parameter.\n    if (null == v || \"\".equals(v.trim())) {\n      return def;\n    }\n    return v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f60a6fbcf656b886f3e7ffe63059c54a10c929bc","date":1293253735,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getParam(SolrQueryRequest,String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the param, or the default if it's empty or not specified.\n   * @deprecated use SolrParam.get(String,String)\n   */\n  @Deprecated\n  public static String getParam(SolrQueryRequest req,\n                                String param, String def) {\n\n    String v = req.getParam(param);\n    // Note: parameters passed but given only white-space value are\n    // considered equivalent to passing nothing for that parameter.\n    if (null == v || \"\".equals(v.trim())) {\n      return def;\n    }\n    return v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getParam(SolrQueryRequest,String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the param, or the default if it's empty or not specified.\n   * @deprecated use SolrParam.get(String,String)\n   */\n  @Deprecated\n  public static String getParam(SolrQueryRequest req,\n                                String param, String def) {\n\n    String v = req.getParam(param);\n    // Note: parameters passed but given only white-space value are\n    // considered equivalent to passing nothing for that parameter.\n    if (null == v || \"\".equals(v.trim())) {\n      return def;\n    }\n    return v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getParam(SolrQueryRequest,String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the param, or the default if it's empty or not specified.\n   * @deprecated use SolrParam.get(String,String)\n   */\n  @Deprecated\n  public static String getParam(SolrQueryRequest req,\n                                String param, String def) {\n\n    String v = req.getParam(param);\n    // Note: parameters passed but given only white-space value are\n    // considered equivalent to passing nothing for that parameter.\n    if (null == v || \"\".equals(v.trim())) {\n      return def;\n    }\n    return v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["cd00dd91853514614379b0e680d65bd19cac0f30"],"70ad682703b8585f5d0a637efec044d57ec05efb":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","f60a6fbcf656b886f3e7ffe63059c54a10c929bc"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f60a6fbcf656b886f3e7ffe63059c54a10c929bc":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"cd00dd91853514614379b0e680d65bd19cac0f30":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f60a6fbcf656b886f3e7ffe63059c54a10c929bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f60a6fbcf656b886f3e7ffe63059c54a10c929bc"]},"commit2Childs":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["70ad682703b8585f5d0a637efec044d57ec05efb","f60a6fbcf656b886f3e7ffe63059c54a10c929bc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"f60a6fbcf656b886f3e7ffe63059c54a10c929bc":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"cd00dd91853514614379b0e680d65bd19cac0f30":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd00dd91853514614379b0e680d65bd19cac0f30"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}