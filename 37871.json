{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#addReplica(ClusterState,CloudConfig,ZkNodeProps,NamedList,Runnable).mjava","commits":[{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#addReplica(ClusterState,CloudConfig,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  List<ZkNodeProps> addReplica(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException, KeeperException {\n    if (log.isDebugEnabled()) {\n      log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    }\n\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String shard = message.getStr(SHARD_ID_PROP);\n\n    final String collectionName;\n    if (followAliases) {\n      collectionName =  ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    DocCollection coll = clusterState.getCollection(collectionName);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collectionName + \" shard: \" + shard + \" does not exist\");\n    }\n\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    final String asyncId = message.getStr(ASYNC);\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n\n    if (node != null && createNodeSetStr != null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both 'node' and 'createNodeSet' parameters cannot be specified together.\");\n    }\n\n    int timeout = message.getInt(TIMEOUT, 10 * 60); // 10 minutes\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n    replicaTypesVsCount.put(Replica.Type.NRT, message.getInt(NRT_REPLICAS, replicaType == Replica.Type.NRT ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.TLOG, message.getInt(TLOG_REPLICAS, replicaType == Replica.Type.TLOG ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.PULL, message.getInt(PULL_REPLICAS, replicaType == Replica.Type.PULL ? 1 : 0));\n\n    int totalReplicas = 0;\n    for (Map.Entry<Replica.Type, Integer> entry : replicaTypesVsCount.entrySet()) {\n      totalReplicas += entry.getValue();\n    }\n    if (totalReplicas > 1)  {\n      if (node != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'name' parameter is specified\");\n      }\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'coreNodeName' parameter is specified\");\n      }\n    }\n\n    List<CreateReplica> createReplicas = buildReplicaPositions(ocmh.cloudManager, clusterState, cloudConfig, collectionName, message, replicaTypesVsCount)\n          .stream()\n          .map(replicaPosition -> assignReplicaDetails(ocmh.cloudManager, clusterState, message, replicaPosition))\n          .collect(Collectors.toList());\n\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n\n    final ShardRequestTracker shardRequestTracker = ocmh.asyncRequestTracker(asyncId);\n    for (CreateReplica createReplica : createReplicas) {\n      assert createReplica.coreName != null;\n      ModifiableSolrParams params = getReplicaParams(clusterState, cloudConfig, message, results, collectionName, coll, skipCreateReplicaInClusterState, asyncId, shardHandler, createReplica);\n      shardRequestTracker.sendShardRequest(createReplica.node, params, shardHandler);\n    }\n\n    Runnable runnable = () -> {\n      shardRequestTracker.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\");\n      for (CreateReplica replica : createReplicas) {\n        ocmh.waitForCoreNodeName(collectionName, replica.node, replica.coreName);\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        SolrCloseableLatch latch = new SolrCloseableLatch(totalReplicas, ocmh);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collectionName, null,\n            createReplicas.stream().map(createReplica -> createReplica.coreName).collect(Collectors.toList()), latch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collectionName, watcher);\n          runnable.run();\n          if (!latch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collectionName, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n    return createReplicas.stream()\n        .map(createReplica -> new ZkNodeProps(\n            ZkStateReader.COLLECTION_PROP, createReplica.collectionName,\n            ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n            ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n            ZkStateReader.NODE_NAME_PROP, createReplica.node\n        ))\n        .collect(Collectors.toList());\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  List<ZkNodeProps> addReplica(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException, KeeperException {\n    if (log.isDebugEnabled()) {\n      log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    }\n\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String shard = message.getStr(SHARD_ID_PROP);\n\n    final String collectionName;\n    if (followAliases) {\n      collectionName =  ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    DocCollection coll = clusterState.getCollection(collectionName);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collectionName + \" shard: \" + shard + \" does not exist\");\n    }\n\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    final String asyncId = message.getStr(ASYNC);\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n\n    if (node != null && createNodeSetStr != null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both 'node' and 'createNodeSet' parameters cannot be specified together.\");\n    }\n\n    int timeout = message.getInt(TIMEOUT, 10 * 60); // 10 minutes\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n    replicaTypesVsCount.put(Replica.Type.NRT, message.getInt(NRT_REPLICAS, replicaType == Replica.Type.NRT ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.TLOG, message.getInt(TLOG_REPLICAS, replicaType == Replica.Type.TLOG ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.PULL, message.getInt(PULL_REPLICAS, replicaType == Replica.Type.PULL ? 1 : 0));\n\n    int totalReplicas = 0;\n    for (Map.Entry<Replica.Type, Integer> entry : replicaTypesVsCount.entrySet()) {\n      totalReplicas += entry.getValue();\n    }\n    if (totalReplicas > 1)  {\n      if (node != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'name' parameter is specified\");\n      }\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'coreNodeName' parameter is specified\");\n      }\n    }\n\n    List<CreateReplica> createReplicas = buildReplicaPositions(ocmh.cloudManager, clusterState, collectionName, message, replicaTypesVsCount)\n          .stream()\n          .map(replicaPosition -> assignReplicaDetails(ocmh.cloudManager, clusterState, message, replicaPosition))\n          .collect(Collectors.toList());\n\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n\n    final ShardRequestTracker shardRequestTracker = ocmh.asyncRequestTracker(asyncId);\n    for (CreateReplica createReplica : createReplicas) {\n      assert createReplica.coreName != null;\n      ModifiableSolrParams params = getReplicaParams(clusterState, message, results, collectionName, coll, skipCreateReplicaInClusterState, asyncId, shardHandler, createReplica);\n      shardRequestTracker.sendShardRequest(createReplica.node, params, shardHandler);\n    }\n\n    Runnable runnable = () -> {\n      shardRequestTracker.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\");\n      for (CreateReplica replica : createReplicas) {\n        ocmh.waitForCoreNodeName(collectionName, replica.node, replica.coreName);\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        SolrCloseableLatch latch = new SolrCloseableLatch(totalReplicas, ocmh);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collectionName, null,\n            createReplicas.stream().map(createReplica -> createReplica.coreName).collect(Collectors.toList()), latch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collectionName, watcher);\n          runnable.run();\n          if (!latch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collectionName, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n    return createReplicas.stream()\n        .map(createReplica -> new ZkNodeProps(\n            ZkStateReader.COLLECTION_PROP, createReplica.collectionName,\n            ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n            ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n            ZkStateReader.NODE_NAME_PROP, createReplica.node\n        ))\n        .collect(Collectors.toList());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#addReplica(ClusterState,CloudConfig,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  List<ZkNodeProps> addReplica(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException, KeeperException {\n    if (log.isDebugEnabled()) {\n      log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    }\n\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String shard = message.getStr(SHARD_ID_PROP);\n\n    final String collectionName;\n    if (followAliases) {\n      collectionName =  ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    DocCollection coll = clusterState.getCollection(collectionName);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collectionName + \" shard: \" + shard + \" does not exist\");\n    }\n\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    final String asyncId = message.getStr(ASYNC);\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n\n    if (node != null && createNodeSetStr != null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both 'node' and 'createNodeSet' parameters cannot be specified together.\");\n    }\n\n    int timeout = message.getInt(TIMEOUT, 10 * 60); // 10 minutes\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n    replicaTypesVsCount.put(Replica.Type.NRT, message.getInt(NRT_REPLICAS, replicaType == Replica.Type.NRT ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.TLOG, message.getInt(TLOG_REPLICAS, replicaType == Replica.Type.TLOG ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.PULL, message.getInt(PULL_REPLICAS, replicaType == Replica.Type.PULL ? 1 : 0));\n\n    int totalReplicas = 0;\n    for (Map.Entry<Replica.Type, Integer> entry : replicaTypesVsCount.entrySet()) {\n      totalReplicas += entry.getValue();\n    }\n    if (totalReplicas > 1)  {\n      if (node != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'name' parameter is specified\");\n      }\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'coreNodeName' parameter is specified\");\n      }\n    }\n\n    List<CreateReplica> createReplicas = buildReplicaPositions(ocmh.cloudManager, clusterState, collectionName, message, replicaTypesVsCount)\n          .stream()\n          .map(replicaPosition -> assignReplicaDetails(ocmh.cloudManager, clusterState, message, replicaPosition))\n          .collect(Collectors.toList());\n\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n\n    final ShardRequestTracker shardRequestTracker = ocmh.asyncRequestTracker(asyncId);\n    for (CreateReplica createReplica : createReplicas) {\n      assert createReplica.coreName != null;\n      ModifiableSolrParams params = getReplicaParams(clusterState, message, results, collectionName, coll, skipCreateReplicaInClusterState, asyncId, shardHandler, createReplica);\n      shardRequestTracker.sendShardRequest(createReplica.node, params, shardHandler);\n    }\n\n    Runnable runnable = () -> {\n      shardRequestTracker.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\");\n      for (CreateReplica replica : createReplicas) {\n        ocmh.waitForCoreNodeName(collectionName, replica.node, replica.coreName);\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        SolrCloseableLatch latch = new SolrCloseableLatch(totalReplicas, ocmh);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collectionName, null,\n            createReplicas.stream().map(createReplica -> createReplica.coreName).collect(Collectors.toList()), latch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collectionName, watcher);\n          runnable.run();\n          if (!latch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collectionName, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n    return createReplicas.stream()\n        .map(createReplica -> new ZkNodeProps(\n            ZkStateReader.COLLECTION_PROP, createReplica.collectionName,\n            ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n            ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n            ZkStateReader.NODE_NAME_PROP, createReplica.node\n        ))\n        .collect(Collectors.toList());\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  List<ZkNodeProps> addReplica(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException, KeeperException {\n    if (log.isDebugEnabled()) {\n      log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    }\n\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String shard = message.getStr(SHARD_ID_PROP);\n\n    final String collectionName;\n    if (followAliases) {\n      collectionName =  ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    DocCollection coll = clusterState.getCollection(collectionName);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collectionName + \" shard: \" + shard + \" does not exist\");\n    }\n\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    final String asyncId = message.getStr(ASYNC);\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n\n    if (node != null && createNodeSetStr != null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Both 'node' and 'createNodeSet' parameters cannot be specified together.\");\n    }\n\n    int timeout = message.getInt(TIMEOUT, 10 * 60); // 10 minutes\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n    replicaTypesVsCount.put(Replica.Type.NRT, message.getInt(NRT_REPLICAS, replicaType == Replica.Type.NRT ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.TLOG, message.getInt(TLOG_REPLICAS, replicaType == Replica.Type.TLOG ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.PULL, message.getInt(PULL_REPLICAS, replicaType == Replica.Type.PULL ? 1 : 0));\n\n    int totalReplicas = 0;\n    for (Map.Entry<Replica.Type, Integer> entry : replicaTypesVsCount.entrySet()) {\n      totalReplicas += entry.getValue();\n    }\n    if (totalReplicas > 1)  {\n      if (node != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'name' parameter is specified\");\n      }\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'coreNodeName' parameter is specified\");\n      }\n    }\n\n    List<CreateReplica> createReplicas = buildReplicaPositions(ocmh.cloudManager, clusterState, cloudConfig, collectionName, message, replicaTypesVsCount)\n          .stream()\n          .map(replicaPosition -> assignReplicaDetails(ocmh.cloudManager, clusterState, message, replicaPosition))\n          .collect(Collectors.toList());\n\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n\n    final ShardRequestTracker shardRequestTracker = ocmh.asyncRequestTracker(asyncId);\n    for (CreateReplica createReplica : createReplicas) {\n      assert createReplica.coreName != null;\n      ModifiableSolrParams params = getReplicaParams(clusterState, cloudConfig, message, results, collectionName, coll, skipCreateReplicaInClusterState, asyncId, shardHandler, createReplica);\n      shardRequestTracker.sendShardRequest(createReplica.node, params, shardHandler);\n    }\n\n    Runnable runnable = () -> {\n      shardRequestTracker.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\");\n      for (CreateReplica replica : createReplicas) {\n        ocmh.waitForCoreNodeName(collectionName, replica.node, replica.coreName);\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        SolrCloseableLatch latch = new SolrCloseableLatch(totalReplicas, ocmh);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collectionName, null,\n            createReplicas.stream().map(createReplica -> createReplica.coreName).collect(Collectors.toList()), latch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collectionName, watcher);\n          runnable.run();\n          if (!latch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collectionName, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n    return createReplicas.stream()\n        .map(createReplica -> new ZkNodeProps(\n            ZkStateReader.COLLECTION_PROP, createReplica.collectionName,\n            ZkStateReader.SHARD_ID_PROP, createReplica.sliceName,\n            ZkStateReader.CORE_NAME_PROP, createReplica.coreName,\n            ZkStateReader.NODE_NAME_PROP, createReplica.node\n        ))\n        .collect(Collectors.toList());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"c526352db87264a72a7a9ad68c1b769b81e54305":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c526352db87264a72a7a9ad68c1b769b81e54305"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}