{"path":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery].DocsQueue#DocsQueue(List[DocsAndPositionsEnum]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery].DocsQueue#DocsQueue(List[DocsAndPositionsEnum]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery].DocsQueue#DocsQueue(List[DocsAndPositionsEnum]).mjava","sourceNew":"    DocsQueue(List<DocsAndPositionsEnum> docsEnums) throws IOException {\n      super(docsEnums.size());\n\n      Iterator<DocsAndPositionsEnum> i = docsEnums.iterator();\n      while (i.hasNext()) {\n        DocsAndPositionsEnum postings = i.next();\n        if (postings.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n          add(postings);\n        }\n      }\n    }\n\n","sourceOld":"    DocsQueue(List<DocsAndPositionsEnum> docsEnums) throws IOException {\n      super(docsEnums.size());\n\n      Iterator<DocsAndPositionsEnum> i = docsEnums.iterator();\n      while (i.hasNext()) {\n        DocsAndPositionsEnum postings = i.next();\n        if (postings.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n          add(postings);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery].DocsQueue#DocsQueue(List[DocsAndPositionsEnum]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery].DocsQueue#DocsQueue(List[DocsAndPositionsEnum]).mjava","sourceNew":"    DocsQueue(List<DocsAndPositionsEnum> docsEnums) throws IOException {\n      super(docsEnums.size());\n\n      Iterator<DocsAndPositionsEnum> i = docsEnums.iterator();\n      while (i.hasNext()) {\n        DocsAndPositionsEnum postings = i.next();\n        if (postings.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          add(postings);\n        }\n      }\n    }\n\n","sourceOld":"    DocsQueue(List<DocsAndPositionsEnum> docsEnums) throws IOException {\n      super(docsEnums.size());\n\n      Iterator<DocsAndPositionsEnum> i = docsEnums.iterator();\n      while (i.hasNext()) {\n        DocsAndPositionsEnum postings = i.next();\n        if (postings.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n          add(postings);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery].DocsQueue#DocsQueue(List[DocsAndPositionsEnum]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery].DocsQueue#DocsQueue(List[DocsAndPositionsEnum]).mjava","sourceNew":"    DocsQueue(List<DocsAndPositionsEnum> docsEnums) throws IOException {\n      super(docsEnums.size());\n\n      Iterator<DocsAndPositionsEnum> i = docsEnums.iterator();\n      while (i.hasNext()) {\n        DocsAndPositionsEnum postings = i.next();\n        if (postings.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          add(postings);\n        }\n      }\n    }\n\n","sourceOld":"    DocsQueue(List<DocsAndPositionsEnum> docsEnums) throws IOException {\n      super(docsEnums.size());\n\n      Iterator<DocsAndPositionsEnum> i = docsEnums.iterator();\n      while (i.hasNext()) {\n        DocsAndPositionsEnum postings = i.next();\n        if (postings.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n          add(postings);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery].DocsQueue#DocsQueue(List[PostingsEnum]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery].DocsQueue#DocsQueue(List[DocsAndPositionsEnum]).mjava","sourceNew":"    DocsQueue(List<PostingsEnum> postingsEnums) throws IOException {\n      super(postingsEnums.size());\n\n      Iterator<PostingsEnum> i = postingsEnums.iterator();\n      while (i.hasNext()) {\n        PostingsEnum postings = i.next();\n        if (postings.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          add(postings);\n        }\n      }\n    }\n\n","sourceOld":"    DocsQueue(List<DocsAndPositionsEnum> docsEnums) throws IOException {\n      super(docsEnums.size());\n\n      Iterator<DocsAndPositionsEnum> i = docsEnums.iterator();\n      while (i.hasNext()) {\n        DocsAndPositionsEnum postings = i.next();\n        if (postings.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          add(postings);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}