{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testBinaryFieldOffsetLength().mjava","sourceNew":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1219\n  public void testBinaryFieldOffsetLength() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    byte[] b = new byte[50];\n    for(int i=0;i<50;i++)\n      b[i] = (byte) (i+77);\n    \n    Document doc = new Document();\n    Field f = new Field(\"binary\", b, 10, 17, Field.Store.YES);\n    byte[] bx = f.getBinaryValue();\n    assertTrue(bx != null);\n    assertEquals(50, bx.length);\n    assertEquals(10, f.getBinaryOffset());\n    assertEquals(17, f.getBinaryLength());\n    doc.add(f);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    doc = ir.document(0);\n    f = doc.getField(\"binary\");\n    b = f.getBinaryValue();\n    assertTrue(b != null);\n    assertEquals(17, b.length, 17);\n    assertEquals(87, b[0]);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}