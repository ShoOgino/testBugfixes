{"path":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUCollationKeyFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"f0c5ccd1fd9ff98f683730d84e4768468ed0da6c","date":1288699398,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUCollationKeyFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(ResourceLoader loader) {\n    String custom = args.get(\"custom\");\n    String localeID = args.get(\"locale\");\n    String strength = args.get(\"strength\");\n    String decomposition = args.get(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUCollationKeyFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(ResourceLoader loader) {\n    String custom = args.get(\"custom\");\n    String localeID = args.get(\"locale\");\n    String strength = args.get(\"strength\");\n    String decomposition = args.get(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUCollationKeyFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(ResourceLoader loader) {\n    String custom = args.get(\"custom\");\n    String localeID = args.get(\"locale\");\n    String strength = args.get(\"strength\");\n    String decomposition = args.get(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/main/java/org/apache/solr/analysis/ICUCollationKeyFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUCollationKeyFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String custom = args.get(\"custom\");\n    String localeID = args.get(\"locale\");\n    String strength = args.get(\"strength\");\n    String decomposition = args.get(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String custom = args.get(\"custom\");\n    String localeID = args.get(\"locale\");\n    String strength = args.get(\"strength\");\n    String decomposition = args.get(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUCollationKeyFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/contrib/analysis-extras/src/main/java/org/apache/solr/analysis/ICUCollationKeyFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String custom = args.get(\"custom\");\n    String localeID = args.get(\"locale\");\n    String strength = args.get(\"strength\");\n    String decomposition = args.get(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String custom = args.get(\"custom\");\n    String localeID = args.get(\"locale\");\n    String strength = args.get(\"strength\");\n    String decomposition = args.get(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a540670bcd877e5818e2f2a9fadfcf9c0534e16d","date":1322478204,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUCollationKeyFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUCollationKeyFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String custom = args.get(\"custom\");\n    String localeID = args.get(\"locale\");\n    String strength = args.get(\"strength\");\n    String decomposition = args.get(\"decomposition\");\n\n    String alternate = args.get(\"alternate\");\n    String caseLevel = args.get(\"caseLevel\");\n    String caseFirst = args.get(\"caseFirst\");\n    String numeric = args.get(\"numeric\");\n    String variableTop = args.get(\"variableTop\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    \n    // expert options: concrete subclasses are always a RuleBasedCollator\n    RuleBasedCollator rbc = (RuleBasedCollator) collator;\n    if (alternate != null) {\n      if (alternate.equalsIgnoreCase(\"shifted\")) {\n        rbc.setAlternateHandlingShifted(true);\n      } else if (alternate.equalsIgnoreCase(\"non-ignorable\")) {\n        rbc.setAlternateHandlingShifted(false);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid alternate: \" + alternate);\n      }\n    }\n    if (caseLevel != null) {\n      rbc.setCaseLevel(Boolean.parseBoolean(caseLevel));\n    }\n    if (caseFirst != null) {\n      if (caseFirst.equalsIgnoreCase(\"lower\")) {\n        rbc.setLowerCaseFirst(true);\n      } else if (caseFirst.equalsIgnoreCase(\"upper\")) {\n        rbc.setUpperCaseFirst(true);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid caseFirst: \" + caseFirst);\n      }\n    }\n    if (numeric != null) {\n      rbc.setNumericCollation(Boolean.parseBoolean(numeric));\n    }\n    if (variableTop != null) {\n      rbc.setVariableTop(variableTop);\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String custom = args.get(\"custom\");\n    String localeID = args.get(\"locale\");\n    String strength = args.get(\"strength\");\n    String decomposition = args.get(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUCollationKeyFilterFactory#inform(ResourceLoader).mjava","sourceNew":null,"sourceOld":"  public void inform(ResourceLoader loader) {\n    String custom = args.get(\"custom\");\n    String localeID = args.get(\"locale\");\n    String strength = args.get(\"strength\");\n    String decomposition = args.get(\"decomposition\");\n\n    String alternate = args.get(\"alternate\");\n    String caseLevel = args.get(\"caseLevel\");\n    String caseFirst = args.get(\"caseFirst\");\n    String numeric = args.get(\"numeric\");\n    String variableTop = args.get(\"variableTop\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    \n    // expert options: concrete subclasses are always a RuleBasedCollator\n    RuleBasedCollator rbc = (RuleBasedCollator) collator;\n    if (alternate != null) {\n      if (alternate.equalsIgnoreCase(\"shifted\")) {\n        rbc.setAlternateHandlingShifted(true);\n      } else if (alternate.equalsIgnoreCase(\"non-ignorable\")) {\n        rbc.setAlternateHandlingShifted(false);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid alternate: \" + alternate);\n      }\n    }\n    if (caseLevel != null) {\n      rbc.setCaseLevel(Boolean.parseBoolean(caseLevel));\n    }\n    if (caseFirst != null) {\n      if (caseFirst.equalsIgnoreCase(\"lower\")) {\n        rbc.setLowerCaseFirst(true);\n      } else if (caseFirst.equalsIgnoreCase(\"upper\")) {\n        rbc.setUpperCaseFirst(true);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid caseFirst: \" + caseFirst);\n      }\n    }\n    if (numeric != null) {\n      rbc.setNumericCollation(Boolean.parseBoolean(numeric));\n    }\n    if (variableTop != null) {\n      rbc.setVariableTop(variableTop);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0c5ccd1fd9ff98f683730d84e4768468ed0da6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["a540670bcd877e5818e2f2a9fadfcf9c0534e16d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","f0c5ccd1fd9ff98f683730d84e4768468ed0da6c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0c5ccd1fd9ff98f683730d84e4768468ed0da6c","f0c5ccd1fd9ff98f683730d84e4768468ed0da6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0c5ccd1fd9ff98f683730d84e4768468ed0da6c"],"a540670bcd877e5818e2f2a9fadfcf9c0534e16d":["f0c5ccd1fd9ff98f683730d84e4768468ed0da6c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0c5ccd1fd9ff98f683730d84e4768468ed0da6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"f0c5ccd1fd9ff98f683730d84e4768468ed0da6c":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a3776dccca01c11e7046323cfad46a3b4a471233","85a883878c0af761245ab048babc63d099f835f3","a540670bcd877e5818e2f2a9fadfcf9c0534e16d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0c5ccd1fd9ff98f683730d84e4768468ed0da6c","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"85a883878c0af761245ab048babc63d099f835f3":[],"a540670bcd877e5818e2f2a9fadfcf9c0534e16d":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}