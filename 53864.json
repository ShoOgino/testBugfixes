{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(NumericDocValues,TopGroups[BytesRef],TopGroups[BytesRef],boolean,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(NumericDocValues,TopGroups[BytesRef],TopGroups[BytesRef],boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(FieldCache.Ints,TopGroups[BytesRef],TopGroups[BytesRef],boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  private void assertEquals(NumericDocValues docIDtoID, TopGroups<BytesRef> expected, TopGroups<BytesRef> actual, boolean verifyGroupValues, boolean verifyTotalGroupCount, boolean verifySortValues, boolean testScores, boolean idvBasedImplsUsed) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(\"expected.groups.length != actual.groups.length\", expected.groups.length, actual.groups.length);\n    assertEquals(\"expected.totalHitCount != actual.totalHitCount\", expected.totalHitCount, actual.totalHitCount);\n    assertEquals(\"expected.totalGroupedHitCount != actual.totalGroupedHitCount\", expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null && verifyTotalGroupCount) {\n      assertEquals(\"expected.totalGroupCount != actual.totalGroupCount\", expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs<BytesRef> expectedGroup = expected.groups[groupIDX];\n      final GroupDocs<BytesRef> actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        if (idvBasedImplsUsed) {\n          if (actualGroup.groupValue.length == 0) {\n            assertNull(expectedGroup.groupValue);\n          } else {\n            assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n          }\n        } else {\n          assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n        }\n\n      }\n      if (verifySortValues) {\n        assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n      }\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID.get(actualFD.doc) + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID.get(actualFD.doc));\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score, 0.1);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        if (verifySortValues) {\n          assertArrayEquals(expectedFD.fields, actualFD.fields);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(FieldCache.Ints docIDtoID, TopGroups<BytesRef> expected, TopGroups<BytesRef> actual, boolean verifyGroupValues, boolean verifyTotalGroupCount, boolean verifySortValues, boolean testScores, boolean idvBasedImplsUsed) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(\"expected.groups.length != actual.groups.length\", expected.groups.length, actual.groups.length);\n    assertEquals(\"expected.totalHitCount != actual.totalHitCount\", expected.totalHitCount, actual.totalHitCount);\n    assertEquals(\"expected.totalGroupedHitCount != actual.totalGroupedHitCount\", expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null && verifyTotalGroupCount) {\n      assertEquals(\"expected.totalGroupCount != actual.totalGroupCount\", expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs<BytesRef> expectedGroup = expected.groups[groupIDX];\n      final GroupDocs<BytesRef> actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        if (idvBasedImplsUsed) {\n          if (actualGroup.groupValue.length == 0) {\n            assertNull(expectedGroup.groupValue);\n          } else {\n            assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n          }\n        } else {\n          assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n        }\n\n      }\n      if (verifySortValues) {\n        assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n      }\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID.get(actualFD.doc) + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID.get(actualFD.doc));\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score, 0.1);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        if (verifySortValues) {\n          assertArrayEquals(expectedFD.fields, actualFD.fields);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(NumericDocValues,TopGroups[BytesRef],TopGroups[BytesRef],boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(FieldCache.Ints,TopGroups[BytesRef],TopGroups[BytesRef],boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  private void assertEquals(NumericDocValues docIDtoID, TopGroups<BytesRef> expected, TopGroups<BytesRef> actual, boolean verifyGroupValues, boolean verifyTotalGroupCount, boolean verifySortValues, boolean testScores, boolean idvBasedImplsUsed) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(\"expected.groups.length != actual.groups.length\", expected.groups.length, actual.groups.length);\n    assertEquals(\"expected.totalHitCount != actual.totalHitCount\", expected.totalHitCount, actual.totalHitCount);\n    assertEquals(\"expected.totalGroupedHitCount != actual.totalGroupedHitCount\", expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null && verifyTotalGroupCount) {\n      assertEquals(\"expected.totalGroupCount != actual.totalGroupCount\", expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs<BytesRef> expectedGroup = expected.groups[groupIDX];\n      final GroupDocs<BytesRef> actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        if (idvBasedImplsUsed) {\n          if (actualGroup.groupValue.length == 0) {\n            assertNull(expectedGroup.groupValue);\n          } else {\n            assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n          }\n        } else {\n          assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n        }\n\n      }\n      if (verifySortValues) {\n        assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n      }\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID.get(actualFD.doc) + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID.get(actualFD.doc));\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score, 0.1);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        if (verifySortValues) {\n          assertArrayEquals(expectedFD.fields, actualFD.fields);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(FieldCache.Ints docIDtoID, TopGroups<BytesRef> expected, TopGroups<BytesRef> actual, boolean verifyGroupValues, boolean verifyTotalGroupCount, boolean verifySortValues, boolean testScores, boolean idvBasedImplsUsed) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(\"expected.groups.length != actual.groups.length\", expected.groups.length, actual.groups.length);\n    assertEquals(\"expected.totalHitCount != actual.totalHitCount\", expected.totalHitCount, actual.totalHitCount);\n    assertEquals(\"expected.totalGroupedHitCount != actual.totalGroupedHitCount\", expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null && verifyTotalGroupCount) {\n      assertEquals(\"expected.totalGroupCount != actual.totalGroupCount\", expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs<BytesRef> expectedGroup = expected.groups[groupIDX];\n      final GroupDocs<BytesRef> actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        if (idvBasedImplsUsed) {\n          if (actualGroup.groupValue.length == 0) {\n            assertNull(expectedGroup.groupValue);\n          } else {\n            assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n          }\n        } else {\n          assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n        }\n\n      }\n      if (verifySortValues) {\n        assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n      }\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID.get(actualFD.doc) + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID.get(actualFD.doc));\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score, 0.1);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        if (verifySortValues) {\n          assertArrayEquals(expectedFD.fields, actualFD.fields);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(NumericDocValues,TopGroups[BytesRef],TopGroups[BytesRef],boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(FieldCache.Ints,TopGroups[BytesRef],TopGroups[BytesRef],boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  private void assertEquals(NumericDocValues docIDtoID, TopGroups<BytesRef> expected, TopGroups<BytesRef> actual, boolean verifyGroupValues, boolean verifyTotalGroupCount, boolean verifySortValues, boolean testScores, boolean idvBasedImplsUsed) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(\"expected.groups.length != actual.groups.length\", expected.groups.length, actual.groups.length);\n    assertEquals(\"expected.totalHitCount != actual.totalHitCount\", expected.totalHitCount, actual.totalHitCount);\n    assertEquals(\"expected.totalGroupedHitCount != actual.totalGroupedHitCount\", expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null && verifyTotalGroupCount) {\n      assertEquals(\"expected.totalGroupCount != actual.totalGroupCount\", expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs<BytesRef> expectedGroup = expected.groups[groupIDX];\n      final GroupDocs<BytesRef> actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        if (idvBasedImplsUsed) {\n          if (actualGroup.groupValue.length == 0) {\n            assertNull(expectedGroup.groupValue);\n          } else {\n            assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n          }\n        } else {\n          assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n        }\n\n      }\n      if (verifySortValues) {\n        assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n      }\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID.get(actualFD.doc) + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID.get(actualFD.doc));\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score, 0.1);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        if (verifySortValues) {\n          assertArrayEquals(expectedFD.fields, actualFD.fields);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(FieldCache.Ints docIDtoID, TopGroups<BytesRef> expected, TopGroups<BytesRef> actual, boolean verifyGroupValues, boolean verifyTotalGroupCount, boolean verifySortValues, boolean testScores, boolean idvBasedImplsUsed) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(\"expected.groups.length != actual.groups.length\", expected.groups.length, actual.groups.length);\n    assertEquals(\"expected.totalHitCount != actual.totalHitCount\", expected.totalHitCount, actual.totalHitCount);\n    assertEquals(\"expected.totalGroupedHitCount != actual.totalGroupedHitCount\", expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null && verifyTotalGroupCount) {\n      assertEquals(\"expected.totalGroupCount != actual.totalGroupCount\", expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs<BytesRef> expectedGroup = expected.groups[groupIDX];\n      final GroupDocs<BytesRef> actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        if (idvBasedImplsUsed) {\n          if (actualGroup.groupValue.length == 0) {\n            assertNull(expectedGroup.groupValue);\n          } else {\n            assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n          }\n        } else {\n          assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n        }\n\n      }\n      if (verifySortValues) {\n        assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n      }\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID.get(actualFD.doc) + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID.get(actualFD.doc));\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score, 0.1);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        if (verifySortValues) {\n          assertArrayEquals(expectedFD.fields, actualFD.fields);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups[BytesRef],TopGroups[BytesRef],boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(NumericDocValues,TopGroups[BytesRef],TopGroups[BytesRef],boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  private void assertEquals(int[] docIDtoID, TopGroups<BytesRef> expected, TopGroups<BytesRef> actual, boolean verifyGroupValues, boolean verifyTotalGroupCount, boolean verifySortValues, boolean testScores, boolean idvBasedImplsUsed) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(\"expected.groups.length != actual.groups.length\", expected.groups.length, actual.groups.length);\n    assertEquals(\"expected.totalHitCount != actual.totalHitCount\", expected.totalHitCount, actual.totalHitCount);\n    assertEquals(\"expected.totalGroupedHitCount != actual.totalGroupedHitCount\", expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null && verifyTotalGroupCount) {\n      assertEquals(\"expected.totalGroupCount != actual.totalGroupCount\", expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs<BytesRef> expectedGroup = expected.groups[groupIDX];\n      final GroupDocs<BytesRef> actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        if (idvBasedImplsUsed) {\n          if (actualGroup.groupValue.length == 0) {\n            assertNull(expectedGroup.groupValue);\n          } else {\n            assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n          }\n        } else {\n          assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n        }\n\n      }\n      if (verifySortValues) {\n        assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n      }\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID[actualFD.doc] + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score, 0.1);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        if (verifySortValues) {\n          assertArrayEquals(expectedFD.fields, actualFD.fields);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(NumericDocValues docIDtoID, TopGroups<BytesRef> expected, TopGroups<BytesRef> actual, boolean verifyGroupValues, boolean verifyTotalGroupCount, boolean verifySortValues, boolean testScores, boolean idvBasedImplsUsed) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(\"expected.groups.length != actual.groups.length\", expected.groups.length, actual.groups.length);\n    assertEquals(\"expected.totalHitCount != actual.totalHitCount\", expected.totalHitCount, actual.totalHitCount);\n    assertEquals(\"expected.totalGroupedHitCount != actual.totalGroupedHitCount\", expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null && verifyTotalGroupCount) {\n      assertEquals(\"expected.totalGroupCount != actual.totalGroupCount\", expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs<BytesRef> expectedGroup = expected.groups[groupIDX];\n      final GroupDocs<BytesRef> actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        if (idvBasedImplsUsed) {\n          if (actualGroup.groupValue.length == 0) {\n            assertNull(expectedGroup.groupValue);\n          } else {\n            assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n          }\n        } else {\n          assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n        }\n\n      }\n      if (verifySortValues) {\n        assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n      }\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID.get(actualFD.doc) + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID.get(actualFD.doc));\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score, 0.1);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        if (verifySortValues) {\n          assertArrayEquals(expectedFD.fields, actualFD.fields);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(NumericDocValues,TopGroups[BytesRef],TopGroups[BytesRef],boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  private void assertEquals(NumericDocValues docIDtoID, TopGroups<BytesRef> expected, TopGroups<BytesRef> actual, boolean verifyGroupValues, boolean verifyTotalGroupCount, boolean verifySortValues, boolean testScores, boolean idvBasedImplsUsed) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(\"expected.groups.length != actual.groups.length\", expected.groups.length, actual.groups.length);\n    assertEquals(\"expected.totalHitCount != actual.totalHitCount\", expected.totalHitCount, actual.totalHitCount);\n    assertEquals(\"expected.totalGroupedHitCount != actual.totalGroupedHitCount\", expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null && verifyTotalGroupCount) {\n      assertEquals(\"expected.totalGroupCount != actual.totalGroupCount\", expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs<BytesRef> expectedGroup = expected.groups[groupIDX];\n      final GroupDocs<BytesRef> actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        if (idvBasedImplsUsed) {\n          if (actualGroup.groupValue.length == 0) {\n            assertNull(expectedGroup.groupValue);\n          } else {\n            assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n          }\n        } else {\n          assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n        }\n\n      }\n      if (verifySortValues) {\n        assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n      }\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID.get(actualFD.doc) + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID.get(actualFD.doc));\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score, 0.1);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        if (verifySortValues) {\n          assertArrayEquals(expectedFD.fields, actualFD.fields);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(NumericDocValues,TopGroups[BytesRef],TopGroups[BytesRef],boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  private void assertEquals(NumericDocValues docIDtoID, TopGroups<BytesRef> expected, TopGroups<BytesRef> actual, boolean verifyGroupValues, boolean verifyTotalGroupCount, boolean verifySortValues, boolean testScores, boolean idvBasedImplsUsed) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(\"expected.groups.length != actual.groups.length\", expected.groups.length, actual.groups.length);\n    assertEquals(\"expected.totalHitCount != actual.totalHitCount\", expected.totalHitCount, actual.totalHitCount);\n    assertEquals(\"expected.totalGroupedHitCount != actual.totalGroupedHitCount\", expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null && verifyTotalGroupCount) {\n      assertEquals(\"expected.totalGroupCount != actual.totalGroupCount\", expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs<BytesRef> expectedGroup = expected.groups[groupIDX];\n      final GroupDocs<BytesRef> actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        if (idvBasedImplsUsed) {\n          if (actualGroup.groupValue.length == 0) {\n            assertNull(expectedGroup.groupValue);\n          } else {\n            assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n          }\n        } else {\n          assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n        }\n\n      }\n      if (verifySortValues) {\n        assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n      }\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID.get(actualFD.doc) + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID.get(actualFD.doc));\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score, 0.1);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        if (verifySortValues) {\n          assertArrayEquals(expectedFD.fields, actualFD.fields);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["93dd449115a9247533e44bab47e8429e5dccbc6d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["93dd449115a9247533e44bab47e8429e5dccbc6d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}