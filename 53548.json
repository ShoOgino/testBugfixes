{"path":"solr/core/src/java/org/apache/solr/cloud/NodeStateWatcher#processStateChange().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/NodeStateWatcher#processStateChange().mjava","pathOld":"/dev/null","sourceNew":"  private void processStateChange() throws KeeperException, InterruptedException {\n    byte[] data = zkClient.getData(path, this, null, true);\n\n    if (data != null) {\n        CoreState[] states = CoreState.load(data);\n        List<CoreState> stateList = Arrays.asList(states);\n        HashSet<CoreState> modifiedCores = new HashSet<CoreState>();\n        modifiedCores.addAll(stateList);\n        modifiedCores.removeAll(currentState);\n\n        HashSet<CoreState> newState = new HashSet<CoreState>();\n        newState.addAll(stateList);\n        \n        HashMap<String, CoreState> lookup = new HashMap<String, CoreState>();\n        for(CoreState state: states) {\n          lookup.put(state.getCoreName(), state);\n        }\n\n        //check for status change\n        for(CoreState state: currentState) {\n          if(lookup.containsKey(state.getCoreName())) {\n            if(!state.getProperties().equals(lookup.get(state.getCoreName()).getProperties())) {\n              modifiedCores.add(lookup.get(state.getCoreName()));\n            }\n          }\n        }\n        \n        currentState = Collections.unmodifiableSet(newState);\n\n        if (modifiedCores.size() > 0) {\n          try {\n            listener.coreChanged(nodeName, Collections.unmodifiableSet(modifiedCores));\n          } catch (KeeperException e) {\n            log.warn(\"Could not talk to ZK\", e);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Could not talk to ZK\", e);\n          }\n        }\n\n    } else {\n      // ignore null state\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/NodeStateWatcher#processStateChange().mjava","pathOld":"/dev/null","sourceNew":"  private void processStateChange() throws KeeperException, InterruptedException {\n    byte[] data = zkClient.getData(path, this, null, true);\n\n    if (data != null) {\n        CoreState[] states = CoreState.load(data);\n        List<CoreState> stateList = Arrays.asList(states);\n        HashSet<CoreState> modifiedCores = new HashSet<CoreState>();\n        modifiedCores.addAll(stateList);\n        modifiedCores.removeAll(currentState);\n\n        HashSet<CoreState> newState = new HashSet<CoreState>();\n        newState.addAll(stateList);\n        \n        HashMap<String, CoreState> lookup = new HashMap<String, CoreState>();\n        for(CoreState state: states) {\n          lookup.put(state.getCoreName(), state);\n        }\n\n        //check for status change\n        for(CoreState state: currentState) {\n          if(lookup.containsKey(state.getCoreName())) {\n            if(!state.getProperties().equals(lookup.get(state.getCoreName()).getProperties())) {\n              modifiedCores.add(lookup.get(state.getCoreName()));\n            }\n          }\n        }\n        \n        currentState = Collections.unmodifiableSet(newState);\n\n        if (modifiedCores.size() > 0) {\n          try {\n            listener.coreChanged(nodeName, Collections.unmodifiableSet(modifiedCores));\n          } catch (KeeperException e) {\n            log.warn(\"Could not talk to ZK\", e);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Could not talk to ZK\", e);\n          }\n        }\n\n    } else {\n      // ignore null state\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/NodeStateWatcher#processStateChange().mjava","pathOld":"/dev/null","sourceNew":"  private void processStateChange() throws KeeperException, InterruptedException {\n    byte[] data = zkClient.getData(path, this, null, true);\n\n    if (data != null) {\n        CoreState[] states = CoreState.load(data);\n        List<CoreState> stateList = Arrays.asList(states);\n        HashSet<CoreState> modifiedCores = new HashSet<CoreState>();\n        modifiedCores.addAll(stateList);\n        modifiedCores.removeAll(currentState);\n\n        HashSet<CoreState> newState = new HashSet<CoreState>();\n        newState.addAll(stateList);\n        \n        HashMap<String, CoreState> lookup = new HashMap<String, CoreState>();\n        for(CoreState state: states) {\n          lookup.put(state.getCoreName(), state);\n        }\n\n        //check for status change\n        for(CoreState state: currentState) {\n          if(lookup.containsKey(state.getCoreName())) {\n            if(!state.getProperties().equals(lookup.get(state.getCoreName()).getProperties())) {\n              modifiedCores.add(lookup.get(state.getCoreName()));\n            }\n          }\n        }\n        \n        currentState = Collections.unmodifiableSet(newState);\n\n        if (modifiedCores.size() > 0) {\n          try {\n            listener.coreChanged(nodeName, Collections.unmodifiableSet(modifiedCores));\n          } catch (KeeperException e) {\n            log.warn(\"Could not talk to ZK\", e);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Could not talk to ZK\", e);\n          }\n        }\n\n    } else {\n      // ignore null state\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/NodeStateWatcher#processStateChange().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/NodeStateWatcher#processStateChange().mjava","sourceNew":"  private void processStateChange() throws KeeperException, InterruptedException {\n    byte[] data = zkClient.getData(path, this, null, true);\n\n    if (data != null) {\n        CoreState[] states = CoreState.load(data);\n        List<CoreState> stateList = Arrays.asList(states);\n        HashSet<CoreState> modifiedCores = new HashSet<CoreState>();\n        modifiedCores.addAll(stateList);\n        modifiedCores.removeAll(currentState);\n\n        HashSet<CoreState> newState = new HashSet<CoreState>();\n        newState.addAll(stateList);\n        \n        HashMap<String, CoreState> lookup = new HashMap<String, CoreState>();\n        for(CoreState state: states) {\n          lookup.put(state.getCoreName(), state);\n        }\n\n        //check for status change\n        for(CoreState state: currentState) {\n          if(lookup.containsKey(state.getCoreName())) {\n            if(!state.getProperties().equals(lookup.get(state.getCoreName()).getProperties())) {\n              modifiedCores.add(lookup.get(state.getCoreName()));\n            }\n          }\n        }\n        \n        HashMap<String, CoreState> deletedCores = new HashMap<String, CoreState>();\n        for(CoreState state: currentState) {\n          deletedCores.put(state.getCoreNodeName(), state);\n        }\n\n        for(CoreState state: stateList) {\n          deletedCores.remove(state.getCoreNodeName());\n        }\n\n        if (deletedCores.size() > 0) {\n          listener.coreDeleted(nodeName, deletedCores.values());\n        }\n        \n        currentState = Collections.unmodifiableSet(newState);\n\n        if (modifiedCores.size() > 0) {\n          try {\n            listener.coreChanged(nodeName, Collections.unmodifiableSet(modifiedCores));\n          } catch (KeeperException e) {\n            log.warn(\"Could not talk to ZK\", e);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Could not talk to ZK\", e);\n          }\n        }\n\n    } else {\n      // ignore null state\n    }\n  }\n\n","sourceOld":"  private void processStateChange() throws KeeperException, InterruptedException {\n    byte[] data = zkClient.getData(path, this, null, true);\n\n    if (data != null) {\n        CoreState[] states = CoreState.load(data);\n        List<CoreState> stateList = Arrays.asList(states);\n        HashSet<CoreState> modifiedCores = new HashSet<CoreState>();\n        modifiedCores.addAll(stateList);\n        modifiedCores.removeAll(currentState);\n\n        HashSet<CoreState> newState = new HashSet<CoreState>();\n        newState.addAll(stateList);\n        \n        HashMap<String, CoreState> lookup = new HashMap<String, CoreState>();\n        for(CoreState state: states) {\n          lookup.put(state.getCoreName(), state);\n        }\n\n        //check for status change\n        for(CoreState state: currentState) {\n          if(lookup.containsKey(state.getCoreName())) {\n            if(!state.getProperties().equals(lookup.get(state.getCoreName()).getProperties())) {\n              modifiedCores.add(lookup.get(state.getCoreName()));\n            }\n          }\n        }\n        \n        currentState = Collections.unmodifiableSet(newState);\n\n        if (modifiedCores.size() > 0) {\n          try {\n            listener.coreChanged(nodeName, Collections.unmodifiableSet(modifiedCores));\n          } catch (KeeperException e) {\n            log.warn(\"Could not talk to ZK\", e);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Could not talk to ZK\", e);\n          }\n        }\n\n    } else {\n      // ignore null state\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/NodeStateWatcher#processStateChange().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/NodeStateWatcher#processStateChange().mjava","sourceNew":"  private void processStateChange() throws KeeperException, InterruptedException {\n    byte[] data = zkClient.getData(path, this, null, true);\n\n    if (data != null) {\n        CoreState[] states = CoreState.load(data);\n        List<CoreState> stateList = Arrays.asList(states);\n        HashSet<CoreState> modifiedCores = new HashSet<CoreState>();\n        modifiedCores.addAll(stateList);\n        modifiedCores.removeAll(currentState);\n\n        HashSet<CoreState> newState = new HashSet<CoreState>();\n        newState.addAll(stateList);\n        \n        HashMap<String, CoreState> lookup = new HashMap<String, CoreState>();\n        for(CoreState state: states) {\n          lookup.put(state.getCoreName(), state);\n        }\n\n        //check for status change\n        for(CoreState state: currentState) {\n          if(lookup.containsKey(state.getCoreName())) {\n            if(!state.getProperties().equals(lookup.get(state.getCoreName()).getProperties())) {\n              modifiedCores.add(lookup.get(state.getCoreName()));\n            }\n          }\n        }\n        \n        HashMap<String, CoreState> deletedCores = new HashMap<String, CoreState>();\n        for(CoreState state: currentState) {\n          deletedCores.put(state.getCoreNodeName(), state);\n        }\n\n        for(CoreState state: stateList) {\n          deletedCores.remove(state.getCoreNodeName());\n        }\n\n        if (deletedCores.size() > 0) {\n          listener.coreDeleted(nodeName, deletedCores.values());\n        }\n        \n        currentState = Collections.unmodifiableSet(newState);\n\n        if (modifiedCores.size() > 0) {\n          try {\n            listener.coreChanged(nodeName, Collections.unmodifiableSet(modifiedCores));\n          } catch (KeeperException e) {\n            log.warn(\"Could not talk to ZK\", e);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Could not talk to ZK\", e);\n          }\n        }\n\n    } else {\n      // ignore null state\n    }\n  }\n\n","sourceOld":"  private void processStateChange() throws KeeperException, InterruptedException {\n    byte[] data = zkClient.getData(path, this, null, true);\n\n    if (data != null) {\n        CoreState[] states = CoreState.load(data);\n        List<CoreState> stateList = Arrays.asList(states);\n        HashSet<CoreState> modifiedCores = new HashSet<CoreState>();\n        modifiedCores.addAll(stateList);\n        modifiedCores.removeAll(currentState);\n\n        HashSet<CoreState> newState = new HashSet<CoreState>();\n        newState.addAll(stateList);\n        \n        HashMap<String, CoreState> lookup = new HashMap<String, CoreState>();\n        for(CoreState state: states) {\n          lookup.put(state.getCoreName(), state);\n        }\n\n        //check for status change\n        for(CoreState state: currentState) {\n          if(lookup.containsKey(state.getCoreName())) {\n            if(!state.getProperties().equals(lookup.get(state.getCoreName()).getProperties())) {\n              modifiedCores.add(lookup.get(state.getCoreName()));\n            }\n          }\n        }\n        \n        currentState = Collections.unmodifiableSet(newState);\n\n        if (modifiedCores.size() > 0) {\n          try {\n            listener.coreChanged(nodeName, Collections.unmodifiableSet(modifiedCores));\n          } catch (KeeperException e) {\n            log.warn(\"Could not talk to ZK\", e);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Could not talk to ZK\", e);\n          }\n        }\n\n    } else {\n      // ignore null state\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":4,"author":"Sami Siren","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/NodeStateWatcher#processStateChange().mjava","sourceNew":null,"sourceOld":"  private void processStateChange() throws KeeperException, InterruptedException {\n    byte[] data = zkClient.getData(path, this, null, true);\n\n    if (data != null) {\n        CoreState[] states = CoreState.load(data);\n        List<CoreState> stateList = Arrays.asList(states);\n        HashSet<CoreState> modifiedCores = new HashSet<CoreState>();\n        modifiedCores.addAll(stateList);\n        modifiedCores.removeAll(currentState);\n\n        HashSet<CoreState> newState = new HashSet<CoreState>();\n        newState.addAll(stateList);\n        \n        HashMap<String, CoreState> lookup = new HashMap<String, CoreState>();\n        for(CoreState state: states) {\n          lookup.put(state.getCoreName(), state);\n        }\n\n        //check for status change\n        for(CoreState state: currentState) {\n          if(lookup.containsKey(state.getCoreName())) {\n            if(!state.getProperties().equals(lookup.get(state.getCoreName()).getProperties())) {\n              modifiedCores.add(lookup.get(state.getCoreName()));\n            }\n          }\n        }\n        \n        HashMap<String, CoreState> deletedCores = new HashMap<String, CoreState>();\n        for(CoreState state: currentState) {\n          deletedCores.put(state.getCoreNodeName(), state);\n        }\n\n        for(CoreState state: stateList) {\n          deletedCores.remove(state.getCoreNodeName());\n        }\n\n        if (deletedCores.size() > 0) {\n          listener.coreDeleted(nodeName, deletedCores.values());\n        }\n        \n        currentState = Collections.unmodifiableSet(newState);\n\n        if (modifiedCores.size() > 0) {\n          try {\n            listener.coreChanged(nodeName, Collections.unmodifiableSet(modifiedCores));\n          } catch (KeeperException e) {\n            log.warn(\"Could not talk to ZK\", e);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Could not talk to ZK\", e);\n          }\n        }\n\n    } else {\n      // ignore null state\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5093a9e893633cc091cf2f729d7863671c2b715"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a5093a9e893633cc091cf2f729d7863671c2b715":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}