{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testFilterWithMark().mjava","commits":[{"id":"547be27e5d40f96d4df7eb150b9a3d29bc83c513","date":1250683635,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testFilterWithMark().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilterWithMark() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\n        \"Do have a nice day\")); // 1-4 length string\n    ReverseStringFilter filter = new ReverseStringFilter(stream, '\\u0001');\n    TermAttribute text = (TermAttribute) filter\n        .getAttribute(TermAttribute.class);\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001oD\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001evah\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001a\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001ecin\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001yad\", text.term());\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testFilterWithMark().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testFilterWithMark().mjava","sourceNew":"  public void testFilterWithMark() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\n        \"Do have a nice day\")); // 1-4 length string\n    ReverseStringFilter filter = new ReverseStringFilter(stream, '\\u0001');\n    TermAttribute text = filter\n        .getAttribute(TermAttribute.class);\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001oD\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001evah\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001a\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001ecin\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001yad\", text.term());\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testFilterWithMark() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\n        \"Do have a nice day\")); // 1-4 length string\n    ReverseStringFilter filter = new ReverseStringFilter(stream, '\\u0001');\n    TermAttribute text = (TermAttribute) filter\n        .getAttribute(TermAttribute.class);\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001oD\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001evah\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001a\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001ecin\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001yad\", text.term());\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85722042902595d9b0fbf38b7b57b139bdc12e4b","date":1264953677,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testFilterWithMark().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testFilterWithMark().mjava","sourceNew":"  public void testFilterWithMark() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(\n        \"Do have a nice day\")); // 1-4 length string\n    ReverseStringFilter filter = new ReverseStringFilter(Version.LUCENE_CURRENT, stream, '\\u0001');\n    TermAttribute text = filter\n        .getAttribute(TermAttribute.class);\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001oD\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001evah\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001a\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001ecin\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001yad\", text.term());\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testFilterWithMark() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\n        \"Do have a nice day\")); // 1-4 length string\n    ReverseStringFilter filter = new ReverseStringFilter(stream, '\\u0001');\n    TermAttribute text = filter\n        .getAttribute(TermAttribute.class);\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001oD\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001evah\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001a\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001ecin\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001yad\", text.term());\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testFilterWithMark().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testFilterWithMark().mjava","sourceNew":"  public void testFilterWithMark() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Do have a nice day\")); // 1-4 length string\n    ReverseStringFilter filter = new ReverseStringFilter(TEST_VERSION_CURRENT, stream, '\\u0001');\n    TermAttribute text = filter\n        .getAttribute(TermAttribute.class);\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001oD\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001evah\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001a\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001ecin\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001yad\", text.term());\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testFilterWithMark() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(\n        \"Do have a nice day\")); // 1-4 length string\n    ReverseStringFilter filter = new ReverseStringFilter(Version.LUCENE_CURRENT, stream, '\\u0001');\n    TermAttribute text = filter\n        .getAttribute(TermAttribute.class);\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001oD\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001evah\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001a\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001ecin\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001yad\", text.term());\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testFilterWithMark().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testFilterWithMark().mjava","sourceNew":"  public void testFilterWithMark() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Do have a nice day\")); // 1-4 length string\n    ReverseStringFilter filter = new ReverseStringFilter(TEST_VERSION_CURRENT, stream, '\\u0001');\n    TermAttribute text = filter\n        .getAttribute(TermAttribute.class);\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001oD\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001evah\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001a\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001ecin\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001yad\", text.term());\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testFilterWithMark() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(\n        \"Do have a nice day\")); // 1-4 length string\n    ReverseStringFilter filter = new ReverseStringFilter(TEST_VERSION_CURRENT, stream, '\\u0001');\n    TermAttribute text = filter\n        .getAttribute(TermAttribute.class);\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001oD\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001evah\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001a\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001ecin\", text.term());\n    assertTrue(filter.incrementToken());\n    assertEquals(\"\\u0001yad\", text.term());\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"547be27e5d40f96d4df7eb150b9a3d29bc83c513":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["547be27e5d40f96d4df7eb150b9a3d29bc83c513"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["8d78f014fded44fbde905f4f84cdc21907b371e8"]},"commit2Childs":{"547be27e5d40f96d4df7eb150b9a3d29bc83c513":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["547be27e5d40f96d4df7eb150b9a3d29bc83c513"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}