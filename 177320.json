{"path":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","sourceNew":"  public void testExceptionOnRandomType() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random.nextFloat();\n        Field f = new Field(exceptionTestField, \"\" + nextFloat,\n            TextField.TYPE_STORED);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  public void testExceptionOnRandomType() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random.nextFloat();\n        Field f = new Field(exceptionTestField, \"\" + nextFloat,\n            TextField.TYPE_STORED);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","sourceNew":"  public void testExceptionOnRandomType() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random().nextFloat();\n        Field f = new Field(exceptionTestField, \"\" + nextFloat,\n            TextField.TYPE_STORED);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  public void testExceptionOnRandomType() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random.nextFloat();\n        Field f = new Field(exceptionTestField, \"\" + nextFloat,\n            TextField.TYPE_STORED);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6550af40a4977993323e8fd3b3222a2402084800","date":1334548895,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","sourceNew":"  public void testExceptionOnRandomType() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random().nextFloat();\n        Field f = new Field(exceptionTestField, \"\" + nextFloat,\n            TextField.TYPE_STORED);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n    docs.close();\n\n  }\n\n","sourceOld":"  public void testExceptionOnRandomType() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random().nextFloat();\n        Field f = new Field(exceptionTestField, \"\" + nextFloat,\n            TextField.TYPE_STORED);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b2a0f7efff91a413da6cc75c82ef07af7baba4","date":1338485531,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","sourceNew":"  public void testExceptionOnRandomType() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random().nextFloat();\n        Field f = new Field(exceptionTestField, \"\" + nextFloat,\n            TextField.TYPE_STORED);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n    docs.close();\n\n  }\n\n","sourceOld":"  public void testExceptionOnRandomType() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random().nextFloat();\n        Field f = new Field(exceptionTestField, \"\" + nextFloat,\n            TextField.TYPE_STORED);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n    docs.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","sourceNew":"  public void testExceptionOnRandomType() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random().nextFloat();\n        Field f = new TextField(exceptionTestField, \"\" + nextFloat, Field.Store.YES);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n    docs.close();\n\n  }\n\n","sourceOld":"  public void testExceptionOnRandomType() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random().nextFloat();\n        Field f = new Field(exceptionTestField, \"\" + nextFloat,\n            TextField.TYPE_STORED);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n    docs.close();\n\n  }\n\n","bugFix":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","sourceNew":"  public void testExceptionOnRandomType() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random().nextFloat();\n        Field f = new TextField(exceptionTestField, \"\" + nextFloat, Field.Store.YES);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n    docs.close();\n\n  }\n\n","sourceOld":"  public void testExceptionOnRandomType() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random().nextFloat();\n        Field f = new TextField(exceptionTestField, \"\" + nextFloat, Field.Store.YES);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n    docs.close();\n\n  }\n\n","bugFix":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","sourceNew":"  public void testExceptionOnRandomType() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random().nextFloat();\n        Field f = new TextField(exceptionTestField, \"\" + nextFloat, Field.Store.YES);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n    docs.close();\n\n  }\n\n","sourceOld":"  public void testExceptionOnRandomType() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random().nextFloat();\n        Field f = new TextField(exceptionTestField, \"\" + nextFloat, Field.Store.YES);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n    docs.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","sourceNew":"  public void testExceptionOnRandomType() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random().nextFloat();\n        Field f = new TextField(exceptionTestField, \"\" + nextFloat, Field.Store.YES);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n    docs.close();\n\n  }\n\n","sourceOld":"  public void testExceptionOnRandomType() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random().nextFloat();\n        Field f = new TextField(exceptionTestField, \"\" + nextFloat, Field.Store.YES);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n    docs.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","sourceNew":null,"sourceOld":"  public void testExceptionOnRandomType() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random().nextFloat();\n        Field f = new TextField(exceptionTestField, \"\" + nextFloat, Field.Store.YES);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n    docs.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testExceptionOnRandomType().mjava","sourceNew":null,"sourceOld":"  public void testExceptionOnRandomType() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    try {\n      for (int i = 0; i < num; i++) {\n        Document doc = docs.nextDoc();\n        float nextFloat = random().nextFloat();\n        Field f = new TextField(exceptionTestField, \"\" + nextFloat, Field.Store.YES);\n        f.setBoost(nextFloat);\n\n        doc.add(f);\n        writer.addDocument(doc);\n        doc.removeField(exceptionTestField);\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      fail(\"expected exception - incompatible types\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    writer.commit();\n    writer.close();\n    dir.close();\n    docs.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["f0b2a0f7efff91a413da6cc75c82ef07af7baba4"],"aba371508186796cc6151d8223a5b4e16d02e26e":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["d19974432be9aed28ee7dca73bdf01d139e763a9","0837ab0472feecb3a54260729d845f839e1cbd72"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6550af40a4977993323e8fd3b3222a2402084800":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"f0b2a0f7efff91a413da6cc75c82ef07af7baba4":["6550af40a4977993323e8fd3b3222a2402084800"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6550af40a4977993323e8fd3b3222a2402084800":["f0b2a0f7efff91a413da6cc75c82ef07af7baba4"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"f0b2a0f7efff91a413da6cc75c82ef07af7baba4":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6550af40a4977993323e8fd3b3222a2402084800"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}