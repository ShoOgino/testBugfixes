{"path":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","sourceNew":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    IndexWriter writer = initIndex(random, true);\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n    dir.setPreventDoubleWrite(false);\n    crash(writer);\n    writer = initIndex(random, dir, false);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    IndexWriter writer = initIndex(random, true);\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n    dir.setPreventDoubleWrite(false);\n    crash(writer);\n    writer = initIndex(random, dir, false);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","sourceNew":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    IndexWriter writer = initIndex(random(), true);\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n    dir.setPreventDoubleWrite(false);\n    crash(writer);\n    writer = initIndex(random(), dir, false);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    IndexWriter writer = initIndex(random, true);\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n    dir.setPreventDoubleWrite(false);\n    crash(writer);\n    writer = initIndex(random, dir, false);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","sourceNew":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    IndexWriter writer = initIndex(random(), true);\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n    dir.setPreventDoubleWrite(false);\n    crash(writer);\n    writer = initIndex(random(), dir, false);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    IndexWriter writer = initIndex(random(), true);\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n    dir.setPreventDoubleWrite(false);\n    crash(writer);\n    writer = initIndex(random(), dir, false);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9eae2a56dc810a17cf807d831f720dec931a03de","date":1349262073,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","sourceNew":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    System.out.println(\"TEST: initIndex\");\n    IndexWriter writer = initIndex(random(), true);\n    System.out.println(\"TEST: done initIndex\");\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    // We create leftover files because merging could be\n    // running / store files could be open when we crash:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n\n    dir.setPreventDoubleWrite(false);\n    System.out.println(\"TEST: now crash\");\n    crash(writer);\n    writer = initIndex(random(), dir, false);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n\n    // Make a new dir, copying from the crashed dir, and\n    // open IW on it, to confirm IW \"recovers\" after a\n    // crash:\n    Directory dir2 = newDirectory(dir);\n    dir.close();\n\n    new RandomIndexWriter(random(), dir2).close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    IndexWriter writer = initIndex(random(), true);\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n    dir.setPreventDoubleWrite(false);\n    crash(writer);\n    writer = initIndex(random(), dir, false);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","sourceNew":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    System.out.println(\"TEST: initIndex\");\n    IndexWriter writer = initIndex(random(), true);\n    System.out.println(\"TEST: done initIndex\");\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    // We create leftover files because merging could be\n    // running / store files could be open when we crash:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n\n    dir.setPreventDoubleWrite(false);\n    System.out.println(\"TEST: now crash\");\n    crash(writer);\n    writer = initIndex(random(), dir, false);\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n\n    // Make a new dir, copying from the crashed dir, and\n    // open IW on it, to confirm IW \"recovers\" after a\n    // crash:\n    Directory dir2 = newDirectory(dir);\n    dir.close();\n\n    new RandomIndexWriter(random(), dir2).shutdown();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    System.out.println(\"TEST: initIndex\");\n    IndexWriter writer = initIndex(random(), true);\n    System.out.println(\"TEST: done initIndex\");\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    // We create leftover files because merging could be\n    // running / store files could be open when we crash:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n\n    dir.setPreventDoubleWrite(false);\n    System.out.println(\"TEST: now crash\");\n    crash(writer);\n    writer = initIndex(random(), dir, false);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n\n    // Make a new dir, copying from the crashed dir, and\n    // open IW on it, to confirm IW \"recovers\" after a\n    // crash:\n    Directory dir2 = newDirectory(dir);\n    dir.close();\n\n    new RandomIndexWriter(random(), dir2).close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1f3bfdf2fbf9eb7c32953111625b8149f767900","date":1398169177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","sourceNew":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    if (VERBOSE) {\n      System.out.println(\"TEST: initIndex\");\n    }\n    IndexWriter writer = initIndex(random(), true);\n    if (VERBOSE) {\n      System.out.println(\"TEST: done initIndex\");\n    }\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    // We create leftover files because merging could be\n    // running / store files could be open when we crash:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n\n    dir.setPreventDoubleWrite(false);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now crash\");\n    }\n    crash(writer);\n    writer = initIndex(random(), dir, false);\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n\n    // Make a new dir, copying from the crashed dir, and\n    // open IW on it, to confirm IW \"recovers\" after a\n    // crash:\n    Directory dir2 = newDirectory(dir);\n    dir.close();\n\n    new RandomIndexWriter(random(), dir2).shutdown();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    System.out.println(\"TEST: initIndex\");\n    IndexWriter writer = initIndex(random(), true);\n    System.out.println(\"TEST: done initIndex\");\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    // We create leftover files because merging could be\n    // running / store files could be open when we crash:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n\n    dir.setPreventDoubleWrite(false);\n    System.out.println(\"TEST: now crash\");\n    crash(writer);\n    writer = initIndex(random(), dir, false);\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n\n    // Make a new dir, copying from the crashed dir, and\n    // open IW on it, to confirm IW \"recovers\" after a\n    // crash:\n    Directory dir2 = newDirectory(dir);\n    dir.close();\n\n    new RandomIndexWriter(random(), dir2).shutdown();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518","date":1398331323,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","sourceNew":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    if (VERBOSE) {\n      System.out.println(\"TEST: initIndex\");\n    }\n    IndexWriter writer = initIndex(random(), true);\n    if (VERBOSE) {\n      System.out.println(\"TEST: done initIndex\");\n    }\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    // We create leftover files because merging could be\n    // running / store files could be open when we crash:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n\n    dir.setPreventDoubleWrite(false);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now crash\");\n    }\n    crash(writer);\n    writer = initIndex(random(), dir, false);\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n\n    // Make a new dir, copying from the crashed dir, and\n    // open IW on it, to confirm IW \"recovers\" after a\n    // crash:\n    Directory dir2 = newDirectory(dir);\n    dir.close();\n\n    new RandomIndexWriter(random(), dir2).shutdown();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    System.out.println(\"TEST: initIndex\");\n    IndexWriter writer = initIndex(random(), true);\n    System.out.println(\"TEST: done initIndex\");\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    // We create leftover files because merging could be\n    // running / store files could be open when we crash:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n\n    dir.setPreventDoubleWrite(false);\n    System.out.println(\"TEST: now crash\");\n    crash(writer);\n    writer = initIndex(random(), dir, false);\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n\n    // Make a new dir, copying from the crashed dir, and\n    // open IW on it, to confirm IW \"recovers\" after a\n    // crash:\n    Directory dir2 = newDirectory(dir);\n    dir.close();\n\n    new RandomIndexWriter(random(), dir2).shutdown();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","sourceNew":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    if (VERBOSE) {\n      System.out.println(\"TEST: initIndex\");\n    }\n    IndexWriter writer = initIndex(random(), true);\n    if (VERBOSE) {\n      System.out.println(\"TEST: done initIndex\");\n    }\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    // We create leftover files because merging could be\n    // running / store files could be open when we crash:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n\n    dir.setPreventDoubleWrite(false);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now crash\");\n    }\n    crash(writer);\n    writer = initIndex(random(), dir, false, true);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n\n    // Make a new dir, copying from the crashed dir, and\n    // open IW on it, to confirm IW \"recovers\" after a\n    // crash:\n    Directory dir2 = newDirectory(dir);\n    dir.close();\n\n    new RandomIndexWriter(random(), dir2).close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    if (VERBOSE) {\n      System.out.println(\"TEST: initIndex\");\n    }\n    IndexWriter writer = initIndex(random(), true);\n    if (VERBOSE) {\n      System.out.println(\"TEST: done initIndex\");\n    }\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    // We create leftover files because merging could be\n    // running / store files could be open when we crash:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n\n    dir.setPreventDoubleWrite(false);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now crash\");\n    }\n    crash(writer);\n    writer = initIndex(random(), dir, false);\n    writer.shutdown();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n\n    // Make a new dir, copying from the crashed dir, and\n    // open IW on it, to confirm IW \"recovers\" after a\n    // crash:\n    Directory dir2 = newDirectory(dir);\n    dir.close();\n\n    new RandomIndexWriter(random(), dir2).shutdown();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11c6df42fb3eba174c3ca0d9a5194eaecd893b77","date":1465931757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","sourceNew":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    if (VERBOSE) {\n      System.out.println(\"TEST: initIndex\");\n    }\n    IndexWriter writer = initIndex(random(), true);\n    if (VERBOSE) {\n      System.out.println(\"TEST: done initIndex\");\n    }\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    // We create leftover files because merging could be\n    // running / store files could be open when we crash:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now crash\");\n    }\n    crash(writer);\n    writer = initIndex(random(), dir, false, true);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n\n    // Make a new dir, copying from the crashed dir, and\n    // open IW on it, to confirm IW \"recovers\" after a\n    // crash:\n    Directory dir2 = newDirectory(dir);\n    dir.close();\n\n    new RandomIndexWriter(random(), dir2).close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    if (VERBOSE) {\n      System.out.println(\"TEST: initIndex\");\n    }\n    IndexWriter writer = initIndex(random(), true);\n    if (VERBOSE) {\n      System.out.println(\"TEST: done initIndex\");\n    }\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    // We create leftover files because merging could be\n    // running / store files could be open when we crash:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n\n    dir.setPreventDoubleWrite(false);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now crash\");\n    }\n    crash(writer);\n    writer = initIndex(random(), dir, false, true);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n\n    // Make a new dir, copying from the crashed dir, and\n    // open IW on it, to confirm IW \"recovers\" after a\n    // crash:\n    Directory dir2 = newDirectory(dir);\n    dir.close();\n\n    new RandomIndexWriter(random(), dir2).close();\n    dir2.close();\n  }\n\n","bugFix":["e82780afe6097066eb5befb86e9432f077667e3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCrash#testWriterAfterCrash().mjava","sourceNew":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    if (VERBOSE) {\n      System.out.println(\"TEST: initIndex\");\n    }\n    IndexWriter writer = initIndex(random(), true);\n    if (VERBOSE) {\n      System.out.println(\"TEST: done initIndex\");\n    }\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    // We create leftover files because merging could be\n    // running / store files could be open when we crash:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: now crash\");\n    }\n    crash(writer);\n    writer = initIndex(random(), dir, false, true);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n\n    // Make a new dir, copying from the crashed dir, and\n    // open IW on it, to confirm IW \"recovers\" after a\n    // crash:\n    Directory dir2 = newDirectory(dir);\n    dir.close();\n\n    new RandomIndexWriter(random(), dir2).close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testWriterAfterCrash() throws IOException {\n    // This test relies on being able to open a reader before any commit\n    // happened, so we must create an initial commit just to allow that, but\n    // before any documents were added.\n    if (VERBOSE) {\n      System.out.println(\"TEST: initIndex\");\n    }\n    IndexWriter writer = initIndex(random(), true);\n    if (VERBOSE) {\n      System.out.println(\"TEST: done initIndex\");\n    }\n    MockDirectoryWrapper dir = (MockDirectoryWrapper) writer.getDirectory();\n\n    // We create leftover files because merging could be\n    // running / store files could be open when we crash:\n    dir.setAssertNoUnrefencedFilesOnClose(false);\n\n    dir.setPreventDoubleWrite(false);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now crash\");\n    }\n    crash(writer);\n    writer = initIndex(random(), dir, false, true);\n    writer.close();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertTrue(reader.numDocs() < 314);\n    reader.close();\n\n    // Make a new dir, copying from the crashed dir, and\n    // open IW on it, to confirm IW \"recovers\" after a\n    // crash:\n    Directory dir2 = newDirectory(dir);\n    dir.close();\n\n    new RandomIndexWriter(random(), dir2).close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9eae2a56dc810a17cf807d831f720dec931a03de":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f1f3bfdf2fbf9eb7c32953111625b8149f767900"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"f1f3bfdf2fbf9eb7c32953111625b8149f767900":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["9eae2a56dc810a17cf807d831f720dec931a03de"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d0ef034a4f10871667ae75181537775ddcf8ade4","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"]},"commit2Childs":{"9eae2a56dc810a17cf807d831f720dec931a03de":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["9eae2a56dc810a17cf807d831f720dec931a03de"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f1f3bfdf2fbf9eb7c32953111625b8149f767900":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["f1f3bfdf2fbf9eb7c32953111625b8149f767900","e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}