{"path":"solr/solrj/src/java/org/apache/noggit/JSONUtil#writeStringPart(CharSequence,int,int,CharArr).mjava","commits":[{"id":"80931fa1f3b04650bde7b20e61b02063a7093ced","date":1333130683,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/noggit/JSONUtil#writeStringPart(CharSequence,int,int,CharArr).mjava","pathOld":"/dev/null","sourceNew":"  public static void writeStringPart(CharSequence chars, int start, int end, CharArr out) {\n    for (int i=start; i<end; i++) {\n      char ch = chars.charAt(i);\n      switch(ch) {\n        case '\"':\n        case '\\\\':\n          out.write('\\\\');\n          out.write(ch);\n          break;\n        case '\\r': out.write('\\\\'); out.write('r'); break;\n        case '\\n': out.write('\\\\'); out.write('n'); break;\n        case '\\t': out.write('\\\\'); out.write('t'); break;\n        case '\\b': out.write('\\\\'); out.write('b'); break;\n        case '\\f': out.write('\\\\'); out.write('f'); break;\n        // case '/':\n        default:\n          if (ch <= 0x1F) {\n            unicodeEscape(ch,out);\n          } else {\n            // These characters are valid JSON, but not valid JavaScript\n            if (ch=='\\u2028' || ch=='\\u2029') {\n              unicodeEscape(ch,out);\n            } else {\n              out.write(ch);\n            }\n          }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b8e1f25987b9ba1d8b8eda2fa49f64d904cc1c8","date":1363620515,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/noggit/JSONUtil#writeStringPart(CharSequence,int,int,CharArr).mjava","sourceNew":null,"sourceOld":"  public static void writeStringPart(CharSequence chars, int start, int end, CharArr out) {\n    for (int i=start; i<end; i++) {\n      char ch = chars.charAt(i);\n      switch(ch) {\n        case '\"':\n        case '\\\\':\n          out.write('\\\\');\n          out.write(ch);\n          break;\n        case '\\r': out.write('\\\\'); out.write('r'); break;\n        case '\\n': out.write('\\\\'); out.write('n'); break;\n        case '\\t': out.write('\\\\'); out.write('t'); break;\n        case '\\b': out.write('\\\\'); out.write('b'); break;\n        case '\\f': out.write('\\\\'); out.write('f'); break;\n        // case '/':\n        default:\n          if (ch <= 0x1F) {\n            unicodeEscape(ch,out);\n          } else {\n            // These characters are valid JSON, but not valid JavaScript\n            if (ch=='\\u2028' || ch=='\\u2029') {\n              unicodeEscape(ch,out);\n            } else {\n              out.write(ch);\n            }\n          }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b8e1f25987b9ba1d8b8eda2fa49f64d904cc1c8":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80931fa1f3b04650bde7b20e61b02063a7093ced":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b8e1f25987b9ba1d8b8eda2fa49f64d904cc1c8"]},"commit2Childs":{"4b8e1f25987b9ba1d8b8eda2fa49f64d904cc1c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"80931fa1f3b04650bde7b20e61b02063a7093ced":["4b8e1f25987b9ba1d8b8eda2fa49f64d904cc1c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}