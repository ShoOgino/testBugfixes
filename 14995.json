{"path":"src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase() ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase() ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocument(XMLStreamReader).mjava","sourceNew":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase() ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocument readDocument( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"doc\".equals( parser.getLocalName().toLowerCase() ) ) {\n      throw new RuntimeException( \"must be 'lst', not: \"+parser.getLocalName() );\n    }\n\n    SolrDocument doc = new SolrDocument();\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        // Handle multi-valued fields\n        if( type == KnownType.ARR ) {\n          for( Object val : readArray( parser ) ) {\n            doc.addField( name, val );\n          }\n          depth--; // the array reading clears out the 'endElement'\n        }\n        else if( !type.isLeaf ) {\n          throw new XMLStreamException( \"must be value or array\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return doc;\n        }\n        //System.out.println( \"FIELD:\"+type+\"::\"+name+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null ) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        doc.addField( name, val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}