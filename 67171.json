{"path":"src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","pathOld":"/dev/null","sourceNew":"  /** This test compares search results when using and not using compound\n   *  files. \n   *  \n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTest(pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      System.out.println(multiFileOutput);\n      \n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n      \n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d06343967a29132f5d782f74e8d0988400278a02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07199b50babd5f7f62e5b72acb4ed751e799de1a","date":1066875648,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","pathOld":"src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","sourceNew":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTest(pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","sourceOld":"  /** This test compares search results when using and not using compound\n   *  files. \n   *  \n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTest(pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      System.out.println(multiFileOutput);\n      \n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n      \n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","pathOld":"src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","sourceNew":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTest(pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","sourceOld":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTest(pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07199b50babd5f7f62e5b72acb4ed751e799de1a":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["07199b50babd5f7f62e5b72acb4ed751e799de1a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"07199b50babd5f7f62e5b72acb4ed751e799de1a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["07199b50babd5f7f62e5b72acb4ed751e799de1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}