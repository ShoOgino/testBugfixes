{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory#splitFileNames(String).mjava","commits":[{"id":"687e86054415a85f912c6eaa38f995038e5c1cd8","date":1336447427,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory#splitFileNames(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  protected List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.<String>emptyList();\n\n    List<String> result = new ArrayList<String>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory#splitFileNames(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory#splitFileNames(String).mjava","sourceNew":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  protected final List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.<String>emptyList();\n\n    List<String> result = new ArrayList<String>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  protected List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.<String>emptyList();\n\n    List<String> result = new ArrayList<String>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory#splitFileNames(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory#splitFileNames(String).mjava","sourceNew":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  protected final List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.<String>emptyList();\n\n    List<String> result = new ArrayList<>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  protected final List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.<String>emptyList();\n\n    List<String> result = new ArrayList<String>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9809bf55e3bf03659b8b93fd16170aaa7eb92012","date":1526860327,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory#splitFileNames(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory#splitFileNames(String).mjava","sourceNew":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  protected final List<String> splitFileNames(String fileNames) {\n    return splitAt(',', fileNames);\n  }\n\n","sourceOld":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  protected final List<String> splitFileNames(String fileNames) {\n    if (fileNames == null)\n      return Collections.<String>emptyList();\n\n    List<String> result = new ArrayList<>();\n    for (String file : fileNames.split(\"(?<!\\\\\\\\),\")) {\n      result.add(file.replaceAll(\"\\\\\\\\(?=,)\", \"\"));\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"313c36388b6cae6118f75a1860ad0ba0af7e1344","date":1601279368,"type":5,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/AbstractAnalysisFactory#splitFileNames(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory#splitFileNames(String).mjava","sourceNew":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  protected final List<String> splitFileNames(String fileNames) {\n    return splitAt(',', fileNames);\n  }\n\n","sourceOld":"  /**\n   * Splits file names separated by comma character.\n   * File names can contain comma characters escaped by backslash '\\'\n   *\n   * @param fileNames the string containing file names\n   * @return a list of file names with the escaping backslashed removed\n   */\n  protected final List<String> splitFileNames(String fileNames) {\n    return splitAt(',', fileNames);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"313c36388b6cae6118f75a1860ad0ba0af7e1344":["9809bf55e3bf03659b8b93fd16170aaa7eb92012"],"9809bf55e3bf03659b8b93fd16170aaa7eb92012":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"687e86054415a85f912c6eaa38f995038e5c1cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["687e86054415a85f912c6eaa38f995038e5c1cd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["313c36388b6cae6118f75a1860ad0ba0af7e1344"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9809bf55e3bf03659b8b93fd16170aaa7eb92012"],"313c36388b6cae6118f75a1860ad0ba0af7e1344":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9809bf55e3bf03659b8b93fd16170aaa7eb92012":["313c36388b6cae6118f75a1860ad0ba0af7e1344"],"687e86054415a85f912c6eaa38f995038e5c1cd8":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["687e86054415a85f912c6eaa38f995038e5c1cd8"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}