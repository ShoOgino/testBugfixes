{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","sourceNew":"  /**\n   * Returns the level of the largest grid in which its longest side is less\n   * than or equal to the provided distance (in degrees). Consequently {@code\n   * dist} acts as an error epsilon declaring the amount of detail needed in the\n   * grid, such that you can get a grid with just the right amount of\n   * precision.\n   *\n   * @param dist {@code >= 0}\n   * @return level [1 to maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","sourceOld":"  /**\n   * Returns the level of the largest grid in which its longest side is less\n   * than or equal to the provided distance (in degrees). Consequently {@code\n   * dist} acts as an error epsilon declaring the amount of detail needed in the\n   * grid, such that you can get a grid with just the right amount of\n   * precision.\n   *\n   * @param dist {@code >= 0}\n   * @return level [1 to maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getLevelForDistance(double).mjava","sourceNew":"  /**\n   * Returns the level of the largest grid in which its longest side is less\n   * than or equal to the provided distance (in degrees). Consequently {@code\n   * dist} acts as an error epsilon declaring the amount of detail needed in the\n   * grid, such that you can get a grid with just the right amount of\n   * precision.\n   *\n   * @param dist {@code >= 0}\n   * @return level [1 to maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","sourceOld":"  /**\n   * Returns the level of the largest grid in which its longest side is less\n   * than or equal to the provided distance (in degrees). Consequently {@code\n   * dist} acts as an error epsilon declaring the amount of detail needed in the\n   * grid, such that you can get a grid with just the right amount of\n   * precision.\n   *\n   * @param dist {@code >= 0}\n   * @return level [1 to maxLevels]\n   */\n  public abstract int getLevelForDistance(double dist);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}