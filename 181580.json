{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeRelationshipTest#testRandomContains().mjava","commits":[{"id":"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705","date":1501767131,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeRelationshipTest#testRandomContains().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test for contains shapes. We build a shape containing the geoAreaShape and create\n   * shapes WITHIN that shape. The resulting shape should CONTAIN\n   * the geoAreaShape.\n   *\n   * Note that if the geoAreaShape is concave the other shape must be concave.\n   * If shape is concave, the shape for reference should be concave as well.\n   *\n   */\n  @Test\n  @Repeat(iterations = 1)\n  public void testRandomContains() {\n    int referenceShapeType = CONVEX_SIMPLE_POLYGON;\n    PlanetModel planetModel = randomPlanetModel();\n    int geoAreaShapeType = randomGeoAreaShapeType();\n    while (geoAreaShapeType == COLLECTION){\n      geoAreaShapeType = randomGeoAreaShapeType();\n    }\n    int shapeType = randomShapeType();\n    if (isConcave(geoAreaShapeType)){\n      shapeType = randomConcaveShapeType();\n    }\n    if (isConcave(shapeType)){\n      referenceShapeType = CONCAVE_SIMPLE_POLYGON;\n    }\n    GeoShape shape = null;\n    GeoAreaShape geoAreaShape = null;\n    while (shape == null) {\n      geoAreaShape = randomGeoAreaShape(geoAreaShapeType, planetModel);\n      Constraints constraints = getEmptyConstraint();\n      constraints.put(geoAreaShape, GeoArea.CONTAINS);\n      GeoPolygon reference =(GeoPolygon)randomGeoAreaShape(referenceShapeType, planetModel, constraints);\n      if (reference != null) {\n        constraints = getEmptyConstraint();\n        constraints.put(reference, GeoArea.CONTAINS);\n        shape = randomGeoShape(shapeType, planetModel, constraints);\n      }\n    }\n    int rel = geoAreaShape.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, rel);\n    if (shape instanceof GeoArea) {\n      rel = ((GeoArea)shape).getRelationship(geoAreaShape);\n      assertEquals(GeoArea.WITHIN, rel);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeRelationshipTest#testRandomContains().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test for contains shapes. We build a shape containing the geoAreaShape and create\n   * shapes WITHIN that shape. The resulting shape should CONTAIN\n   * the geoAreaShape.\n   *\n   * Note that if the geoAreaShape is concave the other shape must be concave.\n   * If shape is concave, the shape for reference should be concave as well.\n   *\n   */\n  @Test\n  @Repeat(iterations = 1)\n  public void testRandomContains() {\n    int referenceShapeType = CONVEX_SIMPLE_POLYGON;\n    PlanetModel planetModel = randomPlanetModel();\n    int geoAreaShapeType = randomGeoAreaShapeType();\n    while (geoAreaShapeType == COLLECTION){\n      geoAreaShapeType = randomGeoAreaShapeType();\n    }\n    int shapeType = randomShapeType();\n    if (isConcave(geoAreaShapeType)){\n      shapeType = randomConcaveShapeType();\n    }\n    if (isConcave(shapeType)){\n      referenceShapeType = CONCAVE_SIMPLE_POLYGON;\n    }\n    GeoShape shape = null;\n    GeoAreaShape geoAreaShape = null;\n    while (shape == null) {\n      geoAreaShape = randomGeoAreaShape(geoAreaShapeType, planetModel);\n      Constraints constraints = getEmptyConstraint();\n      constraints.put(geoAreaShape, GeoArea.CONTAINS);\n      GeoPolygon reference =(GeoPolygon)randomGeoAreaShape(referenceShapeType, planetModel, constraints);\n      if (reference != null) {\n        constraints = getEmptyConstraint();\n        constraints.put(reference, GeoArea.CONTAINS);\n        shape = randomGeoShape(shapeType, planetModel, constraints);\n      }\n    }\n    int rel = geoAreaShape.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, rel);\n    if (shape instanceof GeoArea) {\n      rel = ((GeoArea)shape).getRelationship(geoAreaShape);\n      assertEquals(GeoArea.WITHIN, rel);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc17dc53660d8859b336b5110d741adaf68686f6","date":1505134847,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeRelationshipTest#testRandomContains().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeRelationshipTest#testRandomContains().mjava","sourceNew":"  /**\n   * Test for contains shapes. We build a shape containing the geoAreaShape and create\n   * shapes WITHIN that shape. The resulting shape should CONTAIN\n   * the geoAreaShape.\n   *\n   * Note that if the geoAreaShape is concave the other shape must be concave.\n   * If shape is concave, the shape for reference should be concave as well.\n   *\n   */\n  @Test\n  @Repeat(iterations = 1)\n  public void testRandomContains() {\n    int referenceShapeType = CONVEX_SIMPLE_POLYGON;\n    PlanetModel planetModel = randomPlanetModel();\n    int geoAreaShapeType = randomGeoAreaShapeType();\n    while (geoAreaShapeType == COLLECTION ){\n      geoAreaShapeType = randomGeoAreaShapeType();\n    }\n    int shapeType = randomShapeType();\n    while (shapeType == POINT || shapeType == LINE) {\n      shapeType = randomShapeType();\n    }\n    if (isConcave(geoAreaShapeType)){\n      shapeType = randomConcaveShapeType();\n    }\n    if (isConcave(shapeType)){\n      referenceShapeType = CONCAVE_SIMPLE_POLYGON;\n    }\n    GeoShape shape = null;\n    GeoAreaShape geoAreaShape = null;\n    while (shape == null) {\n      geoAreaShape = randomGeoAreaShape(geoAreaShapeType, planetModel);\n      Constraints constraints = getEmptyConstraint();\n      constraints.put(geoAreaShape, GeoArea.CONTAINS);\n      GeoPolygon reference =(GeoPolygon)randomGeoAreaShape(referenceShapeType, planetModel, constraints);\n      if (reference != null) {\n        constraints = getEmptyConstraint();\n        constraints.put(reference, GeoArea.CONTAINS);\n        shape = randomGeoShape(shapeType, planetModel, constraints);\n      }\n    }\n    StringBuilder b = new StringBuilder();\n    b.append(\"geoAreaShape: \" + geoAreaShape + \"\\n\");\n    b.append(\"shape: \" + shape);\n    int rel = geoAreaShape.getRelationship(shape);\n    assertEquals(b.toString(), GeoArea.CONTAINS, rel);\n    if (shape instanceof GeoArea) {\n      rel = ((GeoArea)shape).getRelationship(geoAreaShape);\n      assertEquals(b.toString(), GeoArea.WITHIN, rel);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test for contains shapes. We build a shape containing the geoAreaShape and create\n   * shapes WITHIN that shape. The resulting shape should CONTAIN\n   * the geoAreaShape.\n   *\n   * Note that if the geoAreaShape is concave the other shape must be concave.\n   * If shape is concave, the shape for reference should be concave as well.\n   *\n   */\n  @Test\n  @Repeat(iterations = 1)\n  public void testRandomContains() {\n    int referenceShapeType = CONVEX_SIMPLE_POLYGON;\n    PlanetModel planetModel = randomPlanetModel();\n    int geoAreaShapeType = randomGeoAreaShapeType();\n    while (geoAreaShapeType == COLLECTION){\n      geoAreaShapeType = randomGeoAreaShapeType();\n    }\n    int shapeType = randomShapeType();\n    if (isConcave(geoAreaShapeType)){\n      shapeType = randomConcaveShapeType();\n    }\n    if (isConcave(shapeType)){\n      referenceShapeType = CONCAVE_SIMPLE_POLYGON;\n    }\n    GeoShape shape = null;\n    GeoAreaShape geoAreaShape = null;\n    while (shape == null) {\n      geoAreaShape = randomGeoAreaShape(geoAreaShapeType, planetModel);\n      Constraints constraints = getEmptyConstraint();\n      constraints.put(geoAreaShape, GeoArea.CONTAINS);\n      GeoPolygon reference =(GeoPolygon)randomGeoAreaShape(referenceShapeType, planetModel, constraints);\n      if (reference != null) {\n        constraints = getEmptyConstraint();\n        constraints.put(reference, GeoArea.CONTAINS);\n        shape = randomGeoShape(shapeType, planetModel, constraints);\n      }\n    }\n    int rel = geoAreaShape.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, rel);\n    if (shape instanceof GeoArea) {\n      rel = ((GeoArea)shape).getRelationship(geoAreaShape);\n      assertEquals(GeoArea.WITHIN, rel);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeRelationshipTest#testRandomContains().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeRelationshipTest#testRandomContains().mjava","sourceNew":"  /**\n   * Test for contains shapes. We build a shape containing the geoAreaShape and create\n   * shapes WITHIN that shape. The resulting shape should CONTAIN\n   * the geoAreaShape.\n   *\n   * Note that if the geoAreaShape is concave the other shape must be concave.\n   * If shape is concave, the shape for reference should be concave as well.\n   *\n   */\n  @Test\n  @Repeat(iterations = 1)\n  public void testRandomContains() {\n    int referenceShapeType = CONVEX_SIMPLE_POLYGON;\n    PlanetModel planetModel = randomPlanetModel();\n    int geoAreaShapeType = randomGeoAreaShapeType();\n    while (geoAreaShapeType == COLLECTION ){\n      geoAreaShapeType = randomGeoAreaShapeType();\n    }\n    int shapeType = randomShapeType();\n    while (shapeType == POINT || shapeType == LINE) {\n      shapeType = randomShapeType();\n    }\n    if (isConcave(geoAreaShapeType)){\n      shapeType = randomConcaveShapeType();\n    }\n    if (isConcave(shapeType)){\n      referenceShapeType = CONCAVE_SIMPLE_POLYGON;\n    }\n    GeoShape shape = null;\n    GeoAreaShape geoAreaShape = null;\n    while (shape == null) {\n      geoAreaShape = randomGeoAreaShape(geoAreaShapeType, planetModel);\n      Constraints constraints = getEmptyConstraint();\n      constraints.put(geoAreaShape, GeoArea.CONTAINS);\n      GeoPolygon reference =(GeoPolygon)randomGeoAreaShape(referenceShapeType, planetModel, constraints);\n      if (reference != null) {\n        constraints = getEmptyConstraint();\n        constraints.put(reference, GeoArea.CONTAINS);\n        shape = randomGeoShape(shapeType, planetModel, constraints);\n      }\n    }\n    StringBuilder b = new StringBuilder();\n    b.append(\"geoAreaShape: \" + geoAreaShape + \"\\n\");\n    b.append(\"shape: \" + shape);\n    int rel = geoAreaShape.getRelationship(shape);\n    assertEquals(b.toString(), GeoArea.CONTAINS, rel);\n    if (shape instanceof GeoArea) {\n      rel = ((GeoArea)shape).getRelationship(geoAreaShape);\n      assertEquals(b.toString(), GeoArea.WITHIN, rel);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test for contains shapes. We build a shape containing the geoAreaShape and create\n   * shapes WITHIN that shape. The resulting shape should CONTAIN\n   * the geoAreaShape.\n   *\n   * Note that if the geoAreaShape is concave the other shape must be concave.\n   * If shape is concave, the shape for reference should be concave as well.\n   *\n   */\n  @Test\n  @Repeat(iterations = 1)\n  public void testRandomContains() {\n    int referenceShapeType = CONVEX_SIMPLE_POLYGON;\n    PlanetModel planetModel = randomPlanetModel();\n    int geoAreaShapeType = randomGeoAreaShapeType();\n    while (geoAreaShapeType == COLLECTION){\n      geoAreaShapeType = randomGeoAreaShapeType();\n    }\n    int shapeType = randomShapeType();\n    if (isConcave(geoAreaShapeType)){\n      shapeType = randomConcaveShapeType();\n    }\n    if (isConcave(shapeType)){\n      referenceShapeType = CONCAVE_SIMPLE_POLYGON;\n    }\n    GeoShape shape = null;\n    GeoAreaShape geoAreaShape = null;\n    while (shape == null) {\n      geoAreaShape = randomGeoAreaShape(geoAreaShapeType, planetModel);\n      Constraints constraints = getEmptyConstraint();\n      constraints.put(geoAreaShape, GeoArea.CONTAINS);\n      GeoPolygon reference =(GeoPolygon)randomGeoAreaShape(referenceShapeType, planetModel, constraints);\n      if (reference != null) {\n        constraints = getEmptyConstraint();\n        constraints.put(reference, GeoArea.CONTAINS);\n        shape = randomGeoShape(shapeType, planetModel, constraints);\n      }\n    }\n    int rel = geoAreaShape.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, rel);\n    if (shape instanceof GeoArea) {\n      rel = ((GeoArea)shape).getRelationship(geoAreaShape);\n      assertEquals(GeoArea.WITHIN, rel);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeRelationshipTest#testRandomContains().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeRelationshipTest#testRandomContains().mjava","sourceNew":"  /**\n   * Test for contains shapes. We build a shape containing the geoAreaShape and create\n   * shapes WITHIN that shape. The resulting shape should CONTAIN\n   * the geoAreaShape.\n   *\n   * Note that if the geoAreaShape is concave the other shape must be concave.\n   * If shape is concave, the shape for reference should be concave as well.\n   *\n   */\n  @Test\n  public void testRandomContains() {\n    int referenceShapeType = CONVEX_SIMPLE_POLYGON;\n    PlanetModel planetModel = randomPlanetModel();\n    int geoAreaShapeType = randomGeoAreaShapeType();\n    while (geoAreaShapeType == COLLECTION ){\n      geoAreaShapeType = randomGeoAreaShapeType();\n    }\n    int shapeType = randomShapeType();\n    while (shapeType == POINT || shapeType == LINE) {\n      shapeType = randomShapeType();\n    }\n    if (isConcave(geoAreaShapeType)){\n      shapeType = randomConcaveShapeType();\n    }\n    if (isConcave(shapeType)){\n      referenceShapeType = CONCAVE_SIMPLE_POLYGON;\n    }\n    GeoShape shape = null;\n    GeoAreaShape geoAreaShape = null;\n    while (shape == null) {\n      geoAreaShape = randomGeoAreaShape(geoAreaShapeType, planetModel);\n      Constraints constraints = getEmptyConstraint();\n      constraints.put(geoAreaShape, GeoArea.CONTAINS);\n      GeoPolygon reference =(GeoPolygon)randomGeoAreaShape(referenceShapeType, planetModel, constraints);\n      if (reference != null) {\n        constraints = getEmptyConstraint();\n        constraints.put(reference, GeoArea.CONTAINS);\n        shape = randomGeoShape(shapeType, planetModel, constraints);\n      }\n    }\n    StringBuilder b = new StringBuilder();\n    b.append(\"geoAreaShape: \" + geoAreaShape + \"\\n\");\n    b.append(\"shape: \" + shape);\n    int rel = geoAreaShape.getRelationship(shape);\n    assertEquals(b.toString(), GeoArea.CONTAINS, rel);\n    if (shape instanceof GeoArea) {\n      rel = ((GeoArea)shape).getRelationship(geoAreaShape);\n      assertEquals(b.toString(), GeoArea.WITHIN, rel);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test for contains shapes. We build a shape containing the geoAreaShape and create\n   * shapes WITHIN that shape. The resulting shape should CONTAIN\n   * the geoAreaShape.\n   *\n   * Note that if the geoAreaShape is concave the other shape must be concave.\n   * If shape is concave, the shape for reference should be concave as well.\n   *\n   */\n  @Test\n  @Repeat(iterations = 1)\n  public void testRandomContains() {\n    int referenceShapeType = CONVEX_SIMPLE_POLYGON;\n    PlanetModel planetModel = randomPlanetModel();\n    int geoAreaShapeType = randomGeoAreaShapeType();\n    while (geoAreaShapeType == COLLECTION ){\n      geoAreaShapeType = randomGeoAreaShapeType();\n    }\n    int shapeType = randomShapeType();\n    while (shapeType == POINT || shapeType == LINE) {\n      shapeType = randomShapeType();\n    }\n    if (isConcave(geoAreaShapeType)){\n      shapeType = randomConcaveShapeType();\n    }\n    if (isConcave(shapeType)){\n      referenceShapeType = CONCAVE_SIMPLE_POLYGON;\n    }\n    GeoShape shape = null;\n    GeoAreaShape geoAreaShape = null;\n    while (shape == null) {\n      geoAreaShape = randomGeoAreaShape(geoAreaShapeType, planetModel);\n      Constraints constraints = getEmptyConstraint();\n      constraints.put(geoAreaShape, GeoArea.CONTAINS);\n      GeoPolygon reference =(GeoPolygon)randomGeoAreaShape(referenceShapeType, planetModel, constraints);\n      if (reference != null) {\n        constraints = getEmptyConstraint();\n        constraints.put(reference, GeoArea.CONTAINS);\n        shape = randomGeoShape(shapeType, planetModel, constraints);\n      }\n    }\n    StringBuilder b = new StringBuilder();\n    b.append(\"geoAreaShape: \" + geoAreaShape + \"\\n\");\n    b.append(\"shape: \" + shape);\n    int rel = geoAreaShape.getRelationship(shape);\n    assertEquals(b.toString(), GeoArea.CONTAINS, rel);\n    if (shape instanceof GeoArea) {\n      rel = ((GeoArea)shape).getRelationship(geoAreaShape);\n      assertEquals(b.toString(), GeoArea.WITHIN, rel);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeRelationshipTest#testRandomContains().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeRelationshipTest#testRandomContains().mjava","sourceNew":"  /**\n   * Test for contains shapes. We build a shape containing the geoAreaShape and create\n   * shapes WITHIN that shape. The resulting shape should CONTAIN\n   * the geoAreaShape.\n   *\n   * Note that if the geoAreaShape is concave the other shape must be concave.\n   * If shape is concave, the shape for reference should be concave as well.\n   *\n   */\n  // TODO: this test seems to hit pathological cases that cause it to run for many minutes?!\n  @Test @Nightly\n  public void testRandomContains() {\n    int referenceShapeType = CONVEX_SIMPLE_POLYGON;\n    PlanetModel planetModel = randomPlanetModel();\n    int geoAreaShapeType = randomGeoAreaShapeType();\n    while (geoAreaShapeType == COLLECTION ){\n      geoAreaShapeType = randomGeoAreaShapeType();\n    }\n    int shapeType = randomShapeType();\n    while (shapeType == POINT || shapeType == LINE) {\n      shapeType = randomShapeType();\n    }\n    if (isConcave(geoAreaShapeType)){\n      shapeType = randomConcaveShapeType();\n    }\n    if (isConcave(shapeType)){\n      referenceShapeType = CONCAVE_SIMPLE_POLYGON;\n    }\n    GeoShape shape = null;\n    GeoAreaShape geoAreaShape = null;\n    while (shape == null) {\n      geoAreaShape = randomGeoAreaShape(geoAreaShapeType, planetModel);\n      Constraints constraints = getEmptyConstraint();\n      constraints.put(geoAreaShape, GeoArea.CONTAINS);\n      GeoPolygon reference =(GeoPolygon)randomGeoAreaShape(referenceShapeType, planetModel, constraints);\n      if (reference != null) {\n        constraints = getEmptyConstraint();\n        constraints.put(reference, GeoArea.CONTAINS);\n        shape = randomGeoShape(shapeType, planetModel, constraints);\n      }\n    }\n    StringBuilder b = new StringBuilder();\n    b.append(\"geoAreaShape: \" + geoAreaShape + \"\\n\");\n    b.append(\"shape: \" + shape);\n    int rel = geoAreaShape.getRelationship(shape);\n    assertEquals(b.toString(), GeoArea.CONTAINS, rel);\n    if (shape instanceof GeoArea) {\n      rel = ((GeoArea)shape).getRelationship(geoAreaShape);\n      assertEquals(b.toString(), GeoArea.WITHIN, rel);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test for contains shapes. We build a shape containing the geoAreaShape and create\n   * shapes WITHIN that shape. The resulting shape should CONTAIN\n   * the geoAreaShape.\n   *\n   * Note that if the geoAreaShape is concave the other shape must be concave.\n   * If shape is concave, the shape for reference should be concave as well.\n   *\n   */\n  @Test\n  public void testRandomContains() {\n    int referenceShapeType = CONVEX_SIMPLE_POLYGON;\n    PlanetModel planetModel = randomPlanetModel();\n    int geoAreaShapeType = randomGeoAreaShapeType();\n    while (geoAreaShapeType == COLLECTION ){\n      geoAreaShapeType = randomGeoAreaShapeType();\n    }\n    int shapeType = randomShapeType();\n    while (shapeType == POINT || shapeType == LINE) {\n      shapeType = randomShapeType();\n    }\n    if (isConcave(geoAreaShapeType)){\n      shapeType = randomConcaveShapeType();\n    }\n    if (isConcave(shapeType)){\n      referenceShapeType = CONCAVE_SIMPLE_POLYGON;\n    }\n    GeoShape shape = null;\n    GeoAreaShape geoAreaShape = null;\n    while (shape == null) {\n      geoAreaShape = randomGeoAreaShape(geoAreaShapeType, planetModel);\n      Constraints constraints = getEmptyConstraint();\n      constraints.put(geoAreaShape, GeoArea.CONTAINS);\n      GeoPolygon reference =(GeoPolygon)randomGeoAreaShape(referenceShapeType, planetModel, constraints);\n      if (reference != null) {\n        constraints = getEmptyConstraint();\n        constraints.put(reference, GeoArea.CONTAINS);\n        shape = randomGeoShape(shapeType, planetModel, constraints);\n      }\n    }\n    StringBuilder b = new StringBuilder();\n    b.append(\"geoAreaShape: \" + geoAreaShape + \"\\n\");\n    b.append(\"shape: \" + shape);\n    int rel = geoAreaShape.getRelationship(shape);\n    assertEquals(b.toString(), GeoArea.CONTAINS, rel);\n    if (shape instanceof GeoArea) {\n      rel = ((GeoArea)shape).getRelationship(geoAreaShape);\n      assertEquals(b.toString(), GeoArea.WITHIN, rel);\n    }\n  }\n\n","bugFix":["0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57c6c784f777a2cc8fa014507ea129526822714d":["cc17dc53660d8859b336b5110d741adaf68686f6"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cc17dc53660d8859b336b5110d741adaf68686f6"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cc17dc53660d8859b336b5110d741adaf68686f6":["0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["57c6c784f777a2cc8fa014507ea129526822714d"]},"commit2Childs":{"57c6c784f777a2cc8fa014507ea129526822714d":["71da933d30aea361ccc224d6544c451cbf49916d"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["685bd38810c206c93e9058f3c2cfa9827c086c27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cc17dc53660d8859b336b5110d741adaf68686f6"],"cc17dc53660d8859b336b5110d741adaf68686f6":["57c6c784f777a2cc8fa014507ea129526822714d","685bd38810c206c93e9058f3c2cfa9827c086c27"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}