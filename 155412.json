{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#getUniqueTermCount().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getUniqueTermCount().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  This method returns long, even though internally\n   *  Lucene cannot handle more than 2^31 unique terms, for\n   *  a possible future when this limitation is removed.\n   *\n   *  @throws UnsupportedOperationException if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public long getUniqueTermCount() throws IOException {\n    throw new UnsupportedOperationException(\"this reader does not implement getUniqueTermCount()\");\n  }\n\n","sourceOld":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  This method returns long, even though internally\n   *  Lucene cannot handle more than 2^31 unique terms, for\n   *  a possible future when this limitation is removed.\n   *\n   *  @throws UnsupportedOperationException if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public long getUniqueTermCount() throws IOException {\n    throw new UnsupportedOperationException(\"this reader does not implement getUniqueTermCount()\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getUniqueTermCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  @throws UnsupportedOperationException if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    FieldsEnum it = fields.iterator();\n    while(true) {\n      String field = it.next();\n      if (field == null) {\n        break;\n      }\n      numTerms += fields.terms(field).getUniqueTermCount();\n    }\n    return numTerms;\n  }\n\n","sourceOld":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  This method returns long, even though internally\n   *  Lucene cannot handle more than 2^31 unique terms, for\n   *  a possible future when this limitation is removed.\n   *\n   *  @throws UnsupportedOperationException if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public long getUniqueTermCount() throws IOException {\n    throw new UnsupportedOperationException(\"this reader does not implement getUniqueTermCount()\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f458fcb817a740e7906774b7ca2c54d37b34f24f","date":1319501743,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getUniqueTermCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  @return number of unique terms or -1 if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public long getUniqueTermCount() throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    return fields.getUniqueTermCount();\n  }\n\n","sourceOld":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  @throws UnsupportedOperationException if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    FieldsEnum it = fields.iterator();\n    while(true) {\n      String field = it.next();\n      if (field == null) {\n        break;\n      }\n      numTerms += fields.terms(field).getUniqueTermCount();\n    }\n    return numTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936f1eae75daf11568fe1480aec9e06d2ef55367","date":1323215013,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getUniqueTermCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  @return number of unique terms or -1 if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public final long getUniqueTermCount() throws IOException {\n    if (!getTopReaderContext().isAtomic) {\n      return -1;\n    }\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    return fields.getUniqueTermCount();\n  }\n\n","sourceOld":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  @return number of unique terms or -1 if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public long getUniqueTermCount() throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    return fields.getUniqueTermCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getUniqueTermCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  @return number of unique terms or -1 if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public final long getUniqueTermCount() throws IOException {\n    if (!getTopReaderContext().isAtomic) {\n      return -1;\n    }\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    return fields.getUniqueTermCount();\n  }\n\n","sourceOld":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  @return number of unique terms or -1 if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public long getUniqueTermCount() throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    return fields.getUniqueTermCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getUniqueTermCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  @return number of unique terms or -1 if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public final long getUniqueTermCount() throws IOException {\n    if (!getTopReaderContext().isAtomic) {\n      return -1;\n    }\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    return fields.getUniqueTermCount();\n  }\n\n","sourceOld":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  @return number of unique terms or -1 if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public long getUniqueTermCount() throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    return fields.getUniqueTermCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/AtomicIndexReader#getUniqueTermCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  @return number of unique terms or -1 if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public final long getUniqueTermCount() throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    return fields.getUniqueTermCount();\n  }\n\n","sourceOld":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  @return number of unique terms or -1 if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public final long getUniqueTermCount() throws IOException {\n    if (!getTopReaderContext().isAtomic) {\n      return -1;\n    }\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    return fields.getUniqueTermCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/AtomicReader#getUniqueTermCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   */\n  public final long getUniqueTermCount() throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    return fields.getUniqueTermCount();\n  }\n\n","sourceOld":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  @return number of unique terms or -1 if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public final long getUniqueTermCount() throws IOException {\n    if (!getTopReaderContext().isAtomic) {\n      return -1;\n    }\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    return fields.getUniqueTermCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["f458fcb817a740e7906774b7ca2c54d37b34f24f","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"f458fcb817a740e7906774b7ca2c54d37b34f24f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936f1eae75daf11568fe1480aec9e06d2ef55367":["f458fcb817a740e7906774b7ca2c54d37b34f24f"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["f458fcb817a740e7906774b7ca2c54d37b34f24f","936f1eae75daf11568fe1480aec9e06d2ef55367"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"f458fcb817a740e7906774b7ca2c54d37b34f24f":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","936f1eae75daf11568fe1480aec9e06d2ef55367","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"936f1eae75daf11568fe1480aec9e06d2ef55367":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["f458fcb817a740e7906774b7ca2c54d37b34f24f"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}