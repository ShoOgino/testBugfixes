{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#formatCountsVal(String,int,int,int[],FacetDebugInfo).mjava","commits":[{"id":"2ab027bdfe663227636ccbeda13ae82add302939","date":1529980633,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#formatCountsVal(String,int,int,int[],FacetDebugInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpatialHeatmapFacets#formatCountsAndAddToNL(String,ResponseBuilder,SolrParams,int,int,int[],NamedList[Object]).mjava","sourceNew":"  private static Object formatCountsVal(String format, int columns, int rows, int[] counts, FacetDebugInfo debugInfo) {\n    if (counts == null) {\n      return null;\n    }\n    boolean hasNonZero = false;\n    for (int count : counts) {\n      if (count > 0) {\n        hasNonZero = true;\n        break;\n      }\n    }\n    if (!hasNonZero) {\n      return null;\n    }\n\n    switch (format) {\n      case FORMAT_INTS2D: //A List of List of Integers. Good for small heatmaps and ease of consumption\n        return asInts2D(columns, rows, counts);\n      case FORMAT_PNG: //A PNG graphic; compressed.  Good for large & dense heatmaps; hard to consume.\n        return asPngBytes(columns, rows, counts, debugInfo);\n\n      //TODO  case UTFGRID  https://github.com/mapbox/utfgrid-spec\n      //TODO  case skipList: //A sequence of values; negative values are actually how many 0's to insert.\n      //            Good for small or large but sparse heatmaps.\n      //TODO    auto choose png or skipList; use skipList when < ~25% full or <= ~512 cells\n      //  remember to augment error list below when we add more formats.\n      default:\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown format: \" + format);\n    }\n  }\n\n","sourceOld":"  private static void formatCountsAndAddToNL(String fieldKey, ResponseBuilder rb, SolrParams params,\n                                             int columns, int rows, int[] counts, NamedList<Object> result) {\n    final String format = params.getFieldParam(fieldKey, FacetParams.FACET_HEATMAP_FORMAT, FORMAT_INTS2D);\n    final Object countsVal;\n    switch (format) {\n      case FORMAT_INTS2D: //A List of List of Integers. Good for small heatmaps and ease of consumption\n        countsVal = counts != null ? asInts2D(columns, rows, counts) : null;\n        break;\n      case FORMAT_PNG: //A PNG graphic; compressed.  Good for large & dense heatmaps; hard to consume.\n        countsVal = counts != null ? asPngBytes(columns, rows, counts, rb) : null;\n        break;\n      //TODO  case skipList: //A sequence of values; negative values are actually how many 0's to insert.\n      //            Good for small or large but sparse heatmaps.\n      //TODO    auto choose png or skipList; use skipList when < ~25% full or <= ~512 cells\n      //  remember to augment error list below when we add more formats.\n      default:\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"format should be \" + FORMAT_INTS2D + \" or \" + FORMAT_PNG);\n    }\n    result.add(\"counts_\" + format, countsVal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#formatCountsVal(String,int,int,int[],FacetDebugInfo).mjava","pathOld":"/dev/null","sourceNew":"  private static Object formatCountsVal(String format, int columns, int rows, int[] counts, FacetDebugInfo debugInfo) {\n    if (counts == null) {\n      return null;\n    }\n    boolean hasNonZero = false;\n    for (int count : counts) {\n      if (count > 0) {\n        hasNonZero = true;\n        break;\n      }\n    }\n    if (!hasNonZero) {\n      return null;\n    }\n\n    switch (format) {\n      case FORMAT_INTS2D: //A List of List of Integers. Good for small heatmaps and ease of consumption\n        return asInts2D(columns, rows, counts);\n      case FORMAT_PNG: //A PNG graphic; compressed.  Good for large & dense heatmaps; hard to consume.\n        return asPngBytes(columns, rows, counts, debugInfo);\n\n      //TODO  case UTFGRID  https://github.com/mapbox/utfgrid-spec\n      //TODO  case skipList: //A sequence of values; negative values are actually how many 0's to insert.\n      //            Good for small or large but sparse heatmaps.\n      //TODO    auto choose png or skipList; use skipList when < ~25% full or <= ~512 cells\n      //  remember to augment error list below when we add more formats.\n      default:\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown format: \" + format);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#formatCountsVal(String,int,int,int[],FacetDebugInfo).mjava","pathOld":"/dev/null","sourceNew":"  private static Object formatCountsVal(String format, int columns, int rows, int[] counts, FacetDebugInfo debugInfo) {\n    if (counts == null) {\n      return null;\n    }\n    boolean hasNonZero = false;\n    for (int count : counts) {\n      if (count > 0) {\n        hasNonZero = true;\n        break;\n      }\n    }\n    if (!hasNonZero) {\n      return null;\n    }\n\n    switch (format) {\n      case FORMAT_INTS2D: //A List of List of Integers. Good for small heatmaps and ease of consumption\n        return asInts2D(columns, rows, counts);\n      case FORMAT_PNG: //A PNG graphic; compressed.  Good for large & dense heatmaps; hard to consume.\n        return asPngBytes(columns, rows, counts, debugInfo);\n\n      //TODO  case UTFGRID  https://github.com/mapbox/utfgrid-spec\n      //TODO  case skipList: //A sequence of values; negative values are actually how many 0's to insert.\n      //            Good for small or large but sparse heatmaps.\n      //TODO    auto choose png or skipList; use skipList when < ~25% full or <= ~512 cells\n      //  remember to augment error list below when we add more formats.\n      default:\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown format: \" + format);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ab027bdfe663227636ccbeda13ae82add302939":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ab027bdfe663227636ccbeda13ae82add302939"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ab027bdfe663227636ccbeda13ae82add302939"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ab027bdfe663227636ccbeda13ae82add302939"]},"commit2Childs":{"2ab027bdfe663227636ccbeda13ae82add302939":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ab027bdfe663227636ccbeda13ae82add302939","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}