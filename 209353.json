{"path":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"/dev/null","sourceNew":"  public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin() );\n    assertEquals( 94.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin() );\n    assertEquals( 20.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":null,"sourceOld":"  public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin() );\n    assertEquals( 94.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin() );\n    assertEquals( 20.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":"  public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin() );\n    assertEquals( 94.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin() );\n    assertEquals( 20.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":"  public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin() );\n    assertEquals( 94.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin() );\n    assertEquals( 20.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"/dev/null","sourceNew":"  public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin() );\n    assertEquals( 94.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin() );\n    assertEquals( 20.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94","date":1269556173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 94.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 20.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":"  public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin() );\n    assertEquals( 94.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin() );\n    assertEquals( 20.0, stats.getMax() );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 94.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 20.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 94.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 20.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 94.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 20.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 94.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 20.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testStatistics().mjava","sourceNew":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 94.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 20.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","sourceOld":" @Test\n public void testStatistics() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n\n    String f = \"val_pi\";\n    \n    int i=0;               // 0   1   2   3   4   5   6   7   8   9 \n    int[] nums = new int[] { 23, 26, 38, 46, 55, 63, 77, 84, 92, 94 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    SolrQuery query = new SolrQuery( \"*:*\" );\n    query.setRows( 0 );\n    query.setGetFieldStatistics( f );\n    \n    QueryResponse rsp = server.query( query );\n    FieldStatsInfo stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 23.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 94.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    assertEquals( \"26.4\", stats.getStddev().toString().substring(0,4) );\n    \n    // now lets try again with a new set...  (odd median)\n    //----------------------------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 5, 7, 10, 19, 20 };\n    for( int num : nums ) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i++ );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"*:*\", nums.length ); // make sure they all got in\n    \n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    assertEquals( 5.0, stats.getMin().doubleValue(), 0 );\n    assertEquals( 20.0, stats.getMax().doubleValue(), 0 );\n    assertEquals( new Long(nums.length), stats.getCount() );\n    assertEquals( new Long(0), stats.getMissing() );\n    \n    // Now try again with faceting\n    //---------------------------------\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    assertNumFound( \"*:*\", 0 ); // make sure it got in\n    nums = new int[] { 1, 2, 3, 4, 5, 10, 11, 12, 13, 14 };\n    for( i=0; i<nums.length; i++ ) {\n      int num = nums[i];\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField( \"id\", \"doc\"+i );\n      doc.setField( \"name\", \"doc: \"+num );\n      doc.setField( f, num );\n      doc.setField( \"inStock\", i < 5 );\n      server.add( doc );\n    }\n    server.commit();\n    assertNumFound( \"inStock:true\",  5 ); // make sure they all got in\n    assertNumFound( \"inStock:false\", 5 ); // make sure they all got in\n\n    // facet on 'inStock'\n    query.addStatsFieldFacets( f, \"inStock\" );\n    rsp = server.query( query );\n    stats = rsp.getFieldStatsInfo().get( f );\n    assertNotNull( stats );\n    \n    List<FieldStatsInfo> facets = stats.getFacets().get( \"inStock\" );\n    assertNotNull( facets );\n    assertEquals( 2, facets.size() );\n    FieldStatsInfo inStockF = facets.get(0);\n    FieldStatsInfo inStockT = facets.get(1);\n    if( \"true\".equals( inStockF.getName() ) ) {\n      FieldStatsInfo tmp = inStockF;\n      inStockF = inStockT;\n      inStockT = tmp;\n    }\n\n    // make sure half went to each\n    assertEquals( inStockF.getCount(), inStockT.getCount() );\n    assertEquals( stats.getCount().longValue(), inStockF.getCount()+inStockT.getCount() );\n\n    assertTrue( \"check that min max faceted ok\", inStockF.getMin() > inStockT.getMax() );\n    assertEquals( \"they have the same distribution\", inStockF.getStddev(), inStockT.getStddev() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94"],"c26f00b574427b55127e869b935845554afde1fa":["2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}