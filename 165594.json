{"path":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","commits":[{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    // TODO: do this in background threads\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl);\n        server.setConnectionTimeout(45000);\n        server.setSoTimeout(45000);\n        try {\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        }\n      }\n    };\n    thread.run();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08404c494c3d7f0f23c26191b824a38ac9384877","date":1348446583,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    // TODO: do this in background threads\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl);\n        server.setConnectionTimeout(45000);\n        server.setSoTimeout(45000);\n        try {\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    // TODO: do this in background threads\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl);\n        server.setConnectionTimeout(45000);\n        server.setSoTimeout(45000);\n        try {\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        }\n      }\n    };\n    thread.run();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"860556e987113d86b7a1f3f44201689bc69b76dc","date":1372693211,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl);\n        server.setConnectionTimeout(45000);\n        server.setSoTimeout(45000);\n        try {\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    // TODO: do this in background threads\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl);\n        server.setConnectionTimeout(45000);\n        server.setSoTimeout(45000);\n        try {\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0f158e8fb13a52c5da4094cd005429c54aa5cd","date":1372695052,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        server.setConnectionTimeout(45000);\n        server.setSoTimeout(45000);\n        try {\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl);\n        server.setConnectionTimeout(45000);\n        server.setSoTimeout(45000);\n        try {\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        server.setConnectionTimeout(45000);\n        server.setSoTimeout(45000);\n        try {\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    // TODO: do this in background threads\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl);\n        server.setConnectionTimeout(45000);\n        server.setSoTimeout(45000);\n        try {\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adeaffd9597a82a2b9ce8ae18d85e8cd30eb296c","date":1375126808,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        server.setConnectionTimeout(15000);\n        server.setSoTimeout(30000);\n        try {\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        server.setConnectionTimeout(45000);\n        server.setSoTimeout(45000);\n        try {\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        server.setConnectionTimeout(15000);\n        server.setSoTimeout(30000);\n        try {\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        server.setConnectionTimeout(45000);\n        server.setSoTimeout(45000);\n        try {\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c3e46d3417c353d7be14509cfab11b315927fe","date":1382292560,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        server.setConnectionTimeout(15000);\n        server.setSoTimeout(60000);\n        try {\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        server.setConnectionTimeout(15000);\n        server.setSoTimeout(30000);\n        try {\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d750082a4223c20902ef11ff6a9831d55738ea4","date":1382309916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        try {\n          server.setConnectionTimeout(15000);\n          server.setSoTimeout(60000);\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        } finally {\n          server.shutdown();\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        server.setConnectionTimeout(15000);\n        server.setSoTimeout(60000);\n        try {\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e415cc960b0e7b8c945b0ed0004272b8435433ac","date":1384648739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        try {\n          server.setConnectionTimeout(30000);\n          server.setSoTimeout(120000);\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        } finally {\n          server.shutdown();\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        try {\n          server.setConnectionTimeout(15000);\n          server.setSoTimeout(60000);\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        } finally {\n          server.shutdown();\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7035935aa89f6951286e9005cbeb16e89a082a2","date":1385258396,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        try {\n          server.setConnectionTimeout(30000);\n          server.setSoTimeout(120000);\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        } finally {\n          server.shutdown();\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        try {\n          server.setConnectionTimeout(30000);\n          server.setSoTimeout(120000);\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        } finally {\n          server.shutdown();\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        try {\n          server.setConnectionTimeout(30000);\n          server.setSoTimeout(120000);\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        } finally {\n          server.shutdown();\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        try {\n          server.setConnectionTimeout(15000);\n          server.setSoTimeout(60000);\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        } finally {\n          server.shutdown();\n        }\n      }\n    };\n    recoveryCmdExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        try {\n          server.setConnectionTimeout(30000);\n          server.setSoTimeout(120000);\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n          if (t instanceof Error) {\n            throw (Error) t;\n          }\n        } finally {\n          server.shutdown();\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        try {\n          server.setConnectionTimeout(30000);\n          server.setSoTimeout(120000);\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n        } finally {\n          server.shutdown();\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrClient client = new HttpSolrClient(baseUrl, SyncStrategy.this.client);\n        try {\n          client.setConnectionTimeout(30000);\n          client.setSoTimeout(120000);\n          client.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n          if (t instanceof Error) {\n            throw (Error) t;\n          }\n        } finally {\n          client.shutdown();\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrServer server = new HttpSolrServer(baseUrl, client);\n        try {\n          server.setConnectionTimeout(30000);\n          server.setSoTimeout(120000);\n          server.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n          if (t instanceof Error) {\n            throw (Error) t;\n          }\n        } finally {\n          server.shutdown();\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        ;\n        try (HttpSolrClient client = new HttpSolrClient(baseUrl, SyncStrategy.this.client)) {\n          client.setConnectionTimeout(30000);\n          client.setSoTimeout(120000);\n          client.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n          if (t instanceof Error) {\n            throw (Error) t;\n          }\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        HttpSolrClient client = new HttpSolrClient(baseUrl, SyncStrategy.this.client);\n        try {\n          client.setConnectionTimeout(30000);\n          client.setSoTimeout(120000);\n          client.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n          if (t instanceof Error) {\n            throw (Error) t;\n          }\n        } finally {\n          client.shutdown();\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":["9f1bee4bba8988141f8357bda2ccd9405926c4e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f1bee4bba8988141f8357bda2ccd9405926c4e5","date":1449703835,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        try (HttpSolrClient client = new HttpSolrClient(baseUrl, SyncStrategy.this.client)) {\n          client.setConnectionTimeout(30000);\n          client.setSoTimeout(120000);\n          client.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n          if (t instanceof Error) {\n            throw (Error) t;\n          }\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        ;\n        try (HttpSolrClient client = new HttpSolrClient(baseUrl, SyncStrategy.this.client)) {\n          client.setConnectionTimeout(30000);\n          client.setSoTimeout(120000);\n          client.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n          if (t instanceof Error) {\n            throw (Error) t;\n          }\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","bugFix":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        try (HttpSolrClient client = new HttpSolrClient.Builder(baseUrl).withHttpClient(SyncStrategy.this.client).build()) {\n          client.setConnectionTimeout(30000);\n          client.setSoTimeout(120000);\n          client.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n          if (t instanceof Error) {\n            throw (Error) t;\n          }\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        try (HttpSolrClient client = new HttpSolrClient(baseUrl, SyncStrategy.this.client)) {\n          client.setConnectionTimeout(30000);\n          client.setSoTimeout(120000);\n          client.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n          if (t instanceof Error) {\n            throw (Error) t;\n          }\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        try (HttpSolrClient client = new HttpSolrClient.Builder(baseUrl).withHttpClient(SyncStrategy.this.client).build()) {\n          client.setConnectionTimeout(30000);\n          client.setSoTimeout(120000);\n          client.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n          if (t instanceof Error) {\n            throw (Error) t;\n          }\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        try (HttpSolrClient client = new HttpSolrClient(baseUrl, SyncStrategy.this.client)) {\n          client.setConnectionTimeout(30000);\n          client.setSoTimeout(120000);\n          client.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n          if (t instanceof Error) {\n            throw (Error) t;\n          }\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        try (HttpSolrClient client = new HttpSolrClient.Builder(baseUrl)\n            .withHttpClient(SyncStrategy.this.client)\n            .withConnectionTimeout(30000)\n            .withSocketTimeout(120000)\n            .build()) {\n          client.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n          if (t instanceof Error) {\n            throw (Error) t;\n          }\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        try (HttpSolrClient client = new HttpSolrClient.Builder(baseUrl).withHttpClient(SyncStrategy.this.client).build()) {\n          client.setConnectionTimeout(30000);\n          client.setSoTimeout(120000);\n          client.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n          if (t instanceof Error) {\n            throw (Error) t;\n          }\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        try (HttpSolrClient client = new HttpSolrClient.Builder(baseUrl)\n            .withHttpClient(SyncStrategy.this.client)\n            .withConnectionTimeout(30000)\n            .withSocketTimeout(120000)\n            .build()) {\n          client.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n          if (t instanceof Error) {\n            throw (Error) t;\n          }\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        try (HttpSolrClient client = new HttpSolrClient.Builder(baseUrl).withHttpClient(SyncStrategy.this.client).build()) {\n          client.setConnectionTimeout(30000);\n          client.setSoTimeout(120000);\n          client.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n          if (t instanceof Error) {\n            throw (Error) t;\n          }\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestRecovery(ZkNodeProps,String,String).mjava","sourceNew":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        \n        if (isClosed) {\n          log.info(\"We have been closed, won't request recovery\");\n          return;\n        }\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        try (HttpSolrClient client = new HttpSolrClient.Builder(baseUrl)\n            .withHttpClient(SyncStrategy.this.client)\n            .withConnectionTimeout(30000)\n            .withSocketTimeout(120000)\n            .build()) {\n          client.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n          if (t instanceof Error) {\n            throw (Error) t;\n          }\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","sourceOld":"  private void requestRecovery(final ZkNodeProps leaderProps, final String baseUrl, final String coreName) throws SolrServerException, IOException {\n    Thread thread = new Thread() {\n      {\n        setDaemon(true);\n      }\n      @Override\n      public void run() {\n        RequestRecovery recoverRequestCmd = new RequestRecovery();\n        recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);\n        recoverRequestCmd.setCoreName(coreName);\n        \n        try (HttpSolrClient client = new HttpSolrClient.Builder(baseUrl)\n            .withHttpClient(SyncStrategy.this.client)\n            .withConnectionTimeout(30000)\n            .withSocketTimeout(120000)\n            .build()) {\n          client.request(recoverRequestCmd);\n        } catch (Throwable t) {\n          SolrException.log(log, ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Could not tell a replica to recover\", t);\n          if (t instanceof Error) {\n            throw (Error) t;\n          }\n        }\n      }\n    };\n    updateExecutor.execute(thread);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"adeaffd9597a82a2b9ce8ae18d85e8cd30eb296c":["fe0f158e8fb13a52c5da4094cd005429c54aa5cd"],"860556e987113d86b7a1f3f44201689bc69b76dc":["08404c494c3d7f0f23c26191b824a38ac9384877"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","adeaffd9597a82a2b9ce8ae18d85e8cd30eb296c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["08404c494c3d7f0f23c26191b824a38ac9384877","fe0f158e8fb13a52c5da4094cd005429c54aa5cd"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["43d1e498704edd2bba13548a189eed4dfccff11b"],"9f1bee4bba8988141f8357bda2ccd9405926c4e5":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["9f1bee4bba8988141f8357bda2ccd9405926c4e5"],"bafca15d8e408346a67f4282ad1143b88023893b":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"fe0f158e8fb13a52c5da4094cd005429c54aa5cd":["860556e987113d86b7a1f3f44201689bc69b76dc"],"a3c3e46d3417c353d7be14509cfab11b315927fe":["adeaffd9597a82a2b9ce8ae18d85e8cd30eb296c"],"43d1e498704edd2bba13548a189eed4dfccff11b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a6378064655e76cd7b908b1cab4ce425b384b508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","43d1e498704edd2bba13548a189eed4dfccff11b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d750082a4223c20902ef11ff6a9831d55738ea4":["a3c3e46d3417c353d7be14509cfab11b315927fe"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["9f1bee4bba8988141f8357bda2ccd9405926c4e5","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["2d750082a4223c20902ef11ff6a9831d55738ea4","a7035935aa89f6951286e9005cbeb16e89a082a2"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"e415cc960b0e7b8c945b0ed0004272b8435433ac":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"a7035935aa89f6951286e9005cbeb16e89a082a2":["e415cc960b0e7b8c945b0ed0004272b8435433ac"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["a7035935aa89f6951286e9005cbeb16e89a082a2"],"08404c494c3d7f0f23c26191b824a38ac9384877":["a6378064655e76cd7b908b1cab4ce425b384b508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"adeaffd9597a82a2b9ce8ae18d85e8cd30eb296c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a3c3e46d3417c353d7be14509cfab11b315927fe"],"860556e987113d86b7a1f3f44201689bc69b76dc":["fe0f158e8fb13a52c5da4094cd005429c54aa5cd"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9f1bee4bba8988141f8357bda2ccd9405926c4e5":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"fe0f158e8fb13a52c5da4094cd005429c54aa5cd":["adeaffd9597a82a2b9ce8ae18d85e8cd30eb296c","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"a3c3e46d3417c353d7be14509cfab11b315927fe":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"43d1e498704edd2bba13548a189eed4dfccff11b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"a6378064655e76cd7b908b1cab4ce425b384b508":["08404c494c3d7f0f23c26191b824a38ac9384877"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6378064655e76cd7b908b1cab4ce425b384b508"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"2d750082a4223c20902ef11ff6a9831d55738ea4":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","e415cc960b0e7b8c945b0ed0004272b8435433ac"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["9f1bee4bba8988141f8357bda2ccd9405926c4e5"],"e415cc960b0e7b8c945b0ed0004272b8435433ac":["a7035935aa89f6951286e9005cbeb16e89a082a2"],"a7035935aa89f6951286e9005cbeb16e89a082a2":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"08404c494c3d7f0f23c26191b824a38ac9384877":["860556e987113d86b7a1f3f44201689bc69b76dc","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}