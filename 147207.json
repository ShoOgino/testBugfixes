{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","commits":[{"id":"efefd19367eebaa6d911ba8f441a30b7b7564e26","date":1461003590,"type":0,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private void cleanupCollection(String collectionName, NamedList results) throws KeeperException, InterruptedException {\n    log.error(\"Cleaning up collection [\" + collectionName + \"].\" );\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    deleteCollection(new ZkNodeProps(props), results);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e15955b4980562a0c1c81d08654904f3fadb83b","date":1461068916,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private void cleanupCollection(String collectionName, NamedList results) throws KeeperException, InterruptedException {\n    log.error(\"Cleaning up collection [\" + collectionName + \"].\" );\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    deleteCollection(new ZkNodeProps(props), results);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","sourceNew":"  void cleanupCollection(String collectionName, NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [\" + collectionName + \"].\" );\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n  }\n\n","sourceOld":"  private void cleanupCollection(String collectionName, NamedList results) throws KeeperException, InterruptedException {\n    log.error(\"Cleaning up collection [\" + collectionName + \"].\" );\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    deleteCollection(new ZkNodeProps(props), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","sourceNew":"  void cleanupCollection(String collectionName, NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [\" + collectionName + \"].\" );\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n  }\n\n","sourceOld":"  private void cleanupCollection(String collectionName, NamedList results) throws KeeperException, InterruptedException {\n    log.error(\"Cleaning up collection [\" + collectionName + \"].\" );\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    deleteCollection(new ZkNodeProps(props), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","sourceNew":"  void cleanupCollection(String collectionName, NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [\" + collectionName + \"].\" );\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n  }\n\n","sourceOld":"  private void cleanupCollection(String collectionName, NamedList results) throws KeeperException, InterruptedException {\n    log.error(\"Cleaning up collection [\" + collectionName + \"].\" );\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    deleteCollection(new ZkNodeProps(props), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","sourceNew":"  void cleanupCollection(String collectionName, NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [\" + collectionName + \"].\" );\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n  }\n\n","sourceOld":"  void cleanupCollection(String collectionName, NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [\" + collectionName + \"].\" );\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","sourceNew":"  void cleanupCollection(String collectionName, NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [\" + collectionName + \"].\" );\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n  }\n\n","sourceOld":"  void cleanupCollection(String collectionName, NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [\" + collectionName + \"].\" );\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["403d05f7f8d69b65659157eff1bc1d2717f04c66","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"efefd19367eebaa6d911ba8f441a30b7b7564e26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["0e15955b4980562a0c1c81d08654904f3fadb83b","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"0e15955b4980562a0c1c81d08654904f3fadb83b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","efefd19367eebaa6d911ba8f441a30b7b7564e26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0e15955b4980562a0c1c81d08654904f3fadb83b","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"efefd19367eebaa6d911ba8f441a30b7b7564e26":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["efefd19367eebaa6d911ba8f441a30b7b7564e26","0e15955b4980562a0c1c81d08654904f3fadb83b"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"0e15955b4980562a0c1c81d08654904f3fadb83b":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}