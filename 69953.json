{"path":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList#extractPhrases(String,Deque[TermInfo],FieldQuery,int).mjava","commits":[{"id":"7327eec6fde8afb35c01f6234cb50c42a7c737d3","date":1374238360,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList#extractPhrases(String,Deque[TermInfo],FieldQuery,int).mjava","pathOld":"/dev/null","sourceNew":"  void extractPhrases(String field, Deque<TermInfo> fieldTermStack, FieldQuery fieldQuery, int phraseLimit) {\n    LinkedList<TermInfo> phraseCandidate = new LinkedList<TermInfo>();\n    while( !fieldTermStack.isEmpty() && (phraseList.size() < phraseLimit) ) {\n\n      int longest = 0;\n      phraseCandidate.clear();\n      QueryPhraseMap currMap = null;\n      for (TermInfo ti : fieldTermStack) {\n        QueryPhraseMap nextMap = null;\n        if (currMap == null) {\n          nextMap = fieldQuery.getFieldTermMap(field, ti.getText());\n          if (nextMap == null) {\n            break;\n          }\n        } else {\n          nextMap = currMap.getTermMap(ti.getText());\n        }\n        if (nextMap != null) {\n          currMap = nextMap;\n          phraseCandidate.add(ti);\n          if( currMap.isValidTermOrPhrase( phraseCandidate ) ){\n            longest = phraseCandidate.size();\n          }\n        }\n      }\n\n      if (longest > 0) {\n        addIfNoOverlap( new WeightedPhraseInfo( phraseCandidate.subList(0, longest), currMap.getBoost(), currMap.getTermOrPhraseNumber() ) );\n      }\n      fieldTermStack.pop();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47d6c59c2165ec476da09e8ececaaf1776aaca46","date":1374512348,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList#extractPhrases(String,Deque[TermInfo],FieldQuery,int).mjava","sourceNew":null,"sourceOld":"  void extractPhrases(String field, Deque<TermInfo> fieldTermStack, FieldQuery fieldQuery, int phraseLimit) {\n    LinkedList<TermInfo> phraseCandidate = new LinkedList<TermInfo>();\n    while( !fieldTermStack.isEmpty() && (phraseList.size() < phraseLimit) ) {\n\n      int longest = 0;\n      phraseCandidate.clear();\n      QueryPhraseMap currMap = null;\n      for (TermInfo ti : fieldTermStack) {\n        QueryPhraseMap nextMap = null;\n        if (currMap == null) {\n          nextMap = fieldQuery.getFieldTermMap(field, ti.getText());\n          if (nextMap == null) {\n            break;\n          }\n        } else {\n          nextMap = currMap.getTermMap(ti.getText());\n        }\n        if (nextMap != null) {\n          currMap = nextMap;\n          phraseCandidate.add(ti);\n          if( currMap.isValidTermOrPhrase( phraseCandidate ) ){\n            longest = phraseCandidate.size();\n          }\n        }\n      }\n\n      if (longest > 0) {\n        addIfNoOverlap( new WeightedPhraseInfo( phraseCandidate.subList(0, longest), currMap.getBoost(), currMap.getTermOrPhraseNumber() ) );\n      }\n      fieldTermStack.pop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"47d6c59c2165ec476da09e8ececaaf1776aaca46":["7327eec6fde8afb35c01f6234cb50c42a7c737d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7327eec6fde8afb35c01f6234cb50c42a7c737d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["47d6c59c2165ec476da09e8ececaaf1776aaca46"]},"commit2Childs":{"47d6c59c2165ec476da09e8ececaaf1776aaca46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7327eec6fde8afb35c01f6234cb50c42a7c737d3"],"7327eec6fde8afb35c01f6234cb50c42a7c737d3":["47d6c59c2165ec476da09e8ececaaf1776aaca46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}