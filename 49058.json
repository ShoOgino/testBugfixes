{"path":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fillUsingLengthPrefix2(BytesRef,long).mjava","commits":[{"id":"e9069c2e665572658f846820b6cb8ad53de19df0","date":1276611358,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fillUsingLengthPrefix2(BytesRef,long).mjava","pathOld":"/dev/null","sourceNew":"    /** @lucene.internal  Reads length as 1 or 2 byte vInt prefix, starting @ start.  Returns the block number of the term. */\n    public int fillUsingLengthPrefix2(BytesRef b, long start) {\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      final byte[] block = b.bytes = blocks[index];\n\n      if ((block[offset] & 128) == 0) {\n        b.length = block[offset];\n        b.offset = offset+1;\n      } else {\n        b.length = (((int) (block[offset] & 0x7f)) << 8) | (block[1+offset] & 0xff);\n        b.offset = offset+2;\n        assert b.length > 0;\n      }\n      return index;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fillUsingLengthPrefix2(BytesRef,long).mjava","pathOld":"/dev/null","sourceNew":"    /** @lucene.internal  Reads length as 1 or 2 byte vInt prefix, starting @ start.  Returns the block number of the term. */\n    public int fillUsingLengthPrefix2(BytesRef b, long start) {\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      final byte[] block = b.bytes = blocks[index];\n\n      if ((block[offset] & 128) == 0) {\n        b.length = block[offset];\n        b.offset = offset+1;\n      } else {\n        b.length = (((int) (block[offset] & 0x7f)) << 8) | (block[1+offset] & 0xff);\n        b.offset = offset+2;\n        assert b.length > 0;\n      }\n      return index;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df9ba72278ee433b2352986cbf97ab7161006953","date":1286047596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fillUsingLengthPrefix2(BytesRef,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fillUsingLengthPrefix2(BytesRef,long).mjava","sourceNew":"    /** @lucene.internal  Reads length as 1 or 2 byte vInt prefix, starting @ start.  Returns the block number of the term. */\n    public int fillUsingLengthPrefix2(BytesRef b, long start) {\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      final byte[] block = b.bytes = blocks[index];\n\n      if ((block[offset] & 128) == 0) {\n        b.length = block[offset];\n        b.offset = offset+1;\n      } else {\n        b.length = ((block[offset] & 0x7f) << 8) | (block[1+offset] & 0xff);\n        b.offset = offset+2;\n        assert b.length > 0;\n      }\n      return index;\n    }\n\n","sourceOld":"    /** @lucene.internal  Reads length as 1 or 2 byte vInt prefix, starting @ start.  Returns the block number of the term. */\n    public int fillUsingLengthPrefix2(BytesRef b, long start) {\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      final byte[] block = b.bytes = blocks[index];\n\n      if ((block[offset] & 128) == 0) {\n        b.length = block[offset];\n        b.offset = offset+1;\n      } else {\n        b.length = (((int) (block[offset] & 0x7f)) << 8) | (block[1+offset] & 0xff);\n        b.offset = offset+2;\n        assert b.length > 0;\n      }\n      return index;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"224555f245128127dc8d161673eb9e867d67857c","date":1290782170,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fillAndGetIndex(BytesRef,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fillUsingLengthPrefix2(BytesRef,long).mjava","sourceNew":"    /**\n     * Reads length as 1 or 2 byte vInt prefix, starting at <i>start</i>. *\n     * <p>\n     * <b>Note:</b> this method does not support slices spanning across block\n     * borders.\n     * </p>\n     * \n     * @return the internal block number of the slice.\n     * @lucene.internal\n     **/\n    public int fillAndGetIndex(BytesRef b, long start) {\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      final byte[] block = b.bytes = blocks[index];\n\n      if ((block[offset] & 128) == 0) {\n        b.length = block[offset];\n        b.offset = offset+1;\n      } else {\n        b.length = ((block[offset] & 0x7f) << 8) | (block[1+offset] & 0xff);\n        b.offset = offset+2;\n        assert b.length > 0;\n      }\n      return index;\n    }\n\n","sourceOld":"    /** @lucene.internal  Reads length as 1 or 2 byte vInt prefix, starting @ start.  Returns the block number of the term. */\n    public int fillUsingLengthPrefix2(BytesRef b, long start) {\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      final byte[] block = b.bytes = blocks[index];\n\n      if ((block[offset] & 128) == 0) {\n        b.length = block[offset];\n        b.offset = offset+1;\n      } else {\n        b.length = ((block[offset] & 0x7f) << 8) | (block[1+offset] & 0xff);\n        b.offset = offset+2;\n        assert b.length > 0;\n      }\n      return index;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fillUsingLengthPrefix2(BytesRef,long).mjava","sourceNew":null,"sourceOld":"    /** @lucene.internal  Reads length as 1 or 2 byte vInt prefix, starting @ start.  Returns the block number of the term. */\n    public int fillUsingLengthPrefix2(BytesRef b, long start) {\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      final byte[] block = b.bytes = blocks[index];\n\n      if ((block[offset] & 128) == 0) {\n        b.length = block[offset];\n        b.offset = offset+1;\n      } else {\n        b.length = ((block[offset] & 0x7f) << 8) | (block[1+offset] & 0xff);\n        b.offset = offset+2;\n        assert b.length > 0;\n      }\n      return index;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fillUsingLengthPrefix2(BytesRef,long).mjava","sourceNew":null,"sourceOld":"    /** @lucene.internal  Reads length as 1 or 2 byte vInt prefix, starting @ start.  Returns the block number of the term. */\n    public int fillUsingLengthPrefix2(BytesRef b, long start) {\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      final byte[] block = b.bytes = blocks[index];\n\n      if ((block[offset] & 128) == 0) {\n        b.length = block[offset];\n        b.offset = offset+1;\n      } else {\n        b.length = (((int) (block[offset] & 0x7f)) << 8) | (block[1+offset] & 0xff);\n        b.offset = offset+2;\n        assert b.length > 0;\n      }\n      return index;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df9ba72278ee433b2352986cbf97ab7161006953":["e9069c2e665572658f846820b6cb8ad53de19df0"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e9069c2e665572658f846820b6cb8ad53de19df0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","224555f245128127dc8d161673eb9e867d67857c"],"e9069c2e665572658f846820b6cb8ad53de19df0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3bb13258feba31ab676502787ab2e1779f129b7a":["df9ba72278ee433b2352986cbf97ab7161006953","224555f245128127dc8d161673eb9e867d67857c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["224555f245128127dc8d161673eb9e867d67857c"],"224555f245128127dc8d161673eb9e867d67857c":["df9ba72278ee433b2352986cbf97ab7161006953"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f4e87790277826a2aea119328600dfb07761f32","e9069c2e665572658f846820b6cb8ad53de19df0"],"df9ba72278ee433b2352986cbf97ab7161006953":["3bb13258feba31ab676502787ab2e1779f129b7a","224555f245128127dc8d161673eb9e867d67857c"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"e9069c2e665572658f846820b6cb8ad53de19df0":["df9ba72278ee433b2352986cbf97ab7161006953","5f4e87790277826a2aea119328600dfb07761f32"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"224555f245128127dc8d161673eb9e867d67857c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}