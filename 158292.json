{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer(random()));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer(random()));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map<String,Float> boosts = new HashMap<String,Float>();\n    boosts.put(\"b\", Float.valueOf(5));\n    boosts.put(\"t\", Float.valueOf(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new MockAnalyzer(random()));\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}