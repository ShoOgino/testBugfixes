{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","sourceNew":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15b36baeb72a53f53cf3f6cf42bcbe54d6c45311","date":1409582517,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","sourceNew":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(new Lucene40RWCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","sourceNew":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(new Lucene40RWCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(Codec.forName(\"Lucene40\"));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40PostingsReader#testPostings().mjava","sourceNew":null,"sourceOld":"  /** tests terms with different probabilities of being in the document.\n   *  depends heavily on term vectors cross-check at checkIndex\n   */\n  public void testPostings() throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"postings\"));\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(new Lucene40RWCodec());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n    \n    // id field\n    FieldType idType = new FieldType(StringField.TYPE_NOT_STORED);\n    idType.setStoreTermVectors(true);\n    Field idField = new Field(\"id\", \"\", idType);\n    doc.add(idField);\n    \n    // title field: short text field\n    FieldType titleType = new FieldType(TextField.TYPE_NOT_STORED);\n    titleType.setStoreTermVectors(true);\n    titleType.setStoreTermVectorPositions(true);\n    titleType.setStoreTermVectorOffsets(true);\n    titleType.setIndexOptions(indexOptions());\n    Field titleField = new Field(\"title\", \"\", titleType);\n    doc.add(titleField);\n    \n    // body field: long text field\n    FieldType bodyType = new FieldType(TextField.TYPE_NOT_STORED);\n    bodyType.setStoreTermVectors(true);\n    bodyType.setStoreTermVectorPositions(true);\n    bodyType.setStoreTermVectorOffsets(true);\n    bodyType.setIndexOptions(indexOptions());\n    Field bodyField = new Field(\"body\", \"\", bodyType);\n    doc.add(bodyField);\n    \n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      titleField.setStringValue(fieldValue(1));\n      bodyField.setStringValue(fieldValue(3));\n      iw.addDocument(doc);\n      if (random().nextInt(20) == 0) {\n        iw.deleteDocuments(new Term(\"id\", Integer.toString(i)));\n      }\n    }\n    if (random().nextBoolean()) {\n      // delete 1-100% of docs\n      iw.deleteDocuments(new Term(\"title\", terms[random().nextInt(terms.length)]));\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"15b36baeb72a53f53cf3f6cf42bcbe54d6c45311":["4cc45c615dbb82bf79d5f9550286098367874fbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","15b36baeb72a53f53cf3f6cf42bcbe54d6c45311"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["15b36baeb72a53f53cf3f6cf42bcbe54d6c45311"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15b36baeb72a53f53cf3f6cf42bcbe54d6c45311":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}