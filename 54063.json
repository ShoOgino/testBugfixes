{"path":"lucene/test-framework/src/java/org/apache/lucene/store/_TestHelper#isSimpleFSIndexInputOpen(IndexInput).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/_TestHelper#isSimpleFSIndexInputOpen(IndexInput).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/_TestHelper#isSimpleFSIndexInputOpen(IndexInput).mjava","sourceNew":"    /** Given an instance of SimpleFSDirectory.SimpleFSIndexInput, this method returns\n     *  true if the underlying file descriptor is valid, and false otherwise.\n     *  This can be used to determine if the OS file has been closed.\n     *  The descriptor becomes invalid when the non-clone instance of the\n     *  SimpleFSIndexInput that owns this descriptor is closed. However, the\n     *  descriptor may possibly become invalid in other ways as well.\n     */\n    public static boolean isSimpleFSIndexInputOpen(IndexInput is)\n    throws IOException\n    {\n        if (isSimpleFSIndexInput(is)) {\n            SimpleFSIndexInput fis = (SimpleFSIndexInput) is;\n            return fis.isFDValid();\n        } else {\n            return false;\n        }\n    }\n\n","sourceOld":"    /** Given an instance of SimpleFSDirectory.SimpleFSIndexInput, this method returns\n     *  true if the underlying file descriptor is valid, and false otherwise.\n     *  This can be used to determine if the OS file has been closed.\n     *  The descriptor becomes invalid when the non-clone instance of the\n     *  SimpleFSIndexInput that owns this descriptor is closed. However, the\n     *  descriptor may possibly become invalid in other ways as well.\n     */\n    public static boolean isSimpleFSIndexInputOpen(IndexInput is)\n    throws IOException\n    {\n        if (isSimpleFSIndexInput(is)) {\n            SimpleFSIndexInput fis = (SimpleFSIndexInput) is;\n            return fis.isFDValid();\n        } else {\n            return false;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92d5794f857688c529ea7d229b3d1605411101c","date":1392773920,"type":5,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/TestHelper#isSimpleFSIndexInputOpen(IndexInput).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/_TestHelper#isSimpleFSIndexInputOpen(IndexInput).mjava","sourceNew":"    /** Given an instance of SimpleFSDirectory.SimpleFSIndexInput, this method returns\n     *  true if the underlying file descriptor is valid, and false otherwise.\n     *  This can be used to determine if the OS file has been closed.\n     *  The descriptor becomes invalid when the non-clone instance of the\n     *  SimpleFSIndexInput that owns this descriptor is closed. However, the\n     *  descriptor may possibly become invalid in other ways as well.\n     */\n    public static boolean isSimpleFSIndexInputOpen(IndexInput is)\n    throws IOException\n    {\n        if (isSimpleFSIndexInput(is)) {\n            SimpleFSIndexInput fis = (SimpleFSIndexInput) is;\n            return fis.isFDValid();\n        } else {\n            return false;\n        }\n    }\n\n","sourceOld":"    /** Given an instance of SimpleFSDirectory.SimpleFSIndexInput, this method returns\n     *  true if the underlying file descriptor is valid, and false otherwise.\n     *  This can be used to determine if the OS file has been closed.\n     *  The descriptor becomes invalid when the non-clone instance of the\n     *  SimpleFSIndexInput that owns this descriptor is closed. However, the\n     *  descriptor may possibly become invalid in other ways as well.\n     */\n    public static boolean isSimpleFSIndexInputOpen(IndexInput is)\n    throws IOException\n    {\n        if (isSimpleFSIndexInput(is)) {\n            SimpleFSIndexInput fis = (SimpleFSIndexInput) is;\n            return fis.isFDValid();\n        } else {\n            return false;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e92d5794f857688c529ea7d229b3d1605411101c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e92d5794f857688c529ea7d229b3d1605411101c"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e92d5794f857688c529ea7d229b3d1605411101c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e92d5794f857688c529ea7d229b3d1605411101c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}