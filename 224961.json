{"path":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","commits":[{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void simpleCoreDescriptorIsPersisted() {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    SolrResourceLoader loader = new SolrResourceLoader(\"solr/example/solr\");\n    CoreContainer cc = new CoreContainer(loader);\n\n    final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n    List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n    SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(new File(\"testfile.xml\"), solrxml, null);\n    assertEquals(persistor.buildSolrXML(cds),\n          \"<solr><cores>\\n\"\n        + \"    <core name=\\\"testcore\\\" instanceDir=\\\"instance/dir/\\\"/>\\n\"\n        + \"</cores></solr>\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e0571cb12a71d379cc6bd0d3b70fe1d8867a109d","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7310695ba60eea944ac497ebd7b87f8f835b861","date":1373617536,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","sourceNew":"  @Test\n  public void simpleCoreDescriptorIsPersisted() {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    SolrResourceLoader loader = new SolrResourceLoader(\"solr/example/solr\");\n    CoreContainer cc = new CoreContainer(loader);\n\n    final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n    List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n    SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(new File(\"testfile.xml\"), solrxml, null);\n    assertEquals(persistor.buildSolrXML(cds),\n          \"<solr><cores>\" + SolrXMLCoresLocator.NEWLINE\n        + \"    <core name=\\\"testcore\\\" instanceDir=\\\"instance/dir/\\\"/>\" + SolrXMLCoresLocator.NEWLINE\n        + \"</cores></solr>\");\n  }\n\n","sourceOld":"  @Test\n  public void simpleCoreDescriptorIsPersisted() {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    SolrResourceLoader loader = new SolrResourceLoader(\"solr/example/solr\");\n    CoreContainer cc = new CoreContainer(loader);\n\n    final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n    List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n    SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(new File(\"testfile.xml\"), solrxml, null);\n    assertEquals(persistor.buildSolrXML(cds),\n          \"<solr><cores>\\n\"\n        + \"    <core name=\\\"testcore\\\" instanceDir=\\\"instance/dir/\\\"/>\\n\"\n        + \"</cores></solr>\");\n  }\n\n","bugFix":null,"bugIntro":["e0571cb12a71d379cc6bd0d3b70fe1d8867a109d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void simpleCoreDescriptorIsPersisted() {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    SolrResourceLoader loader = new SolrResourceLoader(\"solr/example/solr\");\n    CoreContainer cc = new CoreContainer(loader);\n\n    final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n    List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n    SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(new File(\"testfile.xml\"), solrxml, null);\n    assertEquals(persistor.buildSolrXML(cds),\n          \"<solr><cores>\" + SolrXMLCoresLocator.NEWLINE\n        + \"    <core name=\\\"testcore\\\" instanceDir=\\\"instance/dir/\\\"/>\" + SolrXMLCoresLocator.NEWLINE\n        + \"</cores></solr>\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7917a219001fa51c4289d6a8e1a98606995170b7","date":1376673362,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","sourceNew":"  @Test\n  public void simpleCoreDescriptorIsPersisted() {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    SolrResourceLoader loader = new SolrResourceLoader(\"solr/example/solr\");\n    CoreContainer cc = new CoreContainer(loader);\n\n    final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n    List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n    SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n    assertEquals(persistor.buildSolrXML(cds),\n          \"<solr><cores>\" + SolrXMLCoresLocator.NEWLINE\n        + \"    <core name=\\\"testcore\\\" instanceDir=\\\"instance/dir/\\\"/>\" + SolrXMLCoresLocator.NEWLINE\n        + \"</cores></solr>\");\n  }\n\n","sourceOld":"  @Test\n  public void simpleCoreDescriptorIsPersisted() {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    SolrResourceLoader loader = new SolrResourceLoader(\"solr/example/solr\");\n    CoreContainer cc = new CoreContainer(loader);\n\n    final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n    List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n    SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(new File(\"testfile.xml\"), solrxml, null);\n    assertEquals(persistor.buildSolrXML(cds),\n          \"<solr><cores>\" + SolrXMLCoresLocator.NEWLINE\n        + \"    <core name=\\\"testcore\\\" instanceDir=\\\"instance/dir/\\\"/>\" + SolrXMLCoresLocator.NEWLINE\n        + \"</cores></solr>\");\n  }\n\n","bugFix":null,"bugIntro":["e0571cb12a71d379cc6bd0d3b70fe1d8867a109d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","sourceNew":"  @Test\n  public void simpleCoreDescriptorIsPersisted() {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    SolrResourceLoader loader = new SolrResourceLoader(\"solr/example/solr\");\n    CoreContainer cc = new CoreContainer(loader);\n\n    final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n    List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n    SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n    assertEquals(persistor.buildSolrXML(cds),\n          \"<solr><cores>\" + SolrXMLCoresLocator.NEWLINE\n        + \"    <core name=\\\"testcore\\\" instanceDir=\\\"instance/dir/\\\"/>\" + SolrXMLCoresLocator.NEWLINE\n        + \"</cores></solr>\");\n  }\n\n","sourceOld":"  @Test\n  public void simpleCoreDescriptorIsPersisted() {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    SolrResourceLoader loader = new SolrResourceLoader(\"solr/example/solr\");\n    CoreContainer cc = new CoreContainer(loader);\n\n    final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n    List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n    SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(new File(\"testfile.xml\"), solrxml, null);\n    assertEquals(persistor.buildSolrXML(cds),\n          \"<solr><cores>\" + SolrXMLCoresLocator.NEWLINE\n        + \"    <core name=\\\"testcore\\\" instanceDir=\\\"instance/dir/\\\"/>\" + SolrXMLCoresLocator.NEWLINE\n        + \"</cores></solr>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0571cb12a71d379cc6bd0d3b70fe1d8867a109d","date":1377475564,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","sourceNew":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    final File solrHomeDirectory = new File(TEMP_DIR, \"ZkControllerTest\");\n    try {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n      copyMinFullSetup(solrHomeDirectory);\n\n      CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n\n      final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n      List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n      SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n      assertEquals(persistor.buildSolrXML(cds),\n          \"<solr><cores>\" + SolrXMLCoresLocator.NEWLINE\n          + \"    <core name=\\\"testcore\\\" instanceDir=\\\"instance/dir/\\\"/>\" + SolrXMLCoresLocator.NEWLINE\n          + \"</cores></solr>\");\n    } finally {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void simpleCoreDescriptorIsPersisted() {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    SolrResourceLoader loader = new SolrResourceLoader(\"solr/example/solr\");\n    CoreContainer cc = new CoreContainer(loader);\n\n    final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n    List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n    SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n    assertEquals(persistor.buildSolrXML(cds),\n          \"<solr><cores>\" + SolrXMLCoresLocator.NEWLINE\n        + \"    <core name=\\\"testcore\\\" instanceDir=\\\"instance/dir/\\\"/>\" + SolrXMLCoresLocator.NEWLINE\n        + \"</cores></solr>\");\n  }\n\n","bugFix":["6e764e9a107f93be9fa3c922bc6a197b3eec387e","7917a219001fa51c4289d6a8e1a98606995170b7","b7310695ba60eea944ac497ebd7b87f8f835b861"],"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","sourceNew":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    final File solrHomeDirectory = new File(TEMP_DIR, \"ZkControllerTest\");\n    try {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n      copyMinFullSetup(solrHomeDirectory);\n\n      CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n\n      final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n      List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n      SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n      assertEquals(persistor.buildSolrXML(cds),\n          \"<solr><cores>\" + SolrXMLCoresLocator.NEWLINE\n          + \"    <core name=\\\"testcore\\\" instanceDir=\\\"instance/dir/\\\"/>\" + SolrXMLCoresLocator.NEWLINE\n          + \"</cores></solr>\");\n    } finally {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void simpleCoreDescriptorIsPersisted() {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    SolrResourceLoader loader = new SolrResourceLoader(\"solr/example/solr\");\n    CoreContainer cc = new CoreContainer(loader);\n\n    final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n    List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n    SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(new File(\"testfile.xml\"), solrxml, null);\n    assertEquals(persistor.buildSolrXML(cds),\n          \"<solr><cores>\" + SolrXMLCoresLocator.NEWLINE\n        + \"    <core name=\\\"testcore\\\" instanceDir=\\\"instance/dir/\\\"/>\" + SolrXMLCoresLocator.NEWLINE\n        + \"</cores></solr>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5347f909ec96cf9913f9df17bb8e463c73ea56a","date":1385305248,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","sourceNew":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    final File solrHomeDirectory = new File(TEMP_DIR, \"ZkControllerTest\");\n    try {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n      copyMinFullSetup(solrHomeDirectory);\n\n      CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n\n      final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n      List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n      SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n      String xml = persistor.buildSolrXML(cds);\n      \n      assertTrue(xml.contains(\"<solr><cores>\"));\n      assertTrue(xml.contains(\"name=\\\"testcore\\\"\"));\n      assertTrue(xml.contains(\"instanceDir=\\\"instance/dir/\\\"\"));\n      assertTrue(xml.contains(\"</cores></solr>\"));\n    } finally {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    final File solrHomeDirectory = new File(TEMP_DIR, \"ZkControllerTest\");\n    try {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n      copyMinFullSetup(solrHomeDirectory);\n\n      CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n\n      final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n      List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n      SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n      assertEquals(persistor.buildSolrXML(cds),\n          \"<solr><cores>\" + SolrXMLCoresLocator.NEWLINE\n          + \"    <core name=\\\"testcore\\\" instanceDir=\\\"instance/dir/\\\"/>\" + SolrXMLCoresLocator.NEWLINE\n          + \"</cores></solr>\");\n    } finally {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","sourceNew":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    final File solrHomeDirectory = new File(TEMP_DIR, \"ZkControllerTest\");\n    try {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n      copyMinFullSetup(solrHomeDirectory);\n\n      CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n\n      final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n      List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n      SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n      String xml = persistor.buildSolrXML(cds);\n      \n      assertTrue(xml.contains(\"<solr><cores>\"));\n      assertTrue(xml.contains(\"name=\\\"testcore\\\"\"));\n      assertTrue(xml.contains(\"instanceDir=\\\"instance/dir/\\\"\"));\n      assertTrue(xml.contains(\"</cores></solr>\"));\n    } finally {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    final File solrHomeDirectory = new File(TEMP_DIR, \"ZkControllerTest\");\n    try {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n      copyMinFullSetup(solrHomeDirectory);\n\n      CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n\n      final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n      List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n      SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n      assertEquals(persistor.buildSolrXML(cds),\n          \"<solr><cores>\" + SolrXMLCoresLocator.NEWLINE\n          + \"    <core name=\\\"testcore\\\" instanceDir=\\\"instance/dir/\\\"/>\" + SolrXMLCoresLocator.NEWLINE\n          + \"</cores></solr>\");\n    } finally {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","sourceNew":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    final File solrHomeDirectory = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    try {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n      copyMinFullSetup(solrHomeDirectory);\n\n      CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n\n      final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n      List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n      SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n      String xml = persistor.buildSolrXML(cds);\n      \n      assertTrue(xml.contains(\"<solr><cores>\"));\n      assertTrue(xml.contains(\"name=\\\"testcore\\\"\"));\n      assertTrue(xml.contains(\"instanceDir=\\\"instance/dir/\\\"\"));\n      assertTrue(xml.contains(\"</cores></solr>\"));\n    } finally {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    final File solrHomeDirectory = new File(TEMP_DIR, \"ZkControllerTest\");\n    try {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n      copyMinFullSetup(solrHomeDirectory);\n\n      CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n\n      final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n      List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n      SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n      String xml = persistor.buildSolrXML(cds);\n      \n      assertTrue(xml.contains(\"<solr><cores>\"));\n      assertTrue(xml.contains(\"name=\\\"testcore\\\"\"));\n      assertTrue(xml.contains(\"instanceDir=\\\"instance/dir/\\\"\"));\n      assertTrue(xml.contains(\"</cores></solr>\"));\n    } finally {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","sourceNew":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    final File solrHomeDirectory = new File(dataDir, \"ZkControllerTest\");\n    try {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n      copyMinFullSetup(solrHomeDirectory);\n\n      CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n\n      final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n      List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n      SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n      String xml = persistor.buildSolrXML(cds);\n      \n      assertTrue(xml.contains(\"<solr><cores>\"));\n      assertTrue(xml.contains(\"name=\\\"testcore\\\"\"));\n      assertTrue(xml.contains(\"instanceDir=\\\"instance/dir/\\\"\"));\n      assertTrue(xml.contains(\"</cores></solr>\"));\n    } finally {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    final File solrHomeDirectory = new File(TEMP_DIR, \"ZkControllerTest\");\n    try {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n      copyMinFullSetup(solrHomeDirectory);\n\n      CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n\n      final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n      List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n      SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n      String xml = persistor.buildSolrXML(cds);\n      \n      assertTrue(xml.contains(\"<solr><cores>\"));\n      assertTrue(xml.contains(\"name=\\\"testcore\\\"\"));\n      assertTrue(xml.contains(\"instanceDir=\\\"instance/dir/\\\"\"));\n      assertTrue(xml.contains(\"</cores></solr>\"));\n    } finally {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","sourceNew":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    final File solrHomeDirectory = createTempDir();\n\n    try {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n      copyMinFullSetup(solrHomeDirectory);\n\n      CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n\n      final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n      List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n      SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n      String xml = persistor.buildSolrXML(cds);\n      \n      assertTrue(xml.contains(\"<solr><cores>\"));\n      assertTrue(xml.contains(\"name=\\\"testcore\\\"\"));\n      assertTrue(xml.contains(\"instanceDir=\\\"instance/dir/\\\"\"));\n      assertTrue(xml.contains(\"</cores></solr>\"));\n    } finally {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    final File solrHomeDirectory = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    try {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n      copyMinFullSetup(solrHomeDirectory);\n\n      CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n\n      final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n      List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n      SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n      String xml = persistor.buildSolrXML(cds);\n      \n      assertTrue(xml.contains(\"<solr><cores>\"));\n      assertTrue(xml.contains(\"name=\\\"testcore\\\"\"));\n      assertTrue(xml.contains(\"instanceDir=\\\"instance/dir/\\\"\"));\n      assertTrue(xml.contains(\"</cores></solr>\"));\n    } finally {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","sourceNew":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n    \n    final String solrxml = \"<solr><cores></cores></solr>\";\n    \n    final File solrHomeDirectory = createTempDir();\n    \n    copyMinFullSetup(solrHomeDirectory);\n    \n    CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    \n    final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\",\n        \"instance/dir/\");\n    List<CoreDescriptor> cds = ImmutableList.of(cd);\n    \n    SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n    String xml = persistor.buildSolrXML(cds);\n    \n    assertTrue(xml.contains(\"<solr><cores>\"));\n    assertTrue(xml.contains(\"name=\\\"testcore\\\"\"));\n    assertTrue(xml.contains(\"instanceDir=\\\"instance/dir/\\\"\"));\n    assertTrue(xml.contains(\"</cores></solr>\"));\n  }\n\n","sourceOld":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    final File solrHomeDirectory = createTempDir();\n\n    try {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n      copyMinFullSetup(solrHomeDirectory);\n\n      CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n\n      final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n      List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n      SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n      String xml = persistor.buildSolrXML(cds);\n      \n      assertTrue(xml.contains(\"<solr><cores>\"));\n      assertTrue(xml.contains(\"name=\\\"testcore\\\"\"));\n      assertTrue(xml.contains(\"instanceDir=\\\"instance/dir/\\\"\"));\n      assertTrue(xml.contains(\"</cores></solr>\"));\n    } finally {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","bugFix":["c5347f909ec96cf9913f9df17bb8e463c73ea56a","6e764e9a107f93be9fa3c922bc6a197b3eec387e","bb1f22cfa77230b5f05b7784feae5367f6bbb488","e0571cb12a71d379cc6bd0d3b70fe1d8867a109d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","sourceNew":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n    \n    final String solrxml = \"<solr><cores></cores></solr>\";\n    \n    final File solrHomeDirectory = createTempDir();\n    \n    copyMinFullSetup(solrHomeDirectory);\n    \n    CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    \n    final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\",\n        \"instance/dir/\");\n    List<CoreDescriptor> cds = ImmutableList.of(cd);\n    \n    SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n    String xml = persistor.buildSolrXML(cds);\n    \n    assertTrue(xml.contains(\"<solr><cores>\"));\n    assertTrue(xml.contains(\"name=\\\"testcore\\\"\"));\n    assertTrue(xml.contains(\"instanceDir=\\\"instance/dir/\\\"\"));\n    assertTrue(xml.contains(\"</cores></solr>\"));\n  }\n\n","sourceOld":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n\n    final String solrxml = \"<solr><cores></cores></solr>\";\n\n    final File solrHomeDirectory = new File(dataDir, \"ZkControllerTest\");\n    try {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n      copyMinFullSetup(solrHomeDirectory);\n\n      CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n\n      final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\", \"instance/dir/\");\n      List<CoreDescriptor> cds = ImmutableList.of(cd);\n\n      SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n      String xml = persistor.buildSolrXML(cds);\n      \n      assertTrue(xml.contains(\"<solr><cores>\"));\n      assertTrue(xml.contains(\"name=\\\"testcore\\\"\"));\n      assertTrue(xml.contains(\"instanceDir=\\\"instance/dir/\\\"\"));\n      assertTrue(xml.contains(\"</cores></solr>\"));\n    } finally {\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","sourceNew":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n    \n    final String solrxml = \"<solr><cores></cores></solr>\";\n    \n    final File solrHomeDirectory = createTempDir().toFile();\n    \n    copyMinFullSetup(solrHomeDirectory);\n    \n    CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    \n    final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\",\n        \"instance/dir/\");\n    List<CoreDescriptor> cds = ImmutableList.of(cd);\n    \n    SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n    String xml = persistor.buildSolrXML(cds);\n    \n    assertTrue(xml.contains(\"<solr><cores>\"));\n    assertTrue(xml.contains(\"name=\\\"testcore\\\"\"));\n    assertTrue(xml.contains(\"instanceDir=\\\"instance/dir/\\\"\"));\n    assertTrue(xml.contains(\"</cores></solr>\"));\n  }\n\n","sourceOld":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n    \n    final String solrxml = \"<solr><cores></cores></solr>\";\n    \n    final File solrHomeDirectory = createTempDir();\n    \n    copyMinFullSetup(solrHomeDirectory);\n    \n    CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    \n    final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\",\n        \"instance/dir/\");\n    List<CoreDescriptor> cds = ImmutableList.of(cd);\n    \n    SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n    String xml = persistor.buildSolrXML(cds);\n    \n    assertTrue(xml.contains(\"<solr><cores>\"));\n    assertTrue(xml.contains(\"name=\\\"testcore\\\"\"));\n    assertTrue(xml.contains(\"instanceDir=\\\"instance/dir/\\\"\"));\n    assertTrue(xml.contains(\"</cores></solr>\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor#simpleCoreDescriptorIsPersisted().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void simpleCoreDescriptorIsPersisted() throws IOException {\n    \n    final String solrxml = \"<solr><cores></cores></solr>\";\n    \n    final File solrHomeDirectory = createTempDir().toFile();\n    \n    copyMinFullSetup(solrHomeDirectory);\n    \n    CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    \n    final CoreDescriptor cd = new CoreDescriptor(cc, \"testcore\",\n        \"instance/dir/\");\n    List<CoreDescriptor> cds = ImmutableList.of(cd);\n    \n    SolrXMLCoresLocator persistor = new SolrXMLCoresLocator(solrxml, null);\n    String xml = persistor.buildSolrXML(cds);\n    \n    assertTrue(xml.contains(\"<solr><cores>\"));\n    assertTrue(xml.contains(\"name=\\\"testcore\\\"\"));\n    assertTrue(xml.contains(\"instanceDir=\\\"instance/dir/\\\"\"));\n    assertTrue(xml.contains(\"</cores></solr>\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b7310695ba60eea944ac497ebd7b87f8f835b861"],"b7310695ba60eea944ac497ebd7b87f8f835b861":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["37a0f60745e53927c4c876cfe5b5a58170f0646c","e0571cb12a71d379cc6bd0d3b70fe1d8867a109d"],"31d4861802ca404d78ca1d15f4550eec415b9199":["b7310695ba60eea944ac497ebd7b87f8f835b861","7917a219001fa51c4289d6a8e1a98606995170b7"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["f4abec28b874149a7223e32cc7a01704c27790de"],"7917a219001fa51c4289d6a8e1a98606995170b7":["b7310695ba60eea944ac497ebd7b87f8f835b861"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["c5347f909ec96cf9913f9df17bb8e463c73ea56a"],"c5347f909ec96cf9913f9df17bb8e463c73ea56a":["e0571cb12a71d379cc6bd0d3b70fe1d8867a109d"],"e0571cb12a71d379cc6bd0d3b70fe1d8867a109d":["7917a219001fa51c4289d6a8e1a98606995170b7"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["c5347f909ec96cf9913f9df17bb8e463c73ea56a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["e0571cb12a71d379cc6bd0d3b70fe1d8867a109d","c5347f909ec96cf9913f9df17bb8e463c73ea56a"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"]},"commit2Childs":{"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"b7310695ba60eea944ac497ebd7b87f8f835b861":["37a0f60745e53927c4c876cfe5b5a58170f0646c","31d4861802ca404d78ca1d15f4550eec415b9199","7917a219001fa51c4289d6a8e1a98606995170b7"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7917a219001fa51c4289d6a8e1a98606995170b7":["31d4861802ca404d78ca1d15f4550eec415b9199","e0571cb12a71d379cc6bd0d3b70fe1d8867a109d"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"f4abec28b874149a7223e32cc7a01704c27790de":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"c5347f909ec96cf9913f9df17bb8e463c73ea56a":["d0d579490a72f2e6297eaa648940611234c57cf1","1416f9d09d016a6894cd17e1caac137dad2bba59","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"e0571cb12a71d379cc6bd0d3b70fe1d8867a109d":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c5347f909ec96cf9913f9df17bb8e463c73ea56a","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["b7310695ba60eea944ac497ebd7b87f8f835b861"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}