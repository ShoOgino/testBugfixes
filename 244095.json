{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser#testPositionLengthAndTypeSimple().mjava","commits":[{"id":"927d09add12b0fa3c10f6f9ae564d85bef5dc12c","date":1429219595,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser#testPositionLengthAndTypeSimple().mjava","pathOld":"/dev/null","sourceNew":"  /** Verify type of token and positionLength after analyzer. */\n  public void testPositionLengthAndTypeSimple() throws Exception {\n    String testFile =\n     \"spider man, spiderman\";\n\n    Analyzer analyzer = new MockAnalyzer(random());\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, analyzer);\n    parser.parse(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n    analyzer.close();\n\n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n\n    assertAnalyzesToPositions(analyzer, \"spider man\",\n        new String[]{\"spider\", \"spiderman\", \"man\"},\n        new String[]{\"word\", \"SYNONYM\", \"word\"},\n        new int[]{1, 0, 1},\n        new int[]{1, 2, 1});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser#testPositionLengthAndTypeSimple().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser#testPositionLengthAndTypeSimple().mjava","sourceNew":"  /** Verify type of token and positionLength after analyzer. */\n  public void testPositionLengthAndTypeSimple() throws Exception {\n    String testFile =\n     \"spider man, spiderman\";\n\n    Analyzer analyzer = new MockAnalyzer(random());\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, analyzer);\n    parser.parse(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n    analyzer.close();\n\n    analyzer = new Analyzer() {\n      @SuppressWarnings(\"deprecation\")\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n\n    assertAnalyzesToPositions(analyzer, \"spider man\",\n        new String[]{\"spider\", \"spiderman\", \"man\"},\n        new String[]{\"word\", \"SYNONYM\", \"word\"},\n        new int[]{1, 0, 1},\n        new int[]{1, 2, 1});\n  }\n\n","sourceOld":"  /** Verify type of token and positionLength after analyzer. */\n  public void testPositionLengthAndTypeSimple() throws Exception {\n    String testFile =\n     \"spider man, spiderman\";\n\n    Analyzer analyzer = new MockAnalyzer(random());\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, analyzer);\n    parser.parse(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n    analyzer.close();\n\n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n\n    assertAnalyzesToPositions(analyzer, \"spider man\",\n        new String[]{\"spider\", \"spiderman\", \"man\"},\n        new String[]{\"word\", \"SYNONYM\", \"word\"},\n        new int[]{1, 0, 1},\n        new int[]{1, 2, 1});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser#testPositionLengthAndTypeSimple().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSolrSynonymParser#testPositionLengthAndTypeSimple().mjava","sourceNew":"  /** Verify type of token and positionLength after analyzer. */\n  public void testPositionLengthAndTypeSimple() throws Exception {\n    String testFile =\n     \"spider man, spiderman\";\n\n    Analyzer analyzer = new MockAnalyzer(random());\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, analyzer);\n    parser.parse(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n    analyzer.close();\n\n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n\n    assertAnalyzesToPositions(analyzer, \"spider man\",\n        new String[]{\"spider\", \"spiderman\", \"man\"},\n        new String[]{\"word\", \"SYNONYM\", \"word\"},\n        new int[]{1, 0, 1},\n        new int[]{1, 2, 1});\n  }\n\n","sourceOld":"  /** Verify type of token and positionLength after analyzer. */\n  public void testPositionLengthAndTypeSimple() throws Exception {\n    String testFile =\n     \"spider man, spiderman\";\n\n    Analyzer analyzer = new MockAnalyzer(random());\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, analyzer);\n    parser.parse(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n    analyzer.close();\n\n    analyzer = new Analyzer() {\n      @SuppressWarnings(\"deprecation\")\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n\n    assertAnalyzesToPositions(analyzer, \"spider man\",\n        new String[]{\"spider\", \"spiderman\", \"man\"},\n        new String[]{\"word\", \"SYNONYM\", \"word\"},\n        new int[]{1, 0, 1},\n        new int[]{1, 2, 1});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"927d09add12b0fa3c10f6f9ae564d85bef5dc12c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["927d09add12b0fa3c10f6f9ae564d85bef5dc12c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"]},"commit2Childs":{"927d09add12b0fa3c10f6f9ae564d85bef5dc12c":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["927d09add12b0fa3c10f6f9ae564d85bef5dc12c"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}