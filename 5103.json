{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer#createAutoscalingTriggerIfNotExist().mjava","commits":[{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#createAutoscalingTriggerIfNotExist().mjava","pathOld":"/dev/null","sourceNew":"  private Runnable createAutoscalingTriggerIfNotExist() {\n    return new Runnable() {\n      @Override\n      public void run() {\n        try {\n          boolean triggerExist = getZkStateReader().getAutoScalingConfig()\n              .getTriggerConfigs().get(\".auto_add_replicas\") != null;\n          if (triggerExist) return;\n        } catch (InterruptedException | KeeperException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed when creating .auto_add_replicas trigger\");\n        }\n        while (getZkController().getCoreContainer()\n            .getRequestHandler(AutoScalingHandler.HANDLER_PATH) == null) {\n          try {\n            Thread.sleep(500);\n          } catch (InterruptedException e) {\n            // expected\n          }\n        }\n\n        String dsl = AutoScaling.AUTO_ADD_REPLICAS_TRIGGER_DSL.replace(\"{{waitFor}}\",\n            String.valueOf(config.getAutoReplicaFailoverWaitAfterExpiration()/1000));\n        LocalSolrQueryRequest request = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n        request.getContext().put(\"httpMethod\", \"POST\");\n        request.setContentStreams(Collections.singleton(new ContentStreamBase.StringStream(dsl)));\n        SolrQueryResponse response = new SolrQueryResponse();\n        getZkController().getCoreContainer()\n            .getRequestHandler(AutoScalingHandler.HANDLER_PATH).handleRequest(request, response);\n        if (!\"success\".equals(response.getValues().get(\"result\"))) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed when creating .auto_add_replicas trigger, return \" + response);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3703773e686d9641bc17ca4fc1d5b6cec155ed76","date":1501258115,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#createAutoscalingTriggerIfNotExist().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#createAutoscalingTriggerIfNotExist().mjava","sourceNew":"  private Runnable createAutoscalingTriggerIfNotExist() {\n    return new Runnable() {\n      @Override\n      public void run() {\n        try {\n          boolean triggerExist = getZkStateReader().getAutoScalingConfig()\n              .getTriggerConfigs().get(\".auto_add_replicas\") != null;\n          if (triggerExist) return;\n        } catch (InterruptedException | KeeperException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed when creating .auto_add_replicas trigger\");\n        }\n        while (getZkController().getCoreContainer()\n            .getRequestHandler(AutoScalingHandler.HANDLER_PATH) == null) {\n          try {\n            Thread.sleep(500);\n          } catch (InterruptedException e) {\n            // expected\n          }\n        }\n\n        String dsl = AutoScaling.AUTO_ADD_REPLICAS_TRIGGER_DSL.replace(\"{{waitFor}}\",\n            String.valueOf(config.getAutoReplicaFailoverWaitAfterExpiration()/1000));\n        LocalSolrQueryRequest request = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n        request.getContext().put(\"httpMethod\", \"POST\");\n        request.setContentStreams(Collections.singleton(new ContentStreamBase.StringStream(dsl)));\n        SolrQueryResponse response = new SolrQueryResponse();\n        try {\n          getZkController().getCoreContainer()\n              .getRequestHandler(AutoScalingHandler.HANDLER_PATH).handleRequest(request, response);\n          if (!\"success\".equals(response.getValues().get(\"result\"))) {\n            log.error(\"Failed when creating .auto_add_replicas trigger, return {}\",response);\n          }\n        } catch (Exception e) {\n          log.error(\"Failed when creating .auto_add_replicas trigger \", e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private Runnable createAutoscalingTriggerIfNotExist() {\n    return new Runnable() {\n      @Override\n      public void run() {\n        try {\n          boolean triggerExist = getZkStateReader().getAutoScalingConfig()\n              .getTriggerConfigs().get(\".auto_add_replicas\") != null;\n          if (triggerExist) return;\n        } catch (InterruptedException | KeeperException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed when creating .auto_add_replicas trigger\");\n        }\n        while (getZkController().getCoreContainer()\n            .getRequestHandler(AutoScalingHandler.HANDLER_PATH) == null) {\n          try {\n            Thread.sleep(500);\n          } catch (InterruptedException e) {\n            // expected\n          }\n        }\n\n        String dsl = AutoScaling.AUTO_ADD_REPLICAS_TRIGGER_DSL.replace(\"{{waitFor}}\",\n            String.valueOf(config.getAutoReplicaFailoverWaitAfterExpiration()/1000));\n        LocalSolrQueryRequest request = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n        request.getContext().put(\"httpMethod\", \"POST\");\n        request.setContentStreams(Collections.singleton(new ContentStreamBase.StringStream(dsl)));\n        SolrQueryResponse response = new SolrQueryResponse();\n        getZkController().getCoreContainer()\n            .getRequestHandler(AutoScalingHandler.HANDLER_PATH).handleRequest(request, response);\n        if (!\"success\".equals(response.getValues().get(\"result\"))) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed when creating .auto_add_replicas trigger, return \" + response);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f8232be84c4df50ef0c041d4cb000eaeeb22ceb","date":1501299817,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#createAutoscalingTriggerIfNotExist().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#createAutoscalingTriggerIfNotExist().mjava","sourceNew":"  private Runnable createAutoscalingTriggerIfNotExist() {\n    return new Runnable() {\n      @Override\n      public void run() {\n        try {\n          boolean triggerExist = getZkStateReader().getAutoScalingConfig()\n              .getTriggerConfigs().get(\".auto_add_replicas\") != null;\n          if (triggerExist) return;\n        } catch (InterruptedException | KeeperException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed when creating .auto_add_replicas trigger\");\n        }\n        try {\n          while (getZkController().getCoreContainer().getRequestHandler(AutoScalingHandler.HANDLER_PATH) == null) {\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException e) {\n              break;\n            }\n          }\n          if (getZkController().getCoreContainer().isShutDown()) {\n            return;\n          }\n        } catch (Exception e) {}\n\n        String dsl = AutoScaling.AUTO_ADD_REPLICAS_TRIGGER_DSL.replace(\"{{waitFor}}\",\n            String.valueOf(config.getAutoReplicaFailoverWaitAfterExpiration()/1000));\n        LocalSolrQueryRequest request = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n        request.getContext().put(\"httpMethod\", \"POST\");\n        request.setContentStreams(Collections.singleton(new ContentStreamBase.StringStream(dsl)));\n        SolrQueryResponse response = new SolrQueryResponse();\n        try {\n          getZkController().getCoreContainer()\n              .getRequestHandler(AutoScalingHandler.HANDLER_PATH).handleRequest(request, response);\n          if (!\"success\".equals(response.getValues().get(\"result\"))) {\n            log.error(\"Failed when creating .auto_add_replicas trigger, return {}\",response);\n          }\n        } catch (Exception e) {\n          log.error(\"Failed when creating .auto_add_replicas trigger \", e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private Runnable createAutoscalingTriggerIfNotExist() {\n    return new Runnable() {\n      @Override\n      public void run() {\n        try {\n          boolean triggerExist = getZkStateReader().getAutoScalingConfig()\n              .getTriggerConfigs().get(\".auto_add_replicas\") != null;\n          if (triggerExist) return;\n        } catch (InterruptedException | KeeperException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed when creating .auto_add_replicas trigger\");\n        }\n        while (getZkController().getCoreContainer()\n            .getRequestHandler(AutoScalingHandler.HANDLER_PATH) == null) {\n          try {\n            Thread.sleep(500);\n          } catch (InterruptedException e) {\n            // expected\n          }\n        }\n\n        String dsl = AutoScaling.AUTO_ADD_REPLICAS_TRIGGER_DSL.replace(\"{{waitFor}}\",\n            String.valueOf(config.getAutoReplicaFailoverWaitAfterExpiration()/1000));\n        LocalSolrQueryRequest request = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n        request.getContext().put(\"httpMethod\", \"POST\");\n        request.setContentStreams(Collections.singleton(new ContentStreamBase.StringStream(dsl)));\n        SolrQueryResponse response = new SolrQueryResponse();\n        try {\n          getZkController().getCoreContainer()\n              .getRequestHandler(AutoScalingHandler.HANDLER_PATH).handleRequest(request, response);\n          if (!\"success\".equals(response.getValues().get(\"result\"))) {\n            log.error(\"Failed when creating .auto_add_replicas trigger, return {}\",response);\n          }\n        } catch (Exception e) {\n          log.error(\"Failed when creating .auto_add_replicas trigger \", e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6c71577c4ee99246f48a2c29bc213daab310ee5","date":1505785422,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#createAutoscalingTriggerIfNotExist().mjava","sourceNew":null,"sourceOld":"  private Runnable createAutoscalingTriggerIfNotExist() {\n    return new Runnable() {\n      @Override\n      public void run() {\n        try {\n          boolean triggerExist = getZkStateReader().getAutoScalingConfig()\n              .getTriggerConfigs().get(\".auto_add_replicas\") != null;\n          if (triggerExist) return;\n        } catch (InterruptedException | KeeperException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed when creating .auto_add_replicas trigger\");\n        }\n        try {\n          while (getZkController().getCoreContainer().getRequestHandler(AutoScalingHandler.HANDLER_PATH) == null) {\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException e) {\n              break;\n            }\n          }\n          if (getZkController().getCoreContainer().isShutDown()) {\n            return;\n          }\n        } catch (Exception e) {}\n\n        String dsl = AutoScaling.AUTO_ADD_REPLICAS_TRIGGER_DSL.replace(\"{{waitFor}}\",\n            String.valueOf(config.getAutoReplicaFailoverWaitAfterExpiration()/1000));\n        LocalSolrQueryRequest request = new LocalSolrQueryRequest(null, new ModifiableSolrParams());\n        request.getContext().put(\"httpMethod\", \"POST\");\n        request.setContentStreams(Collections.singleton(new ContentStreamBase.StringStream(dsl)));\n        SolrQueryResponse response = new SolrQueryResponse();\n        try {\n          getZkController().getCoreContainer()\n              .getRequestHandler(AutoScalingHandler.HANDLER_PATH).handleRequest(request, response);\n          if (!\"success\".equals(response.getValues().get(\"result\"))) {\n            log.error(\"Failed when creating .auto_add_replicas trigger, return {}\",response);\n          }\n        } catch (Exception e) {\n          log.error(\"Failed when creating .auto_add_replicas trigger \", e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f8232be84c4df50ef0c041d4cb000eaeeb22ceb":["3703773e686d9641bc17ca4fc1d5b6cec155ed76"],"b6c71577c4ee99246f48a2c29bc213daab310ee5":["0f8232be84c4df50ef0c041d4cb000eaeeb22ceb"],"3703773e686d9641bc17ca4fc1d5b6cec155ed76":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["3703773e686d9641bc17ca4fc1d5b6cec155ed76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f8232be84c4df50ef0c041d4cb000eaeeb22ceb":["b6c71577c4ee99246f48a2c29bc213daab310ee5"],"b6c71577c4ee99246f48a2c29bc213daab310ee5":[],"3703773e686d9641bc17ca4fc1d5b6cec155ed76":["0f8232be84c4df50ef0c041d4cb000eaeeb22ceb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b6c71577c4ee99246f48a2c29bc213daab310ee5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}