{"path":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean,Collator).mjava","commits":[{"id":"b33dc4652df2747e38f9782fde82bd426b77c538","date":1221599001,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean,Collator).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * <strong>WARNING:</strong> Using this constructor and supplying a non-null\n     * value in the <code>collator</code> parameter will cause every single \n     * index Term in the Field referenced by lowerTerm and/or upperTerm to be\n     * examined.  Depending on the number of index Terms in this Field, the \n     * operation could be very slow.\n     *\n     * @param lowerTerm The lower bound on this range\n     * @param upperTerm The upper bound on this range\n     * @param includeLower Does this range include the lower bound?\n     * @param includeUpper Does this range include the upper bound?\n     * @param collator The collator to use when determining range inclusion; set\n     *  to null to use Unicode code point ordering instead of collation.\n     * @throws IllegalArgumentException if both terms are null or if\n     *  lowerTerm is null and includeLower is true (similar for upperTerm\n     *  and includeUpper)\n     */\n    public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                       boolean includeLower, boolean includeUpper,\n                       Collator collator) {\n        this(fieldName, lowerTerm, upperTerm, includeLower, includeUpper);\n        this.collator = collator;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean,Collator).mjava","pathOld":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean,Collator).mjava","sourceNew":"    /**\n     * <strong>WARNING:</strong> Using this constructor and supplying a non-null\n     * value in the <code>collator</code> parameter will cause every single \n     * index Term in the Field referenced by lowerTerm and/or upperTerm to be\n     * examined.  Depending on the number of index Terms in this Field, the \n     * operation could be very slow.\n     *\n     * @param lowerTerm The lower bound on this range\n     * @param upperTerm The upper bound on this range\n     * @param includeLower Does this range include the lower bound?\n     * @param includeUpper Does this range include the upper bound?\n     * @param collator The collator to use when determining range inclusion; set\n     *  to null to use Unicode code point ordering instead of collation.\n     * @throws IllegalArgumentException if both terms are null or if\n     *  lowerTerm is null and includeLower is true (similar for upperTerm\n     *  and includeUpper)\n     */\n    public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                       boolean includeLower, boolean includeUpper,\n                       Collator collator) {\n        this(fieldName, lowerTerm, upperTerm, includeLower, includeUpper);\n        this.collator = collator;\n        initRangeQuery();\n    }\n\n","sourceOld":"    /**\n     * <strong>WARNING:</strong> Using this constructor and supplying a non-null\n     * value in the <code>collator</code> parameter will cause every single \n     * index Term in the Field referenced by lowerTerm and/or upperTerm to be\n     * examined.  Depending on the number of index Terms in this Field, the \n     * operation could be very slow.\n     *\n     * @param lowerTerm The lower bound on this range\n     * @param upperTerm The upper bound on this range\n     * @param includeLower Does this range include the lower bound?\n     * @param includeUpper Does this range include the upper bound?\n     * @param collator The collator to use when determining range inclusion; set\n     *  to null to use Unicode code point ordering instead of collation.\n     * @throws IllegalArgumentException if both terms are null or if\n     *  lowerTerm is null and includeLower is true (similar for upperTerm\n     *  and includeUpper)\n     */\n    public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                       boolean includeLower, boolean includeUpper,\n                       Collator collator) {\n        this(fieldName, lowerTerm, upperTerm, includeLower, includeUpper);\n        this.collator = collator;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aa365c0765407d280cd5df0569b430c6f36832e","date":1239881843,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean,Collator).mjava","pathOld":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean,Collator).mjava","sourceNew":"    /**\n     * <strong>WARNING:</strong> Using this constructor and supplying a non-null\n     * value in the <code>collator</code> parameter will cause every single \n     * index Term in the Field referenced by lowerTerm and/or upperTerm to be\n     * examined.  Depending on the number of index Terms in this Field, the \n     * operation could be very slow.\n     *\n     * @param lowerTerm The lower bound on this range\n     * @param upperTerm The upper bound on this range\n     * @param includeLower Does this range include the lower bound?\n     * @param includeUpper Does this range include the upper bound?\n     * @param collator The collator to use when determining range inclusion; set\n     *  to null to use Unicode code point ordering instead of collation.\n     * @throws IllegalArgumentException if both terms are null or if\n     *  lowerTerm is null and includeLower is true (similar for upperTerm\n     *  and includeUpper)\n     */\n    public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                       boolean includeLower, boolean includeUpper,\n                       Collator collator) {\n        super(new RangeQuery(fieldName, lowerTerm, upperTerm, includeLower, includeUpper, collator));\n    }\n\n","sourceOld":"    /**\n     * <strong>WARNING:</strong> Using this constructor and supplying a non-null\n     * value in the <code>collator</code> parameter will cause every single \n     * index Term in the Field referenced by lowerTerm and/or upperTerm to be\n     * examined.  Depending on the number of index Terms in this Field, the \n     * operation could be very slow.\n     *\n     * @param lowerTerm The lower bound on this range\n     * @param upperTerm The upper bound on this range\n     * @param includeLower Does this range include the lower bound?\n     * @param includeUpper Does this range include the upper bound?\n     * @param collator The collator to use when determining range inclusion; set\n     *  to null to use Unicode code point ordering instead of collation.\n     * @throws IllegalArgumentException if both terms are null or if\n     *  lowerTerm is null and includeLower is true (similar for upperTerm\n     *  and includeUpper)\n     */\n    public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                       boolean includeLower, boolean includeUpper,\n                       Collator collator) {\n        this(fieldName, lowerTerm, upperTerm, includeLower, includeUpper);\n        this.collator = collator;\n        initRangeQuery();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean,Collator).mjava","sourceNew":null,"sourceOld":"    /**\n     * <strong>WARNING:</strong> Using this constructor and supplying a non-null\n     * value in the <code>collator</code> parameter will cause every single \n     * index Term in the Field referenced by lowerTerm and/or upperTerm to be\n     * examined.  Depending on the number of index Terms in this Field, the \n     * operation could be very slow.\n     *\n     * @param lowerTerm The lower bound on this range\n     * @param upperTerm The upper bound on this range\n     * @param includeLower Does this range include the lower bound?\n     * @param includeUpper Does this range include the upper bound?\n     * @param collator The collator to use when determining range inclusion; set\n     *  to null to use Unicode code point ordering instead of collation.\n     * @throws IllegalArgumentException if both terms are null or if\n     *  lowerTerm is null and includeLower is true (similar for upperTerm\n     *  and includeUpper)\n     */\n    public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                       boolean includeLower, boolean includeUpper,\n                       Collator collator) {\n        super(new RangeQuery(fieldName, lowerTerm, upperTerm, includeLower, includeUpper, collator));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c","date":1246738520,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean,Collator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <strong>WARNING:</strong> Using this constructor and supplying a non-null\n   * value in the <code>collator</code> parameter will cause every single \n   * index Term in the Field referenced by lowerTerm and/or upperTerm to be\n   * examined.  Depending on the number of index Terms in this Field, the \n   * operation could be very slow.\n   *\n   * @param lowerTerm The lower bound on this range\n   * @param upperTerm The upper bound on this range\n   * @param includeLower Does this range include the lower bound?\n   * @param includeUpper Does this range include the upper bound?\n   * @param collator The collator to use when determining range inclusion; set\n   *  to null to use Unicode code point ordering instead of collation.\n   * @throws IllegalArgumentException if both terms are null or if\n   *  lowerTerm is null and includeLower is true (similar for upperTerm\n   *  and includeUpper)\n   */\n  public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                     boolean includeLower, boolean includeUpper,\n                     Collator collator) {\n      super(new TermRangeQuery(fieldName, lowerTerm, upperTerm, includeLower, includeUpper, collator));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da","date":1255296547,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/RangeFilter#RangeFilter(String,String,String,boolean,boolean,Collator).mjava","sourceNew":null,"sourceOld":"  /**\n   * <strong>WARNING:</strong> Using this constructor and supplying a non-null\n   * value in the <code>collator</code> parameter will cause every single \n   * index Term in the Field referenced by lowerTerm and/or upperTerm to be\n   * examined.  Depending on the number of index Terms in this Field, the \n   * operation could be very slow.\n   *\n   * @param lowerTerm The lower bound on this range\n   * @param upperTerm The upper bound on this range\n   * @param includeLower Does this range include the lower bound?\n   * @param includeUpper Does this range include the upper bound?\n   * @param collator The collator to use when determining range inclusion; set\n   *  to null to use Unicode code point ordering instead of collation.\n   * @throws IllegalArgumentException if both terms are null or if\n   *  lowerTerm is null and includeLower is true (similar for upperTerm\n   *  and includeUpper)\n   */\n  public RangeFilter(String fieldName, String lowerTerm, String upperTerm,\n                     boolean includeLower, boolean includeUpper,\n                     Collator collator) {\n      super(new TermRangeQuery(fieldName, lowerTerm, upperTerm, includeLower, includeUpper, collator));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["2aa365c0765407d280cd5df0569b430c6f36832e"],"b33dc4652df2747e38f9782fde82bd426b77c538":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2aa365c0765407d280cd5df0569b430c6f36832e":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["b33dc4652df2747e38f9782fde82bd426b77c538"]},"commit2Childs":{"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c"],"b33dc4652df2747e38f9782fde82bd426b77c538":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b33dc4652df2747e38f9782fde82bd426b77c538"],"2aa365c0765407d280cd5df0569b430c6f36832e":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["2aa365c0765407d280cd5df0569b430c6f36832e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}