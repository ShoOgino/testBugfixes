{"path":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#assertItersOnSameDoc().mjava","commits":[{"id":"73beab9372f571bc3dc060fcc658d2879ce20d67","date":1601905097,"type":0,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#assertItersOnSameDoc().mjava","pathOld":"/dev/null","sourceNew":"  // Returns {@code true} if all sub-iterators are on the same doc ID, {@code false} otherwise\n  private boolean assertItersOnSameDoc() {\n    int curDoc = lead1.docID();\n    boolean iteratorsOnTheSameDoc = (lead2.docID() == curDoc);\n    for (int i = 0; (i < others.length && iteratorsOnTheSameDoc); i++) {\n      iteratorsOnTheSameDoc = iteratorsOnTheSameDoc && (others[i].docID() == curDoc);\n    }\n    return iteratorsOnTheSameDoc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14eadbcde31ef1b984ca353239772e18e1dcf667","date":1601909725,"type":4,"author":"Mayya Sharipova","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#assertItersOnSameDoc().mjava","sourceNew":null,"sourceOld":"  // Returns {@code true} if all sub-iterators are on the same doc ID, {@code false} otherwise\n  private boolean assertItersOnSameDoc() {\n    int curDoc = lead1.docID();\n    boolean iteratorsOnTheSameDoc = (lead2.docID() == curDoc);\n    for (int i = 0; (i < others.length && iteratorsOnTheSameDoc); i++) {\n      iteratorsOnTheSameDoc = iteratorsOnTheSameDoc && (others[i].docID() == curDoc);\n    }\n    return iteratorsOnTheSameDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9f411fcb966d871aaa550f0ad1e328ce71df018","date":1602004981,"type":0,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#assertItersOnSameDoc().mjava","pathOld":"/dev/null","sourceNew":"  // Returns {@code true} if all sub-iterators are on the same doc ID, {@code false} otherwise\n  private boolean assertItersOnSameDoc() {\n    int curDoc = lead1.docID();\n    boolean iteratorsOnTheSameDoc = (lead2.docID() == curDoc);\n    for (int i = 0; (i < others.length && iteratorsOnTheSameDoc); i++) {\n      iteratorsOnTheSameDoc = iteratorsOnTheSameDoc && (others[i].docID() == curDoc);\n    }\n    return iteratorsOnTheSameDoc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9f411fcb966d871aaa550f0ad1e328ce71df018":["14eadbcde31ef1b984ca353239772e18e1dcf667"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73beab9372f571bc3dc060fcc658d2879ce20d67":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"14eadbcde31ef1b984ca353239772e18e1dcf667":["73beab9372f571bc3dc060fcc658d2879ce20d67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9f411fcb966d871aaa550f0ad1e328ce71df018"]},"commit2Childs":{"a9f411fcb966d871aaa550f0ad1e328ce71df018":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73beab9372f571bc3dc060fcc658d2879ce20d67"],"73beab9372f571bc3dc060fcc658d2879ce20d67":["14eadbcde31ef1b984ca353239772e18e1dcf667"],"14eadbcde31ef1b984ca353239772e18e1dcf667":["a9f411fcb966d871aaa550f0ad1e328ce71df018"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}