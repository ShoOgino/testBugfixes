{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#descendWithPrefix(Arc[Object],BytesRef).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#descendWithPrefix(Arc[Object],BytesRef).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#descendWithPrefix(Arc[Object],BytesRef).mjava","sourceNew":"  /**\n   * Descend along the path starting at <code>arc</code> and going through bytes\n   * in the argument.\n   * \n   * @param arc\n   *          The starting arc. This argument is modified in-place.\n   * @param utf8\n   *          The term to descend along.\n   * @return If <code>true</code>, <code>arc</code> will be set to the arc\n   *         matching last byte of <code>term</code>. <code>false</code> is\n   *         returned if no such prefix exists.\n   */\n  private boolean descendWithPrefix(Arc<Object> arc, BytesRef utf8)\n      throws IOException {\n    final int max = utf8.offset + utf8.length;\n    // Cannot save as instance var since multiple threads\n    // can use FSTCompletion at once...\n    final FST.BytesReader fstReader = automaton.getBytesReader(0);\n    for (int i = utf8.offset; i < max; i++) {\n      if (automaton.findTargetArc(utf8.bytes[i] & 0xff, arc, arc, fstReader) == null) {\n        // No matching prefixes, return an empty result.\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Descend along the path starting at <code>arc</code> and going through bytes\n   * in the argument.\n   * \n   * @param arc\n   *          The starting arc. This argument is modified in-place.\n   * @param utf8\n   *          The term to descend along.\n   * @return If <code>true</code>, <code>arc</code> will be set to the arc\n   *         matching last byte of <code>term</code>. <code>false</code> is\n   *         returned if no such prefix exists.\n   */\n  private boolean descendWithPrefix(Arc<Object> arc, BytesRef utf8)\n      throws IOException {\n    final int max = utf8.offset + utf8.length;\n    // Cannot save as instance var since multiple threads\n    // can use FSTCompletion at once...\n    final FST.BytesReader fstReader = automaton.getBytesReader(0);\n    for (int i = utf8.offset; i < max; i++) {\n      if (automaton.findTargetArc(utf8.bytes[i] & 0xff, arc, arc, fstReader) == null) {\n        // No matching prefixes, return an empty result.\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82557a475db3e0849171dc0be5b02e3ae0745ddb","date":1358195918,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#descendWithPrefix(Arc[Object],BytesRef).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#descendWithPrefix(Arc[Object],BytesRef).mjava","sourceNew":"  /**\n   * Descend along the path starting at <code>arc</code> and going through bytes\n   * in the argument.\n   * \n   * @param arc\n   *          The starting arc. This argument is modified in-place.\n   * @param utf8\n   *          The term to descend along.\n   * @return If <code>true</code>, <code>arc</code> will be set to the arc\n   *         matching last byte of <code>term</code>. <code>false</code> is\n   *         returned if no such prefix exists.\n   */\n  private boolean descendWithPrefix(Arc<Object> arc, BytesRef utf8)\n      throws IOException {\n    final int max = utf8.offset + utf8.length;\n    // Cannot save as instance var since multiple threads\n    // can use FSTCompletion at once...\n    final FST.BytesReader fstReader = automaton.getBytesReader();\n    for (int i = utf8.offset; i < max; i++) {\n      if (automaton.findTargetArc(utf8.bytes[i] & 0xff, arc, arc, fstReader) == null) {\n        // No matching prefixes, return an empty result.\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Descend along the path starting at <code>arc</code> and going through bytes\n   * in the argument.\n   * \n   * @param arc\n   *          The starting arc. This argument is modified in-place.\n   * @param utf8\n   *          The term to descend along.\n   * @return If <code>true</code>, <code>arc</code> will be set to the arc\n   *         matching last byte of <code>term</code>. <code>false</code> is\n   *         returned if no such prefix exists.\n   */\n  private boolean descendWithPrefix(Arc<Object> arc, BytesRef utf8)\n      throws IOException {\n    final int max = utf8.offset + utf8.length;\n    // Cannot save as instance var since multiple threads\n    // can use FSTCompletion at once...\n    final FST.BytesReader fstReader = automaton.getBytesReader(0);\n    for (int i = utf8.offset; i < max; i++) {\n      if (automaton.findTargetArc(utf8.bytes[i] & 0xff, arc, arc, fstReader) == null) {\n        // No matching prefixes, return an empty result.\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#descendWithPrefix(Arc[Object],BytesRef).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#descendWithPrefix(Arc[Object],BytesRef).mjava","sourceNew":"  /**\n   * Descend along the path starting at <code>arc</code> and going through bytes\n   * in the argument.\n   * \n   * @param arc\n   *          The starting arc. This argument is modified in-place.\n   * @param utf8\n   *          The term to descend along.\n   * @return If <code>true</code>, <code>arc</code> will be set to the arc\n   *         matching last byte of <code>term</code>. <code>false</code> is\n   *         returned if no such prefix exists.\n   */\n  private boolean descendWithPrefix(Arc<Object> arc, BytesRef utf8)\n      throws IOException {\n    final int max = utf8.offset + utf8.length;\n    // Cannot save as instance var since multiple threads\n    // can use FSTCompletion at once...\n    final FST.BytesReader fstReader = automaton.getBytesReader();\n    for (int i = utf8.offset; i < max; i++) {\n      if (automaton.findTargetArc(utf8.bytes[i] & 0xff, arc, arc, fstReader) == null) {\n        // No matching prefixes, return an empty result.\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Descend along the path starting at <code>arc</code> and going through bytes\n   * in the argument.\n   * \n   * @param arc\n   *          The starting arc. This argument is modified in-place.\n   * @param utf8\n   *          The term to descend along.\n   * @return If <code>true</code>, <code>arc</code> will be set to the arc\n   *         matching last byte of <code>term</code>. <code>false</code> is\n   *         returned if no such prefix exists.\n   */\n  private boolean descendWithPrefix(Arc<Object> arc, BytesRef utf8)\n      throws IOException {\n    final int max = utf8.offset + utf8.length;\n    // Cannot save as instance var since multiple threads\n    // can use FSTCompletion at once...\n    final FST.BytesReader fstReader = automaton.getBytesReader(0);\n    for (int i = utf8.offset; i < max; i++) {\n      if (automaton.findTargetArc(utf8.bytes[i] & 0xff, arc, arc, fstReader) == null) {\n        // No matching prefixes, return an empty result.\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"82557a475db3e0849171dc0be5b02e3ae0745ddb":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","82557a475db3e0849171dc0be5b02e3ae0745ddb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82557a475db3e0849171dc0be5b02e3ae0745ddb"]},"commit2Childs":{"82557a475db3e0849171dc0be5b02e3ae0745ddb":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["82557a475db3e0849171dc0be5b02e3ae0745ddb","c4015cd39dff8d4dec562d909f9766debac53aa6"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}