{"path":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask.LatestVersionComparator#compare(String,String).mjava","commits":[{"id":"b3e4bd3aed493904d0bbb6c6e0394f619e175087","date":1401446035,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask.LatestVersionComparator#compare(String,String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int compare(String rev1, String rev2) {\n      rev1 = rev1.replaceAll(\"([a-zA-Z])(\\\\d)\", \"$1.$2\");\n      rev1 = rev1.replaceAll(\"(\\\\d)([a-zA-Z])\", \"$1.$2\");\n      rev2 = rev2.replaceAll(\"([a-zA-Z])(\\\\d)\", \"$1.$2\");\n      rev2 = rev2.replaceAll(\"(\\\\d)([a-zA-Z])\", \"$1.$2\");\n\n      String[] parts1 = rev1.split(\"[-._+]\");\n      String[] parts2 = rev2.split(\"[-._+]\");\n\n      int i = 0;\n      for (; i < parts1.length && i < parts2.length; i++) {\n        if (parts1[i].equals(parts2[i])) {\n          continue;\n        }\n        boolean is1Number = isNumber(parts1[i]);\n        boolean is2Number = isNumber(parts2[i]);\n        if (is1Number && !is2Number) {\n          return 1;\n        }\n        if (is2Number && !is1Number) {\n          return -1;\n        }\n        if (is1Number && is2Number) {\n          return Long.valueOf(parts1[i]).compareTo(Long.valueOf(parts2[i]));\n        }\n        // both are strings, we compare them taking into account special meaning\n        Integer sm1 = SPECIAL_MEANINGS.get(parts1[i].toLowerCase(Locale.ROOT));\n        Integer sm2 = SPECIAL_MEANINGS.get(parts2[i].toLowerCase(Locale.ROOT));\n        if (sm1 != null) {\n          sm2 = sm2 == null ? new Integer(0) : sm2;\n          return sm1.compareTo(sm2);\n        }\n        if (sm2 != null) {\n          return new Integer(0).compareTo(sm2);\n        }\n        return parts1[i].compareTo(parts2[i]);\n      }\n      if (i < parts1.length) {\n        return isNumber(parts1[i]) ? 1 : -1;\n      }\n      if (i < parts2.length) {\n        return isNumber(parts2[i]) ? -1 : 1;\n      }\n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask.LatestVersionComparator#compare(String,String).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask.LatestVersionComparator#compare(String,String).mjava","sourceNew":"    @Override\n    public int compare(String rev1, String rev2) {\n      rev1 = rev1.replaceAll(\"([a-zA-Z])(\\\\d)\", \"$1.$2\");\n      rev1 = rev1.replaceAll(\"(\\\\d)([a-zA-Z])\", \"$1.$2\");\n      rev2 = rev2.replaceAll(\"([a-zA-Z])(\\\\d)\", \"$1.$2\");\n      rev2 = rev2.replaceAll(\"(\\\\d)([a-zA-Z])\", \"$1.$2\");\n\n      String[] parts1 = rev1.split(\"[-._+]\");\n      String[] parts2 = rev2.split(\"[-._+]\");\n\n      int i = 0;\n      for (; i < parts1.length && i < parts2.length; i++) {\n        if (parts1[i].equals(parts2[i])) {\n          continue;\n        }\n        boolean is1Number = isNumber(parts1[i]);\n        boolean is2Number = isNumber(parts2[i]);\n        if (is1Number && !is2Number) {\n          return 1;\n        }\n        if (is2Number && !is1Number) {\n          return -1;\n        }\n        if (is1Number && is2Number) {\n          return Long.valueOf(parts1[i]).compareTo(Long.valueOf(parts2[i]));\n        }\n        // both are strings, we compare them taking into account special meaning\n        Integer sm1 = SPECIAL_MEANINGS.get(parts1[i].toLowerCase(Locale.ROOT));\n        Integer sm2 = SPECIAL_MEANINGS.get(parts2[i].toLowerCase(Locale.ROOT));\n        if (sm1 != null) {\n          sm2 = sm2 == null ? 0 : sm2;\n          return sm1.compareTo(sm2);\n        }\n        if (sm2 != null) {\n          return Integer.valueOf(0).compareTo(sm2);\n        }\n        return parts1[i].compareTo(parts2[i]);\n      }\n      if (i < parts1.length) {\n        return isNumber(parts1[i]) ? 1 : -1;\n      }\n      if (i < parts2.length) {\n        return isNumber(parts2[i]) ? -1 : 1;\n      }\n      return 0;\n    }\n\n","sourceOld":"    @Override\n    public int compare(String rev1, String rev2) {\n      rev1 = rev1.replaceAll(\"([a-zA-Z])(\\\\d)\", \"$1.$2\");\n      rev1 = rev1.replaceAll(\"(\\\\d)([a-zA-Z])\", \"$1.$2\");\n      rev2 = rev2.replaceAll(\"([a-zA-Z])(\\\\d)\", \"$1.$2\");\n      rev2 = rev2.replaceAll(\"(\\\\d)([a-zA-Z])\", \"$1.$2\");\n\n      String[] parts1 = rev1.split(\"[-._+]\");\n      String[] parts2 = rev2.split(\"[-._+]\");\n\n      int i = 0;\n      for (; i < parts1.length && i < parts2.length; i++) {\n        if (parts1[i].equals(parts2[i])) {\n          continue;\n        }\n        boolean is1Number = isNumber(parts1[i]);\n        boolean is2Number = isNumber(parts2[i]);\n        if (is1Number && !is2Number) {\n          return 1;\n        }\n        if (is2Number && !is1Number) {\n          return -1;\n        }\n        if (is1Number && is2Number) {\n          return Long.valueOf(parts1[i]).compareTo(Long.valueOf(parts2[i]));\n        }\n        // both are strings, we compare them taking into account special meaning\n        Integer sm1 = SPECIAL_MEANINGS.get(parts1[i].toLowerCase(Locale.ROOT));\n        Integer sm2 = SPECIAL_MEANINGS.get(parts2[i].toLowerCase(Locale.ROOT));\n        if (sm1 != null) {\n          sm2 = sm2 == null ? new Integer(0) : sm2;\n          return sm1.compareTo(sm2);\n        }\n        if (sm2 != null) {\n          return new Integer(0).compareTo(sm2);\n        }\n        return parts1[i].compareTo(parts2[i]);\n      }\n      if (i < parts1.length) {\n        return isNumber(parts1[i]) ? 1 : -1;\n      }\n      if (i < parts2.length) {\n        return isNumber(parts2[i]) ? -1 : 1;\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask.LatestVersionComparator#compare(String,String).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask.LatestVersionComparator#compare(String,String).mjava","sourceNew":"    @Override\n    public int compare(String rev1, String rev2) {\n      rev1 = rev1.replaceAll(\"([a-zA-Z])(\\\\d)\", \"$1.$2\");\n      rev1 = rev1.replaceAll(\"(\\\\d)([a-zA-Z])\", \"$1.$2\");\n      rev2 = rev2.replaceAll(\"([a-zA-Z])(\\\\d)\", \"$1.$2\");\n      rev2 = rev2.replaceAll(\"(\\\\d)([a-zA-Z])\", \"$1.$2\");\n\n      String[] parts1 = rev1.split(\"[-._+]\");\n      String[] parts2 = rev2.split(\"[-._+]\");\n\n      int i = 0;\n      for (; i < parts1.length && i < parts2.length; i++) {\n        if (parts1[i].equals(parts2[i])) {\n          continue;\n        }\n        boolean is1Number = isNumber(parts1[i]);\n        boolean is2Number = isNumber(parts2[i]);\n        if (is1Number && !is2Number) {\n          return 1;\n        }\n        if (is2Number && !is1Number) {\n          return -1;\n        }\n        if (is1Number && is2Number) {\n          return Long.valueOf(parts1[i]).compareTo(Long.valueOf(parts2[i]));\n        }\n        // both are strings, we compare them taking into account special meaning\n        Integer sm1 = SPECIAL_MEANINGS.get(parts1[i].toLowerCase(Locale.ROOT));\n        Integer sm2 = SPECIAL_MEANINGS.get(parts2[i].toLowerCase(Locale.ROOT));\n        if (sm1 != null) {\n          sm2 = sm2 == null ? 0 : sm2;\n          return sm1.compareTo(sm2);\n        }\n        if (sm2 != null) {\n          return Integer.valueOf(0).compareTo(sm2);\n        }\n        return parts1[i].compareTo(parts2[i]);\n      }\n      if (i < parts1.length) {\n        return isNumber(parts1[i]) ? 1 : -1;\n      }\n      if (i < parts2.length) {\n        return isNumber(parts2[i]) ? -1 : 1;\n      }\n      return 0;\n    }\n\n","sourceOld":"    @Override\n    public int compare(String rev1, String rev2) {\n      rev1 = rev1.replaceAll(\"([a-zA-Z])(\\\\d)\", \"$1.$2\");\n      rev1 = rev1.replaceAll(\"(\\\\d)([a-zA-Z])\", \"$1.$2\");\n      rev2 = rev2.replaceAll(\"([a-zA-Z])(\\\\d)\", \"$1.$2\");\n      rev2 = rev2.replaceAll(\"(\\\\d)([a-zA-Z])\", \"$1.$2\");\n\n      String[] parts1 = rev1.split(\"[-._+]\");\n      String[] parts2 = rev2.split(\"[-._+]\");\n\n      int i = 0;\n      for (; i < parts1.length && i < parts2.length; i++) {\n        if (parts1[i].equals(parts2[i])) {\n          continue;\n        }\n        boolean is1Number = isNumber(parts1[i]);\n        boolean is2Number = isNumber(parts2[i]);\n        if (is1Number && !is2Number) {\n          return 1;\n        }\n        if (is2Number && !is1Number) {\n          return -1;\n        }\n        if (is1Number && is2Number) {\n          return Long.valueOf(parts1[i]).compareTo(Long.valueOf(parts2[i]));\n        }\n        // both are strings, we compare them taking into account special meaning\n        Integer sm1 = SPECIAL_MEANINGS.get(parts1[i].toLowerCase(Locale.ROOT));\n        Integer sm2 = SPECIAL_MEANINGS.get(parts2[i].toLowerCase(Locale.ROOT));\n        if (sm1 != null) {\n          sm2 = sm2 == null ? new Integer(0) : sm2;\n          return sm1.compareTo(sm2);\n        }\n        if (sm2 != null) {\n          return new Integer(0).compareTo(sm2);\n        }\n        return parts1[i].compareTo(parts2[i]);\n      }\n      if (i < parts1.length) {\n        return isNumber(parts1[i]) ? 1 : -1;\n      }\n      if (i < parts2.length) {\n        return isNumber(parts2[i]) ? -1 : 1;\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask.LatestVersionComparator#compare(String,String).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask.LatestVersionComparator#compare(String,String).mjava","sourceNew":"    @Override\n    public int compare(String rev1, String rev2) {\n      rev1 = rev1.replaceAll(\"([a-zA-Z])(\\\\d)\", \"$1.$2\");\n      rev1 = rev1.replaceAll(\"(\\\\d)([a-zA-Z])\", \"$1.$2\");\n      rev2 = rev2.replaceAll(\"([a-zA-Z])(\\\\d)\", \"$1.$2\");\n      rev2 = rev2.replaceAll(\"(\\\\d)([a-zA-Z])\", \"$1.$2\");\n\n      String[] parts1 = rev1.split(\"[-._+]\");\n      String[] parts2 = rev2.split(\"[-._+]\");\n\n      int i = 0;\n      for (; i < parts1.length && i < parts2.length; i++) {\n        if (parts1[i].equals(parts2[i])) {\n          continue;\n        }\n        boolean is1Number = isNumber(parts1[i]);\n        boolean is2Number = isNumber(parts2[i]);\n        if (is1Number && !is2Number) {\n          return 1;\n        }\n        if (is2Number && !is1Number) {\n          return -1;\n        }\n        if (is1Number && is2Number) {\n          return Long.valueOf(parts1[i]).compareTo(Long.valueOf(parts2[i]));\n        }\n        // both are strings, we compare them taking into account special meaning\n        Integer sm1 = SPECIAL_MEANINGS.get(parts1[i].toLowerCase(Locale.ROOT));\n        Integer sm2 = SPECIAL_MEANINGS.get(parts2[i].toLowerCase(Locale.ROOT));\n        if (sm1 != null) {\n          sm2 = sm2 == null ? 0 : sm2;\n          return sm1.compareTo(sm2);\n        }\n        if (sm2 != null) {\n          return Integer.valueOf(0).compareTo(sm2);\n        }\n        return parts1[i].compareTo(parts2[i]);\n      }\n      if (i < parts1.length) {\n        return isNumber(parts1[i]) ? 1 : -1;\n      }\n      if (i < parts2.length) {\n        return isNumber(parts2[i]) ? -1 : 1;\n      }\n      return 0;\n    }\n\n","sourceOld":"    @Override\n    public int compare(String rev1, String rev2) {\n      rev1 = rev1.replaceAll(\"([a-zA-Z])(\\\\d)\", \"$1.$2\");\n      rev1 = rev1.replaceAll(\"(\\\\d)([a-zA-Z])\", \"$1.$2\");\n      rev2 = rev2.replaceAll(\"([a-zA-Z])(\\\\d)\", \"$1.$2\");\n      rev2 = rev2.replaceAll(\"(\\\\d)([a-zA-Z])\", \"$1.$2\");\n\n      String[] parts1 = rev1.split(\"[-._+]\");\n      String[] parts2 = rev2.split(\"[-._+]\");\n\n      int i = 0;\n      for (; i < parts1.length && i < parts2.length; i++) {\n        if (parts1[i].equals(parts2[i])) {\n          continue;\n        }\n        boolean is1Number = isNumber(parts1[i]);\n        boolean is2Number = isNumber(parts2[i]);\n        if (is1Number && !is2Number) {\n          return 1;\n        }\n        if (is2Number && !is1Number) {\n          return -1;\n        }\n        if (is1Number && is2Number) {\n          return Long.valueOf(parts1[i]).compareTo(Long.valueOf(parts2[i]));\n        }\n        // both are strings, we compare them taking into account special meaning\n        Integer sm1 = SPECIAL_MEANINGS.get(parts1[i].toLowerCase(Locale.ROOT));\n        Integer sm2 = SPECIAL_MEANINGS.get(parts2[i].toLowerCase(Locale.ROOT));\n        if (sm1 != null) {\n          sm2 = sm2 == null ? new Integer(0) : sm2;\n          return sm1.compareTo(sm2);\n        }\n        if (sm2 != null) {\n          return new Integer(0).compareTo(sm2);\n        }\n        return parts1[i].compareTo(parts2[i]);\n      }\n      if (i < parts1.length) {\n        return isNumber(parts1[i]) ? 1 : -1;\n      }\n      if (i < parts2.length) {\n        return isNumber(parts2[i]) ? -1 : 1;\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e025cf1c07150c8db28879d785db17eb3a66ca9f","date":1598788864,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask.LatestVersionComparator#compare(String,String).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int compare(String rev1, String rev2) {\n      rev1 = rev1.replaceAll(\"([a-zA-Z])(\\\\d)\", \"$1.$2\");\n      rev1 = rev1.replaceAll(\"(\\\\d)([a-zA-Z])\", \"$1.$2\");\n      rev2 = rev2.replaceAll(\"([a-zA-Z])(\\\\d)\", \"$1.$2\");\n      rev2 = rev2.replaceAll(\"(\\\\d)([a-zA-Z])\", \"$1.$2\");\n\n      String[] parts1 = rev1.split(\"[-._+]\");\n      String[] parts2 = rev2.split(\"[-._+]\");\n\n      int i = 0;\n      for (; i < parts1.length && i < parts2.length; i++) {\n        if (parts1[i].equals(parts2[i])) {\n          continue;\n        }\n        boolean is1Number = isNumber(parts1[i]);\n        boolean is2Number = isNumber(parts2[i]);\n        if (is1Number && !is2Number) {\n          return 1;\n        }\n        if (is2Number && !is1Number) {\n          return -1;\n        }\n        if (is1Number && is2Number) {\n          return Long.valueOf(parts1[i]).compareTo(Long.valueOf(parts2[i]));\n        }\n        // both are strings, we compare them taking into account special meaning\n        Integer sm1 = SPECIAL_MEANINGS.get(parts1[i].toLowerCase(Locale.ROOT));\n        Integer sm2 = SPECIAL_MEANINGS.get(parts2[i].toLowerCase(Locale.ROOT));\n        if (sm1 != null) {\n          sm2 = sm2 == null ? 0 : sm2;\n          return sm1.compareTo(sm2);\n        }\n        if (sm2 != null) {\n          return Integer.valueOf(0).compareTo(sm2);\n        }\n        return parts1[i].compareTo(parts2[i]);\n      }\n      if (i < parts1.length) {\n        return isNumber(parts1[i]) ? 1 : -1;\n      }\n      if (i < parts2.length) {\n        return isNumber(parts2[i]) ? -1 : 1;\n      }\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b3e4bd3aed493904d0bbb6c6e0394f619e175087","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["b3e4bd3aed493904d0bbb6c6e0394f619e175087","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e025cf1c07150c8db28879d785db17eb3a66ca9f"]},"commit2Childs":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","e025cf1c07150c8db28879d785db17eb3a66ca9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}