{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetArrays#testFacetArrays().mjava","commits":[{"id":"2a2548b7f050533ac9a884b31cab5fb6f0386fbb","date":1355233860,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetArrays#testFacetArrays().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFacetArrays() {\n    for (boolean reusing : new boolean[] { false, true }) {\n      final FacetArrays arrays;\n      if (reusing) {\n        arrays = new ReusingFacetArrays(new ArraysPool(1, 1));\n      } else {\n        arrays = new FacetArrays(1);\n      }\n      \n      int[] intArray = arrays.getIntArray();\n      // Set the element, then free\n      intArray[0] = 1;\n      arrays.free();\n      \n      // We should expect a cleared array back\n      int[] newIntArray = arrays.getIntArray();\n      assertEquals(\"Expected a cleared array back, but the array is still filled\", 0, newIntArray[0]);\n      \n      float[] floatArray = arrays.getFloatArray();\n      // Set the element, then free\n      floatArray[0] = 1.0f;\n      arrays.free();\n      \n      // We should expect a cleared array back\n      float[] newFloatArray = arrays.getFloatArray();\n      assertEquals(\"Expected a cleared array back, but the array is still filled\", 0.0f, newFloatArray[0], 0.0);\n      \n      if (reusing) {\n        // same instance should be returned after free()\n        assertSame(\"ReusingFacetArrays did not reuse the array!\", intArray, newIntArray);\n        assertSame(\"ReusingFacetArrays did not reuse the array!\", floatArray, newFloatArray);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetArrays#testFacetArrays().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFacetArrays() {\n    for (boolean reusing : new boolean[] { false, true }) {\n      final FacetArrays arrays;\n      if (reusing) {\n        arrays = new ReusingFacetArrays(new ArraysPool(1, 1));\n      } else {\n        arrays = new FacetArrays(1);\n      }\n      \n      int[] intArray = arrays.getIntArray();\n      // Set the element, then free\n      intArray[0] = 1;\n      arrays.free();\n      \n      // We should expect a cleared array back\n      int[] newIntArray = arrays.getIntArray();\n      assertEquals(\"Expected a cleared array back, but the array is still filled\", 0, newIntArray[0]);\n      \n      float[] floatArray = arrays.getFloatArray();\n      // Set the element, then free\n      floatArray[0] = 1.0f;\n      arrays.free();\n      \n      // We should expect a cleared array back\n      float[] newFloatArray = arrays.getFloatArray();\n      assertEquals(\"Expected a cleared array back, but the array is still filled\", 0.0f, newFloatArray[0], 0.0);\n      \n      if (reusing) {\n        // same instance should be returned after free()\n        assertSame(\"ReusingFacetArrays did not reuse the array!\", intArray, newIntArray);\n        assertSame(\"ReusingFacetArrays did not reuse the array!\", floatArray, newFloatArray);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetArrays#testFacetArrays().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testFacetArrays() {\n    for (boolean reusing : new boolean[] { false, true }) {\n      final FacetArrays arrays;\n      if (reusing) {\n        arrays = new ReusingFacetArrays(new ArraysPool(1, 1));\n      } else {\n        arrays = new FacetArrays(1);\n      }\n      \n      int[] intArray = arrays.getIntArray();\n      // Set the element, then free\n      intArray[0] = 1;\n      arrays.free();\n      \n      // We should expect a cleared array back\n      int[] newIntArray = arrays.getIntArray();\n      assertEquals(\"Expected a cleared array back, but the array is still filled\", 0, newIntArray[0]);\n      \n      float[] floatArray = arrays.getFloatArray();\n      // Set the element, then free\n      floatArray[0] = 1.0f;\n      arrays.free();\n      \n      // We should expect a cleared array back\n      float[] newFloatArray = arrays.getFloatArray();\n      assertEquals(\"Expected a cleared array back, but the array is still filled\", 0.0f, newFloatArray[0], 0.0);\n      \n      if (reusing) {\n        // same instance should be returned after free()\n        assertSame(\"ReusingFacetArrays did not reuse the array!\", intArray, newIntArray);\n        assertSame(\"ReusingFacetArrays did not reuse the array!\", floatArray, newFloatArray);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetArrays#testFacetArrays().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testFacetArrays() {\n    for (boolean reusing : new boolean[] { false, true }) {\n      final FacetArrays arrays;\n      if (reusing) {\n        arrays = new ReusingFacetArrays(new ArraysPool(1, 1));\n      } else {\n        arrays = new FacetArrays(1);\n      }\n      \n      int[] intArray = arrays.getIntArray();\n      // Set the element, then free\n      intArray[0] = 1;\n      arrays.free();\n      \n      // We should expect a cleared array back\n      int[] newIntArray = arrays.getIntArray();\n      assertEquals(\"Expected a cleared array back, but the array is still filled\", 0, newIntArray[0]);\n      \n      float[] floatArray = arrays.getFloatArray();\n      // Set the element, then free\n      floatArray[0] = 1.0f;\n      arrays.free();\n      \n      // We should expect a cleared array back\n      float[] newFloatArray = arrays.getFloatArray();\n      assertEquals(\"Expected a cleared array back, but the array is still filled\", 0.0f, newFloatArray[0], 0.0);\n      \n      if (reusing) {\n        // same instance should be returned after free()\n        assertSame(\"ReusingFacetArrays did not reuse the array!\", intArray, newIntArray);\n        assertSame(\"ReusingFacetArrays did not reuse the array!\", floatArray, newFloatArray);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2a2548b7f050533ac9a884b31cab5fb6f0386fbb"],"2a2548b7f050533ac9a884b31cab5fb6f0386fbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["2a2548b7f050533ac9a884b31cab5fb6f0386fbb","f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["2a2548b7f050533ac9a884b31cab5fb6f0386fbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"2a2548b7f050533ac9a884b31cab5fb6f0386fbb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3cc728b07df73b197e6d940d27f9b08b63918f13","f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","2a2548b7f050533ac9a884b31cab5fb6f0386fbb"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}