{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getRandomCommonPrefix(BKDRadixSelector.PathSlice,int,int).mjava","commits":[{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getRandomCommonPrefix(BKDRadixSelector.PathSlice,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** returns a common prefix length equal or lower than the current one */\n  private int getRandomCommonPrefix(BKDRadixSelector.PathSlice inputSlice, int bytesPerDimension, int splitDim) throws IOException {\n    byte[] pointsMax = getMax(inputSlice, bytesPerDimension, splitDim);\n    byte[] pointsMin = getMin(inputSlice, bytesPerDimension, splitDim);\n    int commonPrefixLength = FutureArrays.mismatch(pointsMin, 0, bytesPerDimension, pointsMax, 0, bytesPerDimension);\n    if (commonPrefixLength == -1) {\n      commonPrefixLength = bytesPerDimension;\n    }\n    return (random().nextBoolean()) ? commonPrefixLength : commonPrefixLength == 0 ? 0 : random().nextInt(commonPrefixLength);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getRandomCommonPrefix(BKDRadixSelector.PathSlice,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getRandomCommonPrefix(BKDRadixSelector.PathSlice,int,int).mjava","sourceNew":"  /** returns a common prefix length equal or lower than the current one */\n  private int getRandomCommonPrefix(BKDRadixSelector.PathSlice inputSlice, int bytesPerDimension, int splitDim) throws IOException {\n    byte[] pointsMax = getMax(inputSlice, bytesPerDimension, splitDim);\n    byte[] pointsMin = getMin(inputSlice, bytesPerDimension, splitDim);\n    int commonPrefixLength = Arrays.mismatch(pointsMin, 0, bytesPerDimension, pointsMax, 0, bytesPerDimension);\n    if (commonPrefixLength == -1) {\n      commonPrefixLength = bytesPerDimension;\n    }\n    return (random().nextBoolean()) ? commonPrefixLength : commonPrefixLength == 0 ? 0 : random().nextInt(commonPrefixLength);\n  }\n\n","sourceOld":"  /** returns a common prefix length equal or lower than the current one */\n  private int getRandomCommonPrefix(BKDRadixSelector.PathSlice inputSlice, int bytesPerDimension, int splitDim) throws IOException {\n    byte[] pointsMax = getMax(inputSlice, bytesPerDimension, splitDim);\n    byte[] pointsMin = getMin(inputSlice, bytesPerDimension, splitDim);\n    int commonPrefixLength = FutureArrays.mismatch(pointsMin, 0, bytesPerDimension, pointsMax, 0, bytesPerDimension);\n    if (commonPrefixLength == -1) {\n      commonPrefixLength = bytesPerDimension;\n    }\n    return (random().nextBoolean()) ? commonPrefixLength : commonPrefixLength == 0 ? 0 : random().nextInt(commonPrefixLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getRandomCommonPrefix(BKDConfig,BKDRadixSelector.PathSlice,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getRandomCommonPrefix(BKDRadixSelector.PathSlice,int,int).mjava","sourceNew":"  /** returns a common prefix length equal or lower than the current one */\n  private int getRandomCommonPrefix(BKDConfig config, BKDRadixSelector.PathSlice inputSlice, int splitDim) throws IOException {\n    byte[] pointsMax = getMax(config, inputSlice, splitDim);\n    byte[] pointsMin = getMin(config, inputSlice, splitDim);\n    int commonPrefixLength = Arrays.mismatch(pointsMin, 0, config.bytesPerDim, pointsMax, 0, config.bytesPerDim);\n    if (commonPrefixLength == -1) {\n      commonPrefixLength = config.bytesPerDim;\n    }\n    return (random().nextBoolean()) ? commonPrefixLength : commonPrefixLength == 0 ? 0 : random().nextInt(commonPrefixLength);\n  }\n\n","sourceOld":"  /** returns a common prefix length equal or lower than the current one */\n  private int getRandomCommonPrefix(BKDRadixSelector.PathSlice inputSlice, int bytesPerDimension, int splitDim) throws IOException {\n    byte[] pointsMax = getMax(inputSlice, bytesPerDimension, splitDim);\n    byte[] pointsMin = getMin(inputSlice, bytesPerDimension, splitDim);\n    int commonPrefixLength = Arrays.mismatch(pointsMin, 0, bytesPerDimension, pointsMax, 0, bytesPerDimension);\n    if (commonPrefixLength == -1) {\n      commonPrefixLength = bytesPerDimension;\n    }\n    return (random().nextBoolean()) ? commonPrefixLength : commonPrefixLength == 0 ? 0 : random().nextInt(commonPrefixLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}