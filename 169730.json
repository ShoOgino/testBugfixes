{"path":"src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","commits":[{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","pathOld":"/dev/null","sourceNew":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final TermAttribute termAtt = (TermAttribute) src.addAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = (TypeAttribute) src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator it = clone.getAttributeClassesIterator();\n    assertEquals(\"TermAttribute must be the first attribute\", TermAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final TermAttribute termAtt2 = (TermAttribute) clone.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt2 = (TypeAttribute) clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","pathOld":"src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","sourceNew":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"TermAttribute must be the first attribute\", TermAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final TermAttribute termAtt2 = clone.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","sourceOld":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final TermAttribute termAtt = (TermAttribute) src.addAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = (TypeAttribute) src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator it = clone.getAttributeClassesIterator();\n    assertEquals(\"TermAttribute must be the first attribute\", TermAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final TermAttribute termAtt2 = (TermAttribute) clone.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt2 = (TypeAttribute) clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43261d20e8ab524b9887c85d99a855fb4a25b4dc","date":1268557776,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","pathOld":"src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","sourceNew":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"TermAttribute must be the first attribute\", TermAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final TermAttribute termAtt2 = clone.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n    \n    // test copy back\n    termAtt2.setTermBuffer(\"OtherTerm\");\n    typeAtt2.setType(\"OtherType\");\n    clone.copyTo(src);\n    assertEquals(\"TermAttribute of original must now contain updated term\", \"OtherTerm\", termAtt.term());\n    assertEquals(\"TypeAttribute of original must now contain updated type\", \"OtherType\", typeAtt.type());\n    // verify again:\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","sourceOld":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"TermAttribute must be the first attribute\", TermAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final TermAttribute termAtt2 = clone.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","pathOld":"src/test/org/apache/lucene/util/TestAttributeSource#testCloneAttributes().mjava","sourceNew":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"TermAttribute must be the first attribute\", TermAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final TermAttribute termAtt2 = clone.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n    \n    // test copy back\n    termAtt2.setTermBuffer(\"OtherTerm\");\n    typeAtt2.setType(\"OtherType\");\n    clone.copyTo(src);\n    assertEquals(\"TermAttribute of original must now contain updated term\", \"OtherTerm\", termAtt.term());\n    assertEquals(\"TypeAttribute of original must now contain updated type\", \"OtherType\", typeAtt.type());\n    // verify again:\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","sourceOld":"  public void testCloneAttributes() {\n    final AttributeSource src = new AttributeSource();\n    final TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");\n    \n    final AttributeSource clone = src.cloneAttributes();\n    final Iterator<Class<? extends Attribute>> it = clone.getAttributeClassesIterator();\n    assertEquals(\"TermAttribute must be the first attribute\", TermAttribute.class, it.next());\n    assertEquals(\"TypeAttribute must be the second attribute\", TypeAttribute.class, it.next());\n    assertFalse(\"No more attributes\", it.hasNext());\n    \n    final TermAttribute termAtt2 = clone.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt2 = clone.getAttribute(TypeAttribute.class);\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n    \n    // test copy back\n    termAtt2.setTermBuffer(\"OtherTerm\");\n    typeAtt2.setType(\"OtherType\");\n    clone.copyTo(src);\n    assertEquals(\"TermAttribute of original must now contain updated term\", \"OtherTerm\", termAtt.term());\n    assertEquals(\"TypeAttribute of original must now contain updated type\", \"OtherType\", typeAtt.type());\n    // verify again:\n    assertNotSame(\"TermAttribute of original and clone must be different instances\", termAtt2, termAtt);\n    assertNotSame(\"TypeAttribute of original and clone must be different instances\", typeAtt2, typeAtt);\n    assertEquals(\"TermAttribute of original and clone must be equal\", termAtt2, termAtt);\n    assertEquals(\"TypeAttribute of original and clone must be equal\", typeAtt2, typeAtt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43261d20e8ab524b9887c85d99a855fb4a25b4dc":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["43261d20e8ab524b9887c85d99a855fb4a25b4dc"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"43261d20e8ab524b9887c85d99a855fb4a25b4dc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["43261d20e8ab524b9887c85d99a855fb4a25b4dc"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}