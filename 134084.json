{"path":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) {\n    initialize(subReaders, closeSubReaders);\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) {\n    initialize(subReaders, closeSubReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    initialize(subReaders, closeSubReaders);\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) {\n    initialize(subReaders, closeSubReaders);\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    topLevelContext = initialize(subReaders, closeSubReaders);\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    initialize(subReaders, closeSubReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    topLevelContext = initialize(subReaders, closeSubReaders);\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    initialize(subReaders, closeSubReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    topLevelContext = initialize(subReaders, closeSubReaders);\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    initialize(subReaders, closeSubReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    topLevelContext = initialize(subReaders, closeSubReaders);\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    topLevelContext = initialize(subReaders, closeSubReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    topLevelContext = initialize(subReaders, closeSubReaders);\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    topLevelContext = initialize(subReaders, closeSubReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    topLevelContext = initialize(subReaders, closeSubReaders);\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    topLevelContext = initialize(subReaders, closeSubReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    topLevelContext = initialize(subReaders, closeSubReaders);\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * Directory locking for delete, undeleteAll, and setNorm operations is\n   * left to the subreaders. </p>\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    topLevelContext = initialize(subReaders, closeSubReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","date":1323543613,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * @param subReaders set of (sub)readers\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    super(subReaders.clone());\n    this.readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n    decrefOnClose = new boolean[subReaders.length];\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!closeSubReaders) {\n        subReaders[i].incRef();\n        decrefOnClose[i] = true;\n      } else {\n        decrefOnClose[i] = false;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    topLevelContext = initialize(subReaders, closeSubReaders);\n  }\n\n","bugFix":null,"bugIntro":["04b2a23f172a40e4b0bf0ee68bc571b4dab5b4c9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04b2a23f172a40e4b0bf0ee68bc571b4dab5b4c9","date":1323646333,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * @param subReaders set of (sub)readers\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    super(subReaders.clone());\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n    decrefOnClose = new boolean[subReaders.length];\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!closeSubReaders) {\n        subReaders[i].incRef();\n        decrefOnClose[i] = true;\n      } else {\n        decrefOnClose[i] = false;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * @param subReaders set of (sub)readers\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    super(subReaders.clone());\n    this.readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n    decrefOnClose = new boolean[subReaders.length];\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!closeSubReaders) {\n        subReaders[i].incRef();\n        decrefOnClose[i] = true;\n      } else {\n        decrefOnClose[i] = false;\n      }\n    }\n  }\n\n","bugFix":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * @param subReaders set of (sub)readers\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    super(subReaders.clone());\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n    decrefOnClose = new boolean[subReaders.length];\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!closeSubReaders) {\n        subReaders[i].incRef();\n        decrefOnClose[i] = true;\n      } else {\n        decrefOnClose[i] = false;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   * @param subReaders set of (sub)readers\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    topLevelContext = initialize(subReaders, closeSubReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeb24fe119d55091148e2a3d94e80c9e349d886c","date":1323807643,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * @param subReaders set of (sub)readers\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    super(subReaders.clone());\n    decrefOnClose = new boolean[subReaders.length];\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!closeSubReaders) {\n        subReaders[i].incRef();\n        decrefOnClose[i] = true;\n      } else {\n        decrefOnClose[i] = false;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * @param subReaders set of (sub)readers\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    super(subReaders.clone());\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n    decrefOnClose = new boolean[subReaders.length];\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!closeSubReaders) {\n        subReaders[i].incRef();\n        decrefOnClose[i] = true;\n      } else {\n        decrefOnClose[i] = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"736227dbe65dab1a95b84180019f766a321f0ef8","date":1327840766,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * @param subReaders set of (sub)readers\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    super(subReaders.clone());\n    this.closeSubReaders = closeSubReaders;\n    if (!closeSubReaders) {\n      for (int i = 0; i < subReaders.length; i++) {\n        subReaders[i].incRef();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * @param subReaders set of (sub)readers\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    super(subReaders.clone());\n    decrefOnClose = new boolean[subReaders.length];\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!closeSubReaders) {\n        subReaders[i].incRef();\n        decrefOnClose[i] = true;\n      } else {\n        decrefOnClose[i] = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * @param subReaders set of (sub)readers\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    super(subReaders.clone());\n    this.closeSubReaders = closeSubReaders;\n    if (!closeSubReaders) {\n      for (int i = 0; i < subReaders.length; i++) {\n        subReaders[i].incRef();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * @param subReaders set of (sub)readers\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    super(subReaders.clone());\n    decrefOnClose = new boolean[subReaders.length];\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!closeSubReaders) {\n        subReaders[i].incRef();\n        decrefOnClose[i] = true;\n      } else {\n        decrefOnClose[i] = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#MultiReader(IndexReader[],boolean).mjava","sourceNew":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * @param subReaders set of (sub)readers\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    super(subReaders.clone());\n    this.closeSubReaders = closeSubReaders;\n    if (!closeSubReaders) {\n      for (int i = 0; i < subReaders.length; i++) {\n        subReaders[i].incRef();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Construct a MultiReader aggregating the named set of (sub)readers.\n   * @param subReaders set of (sub)readers\n   * @param closeSubReaders indicates whether the subreaders should be closed\n   * when this MultiReader is closed\n   */\n  public MultiReader(IndexReader[] subReaders, boolean closeSubReaders) throws IOException {\n    super(subReaders.clone());\n    this.closeSubReaders = closeSubReaders;\n    if (!closeSubReaders) {\n      for (int i = 0; i < subReaders.length; i++) {\n        subReaders[i].incRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"736227dbe65dab1a95b84180019f766a321f0ef8":["eeb24fe119d55091148e2a3d94e80c9e349d886c"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["4122a26e1fd0457a340616673a3d3aada370f713"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["2dadf0f3286a34a0fee6e788ffce88624bf2984e","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","04b2a23f172a40e4b0bf0ee68bc571b4dab5b4c9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["eeb24fe119d55091148e2a3d94e80c9e349d886c","736227dbe65dab1a95b84180019f766a321f0ef8"],"04b2a23f172a40e4b0bf0ee68bc571b4dab5b4c9":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["04b2a23f172a40e4b0bf0ee68bc571b4dab5b4c9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["2dadf0f3286a34a0fee6e788ffce88624bf2984e","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"4122a26e1fd0457a340616673a3d3aada370f713":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"736227dbe65dab1a95b84180019f766a321f0ef8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"04b2a23f172a40e4b0bf0ee68bc571b4dab5b4c9":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","eeb24fe119d55091148e2a3d94e80c9e349d886c"],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["04b2a23f172a40e4b0bf0ee68bc571b4dab5b4c9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","29ef99d61cda9641b6250bf9567329a6e65f901d","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["736227dbe65dab1a95b84180019f766a321f0ef8","5cab9a86bd67202d20b6adc463008c8e982b070a"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"4122a26e1fd0457a340616673a3d3aada370f713":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}