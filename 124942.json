{"path":"modules/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, null, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().getSubResults().iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().getLabel();\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, null, facetRequest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, null, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().getSubResults().iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().getLabel();\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, null, facetRequest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, null, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().getSubResults().iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().getLabel();\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, null, facetRequest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"modules/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, null, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().getSubResults().iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().getLabel();\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, null, facetRequest);\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, null, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().getSubResults().iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().getLabel();\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(baseQuery, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, null, facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}