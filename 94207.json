{"path":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedNumericDocValuesField().mjava","commits":[{"id":"0cbcfd9c75cfb63c75be6ce6bd632aa60521273e","date":1403088676,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedNumericDocValuesField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSortedNumericDocValuesField() throws Exception {\n    assumeTrue(\"default codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    SortedNumericDocValues dv = reader.getSortedNumericDocValues(SORTED_NUMERIC_DV_FIELD);\n    int maxDoc = reader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      assertEquals(2, dv.count());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value, dv.valueAt(0));\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value + 1, dv.valueAt(1));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedNumericDocValuesField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSortedNumericDocValuesField() throws Exception {\n    assumeTrue(\"default codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    SortedNumericDocValues dv = reader.getSortedNumericDocValues(SORTED_NUMERIC_DV_FIELD);\n    int maxDoc = reader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      assertEquals(2, dv.count());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value, dv.valueAt(0));\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value + 1, dv.valueAt(1));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad2a673349939e48652bf304cccf673c3412198f","date":1409585169,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedNumericDocValuesField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedNumericDocValuesField().mjava","sourceNew":"  @Test\n  public void testSortedNumericDocValuesField() throws Exception {\n    SortedNumericDocValues dv = reader.getSortedNumericDocValues(SORTED_NUMERIC_DV_FIELD);\n    int maxDoc = reader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      assertEquals(2, dv.count());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value, dv.valueAt(0));\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value + 1, dv.valueAt(1));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortedNumericDocValuesField() throws Exception {\n    assumeTrue(\"default codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    SortedNumericDocValues dv = reader.getSortedNumericDocValues(SORTED_NUMERIC_DV_FIELD);\n    int maxDoc = reader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      assertEquals(2, dv.count());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value, dv.valueAt(0));\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value + 1, dv.valueAt(1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedNumericDocValuesField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedNumericDocValuesField().mjava","sourceNew":"  @Test\n  public void testSortedNumericDocValuesField() throws Exception {\n    SortedNumericDocValues dv = reader.getSortedNumericDocValues(SORTED_NUMERIC_DV_FIELD);\n    int maxDoc = reader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      assertEquals(2, dv.count());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value, dv.valueAt(0));\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value + 1, dv.valueAt(1));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortedNumericDocValuesField() throws Exception {\n    assumeTrue(\"default codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    SortedNumericDocValues dv = reader.getSortedNumericDocValues(SORTED_NUMERIC_DV_FIELD);\n    int maxDoc = reader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      assertEquals(2, dv.count());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value, dv.valueAt(0));\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value + 1, dv.valueAt(1));\n    }\n  }\n\n","bugFix":["0cbcfd9c75cfb63c75be6ce6bd632aa60521273e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c17ec76fa103f80e80ed20ee425dbc357fb1356f","date":1414420673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedNumericDocValuesField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedNumericDocValuesField().mjava","sourceNew":"  @Test\n  public void testSortedNumericDocValuesField() throws Exception {\n    SortedNumericDocValues dv = sortedReader.getSortedNumericDocValues(SORTED_NUMERIC_DV_FIELD);\n    int maxDoc = sortedReader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      assertEquals(2, dv.count());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value, dv.valueAt(0));\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value + 1, dv.valueAt(1));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortedNumericDocValuesField() throws Exception {\n    SortedNumericDocValues dv = reader.getSortedNumericDocValues(SORTED_NUMERIC_DV_FIELD);\n    int maxDoc = reader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      assertEquals(2, dv.count());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value, dv.valueAt(0));\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value + 1, dv.valueAt(1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testSortedNumericDocValuesField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedNumericDocValuesField().mjava","sourceNew":"  @Test\n  public void testSortedNumericDocValuesField() throws Exception {\n    SortedNumericDocValues dv = sortedReader.getSortedNumericDocValues(SORTED_NUMERIC_DV_FIELD);\n    int maxDoc = sortedReader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      assertEquals(2, dv.count());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value, dv.valueAt(0));\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value + 1, dv.valueAt(1));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortedNumericDocValuesField() throws Exception {\n    SortedNumericDocValues dv = sortedReader.getSortedNumericDocValues(SORTED_NUMERIC_DV_FIELD);\n    int maxDoc = sortedReader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      assertEquals(2, dv.count());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value, dv.valueAt(0));\n      assertEquals(\"incorrect sorted-numeric DocValues for doc \" + i, value + 1, dv.valueAt(1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cbcfd9c75cfb63c75be6ce6bd632aa60521273e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0cbcfd9c75cfb63c75be6ce6bd632aa60521273e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c17ec76fa103f80e80ed20ee425dbc357fb1356f":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["c17ec76fa103f80e80ed20ee425dbc357fb1356f"],"ad2a673349939e48652bf304cccf673c3412198f":["0cbcfd9c75cfb63c75be6ce6bd632aa60521273e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["0cbcfd9c75cfb63c75be6ce6bd632aa60521273e","ad2a673349939e48652bf304cccf673c3412198f"]},"commit2Childs":{"0cbcfd9c75cfb63c75be6ce6bd632aa60521273e":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","ad2a673349939e48652bf304cccf673c3412198f","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cbcfd9c75cfb63c75be6ce6bd632aa60521273e","e57c73924f3b8c19defa62e96bfa34a4922d49c2"],"c17ec76fa103f80e80ed20ee425dbc357fb1356f":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad2a673349939e48652bf304cccf673c3412198f":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["c17ec76fa103f80e80ed20ee425dbc357fb1356f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}