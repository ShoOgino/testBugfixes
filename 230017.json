{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#addRoutingRule(ClusterState,ZkNodeProps).mjava","commits":[{"id":"da888af1ab894358122a22229051215f58cf4d54","date":1384408702,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#addRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"    private ClusterState addRoutingRule(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String routeKey = message.getStr(\"routeKey\");\n      String range = message.getStr(\"range\");\n      String targetCollection = message.getStr(\"targetCollection\");\n      String targetShard = message.getStr(\"targetShard\");\n      String expireAt = message.getStr(\"expireAt\");\n\n      Slice slice = clusterState.getSlice(collection, shard);\n      if (slice == null)  {\n        throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collection + \" slice:\" + shard);\n      }\n\n      Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n      if (routingRules == null)\n        routingRules = new HashMap<String, RoutingRule>();\n      RoutingRule r = routingRules.get(routeKey);\n      if (r == null) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"routeRanges\", range);\n        map.put(\"targetCollection\", targetCollection);\n        map.put(\"expireAt\", expireAt);\n        RoutingRule rule = new RoutingRule(routeKey, map);\n        routingRules.put(routeKey, rule);\n      } else  {\n        // add this range\n        Map<String, Object> map = r.shallowCopy();\n        map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n        map.put(\"expireAt\", expireAt);\n        routingRules.put(routeKey, new RoutingRule(routeKey, map));\n      }\n\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      clusterState = updateSlice(clusterState, collection, newSlice);\n      return clusterState;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#addRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#addRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState addRoutingRule(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      checkCollection(message, collection);\n      String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String routeKey = message.getStr(\"routeKey\");\n      String range = message.getStr(\"range\");\n      String targetCollection = message.getStr(\"targetCollection\");\n      String targetShard = message.getStr(\"targetShard\");\n      String expireAt = message.getStr(\"expireAt\");\n\n      Slice slice = clusterState.getSlice(collection, shard);\n      if (slice == null)  {\n        throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collection + \" slice:\" + shard);\n      }\n\n      Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n      if (routingRules == null)\n        routingRules = new HashMap<String, RoutingRule>();\n      RoutingRule r = routingRules.get(routeKey);\n      if (r == null) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"routeRanges\", range);\n        map.put(\"targetCollection\", targetCollection);\n        map.put(\"expireAt\", expireAt);\n        RoutingRule rule = new RoutingRule(routeKey, map);\n        routingRules.put(routeKey, rule);\n      } else  {\n        // add this range\n        Map<String, Object> map = r.shallowCopy();\n        map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n        map.put(\"expireAt\", expireAt);\n        routingRules.put(routeKey, new RoutingRule(routeKey, map));\n      }\n\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      clusterState = updateSlice(clusterState, collection, newSlice);\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState addRoutingRule(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String routeKey = message.getStr(\"routeKey\");\n      String range = message.getStr(\"range\");\n      String targetCollection = message.getStr(\"targetCollection\");\n      String targetShard = message.getStr(\"targetShard\");\n      String expireAt = message.getStr(\"expireAt\");\n\n      Slice slice = clusterState.getSlice(collection, shard);\n      if (slice == null)  {\n        throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collection + \" slice:\" + shard);\n      }\n\n      Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n      if (routingRules == null)\n        routingRules = new HashMap<String, RoutingRule>();\n      RoutingRule r = routingRules.get(routeKey);\n      if (r == null) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"routeRanges\", range);\n        map.put(\"targetCollection\", targetCollection);\n        map.put(\"expireAt\", expireAt);\n        RoutingRule rule = new RoutingRule(routeKey, map);\n        routingRules.put(routeKey, rule);\n      } else  {\n        // add this range\n        Map<String, Object> map = r.shallowCopy();\n        map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n        map.put(\"expireAt\", expireAt);\n        routingRules.put(routeKey, new RoutingRule(routeKey, map));\n      }\n\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      clusterState = updateSlice(clusterState, collection, newSlice);\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6df412542f3e2161f4bc2b13357b4a973195bfb7","date":1394040511,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#addRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#addRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState addRoutingRule(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String routeKey = message.getStr(\"routeKey\");\n      String range = message.getStr(\"range\");\n      String targetCollection = message.getStr(\"targetCollection\");\n      String targetShard = message.getStr(\"targetShard\");\n      String expireAt = message.getStr(\"expireAt\");\n\n      Slice slice = clusterState.getSlice(collection, shard);\n      if (slice == null)  {\n        throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collection + \" slice:\" + shard);\n      }\n\n      Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n      if (routingRules == null)\n        routingRules = new HashMap<String, RoutingRule>();\n      RoutingRule r = routingRules.get(routeKey);\n      if (r == null) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"routeRanges\", range);\n        map.put(\"targetCollection\", targetCollection);\n        map.put(\"expireAt\", expireAt);\n        RoutingRule rule = new RoutingRule(routeKey, map);\n        routingRules.put(routeKey, rule);\n      } else  {\n        // add this range\n        Map<String, Object> map = r.shallowCopy();\n        map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n        map.put(\"expireAt\", expireAt);\n        routingRules.put(routeKey, new RoutingRule(routeKey, map));\n      }\n\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      clusterState = updateSlice(clusterState, collection, newSlice);\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState addRoutingRule(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      checkCollection(message, collection);\n      String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String routeKey = message.getStr(\"routeKey\");\n      String range = message.getStr(\"range\");\n      String targetCollection = message.getStr(\"targetCollection\");\n      String targetShard = message.getStr(\"targetShard\");\n      String expireAt = message.getStr(\"expireAt\");\n\n      Slice slice = clusterState.getSlice(collection, shard);\n      if (slice == null)  {\n        throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collection + \" slice:\" + shard);\n      }\n\n      Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n      if (routingRules == null)\n        routingRules = new HashMap<String, RoutingRule>();\n      RoutingRule r = routingRules.get(routeKey);\n      if (r == null) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"routeRanges\", range);\n        map.put(\"targetCollection\", targetCollection);\n        map.put(\"expireAt\", expireAt);\n        RoutingRule rule = new RoutingRule(routeKey, map);\n        routingRules.put(routeKey, rule);\n      } else  {\n        // add this range\n        Map<String, Object> map = r.shallowCopy();\n        map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n        map.put(\"expireAt\", expireAt);\n        routingRules.put(routeKey, new RoutingRule(routeKey, map));\n      }\n\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      clusterState = updateSlice(clusterState, collection, newSlice);\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#addRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#addRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState addRoutingRule(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String routeKey = message.getStr(\"routeKey\");\n      String range = message.getStr(\"range\");\n      String targetCollection = message.getStr(\"targetCollection\");\n      String targetShard = message.getStr(\"targetShard\");\n      String expireAt = message.getStr(\"expireAt\");\n\n      Slice slice = clusterState.getSlice(collection, shard);\n      if (slice == null)  {\n        throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collection + \" slice:\" + shard);\n      }\n\n      Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n      if (routingRules == null)\n        routingRules = new HashMap<String, RoutingRule>();\n      RoutingRule r = routingRules.get(routeKey);\n      if (r == null) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"routeRanges\", range);\n        map.put(\"targetCollection\", targetCollection);\n        map.put(\"expireAt\", expireAt);\n        RoutingRule rule = new RoutingRule(routeKey, map);\n        routingRules.put(routeKey, rule);\n      } else  {\n        // add this range\n        Map<String, Object> map = r.shallowCopy();\n        map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n        map.put(\"expireAt\", expireAt);\n        routingRules.put(routeKey, new RoutingRule(routeKey, map));\n      }\n\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      clusterState = updateSlice(clusterState, collection, newSlice);\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState addRoutingRule(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String routeKey = message.getStr(\"routeKey\");\n      String range = message.getStr(\"range\");\n      String targetCollection = message.getStr(\"targetCollection\");\n      String targetShard = message.getStr(\"targetShard\");\n      String expireAt = message.getStr(\"expireAt\");\n\n      Slice slice = clusterState.getSlice(collection, shard);\n      if (slice == null)  {\n        throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collection + \" slice:\" + shard);\n      }\n\n      Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n      if (routingRules == null)\n        routingRules = new HashMap<String, RoutingRule>();\n      RoutingRule r = routingRules.get(routeKey);\n      if (r == null) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"routeRanges\", range);\n        map.put(\"targetCollection\", targetCollection);\n        map.put(\"expireAt\", expireAt);\n        RoutingRule rule = new RoutingRule(routeKey, map);\n        routingRules.put(routeKey, rule);\n      } else  {\n        // add this range\n        Map<String, Object> map = r.shallowCopy();\n        map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n        map.put(\"expireAt\", expireAt);\n        routingRules.put(routeKey, new RoutingRule(routeKey, map));\n      }\n\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      clusterState = updateSlice(clusterState, collection, newSlice);\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#addRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#addRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ClusterState addRoutingRule(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String routeKey = message.getStr(\"routeKey\");\n      String range = message.getStr(\"range\");\n      String targetCollection = message.getStr(\"targetCollection\");\n      String targetShard = message.getStr(\"targetShard\");\n      String expireAt = message.getStr(\"expireAt\");\n\n      Slice slice = clusterState.getSlice(collection, shard);\n      if (slice == null)  {\n        throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collection + \" slice:\" + shard);\n      }\n\n      Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n      if (routingRules == null)\n        routingRules = new HashMap<>();\n      RoutingRule r = routingRules.get(routeKey);\n      if (r == null) {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"routeRanges\", range);\n        map.put(\"targetCollection\", targetCollection);\n        map.put(\"expireAt\", expireAt);\n        RoutingRule rule = new RoutingRule(routeKey, map);\n        routingRules.put(routeKey, rule);\n      } else  {\n        // add this range\n        Map<String, Object> map = r.shallowCopy();\n        map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n        map.put(\"expireAt\", expireAt);\n        routingRules.put(routeKey, new RoutingRule(routeKey, map));\n      }\n\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      clusterState = updateSlice(clusterState, collection, newSlice);\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState addRoutingRule(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String routeKey = message.getStr(\"routeKey\");\n      String range = message.getStr(\"range\");\n      String targetCollection = message.getStr(\"targetCollection\");\n      String targetShard = message.getStr(\"targetShard\");\n      String expireAt = message.getStr(\"expireAt\");\n\n      Slice slice = clusterState.getSlice(collection, shard);\n      if (slice == null)  {\n        throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collection + \" slice:\" + shard);\n      }\n\n      Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n      if (routingRules == null)\n        routingRules = new HashMap<String, RoutingRule>();\n      RoutingRule r = routingRules.get(routeKey);\n      if (r == null) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"routeRanges\", range);\n        map.put(\"targetCollection\", targetCollection);\n        map.put(\"expireAt\", expireAt);\n        RoutingRule rule = new RoutingRule(routeKey, map);\n        routingRules.put(routeKey, rule);\n      } else  {\n        // add this range\n        Map<String, Object> map = r.shallowCopy();\n        map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n        map.put(\"expireAt\", expireAt);\n        routingRules.put(routeKey, new RoutingRule(routeKey, map));\n      }\n\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      clusterState = updateSlice(clusterState, collection, newSlice);\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#addRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#addRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":"    private ZkWriteCommand addRoutingRule(ClusterState clusterState, ZkNodeProps message) {\n      return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n    }\n\n","sourceOld":"    private ClusterState addRoutingRule(ClusterState clusterState, ZkNodeProps message) {\n      String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n      if (!checkCollectionKeyExistence(message)) return clusterState;\n      String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n      String routeKey = message.getStr(\"routeKey\");\n      String range = message.getStr(\"range\");\n      String targetCollection = message.getStr(\"targetCollection\");\n      String targetShard = message.getStr(\"targetShard\");\n      String expireAt = message.getStr(\"expireAt\");\n\n      Slice slice = clusterState.getSlice(collection, shard);\n      if (slice == null)  {\n        throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collection + \" slice:\" + shard);\n      }\n\n      Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n      if (routingRules == null)\n        routingRules = new HashMap<>();\n      RoutingRule r = routingRules.get(routeKey);\n      if (r == null) {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"routeRanges\", range);\n        map.put(\"targetCollection\", targetCollection);\n        map.put(\"expireAt\", expireAt);\n        RoutingRule rule = new RoutingRule(routeKey, map);\n        routingRules.put(routeKey, rule);\n      } else  {\n        // add this range\n        Map<String, Object> map = r.shallowCopy();\n        map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n        map.put(\"expireAt\", expireAt);\n        routingRules.put(routeKey, new RoutingRule(routeKey, map));\n      }\n\n      Map<String, Object> props = slice.shallowCopy();\n      props.put(\"routingRules\", routingRules);\n\n      Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n      clusterState = updateSlice(clusterState, collection, newSlice);\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03f6fef27e0d27edc875c720e6ce5db17480a562","date":1417277285,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#addRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"    private ZkWriteCommand addRoutingRule(ClusterState clusterState, ZkNodeProps message) {\n      return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29f5eaf296600e1665151e7929d42a3cbe22e481":["da888af1ab894358122a22229051215f58cf4d54"],"da888af1ab894358122a22229051215f58cf4d54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6df412542f3e2161f4bc2b13357b4a973195bfb7"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["da888af1ab894358122a22229051215f58cf4d54","6df412542f3e2161f4bc2b13357b4a973195bfb7"],"03f6fef27e0d27edc875c720e6ce5db17480a562":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6df412542f3e2161f4bc2b13357b4a973195bfb7":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03f6fef27e0d27edc875c720e6ce5db17480a562"]},"commit2Childs":{"29f5eaf296600e1665151e7929d42a3cbe22e481":["6df412542f3e2161f4bc2b13357b4a973195bfb7"],"da888af1ab894358122a22229051215f58cf4d54":["29f5eaf296600e1665151e7929d42a3cbe22e481","96ea64d994d340044e0d57aeb6a5871539d10ca5"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["03f6fef27e0d27edc875c720e6ce5db17480a562"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"03f6fef27e0d27edc875c720e6ce5db17480a562":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da888af1ab894358122a22229051215f58cf4d54"],"6df412542f3e2161f4bc2b13357b4a973195bfb7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","96ea64d994d340044e0d57aeb6a5871539d10ca5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}