{"path":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","sourceNew":"  public void testSpanFirst() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    SpanFirstQuery query = new SpanFirstQuery(term1, 1);\n\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,\n       514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,\n       528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541,\n       542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,\n       556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,\n       570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,\n       584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599});\n\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 599).getValue() > 0.0f);\n\n  }\n\n","sourceOld":"  public void testSpanFirst() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    SpanFirstQuery query = new SpanFirstQuery(term1, 1);\n\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,\n       514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,\n       528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541,\n       542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,\n       556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,\n       570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,\n       584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599});\n\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 599).getValue() > 0.0f);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","sourceNew":"  @Test\n  public void testSpanFirst() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    SpanFirstQuery query = new SpanFirstQuery(term1, 1);\n\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,\n       514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,\n       528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541,\n       542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,\n       556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,\n       570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,\n       584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599});\n\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 599).getValue() > 0.0f);\n\n  }\n\n","sourceOld":"  public void testSpanFirst() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    SpanFirstQuery query = new SpanFirstQuery(term1, 1);\n\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,\n       514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,\n       528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541,\n       542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,\n       556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,\n       570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,\n       584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599});\n\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 599).getValue() > 0.0f);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","sourceNew":"  @Test\n  public void testSpanFirst() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    SpanFirstQuery query = new SpanFirstQuery(term1, 1);\n\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,\n       514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,\n       528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541,\n       542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,\n       556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,\n       570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,\n       584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599});\n\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 599).getValue() > 0.0f);\n\n  }\n\n","sourceOld":"  public void testSpanFirst() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    SpanFirstQuery query = new SpanFirstQuery(term1, 1);\n\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,\n       514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,\n       528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541,\n       542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,\n       556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,\n       570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,\n       584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599});\n\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 599).getValue() > 0.0f);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","sourceNew":"  @Test\n  public void testSpanFirst() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    SpanFirstQuery query = new SpanFirstQuery(term1, 1);\n\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,\n       514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,\n       528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541,\n       542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,\n       556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,\n       570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,\n       584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599});\n\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 599).getValue() > 0.0f);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSpanFirst() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    SpanFirstQuery query = new SpanFirstQuery(term1, 1);\n\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,\n       514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,\n       528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541,\n       542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,\n       556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,\n       570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,\n       584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599});\n\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 599).getValue() > 0.0f);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","150488c1317972164a9a824be05b1ba2ba0fc68c"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"150488c1317972164a9a824be05b1ba2ba0fc68c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","150488c1317972164a9a824be05b1ba2ba0fc68c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}