{"path":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","pathOld":"/dev/null","sourceNew":"  public void sync() {\n    finishThreads();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"290c401c31db375e771805c3ba7ac5f64c7370dc","date":1192034795,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","sourceNew":"  public synchronized void sync() {\n    while(mergeThreadCount() > 0) {\n      if (VERBOSE) {\n        message(\"now wait for threads; currently \" + mergeThreads.size() + \" still running\");\n        for(int i=0;i<mergeThreads.size();i++)\n          message(\"    \" + i + \": \" + ((MergeThread) mergeThreads.get(i)));\n      }\n\n      try {\n        wait();\n      } catch (InterruptedException e) {\n      }\n    }\n  }\n\n","sourceOld":"  public void sync() {\n    finishThreads();\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":["7ed80954d0e91206342729d058da7955cb93aa64"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ed80954d0e91206342729d058da7955cb93aa64","date":1193061871,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","sourceNew":"  public synchronized void sync() {\n    while(mergeThreadCount() > 0) {\n      message(\"now wait for threads; currently \" + mergeThreads.size() + \" still running\");\n      final int count = mergeThreads.size();\n      for(int i=0;i<count;i++)\n        message(\"    \" + i + \": \" + ((MergeThread) mergeThreads.get(i)));\n\n      try {\n        wait();\n      } catch (InterruptedException e) {\n      }\n    }\n  }\n\n","sourceOld":"  public synchronized void sync() {\n    while(mergeThreadCount() > 0) {\n      if (VERBOSE) {\n        message(\"now wait for threads; currently \" + mergeThreads.size() + \" still running\");\n        for(int i=0;i<mergeThreads.size();i++)\n          message(\"    \" + i + \": \" + ((MergeThread) mergeThreads.get(i)));\n      }\n\n      try {\n        wait();\n      } catch (InterruptedException e) {\n      }\n    }\n  }\n\n","bugFix":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2993c85d947e3191bba14229ea72fd5675d048e2","date":1228593940,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","sourceNew":"  public synchronized void sync() {\n    while(mergeThreadCount() > 0) {\n      if (verbose())\n        message(\"now wait for threads; currently \" + mergeThreads.size() + \" still running\");\n      final int count = mergeThreads.size();\n      if (verbose()) {\n        for(int i=0;i<count;i++)\n          message(\"    \" + i + \": \" + ((MergeThread) mergeThreads.get(i)));\n      }\n      \n      try {\n        wait();\n      } catch (InterruptedException e) {\n      }\n    }\n  }\n\n","sourceOld":"  public synchronized void sync() {\n    while(mergeThreadCount() > 0) {\n      message(\"now wait for threads; currently \" + mergeThreads.size() + \" still running\");\n      final int count = mergeThreads.size();\n      for(int i=0;i<count;i++)\n        message(\"    \" + i + \": \" + ((MergeThread) mergeThreads.get(i)));\n\n      try {\n        wait();\n      } catch (InterruptedException e) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","sourceNew":"  public synchronized void sync() {\n    while(mergeThreadCount() > 0) {\n      if (verbose())\n        message(\"now wait for threads; currently \" + mergeThreads.size() + \" still running\");\n      final int count = mergeThreads.size();\n      if (verbose()) {\n        for(int i=0;i<count;i++)\n          message(\"    \" + i + \": \" + ((MergeThread) mergeThreads.get(i)));\n      }\n      \n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n    }\n  }\n\n","sourceOld":"  public synchronized void sync() {\n    while(mergeThreadCount() > 0) {\n      if (verbose())\n        message(\"now wait for threads; currently \" + mergeThreads.size() + \" still running\");\n      final int count = mergeThreads.size();\n      if (verbose()) {\n        for(int i=0;i<count;i++)\n          message(\"    \" + i + \": \" + ((MergeThread) mergeThreads.get(i)));\n      }\n      \n      try {\n        wait();\n      } catch (InterruptedException e) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","sourceNew":"  public synchronized void sync() {\n    while(mergeThreadCount() > 0) {\n      if (verbose())\n        message(\"now wait for threads; currently \" + mergeThreads.size() + \" still running\");\n      final int count = mergeThreads.size();\n      if (verbose()) {\n        for(int i=0;i<count;i++)\n          message(\"    \" + i + \": \" + mergeThreads.get(i));\n      }\n      \n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n    }\n  }\n\n","sourceOld":"  public synchronized void sync() {\n    while(mergeThreadCount() > 0) {\n      if (verbose())\n        message(\"now wait for threads; currently \" + mergeThreads.size() + \" still running\");\n      final int count = mergeThreads.size();\n      if (verbose()) {\n        for(int i=0;i<count;i++)\n          message(\"    \" + i + \": \" + ((MergeThread) mergeThreads.get(i)));\n      }\n      \n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa4b66eb16ead894fa7130904af6ecf34331f050","date":1258198413,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","sourceNew":"  public synchronized void sync() {\n    while(mergeThreadCount() > 0) {\n      if (verbose())\n        message(\"now wait for threads; currently \" + mergeThreads.size() + \" still running\");\n      final int count = mergeThreads.size();\n      if (verbose()) {\n        for(int i=0;i<count;i++)\n          message(\"    \" + i + \": \" + mergeThreads.get(i));\n      }\n      \n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n  }\n\n","sourceOld":"  public synchronized void sync() {\n    while(mergeThreadCount() > 0) {\n      if (verbose())\n        message(\"now wait for threads; currently \" + mergeThreads.size() + \" still running\");\n      final int count = mergeThreads.size();\n      if (verbose()) {\n        for(int i=0;i<count;i++)\n          message(\"    \" + i + \": \" + mergeThreads.get(i));\n      }\n      \n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        // In 3.0 we will change this to throw\n        // InterruptedException instead\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(ie);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#sync().mjava","sourceNew":"  public synchronized void sync() {\n    while(mergeThreadCount() > 0) {\n      if (verbose())\n        message(\"now wait for threads; currently \" + mergeThreads.size() + \" still running\");\n      final int count = mergeThreads.size();\n      if (verbose()) {\n        for(int i=0;i<count;i++)\n          message(\"    \" + i + \": \" + mergeThreads.get(i));\n      }\n      \n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n  }\n\n","sourceOld":"  public synchronized void sync() {\n    while(mergeThreadCount() > 0) {\n      if (verbose())\n        message(\"now wait for threads; currently \" + mergeThreads.size() + \" still running\");\n      final int count = mergeThreads.size();\n      if (verbose()) {\n        for(int i=0;i<count;i++)\n          message(\"    \" + i + \": \" + mergeThreads.get(i));\n      }\n      \n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"7ed80954d0e91206342729d058da7955cb93aa64":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"290c401c31db375e771805c3ba7ac5f64c7370dc":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"aa4b66eb16ead894fa7130904af6ecf34331f050":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["2993c85d947e3191bba14229ea72fd5675d048e2"],"2993c85d947e3191bba14229ea72fd5675d048e2":["7ed80954d0e91206342729d058da7955cb93aa64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["aa4b66eb16ead894fa7130904af6ecf34331f050"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["aa4b66eb16ead894fa7130904af6ecf34331f050"],"7ed80954d0e91206342729d058da7955cb93aa64":["2993c85d947e3191bba14229ea72fd5675d048e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"290c401c31db375e771805c3ba7ac5f64c7370dc":["7ed80954d0e91206342729d058da7955cb93aa64"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"aa4b66eb16ead894fa7130904af6ecf34331f050":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2993c85d947e3191bba14229ea72fd5675d048e2":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}