{"path":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter.LongRangeNode#addOutputs(int,LongRange).mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter.LongRangeNode#addOutputs(int,LongRange).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/LongRangeCounter.LongRangeNode#addOutputs(int,LongRange).mjava","sourceNew":"    /** Recursively assigns range outputs to each node. */\n    void addOutputs(int index, LongRange range) {\n      if (start >= range.minIncl && end <= range.maxIncl) {\n        // Our range is fully included in the incoming\n        // range; add to our output list:\n        if (outputs == null) {\n          outputs = new ArrayList<Integer>();\n        }\n        outputs.add(index);\n      } else if (left != null) {\n        assert right != null;\n        // Recurse:\n        left.addOutputs(index, range);\n        right.addOutputs(index, range);\n      }\n    }\n\n","sourceOld":"    /** Recursively assigns range outputs to each node. */\n    void addOutputs(int index, LongRange range) {\n      if (start >= range.minIncl && end <= range.maxIncl) {\n        // Our range is fully included in the incoming\n        // range; add to our output list:\n        if (outputs == null) {\n          outputs = new ArrayList<Integer>();\n        }\n        outputs.add(index);\n      } else if (left != null) {\n        assert right != null;\n        // Recurse:\n        left.addOutputs(index, range);\n        right.addOutputs(index, range);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter.LongRangeNode#addOutputs(int,LongRange).mjava","pathOld":"/dev/null","sourceNew":"    /** Recursively assigns range outputs to each node. */\n    void addOutputs(int index, LongRange range) {\n      if (start >= range.minIncl && end <= range.maxIncl) {\n        // Our range is fully included in the incoming\n        // range; add to our output list:\n        if (outputs == null) {\n          outputs = new ArrayList<Integer>();\n        }\n        outputs.add(index);\n      } else if (left != null) {\n        assert right != null;\n        // Recurse:\n        left.addOutputs(index, range);\n        right.addOutputs(index, range);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter.LongRangeNode#addOutputs(int,LongRange).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter.LongRangeNode#addOutputs(int,LongRange).mjava","sourceNew":"    /** Recursively assigns range outputs to each node. */\n    void addOutputs(int index, LongRange range) {\n      if (start >= range.minIncl && end <= range.maxIncl) {\n        // Our range is fully included in the incoming\n        // range; add to our output list:\n        if (outputs == null) {\n          outputs = new ArrayList<>();\n        }\n        outputs.add(index);\n      } else if (left != null) {\n        assert right != null;\n        // Recurse:\n        left.addOutputs(index, range);\n        right.addOutputs(index, range);\n      }\n    }\n\n","sourceOld":"    /** Recursively assigns range outputs to each node. */\n    void addOutputs(int index, LongRange range) {\n      if (start >= range.minIncl && end <= range.maxIncl) {\n        // Our range is fully included in the incoming\n        // range; add to our output list:\n        if (outputs == null) {\n          outputs = new ArrayList<Integer>();\n        }\n        outputs.add(index);\n      } else if (left != null) {\n        assert right != null;\n        // Recurse:\n        left.addOutputs(index, range);\n        right.addOutputs(index, range);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter.LongRangeNode#addOutputs(int,LongRange).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter.LongRangeNode#addOutputs(int,LongRange).mjava","sourceNew":"    /** Recursively assigns range outputs to each node. */\n    void addOutputs(int index, LongRange range) {\n      if (start >= range.min && end <= range.max) {\n        // Our range is fully included in the incoming\n        // range; add to our output list:\n        if (outputs == null) {\n          outputs = new ArrayList<>();\n        }\n        outputs.add(index);\n      } else if (left != null) {\n        assert right != null;\n        // Recurse:\n        left.addOutputs(index, range);\n        right.addOutputs(index, range);\n      }\n    }\n\n","sourceOld":"    /** Recursively assigns range outputs to each node. */\n    void addOutputs(int index, LongRange range) {\n      if (start >= range.minIncl && end <= range.maxIncl) {\n        // Our range is fully included in the incoming\n        // range; add to our output list:\n        if (outputs == null) {\n          outputs = new ArrayList<>();\n        }\n        outputs.add(index);\n      } else if (left != null) {\n        assert right != null;\n        // Recurse:\n        left.addOutputs(index, range);\n        right.addOutputs(index, range);\n      }\n    }\n\n","bugFix":["6119ef33e3fbd8582640c23b3f5b3fbb22ba8d30"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter.LongRangeNode#addOutputs(int,LongRange).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter.LongRangeNode#addOutputs(int,LongRange).mjava","sourceNew":"    /** Recursively assigns range outputs to each node. */\n    void addOutputs(int index, LongRange range) {\n      if (start >= range.min && end <= range.max) {\n        // Our range is fully included in the incoming\n        // range; add to our output list:\n        if (outputs == null) {\n          outputs = new ArrayList<>();\n        }\n        outputs.add(index);\n      } else if (left != null) {\n        assert right != null;\n        // Recurse:\n        left.addOutputs(index, range);\n        right.addOutputs(index, range);\n      }\n    }\n\n","sourceOld":"    /** Recursively assigns range outputs to each node. */\n    void addOutputs(int index, LongRange range) {\n      if (start >= range.minIncl && end <= range.maxIncl) {\n        // Our range is fully included in the incoming\n        // range; add to our output list:\n        if (outputs == null) {\n          outputs = new ArrayList<>();\n        }\n        outputs.add(index);\n      } else if (left != null) {\n        assert right != null;\n        // Recurse:\n        left.addOutputs(index, range);\n        right.addOutputs(index, range);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter.LongRangeNode#addOutputs(int,LongRange).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeCounter.LongRangeNode#addOutputs(int,LongRange).mjava","sourceNew":"    /** Recursively assigns range outputs to each node. */\n    void addOutputs(int index, LongRange range) {\n      if (start >= range.min && end <= range.max) {\n        // Our range is fully included in the incoming\n        // range; add to our output list:\n        if (outputs == null) {\n          outputs = new ArrayList<>();\n        }\n        outputs.add(index);\n      } else if (left != null) {\n        assert right != null;\n        // Recurse:\n        left.addOutputs(index, range);\n        right.addOutputs(index, range);\n      }\n    }\n\n","sourceOld":"    /** Recursively assigns range outputs to each node. */\n    void addOutputs(int index, LongRange range) {\n      if (start >= range.minIncl && end <= range.maxIncl) {\n        // Our range is fully included in the incoming\n        // range; add to our output list:\n        if (outputs == null) {\n          outputs = new ArrayList<>();\n        }\n        outputs.add(index);\n      } else if (left != null) {\n        assert right != null;\n        // Recurse:\n        left.addOutputs(index, range);\n        right.addOutputs(index, range);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4edc984f0f4ac77c37e48ace2932f780f888453c"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c422e924212367b334b4938f1fd3e44438e88c40"],"c422e924212367b334b4938f1fd3e44438e88c40":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4edc984f0f4ac77c37e48ace2932f780f888453c","3cc728b07df73b197e6d940d27f9b08b63918f13"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}