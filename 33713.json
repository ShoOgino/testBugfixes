{"path":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#getFilesToCopy(Map[String,FileMetaData]).mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#getFilesToCopy(Map[String,FileMetaData]).mjava","pathOld":"/dev/null","sourceNew":"  /** Compares incoming per-file identity (id, checksum, header, footer) versus what we have locally and returns the subset of the incoming\n   *  files that need copying */\n  public List<Map.Entry<String,FileMetaData>> getFilesToCopy(Map<String,FileMetaData> files) throws IOException {\n\n    boolean doCopyCommitFiles = false;\n    List<Map.Entry<String,FileMetaData>> toCopy = new ArrayList<>();\n    for (Map.Entry<String,FileMetaData> ent : files.entrySet()) {\n      String fileName = ent.getKey();\n      FileMetaData fileMetaData = ent.getValue();\n      if (fileIsIdentical(fileName, fileMetaData) == false) {\n        toCopy.add(ent);\n      }\n    }\n\n    return toCopy;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#getFilesToCopy(Map[String,FileMetaData]).mjava","pathOld":"/dev/null","sourceNew":"  /** Compares incoming per-file identity (id, checksum, header, footer) versus what we have locally and returns the subset of the incoming\n   *  files that need copying */\n  public List<Map.Entry<String,FileMetaData>> getFilesToCopy(Map<String,FileMetaData> files) throws IOException {\n\n    boolean doCopyCommitFiles = false;\n    List<Map.Entry<String,FileMetaData>> toCopy = new ArrayList<>();\n    for (Map.Entry<String,FileMetaData> ent : files.entrySet()) {\n      String fileName = ent.getKey();\n      FileMetaData fileMetaData = ent.getValue();\n      if (fileIsIdentical(fileName, fileMetaData) == false) {\n        toCopy.add(ent);\n      }\n    }\n\n    return toCopy;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5c2b099338fb9b77f99c5127f70418a85a7689f","date":1468243391,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#getFilesToCopy(Map[String,FileMetaData]).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#getFilesToCopy(Map[String,FileMetaData]).mjava","sourceNew":"  /** Compares incoming per-file identity (id, checksum, header, footer) versus what we have locally and returns the subset of the incoming\n   *  files that need copying */\n  public List<Map.Entry<String,FileMetaData>> getFilesToCopy(Map<String,FileMetaData> files) throws IOException {\n\n    List<Map.Entry<String,FileMetaData>> toCopy = new ArrayList<>();\n    for (Map.Entry<String,FileMetaData> ent : files.entrySet()) {\n      String fileName = ent.getKey();\n      FileMetaData fileMetaData = ent.getValue();\n      if (fileIsIdentical(fileName, fileMetaData) == false) {\n        toCopy.add(ent);\n      }\n    }\n\n    return toCopy;\n  }\n\n","sourceOld":"  /** Compares incoming per-file identity (id, checksum, header, footer) versus what we have locally and returns the subset of the incoming\n   *  files that need copying */\n  public List<Map.Entry<String,FileMetaData>> getFilesToCopy(Map<String,FileMetaData> files) throws IOException {\n\n    boolean doCopyCommitFiles = false;\n    List<Map.Entry<String,FileMetaData>> toCopy = new ArrayList<>();\n    for (Map.Entry<String,FileMetaData> ent : files.entrySet()) {\n      String fileName = ent.getKey();\n      FileMetaData fileMetaData = ent.getValue();\n      if (fileIsIdentical(fileName, fileMetaData) == false) {\n        toCopy.add(ent);\n      }\n    }\n\n    return toCopy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dcbdc4d70424f69441091cee35f497a60c60bdb","date":1468245582,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#getFilesToCopy(Map[String,FileMetaData]).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#getFilesToCopy(Map[String,FileMetaData]).mjava","sourceNew":"  /** Compares incoming per-file identity (id, checksum, header, footer) versus what we have locally and returns the subset of the incoming\n   *  files that need copying */\n  public List<Map.Entry<String,FileMetaData>> getFilesToCopy(Map<String,FileMetaData> files) throws IOException {\n\n    List<Map.Entry<String,FileMetaData>> toCopy = new ArrayList<>();\n    for (Map.Entry<String,FileMetaData> ent : files.entrySet()) {\n      String fileName = ent.getKey();\n      FileMetaData fileMetaData = ent.getValue();\n      if (fileIsIdentical(fileName, fileMetaData) == false) {\n        toCopy.add(ent);\n      }\n    }\n\n    return toCopy;\n  }\n\n","sourceOld":"  /** Compares incoming per-file identity (id, checksum, header, footer) versus what we have locally and returns the subset of the incoming\n   *  files that need copying */\n  public List<Map.Entry<String,FileMetaData>> getFilesToCopy(Map<String,FileMetaData> files) throws IOException {\n\n    boolean doCopyCommitFiles = false;\n    List<Map.Entry<String,FileMetaData>> toCopy = new ArrayList<>();\n    for (Map.Entry<String,FileMetaData> ent : files.entrySet()) {\n      String fileName = ent.getKey();\n      FileMetaData fileMetaData = ent.getValue();\n      if (fileIsIdentical(fileName, fileMetaData) == false) {\n        toCopy.add(ent);\n      }\n    }\n\n    return toCopy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#getFilesToCopy(Map[String,FileMetaData]).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#getFilesToCopy(Map[String,FileMetaData]).mjava","sourceNew":"  /** Compares incoming per-file identity (id, checksum, header, footer) versus what we have locally and returns the subset of the incoming\n   *  files that need copying */\n  public List<Map.Entry<String,FileMetaData>> getFilesToCopy(Map<String,FileMetaData> files) throws IOException {\n\n    List<Map.Entry<String,FileMetaData>> toCopy = new ArrayList<>();\n    for (Map.Entry<String,FileMetaData> ent : files.entrySet()) {\n      String fileName = ent.getKey();\n      FileMetaData fileMetaData = ent.getValue();\n      if (fileIsIdentical(fileName, fileMetaData) == false) {\n        toCopy.add(ent);\n      }\n    }\n\n    return toCopy;\n  }\n\n","sourceOld":"  /** Compares incoming per-file identity (id, checksum, header, footer) versus what we have locally and returns the subset of the incoming\n   *  files that need copying */\n  public List<Map.Entry<String,FileMetaData>> getFilesToCopy(Map<String,FileMetaData> files) throws IOException {\n\n    boolean doCopyCommitFiles = false;\n    List<Map.Entry<String,FileMetaData>> toCopy = new ArrayList<>();\n    for (Map.Entry<String,FileMetaData> ent : files.entrySet()) {\n      String fileName = ent.getKey();\n      FileMetaData fileMetaData = ent.getValue();\n      if (fileIsIdentical(fileName, fileMetaData) == false) {\n        toCopy.add(ent);\n      }\n    }\n\n    return toCopy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dcbdc4d70424f69441091cee35f497a60c60bdb":["68496c2200e559fb7802f7575427b7a482659afb","e5c2b099338fb9b77f99c5127f70418a85a7689f"],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["68496c2200e559fb7802f7575427b7a482659afb","2dcbdc4d70424f69441091cee35f497a60c60bdb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dcbdc4d70424f69441091cee35f497a60c60bdb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e5c2b099338fb9b77f99c5127f70418a85a7689f":["68496c2200e559fb7802f7575427b7a482659afb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"2dcbdc4d70424f69441091cee35f497a60c60bdb":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68496c2200e559fb7802f7575427b7a482659afb":["2dcbdc4d70424f69441091cee35f497a60c60bdb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e5c2b099338fb9b77f99c5127f70418a85a7689f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e5c2b099338fb9b77f99c5127f70418a85a7689f":["2dcbdc4d70424f69441091cee35f497a60c60bdb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}