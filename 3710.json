{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testNumericUtilsAdd().mjava","commits":[{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testNumericUtilsAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testBKDUtilAdd().mjava","sourceNew":"  public void testNumericUtilsAdd() throws Exception {\n    int iters = atLeast(10000);\n    int numBytes = TestUtil.nextInt(random(), 1, 100);\n    for(int iter=0;iter<iters;iter++) {\n      BigInteger v1 = new BigInteger(8*numBytes-1, random());\n      BigInteger v2 = new BigInteger(8*numBytes-1, random());\n\n      byte[] v1Bytes = new byte[numBytes];\n      byte[] v1RawBytes = v1.toByteArray();\n      assert v1RawBytes.length <= numBytes;\n      System.arraycopy(v1RawBytes, 0, v1Bytes, v1Bytes.length-v1RawBytes.length, v1RawBytes.length);\n\n      byte[] v2Bytes = new byte[numBytes];\n      byte[] v2RawBytes = v2.toByteArray();\n      assert v1RawBytes.length <= numBytes;\n      System.arraycopy(v2RawBytes, 0, v2Bytes, v2Bytes.length-v2RawBytes.length, v2RawBytes.length);\n\n      byte[] result = new byte[numBytes];\n      NumericUtils.add(numBytes, 0, v1Bytes, v2Bytes, result);\n\n      BigInteger sum = v1.add(v2);\n      assertTrue(\"sum=\" + sum + \" v1=\" + v1 + \" v2=\" + v2 + \" but result=\" + new BigInteger(1, result), sum.equals(new BigInteger(1, result)));\n    }\n  }\n\n","sourceOld":"  public void testBKDUtilAdd() throws Exception {\n    int iters = atLeast(10000);\n    int numBytes = TestUtil.nextInt(random(), 1, 100);\n    for(int iter=0;iter<iters;iter++) {\n      BigInteger v1 = new BigInteger(8*numBytes-1, random());\n      BigInteger v2 = new BigInteger(8*numBytes-1, random());\n\n      byte[] v1Bytes = new byte[numBytes];\n      byte[] v1RawBytes = v1.toByteArray();\n      assert v1RawBytes.length <= numBytes;\n      System.arraycopy(v1RawBytes, 0, v1Bytes, v1Bytes.length-v1RawBytes.length, v1RawBytes.length);\n\n      byte[] v2Bytes = new byte[numBytes];\n      byte[] v2RawBytes = v2.toByteArray();\n      assert v1RawBytes.length <= numBytes;\n      System.arraycopy(v2RawBytes, 0, v2Bytes, v2Bytes.length-v2RawBytes.length, v2RawBytes.length);\n\n      byte[] result = new byte[numBytes];\n      BKDUtil.add(numBytes, 0, v1Bytes, v2Bytes, result);\n\n      BigInteger sum = v1.add(v2);\n      assertTrue(\"sum=\" + sum + \" v1=\" + v1 + \" v2=\" + v2 + \" but result=\" + new BigInteger(1, result), sum.equals(new BigInteger(1, result)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testNumericUtilsAdd().mjava","sourceNew":"  public void testAdd() throws Exception {\n    int iters = atLeast(10000);\n    int numBytes = TestUtil.nextInt(random(), 1, 100);\n    for(int iter=0;iter<iters;iter++) {\n      BigInteger v1 = new BigInteger(8*numBytes-1, random());\n      BigInteger v2 = new BigInteger(8*numBytes-1, random());\n\n      byte[] v1Bytes = new byte[numBytes];\n      byte[] v1RawBytes = v1.toByteArray();\n      assert v1RawBytes.length <= numBytes;\n      System.arraycopy(v1RawBytes, 0, v1Bytes, v1Bytes.length-v1RawBytes.length, v1RawBytes.length);\n\n      byte[] v2Bytes = new byte[numBytes];\n      byte[] v2RawBytes = v2.toByteArray();\n      assert v1RawBytes.length <= numBytes;\n      System.arraycopy(v2RawBytes, 0, v2Bytes, v2Bytes.length-v2RawBytes.length, v2RawBytes.length);\n\n      byte[] result = new byte[numBytes];\n      NumericUtils.add(numBytes, 0, v1Bytes, v2Bytes, result);\n\n      BigInteger sum = v1.add(v2);\n      assertTrue(\"sum=\" + sum + \" v1=\" + v1 + \" v2=\" + v2 + \" but result=\" + new BigInteger(1, result), sum.equals(new BigInteger(1, result)));\n    }\n  }\n\n","sourceOld":"  public void testNumericUtilsAdd() throws Exception {\n    int iters = atLeast(10000);\n    int numBytes = TestUtil.nextInt(random(), 1, 100);\n    for(int iter=0;iter<iters;iter++) {\n      BigInteger v1 = new BigInteger(8*numBytes-1, random());\n      BigInteger v2 = new BigInteger(8*numBytes-1, random());\n\n      byte[] v1Bytes = new byte[numBytes];\n      byte[] v1RawBytes = v1.toByteArray();\n      assert v1RawBytes.length <= numBytes;\n      System.arraycopy(v1RawBytes, 0, v1Bytes, v1Bytes.length-v1RawBytes.length, v1RawBytes.length);\n\n      byte[] v2Bytes = new byte[numBytes];\n      byte[] v2RawBytes = v2.toByteArray();\n      assert v1RawBytes.length <= numBytes;\n      System.arraycopy(v2RawBytes, 0, v2Bytes, v2Bytes.length-v2RawBytes.length, v2RawBytes.length);\n\n      byte[] result = new byte[numBytes];\n      NumericUtils.add(numBytes, 0, v1Bytes, v2Bytes, result);\n\n      BigInteger sum = v1.add(v2);\n      assertTrue(\"sum=\" + sum + \" v1=\" + v1 + \" v2=\" + v2 + \" but result=\" + new BigInteger(1, result), sum.equals(new BigInteger(1, result)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testNumericUtilsAdd().mjava","sourceNew":"  public void testAdd() throws Exception {\n    int iters = atLeast(10000);\n    int numBytes = TestUtil.nextInt(random(), 1, 100);\n    for(int iter=0;iter<iters;iter++) {\n      BigInteger v1 = new BigInteger(8*numBytes-1, random());\n      BigInteger v2 = new BigInteger(8*numBytes-1, random());\n\n      byte[] v1Bytes = new byte[numBytes];\n      byte[] v1RawBytes = v1.toByteArray();\n      assert v1RawBytes.length <= numBytes;\n      System.arraycopy(v1RawBytes, 0, v1Bytes, v1Bytes.length-v1RawBytes.length, v1RawBytes.length);\n\n      byte[] v2Bytes = new byte[numBytes];\n      byte[] v2RawBytes = v2.toByteArray();\n      assert v1RawBytes.length <= numBytes;\n      System.arraycopy(v2RawBytes, 0, v2Bytes, v2Bytes.length-v2RawBytes.length, v2RawBytes.length);\n\n      byte[] result = new byte[numBytes];\n      NumericUtils.add(numBytes, 0, v1Bytes, v2Bytes, result);\n\n      BigInteger sum = v1.add(v2);\n      assertTrue(\"sum=\" + sum + \" v1=\" + v1 + \" v2=\" + v2 + \" but result=\" + new BigInteger(1, result), sum.equals(new BigInteger(1, result)));\n    }\n  }\n\n","sourceOld":"  public void testNumericUtilsAdd() throws Exception {\n    int iters = atLeast(10000);\n    int numBytes = TestUtil.nextInt(random(), 1, 100);\n    for(int iter=0;iter<iters;iter++) {\n      BigInteger v1 = new BigInteger(8*numBytes-1, random());\n      BigInteger v2 = new BigInteger(8*numBytes-1, random());\n\n      byte[] v1Bytes = new byte[numBytes];\n      byte[] v1RawBytes = v1.toByteArray();\n      assert v1RawBytes.length <= numBytes;\n      System.arraycopy(v1RawBytes, 0, v1Bytes, v1Bytes.length-v1RawBytes.length, v1RawBytes.length);\n\n      byte[] v2Bytes = new byte[numBytes];\n      byte[] v2RawBytes = v2.toByteArray();\n      assert v1RawBytes.length <= numBytes;\n      System.arraycopy(v2RawBytes, 0, v2Bytes, v2Bytes.length-v2RawBytes.length, v2RawBytes.length);\n\n      byte[] result = new byte[numBytes];\n      NumericUtils.add(numBytes, 0, v1Bytes, v2Bytes, result);\n\n      BigInteger sum = v1.add(v2);\n      assertTrue(\"sum=\" + sum + \" v1=\" + v1 + \" v2=\" + v2 + \" but result=\" + new BigInteger(1, result), sum.equals(new BigInteger(1, result)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"770342641f7b505eaa8dccdc666158bff2419109":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770342641f7b505eaa8dccdc666158bff2419109"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"770342641f7b505eaa8dccdc666158bff2419109":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}