{"path":"src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(QueryWeight,TermPositions[],int[],Similarity,byte[]).mjava","commits":[{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(QueryWeight,TermPositions[],int[],Similarity,byte[]).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,TermPositions[],int[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(QueryWeight weight, TermPositions[] tps, int[] offsets,\n      Similarity similarity, byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < tps.length; i++) {\n      PhrasePositions pp = new PhrasePositions(tps[i], offsets[i]);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(tps.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, TermPositions[] tps, int[] offsets,\n      Similarity similarity, byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < tps.length; i++) {\n      PhrasePositions pp = new PhrasePositions(tps[i], offsets[i]);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(tps.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,TermPositions[],int[],Similarity,byte[]).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(QueryWeight,TermPositions[],int[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, TermPositions[] tps, int[] offsets,\n      Similarity similarity, byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < tps.length; i++) {\n      PhrasePositions pp = new PhrasePositions(tps[i], offsets[i]);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(tps.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(QueryWeight weight, TermPositions[] tps, int[] offsets,\n      Similarity similarity, byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < tps.length; i++) {\n      PhrasePositions pp = new PhrasePositions(tps[i], offsets[i]);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(tps.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe941135bdfc28c81e20b4d21422f8726af34925"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["052fac7830290bd38a04cddee1a121ee07656b56"],"fe941135bdfc28c81e20b4d21422f8726af34925":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}