{"path":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsReader.IntsSource#getInt(int).mjava","commits":[{"id":"39f3757037aa8f710c0cbf9a76a332de735f58b0","date":1288384416,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsReader.IntsSource#getInt(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsReader.IntsSource#ints(int).mjava","sourceNew":"      @Override\n      public long getInt(int docID) {\n        // TODO -- can we somehow avoid 2X method calls\n        // on each get? must push minValue down, and make\n        // PackedInts implement Ints.Source\n        final long val = values.get(docID);\n        // docs not having a value for that field must return a default value\n        return val == defaultValue ? 0 : minValue + val;\n      }\n\n","sourceOld":"      @Override\n      public long ints(int docID) {\n        // nocommit -- can we somehow avoid 2X method calls\n        // on each get? must push minValue down, and make\n        // PackedInts implement Ints.Source\n        final long val = values.get(docID);\n        // docs not having a value for that field must return a default value\n        return val == defaultValue ? 0 : minValue + val;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsReader.IntsSource#getInt(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsReader.IntsSource#getInt(int).mjava","sourceNew":"      @Override\n      public long getInt(int docID) {\n        // TODO -- can we somehow avoid 2X method calls\n        // on each get? must push minValue down, and make\n        // PackedInts implement Ints.Source\n        return minValue + values.get(docID);\n      }\n\n","sourceOld":"      @Override\n      public long getInt(int docID) {\n        // TODO -- can we somehow avoid 2X method calls\n        // on each get? must push minValue down, and make\n        // PackedInts implement Ints.Source\n        final long val = values.get(docID);\n        // docs not having a value for that field must return a default value\n        return val == defaultValue ? 0 : minValue + val;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9235b9d4454a46c066cda47fed7ca0a34e614529","date":1304414372,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsReader.IntsSource#getInt(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsReader.IntsSource#getInt(int).mjava","sourceNew":"      @Override\n      public long getInt(int docID) {\n        // TODO -- can we somehow avoid 2X method calls\n        // on each get? must push minValue down, and make\n        // PackedInts implement Ints.Source\n        assert docID >= 0;\n        return minValue + values.get(docID);\n      }\n\n","sourceOld":"      @Override\n      public long getInt(int docID) {\n        // TODO -- can we somehow avoid 2X method calls\n        // on each get? must push minValue down, and make\n        // PackedInts implement Ints.Source\n        return minValue + values.get(docID);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4034ca0f8f74fdf56e25be73822f2441fc1c1b46","date":1307111599,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsReader.PackedIntsSource#getInt(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsReader.IntsSource#getInt(int).mjava","sourceNew":"      @Override\n      public long getInt(int docID) {\n        // TODO -- can we somehow avoid 2X method calls\n        // on each get? must push minValue down, and make\n        // PackedInts implement Ints.Source\n        assert docID >= 0;\n        final long value = values.get(docID);\n        return value == defaultValue ? 0 : minValue + value;\n      }\n\n","sourceOld":"      @Override\n      public long getInt(int docID) {\n        // TODO -- can we somehow avoid 2X method calls\n        // on each get? must push minValue down, and make\n        // PackedInts implement Ints.Source\n        assert docID >= 0;\n        return minValue + values.get(docID);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9235b9d4454a46c066cda47fed7ca0a34e614529":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"39f3757037aa8f710c0cbf9a76a332de735f58b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9235b9d4454a46c066cda47fed7ca0a34e614529":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"39f3757037aa8f710c0cbf9a76a332de735f58b0":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39f3757037aa8f710c0cbf9a76a332de735f58b0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}