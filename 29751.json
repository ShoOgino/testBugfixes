{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","commits":[{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException {\n    CachingTokenFilter tokenStream = new CachingTokenFilter(new StandardAnalyzer().tokenStream(\n        fieldName, new StringReader(text)));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    Highlighter highlighter = new Highlighter(formatter, new SpanScorer(query, fieldName,\n        tokenStream, FIELD_NAME));\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n    tokenStream.reset();\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf4dbfaec317df80ca6f412ce1b94b337b581e17","date":1238022314,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    CachingTokenFilter tokenStream = new CachingTokenFilter(new StandardAnalyzer().tokenStream(\n        fieldName, new StringReader(text)));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    Highlighter highlighter = new Highlighter(formatter, new SpanScorer(query, fieldName,\n        tokenStream, FIELD_NAME));\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n    tokenStream.reset();\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException {\n    CachingTokenFilter tokenStream = new CachingTokenFilter(new StandardAnalyzer().tokenStream(\n        fieldName, new StringReader(text)));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    Highlighter highlighter = new Highlighter(formatter, new SpanScorer(query, fieldName,\n        tokenStream, FIELD_NAME));\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n    tokenStream.reset();\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4471b2ef75c0e11869f60b23cabe292b895c3ee","date":1248991247,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    CachingTokenFilter tokenStream = new CachingTokenFilter(new StandardAnalyzer(Version.LUCENE_CURRENT).tokenStream(\n        fieldName, new StringReader(text)));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    Highlighter highlighter = new Highlighter(formatter, new SpanScorer(query, fieldName,\n        tokenStream, FIELD_NAME));\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n    tokenStream.reset();\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    CachingTokenFilter tokenStream = new CachingTokenFilter(new StandardAnalyzer().tokenStream(\n        fieldName, new StringReader(text)));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    Highlighter highlighter = new Highlighter(formatter, new SpanScorer(query, fieldName,\n        tokenStream, FIELD_NAME));\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n    tokenStream.reset();\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    CachingTokenFilter tokenStream = new CachingTokenFilter(new StandardAnalyzer(Version.LUCENE_CURRENT).tokenStream(\n        fieldName, new StringReader(text)));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    CachingTokenFilter tokenStream = new CachingTokenFilter(new StandardAnalyzer(Version.LUCENE_CURRENT).tokenStream(\n        fieldName, new StringReader(text)));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    Highlighter highlighter = new Highlighter(formatter, new SpanScorer(query, fieldName,\n        tokenStream, FIELD_NAME));\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n    tokenStream.reset();\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c16ba100a31d292b7b4c893a3cdf1994e75a3201","date":1249608645,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new StandardAnalyzer(Version.LUCENE_CURRENT).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    CachingTokenFilter tokenStream = new CachingTokenFilter(new StandardAnalyzer(Version.LUCENE_CURRENT).tokenStream(\n        fieldName, new StringReader(text)));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new StandardAnalyzer(TEST_VERSION).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new StandardAnalyzer(Version.LUCENE_CURRENT).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new StandardAnalyzer(TEST_VERSION_CURRENT).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new StandardAnalyzer(TEST_VERSION).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new StandardAnalyzer(TEST_VERSION).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new StandardAnalyzer(TEST_VERSION_CURRENT).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new StandardAnalyzer(TEST_VERSION_CURRENT).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new StandardAnalyzer(TEST_VERSION).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#highlightField(Query,String,String).mjava","sourceNew":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new StandardAnalyzer(TEST_VERSION_CURRENT).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","sourceOld":"  /**\n   * This method intended for use with <tt>testHighlightingWithDefaultField()</tt>\n * @throws InvalidTokenOffsetsException \n   */\n  private static String highlightField(Query query, String fieldName, String text)\n      throws IOException, InvalidTokenOffsetsException {\n    TokenStream tokenStream = new StandardAnalyzer(TEST_VERSION_CURRENT).tokenStream(fieldName, new StringReader(text));\n    // Assuming \"<B>\", \"</B>\" used to highlight\n    SimpleHTMLFormatter formatter = new SimpleHTMLFormatter();\n    QueryScorer scorer = new QueryScorer(query, fieldName, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(formatter, scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(Integer.MAX_VALUE));\n\n    String rv = highlighter.getBestFragments(tokenStream, text, 1, \"(FIELD TEXT TRUNCATED)\");\n    return rv.length() == 0 ? text : rv;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["bf4dbfaec317df80ca6f412ce1b94b337b581e17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"296b8b38a87feb478921f77834a2302dfe77641c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bf4dbfaec317df80ca6f412ce1b94b337b581e17":["296b8b38a87feb478921f77834a2302dfe77641c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["296b8b38a87feb478921f77834a2302dfe77641c"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"],"296b8b38a87feb478921f77834a2302dfe77641c":["bf4dbfaec317df80ca6f412ce1b94b337b581e17"],"bf4dbfaec317df80ca6f412ce1b94b337b581e17":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}