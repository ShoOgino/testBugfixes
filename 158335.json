{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","commits":[{"id":"919d0359b366fa52dd8de3edbf85db8be74fc0df","date":1400759431,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (shardName == null || shardName.isEmpty()) {\n        params.remove(\"shard\");\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      return params;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c42a37c6ad0772ece32e03ba62d852fe7d83e4b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87a8da508220b3dc7f6e030a17aeaa78bd74e891","date":1418855619,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (shardName == null || shardName.isEmpty()) {\n        params.remove(\"shard\");\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (shardName == null || shardName.isEmpty()) {\n        params.remove(\"shard\");\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d","date":1419896224,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (shardName == null || shardName.isEmpty()) {\n        params.remove(\"shard\");\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      params.set(\"async\", asyncId);\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (shardName == null || shardName.isEmpty()) {\n        params.remove(\"shard\");\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":["c42a37c6ad0772ece32e03ba62d852fe7d83e4b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c42a37c6ad0772ece32e03ba62d852fe7d83e4b9","date":1427401094,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (shardName == null || shardName.isEmpty()) {\n        params.remove(CoreAdminParams.SHARD);\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (asyncId != null) {\n        params.set(\"async\", asyncId);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (shardName == null || shardName.isEmpty()) {\n        params.remove(\"shard\");\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      params.set(\"async\", asyncId);\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":["919d0359b366fa52dd8de3edbf85db8be74fc0df","d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (shardName == null || shardName.isEmpty()) {\n        params.remove(CoreAdminParams.SHARD);\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (asyncId != null) {\n        params.set(\"async\", asyncId);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (shardName == null || shardName.isEmpty()) {\n        params.remove(\"shard\");\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      params.set(\"async\", asyncId);\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f222f4f2bda21ffd6b39b3362b2412e98e4d5e31","date":1435517625,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (shardName == null || shardName.isEmpty()) {\n        params.remove(CoreAdminParams.SHARD);\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (asyncId != null) {\n        params.set(CommonAdminParams.ASYNC, asyncId);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (shardName == null || shardName.isEmpty()) {\n        params.remove(CoreAdminParams.SHARD);\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (asyncId != null) {\n        params.set(\"async\", asyncId);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bbb741690cdafda7f1f7549c26351c912917a69","date":1453203134,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (shardName == null || shardName.isEmpty()) {\n        params.remove(CoreAdminParams.SHARD);\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (shardName == null || shardName.isEmpty()) {\n        params.remove(CoreAdminParams.SHARD);\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (asyncId != null) {\n        params.set(CommonAdminParams.ASYNC, asyncId);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"861a8940601b61a2fd5427f7187314d516ef1586","date":1457434409,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (collection == null)\n        throw new IllegalArgumentException(\"You must call setCollection() on this request\");\n      params.add(CoreAdminParams.COLLECTION, collection);\n      if (shard == null || shard.isEmpty()) {\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      else {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (shardName == null || shardName.isEmpty()) {\n        params.remove(CoreAdminParams.SHARD);\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d","date":1457434419,"type":3,"author":"Alan Woodward","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (collection == null)\n        throw new IllegalArgumentException(\"You must call setCollection() on this request\");\n      params.add(CoreAdminParams.COLLECTION, collection);\n      if (shard == null || shard.isEmpty()) {\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      else {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (shardName == null || shardName.isEmpty()) {\n        params.remove(CoreAdminParams.SHARD);\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daed6b66edd950a7f2af9857df64b09acf3deacc","date":1457527865,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (collection == null)\n        throw new IllegalArgumentException(\"You must call setCollection() on this request\");\n      params.add(CoreAdminParams.COLLECTION, collection);\n      if (shard == null || shard.isEmpty()) {\n        if (routeKey == null) {\n          throw new IllegalArgumentException(\"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      else {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (collection == null)\n        throw new IllegalArgumentException(\"You must call setCollection() on this request\");\n      params.add(CoreAdminParams.COLLECTION, collection);\n      if (shard == null || shard.isEmpty()) {\n        if (routeKey == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      else {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (collection == null)\n        throw new IllegalArgumentException(\"You must call setCollection() on this request\");\n      params.add(CoreAdminParams.COLLECTION, collection);\n      if (shard == null || shard.isEmpty()) {\n        if (routeKey == null) {\n          throw new IllegalArgumentException(\"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      else {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (collection == null)\n        throw new IllegalArgumentException(\"You must call setCollection() on this request\");\n      params.add(CoreAdminParams.COLLECTION, collection);\n      if (shard == null || shard.isEmpty()) {\n        if (routeKey == null) {\n          throw new IllegalArgumentException(\"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      else {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (collection == null)\n        throw new IllegalArgumentException(\"You must call setCollection() on this request\");\n      params.add(CoreAdminParams.COLLECTION, collection);\n      if (shard == null || shard.isEmpty()) {\n        if (routeKey == null) {\n          throw new IllegalArgumentException(\"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      else {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (collection == null)\n        throw new IllegalArgumentException(\"You must call setCollection() on this request\");\n      params.add(CoreAdminParams.COLLECTION, collection);\n      if (shard == null || shard.isEmpty()) {\n        if (routeKey == null) {\n          throw new IllegalArgumentException(\"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      else {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (collection == null)\n        throw new IllegalArgumentException(\"You must call setCollection() on this request\");\n      params.add(CoreAdminParams.COLLECTION, collection);\n      if (shard == null || shard.isEmpty()) {\n        if (routeKey == null) {\n          throw new IllegalArgumentException(\"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      else {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      if (collection == null)\n        throw new IllegalArgumentException(\"You must call setCollection() on this request\");\n      params.add(CoreAdminParams.COLLECTION, collection);\n      if (shard == null || shard.isEmpty()) {\n        if (routeKey == null) {\n          throw new IllegalArgumentException(\"Either shard or routeKey must be provided\");\n        }\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      else {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (coreName != null) {\n        params.add(\"name\", coreName);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (coreName != null) {\n        params.add(\"name\", coreName);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (coreName != null) {\n        params.add(\"name\", coreName);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264e2d8faf5f86cbad34a372b65c98e3d9f2bb27","date":1499843247,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (ulogDir != null) {\n        params.add(\"ulogDir\", ulogDir);\n      }\n      if (coreName != null) {\n        params.add(\"name\", coreName);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (coreName != null) {\n        params.add(\"name\", coreName);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (ulogDir != null) {\n        params.add(\"ulogDir\", ulogDir);\n      }\n      if (coreName != null) {\n        params.add(\"name\", coreName);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (coreName != null) {\n        params.add(\"name\", coreName);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (ulogDir != null) {\n        params.add(\"ulogDir\", ulogDir);\n      }\n      if (coreName != null) {\n        params.add(\"name\", coreName);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (coreName != null) {\n        params.add(\"name\", coreName);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46ef1a2b9cf8410947a87a43aba2b400394e773","date":1517224576,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(CoreAdminParams.NODE, node);\n      }\n      if (instanceDir != null)  {\n        params.add(CoreAdminParams.INSTANCE_DIR, instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (ulogDir != null) {\n        params.add(CoreAdminParams.ULOG_DIR, ulogDir);\n      }\n      if (coreName != null) {\n        params.add(CoreAdminParams.NAME, coreName);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(\"node\", node);\n      }\n      if (instanceDir != null)  {\n        params.add(\"instanceDir\", instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(\"dataDir\", dataDir);\n      }\n      if (ulogDir != null) {\n        params.add(\"ulogDir\", ulogDir);\n      }\n      if (coreName != null) {\n        params.add(\"name\", coreName);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deea3439de4f487ae553317e50d5d641ca386374","date":1537522941,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(CoreAdminParams.NODE, node);\n      }\n      if (instanceDir != null)  {\n        params.add(CoreAdminParams.INSTANCE_DIR, instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (ulogDir != null) {\n        params.add(CoreAdminParams.ULOG_DIR, ulogDir);\n      }\n      if (coreName != null) {\n        params.add(CoreAdminParams.NAME, coreName);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (nrtReplicas != null)  {\n        params.add(NRT_REPLICAS, String.valueOf(nrtReplicas));\n      }\n      if (tlogReplicas != null)  {\n        params.add(TLOG_REPLICAS, String.valueOf(tlogReplicas));\n      }\n      if (pullReplicas != null)  {\n        params.add(PULL_REPLICAS, String.valueOf(pullReplicas));\n      }\n      if (createNodeSet != null)  {\n        params.add(CREATE_NODE_SET_PARAM, createNodeSet);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(CoreAdminParams.NODE, node);\n      }\n      if (instanceDir != null)  {\n        params.add(CoreAdminParams.INSTANCE_DIR, instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (ulogDir != null) {\n        params.add(CoreAdminParams.ULOG_DIR, ulogDir);\n      }\n      if (coreName != null) {\n        params.add(CoreAdminParams.NAME, coreName);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1fec8b37cbb6884a64d39565e9dd7b4522a0598","date":1537699559,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(CoreAdminParams.NODE, node);\n      }\n      if (instanceDir != null)  {\n        params.add(CoreAdminParams.INSTANCE_DIR, instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (ulogDir != null) {\n        params.add(CoreAdminParams.ULOG_DIR, ulogDir);\n      }\n      if (coreName != null) {\n        params.add(CoreAdminParams.NAME, coreName);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (nrtReplicas != null)  {\n        params.add(NRT_REPLICAS, String.valueOf(nrtReplicas));\n      }\n      if (tlogReplicas != null)  {\n        params.add(TLOG_REPLICAS, String.valueOf(tlogReplicas));\n      }\n      if (pullReplicas != null)  {\n        params.add(PULL_REPLICAS, String.valueOf(pullReplicas));\n      }\n      if (createNodeSet != null)  {\n        params.add(CREATE_NODE_SET_PARAM, createNodeSet);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(CoreAdminParams.NODE, node);\n      }\n      if (instanceDir != null)  {\n        params.add(CoreAdminParams.INSTANCE_DIR, instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (ulogDir != null) {\n        params.add(CoreAdminParams.ULOG_DIR, ulogDir);\n      }\n      if (coreName != null) {\n        params.add(CoreAdminParams.NAME, coreName);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.AddReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(CoreAdminParams.NODE, node);\n      }\n      if (skipNodeAssignment != null) {\n        params.add(SKIP_NODE_ASSIGNMENT, String.valueOf(skipNodeAssignment));\n      }\n      if (instanceDir != null)  {\n        params.add(CoreAdminParams.INSTANCE_DIR, instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (ulogDir != null) {\n        params.add(CoreAdminParams.ULOG_DIR, ulogDir);\n      }\n      if (coreName != null) {\n        params.add(CoreAdminParams.NAME, coreName);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (nrtReplicas != null)  {\n        params.add(NRT_REPLICAS, String.valueOf(nrtReplicas));\n      }\n      if (tlogReplicas != null)  {\n        params.add(TLOG_REPLICAS, String.valueOf(tlogReplicas));\n      }\n      if (pullReplicas != null)  {\n        params.add(PULL_REPLICAS, String.valueOf(pullReplicas));\n      }\n      if (createNodeSet != null)  {\n        params.add(CREATE_NODE_SET_PARAM, createNodeSet);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.add(CoreAdminParams.COLLECTION, collection);\n      assert ((null == routeKey) ^ (null == shard));\n      if (null != shard) {\n        params.add(CoreAdminParams.SHARD, shard);\n      }\n      if (null != routeKey) {\n        params.add(ShardParams._ROUTE_, routeKey);\n      }\n      if (node != null) {\n        params.add(CoreAdminParams.NODE, node);\n      }\n      if (instanceDir != null)  {\n        params.add(CoreAdminParams.INSTANCE_DIR, instanceDir);\n      }\n      if (dataDir != null)  {\n        params.add(CoreAdminParams.DATA_DIR, dataDir);\n      }\n      if (ulogDir != null) {\n        params.add(CoreAdminParams.ULOG_DIR, ulogDir);\n      }\n      if (coreName != null) {\n        params.add(CoreAdminParams.NAME, coreName);\n      }\n      if (type != null) {\n        params.add(ZkStateReader.REPLICA_TYPE, type.name());\n      }\n      if (properties != null) {\n        addProperties(params, properties);\n      }\n      if (nrtReplicas != null)  {\n        params.add(NRT_REPLICAS, String.valueOf(nrtReplicas));\n      }\n      if (tlogReplicas != null)  {\n        params.add(TLOG_REPLICAS, String.valueOf(tlogReplicas));\n      }\n      if (pullReplicas != null)  {\n        params.add(PULL_REPLICAS, String.valueOf(pullReplicas));\n      }\n      if (createNodeSet != null)  {\n        params.add(CREATE_NODE_SET_PARAM, createNodeSet);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f222f4f2bda21ffd6b39b3362b2412e98e4d5e31":["c42a37c6ad0772ece32e03ba62d852fe7d83e4b9"],"daed6b66edd950a7f2af9857df64b09acf3deacc":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["87a8da508220b3dc7f6e030a17aeaa78bd74e891"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","264e2d8faf5f86cbad34a372b65c98e3d9f2bb27"],"264e2d8faf5f86cbad34a372b65c98e3d9f2bb27":["28288370235ed02234a64753cdbf0c6ec096304a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["daed6b66edd950a7f2af9857df64b09acf3deacc","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d","c42a37c6ad0772ece32e03ba62d852fe7d83e4b9"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["e46ef1a2b9cf8410947a87a43aba2b400394e773","deea3439de4f487ae553317e50d5d641ca386374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"861a8940601b61a2fd5427f7187314d516ef1586":["3bbb741690cdafda7f1f7549c26351c912917a69"],"e46ef1a2b9cf8410947a87a43aba2b400394e773":["264e2d8faf5f86cbad34a372b65c98e3d9f2bb27"],"3bbb741690cdafda7f1f7549c26351c912917a69":["f222f4f2bda21ffd6b39b3362b2412e98e4d5e31"],"61c45e99cf6676da48f19d7511c73712ad39402b":["daed6b66edd950a7f2af9857df64b09acf3deacc"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"c42a37c6ad0772ece32e03ba62d852fe7d83e4b9":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["61c45e99cf6676da48f19d7511c73712ad39402b"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"3217321f3e1d7922898c6c633d17acfa840d6875":["61c45e99cf6676da48f19d7511c73712ad39402b","ac97ea104d893f16aab430d9904473bc1f233f3c"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e9017cf144952056066919f1ebc7897ff9bd71b1","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["3217321f3e1d7922898c6c633d17acfa840d6875","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["61c45e99cf6676da48f19d7511c73712ad39402b","3217321f3e1d7922898c6c633d17acfa840d6875"],"919d0359b366fa52dd8de3edbf85db8be74fc0df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87a8da508220b3dc7f6e030a17aeaa78bd74e891":["919d0359b366fa52dd8de3edbf85db8be74fc0df"],"deea3439de4f487ae553317e50d5d641ca386374":["e46ef1a2b9cf8410947a87a43aba2b400394e773"],"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d":["3bbb741690cdafda7f1f7549c26351c912917a69","861a8940601b61a2fd5427f7187314d516ef1586"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"f222f4f2bda21ffd6b39b3362b2412e98e4d5e31":["3bbb741690cdafda7f1f7549c26351c912917a69"],"daed6b66edd950a7f2af9857df64b09acf3deacc":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c42a37c6ad0772ece32e03ba62d852fe7d83e4b9"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"264e2d8faf5f86cbad34a372b65c98e3d9f2bb27":["f9a989a32a073c55e3aef6f807a3474184bbcf49","e46ef1a2b9cf8410947a87a43aba2b400394e773"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["919d0359b366fa52dd8de3edbf85db8be74fc0df"],"861a8940601b61a2fd5427f7187314d516ef1586":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d"],"e46ef1a2b9cf8410947a87a43aba2b400394e773":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598","deea3439de4f487ae553317e50d5d641ca386374"],"3bbb741690cdafda7f1f7549c26351c912917a69":["861a8940601b61a2fd5427f7187314d516ef1586","d1dce8d293bb23a3bc9acca2dbdf8329ec48517d"],"61c45e99cf6676da48f19d7511c73712ad39402b":["ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"c42a37c6ad0772ece32e03ba62d852fe7d83e4b9":["f222f4f2bda21ffd6b39b3362b2412e98e4d5e31","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":[],"3217321f3e1d7922898c6c633d17acfa840d6875":["28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["f9a989a32a073c55e3aef6f807a3474184bbcf49","fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"28288370235ed02234a64753cdbf0c6ec096304a":["264e2d8faf5f86cbad34a372b65c98e3d9f2bb27"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"919d0359b366fa52dd8de3edbf85db8be74fc0df":["87a8da508220b3dc7f6e030a17aeaa78bd74e891"],"87a8da508220b3dc7f6e030a17aeaa78bd74e891":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"deea3439de4f487ae553317e50d5d641ca386374":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d":["daed6b66edd950a7f2af9857df64b09acf3deacc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fb569fd721c41eafc2a2d788499a7df490c7f1a5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}