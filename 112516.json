{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/VariableBase#validate(String,Object,boolean).mjava","commits":[{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/VariableBase#validate(String,Object,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object validate(String name, Object val, boolean isRuleVal) {\n    if (val instanceof Clause.Condition) {\n      Clause.Condition condition = (Clause.Condition) val;\n      val = condition.op.readRuleValue(condition);\n      if (val != condition.val) return val;\n    }\n    if (name == null) name = this.varType.tagName;\n    if (varType.type == Double.class) {\n      Double num = Clause.parseDouble(name, val);\n      if (isRuleVal) {\n        if (varType.min != null)\n          if (Double.compare(num, varType.min.doubleValue()) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + varType.min);\n        if (varType.max != null)\n          if (Double.compare(num, varType.max.doubleValue()) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + varType.max);\n      }\n      return num;\n    } else if (varType.type == Long.class) {\n      Long num = Clause.parseLong(name, val);\n      if (isRuleVal) {\n        if (varType.min != null)\n          if (num < varType.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + varType.min);\n        if (varType.max != null)\n          if (num > varType.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + varType.max);\n      }\n      return num;\n    } else if (varType.type == String.class) {\n      if (isRuleVal && !varType.vals.isEmpty() && !varType.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(varType.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb","date":1533364463,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/VariableBase#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/VariableBase#validate(String,Object,boolean).mjava","sourceNew":"  @Override\n  public Object validate(String name, Object val, boolean isRuleVal) {\n    if (val instanceof Condition) {\n      Condition condition = (Condition) val;\n      val = condition.op.readRuleValue(condition);\n      if (val != condition.val) return val;\n    }\n    if (name == null) name = this.varType.tagName;\n    if (varType.type == Double.class) {\n      Double num = Clause.parseDouble(name, val);\n      if (isRuleVal) {\n        if (varType.min != null)\n          if (Double.compare(num, varType.min.doubleValue()) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + varType.min);\n        if (varType.max != null)\n          if (Double.compare(num, varType.max.doubleValue()) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + varType.max);\n      }\n      return num;\n    } else if (varType.type == Long.class) {\n      Long num = Clause.parseLong(name, val);\n      if (isRuleVal) {\n        if (varType.min != null)\n          if (num < varType.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + varType.min);\n        if (varType.max != null)\n          if (num > varType.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + varType.max);\n      }\n      return num;\n    } else if (varType.type == String.class) {\n      if (isRuleVal && !varType.vals.isEmpty() && !varType.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(varType.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object validate(String name, Object val, boolean isRuleVal) {\n    if (val instanceof Clause.Condition) {\n      Clause.Condition condition = (Clause.Condition) val;\n      val = condition.op.readRuleValue(condition);\n      if (val != condition.val) return val;\n    }\n    if (name == null) name = this.varType.tagName;\n    if (varType.type == Double.class) {\n      Double num = Clause.parseDouble(name, val);\n      if (isRuleVal) {\n        if (varType.min != null)\n          if (Double.compare(num, varType.min.doubleValue()) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + varType.min);\n        if (varType.max != null)\n          if (Double.compare(num, varType.max.doubleValue()) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + varType.max);\n      }\n      return num;\n    } else if (varType.type == Long.class) {\n      Long num = Clause.parseLong(name, val);\n      if (isRuleVal) {\n        if (varType.min != null)\n          if (num < varType.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + varType.min);\n        if (varType.max != null)\n          if (num > varType.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + varType.max);\n      }\n      return num;\n    } else if (varType.type == String.class) {\n      if (isRuleVal && !varType.vals.isEmpty() && !varType.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(varType.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/VariableBase#validate(String,Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/VariableBase#validate(String,Object,boolean).mjava","sourceNew":"  @Override\n  public Object validate(String name, Object val, boolean isRuleVal) {\n    if (val instanceof Condition) {\n      Condition condition = (Condition) val;\n      val = condition.op.readRuleValue(condition);\n      if (val != condition.val) return val;\n    }\n    if (!isRuleVal && \"\".equals(val) && this.varType.type != String.class) val = -1;\n    if (name == null) name = this.varType.tagName;\n    if (varType.type == Double.class) {\n      Double num = Clause.parseDouble(name, val);\n      if (isRuleVal) {\n        if (varType.min != null)\n          if (Double.compare(num, varType.min.doubleValue()) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + varType.min);\n        if (varType.max != null)\n          if (Double.compare(num, varType.max.doubleValue()) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + varType.max);\n      }\n      return num;\n    } else if (varType.type == Long.class) {\n      Long num = Clause.parseLong(name, val);\n      if (isRuleVal) {\n        if (varType.min != null)\n          if (num < varType.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + varType.min);\n        if (varType.max != null)\n          if (num > varType.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + varType.max);\n      }\n      return num;\n    } else if (varType.type == String.class) {\n      if (isRuleVal && !varType.vals.isEmpty() && !varType.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(varType.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object validate(String name, Object val, boolean isRuleVal) {\n    if (val instanceof Condition) {\n      Condition condition = (Condition) val;\n      val = condition.op.readRuleValue(condition);\n      if (val != condition.val) return val;\n    }\n    if (name == null) name = this.varType.tagName;\n    if (varType.type == Double.class) {\n      Double num = Clause.parseDouble(name, val);\n      if (isRuleVal) {\n        if (varType.min != null)\n          if (Double.compare(num, varType.min.doubleValue()) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + varType.min);\n        if (varType.max != null)\n          if (Double.compare(num, varType.max.doubleValue()) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + varType.max);\n      }\n      return num;\n    } else if (varType.type == Long.class) {\n      Long num = Clause.parseLong(name, val);\n      if (isRuleVal) {\n        if (varType.min != null)\n          if (num < varType.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + varType.min);\n        if (varType.max != null)\n          if (num > varType.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + varType.max);\n      }\n      return num;\n    } else if (varType.type == String.class) {\n      if (isRuleVal && !varType.vals.isEmpty() && !varType.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(varType.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/VariableBase#validate(String,Object,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Object validate(String name, Object val, boolean isRuleVal) {\n    if (val instanceof Condition) {\n      Condition condition = (Condition) val;\n      val = condition.op.readRuleValue(condition);\n      if (val != condition.val) return val;\n    }\n    if (!isRuleVal && \"\".equals(val) && this.varType.type != String.class) val = -1;\n    if (name == null) name = this.varType.tagName;\n    if (varType.type == Double.class) {\n      Double num = Clause.parseDouble(name, val);\n      if (isRuleVal) {\n        if (varType.min != null)\n          if (Double.compare(num, varType.min.doubleValue()) == -1)\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + varType.min);\n        if (varType.max != null)\n          if (Double.compare(num, varType.max.doubleValue()) == 1)\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + varType.max);\n      }\n      return num;\n    } else if (varType.type == Long.class) {\n      Long num = Clause.parseLong(name, val);\n      if (isRuleVal) {\n        if (varType.min != null)\n          if (num < varType.min.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be greater than \" + varType.min);\n        if (varType.max != null)\n          if (num > varType.max.longValue())\n            throw new RuntimeException(name + \": \" + val + \" must be less than \" + varType.max);\n      }\n      return num;\n    } else if (varType.type == String.class) {\n      if (isRuleVal && !varType.vals.isEmpty() && !varType.vals.contains(val))\n        throw new RuntimeException(name + \": \" + val + \" must be one of \" + StrUtils.join(varType.vals, ','));\n      return val;\n    } else {\n      throw new RuntimeException(\"Invalid type \");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["16a22f8085bb46850c91784e94f7714345011404"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"16a22f8085bb46850c91784e94f7714345011404":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["16a22f8085bb46850c91784e94f7714345011404"],"16a22f8085bb46850c91784e94f7714345011404":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}