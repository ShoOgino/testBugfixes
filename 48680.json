{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#distanceContainsPt(double,double,double,double,double).mjava","commits":[{"id":"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d","date":1437181221,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#distanceContainsPt(double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  private static boolean distanceContainsPt(double lonA, double latA, double lonB, double latB, final double radius) {\n    final long hashedPtA = GeoUtils.mortonHash(lonA, latA);\n    lonA = GeoUtils.mortonUnhashLon(hashedPtA);\n    latA = GeoUtils.mortonUnhashLat(hashedPtA);\n    final long hashedPtB = GeoUtils.mortonHash(lonB, latB);\n    lonB = GeoUtils.mortonUnhashLon(hashedPtB);\n    latB = GeoUtils.mortonUnhashLat(hashedPtB);\n\n    return (SloppyMath.haversin(latA, lonA, latB, lonB)*1000.0 <= radius);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0222f69d35b097815cb3e3e4843fb6a10e4f80c7","date":1445287257,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#distanceContainsPt(double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#distanceContainsPt(double,double,double,double,double).mjava","sourceNew":"  private static boolean distanceContainsPt(double lonA, double latA, double lonB, double latB, final double radius,\n                                            final double maxRadius) {\n    final long hashedPtA = GeoUtils.mortonHash(lonA, latA);\n    lonA = GeoUtils.mortonUnhashLon(hashedPtA);\n    latA = GeoUtils.mortonUnhashLat(hashedPtA);\n    final long hashedPtB = GeoUtils.mortonHash(lonB, latB);\n    lonB = GeoUtils.mortonUnhashLon(hashedPtB);\n    latB = GeoUtils.mortonUnhashLat(hashedPtB);\n\n    if (maxRadius == 0) {\n      return (SloppyMath.haversin(latA, lonA, latB, lonB)*1000.0 <= radius);\n    }\n\n    return SloppyMath.haversin(latA, lonA, latB, lonB)*1000.0 >= radius\n        && SloppyMath.haversin(latA, lonA, latB, lonB)*1000.0 <= maxRadius;\n  }\n\n","sourceOld":"  private static boolean distanceContainsPt(double lonA, double latA, double lonB, double latB, final double radius) {\n    final long hashedPtA = GeoUtils.mortonHash(lonA, latA);\n    lonA = GeoUtils.mortonUnhashLon(hashedPtA);\n    latA = GeoUtils.mortonUnhashLat(hashedPtA);\n    final long hashedPtB = GeoUtils.mortonHash(lonB, latB);\n    lonB = GeoUtils.mortonUnhashLon(hashedPtB);\n    latB = GeoUtils.mortonUnhashLat(hashedPtB);\n\n    return (SloppyMath.haversin(latA, lonA, latB, lonB)*1000.0 <= radius);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0222f69d35b097815cb3e3e4843fb6a10e4f80c7":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0222f69d35b097815cb3e3e4843fb6a10e4f80c7"]},"commit2Childs":{"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["0222f69d35b097815cb3e3e4843fb6a10e4f80c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"0222f69d35b097815cb3e3e4843fb6a10e4f80c7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}