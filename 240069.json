{"path":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversin(double,double,double,double).mjava","commits":[{"id":"7d3e011ea56c513db42a835815963831340a78ea","date":1381092452,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversin(double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the distance between two points in decimal degrees.\n   * @param lat1 Latitude of the first point.\n   * @param lon1 Longitude of the first point.\n   * @param lat2 Latitude of the second point.\n   * @param lon2 Longitude of the second point.\n   * @return distance in kilometers.\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = (1 - cos(x1 - x2)) / 2;\n    double h2 = (1 - cos((lon1 - lon2) * TO_RADIANS)) / 2;\n    double h = h1 + cos(x1) * cos(x2) * h2;\n    return TO_KILOMETERS * 2 * asin(Math.min(1, Math.sqrt(h)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90469a87592301238a0408a0c4773a23b64cea18","date":1384963168,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversin(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversin(double,double,double,double).mjava","sourceNew":"  /**\n   * Returns the distance in kilometers between two points\n   * specified in decimal degrees (latitude/longitude).\n   * @param lat1 Latitude of the first point.\n   * @param lon1 Longitude of the first point.\n   * @param lat2 Latitude of the second point.\n   * @param lon2 Longitude of the second point.\n   * @return distance in kilometers.\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = (1 - cos(x1 - x2)) / 2;\n    double h2 = (1 - cos((lon1 - lon2) * TO_RADIANS)) / 2;\n    double h = h1 + cos(x1) * cos(x2) * h2;\n    return TO_KILOMETERS * 2 * asin(Math.min(1, Math.sqrt(h)));\n  }\n\n","sourceOld":"  /**\n   * Returns the distance between two points in decimal degrees.\n   * @param lat1 Latitude of the first point.\n   * @param lon1 Longitude of the first point.\n   * @param lat2 Latitude of the second point.\n   * @param lon2 Longitude of the second point.\n   * @return distance in kilometers.\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = (1 - cos(x1 - x2)) / 2;\n    double h2 = (1 - cos((lon1 - lon2) * TO_RADIANS)) / 2;\n    double h = h1 + cos(x1) * cos(x2) * h2;\n    return TO_KILOMETERS * 2 * asin(Math.min(1, Math.sqrt(h)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversin(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversin(double,double,double,double).mjava","sourceNew":"  /**\n   * Returns the distance in kilometers between two points\n   * specified in decimal degrees (latitude/longitude).\n   * @param lat1 Latitude of the first point.\n   * @param lon1 Longitude of the first point.\n   * @param lat2 Latitude of the second point.\n   * @param lon2 Longitude of the second point.\n   * @return distance in kilometers.\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = (1 - cos(x1 - x2)) / 2;\n    double h2 = (1 - cos((lon1 - lon2) * TO_RADIANS)) / 2;\n    double h = h1 + cos(x1) * cos(x2) * h2;\n    return TO_KILOMETERS * 2 * asin(Math.min(1, Math.sqrt(h)));\n  }\n\n","sourceOld":"  /**\n   * Returns the distance between two points in decimal degrees.\n   * @param lat1 Latitude of the first point.\n   * @param lon1 Longitude of the first point.\n   * @param lat2 Latitude of the second point.\n   * @param lon2 Longitude of the second point.\n   * @return distance in kilometers.\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = (1 - cos(x1 - x2)) / 2;\n    double h2 = (1 - cos((lon1 - lon2) * TO_RADIANS)) / 2;\n    double h = h1 + cos(x1) * cos(x2) * h2;\n    return TO_KILOMETERS * 2 * asin(Math.min(1, Math.sqrt(h)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b25cb7f94b5bbdc8f8ed0551a2ce24a40b94a4f","date":1389748847,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversin(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversin(double,double,double,double).mjava","sourceNew":"  /**\n   * Returns the distance in kilometers between two points\n   * specified in decimal degrees (latitude/longitude).\n   * @param lat1 Latitude of the first point.\n   * @param lon1 Longitude of the first point.\n   * @param lat2 Latitude of the second point.\n   * @param lon2 Longitude of the second point.\n   * @return distance in kilometers.\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = 1 - cos(x1 - x2);\n    double h2 = 1 - cos((lon1 - lon2) * TO_RADIANS);\n    double h = (h1 + cos(x1) * cos(x2) * h2) / 2;\n\n    double avgLat = Math.abs((x1 + x2) / 2d);\n    int index = (int)(avgLat * RADIUS_INDEXER + 0.5) % earthDiameterPerLatitude.length;\n    double radius = earthDiameterPerLatitude[index];\n\n    return radius * asin(Math.min(1, Math.sqrt(h)));\n    \n  }\n\n","sourceOld":"  /**\n   * Returns the distance in kilometers between two points\n   * specified in decimal degrees (latitude/longitude).\n   * @param lat1 Latitude of the first point.\n   * @param lon1 Longitude of the first point.\n   * @param lat2 Latitude of the second point.\n   * @param lon2 Longitude of the second point.\n   * @return distance in kilometers.\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = (1 - cos(x1 - x2)) / 2;\n    double h2 = (1 - cos((lon1 - lon2) * TO_RADIANS)) / 2;\n    double h = h1 + cos(x1) * cos(x2) * h2;\n    return TO_KILOMETERS * 2 * asin(Math.min(1, Math.sqrt(h)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b41ea682ebda6abb0f11da213732d82b8475c2ca","date":1392830933,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversin(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversin(double,double,double,double).mjava","sourceNew":"  /**\n   * Returns the distance in kilometers between two points\n   * specified in decimal degrees (latitude/longitude).\n   * @param lat1 Latitude of the first point.\n   * @param lon1 Longitude of the first point.\n   * @param lat2 Latitude of the second point.\n   * @param lon2 Longitude of the second point.\n   * @return distance in kilometers.\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = 1 - cos(x1 - x2);\n    double h2 = 1 - cos((lon1 - lon2) * TO_RADIANS);\n    double h = (h1 + cos(x1) * cos(x2) * h2) / 2;\n\n    double avgLat = (x1 + x2) / 2d;\n    double diameter = earthDiameter(avgLat);\n\n    return diameter * asin(Math.min(1, Math.sqrt(h)));\n    \n  }\n\n","sourceOld":"  /**\n   * Returns the distance in kilometers between two points\n   * specified in decimal degrees (latitude/longitude).\n   * @param lat1 Latitude of the first point.\n   * @param lon1 Longitude of the first point.\n   * @param lat2 Latitude of the second point.\n   * @param lon2 Longitude of the second point.\n   * @return distance in kilometers.\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = 1 - cos(x1 - x2);\n    double h2 = 1 - cos((lon1 - lon2) * TO_RADIANS);\n    double h = (h1 + cos(x1) * cos(x2) * h2) / 2;\n\n    double avgLat = Math.abs((x1 + x2) / 2d);\n    int index = (int)(avgLat * RADIUS_INDEXER + 0.5) % earthDiameterPerLatitude.length;\n    double radius = earthDiameterPerLatitude[index];\n\n    return radius * asin(Math.min(1, Math.sqrt(h)));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversin(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversin(double,double,double,double).mjava","sourceNew":"  /**\n   * Returns the Haversine distance in kilometers between two points\n   * specified in decimal degrees (latitude/longitude).  This works correctly\n   * even if the dateline is between the two points.\n   *\n   * @param lat1 Latitude of the first point.\n   * @param lon1 Longitude of the first point.\n   * @param lat2 Latitude of the second point.\n   * @param lon2 Longitude of the second point.\n   * @return distance in kilometers.\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = 1 - cos(x1 - x2);\n    double h2 = 1 - cos((lon1 - lon2) * TO_RADIANS);\n    double h = (h1 + cos(x1) * cos(x2) * h2) / 2;\n\n    double avgLat = (x1 + x2) / 2d;\n    double diameter = earthDiameter(avgLat);\n\n    return diameter * asin(Math.min(1, Math.sqrt(h)));\n    \n  }\n\n","sourceOld":"  /**\n   * Returns the distance in kilometers between two points\n   * specified in decimal degrees (latitude/longitude).\n   * @param lat1 Latitude of the first point.\n   * @param lon1 Longitude of the first point.\n   * @param lat2 Latitude of the second point.\n   * @param lon2 Longitude of the second point.\n   * @return distance in kilometers.\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = 1 - cos(x1 - x2);\n    double h2 = 1 - cos((lon1 - lon2) * TO_RADIANS);\n    double h = (h1 + cos(x1) * cos(x2) * h2) / 2;\n\n    double avgLat = (x1 + x2) / 2d;\n    double diameter = earthDiameter(avgLat);\n\n    return diameter * asin(Math.min(1, Math.sqrt(h)));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversinKilometers(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversin(double,double,double,double).mjava","sourceNew":"  /**\n   * Returns the Haversine distance in kilometers between two points\n   * specified in decimal degrees (latitude/longitude).  This works correctly\n   * even if the dateline is between the two points.\n   *\n   * @param lat1 Latitude of the first point.\n   * @param lon1 Longitude of the first point.\n   * @param lat2 Latitude of the second point.\n   * @param lon2 Longitude of the second point.\n   * @return distance in kilometers.\n   * @deprecated Use {@link #haversinMeters(double, double, double, double) instead}\n   */\n  @Deprecated\n  public static double haversinKilometers(double lat1, double lon1, double lat2, double lon2) {\n    double h = haversinSortKey(lat1, lon1, lat2, lon2);\n    return TO_KILOMETERS * 2 * asin(Math.min(1, Math.sqrt(h * 0.5)));\n  }\n\n","sourceOld":"  /**\n   * Returns the Haversine distance in kilometers between two points\n   * specified in decimal degrees (latitude/longitude).  This works correctly\n   * even if the dateline is between the two points.\n   *\n   * @param lat1 Latitude of the first point.\n   * @param lon1 Longitude of the first point.\n   * @param lat2 Latitude of the second point.\n   * @param lon2 Longitude of the second point.\n   * @return distance in kilometers.\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = 1 - cos(x1 - x2);\n    double h2 = 1 - cos((lon1 - lon2) * TO_RADIANS);\n    double h = (h1 + cos(x1) * cos(x2) * h2) / 2;\n\n    double avgLat = (x1 + x2) / 2d;\n    double diameter = earthDiameter(avgLat);\n\n    return diameter * asin(Math.min(1, Math.sqrt(h)));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversinMeters(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SloppyMath#haversin(double,double,double,double).mjava","sourceNew":"  /**\n   * Returns the Haversine distance in meters between two points\n   * specified in decimal degrees (latitude/longitude).  This works correctly\n   * even if the dateline is between the two points.\n   * <p>\n   * Error is around 1E-5 (0.01mm) from the actual haversine distance.\n   *\n   * @param lat1 Latitude of the first point.\n   * @param lon1 Longitude of the first point.\n   * @param lat2 Latitude of the second point.\n   * @param lon2 Longitude of the second point.\n   * @return distance in meters.\n   */\n  public static double haversinMeters(double lat1, double lon1, double lat2, double lon2) {\n    return haversinMeters(haversinSortKey(lat1, lon1, lat2, lon2));\n  }\n\n","sourceOld":"  /**\n   * Returns the Haversine distance in kilometers between two points\n   * specified in decimal degrees (latitude/longitude).  This works correctly\n   * even if the dateline is between the two points.\n   *\n   * @param lat1 Latitude of the first point.\n   * @param lon1 Longitude of the first point.\n   * @param lat2 Latitude of the second point.\n   * @param lon2 Longitude of the second point.\n   * @return distance in kilometers.\n   */\n  public static double haversin(double lat1, double lon1, double lat2, double lon2) {\n    double x1 = lat1 * TO_RADIANS;\n    double x2 = lat2 * TO_RADIANS;\n    double h1 = 1 - cos(x1 - x2);\n    double h2 = 1 - cos((lon1 - lon2) * TO_RADIANS);\n    double h = (h1 + cos(x1) * cos(x2) * h2) / 2;\n\n    double avgLat = (x1 + x2) / 2d;\n    double diameter = earthDiameter(avgLat);\n\n    return diameter * asin(Math.min(1, Math.sqrt(h)));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d3e011ea56c513db42a835815963831340a78ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b25cb7f94b5bbdc8f8ed0551a2ce24a40b94a4f":["90469a87592301238a0408a0c4773a23b64cea18"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"b41ea682ebda6abb0f11da213732d82b8475c2ca":["8b25cb7f94b5bbdc8f8ed0551a2ce24a40b94a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"90469a87592301238a0408a0c4773a23b64cea18":["7d3e011ea56c513db42a835815963831340a78ea"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["b41ea682ebda6abb0f11da213732d82b8475c2ca"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["7d3e011ea56c513db42a835815963831340a78ea","90469a87592301238a0408a0c4773a23b64cea18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec60431d008a694828dacb4bc3cda775b6c44a9f"]},"commit2Childs":{"7d3e011ea56c513db42a835815963831340a78ea":["90469a87592301238a0408a0c4773a23b64cea18","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"8b25cb7f94b5bbdc8f8ed0551a2ce24a40b94a4f":["b41ea682ebda6abb0f11da213732d82b8475c2ca"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b41ea682ebda6abb0f11da213732d82b8475c2ca":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d3e011ea56c513db42a835815963831340a78ea"],"90469a87592301238a0408a0c4773a23b64cea18":["8b25cb7f94b5bbdc8f8ed0551a2ce24a40b94a4f","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}