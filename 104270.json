{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSuffixExceptions#RuleWithSuffixExceptions(String,int,String,String[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSuffixExceptions#RuleWithSuffixExceptions(String,int,String,String[]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSuffixExceptions#RuleWithSuffixExceptions(String,int,String,String[]).mjava","sourceNew":"    public RuleWithSuffixExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          System.err.println(\"warning: useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new char[exceptions.length][];\n      for (int i = 0; i < exceptions.length; i++)\n        this.exceptions[i] = exceptions[i].toCharArray();\n    }\n\n","sourceOld":"    public RuleWithSuffixExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          System.err.println(\"warning: useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new char[exceptions.length][];\n      for (int i = 0; i < exceptions.length; i++)\n        this.exceptions[i] = exceptions[i].toCharArray();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","date":1342021960,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSuffixExceptions#RuleWithSuffixExceptions(String,int,String,String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSuffixExceptions#RuleWithSuffixExceptions(String,int,String,String[]).mjava","sourceNew":"    public RuleWithSuffixExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          throw new RuntimeException(\"warning: useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new char[exceptions.length][];\n      for (int i = 0; i < exceptions.length; i++)\n        this.exceptions[i] = exceptions[i].toCharArray();\n    }\n\n","sourceOld":"    public RuleWithSuffixExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          System.err.println(\"warning: useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new char[exceptions.length][];\n      for (int i = 0; i < exceptions.length; i++)\n        this.exceptions[i] = exceptions[i].toCharArray();\n    }\n\n","bugFix":["81d6d41a6e097c5c1e2c81055a12d7f24e147ec7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSuffixExceptions#RuleWithSuffixExceptions(String,int,String,String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSuffixExceptions#RuleWithSuffixExceptions(String,int,String,String[]).mjava","sourceNew":"    public RuleWithSuffixExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          throw new RuntimeException(\"warning: useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new char[exceptions.length][];\n      for (int i = 0; i < exceptions.length; i++)\n        this.exceptions[i] = exceptions[i].toCharArray();\n    }\n\n","sourceOld":"    public RuleWithSuffixExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          System.err.println(\"warning: useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new char[exceptions.length][];\n      for (int i = 0; i < exceptions.length; i++)\n        this.exceptions[i] = exceptions[i].toCharArray();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSuffixExceptions#RuleWithSuffixExceptions(String,int,String,String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.RuleWithSuffixExceptions#RuleWithSuffixExceptions(String,int,String,String[]).mjava","sourceNew":"    public RuleWithSuffixExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          throw new RuntimeException(\"warning: useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new char[exceptions.length][];\n      for (int i = 0; i < exceptions.length; i++)\n        this.exceptions[i] = exceptions[i].toCharArray();\n    }\n\n","sourceOld":"    public RuleWithSuffixExceptions(String suffix, int min, String replacement,\n        String[] exceptions) {\n      super(suffix, min, replacement);\n      for (int i = 0; i < exceptions.length; i++) {\n        if (!exceptions[i].endsWith(suffix))\n          System.err.println(\"warning: useless exception '\" + exceptions[i] + \"' does not end with '\" + suffix + \"'\");\n      }\n      this.exceptions = new char[exceptions.length][];\n      for (int i = 0; i < exceptions.length; i++)\n        this.exceptions[i] = exceptions[i].toCharArray();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"]},"commit2Childs":{"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}