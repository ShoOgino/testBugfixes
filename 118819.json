{"path":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testReshapeReindexing().mjava","commits":[{"id":"dad6a48950aafc9c2f5dc54740f8c6ab81304203","date":1552999379,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testReshapeReindexing().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReshapeReindexing() throws Exception {\n    final String sourceCollection = \"reshapeReindexing\";\n    final String targetCollection = \"reshapeReindexingTarget\";\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\n            \"id\", String.valueOf(i),\n            \"string_s\", String.valueOf(i),\n            \"remove_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection)\n        .setCollectionParam(ZkStateReader.NUM_SHARDS_PROP, 3)\n        .setCollectionParam(ZkStateReader.REPLICATION_FACTOR, 1)\n        .setCollectionParam(\"router.name\", ImplicitDocRouter.NAME)\n        .setCollectionParam(\"shards\", \"foo,bar,baz\")\n        .setCollectionParam(\"fl\", \"id,string_s\")\n        .setCollectionParam(\"q\", \"id:10*\");\n    req.process(solrClient);\n\n    CloudTestUtils.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    // 10 and 100-109\n    assertEquals(\"copied num docs\", 11, rsp.getResults().getNumFound());\n    // verify the correct fields exist\n    for (SolrDocument doc : rsp.getResults()) {\n      assertNotNull(doc.getFieldValue(\"id\"));\n      assertNotNull(doc.getFieldValue(\"string_s\"));\n      assertNull(doc.getFieldValue(\"remove_s\"));\n    }\n\n    // check the shape of the new collection\n    ClusterState clusterState = solrClient.getClusterStateProvider().getClusterState();\n    List<String> aliases = solrClient.getZkStateReader().getAliases().resolveAliases(targetCollection);\n    assertFalse(aliases.isEmpty());\n    String realTargetCollection = aliases.get(0);\n    DocCollection coll = clusterState.getCollection(realTargetCollection);\n    assertNotNull(coll);\n    assertEquals(3, coll.getSlices().size());\n    assertNotNull(\"foo\", coll.getSlice(\"foo\"));\n    assertNotNull(\"bar\", coll.getSlice(\"bar\"));\n    assertNotNull(\"baz\", coll.getSlice(\"baz\"));\n    assertEquals(Integer.valueOf(1), coll.getReplicationFactor());\n    assertEquals(ImplicitDocRouter.NAME, coll.getRouter().getName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testReshapeReindexing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testReshapeReindexing().mjava","sourceNew":"  @Test\n  public void testReshapeReindexing() throws Exception {\n    final String sourceCollection = \"reshapeReindexing\";\n    final String targetCollection = \"reshapeReindexingTarget\";\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\n            \"id\", String.valueOf(i),\n            \"string_s\", String.valueOf(i),\n            \"remove_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection)\n        .setCollectionParam(ZkStateReader.NUM_SHARDS_PROP, 3)\n        .setCollectionParam(ZkStateReader.REPLICATION_FACTOR, 1)\n        .setCollectionParam(\"router.name\", ImplicitDocRouter.NAME)\n        .setCollectionParam(\"shards\", \"foo,bar,baz\")\n        .setCollectionParam(\"fl\", \"id,string_s\")\n        .setCollectionParam(\"q\", \"id:10*\");\n    req.process(solrClient);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    // 10 and 100-109\n    assertEquals(\"copied num docs\", 11, rsp.getResults().getNumFound());\n    // verify the correct fields exist\n    for (SolrDocument doc : rsp.getResults()) {\n      assertNotNull(doc.getFieldValue(\"id\"));\n      assertNotNull(doc.getFieldValue(\"string_s\"));\n      assertNull(doc.getFieldValue(\"remove_s\"));\n    }\n\n    // check the shape of the new collection\n    ClusterState clusterState = solrClient.getClusterStateProvider().getClusterState();\n    List<String> aliases = solrClient.getZkStateReader().getAliases().resolveAliases(targetCollection);\n    assertFalse(aliases.isEmpty());\n    String realTargetCollection = aliases.get(0);\n    DocCollection coll = clusterState.getCollection(realTargetCollection);\n    assertNotNull(coll);\n    assertEquals(3, coll.getSlices().size());\n    assertNotNull(\"foo\", coll.getSlice(\"foo\"));\n    assertNotNull(\"bar\", coll.getSlice(\"bar\"));\n    assertNotNull(\"baz\", coll.getSlice(\"baz\"));\n    assertEquals(Integer.valueOf(1), coll.getReplicationFactor());\n    assertEquals(ImplicitDocRouter.NAME, coll.getRouter().getName());\n  }\n\n","sourceOld":"  @Test\n  public void testReshapeReindexing() throws Exception {\n    final String sourceCollection = \"reshapeReindexing\";\n    final String targetCollection = \"reshapeReindexingTarget\";\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\n            \"id\", String.valueOf(i),\n            \"string_s\", String.valueOf(i),\n            \"remove_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection)\n        .setCollectionParam(ZkStateReader.NUM_SHARDS_PROP, 3)\n        .setCollectionParam(ZkStateReader.REPLICATION_FACTOR, 1)\n        .setCollectionParam(\"router.name\", ImplicitDocRouter.NAME)\n        .setCollectionParam(\"shards\", \"foo,bar,baz\")\n        .setCollectionParam(\"fl\", \"id,string_s\")\n        .setCollectionParam(\"q\", \"id:10*\");\n    req.process(solrClient);\n\n    CloudTestUtils.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    // 10 and 100-109\n    assertEquals(\"copied num docs\", 11, rsp.getResults().getNumFound());\n    // verify the correct fields exist\n    for (SolrDocument doc : rsp.getResults()) {\n      assertNotNull(doc.getFieldValue(\"id\"));\n      assertNotNull(doc.getFieldValue(\"string_s\"));\n      assertNull(doc.getFieldValue(\"remove_s\"));\n    }\n\n    // check the shape of the new collection\n    ClusterState clusterState = solrClient.getClusterStateProvider().getClusterState();\n    List<String> aliases = solrClient.getZkStateReader().getAliases().resolveAliases(targetCollection);\n    assertFalse(aliases.isEmpty());\n    String realTargetCollection = aliases.get(0);\n    DocCollection coll = clusterState.getCollection(realTargetCollection);\n    assertNotNull(coll);\n    assertEquals(3, coll.getSlices().size());\n    assertNotNull(\"foo\", coll.getSlice(\"foo\"));\n    assertNotNull(\"bar\", coll.getSlice(\"bar\"));\n    assertNotNull(\"baz\", coll.getSlice(\"baz\"));\n    assertEquals(Integer.valueOf(1), coll.getReplicationFactor());\n    assertEquals(ImplicitDocRouter.NAME, coll.getRouter().getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c","date":1557431147,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testReshapeReindexing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testReshapeReindexing().mjava","sourceNew":"  @Test\n  public void testReshapeReindexing() throws Exception {\n    final String sourceCollection = \"reshapeReindexing\";\n    final String targetCollection = \"reshapeReindexingTarget\";\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\n            \"id\", String.valueOf(i),\n            \"string_s\", String.valueOf(i),\n            \"remove_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection)\n        .setCollectionParam(ZkStateReader.NUM_SHARDS_PROP, 3)\n        .setCollectionParam(ZkStateReader.REPLICATION_FACTOR, 1)\n        .setCollectionParam(\"router.name\", ImplicitDocRouter.NAME)\n        .setCollectionParam(\"shards\", \"foo,bar,baz\")\n        .setCollectionParam(\"fl\", \"id,string_s\")\n        .setCollectionParam(\"q\", \"id:10*\");\n    req.process(solrClient);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", 11, \"*:*\",\n        \"ReindexCollectionTest.testReshapeReindexTarget\", true);\n    // 10 and 100-109\n    assertEquals(\"copied num docs\", 11, rsp.getResults().getNumFound());\n    // verify the correct fields exist\n    for (SolrDocument doc : rsp.getResults()) {\n      assertNotNull(doc.getFieldValue(\"id\"));\n      assertNotNull(doc.getFieldValue(\"string_s\"));\n      assertNull(doc.getFieldValue(\"remove_s\"));\n    }\n\n    // check the shape of the new collection\n    ClusterState clusterState = solrClient.getClusterStateProvider().getClusterState();\n    List<String> aliases = solrClient.getZkStateReader().getAliases().resolveAliases(targetCollection);\n    assertFalse(aliases.isEmpty());\n    String realTargetCollection = aliases.get(0);\n    DocCollection coll = clusterState.getCollection(realTargetCollection);\n    assertNotNull(coll);\n    assertEquals(3, coll.getSlices().size());\n    assertNotNull(\"foo\", coll.getSlice(\"foo\"));\n    assertNotNull(\"bar\", coll.getSlice(\"bar\"));\n    assertNotNull(\"baz\", coll.getSlice(\"baz\"));\n    assertEquals(Integer.valueOf(1), coll.getReplicationFactor());\n    assertEquals(ImplicitDocRouter.NAME, coll.getRouter().getName());\n  }\n\n","sourceOld":"  @Test\n  public void testReshapeReindexing() throws Exception {\n    final String sourceCollection = \"reshapeReindexing\";\n    final String targetCollection = \"reshapeReindexingTarget\";\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\n            \"id\", String.valueOf(i),\n            \"string_s\", String.valueOf(i),\n            \"remove_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection)\n        .setCollectionParam(ZkStateReader.NUM_SHARDS_PROP, 3)\n        .setCollectionParam(ZkStateReader.REPLICATION_FACTOR, 1)\n        .setCollectionParam(\"router.name\", ImplicitDocRouter.NAME)\n        .setCollectionParam(\"shards\", \"foo,bar,baz\")\n        .setCollectionParam(\"fl\", \"id,string_s\")\n        .setCollectionParam(\"q\", \"id:10*\");\n    req.process(solrClient);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    // 10 and 100-109\n    assertEquals(\"copied num docs\", 11, rsp.getResults().getNumFound());\n    // verify the correct fields exist\n    for (SolrDocument doc : rsp.getResults()) {\n      assertNotNull(doc.getFieldValue(\"id\"));\n      assertNotNull(doc.getFieldValue(\"string_s\"));\n      assertNull(doc.getFieldValue(\"remove_s\"));\n    }\n\n    // check the shape of the new collection\n    ClusterState clusterState = solrClient.getClusterStateProvider().getClusterState();\n    List<String> aliases = solrClient.getZkStateReader().getAliases().resolveAliases(targetCollection);\n    assertFalse(aliases.isEmpty());\n    String realTargetCollection = aliases.get(0);\n    DocCollection coll = clusterState.getCollection(realTargetCollection);\n    assertNotNull(coll);\n    assertEquals(3, coll.getSlices().size());\n    assertNotNull(\"foo\", coll.getSlice(\"foo\"));\n    assertNotNull(\"bar\", coll.getSlice(\"bar\"));\n    assertNotNull(\"baz\", coll.getSlice(\"baz\"));\n    assertEquals(Integer.valueOf(1), coll.getReplicationFactor());\n    assertEquals(ImplicitDocRouter.NAME, coll.getRouter().getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62facbbf49f5753b766d5d66140d1881c73e352f","date":1557682606,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testReshapeReindexing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testReshapeReindexing().mjava","sourceNew":"  @Test\n  public void testReshapeReindexing() throws Exception {\n    final String sourceCollection = \"reshapeReindexing\";\n    final String targetCollection = \"reshapeReindexingTarget\";\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\n            \"id\", String.valueOf(i),\n            \"string_s\", String.valueOf(i),\n            \"remove_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection)\n        .setCollectionParam(ZkStateReader.NUM_SHARDS_PROP, 3)\n        .setCollectionParam(ZkStateReader.REPLICATION_FACTOR, 1)\n        .setCollectionParam(\"router.name\", ImplicitDocRouter.NAME)\n        .setCollectionParam(\"shards\", \"foo,bar,baz\")\n        .setCollectionParam(\"fl\", \"id,string_s\")\n        .setCollectionParam(\"q\", \"id:10*\");\n    req.process(solrClient);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", 11, \"*:*\",\n        \"ReindexCollectionTest.testReshapeReindexTarget\", true);\n\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n\n    // 10 and 100-109\n    assertEquals(\"copied num docs\", 11, rsp.getResults().getNumFound());\n    // verify the correct fields exist\n    for (SolrDocument doc : rsp.getResults()) {\n      assertNotNull(doc.getFieldValue(\"id\"));\n      assertNotNull(doc.getFieldValue(\"string_s\"));\n      assertNull(doc.getFieldValue(\"remove_s\"));\n    }\n\n    // check the shape of the new collection\n    ClusterState clusterState = solrClient.getClusterStateProvider().getClusterState();\n    List<String> aliases = solrClient.getZkStateReader().getAliases().resolveAliases(targetCollection);\n    assertFalse(aliases.isEmpty());\n    String realTargetCollection = aliases.get(0);\n    DocCollection coll = clusterState.getCollection(realTargetCollection);\n    assertNotNull(coll);\n    assertEquals(3, coll.getSlices().size());\n    assertNotNull(\"foo\", coll.getSlice(\"foo\"));\n    assertNotNull(\"bar\", coll.getSlice(\"bar\"));\n    assertNotNull(\"baz\", coll.getSlice(\"baz\"));\n    assertEquals(Integer.valueOf(1), coll.getReplicationFactor());\n    assertEquals(ImplicitDocRouter.NAME, coll.getRouter().getName());\n  }\n\n","sourceOld":"  @Test\n  public void testReshapeReindexing() throws Exception {\n    final String sourceCollection = \"reshapeReindexing\";\n    final String targetCollection = \"reshapeReindexingTarget\";\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\n            \"id\", String.valueOf(i),\n            \"string_s\", String.valueOf(i),\n            \"remove_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection)\n        .setCollectionParam(ZkStateReader.NUM_SHARDS_PROP, 3)\n        .setCollectionParam(ZkStateReader.REPLICATION_FACTOR, 1)\n        .setCollectionParam(\"router.name\", ImplicitDocRouter.NAME)\n        .setCollectionParam(\"shards\", \"foo,bar,baz\")\n        .setCollectionParam(\"fl\", \"id,string_s\")\n        .setCollectionParam(\"q\", \"id:10*\");\n    req.process(solrClient);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", 11, \"*:*\",\n        \"ReindexCollectionTest.testReshapeReindexTarget\", true);\n    // 10 and 100-109\n    assertEquals(\"copied num docs\", 11, rsp.getResults().getNumFound());\n    // verify the correct fields exist\n    for (SolrDocument doc : rsp.getResults()) {\n      assertNotNull(doc.getFieldValue(\"id\"));\n      assertNotNull(doc.getFieldValue(\"string_s\"));\n      assertNull(doc.getFieldValue(\"remove_s\"));\n    }\n\n    // check the shape of the new collection\n    ClusterState clusterState = solrClient.getClusterStateProvider().getClusterState();\n    List<String> aliases = solrClient.getZkStateReader().getAliases().resolveAliases(targetCollection);\n    assertFalse(aliases.isEmpty());\n    String realTargetCollection = aliases.get(0);\n    DocCollection coll = clusterState.getCollection(realTargetCollection);\n    assertNotNull(coll);\n    assertEquals(3, coll.getSlices().size());\n    assertNotNull(\"foo\", coll.getSlice(\"foo\"));\n    assertNotNull(\"bar\", coll.getSlice(\"bar\"));\n    assertNotNull(\"baz\", coll.getSlice(\"baz\"));\n    assertEquals(Integer.valueOf(1), coll.getReplicationFactor());\n    assertEquals(ImplicitDocRouter.NAME, coll.getRouter().getName());\n  }\n\n","bugFix":null,"bugIntro":["3821108e77348b1cdb6baf5422727f926ba7af61"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b137ac261d96fa4d6176349645cfc0f68b9ba1e1","date":1558626214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testReshapeReindexing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testReshapeReindexing().mjava","sourceNew":"  @Test\n  public void testReshapeReindexing() throws Exception {\n    final String sourceCollection = \"reshapeReindexing\";\n    final String targetCollection = \"reshapeReindexingTarget\";\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\n            \"id\", String.valueOf(i),\n            \"string_s\", String.valueOf(i),\n            \"remove_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection)\n        .setCollectionParam(ZkStateReader.NUM_SHARDS_PROP, 3)\n        .setCollectionParam(ZkStateReader.REPLICATION_FACTOR, 1)\n        .setCollectionParam(\"router.name\", ImplicitDocRouter.NAME)\n        .setCollectionParam(\"shards\", \"foo,bar,baz\")\n        .setCollectionParam(\"fl\", \"id,string_s\")\n        .setCollectionParam(\"q\", \"id:10*\");\n    req.process(solrClient);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", 11, \"*:*\",\n        \"ReindexCollectionTest.testReshapeReindexTarget\", false);\n\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n\n    // 10 and 100-109\n    assertEquals(\"copied num docs\", 11, rsp.getResults().getNumFound());\n    // verify the correct fields exist\n    for (SolrDocument doc : rsp.getResults()) {\n      assertNotNull(doc.getFieldValue(\"id\"));\n      assertNotNull(doc.getFieldValue(\"string_s\"));\n      assertNull(doc.getFieldValue(\"remove_s\"));\n    }\n\n    // check the shape of the new collection\n    ClusterState clusterState = solrClient.getClusterStateProvider().getClusterState();\n    List<String> aliases = solrClient.getZkStateReader().getAliases().resolveAliases(targetCollection);\n    assertFalse(aliases.isEmpty());\n    String realTargetCollection = aliases.get(0);\n    DocCollection coll = clusterState.getCollection(realTargetCollection);\n    assertNotNull(coll);\n    assertEquals(3, coll.getSlices().size());\n    assertNotNull(\"foo\", coll.getSlice(\"foo\"));\n    assertNotNull(\"bar\", coll.getSlice(\"bar\"));\n    assertNotNull(\"baz\", coll.getSlice(\"baz\"));\n    assertEquals(Integer.valueOf(1), coll.getReplicationFactor());\n    assertEquals(ImplicitDocRouter.NAME, coll.getRouter().getName());\n  }\n\n","sourceOld":"  @Test\n  public void testReshapeReindexing() throws Exception {\n    final String sourceCollection = \"reshapeReindexing\";\n    final String targetCollection = \"reshapeReindexingTarget\";\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\n            \"id\", String.valueOf(i),\n            \"string_s\", String.valueOf(i),\n            \"remove_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection)\n        .setCollectionParam(ZkStateReader.NUM_SHARDS_PROP, 3)\n        .setCollectionParam(ZkStateReader.REPLICATION_FACTOR, 1)\n        .setCollectionParam(\"router.name\", ImplicitDocRouter.NAME)\n        .setCollectionParam(\"shards\", \"foo,bar,baz\")\n        .setCollectionParam(\"fl\", \"id,string_s\")\n        .setCollectionParam(\"q\", \"id:10*\");\n    req.process(solrClient);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", 11, \"*:*\",\n        \"ReindexCollectionTest.testReshapeReindexTarget\", true);\n\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n\n    // 10 and 100-109\n    assertEquals(\"copied num docs\", 11, rsp.getResults().getNumFound());\n    // verify the correct fields exist\n    for (SolrDocument doc : rsp.getResults()) {\n      assertNotNull(doc.getFieldValue(\"id\"));\n      assertNotNull(doc.getFieldValue(\"string_s\"));\n      assertNull(doc.getFieldValue(\"remove_s\"));\n    }\n\n    // check the shape of the new collection\n    ClusterState clusterState = solrClient.getClusterStateProvider().getClusterState();\n    List<String> aliases = solrClient.getZkStateReader().getAliases().resolveAliases(targetCollection);\n    assertFalse(aliases.isEmpty());\n    String realTargetCollection = aliases.get(0);\n    DocCollection coll = clusterState.getCollection(realTargetCollection);\n    assertNotNull(coll);\n    assertEquals(3, coll.getSlices().size());\n    assertNotNull(\"foo\", coll.getSlice(\"foo\"));\n    assertNotNull(\"bar\", coll.getSlice(\"bar\"));\n    assertNotNull(\"baz\", coll.getSlice(\"baz\"));\n    assertEquals(Integer.valueOf(1), coll.getReplicationFactor());\n    assertEquals(ImplicitDocRouter.NAME, coll.getRouter().getName());\n  }\n\n","bugFix":null,"bugIntro":["3821108e77348b1cdb6baf5422727f926ba7af61"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3821108e77348b1cdb6baf5422727f926ba7af61","date":1582300636,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testReshapeReindexing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testReshapeReindexing().mjava","sourceNew":"  @Test\n  public void testReshapeReindexing() throws Exception {\n    final String sourceCollection = \"reshapeReindexing\";\n    final String targetCollection = \"reshapeReindexingTarget\";\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\n            \"id\", String.valueOf(i),\n            \"string_s\", String.valueOf(i),\n            \"remove_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection)\n        .setCollectionParam(ZkStateReader.NUM_SHARDS_PROP, 3)\n        .setCollectionParam(ZkStateReader.REPLICATION_FACTOR, 1)\n        .setCollectionParam(\"router.name\", ImplicitDocRouter.NAME)\n        .setCollectionParam(\"shards\", \"foo,bar,baz\")\n        .setCollectionParam(\"fl\", \"id,string_s\")\n        .setCollectionParam(\"q\", \"id:10*\");\n    req.process(solrClient);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n\n    // 10 and 100-109\n    assertEquals(\"copied num docs\", 11, rsp.getResults().getNumFound());\n    // verify the correct fields exist\n    for (SolrDocument doc : rsp.getResults()) {\n      assertNotNull(doc.getFieldValue(\"id\"));\n      assertNotNull(doc.getFieldValue(\"string_s\"));\n      assertNull(doc.getFieldValue(\"remove_s\"));\n    }\n\n    // check the shape of the new collection\n    ClusterState clusterState = solrClient.getClusterStateProvider().getClusterState();\n    List<String> aliases = solrClient.getZkStateReader().getAliases().resolveAliases(targetCollection);\n    assertFalse(aliases.isEmpty());\n    String realTargetCollection = aliases.get(0);\n    DocCollection coll = clusterState.getCollection(realTargetCollection);\n    assertNotNull(coll);\n    assertEquals(3, coll.getSlices().size());\n    assertNotNull(\"foo\", coll.getSlice(\"foo\"));\n    assertNotNull(\"bar\", coll.getSlice(\"bar\"));\n    assertNotNull(\"baz\", coll.getSlice(\"baz\"));\n    assertEquals(Integer.valueOf(1), coll.getReplicationFactor());\n    assertEquals(ImplicitDocRouter.NAME, coll.getRouter().getName());\n  }\n\n","sourceOld":"  @Test\n  public void testReshapeReindexing() throws Exception {\n    final String sourceCollection = \"reshapeReindexing\";\n    final String targetCollection = \"reshapeReindexingTarget\";\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\n            \"id\", String.valueOf(i),\n            \"string_s\", String.valueOf(i),\n            \"remove_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection)\n        .setCollectionParam(ZkStateReader.NUM_SHARDS_PROP, 3)\n        .setCollectionParam(ZkStateReader.REPLICATION_FACTOR, 1)\n        .setCollectionParam(\"router.name\", ImplicitDocRouter.NAME)\n        .setCollectionParam(\"shards\", \"foo,bar,baz\")\n        .setCollectionParam(\"fl\", \"id,string_s\")\n        .setCollectionParam(\"q\", \"id:10*\");\n    req.process(solrClient);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", targetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", 11, \"*:*\",\n        \"ReindexCollectionTest.testReshapeReindexTarget\", false);\n\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n\n    // 10 and 100-109\n    assertEquals(\"copied num docs\", 11, rsp.getResults().getNumFound());\n    // verify the correct fields exist\n    for (SolrDocument doc : rsp.getResults()) {\n      assertNotNull(doc.getFieldValue(\"id\"));\n      assertNotNull(doc.getFieldValue(\"string_s\"));\n      assertNull(doc.getFieldValue(\"remove_s\"));\n    }\n\n    // check the shape of the new collection\n    ClusterState clusterState = solrClient.getClusterStateProvider().getClusterState();\n    List<String> aliases = solrClient.getZkStateReader().getAliases().resolveAliases(targetCollection);\n    assertFalse(aliases.isEmpty());\n    String realTargetCollection = aliases.get(0);\n    DocCollection coll = clusterState.getCollection(realTargetCollection);\n    assertNotNull(coll);\n    assertEquals(3, coll.getSlices().size());\n    assertNotNull(\"foo\", coll.getSlice(\"foo\"));\n    assertNotNull(\"bar\", coll.getSlice(\"bar\"));\n    assertNotNull(\"baz\", coll.getSlice(\"baz\"));\n    assertEquals(Integer.valueOf(1), coll.getReplicationFactor());\n    assertEquals(ImplicitDocRouter.NAME, coll.getRouter().getName());\n  }\n\n","bugFix":["b137ac261d96fa4d6176349645cfc0f68b9ba1e1","62facbbf49f5753b766d5d66140d1881c73e352f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3821108e77348b1cdb6baf5422727f926ba7af61":["b137ac261d96fa4d6176349645cfc0f68b9ba1e1"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b137ac261d96fa4d6176349645cfc0f68b9ba1e1":["62facbbf49f5753b766d5d66140d1881c73e352f"],"9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"62facbbf49f5753b766d5d66140d1881c73e352f":["9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3821108e77348b1cdb6baf5422727f926ba7af61"]},"commit2Childs":{"3821108e77348b1cdb6baf5422727f926ba7af61":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"b137ac261d96fa4d6176349645cfc0f68b9ba1e1":["3821108e77348b1cdb6baf5422727f926ba7af61"],"9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c":["62facbbf49f5753b766d5d66140d1881c73e352f"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c"],"62facbbf49f5753b766d5d66140d1881c73e352f":["b137ac261d96fa4d6176349645cfc0f68b9ba1e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}