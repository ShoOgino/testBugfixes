{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInt data from the DataInput and return a packed int\n   * structure based on it.\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return a read only random access capable array of positive integers.\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getReader(DataInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n\n    switch (bitsPerValue) {\n    case 8:\n      return new Direct8(in, valueCount);\n    case 16:\n      return new Direct16(in, valueCount);\n    case 32:\n      return new Direct32(in, valueCount);\n    case 64:\n      return new Direct64(in, valueCount);\n    default:\n      if (Constants.JRE_IS_64BIT || bitsPerValue >= 32) {\n        return new Packed64(in, valueCount, bitsPerValue);\n      } else {\n        return new Packed32(in, valueCount, bitsPerValue);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInt data from the DataInput and return a packed int\n   * structure based on it.\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return a read only random access capable array of positive integers.\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getReader(DataInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n\n    switch (bitsPerValue) {\n    case 8:\n      return new Direct8(in, valueCount);\n    case 16:\n      return new Direct16(in, valueCount);\n    case 32:\n      return new Direct32(in, valueCount);\n    case 64:\n      return new Direct64(in, valueCount);\n    default:\n      if (Constants.JRE_IS_64BIT || bitsPerValue >= 32) {\n        return new Packed64(in, valueCount, bitsPerValue);\n      } else {\n        return new Packed32(in, valueCount, bitsPerValue);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","sourceNew":"  /**\n   * Retrieve PackedInt data from the DataInput and return a packed int\n   * structure based on it.\n   *\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return a read only random access capable array of positive integers.\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getReader(DataInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final int format = in.readVInt();\n\n    switch (format) {\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 24:\n            return new Packed8ThreeBlocks(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 48:\n            return new Packed16ThreeBlocks(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          default:\n            return new Packed64(in, valueCount, bitsPerValue);\n        }\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknwown Writer format: \" + format);\n    }\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInt data from the DataInput and return a packed int\n   * structure based on it.\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return a read only random access capable array of positive integers.\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getReader(DataInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n\n    switch (bitsPerValue) {\n    case 8:\n      return new Direct8(in, valueCount);\n    case 16:\n      return new Direct16(in, valueCount);\n    case 32:\n      return new Direct32(in, valueCount);\n    case 64:\n      return new Direct64(in, valueCount);\n    default:\n      if (Constants.JRE_IS_64BIT || bitsPerValue >= 32) {\n        return new Packed64(in, valueCount, bitsPerValue);\n      } else {\n        return new Packed32(in, valueCount, bitsPerValue);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link Reader} from a stream.\n   *\n   * @param in           the stream to read data from\n   * @return             a Reader\n   * @throws IOException\n   * @lucene.internal\n   */\n  public static Reader getReader(DataInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n\n    return getReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInt data from the DataInput and return a packed int\n   * structure based on it.\n   *\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return a read only random access capable array of positive integers.\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getReader(DataInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final int format = in.readVInt();\n\n    switch (format) {\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 24:\n            return new Packed8ThreeBlocks(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 48:\n            return new Packed16ThreeBlocks(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          default:\n            return new Packed64(in, valueCount, bitsPerValue);\n        }\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknwown Writer format: \" + format);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb279fba5b1f023bb26dee9f9b17926b86fb10b5","date":1341949966,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link Reader} from a stream.\n   *\n   * @param in           the stream to read data from\n   * @return             a Reader\n   * @throws IOException\n   * @lucene.internal\n   */\n  public static Reader getReader(DataInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_CURRENT);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n\n    return getReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link Reader} from a stream.\n   *\n   * @param in           the stream to read data from\n   * @return             a Reader\n   * @throws IOException\n   * @lucene.internal\n   */\n  public static Reader getReader(DataInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n\n    return getReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link Reader} from a stream.\n   *\n   * @param in           the stream to read data from\n   * @return             a Reader\n   * @throws IOException\n   * @lucene.internal\n   */\n  public static Reader getReader(DataInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_CURRENT);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n\n    return getReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","sourceOld":"  /**\n   * Retrieve PackedInt data from the DataInput and return a packed int\n   * structure based on it.\n   *\n   * @param in positioned at the beginning of a stored packed int structure.\n   * @return a read only random access capable array of positive integers.\n   * @throws IOException if the structure could not be retrieved.\n   * @lucene.internal\n   */\n  public static Reader getReader(DataInput in) throws IOException {\n    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final int format = in.readVInt();\n\n    switch (format) {\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 24:\n            return new Packed8ThreeBlocks(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 48:\n            return new Packed16ThreeBlocks(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          default:\n            return new Packed64(in, valueCount, bitsPerValue);\n        }\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknwown Writer format: \" + format);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link Reader} from a stream.\n   *\n   * @param in           the stream to read data from\n   * @return             a Reader\n   * @throws IOException\n   * @lucene.internal\n   */\n  public static Reader getReader(DataInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_CURRENT);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n\n    return getReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link Reader} from a stream.\n   *\n   * @param in           the stream to read data from\n   * @return             a Reader\n   * @throws IOException\n   * @lucene.internal\n   */\n  public static Reader getReader(DataInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n\n    return getReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReader(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link Reader} from a stream.\n   *\n   * @param in           the stream to read data from\n   * @return             a Reader\n   * @throws IOException If there is a low-level I/O error\n   * @lucene.internal\n   */\n  public static Reader getReader(DataInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_CURRENT);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n\n    return getReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link Reader} from a stream.\n   *\n   * @param in           the stream to read data from\n   * @return             a Reader\n   * @throws IOException\n   * @lucene.internal\n   */\n  public static Reader getReader(DataInput in) throws IOException {\n    final int version = CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_CURRENT);\n    final int bitsPerValue = in.readVInt();\n    assert bitsPerValue > 0 && bitsPerValue <= 64: \"bitsPerValue=\" + bitsPerValue;\n    final int valueCount = in.readVInt();\n    final Format format = Format.byId(in.readVInt());\n\n    return getReaderNoHeader(in, format, version, valueCount, bitsPerValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["cb279fba5b1f023bb26dee9f9b17926b86fb10b5"],"aba371508186796cc6151d8223a5b4e16d02e26e":["55110eb60c5105294fc2ae7912d82b750865aa58","cb279fba5b1f023bb26dee9f9b17926b86fb10b5"],"55110eb60c5105294fc2ae7912d82b750865aa58":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4a470c93b2b0f8f51241f52705fc110a01f27ad2","cb279fba5b1f023bb26dee9f9b17926b86fb10b5"],"cb279fba5b1f023bb26dee9f9b17926b86fb10b5":["55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"55110eb60c5105294fc2ae7912d82b750865aa58":["aba371508186796cc6151d8223a5b4e16d02e26e","cb279fba5b1f023bb26dee9f9b17926b86fb10b5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"cb279fba5b1f023bb26dee9f9b17926b86fb10b5":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}