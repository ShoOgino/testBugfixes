{"path":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","commits":[{"id":"1774e2854ef0f77de7f31ba1d9586139928e06fe","date":1285965652,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","sourceNew":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","sourceNew":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","sourceNew":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","sourceNew":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","sourceNew":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","sourceNew":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","sourceNew":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1774e2854ef0f77de7f31ba1d9586139928e06fe"],"e230a61047bc041516c811baa08a7174d6f8322a":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","e230a61047bc041516c811baa08a7174d6f8322a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1774e2854ef0f77de7f31ba1d9586139928e06fe","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["1774e2854ef0f77de7f31ba1d9586139928e06fe","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1774e2854ef0f77de7f31ba1d9586139928e06fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1774e2854ef0f77de7f31ba1d9586139928e06fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e230a61047bc041516c811baa08a7174d6f8322a"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["e230a61047bc041516c811baa08a7174d6f8322a","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1774e2854ef0f77de7f31ba1d9586139928e06fe","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"1774e2854ef0f77de7f31ba1d9586139928e06fe":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}