{"path":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","commits":[{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getErrorInfo(Throwable,NamedList).mjava","sourceNew":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p/>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p/>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      code = ((SolrException)ex).code();\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: \" + code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","sourceOld":"  protected int getErrorInfo(Throwable ex, NamedList info) {\n    int code=500;\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    String msg = null;\n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      msg = th.getMessage();\n      if (msg != null) break;\n    }\n    if(msg != null) {\n      info.add(\"msg\", msg);\n    }\n    \n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    info.add(\"code\", new Integer(code));\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b594b1b209efe245c2227a83c4f1a08e8054d5eb","date":1411504154,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","sourceNew":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p/>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p/>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      SolrException solrExc = (SolrException)ex;\n      code = solrExc.code();\n      NamedList<String> errorMetadata = solrExc.getMetadata();\n      if (errorMetadata != null)\n        info.add(\"metadata\", errorMetadata);\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: \" + code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","sourceOld":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p/>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p/>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      code = ((SolrException)ex).code();\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: \" + code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","sourceNew":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      SolrException solrExc = (SolrException)ex;\n      code = solrExc.code();\n      NamedList<String> errorMetadata = solrExc.getMetadata();\n      if (errorMetadata != null)\n        info.add(\"metadata\", errorMetadata);\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: \" + code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","sourceOld":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p/>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p/>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      SolrException solrExc = (SolrException)ex;\n      code = solrExc.code();\n      NamedList<String> errorMetadata = solrExc.getMetadata();\n      if (errorMetadata != null)\n        info.add(\"metadata\", errorMetadata);\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: \" + code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","bugFix":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9362075f92dff89425ca488b480f70d565d66e7","date":1454985541,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","sourceNew":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      SolrException solrExc = (SolrException)ex;\n      code = solrExc.code();\n      NamedList<String> errorMetadata = solrExc.getMetadata();\n      if (errorMetadata == null) {\n        errorMetadata = new NamedList<>();\n      }\n      errorMetadata.add(SolrException.ERROR_CLASS, ex.getClass().getName());\n      errorMetadata.add(SolrException.ROOT_ERROR_CLASS, SolrException.getRootCause(ex).getClass().getName());\n      info.add(\"metadata\", errorMetadata);\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: \" + code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","sourceOld":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      SolrException solrExc = (SolrException)ex;\n      code = solrExc.code();\n      NamedList<String> errorMetadata = solrExc.getMetadata();\n      if (errorMetadata != null)\n        info.add(\"metadata\", errorMetadata);\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: \" + code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","sourceNew":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      SolrException solrExc = (SolrException)ex;\n      code = solrExc.code();\n      NamedList<String> errorMetadata = solrExc.getMetadata();\n      if (errorMetadata == null) {\n        errorMetadata = new NamedList<>();\n      }\n      errorMetadata.add(SolrException.ERROR_CLASS, ex.getClass().getName());\n      errorMetadata.add(SolrException.ROOT_ERROR_CLASS, SolrException.getRootCause(ex).getClass().getName());\n      info.add(\"metadata\", errorMetadata);\n      if (ex instanceof ApiBag.ExceptionWithErrObject) {\n        ApiBag.ExceptionWithErrObject exception = (ApiBag.ExceptionWithErrObject) ex;\n        info.add(CommandOperation.ERR_MSGS, exception.getErrs() );\n      }\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: \" + code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","sourceOld":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      SolrException solrExc = (SolrException)ex;\n      code = solrExc.code();\n      NamedList<String> errorMetadata = solrExc.getMetadata();\n      if (errorMetadata == null) {\n        errorMetadata = new NamedList<>();\n      }\n      errorMetadata.add(SolrException.ERROR_CLASS, ex.getClass().getName());\n      errorMetadata.add(SolrException.ROOT_ERROR_CLASS, SolrException.getRootCause(ex).getClass().getName());\n      info.add(\"metadata\", errorMetadata);\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: \" + code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","sourceNew":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      SolrException solrExc = (SolrException)ex;\n      code = solrExc.code();\n      NamedList<String> errorMetadata = solrExc.getMetadata();\n      if (errorMetadata == null) {\n        errorMetadata = new NamedList<>();\n      }\n      errorMetadata.add(SolrException.ERROR_CLASS, ex.getClass().getName());\n      errorMetadata.add(SolrException.ROOT_ERROR_CLASS, SolrException.getRootCause(ex).getClass().getName());\n      info.add(\"metadata\", errorMetadata);\n      if (ex instanceof ApiBag.ExceptionWithErrObject) {\n        ApiBag.ExceptionWithErrObject exception = (ApiBag.ExceptionWithErrObject) ex;\n        info.add(CommandOperation.ERR_MSGS, exception.getErrs() );\n      }\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: \" + code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","sourceOld":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      SolrException solrExc = (SolrException)ex;\n      code = solrExc.code();\n      NamedList<String> errorMetadata = solrExc.getMetadata();\n      if (errorMetadata == null) {\n        errorMetadata = new NamedList<>();\n      }\n      errorMetadata.add(SolrException.ERROR_CLASS, ex.getClass().getName());\n      errorMetadata.add(SolrException.ROOT_ERROR_CLASS, SolrException.getRootCause(ex).getClass().getName());\n      info.add(\"metadata\", errorMetadata);\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: \" + code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c","date":1501832890,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","sourceNew":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      SolrException solrExc = (SolrException)ex;\n      code = solrExc.code();\n      NamedList<String> errorMetadata = solrExc.getMetadata();\n      if (errorMetadata == null) {\n        errorMetadata = new NamedList<>();\n      }\n      errorMetadata.add(SolrException.ERROR_CLASS, ex.getClass().getName());\n      errorMetadata.add(SolrException.ROOT_ERROR_CLASS, SolrException.getRootCause(ex).getClass().getName());\n      info.add(\"metadata\", errorMetadata);\n      if (ex instanceof ApiBag.ExceptionWithErrObject) {\n        ApiBag.ExceptionWithErrObject exception = (ApiBag.ExceptionWithErrObject) ex;\n        info.add(\"details\", exception.getErrs() );\n      }\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: \" + code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","sourceOld":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      SolrException solrExc = (SolrException)ex;\n      code = solrExc.code();\n      NamedList<String> errorMetadata = solrExc.getMetadata();\n      if (errorMetadata == null) {\n        errorMetadata = new NamedList<>();\n      }\n      errorMetadata.add(SolrException.ERROR_CLASS, ex.getClass().getName());\n      errorMetadata.add(SolrException.ROOT_ERROR_CLASS, SolrException.getRootCause(ex).getClass().getName());\n      info.add(\"metadata\", errorMetadata);\n      if (ex instanceof ApiBag.ExceptionWithErrObject) {\n        ApiBag.ExceptionWithErrObject exception = (ApiBag.ExceptionWithErrObject) ex;\n        info.add(CommandOperation.ERR_MSGS, exception.getErrs() );\n      }\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: \" + code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afde616cab4149eba221511fd7ff21d460cded7c","date":1501855890,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","sourceNew":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      SolrException solrExc = (SolrException)ex;\n      code = solrExc.code();\n      NamedList<String> errorMetadata = solrExc.getMetadata();\n      if (errorMetadata == null) {\n        errorMetadata = new NamedList<>();\n      }\n      errorMetadata.add(SolrException.ERROR_CLASS, ex.getClass().getName());\n      errorMetadata.add(SolrException.ROOT_ERROR_CLASS, SolrException.getRootCause(ex).getClass().getName());\n      info.add(\"metadata\", errorMetadata);\n      if (ex instanceof ApiBag.ExceptionWithErrObject) {\n        ApiBag.ExceptionWithErrObject exception = (ApiBag.ExceptionWithErrObject) ex;\n        info.add(\"details\", exception.getErrs() );\n      }\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: \" + code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","sourceOld":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      SolrException solrExc = (SolrException)ex;\n      code = solrExc.code();\n      NamedList<String> errorMetadata = solrExc.getMetadata();\n      if (errorMetadata == null) {\n        errorMetadata = new NamedList<>();\n      }\n      errorMetadata.add(SolrException.ERROR_CLASS, ex.getClass().getName());\n      errorMetadata.add(SolrException.ROOT_ERROR_CLASS, SolrException.getRootCause(ex).getClass().getName());\n      info.add(\"metadata\", errorMetadata);\n      if (ex instanceof ApiBag.ExceptionWithErrObject) {\n        ApiBag.ExceptionWithErrObject exception = (ApiBag.ExceptionWithErrObject) ex;\n        info.add(CommandOperation.ERR_MSGS, exception.getErrs() );\n      }\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: \" + code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","sourceNew":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      SolrException solrExc = (SolrException)ex;\n      code = solrExc.code();\n      NamedList<String> errorMetadata = solrExc.getMetadata();\n      if (errorMetadata == null) {\n        errorMetadata = new NamedList<>();\n      }\n      errorMetadata.add(SolrException.ERROR_CLASS, ex.getClass().getName());\n      errorMetadata.add(SolrException.ROOT_ERROR_CLASS, SolrException.getRootCause(ex).getClass().getName());\n      info.add(\"metadata\", errorMetadata);\n      if (ex instanceof ApiBag.ExceptionWithErrObject) {\n        ApiBag.ExceptionWithErrObject exception = (ApiBag.ExceptionWithErrObject) ex;\n        info.add(\"details\", exception.getErrs() );\n      }\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: {}\", code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","sourceOld":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      SolrException solrExc = (SolrException)ex;\n      code = solrExc.code();\n      NamedList<String> errorMetadata = solrExc.getMetadata();\n      if (errorMetadata == null) {\n        errorMetadata = new NamedList<>();\n      }\n      errorMetadata.add(SolrException.ERROR_CLASS, ex.getClass().getName());\n      errorMetadata.add(SolrException.ROOT_ERROR_CLASS, SolrException.getRootCause(ex).getClass().getName());\n      info.add(\"metadata\", errorMetadata);\n      if (ex instanceof ApiBag.ExceptionWithErrObject) {\n        ApiBag.ExceptionWithErrObject exception = (ApiBag.ExceptionWithErrObject) ex;\n        info.add(\"details\", exception.getErrs() );\n      }\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: \" + code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ResponseUtils#getErrorInfo(Throwable,NamedList,Logger).mjava","sourceNew":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static int getErrorInfo(Throwable ex, @SuppressWarnings({\"rawtypes\"})NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      SolrException solrExc = (SolrException)ex;\n      code = solrExc.code();\n      NamedList<String> errorMetadata = solrExc.getMetadata();\n      if (errorMetadata == null) {\n        errorMetadata = new NamedList<>();\n      }\n      errorMetadata.add(SolrException.ERROR_CLASS, ex.getClass().getName());\n      errorMetadata.add(SolrException.ROOT_ERROR_CLASS, SolrException.getRootCause(ex).getClass().getName());\n      info.add(\"metadata\", errorMetadata);\n      if (ex instanceof ApiBag.ExceptionWithErrObject) {\n        ApiBag.ExceptionWithErrObject exception = (ApiBag.ExceptionWithErrObject) ex;\n        info.add(\"details\", exception.getErrs() );\n      }\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: {}\", code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","sourceOld":"  /**\n   * Adds the given Throwable's message to the given NamedList.\n   * <p>\n   * If the response code is not a regular code, the Throwable's\n   * stack trace is both logged and added to the given NamedList.\n   * <p>\n   * Status codes less than 100 are adjusted to be 500.\n   */\n  public static int getErrorInfo(Throwable ex, NamedList info, Logger log) {\n    int code = 500;\n    if (ex instanceof SolrException) {\n      SolrException solrExc = (SolrException)ex;\n      code = solrExc.code();\n      NamedList<String> errorMetadata = solrExc.getMetadata();\n      if (errorMetadata == null) {\n        errorMetadata = new NamedList<>();\n      }\n      errorMetadata.add(SolrException.ERROR_CLASS, ex.getClass().getName());\n      errorMetadata.add(SolrException.ROOT_ERROR_CLASS, SolrException.getRootCause(ex).getClass().getName());\n      info.add(\"metadata\", errorMetadata);\n      if (ex instanceof ApiBag.ExceptionWithErrObject) {\n        ApiBag.ExceptionWithErrObject exception = (ApiBag.ExceptionWithErrObject) ex;\n        info.add(\"details\", exception.getErrs() );\n      }\n    }\n    \n    for (Throwable th = ex; th != null; th = th.getCause()) {\n      String msg = th.getMessage();\n      if (msg != null) {\n        info.add(\"msg\", msg);\n        break;\n      }\n    }\n    \n    // For any regular code, don't include the stack trace\n    if (code == 500 || code < 100) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      SolrException.log(log, null, ex);\n      info.add(\"trace\", sw.toString());\n\n      // non standard codes have undefined results with various servers\n      if (code < 100) {\n        log.warn(\"invalid return code: {}\", code);\n        code = 500;\n      }\n    }\n    \n    info.add(\"code\", code);\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["afde616cab4149eba221511fd7ff21d460cded7c"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["f9362075f92dff89425ca488b480f70d565d66e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["f9362075f92dff89425ca488b480f70d565d66e7","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9362075f92dff89425ca488b480f70d565d66e7":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"b594b1b209efe245c2227a83c4f1a08e8054d5eb":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"afde616cab4149eba221511fd7ff21d460cded7c":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["b594b1b209efe245c2227a83c4f1a08e8054d5eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","afde616cab4149eba221511fd7ff21d460cded7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["b594b1b209efe245c2227a83c4f1a08e8054d5eb"],"f9362075f92dff89425ca488b480f70d565d66e7":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"b594b1b209efe245c2227a83c4f1a08e8054d5eb":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"afde616cab4149eba221511fd7ff21d460cded7c":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["f9362075f92dff89425ca488b480f70d565d66e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}