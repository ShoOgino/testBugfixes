{"path":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#isEmoji(int,int).mjava","commits":[{"id":"a9381336c4dc91cc20829fb628036012963dc440","date":1515945231,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#isEmoji(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if the current text represents emoji character or sequence */\n  private boolean isEmoji(int current, int next) {\n    int begin = start + current;\n    int end = start + next;\n    int codepoint = UTF16.charAt(text, 0, end, begin);\n    // TODO: this can be made more aggressive and future-proof if it uses [:Extended_Pictographic:]\n    if (UCharacter.hasBinaryProperty(codepoint, UProperty.EMOJI)) {\n      if (EMOJI_RK.contains(codepoint)) {\n        // if its in EmojiRK, we don't treat it as emoji unless there is evidence it forms emoji sequence,\n        // an emoji presentation selector or keycap follows.\n        int trailer = begin + Character.charCount(codepoint);\n        return trailer < end && (text[trailer] == 0xFE0F || text[trailer] == 0x20E3);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#isEmoji(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if the current text represents emoji character or sequence */\n  private boolean isEmoji(int current, int next) {\n    int begin = start + current;\n    int end = start + next;\n    int codepoint = UTF16.charAt(text, 0, end, begin);\n    // TODO: this can be made more aggressive and future-proof if it uses [:Extended_Pictographic:]\n    if (UCharacter.hasBinaryProperty(codepoint, UProperty.EMOJI)) {\n      if (EMOJI_RK.contains(codepoint)) {\n        // if its in EmojiRK, we don't treat it as emoji unless there is evidence it forms emoji sequence,\n        // an emoji presentation selector or keycap follows.\n        int trailer = begin + Character.charCount(codepoint);\n        return trailer < end && (text[trailer] == 0xFE0F || text[trailer] == 0x20E3);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcc05d435c845d2b3c7c10faeb6674cc37ad3527","date":1519133993,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#isEmoji(int,int).mjava","sourceNew":null,"sourceOld":"  /** Returns true if the current text represents emoji character or sequence */\n  private boolean isEmoji(int current, int next) {\n    int begin = start + current;\n    int end = start + next;\n    int codepoint = UTF16.charAt(text, 0, end, begin);\n    // TODO: this can be made more aggressive and future-proof if it uses [:Extended_Pictographic:]\n    if (UCharacter.hasBinaryProperty(codepoint, UProperty.EMOJI)) {\n      if (EMOJI_RK.contains(codepoint)) {\n        // if its in EmojiRK, we don't treat it as emoji unless there is evidence it forms emoji sequence,\n        // an emoji presentation selector or keycap follows.\n        int trailer = begin + Character.charCount(codepoint);\n        return trailer < end && (text[trailer] == 0xFE0F || text[trailer] == 0x20E3);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a3e7b7017a06c652c79a772b1259178f6908877","date":1522103499,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#isEmoji(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if the current text represents emoji character or sequence */\n  private boolean isEmoji(int current, int next) {\n    int begin = start + current;\n    int end = start + next;\n    int codepoint = UTF16.charAt(text, 0, end, begin);\n    // TODO: this can be made more aggressive and future-proof if it uses [:Extended_Pictographic:]\n    if (UCharacter.hasBinaryProperty(codepoint, UProperty.EMOJI)) {\n      if (EMOJI_RK.contains(codepoint)) {\n        // if its in EmojiRK, we don't treat it as emoji unless there is evidence it forms emoji sequence,\n        // an emoji presentation selector or keycap follows.\n        int trailer = begin + Character.charCount(codepoint);\n        return trailer < end && (text[trailer] == 0xFE0F || text[trailer] == 0x20E3);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","date":1522191940,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#isEmoji(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if the current text represents emoji character or sequence */\n  private boolean isEmoji(int current, int next) {\n    int begin = start + current;\n    int end = start + next;\n    int codepoint = UTF16.charAt(text, 0, end, begin);\n    // TODO: this can be made more aggressive and future-proof if it uses [:Extended_Pictographic:]\n    if (UCharacter.hasBinaryProperty(codepoint, UProperty.EMOJI)) {\n      if (EMOJI_RK.contains(codepoint)) {\n        // if its in EmojiRK, we don't treat it as emoji unless there is evidence it forms emoji sequence,\n        // an emoji presentation selector or keycap follows.\n        int trailer = begin + Character.charCount(codepoint);\n        return trailer < end && (text[trailer] == 0xFE0F || text[trailer] == 0x20E3);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e6fba2c12930ae1bb59b6136546d090e0b5791","date":1529626153,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#isEmoji(int,int).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#isEmoji(int,int).mjava","sourceNew":"  /** Returns true if the current text represents emoji character or sequence */\n  private boolean isEmoji(int current, int next) {\n    int begin = start + current;\n    int end = start + next;\n    int codepoint = UTF16.charAt(text, 0, end, begin);\n    if (EMOJI.contains(codepoint)) {\n      if (EMOJI_RK.contains(codepoint)) {\n        // if its in EmojiRK, we don't treat it as emoji unless there is evidence it forms emoji sequence,\n        // an emoji presentation selector or keycap follows.\n        int trailer = begin + Character.charCount(codepoint);\n        return trailer < end && (text[trailer] == 0xFE0F || text[trailer] == 0x20E3);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** Returns true if the current text represents emoji character or sequence */\n  private boolean isEmoji(int current, int next) {\n    int begin = start + current;\n    int end = start + next;\n    int codepoint = UTF16.charAt(text, 0, end, begin);\n    // TODO: this can be made more aggressive and future-proof if it uses [:Extended_Pictographic:]\n    if (UCharacter.hasBinaryProperty(codepoint, UProperty.EMOJI)) {\n      if (EMOJI_RK.contains(codepoint)) {\n        // if its in EmojiRK, we don't treat it as emoji unless there is evidence it forms emoji sequence,\n        // an emoji presentation selector or keycap follows.\n        int trailer = begin + Character.charCount(codepoint);\n        return trailer < end && (text[trailer] == 0xFE0F || text[trailer] == 0x20E3);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#isEmoji(int,int).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#isEmoji(int,int).mjava","sourceNew":"  /** Returns true if the current text represents emoji character or sequence */\n  private boolean isEmoji(int current, int next) {\n    int begin = start + current;\n    int end = start + next;\n    int codepoint = UTF16.charAt(text, 0, end, begin);\n    if (EMOJI.contains(codepoint)) {\n      if (EMOJI_RK.contains(codepoint)) {\n        // if its in EmojiRK, we don't treat it as emoji unless there is evidence it forms emoji sequence,\n        // an emoji presentation selector or keycap follows.\n        int trailer = begin + Character.charCount(codepoint);\n        return trailer < end && (text[trailer] == 0xFE0F || text[trailer] == 0x20E3);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** Returns true if the current text represents emoji character or sequence */\n  private boolean isEmoji(int current, int next) {\n    int begin = start + current;\n    int end = start + next;\n    int codepoint = UTF16.charAt(text, 0, end, begin);\n    // TODO: this can be made more aggressive and future-proof if it uses [:Extended_Pictographic:]\n    if (UCharacter.hasBinaryProperty(codepoint, UProperty.EMOJI)) {\n      if (EMOJI_RK.contains(codepoint)) {\n        // if its in EmojiRK, we don't treat it as emoji unless there is evidence it forms emoji sequence,\n        // an emoji presentation selector or keycap follows.\n        int trailer = begin + Character.charCount(codepoint);\n        return trailer < end && (text[trailer] == 0xFE0F || text[trailer] == 0x20E3);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#isEmoji(int,int).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#isEmoji(int,int).mjava","sourceNew":"  /** Returns true if the current text represents emoji character or sequence */\n  private boolean isEmoji(int current, int next) {\n    int begin = start + current;\n    int end = start + next;\n    int codepoint = UTF16.charAt(text, 0, end, begin);\n    if (EMOJI.contains(codepoint)) {\n      if (EMOJI_RK.contains(codepoint)) {\n        // if its in EmojiRK, we don't treat it as emoji unless there is evidence it forms emoji sequence,\n        // an emoji presentation selector or keycap follows.\n        int trailer = begin + Character.charCount(codepoint);\n        return trailer < end && (text[trailer] == 0xFE0F || text[trailer] == 0x20E3);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** Returns true if the current text represents emoji character or sequence */\n  private boolean isEmoji(int current, int next) {\n    int begin = start + current;\n    int end = start + next;\n    int codepoint = UTF16.charAt(text, 0, end, begin);\n    // TODO: this can be made more aggressive and future-proof if it uses [:Extended_Pictographic:]\n    if (UCharacter.hasBinaryProperty(codepoint, UProperty.EMOJI)) {\n      if (EMOJI_RK.contains(codepoint)) {\n        // if its in EmojiRK, we don't treat it as emoji unless there is evidence it forms emoji sequence,\n        // an emoji presentation selector or keycap follows.\n        int trailer = begin + Character.charCount(codepoint);\n        return trailer < end && (text[trailer] == 0xFE0F || text[trailer] == 0x20E3);\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a9381336c4dc91cc20829fb628036012963dc440"],"b4e6fba2c12930ae1bb59b6136546d090e0b5791":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","b4e6fba2c12930ae1bb59b6136546d090e0b5791"],"1a3e7b7017a06c652c79a772b1259178f6908877":["fcc05d435c845d2b3c7c10faeb6674cc37ad3527"],"fcc05d435c845d2b3c7c10faeb6674cc37ad3527":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9381336c4dc91cc20829fb628036012963dc440":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["fcc05d435c845d2b3c7c10faeb6674cc37ad3527","1a3e7b7017a06c652c79a772b1259178f6908877"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e6fba2c12930ae1bb59b6136546d090e0b5791"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","b4e6fba2c12930ae1bb59b6136546d090e0b5791"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["fcc05d435c845d2b3c7c10faeb6674cc37ad3527"],"b4e6fba2c12930ae1bb59b6136546d090e0b5791":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"1a3e7b7017a06c652c79a772b1259178f6908877":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"fcc05d435c845d2b3c7c10faeb6674cc37ad3527":["1a3e7b7017a06c652c79a772b1259178f6908877","d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","a9381336c4dc91cc20829fb628036012963dc440"],"a9381336c4dc91cc20829fb628036012963dc440":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["b4e6fba2c12930ae1bb59b6136546d090e0b5791","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}