{"path":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.BaseNumericAcc#getShardValue(int).mjava","commits":[{"id":"0138536655ed6adafa2e07c09cd3c9572112922f","date":1497930179,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.BaseNumericAcc#getShardValue(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.NumericAcc#getShardValue(int).mjava","sourceNew":"    public Object getShardValue(int slot) throws IOException {\n      LongSet set = sets[slot];\n      int unique = getCardinality(slot);\n\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"unique\", unique);\n\n      int maxExplicit=100;\n      // TODO: make configurable\n      // TODO: share values across buckets\n      if (unique <= maxExplicit) {\n        List lst = new ArrayList( Math.min(unique, maxExplicit) );\n        if (set != null) {\n          if (set.zeroCount > 0) {\n            lst.add(0);\n          }\n          for (long val : set.vals) {\n            if (val != 0) {\n              lst.add(val);\n            }\n          }\n        }\n\n        map.add(\"vals\", lst);\n      }\n\n      return map;\n    }\n\n","sourceOld":"    public Object getShardValue(int slot) throws IOException {\n      LongSet set = sets[slot];\n      int unique = getCardinality(slot);\n\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"unique\", unique);\n\n      int maxExplicit=100;\n      // TODO: make configurable\n      // TODO: share values across buckets\n      if (unique <= maxExplicit) {\n        List lst = new ArrayList( Math.min(unique, maxExplicit) );\n        if (set != null) {\n          if (set.zeroCount > 0) {\n            lst.add(0);\n          }\n          for (long val : set.vals) {\n            if (val != 0) {\n              lst.add(val);\n            }\n          }\n        }\n\n        map.add(\"vals\", lst);\n      }\n\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.BaseNumericAcc#getShardValue(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.NumericAcc#getShardValue(int).mjava","sourceNew":"    public Object getShardValue(int slot) throws IOException {\n      LongSet set = sets[slot];\n      int unique = getCardinality(slot);\n\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"unique\", unique);\n\n      int maxExplicit=100;\n      // TODO: make configurable\n      // TODO: share values across buckets\n      if (unique <= maxExplicit) {\n        List lst = new ArrayList( Math.min(unique, maxExplicit) );\n        if (set != null) {\n          if (set.zeroCount > 0) {\n            lst.add(0);\n          }\n          for (long val : set.vals) {\n            if (val != 0) {\n              lst.add(val);\n            }\n          }\n        }\n\n        map.add(\"vals\", lst);\n      }\n\n      return map;\n    }\n\n","sourceOld":"    public Object getShardValue(int slot) throws IOException {\n      LongSet set = sets[slot];\n      int unique = getCardinality(slot);\n\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"unique\", unique);\n\n      int maxExplicit=100;\n      // TODO: make configurable\n      // TODO: share values across buckets\n      if (unique <= maxExplicit) {\n        List lst = new ArrayList( Math.min(unique, maxExplicit) );\n        if (set != null) {\n          if (set.zeroCount > 0) {\n            lst.add(0);\n          }\n          for (long val : set.vals) {\n            if (val != 0) {\n              lst.add(val);\n            }\n          }\n        }\n\n        map.add(\"vals\", lst);\n      }\n\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.BaseNumericAcc#getShardValue(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.NumericAcc#getShardValue(int).mjava","sourceNew":"    public Object getShardValue(int slot) throws IOException {\n      LongSet set = sets[slot];\n      int unique = getCardinality(slot);\n\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"unique\", unique);\n\n      int maxExplicit=100;\n      // TODO: make configurable\n      // TODO: share values across buckets\n      if (unique <= maxExplicit) {\n        List lst = new ArrayList( Math.min(unique, maxExplicit) );\n        if (set != null) {\n          if (set.zeroCount > 0) {\n            lst.add(0);\n          }\n          for (long val : set.vals) {\n            if (val != 0) {\n              lst.add(val);\n            }\n          }\n        }\n\n        map.add(\"vals\", lst);\n      }\n\n      return map;\n    }\n\n","sourceOld":"    public Object getShardValue(int slot) throws IOException {\n      LongSet set = sets[slot];\n      int unique = getCardinality(slot);\n\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"unique\", unique);\n\n      int maxExplicit=100;\n      // TODO: make configurable\n      // TODO: share values across buckets\n      if (unique <= maxExplicit) {\n        List lst = new ArrayList( Math.min(unique, maxExplicit) );\n        if (set != null) {\n          if (set.zeroCount > 0) {\n            lst.add(0);\n          }\n          for (long val : set.vals) {\n            if (val != 0) {\n              lst.add(val);\n            }\n          }\n        }\n\n        map.add(\"vals\", lst);\n      }\n\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","date":1500994164,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.BaseNumericAcc#getShardValue(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.BaseNumericAcc#getShardValue(int).mjava","sourceNew":"    public Object getShardValue(int slot) throws IOException {\n      LongSet set = sets[slot];\n      int unique = getCardinality(slot);\n\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"unique\", unique);\n\n      int maxExplicit=100;\n      // TODO: make configurable\n      // TODO: share values across buckets\n      if (unique <= maxExplicit) {\n        List lst = new ArrayList( Math.min(unique, maxExplicit) );\n        if (set != null) {\n          LongIterator iter = set.iterator();\n          while (iter.hasNext()) {\n            lst.add( iter.next() );\n          }\n        }\n        map.add(\"vals\", lst);\n      }\n\n      return map;\n    }\n\n","sourceOld":"    public Object getShardValue(int slot) throws IOException {\n      LongSet set = sets[slot];\n      int unique = getCardinality(slot);\n\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"unique\", unique);\n\n      int maxExplicit=100;\n      // TODO: make configurable\n      // TODO: share values across buckets\n      if (unique <= maxExplicit) {\n        List lst = new ArrayList( Math.min(unique, maxExplicit) );\n        if (set != null) {\n          if (set.zeroCount > 0) {\n            lst.add(0);\n          }\n          for (long val : set.vals) {\n            if (val != 0) {\n              lst.add(val);\n            }\n          }\n        }\n\n        map.add(\"vals\", lst);\n      }\n\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.BaseNumericAcc#getShardValue(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.BaseNumericAcc#getShardValue(int).mjava","sourceNew":"    public Object getShardValue(int slot) throws IOException {\n      LongSet set = sets[slot];\n      int unique = getCardinality(slot);\n\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"unique\", unique);\n\n      int maxExplicit=100;\n      // TODO: make configurable\n      // TODO: share values across buckets\n      if (unique <= maxExplicit) {\n        List lst = new ArrayList( Math.min(unique, maxExplicit) );\n        if (set != null) {\n          LongIterator iter = set.iterator();\n          while (iter.hasNext()) {\n            lst.add( iter.next() );\n          }\n        }\n        map.add(\"vals\", lst);\n      }\n\n      return map;\n    }\n\n","sourceOld":"    public Object getShardValue(int slot) throws IOException {\n      LongSet set = sets[slot];\n      int unique = getCardinality(slot);\n\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"unique\", unique);\n\n      int maxExplicit=100;\n      // TODO: make configurable\n      // TODO: share values across buckets\n      if (unique <= maxExplicit) {\n        List lst = new ArrayList( Math.min(unique, maxExplicit) );\n        if (set != null) {\n          if (set.zeroCount > 0) {\n            lst.add(0);\n          }\n          for (long val : set.vals) {\n            if (val != 0) {\n              lst.add(val);\n            }\n          }\n        }\n\n        map.add(\"vals\", lst);\n      }\n\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.BaseNumericAcc#getShardValue(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.BaseNumericAcc#getShardValue(int).mjava","sourceNew":"    public Object getShardValue(int slot) throws IOException {\n      LongSet set = sets[slot];\n      int unique = getCardinality(slot);\n\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"unique\", unique);\n\n      int maxExplicit=100;\n      // TODO: make configurable\n      // TODO: share values across buckets\n      if (unique <= maxExplicit) {\n        List lst = new ArrayList( Math.min(unique, maxExplicit) );\n        if (set != null) {\n          LongIterator iter = set.iterator();\n          while (iter.hasNext()) {\n            lst.add( iter.next() );\n          }\n        }\n        map.add(\"vals\", lst);\n      }\n\n      return map;\n    }\n\n","sourceOld":"    public Object getShardValue(int slot) throws IOException {\n      LongSet set = sets[slot];\n      int unique = getCardinality(slot);\n\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"unique\", unique);\n\n      int maxExplicit=100;\n      // TODO: make configurable\n      // TODO: share values across buckets\n      if (unique <= maxExplicit) {\n        List lst = new ArrayList( Math.min(unique, maxExplicit) );\n        if (set != null) {\n          if (set.zeroCount > 0) {\n            lst.add(0);\n          }\n          for (long val : set.vals) {\n            if (val != 0) {\n              lst.add(val);\n            }\n          }\n        }\n\n        map.add(\"vals\", lst);\n      }\n\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8593fa01b5c0220a9685cabbcb5a8dd4a659ae8c","date":1584625917,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.BaseNumericAcc#getShardValue(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.BaseNumericAcc#getShardValue(int).mjava","sourceNew":"    public Object getShardValue(int slot) throws IOException {\n      LongSet set = sets[slot];\n      int unique = getCardinality(slot);\n\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(UNIQUE, unique);\n\n      int maxExplicit=100;\n      // TODO: make configurable\n      // TODO: share values across buckets\n      if (unique <= maxExplicit) {\n        List lst = new ArrayList( Math.min(unique, maxExplicit) );\n        if (set != null) {\n          LongIterator iter = set.iterator();\n          while (iter.hasNext()) {\n            lst.add( iter.next() );\n          }\n        }\n        map.add(VALS, lst);\n      }\n\n      return map;\n    }\n\n","sourceOld":"    public Object getShardValue(int slot) throws IOException {\n      LongSet set = sets[slot];\n      int unique = getCardinality(slot);\n\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(\"unique\", unique);\n\n      int maxExplicit=100;\n      // TODO: make configurable\n      // TODO: share values across buckets\n      if (unique <= maxExplicit) {\n        List lst = new ArrayList( Math.min(unique, maxExplicit) );\n        if (set != null) {\n          LongIterator iter = set.iterator();\n          while (iter.hasNext()) {\n            lst.add( iter.next() );\n          }\n        }\n        map.add(\"vals\", lst);\n      }\n\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.BaseNumericAcc#getShardValue(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueAgg.BaseNumericAcc#getShardValue(int).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    public Object getShardValue(int slot) throws IOException {\n      LongSet set = sets[slot];\n      int unique = getCardinality(slot);\n\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(UNIQUE, unique);\n\n      int maxExplicit=100;\n      // TODO: make configurable\n      // TODO: share values across buckets\n      if (unique <= maxExplicit) {\n        List lst = new ArrayList( Math.min(unique, maxExplicit) );\n        if (set != null) {\n          LongIterator iter = set.iterator();\n          while (iter.hasNext()) {\n            lst.add( iter.next() );\n          }\n        }\n        map.add(VALS, lst);\n      }\n\n      return map;\n    }\n\n","sourceOld":"    public Object getShardValue(int slot) throws IOException {\n      LongSet set = sets[slot];\n      int unique = getCardinality(slot);\n\n      SimpleOrderedMap map = new SimpleOrderedMap();\n      map.add(UNIQUE, unique);\n\n      int maxExplicit=100;\n      // TODO: make configurable\n      // TODO: share values across buckets\n      if (unique <= maxExplicit) {\n        List lst = new ArrayList( Math.min(unique, maxExplicit) );\n        if (set != null) {\n          LongIterator iter = set.iterator();\n          while (iter.hasNext()) {\n            lst.add( iter.next() );\n          }\n        }\n        map.add(VALS, lst);\n      }\n\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["28288370235ed02234a64753cdbf0c6ec096304a"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["8593fa01b5c0220a9685cabbcb5a8dd4a659ae8c"],"8593fa01b5c0220a9685cabbcb5a8dd4a659ae8c":["a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["28288370235ed02234a64753cdbf0c6ec096304a","a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0138536655ed6adafa2e07c09cd3c9572112922f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0138536655ed6adafa2e07c09cd3c9572112922f"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0138536655ed6adafa2e07c09cd3c9572112922f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["a52341299179de5479672f7cf518bf4b173f34b3"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8593fa01b5c0220a9685cabbcb5a8dd4a659ae8c":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"a52341299179de5479672f7cf518bf4b173f34b3":["8593fa01b5c0220a9685cabbcb5a8dd4a659ae8c","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0138536655ed6adafa2e07c09cd3c9572112922f","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"0138536655ed6adafa2e07c09cd3c9572112922f":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","a52341299179de5479672f7cf518bf4b173f34b3"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}