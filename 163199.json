{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#next().mjava","commits":[{"id":"e50f0da93c6dcee20d8792637b1786e2c34975e9","date":1400182475,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#next().mjava","pathOld":"/dev/null","sourceNew":"  /* Decodes only the term bytes of the next term.  If caller then asks for\n     metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n     decode all metadata up to the current term. */\n  @Override\n  public BytesRef next() throws IOException {\n\n    if (in == null) {\n      // Fresh TermsEnum; seek to first term:\n      final FST.Arc<BytesRef> arc;\n      if (fr.index != null) {\n        arc = fr.index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n      } else {\n        arc = null;\n      }\n      currentFrame = pushFrame(arc, fr.rootCode, 0);\n      currentFrame.loadBlock();\n    }\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    assert !eof;\n    //if (DEBUG) {\n    //System.out.println(\"\\nBTTR.next seg=\" + segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n    //printSeekState();\n    //}\n\n    if (currentFrame == staticFrame) {\n      // If seek was previously called and the term was\n      // cached, or seek(TermState) was called, usually\n      // caller is just going to pull a D/&PEnum or get\n      // docFreq, etc.  But, if they then call next(),\n      // this method catches up all internal state so next()\n      // works properly:\n      //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n      final boolean result = seekExact(term);\n      assert result;\n    }\n\n    // Pop finished blocks\n    while (currentFrame.nextEnt == currentFrame.entCount) {\n      if (!currentFrame.isLastInFloor) {\n        currentFrame.loadNextFloorBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  pop frame\");\n        if (currentFrame.ord == 0) {\n          //if (DEBUG) System.out.println(\"  return null\");\n          assert setEOF();\n          term.length = 0;\n          validIndexPrefix = 0;\n          currentFrame.rewind();\n          termExists = false;\n          return null;\n        }\n        final long lastFP = currentFrame.fpOrig;\n        currentFrame = stack[currentFrame.ord-1];\n\n        if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n          // We popped into a frame that's not loaded\n          // yet or not scan'd to the right entry\n          currentFrame.scanToFloorFrame(term);\n          currentFrame.loadBlock();\n          currentFrame.scanToSubBlock(lastFP);\n        }\n\n        // Note that the seek state (last seek) has been\n        // invalidated beyond this depth\n        validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n        //if (DEBUG) {\n        //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n        //}\n      }\n    }\n\n    while(true) {\n      if (currentFrame.next()) {\n        // Push to new block:\n        //if (DEBUG) System.out.println(\"  push frame\");\n        currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length);\n        // This is a \"next\" frame -- even if it's\n        // floor'd we must pretend it isn't so we don't\n        // try to scan to the right floor frame:\n        currentFrame.isFloor = false;\n        //currentFrame.hasTerms = true;\n        currentFrame.loadBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  return term=\" + term.utf8ToString() + \" \" + term + \" currentFrame.ord=\" + currentFrame.ord);\n        return term;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3251bdaf728baf81f779183e464984bc769ed9c7","date":1400494940,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#next().mjava","sourceNew":"  /* Decodes only the term bytes of the next term.  If caller then asks for\n     metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n     decode all metadata up to the current term. */\n  @Override\n  public BytesRef next() throws IOException {\n    if (in == null) {\n      // Fresh TermsEnum; seek to first term:\n      final FST.Arc<BytesRef> arc;\n      if (fr.index != null) {\n        arc = fr.index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n      } else {\n        arc = null;\n      }\n      currentFrame = pushFrame(arc, fr.rootCode, 0);\n      currentFrame.loadBlock();\n    }\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    assert !eof;\n    if (DEBUG) {\n      System.out.println(\"\\nBTTR.next seg=\" + fr.parent.segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fr.fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n      printSeekState(System.out);\n    }\n\n    if (currentFrame == staticFrame) {\n      // If seek was previously called and the term was\n      // cached, or seek(TermState) was called, usually\n      // caller is just going to pull a D/&PEnum or get\n      // docFreq, etc.  But, if they then call next(),\n      // this method catches up all internal state so next()\n      // works properly:\n      //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n      final boolean result = seekExact(term);\n      assert result;\n    }\n\n    // Pop finished blocks\n    while (currentFrame.nextEnt == currentFrame.entCount) {\n      if (!currentFrame.isLastInFloor) {\n        currentFrame.loadNextFloorBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  pop frame\");\n        if (currentFrame.ord == 0) {\n          //if (DEBUG) System.out.println(\"  return null\");\n          assert setEOF();\n          term.length = 0;\n          validIndexPrefix = 0;\n          currentFrame.rewind();\n          termExists = false;\n          return null;\n        }\n        final long lastFP = currentFrame.fpOrig;\n        currentFrame = stack[currentFrame.ord-1];\n\n        if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n          // We popped into a frame that's not loaded\n          // yet or not scan'd to the right entry\n          currentFrame.scanToFloorFrame(term);\n          currentFrame.loadBlock();\n          currentFrame.scanToSubBlock(lastFP);\n        }\n\n        // Note that the seek state (last seek) has been\n        // invalidated beyond this depth\n        validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n        //if (DEBUG) {\n        //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n        //}\n      }\n    }\n\n    while(true) {\n      if (currentFrame.next()) {\n        // Push to new block:\n        //if (DEBUG) System.out.println(\"  push frame\");\n        currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length);\n        // This is a \"next\" frame -- even if it's\n        // floor'd we must pretend it isn't so we don't\n        // try to scan to the right floor frame:\n        currentFrame.isFloor = false;\n        //currentFrame.hasTerms = true;\n        currentFrame.loadBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  return term=\" + term.utf8ToString() + \" \" + term + \" currentFrame.ord=\" + currentFrame.ord);\n        return term;\n      }\n    }\n  }\n\n","sourceOld":"  /* Decodes only the term bytes of the next term.  If caller then asks for\n     metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n     decode all metadata up to the current term. */\n  @Override\n  public BytesRef next() throws IOException {\n\n    if (in == null) {\n      // Fresh TermsEnum; seek to first term:\n      final FST.Arc<BytesRef> arc;\n      if (fr.index != null) {\n        arc = fr.index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n      } else {\n        arc = null;\n      }\n      currentFrame = pushFrame(arc, fr.rootCode, 0);\n      currentFrame.loadBlock();\n    }\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    assert !eof;\n    //if (DEBUG) {\n    //System.out.println(\"\\nBTTR.next seg=\" + segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n    //printSeekState();\n    //}\n\n    if (currentFrame == staticFrame) {\n      // If seek was previously called and the term was\n      // cached, or seek(TermState) was called, usually\n      // caller is just going to pull a D/&PEnum or get\n      // docFreq, etc.  But, if they then call next(),\n      // this method catches up all internal state so next()\n      // works properly:\n      //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n      final boolean result = seekExact(term);\n      assert result;\n    }\n\n    // Pop finished blocks\n    while (currentFrame.nextEnt == currentFrame.entCount) {\n      if (!currentFrame.isLastInFloor) {\n        currentFrame.loadNextFloorBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  pop frame\");\n        if (currentFrame.ord == 0) {\n          //if (DEBUG) System.out.println(\"  return null\");\n          assert setEOF();\n          term.length = 0;\n          validIndexPrefix = 0;\n          currentFrame.rewind();\n          termExists = false;\n          return null;\n        }\n        final long lastFP = currentFrame.fpOrig;\n        currentFrame = stack[currentFrame.ord-1];\n\n        if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n          // We popped into a frame that's not loaded\n          // yet or not scan'd to the right entry\n          currentFrame.scanToFloorFrame(term);\n          currentFrame.loadBlock();\n          currentFrame.scanToSubBlock(lastFP);\n        }\n\n        // Note that the seek state (last seek) has been\n        // invalidated beyond this depth\n        validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n        //if (DEBUG) {\n        //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n        //}\n      }\n    }\n\n    while(true) {\n      if (currentFrame.next()) {\n        // Push to new block:\n        //if (DEBUG) System.out.println(\"  push frame\");\n        currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length);\n        // This is a \"next\" frame -- even if it's\n        // floor'd we must pretend it isn't so we don't\n        // try to scan to the right floor frame:\n        currentFrame.isFloor = false;\n        //currentFrame.hasTerms = true;\n        currentFrame.loadBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  return term=\" + term.utf8ToString() + \" \" + term + \" currentFrame.ord=\" + currentFrame.ord);\n        return term;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20","date":1400712483,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#next().mjava","sourceNew":"  /* Decodes only the term bytes of the next term.  If caller then asks for\n     metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n     decode all metadata up to the current term. */\n  @Override\n  public BytesRef next() throws IOException {\n    if (in == null) {\n      // Fresh TermsEnum; seek to first term:\n      final FST.Arc<BytesRef> arc;\n      if (fr.index != null) {\n        arc = fr.index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n      } else {\n        arc = null;\n      }\n      currentFrame = pushFrame(arc, fr.rootCode, 0);\n      currentFrame.loadBlock();\n    }\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    assert !eof;\n    // if (DEBUG) {\n    //   System.out.println(\"\\nBTTR.next seg=\" + fr.parent.segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fr.fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n    //   printSeekState(System.out);\n    // }\n\n    if (currentFrame == staticFrame) {\n      // If seek was previously called and the term was\n      // cached, or seek(TermState) was called, usually\n      // caller is just going to pull a D/&PEnum or get\n      // docFreq, etc.  But, if they then call next(),\n      // this method catches up all internal state so next()\n      // works properly:\n      //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n      final boolean result = seekExact(term);\n      assert result;\n    }\n\n    // Pop finished blocks\n    while (currentFrame.nextEnt == currentFrame.entCount) {\n      if (!currentFrame.isLastInFloor) {\n        currentFrame.loadNextFloorBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  pop frame\");\n        if (currentFrame.ord == 0) {\n          //if (DEBUG) System.out.println(\"  return null\");\n          assert setEOF();\n          term.length = 0;\n          validIndexPrefix = 0;\n          currentFrame.rewind();\n          termExists = false;\n          return null;\n        }\n        final long lastFP = currentFrame.fpOrig;\n        currentFrame = stack[currentFrame.ord-1];\n\n        if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n          // We popped into a frame that's not loaded\n          // yet or not scan'd to the right entry\n          currentFrame.scanToFloorFrame(term);\n          currentFrame.loadBlock();\n          currentFrame.scanToSubBlock(lastFP);\n        }\n\n        // Note that the seek state (last seek) has been\n        // invalidated beyond this depth\n        validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n        //if (DEBUG) {\n        //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n        //}\n      }\n    }\n\n    while(true) {\n      if (currentFrame.next()) {\n        // Push to new block:\n        //if (DEBUG) System.out.println(\"  push frame\");\n        currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length);\n        // This is a \"next\" frame -- even if it's\n        // floor'd we must pretend it isn't so we don't\n        // try to scan to the right floor frame:\n        currentFrame.isFloor = false;\n        //currentFrame.hasTerms = true;\n        currentFrame.loadBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  return term=\" + term.utf8ToString() + \" \" + term + \" currentFrame.ord=\" + currentFrame.ord);\n        return term;\n      }\n    }\n  }\n\n","sourceOld":"  /* Decodes only the term bytes of the next term.  If caller then asks for\n     metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n     decode all metadata up to the current term. */\n  @Override\n  public BytesRef next() throws IOException {\n    if (in == null) {\n      // Fresh TermsEnum; seek to first term:\n      final FST.Arc<BytesRef> arc;\n      if (fr.index != null) {\n        arc = fr.index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n      } else {\n        arc = null;\n      }\n      currentFrame = pushFrame(arc, fr.rootCode, 0);\n      currentFrame.loadBlock();\n    }\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    assert !eof;\n    if (DEBUG) {\n      System.out.println(\"\\nBTTR.next seg=\" + fr.parent.segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fr.fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n      printSeekState(System.out);\n    }\n\n    if (currentFrame == staticFrame) {\n      // If seek was previously called and the term was\n      // cached, or seek(TermState) was called, usually\n      // caller is just going to pull a D/&PEnum or get\n      // docFreq, etc.  But, if they then call next(),\n      // this method catches up all internal state so next()\n      // works properly:\n      //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n      final boolean result = seekExact(term);\n      assert result;\n    }\n\n    // Pop finished blocks\n    while (currentFrame.nextEnt == currentFrame.entCount) {\n      if (!currentFrame.isLastInFloor) {\n        currentFrame.loadNextFloorBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  pop frame\");\n        if (currentFrame.ord == 0) {\n          //if (DEBUG) System.out.println(\"  return null\");\n          assert setEOF();\n          term.length = 0;\n          validIndexPrefix = 0;\n          currentFrame.rewind();\n          termExists = false;\n          return null;\n        }\n        final long lastFP = currentFrame.fpOrig;\n        currentFrame = stack[currentFrame.ord-1];\n\n        if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n          // We popped into a frame that's not loaded\n          // yet or not scan'd to the right entry\n          currentFrame.scanToFloorFrame(term);\n          currentFrame.loadBlock();\n          currentFrame.scanToSubBlock(lastFP);\n        }\n\n        // Note that the seek state (last seek) has been\n        // invalidated beyond this depth\n        validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n        //if (DEBUG) {\n        //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n        //}\n      }\n    }\n\n    while(true) {\n      if (currentFrame.next()) {\n        // Push to new block:\n        //if (DEBUG) System.out.println(\"  push frame\");\n        currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length);\n        // This is a \"next\" frame -- even if it's\n        // floor'd we must pretend it isn't so we don't\n        // try to scan to the right floor frame:\n        currentFrame.isFloor = false;\n        //currentFrame.hasTerms = true;\n        currentFrame.loadBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  return term=\" + term.utf8ToString() + \" \" + term + \" currentFrame.ord=\" + currentFrame.ord);\n        return term;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#next().mjava","pathOld":"/dev/null","sourceNew":"  /* Decodes only the term bytes of the next term.  If caller then asks for\n     metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n     decode all metadata up to the current term. */\n  @Override\n  public BytesRef next() throws IOException {\n    if (in == null) {\n      // Fresh TermsEnum; seek to first term:\n      final FST.Arc<BytesRef> arc;\n      if (fr.index != null) {\n        arc = fr.index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n      } else {\n        arc = null;\n      }\n      currentFrame = pushFrame(arc, fr.rootCode, 0);\n      currentFrame.loadBlock();\n    }\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    assert !eof;\n    // if (DEBUG) {\n    //   System.out.println(\"\\nBTTR.next seg=\" + fr.parent.segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fr.fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n    //   printSeekState(System.out);\n    // }\n\n    if (currentFrame == staticFrame) {\n      // If seek was previously called and the term was\n      // cached, or seek(TermState) was called, usually\n      // caller is just going to pull a D/&PEnum or get\n      // docFreq, etc.  But, if they then call next(),\n      // this method catches up all internal state so next()\n      // works properly:\n      //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n      final boolean result = seekExact(term);\n      assert result;\n    }\n\n    // Pop finished blocks\n    while (currentFrame.nextEnt == currentFrame.entCount) {\n      if (!currentFrame.isLastInFloor) {\n        currentFrame.loadNextFloorBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  pop frame\");\n        if (currentFrame.ord == 0) {\n          //if (DEBUG) System.out.println(\"  return null\");\n          assert setEOF();\n          term.length = 0;\n          validIndexPrefix = 0;\n          currentFrame.rewind();\n          termExists = false;\n          return null;\n        }\n        final long lastFP = currentFrame.fpOrig;\n        currentFrame = stack[currentFrame.ord-1];\n\n        if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n          // We popped into a frame that's not loaded\n          // yet or not scan'd to the right entry\n          currentFrame.scanToFloorFrame(term);\n          currentFrame.loadBlock();\n          currentFrame.scanToSubBlock(lastFP);\n        }\n\n        // Note that the seek state (last seek) has been\n        // invalidated beyond this depth\n        validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n        //if (DEBUG) {\n        //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n        //}\n      }\n    }\n\n    while(true) {\n      if (currentFrame.next()) {\n        // Push to new block:\n        //if (DEBUG) System.out.println(\"  push frame\");\n        currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length);\n        // This is a \"next\" frame -- even if it's\n        // floor'd we must pretend it isn't so we don't\n        // try to scan to the right floor frame:\n        currentFrame.isFloor = false;\n        //currentFrame.hasTerms = true;\n        currentFrame.loadBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  return term=\" + term.utf8ToString() + \" \" + term + \" currentFrame.ord=\" + currentFrame.ord);\n        return term;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bcc4b6a839799ea8a62ca12ac44438c5607f786","date":1406654443,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#next().mjava","sourceNew":"  /* Decodes only the term bytes of the next term.  If caller then asks for\n     metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n     decode all metadata up to the current term. */\n  @Override\n  public BytesRef next() throws IOException {\n    if (in == null) {\n      // Fresh TermsEnum; seek to first term:\n      final FST.Arc<BytesRef> arc;\n      if (fr.index != null) {\n        arc = fr.index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n      } else {\n        arc = null;\n      }\n      currentFrame = pushFrame(arc, fr.rootCode, 0);\n      currentFrame.loadBlock();\n    }\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    assert !eof;\n    // if (DEBUG) {\n    //   System.out.println(\"\\nBTTR.next seg=\" + fr.parent.segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fr.fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n    //   printSeekState(System.out);\n    // }\n\n    if (currentFrame == staticFrame) {\n      // If seek was previously called and the term was\n      // cached, or seek(TermState) was called, usually\n      // caller is just going to pull a D/&PEnum or get\n      // docFreq, etc.  But, if they then call next(),\n      // this method catches up all internal state so next()\n      // works properly:\n      //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n      final boolean result = seekExact(term);\n      assert result;\n    }\n\n    // Pop finished blocks\n    while (currentFrame.nextEnt == currentFrame.entCount) {\n      if (!currentFrame.isLastInFloor) {\n        // Advance to next floor block\n        currentFrame.loadNextFloorBlock();\n        break;\n      } else {\n        //if (DEBUG) System.out.println(\"  pop frame\");\n        if (currentFrame.ord == 0) {\n          //if (DEBUG) System.out.println(\"  return null\");\n          assert setEOF();\n          term.length = 0;\n          validIndexPrefix = 0;\n          currentFrame.rewind();\n          termExists = false;\n          return null;\n        }\n        final long lastFP = currentFrame.fpOrig;\n        currentFrame = stack[currentFrame.ord-1];\n\n        if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n          // We popped into a frame that's not loaded\n          // yet or not scan'd to the right entry\n          currentFrame.scanToFloorFrame(term);\n          currentFrame.loadBlock();\n          currentFrame.scanToSubBlock(lastFP);\n        }\n\n        // Note that the seek state (last seek) has been\n        // invalidated beyond this depth\n        validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n        //if (DEBUG) {\n        //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n        //}\n      }\n    }\n\n    while(true) {\n      if (currentFrame.next()) {\n        // Push to new block:\n        //if (DEBUG) System.out.println(\"  push frame\");\n        currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length);\n        // This is a \"next\" frame -- even if it's\n        // floor'd we must pretend it isn't so we don't\n        // try to scan to the right floor frame:\n        currentFrame.isFloor = false;\n        //currentFrame.hasTerms = true;\n        currentFrame.loadBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  return term=\" + term.utf8ToString() + \" \" + term + \" currentFrame.ord=\" + currentFrame.ord);\n        return term;\n      }\n    }\n  }\n\n","sourceOld":"  /* Decodes only the term bytes of the next term.  If caller then asks for\n     metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n     decode all metadata up to the current term. */\n  @Override\n  public BytesRef next() throws IOException {\n    if (in == null) {\n      // Fresh TermsEnum; seek to first term:\n      final FST.Arc<BytesRef> arc;\n      if (fr.index != null) {\n        arc = fr.index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n      } else {\n        arc = null;\n      }\n      currentFrame = pushFrame(arc, fr.rootCode, 0);\n      currentFrame.loadBlock();\n    }\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    assert !eof;\n    // if (DEBUG) {\n    //   System.out.println(\"\\nBTTR.next seg=\" + fr.parent.segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fr.fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n    //   printSeekState(System.out);\n    // }\n\n    if (currentFrame == staticFrame) {\n      // If seek was previously called and the term was\n      // cached, or seek(TermState) was called, usually\n      // caller is just going to pull a D/&PEnum or get\n      // docFreq, etc.  But, if they then call next(),\n      // this method catches up all internal state so next()\n      // works properly:\n      //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n      final boolean result = seekExact(term);\n      assert result;\n    }\n\n    // Pop finished blocks\n    while (currentFrame.nextEnt == currentFrame.entCount) {\n      if (!currentFrame.isLastInFloor) {\n        currentFrame.loadNextFloorBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  pop frame\");\n        if (currentFrame.ord == 0) {\n          //if (DEBUG) System.out.println(\"  return null\");\n          assert setEOF();\n          term.length = 0;\n          validIndexPrefix = 0;\n          currentFrame.rewind();\n          termExists = false;\n          return null;\n        }\n        final long lastFP = currentFrame.fpOrig;\n        currentFrame = stack[currentFrame.ord-1];\n\n        if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n          // We popped into a frame that's not loaded\n          // yet or not scan'd to the right entry\n          currentFrame.scanToFloorFrame(term);\n          currentFrame.loadBlock();\n          currentFrame.scanToSubBlock(lastFP);\n        }\n\n        // Note that the seek state (last seek) has been\n        // invalidated beyond this depth\n        validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n        //if (DEBUG) {\n        //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n        //}\n      }\n    }\n\n    while(true) {\n      if (currentFrame.next()) {\n        // Push to new block:\n        //if (DEBUG) System.out.println(\"  push frame\");\n        currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length);\n        // This is a \"next\" frame -- even if it's\n        // floor'd we must pretend it isn't so we don't\n        // try to scan to the right floor frame:\n        currentFrame.isFloor = false;\n        //currentFrame.hasTerms = true;\n        currentFrame.loadBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  return term=\" + term.utf8ToString() + \" \" + term + \" currentFrame.ord=\" + currentFrame.ord);\n        return term;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f33b0fbfa9799ee8e87c59af19055bf0c62f0e0f","date":1406654493,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#next().mjava","sourceNew":"  /* Decodes only the term bytes of the next term.  If caller then asks for\n     metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n     decode all metadata up to the current term. */\n  @Override\n  public BytesRef next() throws IOException {\n    if (in == null) {\n      // Fresh TermsEnum; seek to first term:\n      final FST.Arc<BytesRef> arc;\n      if (fr.index != null) {\n        arc = fr.index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n      } else {\n        arc = null;\n      }\n      currentFrame = pushFrame(arc, fr.rootCode, 0);\n      currentFrame.loadBlock();\n    }\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    assert !eof;\n    // if (DEBUG) {\n    //   System.out.println(\"\\nBTTR.next seg=\" + fr.parent.segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fr.fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n    //   printSeekState(System.out);\n    // }\n\n    if (currentFrame == staticFrame) {\n      // If seek was previously called and the term was\n      // cached, or seek(TermState) was called, usually\n      // caller is just going to pull a D/&PEnum or get\n      // docFreq, etc.  But, if they then call next(),\n      // this method catches up all internal state so next()\n      // works properly:\n      //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n      final boolean result = seekExact(term);\n      assert result;\n    }\n\n    // Pop finished blocks\n    while (currentFrame.nextEnt == currentFrame.entCount) {\n      if (!currentFrame.isLastInFloor) {\n        currentFrame.loadNextFloorBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  pop frame\");\n        if (currentFrame.ord == 0) {\n          //if (DEBUG) System.out.println(\"  return null\");\n          assert setEOF();\n          term.length = 0;\n          validIndexPrefix = 0;\n          currentFrame.rewind();\n          termExists = false;\n          return null;\n        }\n        final long lastFP = currentFrame.fpOrig;\n        currentFrame = stack[currentFrame.ord-1];\n\n        if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n          // We popped into a frame that's not loaded\n          // yet or not scan'd to the right entry\n          currentFrame.scanToFloorFrame(term);\n          currentFrame.loadBlock();\n          currentFrame.scanToSubBlock(lastFP);\n        }\n\n        // Note that the seek state (last seek) has been\n        // invalidated beyond this depth\n        validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n        //if (DEBUG) {\n        //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n        //}\n      }\n    }\n\n    while(true) {\n      if (currentFrame.next()) {\n        // Push to new block:\n        //if (DEBUG) System.out.println(\"  push frame\");\n        currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length);\n        // This is a \"next\" frame -- even if it's\n        // floor'd we must pretend it isn't so we don't\n        // try to scan to the right floor frame:\n        currentFrame.isFloor = false;\n        //currentFrame.hasTerms = true;\n        currentFrame.loadBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  return term=\" + term.utf8ToString() + \" \" + term + \" currentFrame.ord=\" + currentFrame.ord);\n        return term;\n      }\n    }\n  }\n\n","sourceOld":"  /* Decodes only the term bytes of the next term.  If caller then asks for\n     metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n     decode all metadata up to the current term. */\n  @Override\n  public BytesRef next() throws IOException {\n    if (in == null) {\n      // Fresh TermsEnum; seek to first term:\n      final FST.Arc<BytesRef> arc;\n      if (fr.index != null) {\n        arc = fr.index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n      } else {\n        arc = null;\n      }\n      currentFrame = pushFrame(arc, fr.rootCode, 0);\n      currentFrame.loadBlock();\n    }\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    assert !eof;\n    // if (DEBUG) {\n    //   System.out.println(\"\\nBTTR.next seg=\" + fr.parent.segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fr.fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n    //   printSeekState(System.out);\n    // }\n\n    if (currentFrame == staticFrame) {\n      // If seek was previously called and the term was\n      // cached, or seek(TermState) was called, usually\n      // caller is just going to pull a D/&PEnum or get\n      // docFreq, etc.  But, if they then call next(),\n      // this method catches up all internal state so next()\n      // works properly:\n      //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n      final boolean result = seekExact(term);\n      assert result;\n    }\n\n    // Pop finished blocks\n    while (currentFrame.nextEnt == currentFrame.entCount) {\n      if (!currentFrame.isLastInFloor) {\n        // Advance to next floor block\n        currentFrame.loadNextFloorBlock();\n        break;\n      } else {\n        //if (DEBUG) System.out.println(\"  pop frame\");\n        if (currentFrame.ord == 0) {\n          //if (DEBUG) System.out.println(\"  return null\");\n          assert setEOF();\n          term.length = 0;\n          validIndexPrefix = 0;\n          currentFrame.rewind();\n          termExists = false;\n          return null;\n        }\n        final long lastFP = currentFrame.fpOrig;\n        currentFrame = stack[currentFrame.ord-1];\n\n        if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n          // We popped into a frame that's not loaded\n          // yet or not scan'd to the right entry\n          currentFrame.scanToFloorFrame(term);\n          currentFrame.loadBlock();\n          currentFrame.scanToSubBlock(lastFP);\n        }\n\n        // Note that the seek state (last seek) has been\n        // invalidated beyond this depth\n        validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n        //if (DEBUG) {\n        //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n        //}\n      }\n    }\n\n    while(true) {\n      if (currentFrame.next()) {\n        // Push to new block:\n        //if (DEBUG) System.out.println(\"  push frame\");\n        currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length);\n        // This is a \"next\" frame -- even if it's\n        // floor'd we must pretend it isn't so we don't\n        // try to scan to the right floor frame:\n        currentFrame.isFloor = false;\n        //currentFrame.hasTerms = true;\n        currentFrame.loadBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  return term=\" + term.utf8ToString() + \" \" + term + \" currentFrame.ord=\" + currentFrame.ord);\n        return term;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#next().mjava","sourceNew":"  /* Decodes only the term bytes of the next term.  If caller then asks for\n     metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n     decode all metadata up to the current term. */\n  @Override\n  public BytesRef next() throws IOException {\n    if (in == null) {\n      // Fresh TermsEnum; seek to first term:\n      final FST.Arc<BytesRef> arc;\n      if (fr.index != null) {\n        arc = fr.index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n      } else {\n        arc = null;\n      }\n      currentFrame = pushFrame(arc, fr.rootCode, 0);\n      currentFrame.loadBlock();\n    }\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    assert !eof;\n    // if (DEBUG) {\n    //   System.out.println(\"\\nBTTR.next seg=\" + fr.parent.segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fr.fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n    //   printSeekState(System.out);\n    // }\n\n    if (currentFrame == staticFrame) {\n      // If seek was previously called and the term was\n      // cached, or seek(TermState) was called, usually\n      // caller is just going to pull a D/&PEnum or get\n      // docFreq, etc.  But, if they then call next(),\n      // this method catches up all internal state so next()\n      // works properly:\n      //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n      final boolean result = seekExact(term.get());\n      assert result;\n    }\n\n    // Pop finished blocks\n    while (currentFrame.nextEnt == currentFrame.entCount) {\n      if (!currentFrame.isLastInFloor) {\n        currentFrame.loadNextFloorBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  pop frame\");\n        if (currentFrame.ord == 0) {\n          //if (DEBUG) System.out.println(\"  return null\");\n          assert setEOF();\n          term.clear();\n          validIndexPrefix = 0;\n          currentFrame.rewind();\n          termExists = false;\n          return null;\n        }\n        final long lastFP = currentFrame.fpOrig;\n        currentFrame = stack[currentFrame.ord-1];\n\n        if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n          // We popped into a frame that's not loaded\n          // yet or not scan'd to the right entry\n          currentFrame.scanToFloorFrame(term.get());\n          currentFrame.loadBlock();\n          currentFrame.scanToSubBlock(lastFP);\n        }\n\n        // Note that the seek state (last seek) has been\n        // invalidated beyond this depth\n        validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n        //if (DEBUG) {\n        //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n        //}\n      }\n    }\n\n    while(true) {\n      if (currentFrame.next()) {\n        // Push to new block:\n        //if (DEBUG) System.out.println(\"  push frame\");\n        currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length());\n        // This is a \"next\" frame -- even if it's\n        // floor'd we must pretend it isn't so we don't\n        // try to scan to the right floor frame:\n        currentFrame.isFloor = false;\n        //currentFrame.hasTerms = true;\n        currentFrame.loadBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  return term=\" + term.utf8ToString() + \" \" + term + \" currentFrame.ord=\" + currentFrame.ord);\n        return term.get();\n      }\n    }\n  }\n\n","sourceOld":"  /* Decodes only the term bytes of the next term.  If caller then asks for\n     metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n     decode all metadata up to the current term. */\n  @Override\n  public BytesRef next() throws IOException {\n    if (in == null) {\n      // Fresh TermsEnum; seek to first term:\n      final FST.Arc<BytesRef> arc;\n      if (fr.index != null) {\n        arc = fr.index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n      } else {\n        arc = null;\n      }\n      currentFrame = pushFrame(arc, fr.rootCode, 0);\n      currentFrame.loadBlock();\n    }\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    assert !eof;\n    // if (DEBUG) {\n    //   System.out.println(\"\\nBTTR.next seg=\" + fr.parent.segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fr.fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n    //   printSeekState(System.out);\n    // }\n\n    if (currentFrame == staticFrame) {\n      // If seek was previously called and the term was\n      // cached, or seek(TermState) was called, usually\n      // caller is just going to pull a D/&PEnum or get\n      // docFreq, etc.  But, if they then call next(),\n      // this method catches up all internal state so next()\n      // works properly:\n      //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n      final boolean result = seekExact(term);\n      assert result;\n    }\n\n    // Pop finished blocks\n    while (currentFrame.nextEnt == currentFrame.entCount) {\n      if (!currentFrame.isLastInFloor) {\n        currentFrame.loadNextFloorBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  pop frame\");\n        if (currentFrame.ord == 0) {\n          //if (DEBUG) System.out.println(\"  return null\");\n          assert setEOF();\n          term.length = 0;\n          validIndexPrefix = 0;\n          currentFrame.rewind();\n          termExists = false;\n          return null;\n        }\n        final long lastFP = currentFrame.fpOrig;\n        currentFrame = stack[currentFrame.ord-1];\n\n        if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n          // We popped into a frame that's not loaded\n          // yet or not scan'd to the right entry\n          currentFrame.scanToFloorFrame(term);\n          currentFrame.loadBlock();\n          currentFrame.scanToSubBlock(lastFP);\n        }\n\n        // Note that the seek state (last seek) has been\n        // invalidated beyond this depth\n        validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n        //if (DEBUG) {\n        //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n        //}\n      }\n    }\n\n    while(true) {\n      if (currentFrame.next()) {\n        // Push to new block:\n        //if (DEBUG) System.out.println(\"  push frame\");\n        currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length);\n        // This is a \"next\" frame -- even if it's\n        // floor'd we must pretend it isn't so we don't\n        // try to scan to the right floor frame:\n        currentFrame.isFloor = false;\n        //currentFrame.hasTerms = true;\n        currentFrame.loadBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  return term=\" + term.utf8ToString() + \" \" + term + \" currentFrame.ord=\" + currentFrame.ord);\n        return term;\n      }\n    }\n  }\n\n","bugFix":["e50f0da93c6dcee20d8792637b1786e2c34975e9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#next().mjava","sourceNew":"  /* Decodes only the term bytes of the next term.  If caller then asks for\n     metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n     decode all metadata up to the current term. */\n  @Override\n  public BytesRef next() throws IOException {\n    if (in == null) {\n      // Fresh TermsEnum; seek to first term:\n      final FST.Arc<BytesRef> arc;\n      if (fr.index != null) {\n        arc = fr.index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n      } else {\n        arc = null;\n      }\n      currentFrame = pushFrame(arc, fr.rootCode, 0);\n      currentFrame.loadBlock();\n    }\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    assert !eof;\n    // if (DEBUG) {\n    //   System.out.println(\"\\nBTTR.next seg=\" + fr.parent.segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fr.fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n    //   printSeekState(System.out);\n    // }\n\n    if (currentFrame == staticFrame) {\n      // If seek was previously called and the term was\n      // cached, or seek(TermState) was called, usually\n      // caller is just going to pull a D/&PEnum or get\n      // docFreq, etc.  But, if they then call next(),\n      // this method catches up all internal state so next()\n      // works properly:\n      //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n      final boolean result = seekExact(term.get());\n      assert result;\n    }\n\n    // Pop finished blocks\n    while (currentFrame.nextEnt == currentFrame.entCount) {\n      if (!currentFrame.isLastInFloor) {\n        // Advance to next floor block\n        currentFrame.loadNextFloorBlock();\n        break;\n      } else {\n        //if (DEBUG) System.out.println(\"  pop frame\");\n        if (currentFrame.ord == 0) {\n          //if (DEBUG) System.out.println(\"  return null\");\n          assert setEOF();\n          term.clear();\n          validIndexPrefix = 0;\n          currentFrame.rewind();\n          termExists = false;\n          return null;\n        }\n        final long lastFP = currentFrame.fpOrig;\n        currentFrame = stack[currentFrame.ord-1];\n\n        if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n          // We popped into a frame that's not loaded\n          // yet or not scan'd to the right entry\n          currentFrame.scanToFloorFrame(term.get());\n          currentFrame.loadBlock();\n          currentFrame.scanToSubBlock(lastFP);\n        }\n\n        // Note that the seek state (last seek) has been\n        // invalidated beyond this depth\n        validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n        //if (DEBUG) {\n        //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n        //}\n      }\n    }\n\n    while(true) {\n      if (currentFrame.next()) {\n        // Push to new block:\n        //if (DEBUG) System.out.println(\"  push frame\");\n        currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length());\n        // This is a \"next\" frame -- even if it's\n        // floor'd we must pretend it isn't so we don't\n        // try to scan to the right floor frame:\n        currentFrame.loadBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  return term=\" + brToString(term) + \" currentFrame.ord=\" + currentFrame.ord);\n        return term.get();\n      }\n    }\n  }\n\n","sourceOld":"  /* Decodes only the term bytes of the next term.  If caller then asks for\n     metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n     decode all metadata up to the current term. */\n  @Override\n  public BytesRef next() throws IOException {\n    if (in == null) {\n      // Fresh TermsEnum; seek to first term:\n      final FST.Arc<BytesRef> arc;\n      if (fr.index != null) {\n        arc = fr.index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n      } else {\n        arc = null;\n      }\n      currentFrame = pushFrame(arc, fr.rootCode, 0);\n      currentFrame.loadBlock();\n    }\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    assert !eof;\n    // if (DEBUG) {\n    //   System.out.println(\"\\nBTTR.next seg=\" + fr.parent.segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fr.fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n    //   printSeekState(System.out);\n    // }\n\n    if (currentFrame == staticFrame) {\n      // If seek was previously called and the term was\n      // cached, or seek(TermState) was called, usually\n      // caller is just going to pull a D/&PEnum or get\n      // docFreq, etc.  But, if they then call next(),\n      // this method catches up all internal state so next()\n      // works properly:\n      //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n      final boolean result = seekExact(term.get());\n      assert result;\n    }\n\n    // Pop finished blocks\n    while (currentFrame.nextEnt == currentFrame.entCount) {\n      if (!currentFrame.isLastInFloor) {\n        currentFrame.loadNextFloorBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  pop frame\");\n        if (currentFrame.ord == 0) {\n          //if (DEBUG) System.out.println(\"  return null\");\n          assert setEOF();\n          term.clear();\n          validIndexPrefix = 0;\n          currentFrame.rewind();\n          termExists = false;\n          return null;\n        }\n        final long lastFP = currentFrame.fpOrig;\n        currentFrame = stack[currentFrame.ord-1];\n\n        if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n          // We popped into a frame that's not loaded\n          // yet or not scan'd to the right entry\n          currentFrame.scanToFloorFrame(term.get());\n          currentFrame.loadBlock();\n          currentFrame.scanToSubBlock(lastFP);\n        }\n\n        // Note that the seek state (last seek) has been\n        // invalidated beyond this depth\n        validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n        //if (DEBUG) {\n        //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n        //}\n      }\n    }\n\n    while(true) {\n      if (currentFrame.next()) {\n        // Push to new block:\n        //if (DEBUG) System.out.println(\"  push frame\");\n        currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length());\n        // This is a \"next\" frame -- even if it's\n        // floor'd we must pretend it isn't so we don't\n        // try to scan to the right floor frame:\n        currentFrame.isFloor = false;\n        //currentFrame.hasTerms = true;\n        currentFrame.loadBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  return term=\" + term.utf8ToString() + \" \" + term + \" currentFrame.ord=\" + currentFrame.ord);\n        return term.get();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum#next().mjava","sourceNew":"  /* Decodes only the term bytes of the next term.  If caller then asks for\n     metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n     decode all metadata up to the current term. */\n  @Override\n  public BytesRef next() throws IOException {\n    if (in == null) {\n      // Fresh TermsEnum; seek to first term:\n      final FST.Arc<BytesRef> arc;\n      if (fr.index != null) {\n        arc = fr.index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n      } else {\n        arc = null;\n      }\n      currentFrame = pushFrame(arc, fr.rootCode, 0);\n      currentFrame.loadBlock();\n    }\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    assert !eof;\n    // if (DEBUG) {\n    //   System.out.println(\"\\nBTTR.next seg=\" + fr.parent.segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fr.fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n    //   printSeekState(System.out);\n    // }\n\n    if (currentFrame == staticFrame) {\n      // If seek was previously called and the term was\n      // cached, or seek(TermState) was called, usually\n      // caller is just going to pull a D/&PEnum or get\n      // docFreq, etc.  But, if they then call next(),\n      // this method catches up all internal state so next()\n      // works properly:\n      //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n      final boolean result = seekExact(term.get());\n      assert result;\n    }\n\n    // Pop finished blocks\n    while (currentFrame.nextEnt == currentFrame.entCount) {\n      if (!currentFrame.isLastInFloor) {\n        // Advance to next floor block\n        currentFrame.loadNextFloorBlock();\n        break;\n      } else {\n        //if (DEBUG) System.out.println(\"  pop frame\");\n        if (currentFrame.ord == 0) {\n          //if (DEBUG) System.out.println(\"  return null\");\n          assert setEOF();\n          term.clear();\n          validIndexPrefix = 0;\n          currentFrame.rewind();\n          termExists = false;\n          return null;\n        }\n        final long lastFP = currentFrame.fpOrig;\n        currentFrame = stack[currentFrame.ord-1];\n\n        if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n          // We popped into a frame that's not loaded\n          // yet or not scan'd to the right entry\n          currentFrame.scanToFloorFrame(term.get());\n          currentFrame.loadBlock();\n          currentFrame.scanToSubBlock(lastFP);\n        }\n\n        // Note that the seek state (last seek) has been\n        // invalidated beyond this depth\n        validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n        //if (DEBUG) {\n        //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n        //}\n      }\n    }\n\n    while(true) {\n      if (currentFrame.next()) {\n        // Push to new block:\n        //if (DEBUG) System.out.println(\"  push frame\");\n        currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length());\n        // This is a \"next\" frame -- even if it's\n        // floor'd we must pretend it isn't so we don't\n        // try to scan to the right floor frame:\n        currentFrame.loadBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  return term=\" + brToString(term) + \" currentFrame.ord=\" + currentFrame.ord);\n        return term.get();\n      }\n    }\n  }\n\n","sourceOld":"  /* Decodes only the term bytes of the next term.  If caller then asks for\n     metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n     decode all metadata up to the current term. */\n  @Override\n  public BytesRef next() throws IOException {\n    if (in == null) {\n      // Fresh TermsEnum; seek to first term:\n      final FST.Arc<BytesRef> arc;\n      if (fr.index != null) {\n        arc = fr.index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n      } else {\n        arc = null;\n      }\n      currentFrame = pushFrame(arc, fr.rootCode, 0);\n      currentFrame.loadBlock();\n    }\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    assert !eof;\n    // if (DEBUG) {\n    //   System.out.println(\"\\nBTTR.next seg=\" + fr.parent.segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fr.fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n    //   printSeekState(System.out);\n    // }\n\n    if (currentFrame == staticFrame) {\n      // If seek was previously called and the term was\n      // cached, or seek(TermState) was called, usually\n      // caller is just going to pull a D/&PEnum or get\n      // docFreq, etc.  But, if they then call next(),\n      // this method catches up all internal state so next()\n      // works properly:\n      //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n      final boolean result = seekExact(term.get());\n      assert result;\n    }\n\n    // Pop finished blocks\n    while (currentFrame.nextEnt == currentFrame.entCount) {\n      if (!currentFrame.isLastInFloor) {\n        currentFrame.loadNextFloorBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  pop frame\");\n        if (currentFrame.ord == 0) {\n          //if (DEBUG) System.out.println(\"  return null\");\n          assert setEOF();\n          term.clear();\n          validIndexPrefix = 0;\n          currentFrame.rewind();\n          termExists = false;\n          return null;\n        }\n        final long lastFP = currentFrame.fpOrig;\n        currentFrame = stack[currentFrame.ord-1];\n\n        if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n          // We popped into a frame that's not loaded\n          // yet or not scan'd to the right entry\n          currentFrame.scanToFloorFrame(term.get());\n          currentFrame.loadBlock();\n          currentFrame.scanToSubBlock(lastFP);\n        }\n\n        // Note that the seek state (last seek) has been\n        // invalidated beyond this depth\n        validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n        //if (DEBUG) {\n        //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n        //}\n      }\n    }\n\n    while(true) {\n      if (currentFrame.next()) {\n        // Push to new block:\n        //if (DEBUG) System.out.println(\"  push frame\");\n        currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length());\n        // This is a \"next\" frame -- even if it's\n        // floor'd we must pretend it isn't so we don't\n        // try to scan to the right floor frame:\n        currentFrame.isFloor = false;\n        //currentFrame.hasTerms = true;\n        currentFrame.loadBlock();\n      } else {\n        //if (DEBUG) System.out.println(\"  return term=\" + term.utf8ToString() + \" \" + term + \" currentFrame.ord=\" + currentFrame.ord);\n        return term.get();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcc4b6a839799ea8a62ca12ac44438c5607f786":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20"],"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20":["3251bdaf728baf81f779183e464984bc769ed9c7"],"f33b0fbfa9799ee8e87c59af19055bf0c62f0e0f":["6bcc4b6a839799ea8a62ca12ac44438c5607f786"],"e50f0da93c6dcee20d8792637b1786e2c34975e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","3e8715d826e588419327562287d5d6a8040d63d6"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["f33b0fbfa9799ee8e87c59af19055bf0c62f0e0f"],"3e8715d826e588419327562287d5d6a8040d63d6":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e8715d826e588419327562287d5d6a8040d63d6"],"3251bdaf728baf81f779183e464984bc769ed9c7":["e50f0da93c6dcee20d8792637b1786e2c34975e9"]},"commit2Childs":{"6bcc4b6a839799ea8a62ca12ac44438c5607f786":["f33b0fbfa9799ee8e87c59af19055bf0c62f0e0f"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["6bcc4b6a839799ea8a62ca12ac44438c5607f786"],"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"f33b0fbfa9799ee8e87c59af19055bf0c62f0e0f":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"e50f0da93c6dcee20d8792637b1786e2c34975e9":["3251bdaf728baf81f779183e464984bc769ed9c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","e50f0da93c6dcee20d8792637b1786e2c34975e9"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3251bdaf728baf81f779183e464984bc769ed9c7":["4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}