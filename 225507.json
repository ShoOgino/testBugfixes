{"path":"lucene/core/src/java/org/apache/lucene/util/PriorityQueue#updateTop().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PriorityQueue#updateTop().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PriorityQueue#updateTop().mjava","sourceNew":"  /**\n   * Should be called when the Object at top changes values. Still log(n) worst\n   * case, but it's at least twice as fast to\n   * \n   * <pre>\n   * pq.top().change();\n   * pq.updateTop();\n   * </pre>\n   * \n   * instead of\n   * \n   * <pre>\n   * o = pq.pop();\n   * o.change();\n   * pq.push(o);\n   * </pre>\n   * \n   * @return the new 'top' element.\n   */\n  public final T updateTop() {\n    downHeap();\n    return heap[1];\n  }\n\n","sourceOld":"  /**\n   * Should be called when the Object at top changes values. Still log(n) worst\n   * case, but it's at least twice as fast to\n   * \n   * <pre>\n   * pq.top().change();\n   * pq.updateTop();\n   * </pre>\n   * \n   * instead of\n   * \n   * <pre>\n   * o = pq.pop();\n   * o.change();\n   * pq.push(o);\n   * </pre>\n   * \n   * @return the new 'top' element.\n   */\n  public final T updateTop() {\n    downHeap();\n    return heap[1];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8471c0f357621e859602d44e1af230581b739319","date":1347468766,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PriorityQueue#updateTop().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PriorityQueue#updateTop().mjava","sourceNew":"  /**\n   * Should be called when the Object at top changes values. Still log(n) worst\n   * case, but it's at least twice as fast to\n   * \n   * <pre class=\"prettyprint\">\n   * pq.top().change();\n   * pq.updateTop();\n   * </pre>\n   * \n   * instead of\n   * \n   * <pre class=\"prettyprint\">\n   * o = pq.pop();\n   * o.change();\n   * pq.push(o);\n   * </pre>\n   * \n   * @return the new 'top' element.\n   */\n  public final T updateTop() {\n    downHeap();\n    return heap[1];\n  }\n\n","sourceOld":"  /**\n   * Should be called when the Object at top changes values. Still log(n) worst\n   * case, but it's at least twice as fast to\n   * \n   * <pre>\n   * pq.top().change();\n   * pq.updateTop();\n   * </pre>\n   * \n   * instead of\n   * \n   * <pre>\n   * o = pq.pop();\n   * o.change();\n   * pq.push(o);\n   * </pre>\n   * \n   * @return the new 'top' element.\n   */\n  public final T updateTop() {\n    downHeap();\n    return heap[1];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45ccb604e99f21f1c05722c0e28bcfa64b94a861","date":1423735816,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PriorityQueue#updateTop().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PriorityQueue#updateTop().mjava","sourceNew":"  /**\n   * Should be called when the Object at top changes values. Still log(n) worst\n   * case, but it's at least twice as fast to\n   * \n   * <pre class=\"prettyprint\">\n   * pq.top().change();\n   * pq.updateTop();\n   * </pre>\n   * \n   * instead of\n   * \n   * <pre class=\"prettyprint\">\n   * o = pq.pop();\n   * o.change();\n   * pq.push(o);\n   * </pre>\n   * \n   * @return the new 'top' element.\n   */\n  public final T updateTop() {\n    downHeap(1);\n    return heap[1];\n  }\n\n","sourceOld":"  /**\n   * Should be called when the Object at top changes values. Still log(n) worst\n   * case, but it's at least twice as fast to\n   * \n   * <pre class=\"prettyprint\">\n   * pq.top().change();\n   * pq.updateTop();\n   * </pre>\n   * \n   * instead of\n   * \n   * <pre class=\"prettyprint\">\n   * o = pq.pop();\n   * o.change();\n   * pq.push(o);\n   * </pre>\n   * \n   * @return the new 'top' element.\n   */\n  public final T updateTop() {\n    downHeap();\n    return heap[1];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac8ce4febd838561b4317a75f81313066e6d91c3","date":1449851410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PriorityQueue#updateTop().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PriorityQueue#updateTop().mjava","sourceNew":"  /**\n   * Should be called when the Object at top changes values. Still log(n) worst\n   * case, but it's at least twice as fast to\n   *\n   * <pre class=\"prettyprint\">\n   * pq.top().change();\n   * pq.updateTop();\n   * </pre>\n   *\n   * instead of\n   *\n   * <pre class=\"prettyprint\">\n   * o = pq.pop();\n   * o.change();\n   * pq.push(o);\n   * </pre>\n   *\n   * @return the new 'top' element.\n   */\n  public final T updateTop() {\n    downHeap(1);\n    return heap[1];\n  }\n\n","sourceOld":"  /**\n   * Should be called when the Object at top changes values. Still log(n) worst\n   * case, but it's at least twice as fast to\n   * \n   * <pre class=\"prettyprint\">\n   * pq.top().change();\n   * pq.updateTop();\n   * </pre>\n   * \n   * instead of\n   * \n   * <pre class=\"prettyprint\">\n   * o = pq.pop();\n   * o.change();\n   * pq.push(o);\n   * </pre>\n   * \n   * @return the new 'top' element.\n   */\n  public final T updateTop() {\n    downHeap(1);\n    return heap[1];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"45ccb604e99f21f1c05722c0e28bcfa64b94a861":["8471c0f357621e859602d44e1af230581b739319"],"8471c0f357621e859602d44e1af230581b739319":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac8ce4febd838561b4317a75f81313066e6d91c3":["45ccb604e99f21f1c05722c0e28bcfa64b94a861"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac8ce4febd838561b4317a75f81313066e6d91c3"]},"commit2Childs":{"45ccb604e99f21f1c05722c0e28bcfa64b94a861":["ac8ce4febd838561b4317a75f81313066e6d91c3"],"8471c0f357621e859602d44e1af230581b739319":["45ccb604e99f21f1c05722c0e28bcfa64b94a861"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8471c0f357621e859602d44e1af230581b739319"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ac8ce4febd838561b4317a75f81313066e6d91c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}