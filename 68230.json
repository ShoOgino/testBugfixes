{"path":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5881fc8ed473e382dd02b603cb223bdc252b96c3","date":1358175432,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/java/4_0/demo.html for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bf41419d452997826ec5f17684993377be77f49","date":1386629618,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_50);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    // :Post-Release-Update-Version.LUCENE_XY:\n    QueryParser parser = new QueryParser(Version.LUCENE_50, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":["81ea17596392ebd5d12741eb9e3b2516258b9413"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_50);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    // :Post-Release-Update-Version.LUCENE_XY:\n    QueryParser parser = new QueryParser(Version.LUCENE_50, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_40, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_50);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), StandardCharsets.UTF_8));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));\n    }\n    // :Post-Release-Update-Version.LUCENE_XY:\n    QueryParser parser = new QueryParser(Version.LUCENE_50, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_50);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    // :Post-Release-Update-Version.LUCENE_XY:\n    QueryParser parser = new QueryParser(Version.LUCENE_50, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_50);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), StandardCharsets.UTF_8));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));\n    }\n    // :Post-Release-Update-Version.LUCENE_XY:\n    QueryParser parser = new QueryParser(Version.LUCENE_50, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_50);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), \"UTF-8\"));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    // :Post-Release-Update-Version.LUCENE_XY:\n    QueryParser parser = new QueryParser(Version.LUCENE_50, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd330c9d05eacbd6e952fe0dea852e7ae037eb50","date":1398873035,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_5_0);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), StandardCharsets.UTF_8));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));\n    }\n    // :Post-Release-Update-Version.LUCENE_XY:\n    QueryParser parser = new QueryParser(Version.LUCENE_5_0, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_50);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), StandardCharsets.UTF_8));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));\n    }\n    // :Post-Release-Update-Version.LUCENE_XY:\n    QueryParser parser = new QueryParser(Version.LUCENE_50, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), StandardCharsets.UTF_8));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));\n    }\n    QueryParser parser = new QueryParser(field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_5_0);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), StandardCharsets.UTF_8));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));\n    }\n    // :Post-Release-Update-Version.LUCENE_XY:\n    QueryParser parser = new QueryParser(Version.LUCENE_5_0, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_5_0);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), StandardCharsets.UTF_8));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));\n    }\n    // :Post-Release-Update-Version.LUCENE_XY:\n    QueryParser parser = new QueryParser(Version.LUCENE_5_0, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), StandardCharsets.UTF_8));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));\n    }\n    QueryParser parser = new QueryParser(field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), StandardCharsets.UTF_8));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));\n    }\n    QueryParser parser = new QueryParser(field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    // :Post-Release-Update-Version.LUCENE_XY:\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_5_0);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), StandardCharsets.UTF_8));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));\n    }\n    // :Post-Release-Update-Version.LUCENE_XY:\n    QueryParser parser = new QueryParser(Version.LUCENE_5_0, field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(Paths.get(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = Files.newBufferedReader(Paths.get(queries), StandardCharsets.UTF_8);\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));\n    }\n    QueryParser parser = new QueryParser(field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new InputStreamReader(new FileInputStream(queries), StandardCharsets.UTF_8));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));\n    }\n    QueryParser parser = new QueryParser(field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(Paths.get(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = Files.newBufferedReader(Paths.get(queries), StandardCharsets.UTF_8);\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));\n    }\n    QueryParser parser = new QueryParser(field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-query string] [-raw] [-paging hitsPerPage]\\n\\nSee http://lucene.apache.org/core/4_1_0/demo/ for details.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String queryString = null;\n    int hitsPerPage = 10;\n    \n    for(int i = 0;i < args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-query\".equals(args[i])) {\n        queryString = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-paging\".equals(args[i])) {\n        hitsPerPage = Integer.parseInt(args[i+1]);\n        if (hitsPerPage <= 0) {\n          System.err.println(\"There must be at least 1 hit per page.\");\n          System.exit(1);\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = DirectoryReader.open(FSDirectory.open(Paths.get(index)));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer();\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = Files.newBufferedReader(Paths.get(queries), StandardCharsets.UTF_8);\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));\n    }\n    QueryParser parser = new QueryParser(field, analyzer);\n    while (true) {\n      if (queries == null && queryString == null) {                        // prompt the user\n        System.out.println(\"Enter query: \");\n      }\n\n      String line = queryString != null ? queryString : in.readLine();\n\n      if (line == null || line.length() == -1) {\n        break;\n      }\n\n      line = line.trim();\n      if (line.length() == 0) {\n        break;\n      }\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);\n\n      if (queryString != null) {\n        break;\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["0bf41419d452997826ec5f17684993377be77f49","7d89d7e4e5101347833eea558851bf4209218619"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","5881fc8ed473e382dd02b603cb223bdc252b96c3"],"f4abec28b874149a7223e32cc7a01704c27790de":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"7d89d7e4e5101347833eea558851bf4209218619":["0bf41419d452997826ec5f17684993377be77f49"],"5881fc8ed473e382dd02b603cb223bdc252b96c3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0bf41419d452997826ec5f17684993377be77f49":["5881fc8ed473e382dd02b603cb223bdc252b96c3"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["f4abec28b874149a7223e32cc7a01704c27790de"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["7d89d7e4e5101347833eea558851bf4209218619"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["5881fc8ed473e382dd02b603cb223bdc252b96c3","0bf41419d452997826ec5f17684993377be77f49"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"f4abec28b874149a7223e32cc7a01704c27790de":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"5881fc8ed473e382dd02b603cb223bdc252b96c3":["8917bfede3b4ca30f4305c1e391e9218959cd723","0bf41419d452997826ec5f17684993377be77f49","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"0bf41419d452997826ec5f17684993377be77f49":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["8917bfede3b4ca30f4305c1e391e9218959cd723","5881fc8ed473e382dd02b603cb223bdc252b96c3"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","8917bfede3b4ca30f4305c1e391e9218959cd723","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}