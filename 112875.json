{"path":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  public static String toString(Query query, IndexSchema schema) {\n    try {\n      StringBuilder sb = new StringBuilder();\n      toString(query, schema, sb, 0);\n      return sb.toString();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c686ad76bb74d110ec3c727914fb5693a7da23","date":1158901446,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","sourceNew":"  /**\n   * Formats a Query for debugging, using the IndexSchema to make \n   * complex field types readable.\n   *\n   * <p>\n   * The benefit of using this method instead of calling \n   * <code>Query.toString</code> directly is that it knows about the data\n   *  types of each field, so any field which is encoded in a particularly \n   * complex way is still readable.  The downside is thta it only knows \n   * about built in Query types, and will not be able to format custom \n   * Query classes.\n   * </p>\n   */\n  public static String toString(Query query, IndexSchema schema) {\n    try {\n      StringBuilder sb = new StringBuilder();\n      toString(query, schema, sb, 0);\n      return sb.toString();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public static String toString(Query query, IndexSchema schema) {\n    try {\n      StringBuilder sb = new StringBuilder();\n      toString(query, schema, sb, 0);\n      return sb.toString();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e13ce267b36e678708cf6e6621195b06ddb10354","date":1166692400,"type":3,"author":"Bertrand Delacretaz","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","sourceNew":"  /**\n   * Formats a Query for debugging, using the IndexSchema to make \n   * complex field types readable.\n   *\n   * <p>\n   * The benefit of using this method instead of calling \n   * <code>Query.toString</code> directly is that it knows about the data\n   * types of each field, so any field which is encoded in a particularly \n   * complex way is still readable. The downside is that it only knows \n   * about built in Query types, and will not be able to format custom \n   * Query classes.\n   * </p>\n   */\n  public static String toString(Query query, IndexSchema schema) {\n    try {\n      StringBuilder sb = new StringBuilder();\n      toString(query, schema, sb, 0);\n      return sb.toString();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Formats a Query for debugging, using the IndexSchema to make \n   * complex field types readable.\n   *\n   * <p>\n   * The benefit of using this method instead of calling \n   * <code>Query.toString</code> directly is that it knows about the data\n   *  types of each field, so any field which is encoded in a particularly \n   * complex way is still readable.  The downside is thta it only knows \n   * about built in Query types, and will not be able to format custom \n   * Query classes.\n   * </p>\n   */\n  public static String toString(Query query, IndexSchema schema) {\n    try {\n      StringBuilder sb = new StringBuilder();\n      toString(query, schema, sb, 0);\n      return sb.toString();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32ef722831135736529762b4b97a13dd58b06f66","date":1260567610,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","sourceNew":"  /**\n   * Formats a Query for debugging, using the IndexSchema to make\n   * complex field types readable.\n   * <p/>\n   * <p>\n   * The benefit of using this method instead of calling\n   * <code>Query.toString</code> directly is that it knows about the data\n   * types of each field, so any field which is encoded in a particularly\n   * complex way is still readable. The downside is that it only knows\n   * about built in Query types, and will not be able to format custom\n   * Query classes.\n   * </p>\n   */\n  public static String toString(Query query, IndexSchema schema) {\n    try {\n      StringBuilder sb = new StringBuilder();\n      toString(query, schema, sb, 0);\n      return sb.toString();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Formats a Query for debugging, using the IndexSchema to make \n   * complex field types readable.\n   *\n   * <p>\n   * The benefit of using this method instead of calling \n   * <code>Query.toString</code> directly is that it knows about the data\n   * types of each field, so any field which is encoded in a particularly \n   * complex way is still readable. The downside is that it only knows \n   * about built in Query types, and will not be able to format custom \n   * Query classes.\n   * </p>\n   */\n  public static String toString(Query query, IndexSchema schema) {\n    try {\n      StringBuilder sb = new StringBuilder();\n      toString(query, schema, sb, 0);\n      return sb.toString();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#toString(Query,IndexSchema).mjava","sourceNew":"  /**\n   * Formats a Query for debugging, using the IndexSchema to make\n   * complex field types readable.\n   * <p/>\n   * <p>\n   * The benefit of using this method instead of calling\n   * <code>Query.toString</code> directly is that it knows about the data\n   * types of each field, so any field which is encoded in a particularly\n   * complex way is still readable. The downside is that it only knows\n   * about built in Query types, and will not be able to format custom\n   * Query classes.\n   * </p>\n   */\n  public static String toString(Query query, IndexSchema schema) {\n    try {\n      StringBuilder sb = new StringBuilder();\n      toString(query, schema, sb, 0);\n      return sb.toString();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Formats a Query for debugging, using the IndexSchema to make\n   * complex field types readable.\n   * <p/>\n   * <p>\n   * The benefit of using this method instead of calling\n   * <code>Query.toString</code> directly is that it knows about the data\n   * types of each field, so any field which is encoded in a particularly\n   * complex way is still readable. The downside is that it only knows\n   * about built in Query types, and will not be able to format custom\n   * Query classes.\n   * </p>\n   */\n  public static String toString(Query query, IndexSchema schema) {\n    try {\n      StringBuilder sb = new StringBuilder();\n      toString(query, schema, sb, 0);\n      return sb.toString();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"79c686ad76bb74d110ec3c727914fb5693a7da23":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"32ef722831135736529762b4b97a13dd58b06f66":["e13ce267b36e678708cf6e6621195b06ddb10354"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"e13ce267b36e678708cf6e6621195b06ddb10354":["79c686ad76bb74d110ec3c727914fb5693a7da23"],"ad94625fb8d088209f46650c8097196fec67f00c":["32ef722831135736529762b4b97a13dd58b06f66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"79c686ad76bb74d110ec3c727914fb5693a7da23":["e13ce267b36e678708cf6e6621195b06ddb10354"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["79c686ad76bb74d110ec3c727914fb5693a7da23"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"32ef722831135736529762b4b97a13dd58b06f66":["ad94625fb8d088209f46650c8097196fec67f00c"],"e13ce267b36e678708cf6e6621195b06ddb10354":["32ef722831135736529762b4b97a13dd58b06f66"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}