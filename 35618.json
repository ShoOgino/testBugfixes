{"path":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Query).mjava","commits":[{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Filter).mjava","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Query filter) throws Exception {\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n\n    if (filter != null) {\n      q1 = new BooleanQuery.Builder()\n          .add(q1, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n      q2 = new BooleanQuery.Builder()\n          .add(q2, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n    }\n    // we test both INDEXORDER and RELEVANCE because we want to test needsScores=true/false\n    for (Sort sort : new Sort[] { Sort.INDEXORDER, Sort.RELEVANCE }) {\n      // not efficient, but simple!\n      TopDocs td1 = s1.search(q1, reader.maxDoc(), sort);\n      TopDocs td2 = s2.search(q2, reader.maxDoc(), sort);\n      assertTrue(\"too many hits: \" + td1.totalHits + \" > \" + td2.totalHits, td1.totalHits <= td2.totalHits);\n      \n      // fill the superset into a bitset\n      BitSet bitset = new BitSet();\n      for (int i = 0; i < td2.scoreDocs.length; i++) {\n        bitset.set(td2.scoreDocs[i].doc);\n      }\n      \n      // check in the subset, that every bit was set by the super\n      for (int i = 0; i < td1.scoreDocs.length; i++) {\n        assertTrue(bitset.get(td1.scoreDocs[i].doc));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n\n    if (filter != null) {\n      q1 = new FilteredQuery(q1, filter);\n      q2 = new FilteredQuery(q2, filter);\n    }\n    // we test both INDEXORDER and RELEVANCE because we want to test needsScores=true/false\n    for (Sort sort : new Sort[] { Sort.INDEXORDER, Sort.RELEVANCE }) {\n      // not efficient, but simple!\n      TopDocs td1 = s1.search(q1, reader.maxDoc(), sort);\n      TopDocs td2 = s2.search(q2, reader.maxDoc(), sort);\n      assertTrue(\"too many hits: \" + td1.totalHits + \" > \" + td2.totalHits, td1.totalHits <= td2.totalHits);\n      \n      // fill the superset into a bitset\n      BitSet bitset = new BitSet();\n      for (int i = 0; i < td2.scoreDocs.length; i++) {\n        bitset.set(td2.scoreDocs[i].doc);\n      }\n      \n      // check in the subset, that every bit was set by the super\n      for (int i = 0; i < td1.scoreDocs.length; i++) {\n        assertTrue(bitset.get(td1.scoreDocs[i].doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query,Query).mjava","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Query filter) throws Exception {\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n\n    if (filter != null) {\n      q1 = new BooleanQuery.Builder()\n          .add(q1, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n      q2 = new BooleanQuery.Builder()\n          .add(q2, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n    }\n    // we test both INDEXORDER and RELEVANCE because we want to test needsScores=true/false\n    for (Sort sort : new Sort[] { Sort.INDEXORDER, Sort.RELEVANCE }) {\n      // not efficient, but simple!\n      TopDocs td1 = s1.search(q1, reader.maxDoc(), sort);\n      TopDocs td2 = s2.search(q2, reader.maxDoc(), sort);\n      assertTrue(\"too many hits: \" + td1.totalHits.value + \" > \" + td2.totalHits.value, td1.totalHits.value <= td2.totalHits.value);\n      \n      // fill the superset into a bitset\n      BitSet bitset = new BitSet();\n      for (int i = 0; i < td2.scoreDocs.length; i++) {\n        bitset.set(td2.scoreDocs[i].doc);\n      }\n      \n      // check in the subset, that every bit was set by the super\n      for (int i = 0; i < td1.scoreDocs.length; i++) {\n        assertTrue(bitset.get(td1.scoreDocs[i].doc));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>.\n   * \n   * Both queries will be filtered by <code>filter</code>\n   */\n  protected void assertSubsetOf(Query q1, Query q2, Query filter) throws Exception {\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n\n    if (filter != null) {\n      q1 = new BooleanQuery.Builder()\n          .add(q1, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n      q2 = new BooleanQuery.Builder()\n          .add(q2, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n    }\n    // we test both INDEXORDER and RELEVANCE because we want to test needsScores=true/false\n    for (Sort sort : new Sort[] { Sort.INDEXORDER, Sort.RELEVANCE }) {\n      // not efficient, but simple!\n      TopDocs td1 = s1.search(q1, reader.maxDoc(), sort);\n      TopDocs td2 = s2.search(q2, reader.maxDoc(), sort);\n      assertTrue(\"too many hits: \" + td1.totalHits + \" > \" + td2.totalHits, td1.totalHits <= td2.totalHits);\n      \n      // fill the superset into a bitset\n      BitSet bitset = new BitSet();\n      for (int i = 0; i < td2.scoreDocs.length; i++) {\n        bitset.set(td2.scoreDocs[i].doc);\n      }\n      \n      // check in the subset, that every bit was set by the super\n      for (int i = 0; i < td1.scoreDocs.length; i++) {\n        assertTrue(bitset.get(td1.scoreDocs[i].doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1db68e96dd908fcd79ef809095822736aa601d08":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["1db68e96dd908fcd79ef809095822736aa601d08"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"1db68e96dd908fcd79ef809095822736aa601d08":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1db68e96dd908fcd79ef809095822736aa601d08"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}