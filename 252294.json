{"path":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testZeroPosIncr().mjava","commits":[{"id":"860d9cc0c963b5c0db351fb0473b6894b1d96020","date":1448302628,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testZeroPosIncr().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests PhraseQuery with terms at the same position in the query. */\n  public void testZeroPosIncr() throws IOException {\n    Directory dir = newDirectory();\n    final Token[] tokens = new Token[3];\n    tokens[0] = new Token();\n    tokens[0].append(\"a\");\n    tokens[0].setPositionIncrement(1);\n    tokens[1] = new Token();\n    tokens[1].append(\"aa\");\n    tokens[1].setPositionIncrement(0);\n    tokens[2] = new Token();\n    tokens[2].append(\"b\");\n    tokens[2].setPositionIncrement(1);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(tokens)));\n    writer.addDocument(doc);\n    IndexReader r = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(r);\n\n    // Sanity check; simple \"a b\" phrase:\n    PhraseQuery.Builder pqBuilder = new PhraseQuery.Builder();\n    pqBuilder.add(new Term(\"field\", \"a\"), 0);\n    pqBuilder.add(new Term(\"field\", \"b\"), 1);\n    assertEquals(1, searcher.search(pqBuilder.build(), 1).totalHits);\n\n    // Now with \"a|aa b\"\n    pqBuilder = new PhraseQuery.Builder();\n    pqBuilder.add(new Term(\"field\", \"a\"), 0);\n    pqBuilder.add(new Term(\"field\", \"aa\"), 0);\n    pqBuilder.add(new Term(\"field\", \"b\"), 1);\n    assertEquals(1, searcher.search(pqBuilder.build(), 1).totalHits);\n\n    // Now with \"a|z b\" which should not match; this isn't a MultiPhraseQuery\n    pqBuilder = new PhraseQuery.Builder();\n    pqBuilder.add(new Term(\"field\", \"a\"), 0);\n    pqBuilder.add(new Term(\"field\", \"z\"), 0);\n    pqBuilder.add(new Term(\"field\", \"b\"), 1);\n    assertEquals(0, searcher.search(pqBuilder.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"470eaac3a77cf637b62126a5408b178d7be93eb1","date":1531830722,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testZeroPosIncr().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testZeroPosIncr().mjava","sourceNew":"  /** Tests PhraseQuery with terms at the same position in the query. */\n  public void testZeroPosIncr() throws IOException {\n    Directory dir = newDirectory();\n    final Token[] tokens = new Token[3];\n    tokens[0] = new Token();\n    tokens[0].append(\"a\");\n    tokens[0].setPositionIncrement(1);\n    tokens[1] = new Token();\n    tokens[1].append(\"aa\");\n    tokens[1].setPositionIncrement(0);\n    tokens[2] = new Token();\n    tokens[2].append(\"b\");\n    tokens[2].setPositionIncrement(1);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(tokens)));\n    writer.addDocument(doc);\n    IndexReader r = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(r);\n\n    // Sanity check; simple \"a b\" phrase:\n    PhraseQuery.Builder pqBuilder = new PhraseQuery.Builder();\n    pqBuilder.add(new Term(\"field\", \"a\"), 0);\n    pqBuilder.add(new Term(\"field\", \"b\"), 1);\n    assertEquals(1, searcher.count(pqBuilder.build()));\n\n    // Now with \"a|aa b\"\n    pqBuilder = new PhraseQuery.Builder();\n    pqBuilder.add(new Term(\"field\", \"a\"), 0);\n    pqBuilder.add(new Term(\"field\", \"aa\"), 0);\n    pqBuilder.add(new Term(\"field\", \"b\"), 1);\n    assertEquals(1, searcher.count(pqBuilder.build()));\n\n    // Now with \"a|z b\" which should not match; this isn't a MultiPhraseQuery\n    pqBuilder = new PhraseQuery.Builder();\n    pqBuilder.add(new Term(\"field\", \"a\"), 0);\n    pqBuilder.add(new Term(\"field\", \"z\"), 0);\n    pqBuilder.add(new Term(\"field\", \"b\"), 1);\n    assertEquals(0, searcher.count(pqBuilder.build()));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests PhraseQuery with terms at the same position in the query. */\n  public void testZeroPosIncr() throws IOException {\n    Directory dir = newDirectory();\n    final Token[] tokens = new Token[3];\n    tokens[0] = new Token();\n    tokens[0].append(\"a\");\n    tokens[0].setPositionIncrement(1);\n    tokens[1] = new Token();\n    tokens[1].append(\"aa\");\n    tokens[1].setPositionIncrement(0);\n    tokens[2] = new Token();\n    tokens[2].append(\"b\");\n    tokens[2].setPositionIncrement(1);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(tokens)));\n    writer.addDocument(doc);\n    IndexReader r = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(r);\n\n    // Sanity check; simple \"a b\" phrase:\n    PhraseQuery.Builder pqBuilder = new PhraseQuery.Builder();\n    pqBuilder.add(new Term(\"field\", \"a\"), 0);\n    pqBuilder.add(new Term(\"field\", \"b\"), 1);\n    assertEquals(1, searcher.search(pqBuilder.build(), 1).totalHits);\n\n    // Now with \"a|aa b\"\n    pqBuilder = new PhraseQuery.Builder();\n    pqBuilder.add(new Term(\"field\", \"a\"), 0);\n    pqBuilder.add(new Term(\"field\", \"aa\"), 0);\n    pqBuilder.add(new Term(\"field\", \"b\"), 1);\n    assertEquals(1, searcher.search(pqBuilder.build(), 1).totalHits);\n\n    // Now with \"a|z b\" which should not match; this isn't a MultiPhraseQuery\n    pqBuilder = new PhraseQuery.Builder();\n    pqBuilder.add(new Term(\"field\", \"a\"), 0);\n    pqBuilder.add(new Term(\"field\", \"z\"), 0);\n    pqBuilder.add(new Term(\"field\", \"b\"), 1);\n    assertEquals(0, searcher.search(pqBuilder.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testZeroPosIncr().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testZeroPosIncr().mjava","sourceNew":"  /** Tests PhraseQuery with terms at the same position in the query. */\n  public void testZeroPosIncr() throws IOException {\n    Directory dir = newDirectory();\n    final Token[] tokens = new Token[3];\n    tokens[0] = new Token();\n    tokens[0].append(\"a\");\n    tokens[0].setPositionIncrement(1);\n    tokens[1] = new Token();\n    tokens[1].append(\"aa\");\n    tokens[1].setPositionIncrement(0);\n    tokens[2] = new Token();\n    tokens[2].append(\"b\");\n    tokens[2].setPositionIncrement(1);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(tokens)));\n    writer.addDocument(doc);\n    IndexReader r = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(r);\n\n    // Sanity check; simple \"a b\" phrase:\n    PhraseQuery.Builder pqBuilder = new PhraseQuery.Builder();\n    pqBuilder.add(new Term(\"field\", \"a\"), 0);\n    pqBuilder.add(new Term(\"field\", \"b\"), 1);\n    assertEquals(1, searcher.count(pqBuilder.build()));\n\n    // Now with \"a|aa b\"\n    pqBuilder = new PhraseQuery.Builder();\n    pqBuilder.add(new Term(\"field\", \"a\"), 0);\n    pqBuilder.add(new Term(\"field\", \"aa\"), 0);\n    pqBuilder.add(new Term(\"field\", \"b\"), 1);\n    assertEquals(1, searcher.count(pqBuilder.build()));\n\n    // Now with \"a|z b\" which should not match; this isn't a MultiPhraseQuery\n    pqBuilder = new PhraseQuery.Builder();\n    pqBuilder.add(new Term(\"field\", \"a\"), 0);\n    pqBuilder.add(new Term(\"field\", \"z\"), 0);\n    pqBuilder.add(new Term(\"field\", \"b\"), 1);\n    assertEquals(0, searcher.count(pqBuilder.build()));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests PhraseQuery with terms at the same position in the query. */\n  public void testZeroPosIncr() throws IOException {\n    Directory dir = newDirectory();\n    final Token[] tokens = new Token[3];\n    tokens[0] = new Token();\n    tokens[0].append(\"a\");\n    tokens[0].setPositionIncrement(1);\n    tokens[1] = new Token();\n    tokens[1].append(\"aa\");\n    tokens[1].setPositionIncrement(0);\n    tokens[2] = new Token();\n    tokens[2].append(\"b\");\n    tokens[2].setPositionIncrement(1);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(tokens)));\n    writer.addDocument(doc);\n    IndexReader r = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(r);\n\n    // Sanity check; simple \"a b\" phrase:\n    PhraseQuery.Builder pqBuilder = new PhraseQuery.Builder();\n    pqBuilder.add(new Term(\"field\", \"a\"), 0);\n    pqBuilder.add(new Term(\"field\", \"b\"), 1);\n    assertEquals(1, searcher.search(pqBuilder.build(), 1).totalHits);\n\n    // Now with \"a|aa b\"\n    pqBuilder = new PhraseQuery.Builder();\n    pqBuilder.add(new Term(\"field\", \"a\"), 0);\n    pqBuilder.add(new Term(\"field\", \"aa\"), 0);\n    pqBuilder.add(new Term(\"field\", \"b\"), 1);\n    assertEquals(1, searcher.search(pqBuilder.build(), 1).totalHits);\n\n    // Now with \"a|z b\" which should not match; this isn't a MultiPhraseQuery\n    pqBuilder = new PhraseQuery.Builder();\n    pqBuilder.add(new Term(\"field\", \"a\"), 0);\n    pqBuilder.add(new Term(\"field\", \"z\"), 0);\n    pqBuilder.add(new Term(\"field\", \"b\"), 1);\n    assertEquals(0, searcher.search(pqBuilder.build(), 1).totalHits);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["860d9cc0c963b5c0db351fb0473b6894b1d96020","470eaac3a77cf637b62126a5408b178d7be93eb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"860d9cc0c963b5c0db351fb0473b6894b1d96020":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["860d9cc0c963b5c0db351fb0473b6894b1d96020"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["470eaac3a77cf637b62126a5408b178d7be93eb1"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["860d9cc0c963b5c0db351fb0473b6894b1d96020"],"860d9cc0c963b5c0db351fb0473b6894b1d96020":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","470eaac3a77cf637b62126a5408b178d7be93eb1"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}