{"path":"lucene/core/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","sourceNew":"  public void testUTF8UTF16CharsRef() {\n    int num = atLeast(3989);\n    for (int i = 0; i < num; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random);\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random.nextInt(100)];\n      int offset = random.nextInt(arr.length);\n      int len = random.nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n    }\n  }\n\n","sourceOld":"  public void testUTF8UTF16CharsRef() {\n    int num = atLeast(3989);\n    for (int i = 0; i < num; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random);\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random.nextInt(100)];\n      int offset = random.nextInt(arr.length);\n      int len = random.nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","sourceNew":"  public void testUTF8UTF16CharsRef() {\n    int num = atLeast(3989);\n    for (int i = 0; i < num; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random());\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random().nextInt(100)];\n      int offset = random().nextInt(arr.length);\n      int len = random().nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n    }\n  }\n\n","sourceOld":"  public void testUTF8UTF16CharsRef() {\n    int num = atLeast(3989);\n    for (int i = 0; i < num; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random);\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random.nextInt(100)];\n      int offset = random.nextInt(arr.length);\n      int len = random.nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","sourceNew":"  public void testUTF8UTF16CharsRef() {\n    int num = atLeast(3989);\n    for (int i = 0; i < num; i++) {\n      String unicode = TestUtil.randomRealisticUnicodeString(random());\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random().nextInt(100)];\n      int offset = random().nextInt(arr.length);\n      int len = random().nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n    }\n  }\n\n","sourceOld":"  public void testUTF8UTF16CharsRef() {\n    int num = atLeast(3989);\n    for (int i = 0; i < num; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random());\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random().nextInt(100)];\n      int offset = random().nextInt(arr.length);\n      int len = random().nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","sourceNew":"  public void testUTF8UTF16CharsRef() {\n    int num = atLeast(3989);\n    for (int i = 0; i < num; i++) {\n      String unicode = TestUtil.randomRealisticUnicodeString(random());\n      BytesRef ref = new BytesRef(unicode);\n      CharsRefBuilder cRef = new CharsRefBuilder();\n      cRef.copyUTF8Bytes(ref);\n      assertEquals(cRef.toString(), unicode);\n    }\n  }\n\n","sourceOld":"  public void testUTF8UTF16CharsRef() {\n    int num = atLeast(3989);\n    for (int i = 0; i < num; i++) {\n      String unicode = TestUtil.randomRealisticUnicodeString(random());\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random().nextInt(100)];\n      int offset = random().nextInt(arr.length);\n      int len = random().nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n    }\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["6613659748fe4411a7dcf85266e55db1f95f7315"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}