{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader).mjava","commits":[{"id":"53ae89cd75b0acbdfb8890710c6742f3fb80e65d","date":1315806626,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates a token stream that tokenizes all the text in the given Reader;\n   * This implementation forwards to <code>tokenStream(String, String)</code> and is\n   * less efficient than <code>tokenStream(String, String)</code>.\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            the reader delivering the text\n   * @return a new token stream\n   */\n  @Override\n  public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n    try {\n      String text = toString(reader);\n      return createComponents(fieldName, text);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream that tokenizes all the text in the given Reader;\n   * This implementation forwards to <code>tokenStream(String, String)</code> and is\n   * less efficient than <code>tokenStream(String, String)</code>.\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            the reader delivering the text\n   * @return a new token stream\n   */\n  @Override\n  public TokenStream tokenStream(String fieldName, Reader reader) {\n    try {\n      String text = toString(reader);\n      return tokenStream(fieldName, text);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a43b8655231010bd8d9a1bea43acc6001df4b0dd","date":1327331998,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates a token stream that tokenizes all the text in the given Reader;\n   * This implementation forwards to <code>tokenStream(String, Reader, String)</code> and is\n   * less efficient than <code>tokenStream(String, Reader, String)</code>.\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            the reader delivering the text\n   * @return a new token stream\n   */\n  @Override\n  public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n    try {\n      String text = toString(reader);\n      return createComponents(fieldName, reader, text);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream that tokenizes all the text in the given Reader;\n   * This implementation forwards to <code>tokenStream(String, String)</code> and is\n   * less efficient than <code>tokenStream(String, String)</code>.\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            the reader delivering the text\n   * @return a new token stream\n   */\n  @Override\n  public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n    try {\n      String text = toString(reader);\n      return createComponents(fieldName, text);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates a token stream that tokenizes all the text in the given Reader;\n   * This implementation forwards to <code>tokenStream(String, Reader, String)</code> and is\n   * less efficient than <code>tokenStream(String, Reader, String)</code>.\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            the reader delivering the text\n   * @return a new token stream\n   */\n  @Override\n  public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n    try {\n      String text = toString(reader);\n      return createComponents(fieldName, reader, text);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream that tokenizes all the text in the given Reader;\n   * This implementation forwards to <code>tokenStream(String, String)</code> and is\n   * less efficient than <code>tokenStream(String, String)</code>.\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            the reader delivering the text\n   * @return a new token stream\n   */\n  @Override\n  public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n    try {\n      String text = toString(reader);\n      return createComponents(fieldName, text);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates a token stream that tokenizes all the text in the given Reader;\n   * This implementation forwards to <code>tokenStream(String, Reader, String)</code> and is\n   * less efficient than <code>tokenStream(String, Reader, String)</code>.\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            the reader delivering the text\n   * @return a new token stream\n   */\n  @Override\n  public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n    try {\n      String text = toString(reader);\n      return createComponents(fieldName, reader, text);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream that tokenizes all the text in the given Reader;\n   * This implementation forwards to <code>tokenStream(String, String)</code> and is\n   * less efficient than <code>tokenStream(String, String)</code>.\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            the reader delivering the text\n   * @return a new token stream\n   */\n  @Override\n  public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n    try {\n      String text = toString(reader);\n      return createComponents(fieldName, text);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates a token stream that tokenizes all the text in the given Reader;\n   * This implementation forwards to <code>tokenStream(String, Reader, String)</code> and is\n   * less efficient than <code>tokenStream(String, Reader, String)</code>.\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            the reader delivering the text\n   * @return a new token stream\n   */\n  @Override\n  public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n    try {\n      String text = toString(reader);\n      return createComponents(fieldName, reader, text);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream that tokenizes all the text in the given Reader;\n   * This implementation forwards to <code>tokenStream(String, Reader, String)</code> and is\n   * less efficient than <code>tokenStream(String, Reader, String)</code>.\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            the reader delivering the text\n   * @return a new token stream\n   */\n  @Override\n  public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n    try {\n      String text = toString(reader);\n      return createComponents(fieldName, reader, text);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"a43b8655231010bd8d9a1bea43acc6001df4b0dd":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"a43b8655231010bd8d9a1bea43acc6001df4b0dd":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","b89678825b68eccaf09e6ab71675fc0b0af1e099","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}