{"path":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#assertStopQueryEquals(String,String).mjava","commits":[{"id":"2f0c71979827275ab91caba7232e8de375b40dd5","date":1182818420,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#assertStopQueryEquals(String,String).mjava","pathOld":"/dev/null","sourceNew":"  // verify parsing of query using a stopping analyzer  \n  private void assertStopQueryEquals (String qtxt, String expectedRes) throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    Occur occur[] = {Occur.SHOULD, Occur.SHOULD};\n    TestQueryParser.QPTestAnalyzer a = new TestQueryParser.QPTestAnalyzer();\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, a);\n    \n    Query q = mfqp.parse(qtxt);\n    assertEquals(expectedRes, q.toString());\n    \n    q = MultiFieldQueryParser.parse(qtxt, fields, occur, a);\n    assertEquals(expectedRes, q.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#assertStopQueryEquals(String,String).mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#assertStopQueryEquals(String,String).mjava","sourceNew":"  // verify parsing of query using a stopping analyzer  \n  private void assertStopQueryEquals (String qtxt, String expectedRes) throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    Occur occur[] = {Occur.SHOULD, Occur.SHOULD};\n    TestQueryParser.QPTestAnalyzer a = new TestQueryParser.QPTestAnalyzer();\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fields, a);\n    \n    Query q = mfqp.parse(qtxt);\n    assertEquals(expectedRes, q.toString());\n    \n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, qtxt, fields, occur, a);\n    assertEquals(expectedRes, q.toString());\n  }\n\n","sourceOld":"  // verify parsing of query using a stopping analyzer  \n  private void assertStopQueryEquals (String qtxt, String expectedRes) throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    Occur occur[] = {Occur.SHOULD, Occur.SHOULD};\n    TestQueryParser.QPTestAnalyzer a = new TestQueryParser.QPTestAnalyzer();\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, a);\n    \n    Query q = mfqp.parse(qtxt);\n    assertEquals(expectedRes, q.toString());\n    \n    q = MultiFieldQueryParser.parse(qtxt, fields, occur, a);\n    assertEquals(expectedRes, q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#assertStopQueryEquals(String,String).mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#assertStopQueryEquals(String,String).mjava","sourceNew":"  // verify parsing of query using a stopping analyzer  \n  private void assertStopQueryEquals (String qtxt, String expectedRes) throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    Occur occur[] = {Occur.SHOULD, Occur.SHOULD};\n    TestQueryParser.QPTestAnalyzer a = new TestQueryParser.QPTestAnalyzer();\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, a);\n    \n    Query q = mfqp.parse(qtxt);\n    assertEquals(expectedRes, q.toString());\n    \n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, qtxt, fields, occur, a);\n    assertEquals(expectedRes, q.toString());\n  }\n\n","sourceOld":"  // verify parsing of query using a stopping analyzer  \n  private void assertStopQueryEquals (String qtxt, String expectedRes) throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    Occur occur[] = {Occur.SHOULD, Occur.SHOULD};\n    TestQueryParser.QPTestAnalyzer a = new TestQueryParser.QPTestAnalyzer();\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fields, a);\n    \n    Query q = mfqp.parse(qtxt);\n    assertEquals(expectedRes, q.toString());\n    \n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, qtxt, fields, occur, a);\n    assertEquals(expectedRes, q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#assertStopQueryEquals(String,String).mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#assertStopQueryEquals(String,String).mjava","sourceNew":"  // verify parsing of query using a stopping analyzer  \n  private void assertStopQueryEquals (String qtxt, String expectedRes) throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    Occur occur[] = {Occur.SHOULD, Occur.SHOULD};\n    TestQueryParser.QPTestAnalyzer a = new TestQueryParser.QPTestAnalyzer();\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, a);\n    \n    Query q = mfqp.parse(qtxt);\n    assertEquals(expectedRes, q.toString());\n    \n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, qtxt, fields, occur, a);\n    assertEquals(expectedRes, q.toString());\n  }\n\n","sourceOld":"  // verify parsing of query using a stopping analyzer  \n  private void assertStopQueryEquals (String qtxt, String expectedRes) throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    Occur occur[] = {Occur.SHOULD, Occur.SHOULD};\n    TestQueryParser.QPTestAnalyzer a = new TestQueryParser.QPTestAnalyzer();\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, a);\n    \n    Query q = mfqp.parse(qtxt);\n    assertEquals(expectedRes, q.toString());\n    \n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, qtxt, fields, occur, a);\n    assertEquals(expectedRes, q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f0c71979827275ab91caba7232e8de375b40dd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["ba1116b3450a9c1642c89445d131b37344055245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"ba1116b3450a9c1642c89445d131b37344055245":["2f0c71979827275ab91caba7232e8de375b40dd5"]},"commit2Childs":{"2f0c71979827275ab91caba7232e8de375b40dd5":["ba1116b3450a9c1642c89445d131b37344055245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f0c71979827275ab91caba7232e8de375b40dd5"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba1116b3450a9c1642c89445d131b37344055245":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}