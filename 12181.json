{"path":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates.Worker#doRandomAtomicUpdate(int).mjava","commits":[{"id":"106fbee5a2b8105d0628067f2c65cd0fedfc19e7","date":1464121813,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates.Worker#doRandomAtomicUpdate(int).mjava","pathOld":"/dev/null","sourceNew":"    private void doRandomAtomicUpdate(int docId) throws Exception {\n      assert 0 == docId % DOC_ID_INCR : \"WTF? \" + docId;\n      \n      final int delta = TestUtil.nextInt(rand, -1000, 1000);\n      log.info(\"worker={}, docId={}, delta={}\", workerId, docId, delta);\n\n      SolrClient client = getRandClient(rand);\n      SolrInputDocument doc = doc(f(\"id\",\"\"+docId),\n                                  f(updateField,Collections.singletonMap(\"inc\",delta)));\n      UpdateResponse rsp = update(doc).process(client);\n      assertEquals(doc + \" => \" + rsp, 0, rsp.getStatus());\n      \n      AtomicLong counter = expected[(int)(docId / DOC_ID_INCR)];\n      assertNotNull(\"null counter for \" + docId + \"/\" + DOC_ID_INCR, counter);\n      counter.getAndAdd(delta);\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates.Worker#doRandomAtomicUpdate(int).mjava","pathOld":"/dev/null","sourceNew":"    private void doRandomAtomicUpdate(int docId) throws Exception {\n      assert 0 == docId % DOC_ID_INCR : \"WTF? \" + docId;\n      \n      final int delta = TestUtil.nextInt(rand, -1000, 1000);\n      log.info(\"worker={}, docId={}, delta={}\", workerId, docId, delta);\n\n      SolrClient client = getRandClient(rand);\n      SolrInputDocument doc = doc(f(\"id\",\"\"+docId),\n                                  f(updateField,Collections.singletonMap(\"inc\",delta)));\n      UpdateResponse rsp = update(doc).process(client);\n      assertEquals(doc + \" => \" + rsp, 0, rsp.getStatus());\n      \n      AtomicLong counter = expected[(int)(docId / DOC_ID_INCR)];\n      assertNotNull(\"null counter for \" + docId + \"/\" + DOC_ID_INCR, counter);\n      counter.getAndAdd(delta);\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates.Worker#doRandomAtomicUpdate(int).mjava","pathOld":"/dev/null","sourceNew":"    private void doRandomAtomicUpdate(int docId) throws Exception {\n      assert 0 == docId % DOC_ID_INCR : \"WTF? \" + docId;\n      \n      final int delta = TestUtil.nextInt(rand, -1000, 1000);\n      log.info(\"worker={}, docId={}, delta={}\", workerId, docId, delta);\n\n      SolrClient client = getRandClient(rand);\n      SolrInputDocument doc = doc(f(\"id\",\"\"+docId),\n                                  f(updateField,Collections.singletonMap(\"inc\",delta)));\n      UpdateResponse rsp = update(doc).process(client);\n      assertEquals(doc + \" => \" + rsp, 0, rsp.getStatus());\n      \n      AtomicLong counter = expected[(int)(docId / DOC_ID_INCR)];\n      assertNotNull(\"null counter for \" + docId + \"/\" + DOC_ID_INCR, counter);\n      counter.getAndAdd(delta);\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates.Worker#doRandomAtomicUpdate(int).mjava","pathOld":"/dev/null","sourceNew":"    private void doRandomAtomicUpdate(int docId) throws Exception {\n      assert 0 == docId % DOC_ID_INCR : \"WTF? \" + docId;\n      \n      final int delta = TestUtil.nextInt(rand, -1000, 1000);\n      log.info(\"worker={}, docId={}, delta={}\", workerId, docId, delta);\n\n      SolrClient client = getRandClient(rand);\n      SolrInputDocument doc = doc(f(\"id\",\"\"+docId),\n                                  f(updateField,Collections.singletonMap(\"inc\",delta)));\n      UpdateResponse rsp = update(doc).process(client);\n      assertEquals(doc + \" => \" + rsp, 0, rsp.getStatus());\n      \n      AtomicLong counter = expected[(int)(docId / DOC_ID_INCR)];\n      assertNotNull(\"null counter for \" + docId + \"/\" + DOC_ID_INCR, counter);\n      counter.getAndAdd(delta);\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates.Worker#doRandomAtomicUpdate(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestStressCloudBlindAtomicUpdates.Worker#doRandomAtomicUpdate(int).mjava","sourceNew":"    private void doRandomAtomicUpdate(int docId) throws Exception {\n      assert 0 == docId % DOC_ID_INCR : \"WTF? \" + docId;\n      \n      final int delta = TestUtil.nextInt(rand, -1000, 1000);\n      log.info(\"worker={}, docId={}, delta={}\", workerId, docId, delta);\n\n      SolrClient client = getRandClient(rand);\n      SolrInputDocument doc = doc(f(\"id\",\"\"+docId),\n                                  f(updateField,Collections.singletonMap(\"inc\",delta)));\n      UpdateResponse rsp = update(doc).process(client);\n      assertEquals(doc + \" => \" + rsp, 0, rsp.getStatus());\n      \n      AtomicLong counter = expected[docId / DOC_ID_INCR];\n      assertNotNull(\"null counter for \" + docId + \"/\" + DOC_ID_INCR, counter);\n      counter.getAndAdd(delta);\n\n    }\n\n","sourceOld":"    private void doRandomAtomicUpdate(int docId) throws Exception {\n      assert 0 == docId % DOC_ID_INCR : \"WTF? \" + docId;\n      \n      final int delta = TestUtil.nextInt(rand, -1000, 1000);\n      log.info(\"worker={}, docId={}, delta={}\", workerId, docId, delta);\n\n      SolrClient client = getRandClient(rand);\n      SolrInputDocument doc = doc(f(\"id\",\"\"+docId),\n                                  f(updateField,Collections.singletonMap(\"inc\",delta)));\n      UpdateResponse rsp = update(doc).process(client);\n      assertEquals(doc + \" => \" + rsp, 0, rsp.getStatus());\n      \n      AtomicLong counter = expected[(int)(docId / DOC_ID_INCR)];\n      assertNotNull(\"null counter for \" + docId + \"/\" + DOC_ID_INCR, counter);\n      counter.getAndAdd(delta);\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","106fbee5a2b8105d0628067f2c65cd0fedfc19e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"106fbee5a2b8105d0628067f2c65cd0fedfc19e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","106fbee5a2b8105d0628067f2c65cd0fedfc19e7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"106fbee5a2b8105d0628067f2c65cd0fedfc19e7":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}