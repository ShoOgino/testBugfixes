{"path":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","pathOld":"solr/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        // In a production environment, we can tolerate an error in some request handlers, \n        // still load the others, and have a working system.\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.info(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        // In a production environment, we can tolerate an error in some request handlers, \n        // still load the others, and have a working system.\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.info(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","pathOld":"solr/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        // In a production environment, we can tolerate an error in some request handlers, \n        // still load the others, and have a working system.\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.info(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        // In a production environment, we can tolerate an error in some request handlers, \n        // still load the others, and have a working system.\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.info(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","pathOld":"solr/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        // In a production environment, we can tolerate an error in some request handlers, \n        // still load the others, and have a working system.\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.info(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        // In a production environment, we can tolerate an error in some request handlers, \n        // still load the others, and have a working system.\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.info(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        // In a production environment, we can tolerate an error in some request handlers, \n        // still load the others, and have a working system.\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.info(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        // In a production environment, we can tolerate an error in some request handlers, \n        // still load the others, and have a working system.\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.info(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f7907798e0c730e9ab37681c6e8dfbde0e4173","date":1330361299,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        // In a production environment, we can tolerate an error in some request handlers, \n        // still load the others, and have a working system.\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        // In a production environment, we can tolerate an error in some request handlers, \n        // still load the others, and have a working system.\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.info(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        // In a production environment, we can tolerate an error in some request handlers, \n        // still load the others, and have a working system.\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        // In a production environment, we can tolerate an error in some request handlers, \n        // still load the others, and have a working system.\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.info(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0552957099a974d3ed0dfc06d8d282b483e1273f","date":1337912313,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        // In a production environment, we can tolerate an error in some request handlers, \n        // still load the others, and have a working system.\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":["0aea57ab530d174e645bf6e14d04db1e243e13d7","6d6338c87060be5f66757a94945975f3bbd377a9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c028362918f0b06bbdb243dfd35486218b89dbde","date":1343391303,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(SolrResourceLoader,NodeList).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","sourceNew":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader#load(ResourceLoader,NodeList).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given a NodeList from XML in the form:\n   * \n   *  <plugins>\n   *    <plugin name=\"name1\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" >\n   *      ...\n   *    </plugin>\n   *  </plugins>\n   * \n   * This will initialize and register each plugin from the list.  A class will \n   * be generated for each class name and registered to the given name.\n   * \n   * If 'preRegister' is true, each plugin will be registered *before* it is initialized\n   * This may be useful for implementations that need to inspect other registered \n   * plugins at startup.\n   * \n   * One (and only one) plugin may declare itself to be the 'default' plugin using:\n   *    <plugin name=\"name2\" class=\"solr.ClassName\" default=\"true\">\n   * If a default element is defined, it will be returned from this function.\n   * \n   */\n  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          // Either initialize now or wait till everything has been registered\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    // If everything needs to be registered *first*, this will initialize later\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8f7907798e0c730e9ab37681c6e8dfbde0e4173":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"aba371508186796cc6151d8223a5b4e16d02e26e":["0552957099a974d3ed0dfc06d8d282b483e1273f","c028362918f0b06bbdb243dfd35486218b89dbde"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7b1605dda5afabdc06fd136fa0dd14ad326e3001","f8f7907798e0c730e9ab37681c6e8dfbde0e4173"],"c028362918f0b06bbdb243dfd35486218b89dbde":["0552957099a974d3ed0dfc06d8d282b483e1273f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"0552957099a974d3ed0dfc06d8d282b483e1273f":["f8f7907798e0c730e9ab37681c6e8dfbde0e4173"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["0552957099a974d3ed0dfc06d8d282b483e1273f","c028362918f0b06bbdb243dfd35486218b89dbde"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c028362918f0b06bbdb243dfd35486218b89dbde"]},"commit2Childs":{"f8f7907798e0c730e9ab37681c6e8dfbde0e4173":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0552957099a974d3ed0dfc06d8d282b483e1273f"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c028362918f0b06bbdb243dfd35486218b89dbde":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"0552957099a974d3ed0dfc06d8d282b483e1273f":["aba371508186796cc6151d8223a5b4e16d02e26e","c028362918f0b06bbdb243dfd35486218b89dbde","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["f8f7907798e0c730e9ab37681c6e8dfbde0e4173","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}