{"path":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#convert(int).mjava","commits":[{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#convert(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.StringOrdValComparator#convert(int).mjava","sourceNew":"    private void convert(int slot) {\n      readerGen[slot] = currentReaderGen;\n      int index = 0;\n      BytesRef value = values[slot];\n      if (value == null) {\n        // 0 ord is null for all segments\n        assert ords[slot] == 0;\n        return;\n      }\n\n      if (sortPos == 0 && bottomSlot != -1 && bottomSlot != slot) {\n        // Since we are the primary sort, the entries in the\n        // queue are bounded by bottomOrd:\n        if (reversed) {\n          index = binarySearch(tempBR, termsIndex, value, bottomOrd, termsIndex.numOrd()-1);\n        } else {\n          index = binarySearch(tempBR, termsIndex, value, 0, bottomOrd);\n        }\n      } else {\n        // Full binary search\n        index = binarySearch(tempBR, termsIndex, value);\n      }\n\n      if (index < 0) {\n        index = -index - 2;\n      }\n      ords[slot] = index;\n    }\n\n","sourceOld":"    private void convert(int slot) {\n      readerGen[slot] = currentReaderGen;\n      int index = 0;\n      String value = values[slot];\n      if (value == null) {\n        ords[slot] = 0;\n        return;\n      }\n\n      if (sortPos == 0 && bottomSlot != -1 && bottomSlot != slot) {\n        // Since we are the primary sort, the entries in the\n        // queue are bounded by bottomOrd:\n        assert bottomOrd < lookup.length;\n        if (reversed) {\n          index = binarySearch(lookup, value, bottomOrd, lookup.length-1);\n        } else {\n          index = binarySearch(lookup, value, 0, bottomOrd);\n        }\n      } else {\n        // Full binary search\n        index = binarySearch(lookup, value);\n      }\n\n      if (index < 0) {\n        index = -index - 2;\n      }\n      ords[slot] = index;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eb0f2a9f9f67f7b41226f91f0099edecadd99a6","date":1279015205,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#convert(int).mjava","sourceNew":null,"sourceOld":"    private void convert(int slot) {\n      readerGen[slot] = currentReaderGen;\n      int index = 0;\n      BytesRef value = values[slot];\n      if (value == null) {\n        // 0 ord is null for all segments\n        assert ords[slot] == 0;\n        return;\n      }\n\n      if (sortPos == 0 && bottomSlot != -1 && bottomSlot != slot) {\n        // Since we are the primary sort, the entries in the\n        // queue are bounded by bottomOrd:\n        if (reversed) {\n          index = binarySearch(tempBR, termsIndex, value, bottomOrd, termsIndex.numOrd()-1);\n        } else {\n          index = binarySearch(tempBR, termsIndex, value, 0, bottomOrd);\n        }\n      } else {\n        // Full binary search\n        index = binarySearch(tempBR, termsIndex, value);\n      }\n\n      if (index < 0) {\n        index = -index - 2;\n      }\n      ords[slot] = index;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValComparator#convert(int).mjava","sourceNew":null,"sourceOld":"    private void convert(int slot) {\n      readerGen[slot] = currentReaderGen;\n      int index = 0;\n      BytesRef value = values[slot];\n      if (value == null) {\n        // 0 ord is null for all segments\n        assert ords[slot] == 0;\n        return;\n      }\n\n      if (sortPos == 0 && bottomSlot != -1 && bottomSlot != slot) {\n        // Since we are the primary sort, the entries in the\n        // queue are bounded by bottomOrd:\n        if (reversed) {\n          index = binarySearch(tempBR, termsIndex, value, bottomOrd, termsIndex.numOrd()-1);\n        } else {\n          index = binarySearch(tempBR, termsIndex, value, 0, bottomOrd);\n        }\n      } else {\n        // Full binary search\n        index = binarySearch(tempBR, termsIndex, value);\n      }\n\n      if (index < 0) {\n        index = -index - 2;\n      }\n      ords[slot] = index;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9eb0f2a9f9f67f7b41226f91f0099edecadd99a6":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","9eb0f2a9f9f67f7b41226f91f0099edecadd99a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9eb0f2a9f9f67f7b41226f91f0099edecadd99a6"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["9eb0f2a9f9f67f7b41226f91f0099edecadd99a6","5f4e87790277826a2aea119328600dfb07761f32"],"9eb0f2a9f9f67f7b41226f91f0099edecadd99a6":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}