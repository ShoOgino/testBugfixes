{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#getSuggestions(Suggestion.Ctx).mjava","commits":[{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#getSuggestions(Suggestion.Ctx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVarType#getSuggestions(Suggestion.SuggestionCtx).mjava","sourceNew":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation.getViolatingReplicas().isEmpty()) return;\n\n    Map<String, Object> nodeValues = ctx.session.nodeStateProvider.getNodeValues(ctx.violation.node, Collections.singleton(\"withCollection\"));\n    Map<String, String> withCollectionsMap = (Map<String, String>) nodeValues.get(\"withCollection\");\n    if (withCollectionsMap == null) return;\n\n    Set<String> uniqueCollections = new HashSet<>();\n    for (Violation.ReplicaInfoAndErr replicaInfoAndErr : ctx.violation.getViolatingReplicas()) {\n      uniqueCollections.add(replicaInfoAndErr.replicaInfo.getCollection());\n    }\n\n    collectionLoop:\n    for (String collection : uniqueCollections) {\n      String withCollection = withCollectionsMap.get(collection);\n      if (withCollection == null) continue;\n\n      // can we find a node from which we can move a replica of the `withCollection`\n      // without creating another violation?\n      for (Row row : ctx.session.matrix) {\n        if (ctx.violation.node.equals(row.node))  continue; // filter the violating node\n\n        Set<String> hostedCollections = new HashSet<>();\n        row.forEachReplica(replicaInfo -> hostedCollections.add(replicaInfo.getCollection()));\n\n        if (hostedCollections.contains(withCollection) && !hostedCollections.contains(collection))  {\n          // find the candidate replicas that we can move\n          List<ReplicaInfo> movableReplicas = new ArrayList<>();\n          row.forEachReplica(replicaInfo -> {\n            if (replicaInfo.getCollection().equals(withCollection)) {\n              movableReplicas.add(replicaInfo);\n            }\n          });\n\n          for (ReplicaInfo toMove : movableReplicas) {\n            // candidate source node for a move replica operation\n            Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n                .forceOperation(true)\n                .hint(Suggester.Hint.COLL_SHARD, new Pair<>(withCollection, \"shard1\"))\n                .hint(Suggester.Hint.SRC_NODE, row.node)\n                .hint(Suggester.Hint.REPLICA, toMove.getName())\n                .hint(Suggester.Hint.TARGET_NODE, ctx.violation.node);\n            if (ctx.addSuggestion(suggester) != null)\n              continue collectionLoop; // one suggestion is enough for this collection\n          }\n        }\n      }\n\n      // we could not find a valid move, so we suggest adding a replica\n      Suggester suggester = ctx.session.getSuggester(ADDREPLICA)\n          .forceOperation(true)\n          .hint(Suggester.Hint.COLL_SHARD, new Pair<>(withCollection, \"shard1\"))\n          .hint(Suggester.Hint.TARGET_NODE, ctx.violation.node);\n      ctx.addSuggestion(suggester);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void getSuggestions(Suggestion.SuggestionCtx ctx) {\n    if (ctx.violation.getViolatingReplicas().isEmpty()) return;\n\n    Map<String, Object> nodeValues = ctx.session.nodeStateProvider.getNodeValues(ctx.violation.node, Collections.singleton(\"withCollection\"));\n    Map<String, String> withCollectionsMap = (Map<String, String>) nodeValues.get(\"withCollection\");\n    if (withCollectionsMap == null) return;\n\n    Set<String> uniqueCollections = new HashSet<>();\n    for (Violation.ReplicaInfoAndErr replicaInfoAndErr : ctx.violation.getViolatingReplicas()) {\n      uniqueCollections.add(replicaInfoAndErr.replicaInfo.getCollection());\n    }\n\n    collectionLoop:\n    for (String collection : uniqueCollections) {\n      String withCollection = withCollectionsMap.get(collection);\n      if (withCollection == null) continue;\n\n      // can we find a node from which we can move a replica of the `withCollection`\n      // without creating another violation?\n      for (Row row : ctx.session.matrix) {\n        if (ctx.violation.node.equals(row.node))  continue; // filter the violating node\n\n        Set<String> hostedCollections = new HashSet<>();\n        row.forEachReplica(replicaInfo -> hostedCollections.add(replicaInfo.getCollection()));\n\n        if (hostedCollections.contains(withCollection) && !hostedCollections.contains(collection))  {\n          // find the candidate replicas that we can move\n          List<ReplicaInfo> movableReplicas = new ArrayList<>();\n          row.forEachReplica(replicaInfo -> {\n            if (replicaInfo.getCollection().equals(withCollection)) {\n              movableReplicas.add(replicaInfo);\n            }\n          });\n\n          for (ReplicaInfo toMove : movableReplicas) {\n            // candidate source node for a move replica operation\n            Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n                .forceOperation(true)\n                .hint(Suggester.Hint.COLL_SHARD, new Pair<>(withCollection, \"shard1\"))\n                .hint(Suggester.Hint.SRC_NODE, row.node)\n                .hint(Suggester.Hint.REPLICA, toMove.getName())\n                .hint(Suggester.Hint.TARGET_NODE, ctx.violation.node);\n            if (ctx.addSuggestion(suggester) != null)\n              continue collectionLoop; // one suggestion is enough for this collection\n          }\n        }\n      }\n\n      // we could not find a valid move, so we suggest adding a replica\n      Suggester suggester = ctx.session.getSuggester(ADDREPLICA)\n          .forceOperation(true)\n          .hint(Suggester.Hint.COLL_SHARD, new Pair<>(withCollection, \"shard1\"))\n          .hint(Suggester.Hint.TARGET_NODE, ctx.violation.node);\n      ctx.addSuggestion(suggester);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#getSuggestions(Suggestion.Ctx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#getSuggestions(Suggestion.Ctx).mjava","sourceNew":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation.getViolatingReplicas().isEmpty()) return;\n\n    Map<String, Object> nodeValues = ctx.session.nodeStateProvider.getNodeValues(ctx.violation.node, Collections.singleton(\"withCollection\"));\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, String> withCollectionsMap = (Map<String, String>) nodeValues.get(\"withCollection\");\n    if (withCollectionsMap == null) return;\n\n    Set<String> uniqueCollections = new HashSet<>();\n    for (Violation.ReplicaInfoAndErr replicaInfoAndErr : ctx.violation.getViolatingReplicas()) {\n      uniqueCollections.add(replicaInfoAndErr.replicaInfo.getCollection());\n    }\n\n    collectionLoop:\n    for (String collection : uniqueCollections) {\n      String withCollection = withCollectionsMap.get(collection);\n      if (withCollection == null) continue;\n\n      // can we find a node from which we can move a replica of the `withCollection`\n      // without creating another violation?\n      for (Row row : ctx.session.matrix) {\n        if (ctx.violation.node.equals(row.node))  continue; // filter the violating node\n\n        Set<String> hostedCollections = new HashSet<>();\n        row.forEachReplica(replicaInfo -> hostedCollections.add(replicaInfo.getCollection()));\n\n        if (hostedCollections.contains(withCollection) && !hostedCollections.contains(collection))  {\n          // find the candidate replicas that we can move\n          List<ReplicaInfo> movableReplicas = new ArrayList<>();\n          row.forEachReplica(replicaInfo -> {\n            if (replicaInfo.getCollection().equals(withCollection)) {\n              movableReplicas.add(replicaInfo);\n            }\n          });\n\n          for (ReplicaInfo toMove : movableReplicas) {\n            // candidate source node for a move replica operation\n            Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n                .forceOperation(true)\n                .hint(Suggester.Hint.COLL_SHARD, new Pair<>(withCollection, \"shard1\"))\n                .hint(Suggester.Hint.SRC_NODE, row.node)\n                .hint(Suggester.Hint.REPLICA, toMove.getName())\n                .hint(Suggester.Hint.TARGET_NODE, ctx.violation.node);\n            if (ctx.addSuggestion(suggester) != null)\n              continue collectionLoop; // one suggestion is enough for this collection\n          }\n        }\n      }\n\n      // we could not find a valid move, so we suggest adding a replica\n      Suggester suggester = ctx.session.getSuggester(ADDREPLICA)\n          .forceOperation(true)\n          .hint(Suggester.Hint.COLL_SHARD, new Pair<>(withCollection, \"shard1\"))\n          .hint(Suggester.Hint.TARGET_NODE, ctx.violation.node);\n      ctx.addSuggestion(suggester);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation.getViolatingReplicas().isEmpty()) return;\n\n    Map<String, Object> nodeValues = ctx.session.nodeStateProvider.getNodeValues(ctx.violation.node, Collections.singleton(\"withCollection\"));\n    Map<String, String> withCollectionsMap = (Map<String, String>) nodeValues.get(\"withCollection\");\n    if (withCollectionsMap == null) return;\n\n    Set<String> uniqueCollections = new HashSet<>();\n    for (Violation.ReplicaInfoAndErr replicaInfoAndErr : ctx.violation.getViolatingReplicas()) {\n      uniqueCollections.add(replicaInfoAndErr.replicaInfo.getCollection());\n    }\n\n    collectionLoop:\n    for (String collection : uniqueCollections) {\n      String withCollection = withCollectionsMap.get(collection);\n      if (withCollection == null) continue;\n\n      // can we find a node from which we can move a replica of the `withCollection`\n      // without creating another violation?\n      for (Row row : ctx.session.matrix) {\n        if (ctx.violation.node.equals(row.node))  continue; // filter the violating node\n\n        Set<String> hostedCollections = new HashSet<>();\n        row.forEachReplica(replicaInfo -> hostedCollections.add(replicaInfo.getCollection()));\n\n        if (hostedCollections.contains(withCollection) && !hostedCollections.contains(collection))  {\n          // find the candidate replicas that we can move\n          List<ReplicaInfo> movableReplicas = new ArrayList<>();\n          row.forEachReplica(replicaInfo -> {\n            if (replicaInfo.getCollection().equals(withCollection)) {\n              movableReplicas.add(replicaInfo);\n            }\n          });\n\n          for (ReplicaInfo toMove : movableReplicas) {\n            // candidate source node for a move replica operation\n            Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n                .forceOperation(true)\n                .hint(Suggester.Hint.COLL_SHARD, new Pair<>(withCollection, \"shard1\"))\n                .hint(Suggester.Hint.SRC_NODE, row.node)\n                .hint(Suggester.Hint.REPLICA, toMove.getName())\n                .hint(Suggester.Hint.TARGET_NODE, ctx.violation.node);\n            if (ctx.addSuggestion(suggester) != null)\n              continue collectionLoop; // one suggestion is enough for this collection\n          }\n        }\n      }\n\n      // we could not find a valid move, so we suggest adding a replica\n      Suggester suggester = ctx.session.getSuggester(ADDREPLICA)\n          .forceOperation(true)\n          .hint(Suggester.Hint.COLL_SHARD, new Pair<>(withCollection, \"shard1\"))\n          .hint(Suggester.Hint.TARGET_NODE, ctx.violation.node);\n      ctx.addSuggestion(suggester);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#getSuggestions(Suggestion.Ctx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#getSuggestions(Suggestion.Ctx).mjava","sourceNew":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation.getViolatingReplicas().isEmpty()) return;\n\n    Map<String, Object> nodeValues = ctx.session.nodeStateProvider.getNodeValues(ctx.violation.node, Collections.singleton(\"withCollection\"));\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, String> withCollectionsMap = (Map<String, String>) nodeValues.get(\"withCollection\");\n    if (withCollectionsMap == null) return;\n\n    Set<String> uniqueCollections = new HashSet<>();\n    for (Violation.ReplicaInfoAndErr replicaInfoAndErr : ctx.violation.getViolatingReplicas()) {\n      uniqueCollections.add(replicaInfoAndErr.replicaInfo.getCollection());\n    }\n\n    collectionLoop:\n    for (String collection : uniqueCollections) {\n      String withCollection = withCollectionsMap.get(collection);\n      if (withCollection == null) continue;\n\n      // can we find a node from which we can move a replica of the `withCollection`\n      // without creating another violation?\n      for (Row row : ctx.session.matrix) {\n        if (ctx.violation.node.equals(row.node))  continue; // filter the violating node\n\n        Set<String> hostedCollections = new HashSet<>();\n        row.forEachReplica(replicaInfo -> hostedCollections.add(replicaInfo.getCollection()));\n\n        if (hostedCollections.contains(withCollection) && !hostedCollections.contains(collection))  {\n          // find the candidate replicas that we can move\n          List<Replica> movableReplicas = new ArrayList<>();\n          row.forEachReplica(replicaInfo -> {\n            if (replicaInfo.getCollection().equals(withCollection)) {\n              movableReplicas.add(replicaInfo);\n            }\n          });\n\n          for (Replica toMove : movableReplicas) {\n            // candidate source node for a move replica operation\n            Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n                .forceOperation(true)\n                .hint(Suggester.Hint.COLL_SHARD, new Pair<>(withCollection, \"shard1\"))\n                .hint(Suggester.Hint.SRC_NODE, row.node)\n                .hint(Suggester.Hint.REPLICA, toMove.getName())\n                .hint(Suggester.Hint.TARGET_NODE, ctx.violation.node);\n            if (ctx.addSuggestion(suggester) != null)\n              continue collectionLoop; // one suggestion is enough for this collection\n          }\n        }\n      }\n\n      // we could not find a valid move, so we suggest adding a replica\n      Suggester suggester = ctx.session.getSuggester(ADDREPLICA)\n          .forceOperation(true)\n          .hint(Suggester.Hint.COLL_SHARD, new Pair<>(withCollection, \"shard1\"))\n          .hint(Suggester.Hint.TARGET_NODE, ctx.violation.node);\n      ctx.addSuggestion(suggester);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation.getViolatingReplicas().isEmpty()) return;\n\n    Map<String, Object> nodeValues = ctx.session.nodeStateProvider.getNodeValues(ctx.violation.node, Collections.singleton(\"withCollection\"));\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, String> withCollectionsMap = (Map<String, String>) nodeValues.get(\"withCollection\");\n    if (withCollectionsMap == null) return;\n\n    Set<String> uniqueCollections = new HashSet<>();\n    for (Violation.ReplicaInfoAndErr replicaInfoAndErr : ctx.violation.getViolatingReplicas()) {\n      uniqueCollections.add(replicaInfoAndErr.replicaInfo.getCollection());\n    }\n\n    collectionLoop:\n    for (String collection : uniqueCollections) {\n      String withCollection = withCollectionsMap.get(collection);\n      if (withCollection == null) continue;\n\n      // can we find a node from which we can move a replica of the `withCollection`\n      // without creating another violation?\n      for (Row row : ctx.session.matrix) {\n        if (ctx.violation.node.equals(row.node))  continue; // filter the violating node\n\n        Set<String> hostedCollections = new HashSet<>();\n        row.forEachReplica(replicaInfo -> hostedCollections.add(replicaInfo.getCollection()));\n\n        if (hostedCollections.contains(withCollection) && !hostedCollections.contains(collection))  {\n          // find the candidate replicas that we can move\n          List<ReplicaInfo> movableReplicas = new ArrayList<>();\n          row.forEachReplica(replicaInfo -> {\n            if (replicaInfo.getCollection().equals(withCollection)) {\n              movableReplicas.add(replicaInfo);\n            }\n          });\n\n          for (ReplicaInfo toMove : movableReplicas) {\n            // candidate source node for a move replica operation\n            Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n                .forceOperation(true)\n                .hint(Suggester.Hint.COLL_SHARD, new Pair<>(withCollection, \"shard1\"))\n                .hint(Suggester.Hint.SRC_NODE, row.node)\n                .hint(Suggester.Hint.REPLICA, toMove.getName())\n                .hint(Suggester.Hint.TARGET_NODE, ctx.violation.node);\n            if (ctx.addSuggestion(suggester) != null)\n              continue collectionLoop; // one suggestion is enough for this collection\n          }\n        }\n      }\n\n      // we could not find a valid move, so we suggest adding a replica\n      Suggester suggester = ctx.session.getSuggester(ADDREPLICA)\n          .forceOperation(true)\n          .hint(Suggester.Hint.COLL_SHARD, new Pair<>(withCollection, \"shard1\"))\n          .hint(Suggester.Hint.TARGET_NODE, ctx.violation.node);\n      ctx.addSuggestion(suggester);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/WithCollectionVariable#getSuggestions(Suggestion.Ctx).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation.getViolatingReplicas().isEmpty()) return;\n\n    Map<String, Object> nodeValues = ctx.session.nodeStateProvider.getNodeValues(ctx.violation.node, Collections.singleton(\"withCollection\"));\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, String> withCollectionsMap = (Map<String, String>) nodeValues.get(\"withCollection\");\n    if (withCollectionsMap == null) return;\n\n    Set<String> uniqueCollections = new HashSet<>();\n    for (Violation.ReplicaInfoAndErr replicaInfoAndErr : ctx.violation.getViolatingReplicas()) {\n      uniqueCollections.add(replicaInfoAndErr.replicaInfo.getCollection());\n    }\n\n    collectionLoop:\n    for (String collection : uniqueCollections) {\n      String withCollection = withCollectionsMap.get(collection);\n      if (withCollection == null) continue;\n\n      // can we find a node from which we can move a replica of the `withCollection`\n      // without creating another violation?\n      for (Row row : ctx.session.matrix) {\n        if (ctx.violation.node.equals(row.node))  continue; // filter the violating node\n\n        Set<String> hostedCollections = new HashSet<>();\n        row.forEachReplica(replicaInfo -> hostedCollections.add(replicaInfo.getCollection()));\n\n        if (hostedCollections.contains(withCollection) && !hostedCollections.contains(collection))  {\n          // find the candidate replicas that we can move\n          List<Replica> movableReplicas = new ArrayList<>();\n          row.forEachReplica(replicaInfo -> {\n            if (replicaInfo.getCollection().equals(withCollection)) {\n              movableReplicas.add(replicaInfo);\n            }\n          });\n\n          for (Replica toMove : movableReplicas) {\n            // candidate source node for a move replica operation\n            Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n                .forceOperation(true)\n                .hint(Suggester.Hint.COLL_SHARD, new Pair<>(withCollection, \"shard1\"))\n                .hint(Suggester.Hint.SRC_NODE, row.node)\n                .hint(Suggester.Hint.REPLICA, toMove.getName())\n                .hint(Suggester.Hint.TARGET_NODE, ctx.violation.node);\n            if (ctx.addSuggestion(suggester) != null)\n              continue collectionLoop; // one suggestion is enough for this collection\n          }\n        }\n      }\n\n      // we could not find a valid move, so we suggest adding a replica\n      Suggester suggester = ctx.session.getSuggester(ADDREPLICA)\n          .forceOperation(true)\n          .hint(Suggester.Hint.COLL_SHARD, new Pair<>(withCollection, \"shard1\"))\n          .hint(Suggester.Hint.TARGET_NODE, ctx.violation.node);\n      ctx.addSuggestion(suggester);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["527adea7ce767368d7317339023e18e39702132e"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["527adea7ce767368d7317339023e18e39702132e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"527adea7ce767368d7317339023e18e39702132e":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}