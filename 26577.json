{"path":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#scorer(LeafReaderContext,Bits,float).mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#scorer(LeafReaderContext,Bits,float).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n      if (context.ord == 0) {\n        policy.onUse(getQuery());\n      }\n      DocIdSet docIdSet = get(in.getQuery(), context);\n      if (docIdSet == null) {\n        if (policy.shouldCache(in.getQuery(), context)) {\n          final Scorer scorer = in.scorer(context, null);\n          if (scorer == null) {\n            docIdSet = DocIdSet.EMPTY;\n          } else {\n            docIdSet = cacheImpl(scorer, context.reader());\n          }\n          putIfAbsent(in.getQuery(), context, docIdSet);\n        } else {\n          return in.scorer(context, acceptDocs);\n        }\n      }\n\n      assert docIdSet != null;\n      if (docIdSet == DocIdSet.EMPTY) {\n        return null;\n      }\n      final DocIdSetIterator approximation = docIdSet.iterator();\n      if (approximation == null) {\n        return null;\n      }\n\n      final DocIdSetIterator disi;\n      final TwoPhaseIterator twoPhaseView;\n      if (acceptDocs == null) {\n        twoPhaseView = null;\n        disi = approximation;\n      } else {\n        twoPhaseView = new TwoPhaseIterator() {\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            return acceptDocs.get(doc);\n          }\n\n          @Override\n          public DocIdSetIterator approximation() {\n            return approximation;\n          }\n        };\n        disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseView);\n      }\n      return new Scorer(this) {\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          return twoPhaseView;\n        }\n\n        @Override\n        public float score() throws IOException {\n          return 0f;\n        }\n\n        @Override\n        public int freq() throws IOException {\n          return 1;\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6b1be5d2b36d6a30913778ef61374103d55e33","date":1427303640,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#scorer(LeafReaderContext,Bits,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#scorer(LeafReaderContext,Bits,float).mjava","sourceNew":"    @Override\n    Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n      if (context.ord == 0) {\n        policy.onUse(getQuery());\n      }\n      DocIdSet docIdSet = get(in.getQuery(), context);\n      if (docIdSet == null) {\n        if (policy.shouldCache(in.getQuery(), context)) {\n          final Scorer scorer = in.scorer(context, null);\n          if (scorer == null) {\n            docIdSet = DocIdSet.EMPTY;\n          } else {\n            docIdSet = cacheImpl(scorer, context.reader());\n          }\n          putIfAbsent(in.getQuery(), context, docIdSet);\n        } else {\n          return in.scorer(context, acceptDocs);\n        }\n      }\n\n      assert docIdSet != null;\n      if (docIdSet == DocIdSet.EMPTY) {\n        return null;\n      }\n      final DocIdSetIterator approximation = docIdSet.iterator();\n      if (approximation == null) {\n        return null;\n      }\n\n      final DocIdSetIterator disi;\n      final TwoPhaseIterator twoPhaseView;\n      if (acceptDocs == null) {\n        twoPhaseView = null;\n        disi = approximation;\n      } else {\n        twoPhaseView = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            return acceptDocs.get(doc);\n          }\n        };\n        disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseView);\n      }\n      return new Scorer(this) {\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          return twoPhaseView;\n        }\n\n        @Override\n        public float score() throws IOException {\n          return 0f;\n        }\n\n        @Override\n        public int freq() throws IOException {\n          return 1;\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n      if (context.ord == 0) {\n        policy.onUse(getQuery());\n      }\n      DocIdSet docIdSet = get(in.getQuery(), context);\n      if (docIdSet == null) {\n        if (policy.shouldCache(in.getQuery(), context)) {\n          final Scorer scorer = in.scorer(context, null);\n          if (scorer == null) {\n            docIdSet = DocIdSet.EMPTY;\n          } else {\n            docIdSet = cacheImpl(scorer, context.reader());\n          }\n          putIfAbsent(in.getQuery(), context, docIdSet);\n        } else {\n          return in.scorer(context, acceptDocs);\n        }\n      }\n\n      assert docIdSet != null;\n      if (docIdSet == DocIdSet.EMPTY) {\n        return null;\n      }\n      final DocIdSetIterator approximation = docIdSet.iterator();\n      if (approximation == null) {\n        return null;\n      }\n\n      final DocIdSetIterator disi;\n      final TwoPhaseIterator twoPhaseView;\n      if (acceptDocs == null) {\n        twoPhaseView = null;\n        disi = approximation;\n      } else {\n        twoPhaseView = new TwoPhaseIterator() {\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            return acceptDocs.get(doc);\n          }\n\n          @Override\n          public DocIdSetIterator approximation() {\n            return approximation;\n          }\n        };\n        disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseView);\n      }\n      return new Scorer(this) {\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          return twoPhaseView;\n        }\n\n        @Override\n        public float score() throws IOException {\n          return 0f;\n        }\n\n        @Override\n        public int freq() throws IOException {\n          return 1;\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#scorer(LeafReaderContext,Bits,float).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n      if (context.ord == 0) {\n        policy.onUse(getQuery());\n      }\n      DocIdSet docIdSet = get(in.getQuery(), context);\n      if (docIdSet == null) {\n        if (policy.shouldCache(in.getQuery(), context)) {\n          final Scorer scorer = in.scorer(context, null);\n          if (scorer == null) {\n            docIdSet = DocIdSet.EMPTY;\n          } else {\n            docIdSet = cacheImpl(scorer, context.reader());\n          }\n          putIfAbsent(in.getQuery(), context, docIdSet);\n        } else {\n          return in.scorer(context, acceptDocs);\n        }\n      }\n\n      assert docIdSet != null;\n      if (docIdSet == DocIdSet.EMPTY) {\n        return null;\n      }\n      final DocIdSetIterator approximation = docIdSet.iterator();\n      if (approximation == null) {\n        return null;\n      }\n\n      final DocIdSetIterator disi;\n      final TwoPhaseIterator twoPhaseView;\n      if (acceptDocs == null) {\n        twoPhaseView = null;\n        disi = approximation;\n      } else {\n        twoPhaseView = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            return acceptDocs.get(doc);\n          }\n        };\n        disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseView);\n      }\n      return new Scorer(this) {\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          return twoPhaseView;\n        }\n\n        @Override\n        public float score() throws IOException {\n          return 0f;\n        }\n\n        @Override\n        public int freq() throws IOException {\n          return 1;\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29efba95465cc25f76d9f92aec35c9f71b1a55ca","date":1428692677,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#scorer(LeafReaderContext,Bits,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#scorer(LeafReaderContext,Bits,float).mjava","sourceNew":"    @Override\n    protected Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n      if (context.ord == 0) {\n        policy.onUse(getQuery());\n      }\n      DocIdSet docIdSet = get(in.getQuery(), context);\n      if (docIdSet == null) {\n        if (policy.shouldCache(in.getQuery(), context)) {\n          final Scorer scorer = in.scorer(context, null);\n          if (scorer == null) {\n            docIdSet = DocIdSet.EMPTY;\n          } else {\n            docIdSet = cacheImpl(scorer, context.reader());\n          }\n          putIfAbsent(in.getQuery(), context, docIdSet);\n        } else {\n          return in.scorer(context, acceptDocs);\n        }\n      }\n\n      assert docIdSet != null;\n      if (docIdSet == DocIdSet.EMPTY) {\n        return null;\n      }\n      final DocIdSetIterator approximation = docIdSet.iterator();\n      if (approximation == null) {\n        return null;\n      }\n\n      final DocIdSetIterator disi;\n      final TwoPhaseIterator twoPhaseView;\n      if (acceptDocs == null) {\n        twoPhaseView = null;\n        disi = approximation;\n      } else {\n        twoPhaseView = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            return acceptDocs.get(doc);\n          }\n        };\n        disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseView);\n      }\n      return new Scorer(this) {\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          return twoPhaseView;\n        }\n\n        @Override\n        public float score() throws IOException {\n          return 0f;\n        }\n\n        @Override\n        public int freq() throws IOException {\n          return 1;\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n      if (context.ord == 0) {\n        policy.onUse(getQuery());\n      }\n      DocIdSet docIdSet = get(in.getQuery(), context);\n      if (docIdSet == null) {\n        if (policy.shouldCache(in.getQuery(), context)) {\n          final Scorer scorer = in.scorer(context, null);\n          if (scorer == null) {\n            docIdSet = DocIdSet.EMPTY;\n          } else {\n            docIdSet = cacheImpl(scorer, context.reader());\n          }\n          putIfAbsent(in.getQuery(), context, docIdSet);\n        } else {\n          return in.scorer(context, acceptDocs);\n        }\n      }\n\n      assert docIdSet != null;\n      if (docIdSet == DocIdSet.EMPTY) {\n        return null;\n      }\n      final DocIdSetIterator approximation = docIdSet.iterator();\n      if (approximation == null) {\n        return null;\n      }\n\n      final DocIdSetIterator disi;\n      final TwoPhaseIterator twoPhaseView;\n      if (acceptDocs == null) {\n        twoPhaseView = null;\n        disi = approximation;\n      } else {\n        twoPhaseView = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            return acceptDocs.get(doc);\n          }\n        };\n        disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseView);\n      }\n      return new Scorer(this) {\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          return twoPhaseView;\n        }\n\n        @Override\n        public float score() throws IOException {\n          return 0f;\n        }\n\n        @Override\n        public int freq() throws IOException {\n          return 1;\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f24c20ef0735cfb643ce2b0309b9e94aaf75f16a","date":1430251781,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#scorer(LeafReaderContext,Bits,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#scorer(LeafReaderContext,Bits,float).mjava","sourceNew":"    @Override\n    protected Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n      if (context.ord == 0) {\n        policy.onUse(getQuery());\n      }\n      DocIdSet docIdSet = get(in.getQuery(), context);\n      if (docIdSet == null) {\n        if (cacheEntryHasReasonableWorstCaseSize(ReaderUtil.getTopLevelContext(context).reader().maxDoc())\n            && policy.shouldCache(in.getQuery(), context)) {\n          final Scorer scorer = in.scorer(context, null);\n          if (scorer == null) {\n            docIdSet = DocIdSet.EMPTY;\n          } else {\n            docIdSet = cacheImpl(scorer, context.reader());\n          }\n          putIfAbsent(in.getQuery(), context, docIdSet);\n        } else {\n          return in.scorer(context, acceptDocs);\n        }\n      }\n\n      assert docIdSet != null;\n      if (docIdSet == DocIdSet.EMPTY) {\n        return null;\n      }\n      final DocIdSetIterator approximation = docIdSet.iterator();\n      if (approximation == null) {\n        return null;\n      }\n\n      final DocIdSetIterator disi;\n      final TwoPhaseIterator twoPhaseView;\n      if (acceptDocs == null) {\n        twoPhaseView = null;\n        disi = approximation;\n      } else {\n        twoPhaseView = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            return acceptDocs.get(doc);\n          }\n        };\n        disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseView);\n      }\n      return new Scorer(this) {\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          return twoPhaseView;\n        }\n\n        @Override\n        public float score() throws IOException {\n          return 0f;\n        }\n\n        @Override\n        public int freq() throws IOException {\n          return 1;\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    protected Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n      if (context.ord == 0) {\n        policy.onUse(getQuery());\n      }\n      DocIdSet docIdSet = get(in.getQuery(), context);\n      if (docIdSet == null) {\n        if (policy.shouldCache(in.getQuery(), context)) {\n          final Scorer scorer = in.scorer(context, null);\n          if (scorer == null) {\n            docIdSet = DocIdSet.EMPTY;\n          } else {\n            docIdSet = cacheImpl(scorer, context.reader());\n          }\n          putIfAbsent(in.getQuery(), context, docIdSet);\n        } else {\n          return in.scorer(context, acceptDocs);\n        }\n      }\n\n      assert docIdSet != null;\n      if (docIdSet == DocIdSet.EMPTY) {\n        return null;\n      }\n      final DocIdSetIterator approximation = docIdSet.iterator();\n      if (approximation == null) {\n        return null;\n      }\n\n      final DocIdSetIterator disi;\n      final TwoPhaseIterator twoPhaseView;\n      if (acceptDocs == null) {\n        twoPhaseView = null;\n        disi = approximation;\n      } else {\n        twoPhaseView = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            return acceptDocs.get(doc);\n          }\n        };\n        disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseView);\n      }\n      return new Scorer(this) {\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          return twoPhaseView;\n        }\n\n        @Override\n        public float score() throws IOException {\n          return 0f;\n        }\n\n        @Override\n        public int freq() throws IOException {\n          return 1;\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7f94ff172f40ff68a926d112e25b96bc38e5a27","date":1431002360,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.CachingWrapperWeight#scorer(LeafReaderContext,Bits,float).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      if (context.ord == 0) {\n        policy.onUse(getQuery());\n      }\n      DocIdSet docIdSet = get(in.getQuery(), context);\n      if (docIdSet == null) {\n        if (cacheEntryHasReasonableWorstCaseSize(ReaderUtil.getTopLevelContext(context).reader().maxDoc())\n            && policy.shouldCache(in.getQuery(), context)) {\n          final Scorer scorer = in.scorer(context, null);\n          if (scorer == null) {\n            docIdSet = DocIdSet.EMPTY;\n          } else {\n            docIdSet = cacheImpl(scorer, context.reader());\n          }\n          putIfAbsent(in.getQuery(), context, docIdSet);\n        } else {\n          return in.scorer(context, acceptDocs);\n        }\n      }\n\n      assert docIdSet != null;\n      if (docIdSet == DocIdSet.EMPTY) {\n        return null;\n      }\n      final DocIdSetIterator disi = docIdSet.iterator();\n      if (disi == null) {\n        return null;\n      }\n\n      // we apply acceptDocs as an approximation\n      if (acceptDocs == null) {\n        return new ConstantScoreScorer(this, 0f, disi);\n      } else {\n        final TwoPhaseIterator twoPhaseView = new TwoPhaseIterator(disi) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            return acceptDocs.get(doc);\n          }\n        };\n        return new ConstantScoreScorer(this, 0f, twoPhaseView);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n      if (context.ord == 0) {\n        policy.onUse(getQuery());\n      }\n      DocIdSet docIdSet = get(in.getQuery(), context);\n      if (docIdSet == null) {\n        if (cacheEntryHasReasonableWorstCaseSize(ReaderUtil.getTopLevelContext(context).reader().maxDoc())\n            && policy.shouldCache(in.getQuery(), context)) {\n          final Scorer scorer = in.scorer(context, null);\n          if (scorer == null) {\n            docIdSet = DocIdSet.EMPTY;\n          } else {\n            docIdSet = cacheImpl(scorer, context.reader());\n          }\n          putIfAbsent(in.getQuery(), context, docIdSet);\n        } else {\n          return in.scorer(context, acceptDocs);\n        }\n      }\n\n      assert docIdSet != null;\n      if (docIdSet == DocIdSet.EMPTY) {\n        return null;\n      }\n      final DocIdSetIterator approximation = docIdSet.iterator();\n      if (approximation == null) {\n        return null;\n      }\n\n      final DocIdSetIterator disi;\n      final TwoPhaseIterator twoPhaseView;\n      if (acceptDocs == null) {\n        twoPhaseView = null;\n        disi = approximation;\n      } else {\n        twoPhaseView = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            return acceptDocs.get(doc);\n          }\n        };\n        disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseView);\n      }\n      return new Scorer(this) {\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          return twoPhaseView;\n        }\n\n        @Override\n        public float score() throws IOException {\n          return 0f;\n        }\n\n        @Override\n        public int freq() throws IOException {\n          return 1;\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f24c20ef0735cfb643ce2b0309b9e94aaf75f16a":["29efba95465cc25f76d9f92aec35c9f71b1a55ca"],"29efba95465cc25f76d9f92aec35c9f71b1a55ca":["7a6b1be5d2b36d6a30913778ef61374103d55e33"],"7a6b1be5d2b36d6a30913778ef61374103d55e33":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a6b1be5d2b36d6a30913778ef61374103d55e33"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["f24c20ef0735cfb643ce2b0309b9e94aaf75f16a"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"]},"commit2Childs":{"f24c20ef0735cfb643ce2b0309b9e94aaf75f16a":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"29efba95465cc25f76d9f92aec35c9f71b1a55ca":["f24c20ef0735cfb643ce2b0309b9e94aaf75f16a"],"7a6b1be5d2b36d6a30913778ef61374103d55e33":["29efba95465cc25f76d9f92aec35c9f71b1a55ca","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["7a6b1be5d2b36d6a30913778ef61374103d55e33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}