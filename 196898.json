{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask#reportSelectByPrefix(List[TaskStats]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask#reportSelectByPrefix(List[TaskStats]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask#reportSelectByPrefix(List[TaskStats]).mjava","sourceNew":"  protected Report reportSelectByPrefix(List<TaskStats> taskStats) {\n    String longestOp = longestOp(taskStats);\n    boolean first = true;\n    StringBuffer sb = new StringBuffer();\n    sb.append(tableTitle(longestOp));\n    sb.append(newline);\n    int reported = 0;\n    for (final TaskStats stat : taskStats) {\n      if (stat.getElapsed()>=0 && stat.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        if (!first) {\n          sb.append(newline);\n        }\n        first = false;\n        String line = taskReportLine(longestOp,stat);\n        if (taskStats.size()>2 && reported%2==0) {\n          line = line.replaceAll(\"   \",\" - \");\n        }\n        sb.append(line);\n      }\n    }\n    String reptxt = (reported==0 ? \"No Matching Entries Were Found!\" : sb.toString());\n    return new Report(reptxt,reported,reported, taskStats.size());\n  }\n\n","sourceOld":"  protected Report reportSelectByPrefix(List<TaskStats> taskStats) {\n    String longestOp = longestOp(taskStats);\n    boolean first = true;\n    StringBuffer sb = new StringBuffer();\n    sb.append(tableTitle(longestOp));\n    sb.append(newline);\n    int reported = 0;\n    for (final TaskStats stat : taskStats) {\n      if (stat.getElapsed()>=0 && stat.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        if (!first) {\n          sb.append(newline);\n        }\n        first = false;\n        String line = taskReportLine(longestOp,stat);\n        if (taskStats.size()>2 && reported%2==0) {\n          line = line.replaceAll(\"   \",\" - \");\n        }\n        sb.append(line);\n      }\n    }\n    String reptxt = (reported==0 ? \"No Matching Entries Were Found!\" : sb.toString());\n    return new Report(reptxt,reported,reported, taskStats.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b80ad3438ccc68d1ef441add711ed2143324f14","date":1293087175,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask#reportSelectByPrefix(List[TaskStats]).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask#reportSelectByPrefix(List[TaskStats]).mjava","sourceNew":"  protected Report reportSelectByPrefix(List<TaskStats> taskStats) {\n    String longestOp = longestOp(taskStats);\n    boolean first = true;\n    StringBuilder sb = new StringBuilder();\n    sb.append(tableTitle(longestOp));\n    sb.append(newline);\n    int reported = 0;\n    for (final TaskStats stat : taskStats) {\n      if (stat.getElapsed()>=0 && stat.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        if (!first) {\n          sb.append(newline);\n        }\n        first = false;\n        String line = taskReportLine(longestOp,stat);\n        if (taskStats.size()>2 && reported%2==0) {\n          line = line.replaceAll(\"   \",\" - \");\n        }\n        sb.append(line);\n      }\n    }\n    String reptxt = (reported==0 ? \"No Matching Entries Were Found!\" : sb.toString());\n    return new Report(reptxt,reported,reported, taskStats.size());\n  }\n\n","sourceOld":"  protected Report reportSelectByPrefix(List<TaskStats> taskStats) {\n    String longestOp = longestOp(taskStats);\n    boolean first = true;\n    StringBuffer sb = new StringBuffer();\n    sb.append(tableTitle(longestOp));\n    sb.append(newline);\n    int reported = 0;\n    for (final TaskStats stat : taskStats) {\n      if (stat.getElapsed()>=0 && stat.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        if (!first) {\n          sb.append(newline);\n        }\n        first = false;\n        String line = taskReportLine(longestOp,stat);\n        if (taskStats.size()>2 && reported%2==0) {\n          line = line.replaceAll(\"   \",\" - \");\n        }\n        sb.append(line);\n      }\n    }\n    String reptxt = (reported==0 ? \"No Matching Entries Were Found!\" : sb.toString());\n    return new Report(reptxt,reported,reported, taskStats.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc5ecd93bcd50b2199757091d526fc1bcbce0db1","date":1293154244,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask#reportSelectByPrefix(List[TaskStats]).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask#reportSelectByPrefix(List[TaskStats]).mjava","sourceNew":"  protected Report reportSelectByPrefix(List<TaskStats> taskStats) {\n    String longestOp = longestOp(taskStats);\n    boolean first = true;\n    StringBuilder sb = new StringBuilder();\n    sb.append(tableTitle(longestOp));\n    sb.append(newline);\n    int reported = 0;\n    for (final TaskStats stat : taskStats) {\n      if (stat.getElapsed()>=0 && stat.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        if (!first) {\n          sb.append(newline);\n        }\n        first = false;\n        String line = taskReportLine(longestOp,stat);\n        if (taskStats.size()>2 && reported%2==0) {\n          line = line.replaceAll(\"   \",\" - \");\n        }\n        sb.append(line);\n      }\n    }\n    String reptxt = (reported==0 ? \"No Matching Entries Were Found!\" : sb.toString());\n    return new Report(reptxt,reported,reported, taskStats.size());\n  }\n\n","sourceOld":"  protected Report reportSelectByPrefix(List<TaskStats> taskStats) {\n    String longestOp = longestOp(taskStats);\n    boolean first = true;\n    StringBuffer sb = new StringBuffer();\n    sb.append(tableTitle(longestOp));\n    sb.append(newline);\n    int reported = 0;\n    for (final TaskStats stat : taskStats) {\n      if (stat.getElapsed()>=0 && stat.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        if (!first) {\n          sb.append(newline);\n        }\n        first = false;\n        String line = taskReportLine(longestOp,stat);\n        if (taskStats.size()>2 && reported%2==0) {\n          line = line.replaceAll(\"   \",\" - \");\n        }\n        sb.append(line);\n      }\n    }\n    String reptxt = (reported==0 ? \"No Matching Entries Were Found!\" : sb.toString());\n    return new Report(reptxt,reported,reported, taskStats.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask#reportSelectByPrefix(List[TaskStats]).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask#reportSelectByPrefix(List[TaskStats]).mjava","sourceNew":"  protected Report reportSelectByPrefix(List<TaskStats> taskStats) {\n    String longestOp = longestOp(taskStats);\n    boolean first = true;\n    StringBuilder sb = new StringBuilder();\n    sb.append(tableTitle(longestOp));\n    sb.append(newline);\n    int reported = 0;\n    for (final TaskStats stat : taskStats) {\n      if (stat.getElapsed()>=0 && stat.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        if (!first) {\n          sb.append(newline);\n        }\n        first = false;\n        String line = taskReportLine(longestOp,stat);\n        if (taskStats.size()>2 && reported%2==0) {\n          line = line.replaceAll(\"   \",\" - \");\n        }\n        sb.append(line);\n      }\n    }\n    String reptxt = (reported==0 ? \"No Matching Entries Were Found!\" : sb.toString());\n    return new Report(reptxt,reported,reported, taskStats.size());\n  }\n\n","sourceOld":"  protected Report reportSelectByPrefix(List<TaskStats> taskStats) {\n    String longestOp = longestOp(taskStats);\n    boolean first = true;\n    StringBuilder sb = new StringBuilder();\n    sb.append(tableTitle(longestOp));\n    sb.append(newline);\n    int reported = 0;\n    for (final TaskStats stat : taskStats) {\n      if (stat.getElapsed()>=0 && stat.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        if (!first) {\n          sb.append(newline);\n        }\n        first = false;\n        String line = taskReportLine(longestOp,stat);\n        if (taskStats.size()>2 && reported%2==0) {\n          line = line.replaceAll(\"   \",\" - \");\n        }\n        sb.append(line);\n      }\n    }\n    String reptxt = (reported==0 ? \"No Matching Entries Were Found!\" : sb.toString());\n    return new Report(reptxt,reported,reported, taskStats.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask#reportSelectByPrefix(List[TaskStats]).mjava","sourceNew":null,"sourceOld":"  protected Report reportSelectByPrefix(List<TaskStats> taskStats) {\n    String longestOp = longestOp(taskStats);\n    boolean first = true;\n    StringBuffer sb = new StringBuffer();\n    sb.append(tableTitle(longestOp));\n    sb.append(newline);\n    int reported = 0;\n    for (final TaskStats stat : taskStats) {\n      if (stat.getElapsed()>=0 && stat.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        if (!first) {\n          sb.append(newline);\n        }\n        first = false;\n        String line = taskReportLine(longestOp,stat);\n        if (taskStats.size()>2 && reported%2==0) {\n          line = line.replaceAll(\"   \",\" - \");\n        }\n        sb.append(line);\n      }\n    }\n    String reptxt = (reported==0 ? \"No Matching Entries Were Found!\" : sb.toString());\n    return new Report(reptxt,reported,reported, taskStats.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask#reportSelectByPrefix(List[TaskStats]).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/RepSelectByPrefTask#reportSelectByPrefix(List[TaskStats]).mjava","sourceNew":"  protected Report reportSelectByPrefix(List<TaskStats> taskStats) {\n    String longestOp = longestOp(taskStats);\n    boolean first = true;\n    StringBuilder sb = new StringBuilder();\n    sb.append(tableTitle(longestOp));\n    sb.append(newline);\n    int reported = 0;\n    for (final TaskStats stat : taskStats) {\n      if (stat.getElapsed()>=0 && stat.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        if (!first) {\n          sb.append(newline);\n        }\n        first = false;\n        String line = taskReportLine(longestOp,stat);\n        if (taskStats.size()>2 && reported%2==0) {\n          line = line.replaceAll(\"   \",\" - \");\n        }\n        sb.append(line);\n      }\n    }\n    String reptxt = (reported==0 ? \"No Matching Entries Were Found!\" : sb.toString());\n    return new Report(reptxt,reported,reported, taskStats.size());\n  }\n\n","sourceOld":"  protected Report reportSelectByPrefix(List<TaskStats> taskStats) {\n    String longestOp = longestOp(taskStats);\n    boolean first = true;\n    StringBuilder sb = new StringBuilder();\n    sb.append(tableTitle(longestOp));\n    sb.append(newline);\n    int reported = 0;\n    for (final TaskStats stat : taskStats) {\n      if (stat.getElapsed()>=0 && stat.getTask().getName().startsWith(prefix)) { // only ended tasks with proper name\n        reported++;\n        if (!first) {\n          sb.append(newline);\n        }\n        first = false;\n        String line = taskReportLine(longestOp,stat);\n        if (taskStats.size()>2 && reported%2==0) {\n          line = line.replaceAll(\"   \",\" - \");\n        }\n        sb.append(line);\n      }\n    }\n    String reptxt = (reported==0 ? \"No Matching Entries Were Found!\" : sb.toString());\n    return new Report(reptxt,reported,reported, taskStats.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["9b80ad3438ccc68d1ef441add711ed2143324f14"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["9454a6510e2db155fb01faa5c049b06ece95fab9","9b80ad3438ccc68d1ef441add711ed2143324f14"],"9b80ad3438ccc68d1ef441add711ed2143324f14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["dc5ecd93bcd50b2199757091d526fc1bcbce0db1","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"9b80ad3438ccc68d1ef441add711ed2143324f14":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","dc5ecd93bcd50b2199757091d526fc1bcbce0db1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","9b80ad3438ccc68d1ef441add711ed2143324f14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}