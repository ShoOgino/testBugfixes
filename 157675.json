{"path":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#pingLeader(String,CoreDescriptor,boolean).mjava","commits":[{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#pingLeader(String,CoreDescriptor,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private final Replica pingLeader(String ourUrl, CoreDescriptor coreDesc, boolean mayPutReplicaAsDown) throws Exception {\n    int numTried = 0;\n    while (true) {\n      CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n      if (mayPutReplicaAsDown && numTried == 1 &&\n          docCollection.getReplica(coreDesc.getCloudDescriptor().getCoreNodeName()).getState() == Replica.State.ACTIVE) {\n        // this operation may take a long time, by putting replica into DOWN state, client won't query this replica\n        zkController.publish(coreDesc, Replica.State.DOWN);\n      }\n      numTried++;\n      final Replica leaderReplica = zkStateReader.getLeaderRetry(\n          cloudDesc.getCollectionName(), cloudDesc.getShardId());\n\n      if (isClosed()) {\n        return leaderReplica;\n      }\n\n      if (leaderReplica.getCoreUrl().equals(ourUrl)) {\n        return leaderReplica;\n      }\n\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(leaderReplica.getCoreUrl())\n          .withSocketTimeout(1000)\n          .withConnectionTimeout(1000)\n          .build()) {\n        SolrPingResponse resp = httpSolrClient.ping();\n        return leaderReplica;\n      } catch (IOException e) {\n        LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl(), e);\n        Thread.sleep(500);\n      } catch (Exception e) {\n        if (e.getCause() instanceof IOException) {\n          LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl(), e);\n          Thread.sleep(500);\n        } else {\n          return leaderReplica;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","9b62c5fc89bd60031bc1f51ff1f8a21c5b0bf791","849f0b604d62767ac71859248cb478428b39170c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9339df295b9162e4c81adbb4da44b5939d27c1ef","date":1520594349,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#pingLeader(String,CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#pingLeader(String,CoreDescriptor,boolean).mjava","sourceNew":"  private final Replica pingLeader(String ourUrl, CoreDescriptor coreDesc, boolean mayPutReplicaAsDown) throws Exception {\n    int numTried = 0;\n    while (true) {\n      CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n      if (mayPutReplicaAsDown && numTried == 1 &&\n          docCollection.getReplica(coreDesc.getCloudDescriptor().getCoreNodeName()).getState() == Replica.State.ACTIVE) {\n        // this operation may take a long time, by putting replica into DOWN state, client won't query this replica\n        zkController.publish(coreDesc, Replica.State.DOWN);\n      }\n      numTried++;\n      Replica leaderReplica = null;\n\n      if (isClosed()) {\n        return leaderReplica;\n      }\n\n      try {\n        leaderReplica = zkStateReader.getLeaderRetry(\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n      } catch (SolrException e) {\n        Thread.sleep(500);\n        continue;\n      }\n\n      if (leaderReplica.getCoreUrl().equals(ourUrl)) {\n        return leaderReplica;\n      }\n\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(leaderReplica.getCoreUrl())\n          .withSocketTimeout(1000)\n          .withConnectionTimeout(1000)\n          .build()) {\n        SolrPingResponse resp = httpSolrClient.ping();\n        return leaderReplica;\n      } catch (IOException e) {\n        LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl(), e);\n        Thread.sleep(500);\n      } catch (Exception e) {\n        if (e.getCause() instanceof IOException) {\n          LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl(), e);\n          Thread.sleep(500);\n        } else {\n          return leaderReplica;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private final Replica pingLeader(String ourUrl, CoreDescriptor coreDesc, boolean mayPutReplicaAsDown) throws Exception {\n    int numTried = 0;\n    while (true) {\n      CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n      if (mayPutReplicaAsDown && numTried == 1 &&\n          docCollection.getReplica(coreDesc.getCloudDescriptor().getCoreNodeName()).getState() == Replica.State.ACTIVE) {\n        // this operation may take a long time, by putting replica into DOWN state, client won't query this replica\n        zkController.publish(coreDesc, Replica.State.DOWN);\n      }\n      numTried++;\n      final Replica leaderReplica = zkStateReader.getLeaderRetry(\n          cloudDesc.getCollectionName(), cloudDesc.getShardId());\n\n      if (isClosed()) {\n        return leaderReplica;\n      }\n\n      if (leaderReplica.getCoreUrl().equals(ourUrl)) {\n        return leaderReplica;\n      }\n\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(leaderReplica.getCoreUrl())\n          .withSocketTimeout(1000)\n          .withConnectionTimeout(1000)\n          .build()) {\n        SolrPingResponse resp = httpSolrClient.ping();\n        return leaderReplica;\n      } catch (IOException e) {\n        LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl(), e);\n        Thread.sleep(500);\n      } catch (Exception e) {\n        if (e.getCause() instanceof IOException) {\n          LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl(), e);\n          Thread.sleep(500);\n        } else {\n          return leaderReplica;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61e80c8b2b34aad07b11e57e3036a34e2df132fe","date":1520726746,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#pingLeader(String,CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#pingLeader(String,CoreDescriptor,boolean).mjava","sourceNew":"  private final Replica pingLeader(String ourUrl, CoreDescriptor coreDesc, boolean mayPutReplicaAsDown) throws Exception {\n    int numTried = 0;\n    while (true) {\n      CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n      if (mayPutReplicaAsDown && numTried == 1 &&\n          docCollection.getReplica(coreDesc.getCloudDescriptor().getCoreNodeName()).getState() == Replica.State.ACTIVE) {\n        // this operation may take a long time, by putting replica into DOWN state, client won't query this replica\n        zkController.publish(coreDesc, Replica.State.DOWN);\n      }\n      numTried++;\n      Replica leaderReplica = null;\n\n      if (isClosed()) {\n        return leaderReplica;\n      }\n\n      try {\n        leaderReplica = zkStateReader.getLeaderRetry(\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n      } catch (SolrException e) {\n        Thread.sleep(500);\n        continue;\n      }\n\n      if (leaderReplica.getCoreUrl().equals(ourUrl)) {\n        return leaderReplica;\n      }\n\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(leaderReplica.getCoreUrl())\n          .withSocketTimeout(1000)\n          .withConnectionTimeout(1000)\n          .build()) {\n        SolrPingResponse resp = httpSolrClient.ping();\n        return leaderReplica;\n      } catch (IOException e) {\n        LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n        Thread.sleep(500);\n      } catch (Exception e) {\n        if (e.getCause() instanceof IOException) {\n          LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n          Thread.sleep(500);\n        } else {\n          return leaderReplica;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private final Replica pingLeader(String ourUrl, CoreDescriptor coreDesc, boolean mayPutReplicaAsDown) throws Exception {\n    int numTried = 0;\n    while (true) {\n      CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n      if (mayPutReplicaAsDown && numTried == 1 &&\n          docCollection.getReplica(coreDesc.getCloudDescriptor().getCoreNodeName()).getState() == Replica.State.ACTIVE) {\n        // this operation may take a long time, by putting replica into DOWN state, client won't query this replica\n        zkController.publish(coreDesc, Replica.State.DOWN);\n      }\n      numTried++;\n      Replica leaderReplica = null;\n\n      if (isClosed()) {\n        return leaderReplica;\n      }\n\n      try {\n        leaderReplica = zkStateReader.getLeaderRetry(\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n      } catch (SolrException e) {\n        Thread.sleep(500);\n        continue;\n      }\n\n      if (leaderReplica.getCoreUrl().equals(ourUrl)) {\n        return leaderReplica;\n      }\n\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(leaderReplica.getCoreUrl())\n          .withSocketTimeout(1000)\n          .withConnectionTimeout(1000)\n          .build()) {\n        SolrPingResponse resp = httpSolrClient.ping();\n        return leaderReplica;\n      } catch (IOException e) {\n        LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl(), e);\n        Thread.sleep(500);\n      } catch (Exception e) {\n        if (e.getCause() instanceof IOException) {\n          LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl(), e);\n          Thread.sleep(500);\n        } else {\n          return leaderReplica;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"849f0b604d62767ac71859248cb478428b39170c","date":1523510880,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#pingLeader(String,CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#pingLeader(String,CoreDescriptor,boolean).mjava","sourceNew":"  private final Replica pingLeader(String ourUrl, CoreDescriptor coreDesc, boolean mayPutReplicaAsDown) throws Exception {\n    int numTried = 0;\n    while (true) {\n      CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n      if (!isClosed() && mayPutReplicaAsDown && numTried == 1 &&\n          docCollection.getReplica(coreDesc.getCloudDescriptor().getCoreNodeName()).getState() == Replica.State.ACTIVE) {\n        // this operation may take a long time, by putting replica into DOWN state, client won't query this replica\n        zkController.publish(coreDesc, Replica.State.DOWN);\n      }\n      numTried++;\n      Replica leaderReplica = null;\n\n      if (isClosed()) {\n        return leaderReplica;\n      }\n\n      try {\n        leaderReplica = zkStateReader.getLeaderRetry(\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n      } catch (SolrException e) {\n        Thread.sleep(500);\n        continue;\n      }\n\n      if (leaderReplica.getCoreUrl().equals(ourUrl)) {\n        return leaderReplica;\n      }\n\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(leaderReplica.getCoreUrl())\n          .withSocketTimeout(1000)\n          .withConnectionTimeout(1000)\n          .build()) {\n        SolrPingResponse resp = httpSolrClient.ping();\n        return leaderReplica;\n      } catch (IOException e) {\n        LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n        Thread.sleep(500);\n      } catch (Exception e) {\n        if (e.getCause() instanceof IOException) {\n          LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n          Thread.sleep(500);\n        } else {\n          return leaderReplica;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private final Replica pingLeader(String ourUrl, CoreDescriptor coreDesc, boolean mayPutReplicaAsDown) throws Exception {\n    int numTried = 0;\n    while (true) {\n      CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n      if (mayPutReplicaAsDown && numTried == 1 &&\n          docCollection.getReplica(coreDesc.getCloudDescriptor().getCoreNodeName()).getState() == Replica.State.ACTIVE) {\n        // this operation may take a long time, by putting replica into DOWN state, client won't query this replica\n        zkController.publish(coreDesc, Replica.State.DOWN);\n      }\n      numTried++;\n      Replica leaderReplica = null;\n\n      if (isClosed()) {\n        return leaderReplica;\n      }\n\n      try {\n        leaderReplica = zkStateReader.getLeaderRetry(\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n      } catch (SolrException e) {\n        Thread.sleep(500);\n        continue;\n      }\n\n      if (leaderReplica.getCoreUrl().equals(ourUrl)) {\n        return leaderReplica;\n      }\n\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(leaderReplica.getCoreUrl())\n          .withSocketTimeout(1000)\n          .withConnectionTimeout(1000)\n          .build()) {\n        SolrPingResponse resp = httpSolrClient.ping();\n        return leaderReplica;\n      } catch (IOException e) {\n        LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n        Thread.sleep(500);\n      } catch (Exception e) {\n        if (e.getCause() instanceof IOException) {\n          LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n          Thread.sleep(500);\n        } else {\n          return leaderReplica;\n        }\n      }\n    }\n  }\n\n","bugFix":["84f20f331d8001864545c7021812d8c6509c7593"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f5a9deac6e313e80a1f56468e14bb4c491b83d7","date":1523529596,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#pingLeader(String,CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#pingLeader(String,CoreDescriptor,boolean).mjava","sourceNew":"  private final Replica pingLeader(String ourUrl, CoreDescriptor coreDesc, boolean mayPutReplicaAsDown) throws Exception {\n    int numTried = 0;\n    while (true) {\n      CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n      if (!isClosed() && mayPutReplicaAsDown && numTried == 1 &&\n          docCollection.getReplica(coreDesc.getCloudDescriptor().getCoreNodeName()).getState() == Replica.State.ACTIVE) {\n        // this operation may take a long time, by putting replica into DOWN state, client won't query this replica\n        zkController.publish(coreDesc, Replica.State.DOWN);\n      }\n      numTried++;\n      Replica leaderReplica = null;\n\n      if (isClosed()) {\n        return leaderReplica;\n      }\n\n      try {\n        leaderReplica = zkStateReader.getLeaderRetry(\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n      } catch (SolrException e) {\n        Thread.sleep(500);\n        continue;\n      }\n\n      if (leaderReplica.getCoreUrl().equals(ourUrl)) {\n        return leaderReplica;\n      }\n\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(leaderReplica.getCoreUrl())\n          .withSocketTimeout(1000)\n          .withConnectionTimeout(1000)\n          .build()) {\n        SolrPingResponse resp = httpSolrClient.ping();\n        return leaderReplica;\n      } catch (IOException e) {\n        LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n        Thread.sleep(500);\n      } catch (Exception e) {\n        if (e.getCause() instanceof IOException) {\n          LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n          Thread.sleep(500);\n        } else {\n          return leaderReplica;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private final Replica pingLeader(String ourUrl, CoreDescriptor coreDesc, boolean mayPutReplicaAsDown) throws Exception {\n    int numTried = 0;\n    while (true) {\n      CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n      if (mayPutReplicaAsDown && numTried == 1 &&\n          docCollection.getReplica(coreDesc.getCloudDescriptor().getCoreNodeName()).getState() == Replica.State.ACTIVE) {\n        // this operation may take a long time, by putting replica into DOWN state, client won't query this replica\n        zkController.publish(coreDesc, Replica.State.DOWN);\n      }\n      numTried++;\n      Replica leaderReplica = null;\n\n      if (isClosed()) {\n        return leaderReplica;\n      }\n\n      try {\n        leaderReplica = zkStateReader.getLeaderRetry(\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n      } catch (SolrException e) {\n        Thread.sleep(500);\n        continue;\n      }\n\n      if (leaderReplica.getCoreUrl().equals(ourUrl)) {\n        return leaderReplica;\n      }\n\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(leaderReplica.getCoreUrl())\n          .withSocketTimeout(1000)\n          .withConnectionTimeout(1000)\n          .build()) {\n        SolrPingResponse resp = httpSolrClient.ping();\n        return leaderReplica;\n      } catch (IOException e) {\n        LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n        Thread.sleep(500);\n      } catch (Exception e) {\n        if (e.getCause() instanceof IOException) {\n          LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n          Thread.sleep(500);\n        } else {\n          return leaderReplica;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#pingLeader(String,CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#pingLeader(String,CoreDescriptor,boolean).mjava","sourceNew":"  private final Replica pingLeader(String ourUrl, CoreDescriptor coreDesc, boolean mayPutReplicaAsDown) throws Exception {\n    int numTried = 0;\n    while (true) {\n      CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n      if (!isClosed() && mayPutReplicaAsDown && numTried == 1 &&\n          docCollection.getReplica(coreDesc.getCloudDescriptor().getCoreNodeName()).getState() == Replica.State.ACTIVE) {\n        // this operation may take a long time, by putting replica into DOWN state, client won't query this replica\n        zkController.publish(coreDesc, Replica.State.DOWN);\n      }\n      numTried++;\n      Replica leaderReplica = null;\n\n      if (isClosed()) {\n        return leaderReplica;\n      }\n\n      try {\n        leaderReplica = zkStateReader.getLeaderRetry(\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n      } catch (SolrException e) {\n        Thread.sleep(500);\n        continue;\n      }\n\n      if (leaderReplica.getCoreUrl().equals(ourUrl)) {\n        return leaderReplica;\n      }\n\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(leaderReplica.getCoreUrl())\n          .withSocketTimeout(1000)\n          .withConnectionTimeout(1000)\n          .build()) {\n        SolrPingResponse resp = httpSolrClient.ping();\n        return leaderReplica;\n      } catch (IOException e) {\n        log.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n        Thread.sleep(500);\n      } catch (Exception e) {\n        if (e.getCause() instanceof IOException) {\n          log.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n          Thread.sleep(500);\n        } else {\n          return leaderReplica;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private final Replica pingLeader(String ourUrl, CoreDescriptor coreDesc, boolean mayPutReplicaAsDown) throws Exception {\n    int numTried = 0;\n    while (true) {\n      CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n      if (!isClosed() && mayPutReplicaAsDown && numTried == 1 &&\n          docCollection.getReplica(coreDesc.getCloudDescriptor().getCoreNodeName()).getState() == Replica.State.ACTIVE) {\n        // this operation may take a long time, by putting replica into DOWN state, client won't query this replica\n        zkController.publish(coreDesc, Replica.State.DOWN);\n      }\n      numTried++;\n      Replica leaderReplica = null;\n\n      if (isClosed()) {\n        return leaderReplica;\n      }\n\n      try {\n        leaderReplica = zkStateReader.getLeaderRetry(\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n      } catch (SolrException e) {\n        Thread.sleep(500);\n        continue;\n      }\n\n      if (leaderReplica.getCoreUrl().equals(ourUrl)) {\n        return leaderReplica;\n      }\n\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(leaderReplica.getCoreUrl())\n          .withSocketTimeout(1000)\n          .withConnectionTimeout(1000)\n          .build()) {\n        SolrPingResponse resp = httpSolrClient.ping();\n        return leaderReplica;\n      } catch (IOException e) {\n        LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n        Thread.sleep(500);\n      } catch (Exception e) {\n        if (e.getCause() instanceof IOException) {\n          LOG.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n          Thread.sleep(500);\n        } else {\n          return leaderReplica;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9b62c5fc89bd60031bc1f51ff1f8a21c5b0bf791"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#pingLeader(String,CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#pingLeader(String,CoreDescriptor,boolean).mjava","sourceNew":"  private final Replica pingLeader(String ourUrl, CoreDescriptor coreDesc, boolean mayPutReplicaAsDown)\n      throws Exception {\n    int numTried = 0;\n    while (true) {\n      CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n      if (!isClosed() && mayPutReplicaAsDown && numTried == 1 &&\n          docCollection.getReplica(coreDesc.getCloudDescriptor().getCoreNodeName())\n              .getState() == Replica.State.ACTIVE) {\n        // this operation may take a long time, by putting replica into DOWN state, client won't query this replica\n        zkController.publish(coreDesc, Replica.State.DOWN);\n      }\n      numTried++;\n      Replica leaderReplica = null;\n\n      if (isClosed()) {\n        return leaderReplica;\n      }\n\n      try {\n        leaderReplica = zkStateReader.getLeaderRetry(\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n      } catch (SolrException e) {\n        Thread.sleep(500);\n        continue;\n      }\n\n      if (leaderReplica.getCoreUrl().equals(ourUrl)) {\n        return leaderReplica;\n      }\n\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(leaderReplica.getCoreUrl())\n          .withSocketTimeout(1000)\n          .withConnectionTimeout(1000)\n          .withHttpClient(cc.getUpdateShardHandler().getRecoveryOnlyHttpClient())\n          .build()) {\n        SolrPingResponse resp = httpSolrClient.ping();\n        return leaderReplica;\n      } catch (IOException e) {\n        log.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n        Thread.sleep(500);\n      } catch (Exception e) {\n        if (e.getCause() instanceof IOException) {\n          log.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n          Thread.sleep(500);\n        } else {\n          return leaderReplica;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private final Replica pingLeader(String ourUrl, CoreDescriptor coreDesc, boolean mayPutReplicaAsDown) throws Exception {\n    int numTried = 0;\n    while (true) {\n      CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n      if (!isClosed() && mayPutReplicaAsDown && numTried == 1 &&\n          docCollection.getReplica(coreDesc.getCloudDescriptor().getCoreNodeName()).getState() == Replica.State.ACTIVE) {\n        // this operation may take a long time, by putting replica into DOWN state, client won't query this replica\n        zkController.publish(coreDesc, Replica.State.DOWN);\n      }\n      numTried++;\n      Replica leaderReplica = null;\n\n      if (isClosed()) {\n        return leaderReplica;\n      }\n\n      try {\n        leaderReplica = zkStateReader.getLeaderRetry(\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n      } catch (SolrException e) {\n        Thread.sleep(500);\n        continue;\n      }\n\n      if (leaderReplica.getCoreUrl().equals(ourUrl)) {\n        return leaderReplica;\n      }\n\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(leaderReplica.getCoreUrl())\n          .withSocketTimeout(1000)\n          .withConnectionTimeout(1000)\n          .build()) {\n        SolrPingResponse resp = httpSolrClient.ping();\n        return leaderReplica;\n      } catch (IOException e) {\n        log.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n        Thread.sleep(500);\n      } catch (Exception e) {\n        if (e.getCause() instanceof IOException) {\n          log.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n          Thread.sleep(500);\n        } else {\n          return leaderReplica;\n        }\n      }\n    }\n  }\n\n","bugFix":["84f20f331d8001864545c7021812d8c6509c7593"],"bugIntro":["9b62c5fc89bd60031bc1f51ff1f8a21c5b0bf791"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b62c5fc89bd60031bc1f51ff1f8a21c5b0bf791","date":1562879086,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#pingLeader(String,CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#pingLeader(String,CoreDescriptor,boolean).mjava","sourceNew":"  private final Replica pingLeader(String ourUrl, CoreDescriptor coreDesc, boolean mayPutReplicaAsDown)\n      throws Exception {\n    int numTried = 0;\n    while (true) {\n      CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n      if (!isClosed() && mayPutReplicaAsDown && numTried == 1 &&\n          docCollection.getReplica(coreDesc.getCloudDescriptor().getCoreNodeName())\n              .getState() == Replica.State.ACTIVE) {\n        // this operation may take a long time, by putting replica into DOWN state, client won't query this replica\n        zkController.publish(coreDesc, Replica.State.DOWN);\n      }\n      numTried++;\n      Replica leaderReplica = null;\n\n      if (isClosed()) {\n        return leaderReplica;\n      }\n\n      try {\n        leaderReplica = zkStateReader.getLeaderRetry(\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n      } catch (SolrException e) {\n        Thread.sleep(500);\n        continue;\n      }\n\n      if (leaderReplica.getCoreUrl().equals(ourUrl)) {\n        return leaderReplica;\n      }\n\n      try (HttpSolrClient httpSolrClient = buildRecoverySolrClient(leaderReplica.getCoreUrl())) {\n        SolrPingResponse resp = httpSolrClient.ping();\n        return leaderReplica;\n      } catch (IOException e) {\n        log.error(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n        Thread.sleep(500);\n      } catch (Exception e) {\n        if (e.getCause() instanceof IOException) {\n          log.error(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n          Thread.sleep(500);\n        } else {\n          return leaderReplica;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private final Replica pingLeader(String ourUrl, CoreDescriptor coreDesc, boolean mayPutReplicaAsDown)\n      throws Exception {\n    int numTried = 0;\n    while (true) {\n      CloudDescriptor cloudDesc = coreDesc.getCloudDescriptor();\n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName());\n      if (!isClosed() && mayPutReplicaAsDown && numTried == 1 &&\n          docCollection.getReplica(coreDesc.getCloudDescriptor().getCoreNodeName())\n              .getState() == Replica.State.ACTIVE) {\n        // this operation may take a long time, by putting replica into DOWN state, client won't query this replica\n        zkController.publish(coreDesc, Replica.State.DOWN);\n      }\n      numTried++;\n      Replica leaderReplica = null;\n\n      if (isClosed()) {\n        return leaderReplica;\n      }\n\n      try {\n        leaderReplica = zkStateReader.getLeaderRetry(\n            cloudDesc.getCollectionName(), cloudDesc.getShardId());\n      } catch (SolrException e) {\n        Thread.sleep(500);\n        continue;\n      }\n\n      if (leaderReplica.getCoreUrl().equals(ourUrl)) {\n        return leaderReplica;\n      }\n\n      try (HttpSolrClient httpSolrClient = new HttpSolrClient.Builder(leaderReplica.getCoreUrl())\n          .withSocketTimeout(1000)\n          .withConnectionTimeout(1000)\n          .withHttpClient(cc.getUpdateShardHandler().getRecoveryOnlyHttpClient())\n          .build()) {\n        SolrPingResponse resp = httpSolrClient.ping();\n        return leaderReplica;\n      } catch (IOException e) {\n        log.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n        Thread.sleep(500);\n      } catch (Exception e) {\n        if (e.getCause() instanceof IOException) {\n          log.info(\"Failed to connect leader {} on recovery, try again\", leaderReplica.getBaseUrl());\n          Thread.sleep(500);\n        } else {\n          return leaderReplica;\n        }\n      }\n    }\n  }\n\n","bugFix":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","84f20f331d8001864545c7021812d8c6509c7593"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["61e80c8b2b34aad07b11e57e3036a34e2df132fe","849f0b604d62767ac71859248cb478428b39170c"],"61e80c8b2b34aad07b11e57e3036a34e2df132fe":["9339df295b9162e4c81adbb4da44b5939d27c1ef"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"9b62c5fc89bd60031bc1f51ff1f8a21c5b0bf791":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"9339df295b9162e4c81adbb4da44b5939d27c1ef":["84f20f331d8001864545c7021812d8c6509c7593"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"849f0b604d62767ac71859248cb478428b39170c":["61e80c8b2b34aad07b11e57e3036a34e2df132fe"],"84f20f331d8001864545c7021812d8c6509c7593":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b62c5fc89bd60031bc1f51ff1f8a21c5b0bf791"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"]},"commit2Childs":{"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"61e80c8b2b34aad07b11e57e3036a34e2df132fe":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7","849f0b604d62767ac71859248cb478428b39170c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["9b62c5fc89bd60031bc1f51ff1f8a21c5b0bf791"],"849f0b604d62767ac71859248cb478428b39170c":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"9339df295b9162e4c81adbb4da44b5939d27c1ef":["61e80c8b2b34aad07b11e57e3036a34e2df132fe"],"9b62c5fc89bd60031bc1f51ff1f8a21c5b0bf791":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84f20f331d8001864545c7021812d8c6509c7593"],"84f20f331d8001864545c7021812d8c6509c7593":["9339df295b9162e4c81adbb4da44b5939d27c1ef"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}