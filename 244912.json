{"path":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(FSDirectory,String).mjava","commits":[{"id":"77f2eb0d13b43db148a5e4f61c166fa3688a2df9","date":1096404326,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(FSDirectory,String).mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSInputStreamBug(FSDirectory,String).mjava","sourceNew":"    private void demo_FSIndexInputBug(FSDirectory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        byte b = in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n        } catch (IOException e) {\n        }\n    }\n\n","sourceOld":"    private void demo_FSInputStreamBug(FSDirectory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        byte b = in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n        } catch (IOException e) {\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1229e4509cad6bf268c0fe18199b63a72216c66b","date":1120256033,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(FSDirectory,String).mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(FSDirectory,String).mjava","sourceNew":"    private void demo_FSIndexInputBug(FSDirectory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        byte b = in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","sourceOld":"    private void demo_FSIndexInputBug(FSDirectory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        byte b = in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n        } catch (IOException e) {\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416d032f85b7ea8efc272f86ba46bc460589aff7","date":1243881250,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(FSDirectory,String).mjava","sourceNew":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        byte b = in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","sourceOld":"    private void demo_FSIndexInputBug(FSDirectory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        byte b = in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77f2eb0d13b43db148a5e4f61c166fa3688a2df9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["77f2eb0d13b43db148a5e4f61c166fa3688a2df9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["416d032f85b7ea8efc272f86ba46bc460589aff7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77f2eb0d13b43db148a5e4f61c166fa3688a2df9"],"77f2eb0d13b43db148a5e4f61c166fa3688a2df9":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}