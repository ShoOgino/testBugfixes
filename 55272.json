{"path":"solr/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"/dev/null","sourceNew":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":null,"sourceOld":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"/dev/null","sourceNew":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/TestNamedListCodec#testIterable().mjava","sourceNew":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","sourceOld":"  public void testIterable() throws Exception {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    NamedList r = new NamedList();\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"foo\", \"bar\");\n    map.put(\"junk\", \"funk\");\n    map.put(\"ham\", \"burger\");\n\n    r.add(\"keys\", map.keySet());\n    r.add(\"more\", \"less\");\n    r.add(\"values\", map.values());\n    r.add(\"finally\", \"the end\");\n    new JavaBinCodec(null).marshal(r,baos);\n    byte[] arr = baos.toByteArray();\n\n    try {\n      NamedList result = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      assertTrue(\"result is null and it shouldn't be\", result != null);\n      List keys = (List) result.get(\"keys\");\n      assertTrue(\"keys is null and it shouldn't be\", keys != null);\n      assertTrue(\"keys Size: \" + keys.size() + \" is not: \" + 3, keys.size() == 3);\n      String less = (String) result.get(\"more\");\n      assertTrue(\"less is null and it shouldn't be\", less != null);\n      assertTrue(less + \" is not equal to \" + \"less\", less.equals(\"less\") == true);\n      List values = (List) result.get(\"values\");\n      assertTrue(\"values is null and it shouldn't be\", values != null);\n      assertTrue(\"values Size: \" + values.size() + \" is not: \" + 3, values.size() == 3);\n      String theEnd = (String) result.get(\"finally\");\n      assertTrue(\"theEnd is null and it shouldn't be\", theEnd != null);\n      assertTrue(theEnd + \" is not equal to \" + \"the end\", theEnd.equals(\"the end\") == true);\n    } catch (ClassCastException e) {\n      assertTrue(\"Received a CCE and we shouldn't have\", false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}