{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/GrowableByteArrayDataOutput#writeString(String).mjava","commits":[{"id":"bfde954cd162c74a48f6b035e596f252c9939a73","date":1442329231,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/GrowableByteArrayDataOutput#writeString(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = string.length() * UnicodeUtil.MAX_UTF8_BYTES_PER_CHAR;\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c49ea3d4279fbc211c84a5d81ff591b5f8d18e83"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c49ea3d4279fbc211c84a5d81ff591b5f8d18e83","date":1478775068,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/GrowableByteArrayDataOutput#writeString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/GrowableByteArrayDataOutput#writeString(String).mjava","sourceNew":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = UnicodeUtil.maxUTF8Length(string.length());\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = string.length() * UnicodeUtil.MAX_UTF8_BYTES_PER_CHAR;\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","bugFix":["bfde954cd162c74a48f6b035e596f252c9939a73"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/GrowableByteArrayDataOutput#writeString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/GrowableByteArrayDataOutput#writeString(String).mjava","sourceNew":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = UnicodeUtil.maxUTF8Length(string.length());\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = string.length() * UnicodeUtil.MAX_UTF8_BYTES_PER_CHAR;\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9","date":1481155163,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/GrowableByteArrayDataOutput#writeString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/GrowableByteArrayDataOutput#writeString(String).mjava","sourceNew":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = UnicodeUtil.maxUTF8Length(string.length());\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      if (scratchBytes == null) {\n        scratchBytes = new byte[ArrayUtil.oversize(maxLen, Character.BYTES)];\n      } else {\n        scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      }\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = UnicodeUtil.maxUTF8Length(string.length());\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/GrowableByteArrayDataOutput#writeString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/GrowableByteArrayDataOutput#writeString(String).mjava","sourceNew":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = UnicodeUtil.maxUTF8Length(string.length());\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      if (scratchBytes == null) {\n        scratchBytes = new byte[ArrayUtil.oversize(maxLen, Character.BYTES)];\n      } else {\n        scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      }\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = UnicodeUtil.maxUTF8Length(string.length());\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfde954cd162c74a48f6b035e596f252c9939a73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c49ea3d4279fbc211c84a5d81ff591b5f8d18e83":["bfde954cd162c74a48f6b035e596f252c9939a73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["bfde954cd162c74a48f6b035e596f252c9939a73","c49ea3d4279fbc211c84a5d81ff591b5f8d18e83"],"9856095f7afb5a607bf5e65077615ed91273508c":["199dfa410f1fdbfd3294106b04096cce5ed34b21","c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["c49ea3d4279fbc211c84a5d81ff591b5f8d18e83"]},"commit2Childs":{"bfde954cd162c74a48f6b035e596f252c9939a73":["c49ea3d4279fbc211c84a5d81ff591b5f8d18e83","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"c49ea3d4279fbc211c84a5d81ff591b5f8d18e83":["199dfa410f1fdbfd3294106b04096cce5ed34b21","c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfde954cd162c74a48f6b035e596f252c9939a73"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}