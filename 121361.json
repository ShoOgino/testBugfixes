{"path":"backwards/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomBinaryRoundTrip() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer binaryBuf = ByteBuffer.wrap(binary);\n    char[] encoded = new char[IndexableBinaryStringTools.getEncodedLength(binaryBuf)];\n    CharBuffer encodedBuf = CharBuffer.wrap(encoded);\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer decodedBuf = ByteBuffer.wrap(decoded);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1 ; // Min == 1\n      binaryBuf.limit(numBytes);\n      for (int byteNum = 0 ; byteNum < numBytes ; ++byteNum) {\n        binary[byteNum] = (byte)random.nextInt(0x100);\n      }\n      IndexableBinaryStringTools.encode(binaryBuf, encodedBuf);\n      IndexableBinaryStringTools.decode(encodedBuf, decodedBuf);\n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Round trip decode/decode returned different results:\"\n                   + System.getProperty(\"line.separator\")\n                   + \"  original: \" + binaryDump(binaryBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"encodedBuf: \" + charArrayDump(encodedBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"decodedBuf: \" + binaryDump(decodedBuf),\n                   binaryBuf, decodedBuf);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","pathOld":"backwards/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testRandomBinaryRoundTrip().mjava","sourceNew":"  public void testRandomBinaryRoundTrip() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer binaryBuf = ByteBuffer.wrap(binary);\n    char[] encoded = new char[IndexableBinaryStringTools.getEncodedLength(binaryBuf)];\n    CharBuffer encodedBuf = CharBuffer.wrap(encoded);\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer decodedBuf = ByteBuffer.wrap(decoded);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1 ; // Min == 1\n      binaryBuf.limit(numBytes);\n      for (int byteNum = 0 ; byteNum < numBytes ; ++byteNum) {\n        binary[byteNum] = (byte)random.nextInt(0x100);\n      }\n      IndexableBinaryStringTools.encode(binaryBuf, encodedBuf);\n      IndexableBinaryStringTools.decode(encodedBuf, decodedBuf);\n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Round trip decode/decode returned different results:\"\n                   + System.getProperty(\"line.separator\")\n                   + \"  original: \" + binaryDump(binaryBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"encodedBuf: \" + charArrayDump(encodedBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"decodedBuf: \" + binaryDump(decodedBuf),\n                   binaryBuf, decodedBuf);\n    }\n  }\n\n","sourceOld":"  public void testRandomBinaryRoundTrip() {\n    Random random = newRandom();\n    byte[] binary = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer binaryBuf = ByteBuffer.wrap(binary);\n    char[] encoded = new char[IndexableBinaryStringTools.getEncodedLength(binaryBuf)];\n    CharBuffer encodedBuf = CharBuffer.wrap(encoded);\n    byte[] decoded = new byte[MAX_RANDOM_BINARY_LENGTH];\n    ByteBuffer decodedBuf = ByteBuffer.wrap(decoded);\n    for (int testNum = 0 ; testNum < NUM_RANDOM_TESTS ; ++testNum) {\n      int numBytes = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1 ; // Min == 1\n      binaryBuf.limit(numBytes);\n      for (int byteNum = 0 ; byteNum < numBytes ; ++byteNum) {\n        binary[byteNum] = (byte)random.nextInt(0x100);\n      }\n      IndexableBinaryStringTools.encode(binaryBuf, encodedBuf);\n      IndexableBinaryStringTools.decode(encodedBuf, decodedBuf);\n      assertEquals(\"Test #\" + (testNum + 1) \n                   + \": Round trip decode/decode returned different results:\"\n                   + System.getProperty(\"line.separator\")\n                   + \"  original: \" + binaryDump(binaryBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"encodedBuf: \" + charArrayDump(encodedBuf)\n                   + System.getProperty(\"line.separator\")\n                   + \"decodedBuf: \" + binaryDump(decodedBuf),\n                   binaryBuf, decodedBuf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}