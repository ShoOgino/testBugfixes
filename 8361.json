{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    StopFilter s = new StopFilter(matchVersion, result, HYPHENATIONS);\n    s.setEnablePositionIncrements(false);\n    result = s;\n    result = new ElisionFilter(matchVersion, result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    StopFilter s = new StopFilter(matchVersion, result, HYPHENATIONS);\n    s.setEnablePositionIncrements(false);\n    result = s;\n    result = new ElisionFilter(matchVersion, result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3106630d90d0d9e238f170a5cb83cd1dee5ddd72","date":1343657007,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    StopFilter s = new StopFilter(matchVersion, result, HYPHENATIONS);\n    s.setEnablePositionIncrements(false);\n    result = s;\n    result = new ElisionFilter(result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    StopFilter s = new StopFilter(matchVersion, result, HYPHENATIONS);\n    s.setEnablePositionIncrements(false);\n    result = s;\n    result = new ElisionFilter(matchVersion, result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    StopFilter s = new StopFilter(matchVersion, result, HYPHENATIONS);\n    s.setEnablePositionIncrements(false);\n    result = s;\n    result = new ElisionFilter(result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    StopFilter s = new StopFilter(matchVersion, result, HYPHENATIONS);\n    s.setEnablePositionIncrements(false);\n    result = s;\n    result = new ElisionFilter(matchVersion, result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    StopFilter s = new StopFilter(matchVersion, result, HYPHENATIONS);\n    s.setEnablePositionIncrements(false);\n    result = s;\n    result = new ElisionFilter(result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    StopFilter s = new StopFilter(matchVersion, result, HYPHENATIONS);\n    s.setEnablePositionIncrements(false);\n    result = s;\n    result = new ElisionFilter(matchVersion, result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a32c7218952a3082e8be4be1a325fd217603f365","date":1363034315,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link SetKeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    StopFilter s = new StopFilter(matchVersion, result, HYPHENATIONS);\n    s.setEnablePositionIncrements(false);\n    result = s;\n    result = new ElisionFilter(result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new SetKeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    StopFilter s = new StopFilter(matchVersion, result, HYPHENATIONS);\n    s.setEnablePositionIncrements(false);\n    result = s;\n    result = new ElisionFilter(result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link SetKeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    StopFilter s = new StopFilter(matchVersion, result, HYPHENATIONS);\n    if (!matchVersion.onOrAfter(Version.LUCENE_44)) {\n      s.setEnablePositionIncrements(false);\n    }\n    result = s;\n    result = new ElisionFilter(result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new SetKeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link SetKeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    StopFilter s = new StopFilter(matchVersion, result, HYPHENATIONS);\n    s.setEnablePositionIncrements(false);\n    result = s;\n    result = new ElisionFilter(result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new SetKeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"192e49c0445803405b0bc0eebc8b758485480c21","date":1367699151,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link SetKeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new StopFilter(matchVersion, result, HYPHENATIONS);\n    result = new ElisionFilter(result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new SetKeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link SetKeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    StopFilter s = new StopFilter(matchVersion, result, HYPHENATIONS);\n    if (!matchVersion.onOrAfter(Version.LUCENE_44)) {\n      s.setEnablePositionIncrements(false);\n    }\n    result = s;\n    result = new ElisionFilter(result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new SetKeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ga/IrishAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link SetKeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    final Tokenizer source = new StandardTokenizer(matchVersion);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new StopFilter(matchVersion, result, HYPHENATIONS);\n    result = new ElisionFilter(result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new SetKeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link IrishLowerCaseFilter}, {@link StopFilter}\n   *         , {@link SetKeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link SnowballFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new StopFilter(matchVersion, result, HYPHENATIONS);\n    result = new ElisionFilter(result, DEFAULT_ARTICLES);\n    result = new IrishLowerCaseFilter(result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new SetKeywordMarkerFilter(result, stemExclusionSet);\n    result = new SnowballFilter(result, new IrishStemmer());\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"192e49c0445803405b0bc0eebc8b758485480c21":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["192e49c0445803405b0bc0eebc8b758485480c21"],"a32c7218952a3082e8be4be1a325fd217603f365":["3106630d90d0d9e238f170a5cb83cd1dee5ddd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","3106630d90d0d9e238f170a5cb83cd1dee5ddd72"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["a32c7218952a3082e8be4be1a325fd217603f365"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","3106630d90d0d9e238f170a5cb83cd1dee5ddd72"],"3106630d90d0d9e238f170a5cb83cd1dee5ddd72":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"192e49c0445803405b0bc0eebc8b758485480c21":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","3106630d90d0d9e238f170a5cb83cd1dee5ddd72"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a32c7218952a3082e8be4be1a325fd217603f365":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["192e49c0445803405b0bc0eebc8b758485480c21"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"3106630d90d0d9e238f170a5cb83cd1dee5ddd72":["a32c7218952a3082e8be4be1a325fd217603f365","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}