{"path":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","commits":[{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","sourceNew":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed simply for error reporting in MT mode.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (fields[i]==null) continue;  // ignore this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (SchemaField sf : literals.keySet()) {\n    \tString fn = sf.getName();\n    \tString val = literals.get(sf);\n    \tdoc.addField(fn, val);\n    }\n   \n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","sourceOld":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed simply for error reporting in MT mode.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (fields[i]==null) continue;  // ignore this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (SchemaField sf : literals.keySet()) {\n    \tString fn = sf.getName();\n    \tString val = literals.get(sf);\n    \tdoc.addField(fn, val);\n    }\n   \n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","sourceNew":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed simply for error reporting in MT mode.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (fields[i]==null) continue;  // ignore this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (SchemaField sf : literals.keySet()) {\n      String fn = sf.getName();\n      String val = literals.get(sf);\n      doc.addField(fn, val);\n    }\n   \n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","sourceOld":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed simply for error reporting in MT mode.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (fields[i]==null) continue;  // ignore this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (SchemaField sf : literals.keySet()) {\n    \tString fn = sf.getName();\n    \tString val = literals.get(sf);\n    \tdoc.addField(fn, val);\n    }\n   \n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","bugFix":null,"bugIntro":["908c8e2c79736122e37d47d73a053999c24bac65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c11575b17e97a75fa89f92c21725abb692781b46","date":1373038242,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","sourceNew":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed for error reporting in MT mode as well as for optional rowId.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (fields[i]==null) continue;  // ignore this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (SchemaField sf : literals.keySet()) {\n      String fn = sf.getName();\n      String val = literals.get(sf);\n      doc.addField(fn, val);\n    }\n    if (rowId != null){\n      doc.addField(rowId, line);\n    }\n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","sourceOld":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed simply for error reporting in MT mode.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (fields[i]==null) continue;  // ignore this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (SchemaField sf : literals.keySet()) {\n      String fn = sf.getName();\n      String val = literals.get(sf);\n      doc.addField(fn, val);\n    }\n   \n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc69bea31e5004ab57397ed305bff9bcc9c0112f","date":1373050276,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","sourceNew":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed for error reporting in MT mode as well as for optional rowId.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (fields[i]==null) continue;  // ignore this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (SchemaField sf : literals.keySet()) {\n      String fn = sf.getName();\n      String val = literals.get(sf);\n      doc.addField(fn, val);\n    }\n    if (rowId != null){\n      doc.addField(rowId, line + rowIdOffset);\n    }\n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","sourceOld":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed for error reporting in MT mode as well as for optional rowId.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (fields[i]==null) continue;  // ignore this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (SchemaField sf : literals.keySet()) {\n      String fn = sf.getName();\n      String val = literals.get(sf);\n      doc.addField(fn, val);\n    }\n    if (rowId != null){\n      doc.addField(rowId, line);\n    }\n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","sourceNew":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed for error reporting in MT mode as well as for optional rowId.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (fields[i]==null) continue;  // ignore this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (SchemaField sf : literals.keySet()) {\n      String fn = sf.getName();\n      String val = literals.get(sf);\n      doc.addField(fn, val);\n    }\n    if (rowId != null){\n      doc.addField(rowId, line + rowIdOffset);\n    }\n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","sourceOld":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed simply for error reporting in MT mode.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (fields[i]==null) continue;  // ignore this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (SchemaField sf : literals.keySet()) {\n      String fn = sf.getName();\n      String val = literals.get(sf);\n      doc.addField(fn, val);\n    }\n   \n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"908c8e2c79736122e37d47d73a053999c24bac65","date":1374200099,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","sourceNew":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed for error reporting in MT mode as well as for optional rowId.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (adders[i]==null) continue;  // skip this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (String fname : literals.keySet()) {\n      String val = literals.get(fname);\n      doc.addField(fname, val);\n    }\n    if (rowId != null){\n      doc.addField(rowId, line + rowIdOffset);\n    }\n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","sourceOld":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed for error reporting in MT mode as well as for optional rowId.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (fields[i]==null) continue;  // ignore this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (SchemaField sf : literals.keySet()) {\n      String fn = sf.getName();\n      String val = literals.get(sf);\n      doc.addField(fn, val);\n    }\n    if (rowId != null){\n      doc.addField(rowId, line + rowIdOffset);\n    }\n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","bugFix":["be5cd4bcb73378e3d5f06021287a5edc79995e4e","abf644a9bed9c9f68be70fcfbe59137ec716f54a","4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","sourceNew":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed for error reporting in MT mode as well as for optional rowId.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (adders[i]==null) continue;  // skip this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (String fname : literals.keySet()) {\n      String val = literals.get(fname);\n      doc.addField(fname, val);\n    }\n    if (rowId != null){\n      doc.addField(rowId, line + rowIdOffset);\n    }\n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","sourceOld":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed for error reporting in MT mode as well as for optional rowId.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (fields[i]==null) continue;  // ignore this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (SchemaField sf : literals.keySet()) {\n      String fn = sf.getName();\n      String val = literals.get(sf);\n      doc.addField(fn, val);\n    }\n    if (rowId != null){\n      doc.addField(rowId, line + rowIdOffset);\n    }\n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","sourceNew":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed for error reporting in MT mode as well as for optional rowId.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (adders[i]==null) continue;  // skip this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (Map.Entry<String, String> entry : literals.entrySet()) {\n      doc.addField(entry.getKey(), entry.getValue());\n    }\n    if (rowId != null){\n      doc.addField(rowId, line + rowIdOffset);\n    }\n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","sourceOld":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed for error reporting in MT mode as well as for optional rowId.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (adders[i]==null) continue;  // skip this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (String fname : literals.keySet()) {\n      String val = literals.get(fname);\n      doc.addField(fname, val);\n    }\n    if (rowId != null){\n      doc.addField(rowId, line + rowIdOffset);\n    }\n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#doAdd(int,String[],SolrInputDocument,AddUpdateCommand).mjava","sourceNew":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed for error reporting in MT mode as well as for optional rowId.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (adders[i]==null) continue;  // skip this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (Map.Entry<String, String> entry : literals.entrySet()) {\n      doc.addField(entry.getKey(), entry.getValue());\n    }\n    if (rowId != null){\n      doc.addField(rowId, line + rowIdOffset);\n    }\n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","sourceOld":"  /** this must be MT safe... may be called concurrently from multiple threads. */\n  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {\n    // the line number is passed for error reporting in MT mode as well as for optional rowId.\n    // first, create the lucene document\n    for (int i=0; i<vals.length; i++) {\n      if (adders[i]==null) continue;  // skip this field\n      String val = vals[i];\n      adders[i].add(doc, line, i, val);\n    }\n\n    // add any literals\n    for (String fname : literals.keySet()) {\n      String val = literals.get(fname);\n      doc.addField(fname, val);\n    }\n    if (rowId != null){\n      doc.addField(rowId, line + rowIdOffset);\n    }\n    template.solrDoc = doc;\n    processor.processAdd(template);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["908c8e2c79736122e37d47d73a053999c24bac65"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","908c8e2c79736122e37d47d73a053999c24bac65"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","fc69bea31e5004ab57397ed305bff9bcc9c0112f"],"042e4d934397657ba04c82b46cc5665076bc5c58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"908c8e2c79736122e37d47d73a053999c24bac65":["fc69bea31e5004ab57397ed305bff9bcc9c0112f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fc69bea31e5004ab57397ed305bff9bcc9c0112f":["c11575b17e97a75fa89f92c21725abb692781b46"],"c11575b17e97a75fa89f92c21725abb692781b46":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["042e4d934397657ba04c82b46cc5665076bc5c58"],"b0b597c65628ca9e73913a07e81691f8229bae35":["908c8e2c79736122e37d47d73a053999c24bac65","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"042e4d934397657ba04c82b46cc5665076bc5c58":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"908c8e2c79736122e37d47d73a053999c24bac65":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["042e4d934397657ba04c82b46cc5665076bc5c58"],"fc69bea31e5004ab57397ed305bff9bcc9c0112f":["37a0f60745e53927c4c876cfe5b5a58170f0646c","908c8e2c79736122e37d47d73a053999c24bac65"],"c11575b17e97a75fa89f92c21725abb692781b46":["fc69bea31e5004ab57397ed305bff9bcc9c0112f"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c11575b17e97a75fa89f92c21725abb692781b46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}