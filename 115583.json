{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader)\n        throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) throws IOException {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) \n      throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final int sourceFractionDigits = source.getTargetCurrency().getDefaultFractionDigits();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) throws IOException {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader)\n        throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) throws IOException {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader) \n      throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final int sourceFractionDigits = source.getTargetCurrency().getDefaultFractionDigits();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) throws IOException {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader)\n        throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) throws IOException {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.ConvertedCurrencyValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context, LeafReaderContext reader)\n        throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) throws IOException {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext reader)\n        throws IOException {\n      final FunctionValues amounts = source.getValues(context, reader);\n      // the target digits & currency of our source, \n      // become the source digits & currency of ourselves\n      final String sourceCurrencyCode = source.getTargetCurrency().getCurrencyCode();\n      final double divisor = Math.pow(10D, targetCurrency.getDefaultFractionDigits());\n      return new FunctionValues() {\n        @Override\n        public boolean exists(int doc) throws IOException {\n          return amounts.exists(doc);\n        }\n        @Override\n        public long longVal(int doc) throws IOException {\n          return (long) doubleVal(doc);\n        }\n        @Override\n        public int intVal(int doc) throws IOException {\n          return (int) doubleVal(doc);\n        }\n\n        @Override\n        public double doubleVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / divisor;\n        }\n\n        @Override\n        public float floatVal(int doc) throws IOException {\n          return CurrencyValue.convertAmount(rate, sourceCurrencyCode, amounts.longVal(doc), targetCurrency.getCurrencyCode()) / ((float)divisor);\n        }\n\n        @Override\n        public String strVal(int doc) throws IOException {\n          return Double.toString(doubleVal(doc));\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + '(' + strVal(doc) + ')';\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"f107636c2cc82350a2607d774c092da5b73152e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}