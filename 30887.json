{"path":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrNestedFieldsList().mjava","commits":[{"id":"c5ce7c704ca874aa623a99f2669737b52ec71cfc","date":1528728510,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrNestedFieldsList().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSolrNestedFieldsList() throws Exception {\n\n    final String id1 = id();\n    List<SolrInputDocument> children1 = Arrays.asList(sdoc(\"id\", id(), child, \"y\"), sdoc(\"id\", id(), child, \"z\"));\n\n    SolrInputDocument document1 = sdoc(\"id\", id1, parent, \"X\",\n        \"children\", children1);\n\n    final String id2 = id();\n    List<SolrInputDocument> children2 = Arrays.asList(sdoc(\"id\", id(), child, \"b\"), sdoc(\"id\", id(), child, \"c\"));\n\n    SolrInputDocument document2 = sdoc(\"id\", id2, parent, \"A\",\n        \"children\", children2);\n\n    indexSolrInputDocumentsDirectly(document1, document2);\n\n    final SolrIndexSearcher searcher = getSearcher();\n    assertJQ(req(\"q\",\"*:*\",\n        \"fl\",\"*\",\n        \"sort\",\"id asc\",\n        \"wt\",\"json\"),\n        \"/response/numFound==\" + \"XyzAbc\".length());\n    assertJQ(req(\"q\",parent+\":\" + document2.getFieldValue(parent),\n        \"fl\",\"*\",\n        \"sort\",\"id asc\",\n        \"wt\",\"json\"),\n        \"/response/docs/[0]/id=='\" + document2.getFieldValue(\"id\") + \"'\");\n    assertQ(req(\"q\",child+\":(y z b c)\", \"sort\",\"_docid_ asc\"),\n        \"//*[@numFound='\" + \"yzbc\".length() + \"']\", // assert physical order of children\n        \"//doc[1]/arr[@name='child_s']/str[text()='y']\",\n        \"//doc[2]/arr[@name='child_s']/str[text()='z']\",\n        \"//doc[3]/arr[@name='child_s']/str[text()='b']\",\n        \"//doc[4]/arr[@name='child_s']/str[text()='c']\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrNestedFieldsList().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSolrNestedFieldsList() throws Exception {\n\n    final String id1 = id();\n    List<SolrInputDocument> children1 = Arrays.asList(sdoc(\"id\", id(), child, \"y\"), sdoc(\"id\", id(), child, \"z\"));\n\n    SolrInputDocument document1 = sdoc(\"id\", id1, parent, \"X\",\n        \"children\", children1);\n\n    final String id2 = id();\n    List<SolrInputDocument> children2 = Arrays.asList(sdoc(\"id\", id(), child, \"b\"), sdoc(\"id\", id(), child, \"c\"));\n\n    SolrInputDocument document2 = sdoc(\"id\", id2, parent, \"A\",\n        \"children\", children2);\n\n    indexSolrInputDocumentsDirectly(document1, document2);\n\n    final SolrIndexSearcher searcher = getSearcher();\n    assertJQ(req(\"q\",\"*:*\",\n        \"fl\",\"*\",\n        \"sort\",\"id asc\",\n        \"wt\",\"json\"),\n        \"/response/numFound==\" + \"XyzAbc\".length());\n    assertJQ(req(\"q\",parent+\":\" + document2.getFieldValue(parent),\n        \"fl\",\"*\",\n        \"sort\",\"id asc\",\n        \"wt\",\"json\"),\n        \"/response/docs/[0]/id=='\" + document2.getFieldValue(\"id\") + \"'\");\n    assertQ(req(\"q\",child+\":(y z b c)\", \"sort\",\"_docid_ asc\"),\n        \"//*[@numFound='\" + \"yzbc\".length() + \"']\", // assert physical order of children\n        \"//doc[1]/arr[@name='child_s']/str[text()='y']\",\n        \"//doc[2]/arr[@name='child_s']/str[text()='z']\",\n        \"//doc[3]/arr[@name='child_s']/str[text()='b']\",\n        \"//doc[4]/arr[@name='child_s']/str[text()='c']\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrNestedFieldsList().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSolrNestedFieldsList() throws Exception {\n\n    final String id1 = id();\n    List<SolrInputDocument> children1 = Arrays.asList(sdoc(\"id\", id(), child, \"y\"), sdoc(\"id\", id(), child, \"z\"));\n\n    SolrInputDocument document1 = sdoc(\"id\", id1, parent, \"X\",\n        \"children\", children1);\n\n    final String id2 = id();\n    List<SolrInputDocument> children2 = Arrays.asList(sdoc(\"id\", id(), child, \"b\"), sdoc(\"id\", id(), child, \"c\"));\n\n    SolrInputDocument document2 = sdoc(\"id\", id2, parent, \"A\",\n        \"children\", children2);\n\n    indexSolrInputDocumentsDirectly(document1, document2);\n\n    final SolrIndexSearcher searcher = getSearcher();\n    assertJQ(req(\"q\",\"*:*\",\n        \"fl\",\"*\",\n        \"sort\",\"id asc\",\n        \"wt\",\"json\"),\n        \"/response/numFound==\" + \"XyzAbc\".length());\n    assertJQ(req(\"q\",parent+\":\" + document2.getFieldValue(parent),\n        \"fl\",\"*\",\n        \"sort\",\"id asc\",\n        \"wt\",\"json\"),\n        \"/response/docs/[0]/id=='\" + document2.getFieldValue(\"id\") + \"'\");\n    assertQ(req(\"q\",child+\":(y z b c)\", \"sort\",\"_docid_ asc\"),\n        \"//*[@numFound='\" + \"yzbc\".length() + \"']\", // assert physical order of children\n        \"//doc[1]/arr[@name='child_s']/str[text()='y']\",\n        \"//doc[2]/arr[@name='child_s']/str[text()='z']\",\n        \"//doc[3]/arr[@name='child_s']/str[text()='b']\",\n        \"//doc[4]/arr[@name='child_s']/str[text()='c']\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1a5eff758fefcac883606f32579ae501a14119","date":1553516101,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrNestedFieldsList().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testSolrNestedFieldsList().mjava","sourceNew":"  @Test\n  public void testSolrNestedFieldsList() throws Exception {\n    final String id1 = id();\n    List<SolrInputDocument> children1 = Arrays.asList(sdoc(\"id\", id(), child, \"y\"), sdoc(\"id\", id(), child, \"z\"));\n\n    SolrInputDocument document1 = sdoc(\"id\", id1, parent, \"X\",\n        \"children\", children1);\n\n    final String id2 = id();\n    List<SolrInputDocument> children2 = Arrays.asList(sdoc(\"id\", id(), child, \"b\"), sdoc(\"id\", id(), child, \"c\"));\n\n    SolrInputDocument document2 = sdoc(\"id\", id2, parent, \"A\",\n        \"children\", children2);\n\n    indexSolrInputDocumentsDirectly(document1, document2);\n\n    final SolrIndexSearcher searcher = getSearcher();\n    assertJQ(req(\"q\",\"*:*\",\n        \"fl\",\"*\",\n        \"sort\",\"id asc\",\n        \"wt\",\"json\"),\n        \"/response/numFound==\" + \"XyzAbc\".length());\n    assertJQ(req(\"q\",parent+\":\" + document2.getFieldValue(parent),\n        \"fl\",\"*\",\n        \"sort\",\"id asc\",\n        \"wt\",\"json\"),\n        \"/response/docs/[0]/id=='\" + document2.getFieldValue(\"id\") + \"'\");\n    assertQ(req(\"q\",child+\":(y z b c)\", \"sort\",\"_docid_ asc\"),\n        \"//*[@numFound='\" + \"yzbc\".length() + \"']\", // assert physical order of children\n        \"//doc[1]/arr[@name='child_s']/str[text()='y']\",\n        \"//doc[2]/arr[@name='child_s']/str[text()='z']\",\n        \"//doc[3]/arr[@name='child_s']/str[text()='b']\",\n        \"//doc[4]/arr[@name='child_s']/str[text()='c']\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n  }\n\n","sourceOld":"  @Test\n  public void testSolrNestedFieldsList() throws Exception {\n\n    final String id1 = id();\n    List<SolrInputDocument> children1 = Arrays.asList(sdoc(\"id\", id(), child, \"y\"), sdoc(\"id\", id(), child, \"z\"));\n\n    SolrInputDocument document1 = sdoc(\"id\", id1, parent, \"X\",\n        \"children\", children1);\n\n    final String id2 = id();\n    List<SolrInputDocument> children2 = Arrays.asList(sdoc(\"id\", id(), child, \"b\"), sdoc(\"id\", id(), child, \"c\"));\n\n    SolrInputDocument document2 = sdoc(\"id\", id2, parent, \"A\",\n        \"children\", children2);\n\n    indexSolrInputDocumentsDirectly(document1, document2);\n\n    final SolrIndexSearcher searcher = getSearcher();\n    assertJQ(req(\"q\",\"*:*\",\n        \"fl\",\"*\",\n        \"sort\",\"id asc\",\n        \"wt\",\"json\"),\n        \"/response/numFound==\" + \"XyzAbc\".length());\n    assertJQ(req(\"q\",parent+\":\" + document2.getFieldValue(parent),\n        \"fl\",\"*\",\n        \"sort\",\"id asc\",\n        \"wt\",\"json\"),\n        \"/response/docs/[0]/id=='\" + document2.getFieldValue(\"id\") + \"'\");\n    assertQ(req(\"q\",child+\":(y z b c)\", \"sort\",\"_docid_ asc\"),\n        \"//*[@numFound='\" + \"yzbc\".length() + \"']\", // assert physical order of children\n        \"//doc[1]/arr[@name='child_s']/str[text()='y']\",\n        \"//doc[2]/arr[@name='child_s']/str[text()='z']\",\n        \"//doc[3]/arr[@name='child_s']/str[text()='b']\",\n        \"//doc[4]/arr[@name='child_s']/str[text()='c']\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"bb1a5eff758fefcac883606f32579ae501a14119":["c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb1a5eff758fefcac883606f32579ae501a14119"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5ce7c704ca874aa623a99f2669737b52ec71cfc"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"bb1a5eff758fefcac883606f32579ae501a14119":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c5ce7c704ca874aa623a99f2669737b52ec71cfc","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","bb1a5eff758fefcac883606f32579ae501a14119","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}