{"path":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","commits":[{"id":"543ea3c1bbd7f64d41ce780e9f6d6dea9b657e1d","date":1399922216,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<100000;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w, true);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(AtomicReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a60c393735057acf812da0ca4b9a417eb8c7c010","date":1399934444,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","sourceNew":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(Codec.forName(\"Lucene46\"));\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<100000;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w, true);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(AtomicReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<100000;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w, true);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(AtomicReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b57d7226a882c9e7d8fdaee52a51c4c04813dd6","date":1399976975,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","sourceNew":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(Codec.forName(\"Lucene46\"));\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<15000*RANDOM_MULTIPLIER;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w, true);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(AtomicReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(Codec.forName(\"Lucene46\"));\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<100000;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w, true);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(AtomicReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36","date":1400053604,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(Codec.forName(\"Lucene46\"));\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<15000*RANDOM_MULTIPLIER;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w, true);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(AtomicReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","sourceNew":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(Codec.forName(\"Lucene49\"));\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<15000*RANDOM_MULTIPLIER;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w, true);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(AtomicReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(Codec.forName(\"Lucene46\"));\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<15000*RANDOM_MULTIPLIER;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w, true);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(AtomicReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["a60c393735057acf812da0ca4b9a417eb8c7c010"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","sourceNew":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(Codec.forName(\"Lucene49\"));\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<15000*RANDOM_MULTIPLIER;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w, true);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(AtomicReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(Codec.forName(\"Lucene49\"));\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<15000*RANDOM_MULTIPLIER;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w, true);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(AtomicReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","sourceNew":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(Codec.forName(\"Lucene410\"));\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<15000*RANDOM_MULTIPLIER;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w, true);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(AtomicReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(Codec.forName(\"Lucene49\"));\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<15000*RANDOM_MULTIPLIER;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w, true);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(AtomicReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"941b7027a51547b0a38d711bc08ec354f9e2e4a7","date":1411394279,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","sourceNew":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<15000*RANDOM_MULTIPLIER;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w, true);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(AtomicReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(Codec.forName(\"Lucene410\"));\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<15000*RANDOM_MULTIPLIER;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w, true);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(AtomicReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","sourceNew":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<15000*RANDOM_MULTIPLIER;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w, true);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(LeafReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<15000*RANDOM_MULTIPLIER;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w, true);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(AtomicReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","sourceNew":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<15000*RANDOM_MULTIPLIER;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(LeafReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<15000*RANDOM_MULTIPLIER;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w, true);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(LeafReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e151bdafe8ce5d63ebc6999d247e0518c47d3b2e","date":1599130106,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testUnbalancedMergeSelection().mjava","sourceNew":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<15000*RANDOM_MULTIPLIER;i++) {\n      Document doc = new Document();\n      // Uncompressible content so that merging 10 segments of size x creates a segment whose size is about 10x\n      byte[] idBytes = new byte[128];\n      random().nextBytes(idBytes);\n      doc.add(new StoredField(\"id\", idBytes));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(LeafReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-5668\n  public void testUnbalancedMergeSelection() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    TieredMergePolicy tmp = (TieredMergePolicy) iwc.getMergePolicy();\n    tmp.setFloorSegmentMB(0.00001);\n    // We need stable sizes for each segment:\n    iwc.setCodec(TestUtil.getDefaultCodec());\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    iwc.setMaxBufferedDocs(100);\n    iwc.setRAMBufferSizeMB(-1);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int i=0;i<15000*RANDOM_MULTIPLIER;i++) {\n      Document doc = new Document();\n      doc.add(newTextField(\"id\", random().nextLong() + \"\" + random().nextLong(), Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = DirectoryReader.open(w);\n\n    // Make sure TMP always merged equal-number-of-docs segments:\n    for(LeafReaderContext ctx : r.leaves()) {\n      int numDocs = ctx.reader().numDocs();\n      assertTrue(\"got numDocs=\" + numDocs, numDocs == 100 || numDocs == 1000 || numDocs == 10000);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e151bdafe8ce5d63ebc6999d247e0518c47d3b2e":["2a1862266772deb28cdcb7d996b64d2177022687"],"8b57d7226a882c9e7d8fdaee52a51c4c04813dd6":["a60c393735057acf812da0ca4b9a417eb8c7c010"],"543ea3c1bbd7f64d41ce780e9f6d6dea9b657e1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["941b7027a51547b0a38d711bc08ec354f9e2e4a7"],"a60c393735057acf812da0ca4b9a417eb8c7c010":["543ea3c1bbd7f64d41ce780e9f6d6dea9b657e1d"],"2a1862266772deb28cdcb7d996b64d2177022687":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["8b57d7226a882c9e7d8fdaee52a51c4c04813dd6"],"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b57d7226a882c9e7d8fdaee52a51c4c04813dd6"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e151bdafe8ce5d63ebc6999d247e0518c47d3b2e"],"941b7027a51547b0a38d711bc08ec354f9e2e4a7":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"]},"commit2Childs":{"e151bdafe8ce5d63ebc6999d247e0518c47d3b2e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b57d7226a882c9e7d8fdaee52a51c4c04813dd6":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534","a957bf27202eab1c9ddabc5aa30c7a0db04bbf36"],"543ea3c1bbd7f64d41ce780e9f6d6dea9b657e1d":["a60c393735057acf812da0ca4b9a417eb8c7c010"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["2a1862266772deb28cdcb7d996b64d2177022687"],"a60c393735057acf812da0ca4b9a417eb8c7c010":["8b57d7226a882c9e7d8fdaee52a51c4c04813dd6"],"2a1862266772deb28cdcb7d996b64d2177022687":["e151bdafe8ce5d63ebc6999d247e0518c47d3b2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["543ea3c1bbd7f64d41ce780e9f6d6dea9b657e1d","a957bf27202eab1c9ddabc5aa30c7a0db04bbf36"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a957bf27202eab1c9ddabc5aa30c7a0db04bbf36":[],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["941b7027a51547b0a38d711bc08ec354f9e2e4a7"],"941b7027a51547b0a38d711bc08ec354f9e2e4a7":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a957bf27202eab1c9ddabc5aa30c7a0db04bbf36","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}