{"path":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","sourceNew":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = _TestUtil.getTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newField(\"content\", English.intToEnglish(i).trim(), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = _TestUtil.getTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newField(\"content\", English.intToEnglish(i).trim(), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","sourceNew":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = _TestUtil.getTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newField(\"content\", English.intToEnglish(i).trim(), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = _TestUtil.getTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newField(\"content\", English.intToEnglish(i).trim(), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","sourceNew":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = _TestUtil.getTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = _TestUtil.getTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newField(\"content\", English.intToEnglish(i).trim(), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","sourceNew":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = TestUtil.getTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = _TestUtil.getTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","sourceNew":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = TestUtil.createTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = TestUtil.getTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","sourceNew":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = createTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = TestUtil.createTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","sourceNew":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = createTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = TestUtil.getTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","sourceNew":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = createTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = createTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c15a75016387504d70a40cba6e9314b8885307f0","date":1397542349,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#buildIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#setUp().mjava","sourceNew":"  private File buildIndex() throws IOException {\n    File path = createTempDir(\"buildIndex\");\n    \n    Directory dir = newFSDirectory(path);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.shutdown();\n    dir.close();\n\n    return path;\n  }\n\n","sourceOld":"  // setup the index\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    indexDir = createTempDir(\"RAMDirIndex\");\n    \n    Directory dir = newFSDirectory(indexDir);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    // add some documents\n    Document doc = null;\n    for (int i = 0; i < docsToAdd; i++) {\n      doc = new Document();\n      doc.add(newStringField(\"content\", English.intToEnglish(i).trim(), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    assertEquals(docsToAdd, writer.maxDoc());\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c15a75016387504d70a40cba6e9314b8885307f0":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c15a75016387504d70a40cba6e9314b8885307f0"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c15a75016387504d70a40cba6e9314b8885307f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["c15a75016387504d70a40cba6e9314b8885307f0"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}