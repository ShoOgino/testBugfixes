{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() throws Exception {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n    closeDirectories();\n    if (dataDir != null) {\n      String skip = System.getProperty(\"solr.test.leavedatadir\");\n      if (null != skip && 0 != skip.trim().length()) {\n        System.err.println(\"NOTE: per solr.test.leavedatadir, dataDir will not be removed: \" + dataDir.getAbsolutePath());\n      } else {\n        if (!recurseDelete(dataDir)) {\n          System.err.println(\"!!!! WARNING: best effort to remove \" + dataDir.getAbsolutePath() + \" FAILED !!!!!\");\n        }\n      }\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    dataDir = null;\n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() throws Exception {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n    closeDirectories();\n    if (dataDir != null) {\n      String skip = System.getProperty(\"solr.test.leavedatadir\");\n      if (null != skip && 0 != skip.trim().length()) {\n        System.err.println(\"NOTE: per solr.test.leavedatadir, dataDir will not be removed: \" + dataDir.getAbsolutePath());\n      } else {\n        if (!recurseDelete(dataDir)) {\n          System.err.println(\"!!!! WARNING: best effort to remove \" + dataDir.getAbsolutePath() + \" FAILED !!!!!\");\n        }\n      }\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    dataDir = null;\n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() throws Exception {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n    closeDirectories();\n    if (dataDir != null) {\n      String skip = System.getProperty(\"solr.test.leavedatadir\");\n      if (null != skip && 0 != skip.trim().length()) {\n        System.err.println(\"NOTE: per solr.test.leavedatadir, dataDir will not be removed: \" + dataDir.getAbsolutePath());\n      } else {\n        if (!recurseDelete(dataDir)) {\n          System.err.println(\"!!!! WARNING: best effort to remove \" + dataDir.getAbsolutePath() + \" FAILED !!!!!\");\n        }\n      }\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    dataDir = null;\n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() throws Exception {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n    closeDirectories();\n    if (dataDir != null) {\n      String skip = System.getProperty(\"solr.test.leavedatadir\");\n      if (null != skip && 0 != skip.trim().length()) {\n        System.err.println(\"NOTE: per solr.test.leavedatadir, dataDir will not be removed: \" + dataDir.getAbsolutePath());\n      } else {\n        if (!recurseDelete(dataDir)) {\n          System.err.println(\"!!!! WARNING: best effort to remove \" + dataDir.getAbsolutePath() + \" FAILED !!!!!\");\n        }\n      }\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    dataDir = null;\n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() throws Exception {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n    closeDirectories();\n    if (dataDir != null) {\n      String skip = System.getProperty(\"solr.test.leavedatadir\");\n      if (null != skip && 0 != skip.trim().length()) {\n        System.err.println(\"NOTE: per solr.test.leavedatadir, dataDir will not be removed: \" + dataDir.getAbsolutePath());\n      } else {\n        if (!recurseDelete(dataDir)) {\n          System.err.println(\"!!!! WARNING: best effort to remove \" + dataDir.getAbsolutePath() + \" FAILED !!!!!\");\n        }\n      }\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    dataDir = null;\n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() throws Exception {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n    closeDirectories();\n    if (dataDir != null) {\n      String skip = System.getProperty(\"solr.test.leavedatadir\");\n      if (null != skip && 0 != skip.trim().length()) {\n        System.err.println(\"NOTE: per solr.test.leavedatadir, dataDir will not be removed: \" + dataDir.getAbsolutePath());\n      } else {\n        if (!recurseDelete(dataDir)) {\n          System.err.println(\"!!!! WARNING: best effort to remove \" + dataDir.getAbsolutePath() + \" FAILED !!!!!\");\n        }\n      }\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    dataDir = null;\n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() throws Exception {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n    if (dataDir != null) {\n      String skip = System.getProperty(\"solr.test.leavedatadir\");\n      if (null != skip && 0 != skip.trim().length()) {\n        System.err.println(\"NOTE: per solr.test.leavedatadir, dataDir will not be removed: \" + dataDir.getAbsolutePath());\n      } else {\n        if (!recurseDelete(dataDir)) {\n          System.err.println(\"!!!! WARNING: best effort to remove \" + dataDir.getAbsolutePath() + \" FAILED !!!!!\");\n        }\n      }\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    dataDir = null;\n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() throws Exception {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n    closeDirectories();\n    if (dataDir != null) {\n      String skip = System.getProperty(\"solr.test.leavedatadir\");\n      if (null != skip && 0 != skip.trim().length()) {\n        System.err.println(\"NOTE: per solr.test.leavedatadir, dataDir will not be removed: \" + dataDir.getAbsolutePath());\n      } else {\n        if (!recurseDelete(dataDir)) {\n          System.err.println(\"!!!! WARNING: best effort to remove \" + dataDir.getAbsolutePath() + \" FAILED !!!!!\");\n        }\n      }\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    dataDir = null;\n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","bugFix":["288aa050f8188ece6bc90e9eaab901c23600631f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n    if (dataDir != null) {\n      String skip = System.getProperty(\"solr.test.leavedatadir\");\n      if (null != skip && 0 != skip.trim().length()) {\n        System.err.println(\"NOTE: per solr.test.leavedatadir, dataDir will not be removed: \" + dataDir.getAbsolutePath());\n      } else {\n        if (!recurseDelete(dataDir)) {\n          System.err.println(\"!!!! WARNING: best effort to remove \" + dataDir.getAbsolutePath() + \" FAILED !!!!!\");\n        }\n      }\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    dataDir = null;\n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() throws Exception {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n    if (dataDir != null) {\n      String skip = System.getProperty(\"solr.test.leavedatadir\");\n      if (null != skip && 0 != skip.trim().length()) {\n        System.err.println(\"NOTE: per solr.test.leavedatadir, dataDir will not be removed: \" + dataDir.getAbsolutePath());\n      } else {\n        if (!recurseDelete(dataDir)) {\n          System.err.println(\"!!!! WARNING: best effort to remove \" + dataDir.getAbsolutePath() + \" FAILED !!!!!\");\n        }\n      }\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    dataDir = null;\n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","bugFix":["20065f48f840771dec27aa4ef3931a927025cbfb"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n    if (dataDir != null) {\n      String skip = System.getProperty(\"solr.test.leavedatadir\");\n      if (null != skip && 0 != skip.trim().length()) {\n        System.err.println(\"NOTE: per solr.test.leavedatadir, dataDir will not be removed: \" + dataDir.getAbsolutePath());\n      } else {\n        if (!recurseDelete(dataDir)) {\n          System.err.println(\"!!!! WARNING: best effort to remove \" + dataDir.getAbsolutePath() + \" FAILED !!!!!\");\n        }\n      }\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    dataDir = null;\n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() throws Exception {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n    if (dataDir != null) {\n      String skip = System.getProperty(\"solr.test.leavedatadir\");\n      if (null != skip && 0 != skip.trim().length()) {\n        System.err.println(\"NOTE: per solr.test.leavedatadir, dataDir will not be removed: \" + dataDir.getAbsolutePath());\n      } else {\n        if (!recurseDelete(dataDir)) {\n          System.err.println(\"!!!! WARNING: best effort to remove \" + dataDir.getAbsolutePath() + \" FAILED !!!!!\");\n        }\n      }\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    dataDir = null;\n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n    if (dataDir != null) {\n      String skip = System.getProperty(\"solr.test.leavedatadir\");\n      if (null != skip && 0 != skip.trim().length()) {\n        System.err.println(\"NOTE: per solr.test.leavedatadir, dataDir will not be removed: \" + dataDir.getAbsolutePath());\n      } else {\n        if (!recurseDelete(dataDir)) {\n          System.err.println(\"!!!! WARNING: best effort to remove \" + dataDir.getAbsolutePath() + \" FAILED !!!!!\");\n        }\n      }\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    dataDir = null;\n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n    if (dataDir != null) {\n      String skip = System.getProperty(\"solr.test.leavedatadir\");\n      if (null != skip && 0 != skip.trim().length()) {\n        System.err.println(\"NOTE: per solr.test.leavedatadir, dataDir will not be removed: \" + dataDir.getAbsolutePath());\n      } else {\n        if (!recurseDelete(dataDir)) {\n          System.err.println(\"!!!! WARNING: best effort to remove \" + dataDir.getAbsolutePath() + \" FAILED !!!!!\");\n        }\n      }\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    dataDir = null;\n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n    if (dataDir != null) {\n      String skip = System.getProperty(\"solr.test.leavedatadir\");\n      if (null != skip && 0 != skip.trim().length()) {\n        System.err.println(\"NOTE: per solr.test.leavedatadir, dataDir will not be removed: \" + dataDir.getAbsolutePath());\n      } else {\n        if (!recurseDelete(dataDir)) {\n          System.err.println(\"!!!! WARNING: best effort to remove \" + dataDir.getAbsolutePath() + \" FAILED !!!!!\");\n        }\n      }\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    dataDir = null;\n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n    if (dataDir != null) {\n      String skip = System.getProperty(\"solr.test.leavedatadir\");\n      if (null != skip && 0 != skip.trim().length()) {\n        System.err.println(\"NOTE: per solr.test.leavedatadir, dataDir will not be removed: \" + dataDir.getAbsolutePath());\n      } else {\n        if (!recurseDelete(dataDir)) {\n          System.err.println(\"!!!! WARNING: best effort to remove \" + dataDir.getAbsolutePath() + \" FAILED !!!!!\");\n        }\n      }\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    dataDir = null;\n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4f25a2171450fd11fca6ecb7a809922c9ec694","date":1395865816,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n    if (dataDir != null) {\n      String skip = System.getProperty(\"solr.test.leavedatadir\");\n      if (null != skip && 0 != skip.trim().length()) {\n        System.err.println(\"NOTE: per solr.test.leavedatadir, dataDir will not be removed: \" + dataDir.getAbsolutePath());\n      } else {\n        if (!recurseDelete(dataDir)) {\n          System.err.println(\"!!!! WARNING: best effort to remove \" + dataDir.getAbsolutePath() + \" FAILED !!!!!\");\n        }\n      }\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    dataDir = null;\n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c51ec71292ada2c57ba58fd26d02655ef713dd48","date":1426368796,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    log.info(\"###deleteCore\" );\n    if (h != null) {\n      // If the test case set up Zk, it should still have it as available,\n      // otherwise the core close will just be unnecessarily delayed.\n      CoreContainer cc = h.getCoreContainer();\n      if (! cc.getCores().isEmpty() && cc.isZooKeeperAware()) {\n        try {\n          cc.getZkController().getZkClient().exists(\"/\", false);\n        } catch (KeeperException e) {\n          log.error(\"Testing connectivity to ZK by checking for root path failed\", e);\n          fail(\"Trying to tear down a ZK aware core container with ZK not reachable\");\n        } catch (InterruptedException ignored) {}\n      }\n\n      h.close();\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    log.info(\"###deleteCore\" );\n    if (h != null) {\n      // If the test case set up Zk, it should still have it as available,\n      // otherwise the core close will just be unnecessarily delayed.\n      CoreContainer cc = h.getCoreContainer();\n      if (! cc.getCores().isEmpty() && cc.isZooKeeperAware()) {\n        try {\n          cc.getZkController().getZkClient().exists(\"/\", false);\n        } catch (KeeperException e) {\n          log.error(\"Testing connectivity to ZK by checking for root path failed\", e);\n          fail(\"Trying to tear down a ZK aware core container with ZK not reachable\");\n        } catch (InterruptedException ignored) {}\n      }\n\n      h.close();\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    log.info(\"###deleteCore\" );\n    if (h != null) { h.close(); }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    if (h != null) {\n      log.info(\"###deleteCore\" );\n      // If the test case set up Zk, it should still have it as available,\n      // otherwise the core close will just be unnecessarily delayed.\n      CoreContainer cc = h.getCoreContainer();\n      if (! cc.getCores().isEmpty() && cc.isZooKeeperAware()) {\n        try {\n          cc.getZkController().getZkClient().exists(\"/\", false);\n        } catch (KeeperException e) {\n          log.error(\"Testing connectivity to ZK by checking for root path failed\", e);\n          fail(\"Trying to tear down a ZK aware core container with ZK not reachable\");\n        } catch (InterruptedException ignored) {}\n      }\n\n      h.close();\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    log.info(\"###deleteCore\" );\n    if (h != null) {\n      // If the test case set up Zk, it should still have it as available,\n      // otherwise the core close will just be unnecessarily delayed.\n      CoreContainer cc = h.getCoreContainer();\n      if (! cc.getCores().isEmpty() && cc.isZooKeeperAware()) {\n        try {\n          cc.getZkController().getZkClient().exists(\"/\", false);\n        } catch (KeeperException e) {\n          log.error(\"Testing connectivity to ZK by checking for root path failed\", e);\n          fail(\"Trying to tear down a ZK aware core container with ZK not reachable\");\n        } catch (InterruptedException ignored) {}\n      }\n\n      h.close();\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    if (h != null) {\n      log.info(\"###deleteCore\" );\n      // If the test case set up Zk, it should still have it as available,\n      // otherwise the core close will just be unnecessarily delayed.\n      CoreContainer cc = h.getCoreContainer();\n      if (! cc.getCores().isEmpty() && cc.isZooKeeperAware()) {\n        try {\n          cc.getZkController().getZkClient().exists(\"/\", false);\n        } catch (KeeperException e) {\n          log.error(\"Testing connectivity to ZK by checking for root path failed\", e);\n          fail(\"Trying to tear down a ZK aware core container with ZK not reachable\");\n        } catch (InterruptedException ignored) {}\n      }\n\n      h.close();\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    log.info(\"###deleteCore\" );\n    if (h != null) {\n      // If the test case set up Zk, it should still have it as available,\n      // otherwise the core close will just be unnecessarily delayed.\n      CoreContainer cc = h.getCoreContainer();\n      if (! cc.getCores().isEmpty() && cc.isZooKeeperAware()) {\n        try {\n          cc.getZkController().getZkClient().exists(\"/\", false);\n        } catch (KeeperException e) {\n          log.error(\"Testing connectivity to ZK by checking for root path failed\", e);\n          fail(\"Trying to tear down a ZK aware core container with ZK not reachable\");\n        } catch (InterruptedException ignored) {}\n      }\n\n      h.close();\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e1bfbfa5a260860e3f12522fca45ec1240752f","date":1521057510,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    if (h != null) {\n      log.info(\"###deleteCore\" );\n      // If the test case set up Zk, it should still have it as available,\n      // otherwise the core close will just be unnecessarily delayed.\n      CoreContainer cc = h.getCoreContainer();\n      if (! cc.getCores().isEmpty() && cc.isZooKeeperAware()) {\n        try {\n          cc.getZkController().getZkClient().exists(\"/\", false);\n        } catch (KeeperException e) {\n          log.error(\"Testing connectivity to ZK by checking for root path failed\", e);\n          fail(\"Trying to tear down a ZK aware core container with ZK not reachable\");\n        } catch (InterruptedException ignored) {}\n      }\n\n      h.close();\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n\n    if (System.getProperty(UPDATELOG_SYSPROP) != null) {\n      // clears the updatelog sysprop at the end of the test run\n      System.clearProperty(UPDATELOG_SYSPROP);\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    if (h != null) {\n      log.info(\"###deleteCore\" );\n      // If the test case set up Zk, it should still have it as available,\n      // otherwise the core close will just be unnecessarily delayed.\n      CoreContainer cc = h.getCoreContainer();\n      if (! cc.getCores().isEmpty() && cc.isZooKeeperAware()) {\n        try {\n          cc.getZkController().getZkClient().exists(\"/\", false);\n        } catch (KeeperException e) {\n          log.error(\"Testing connectivity to ZK by checking for root path failed\", e);\n          fail(\"Trying to tear down a ZK aware core container with ZK not reachable\");\n        } catch (InterruptedException ignored) {}\n      }\n\n      h.close();\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9799ebcab48102552d92f7807965a91fb6e116f7","date":1564676118,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness and nulls out the values setup by {@link #initCore}\n   */\n  public static void deleteCore() {\n    if (h != null) {\n      log.info(\"###deleteCore\" );\n      // If the test case set up Zk, it should still have it as available,\n      // otherwise the core close will just be unnecessarily delayed.\n      CoreContainer cc = h.getCoreContainer();\n      if (! cc.getCores().isEmpty() && cc.isZooKeeperAware()) {\n        try {\n          cc.getZkController().getZkClient().exists(\"/\", false);\n        } catch (KeeperException e) {\n          log.error(\"Testing connectivity to ZK by checking for root path failed\", e);\n          fail(\"Trying to tear down a ZK aware core container with ZK not reachable\");\n        } catch (InterruptedException ignored) {}\n      }\n\n      h.close();\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n\n    if (System.getProperty(UPDATELOG_SYSPROP) != null) {\n      // clears the updatelog sysprop at the end of the test run\n      System.clearProperty(UPDATELOG_SYSPROP);\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n    initCoreDataDir = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    if (h != null) {\n      log.info(\"###deleteCore\" );\n      // If the test case set up Zk, it should still have it as available,\n      // otherwise the core close will just be unnecessarily delayed.\n      CoreContainer cc = h.getCoreContainer();\n      if (! cc.getCores().isEmpty() && cc.isZooKeeperAware()) {\n        try {\n          cc.getZkController().getZkClient().exists(\"/\", false);\n        } catch (KeeperException e) {\n          log.error(\"Testing connectivity to ZK by checking for root path failed\", e);\n          fail(\"Trying to tear down a ZK aware core container with ZK not reachable\");\n        } catch (InterruptedException ignored) {}\n      }\n\n      h.close();\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n\n    if (System.getProperty(UPDATELOG_SYSPROP) != null) {\n      // clears the updatelog sysprop at the end of the test run\n      System.clearProperty(UPDATELOG_SYSPROP);\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","bugFix":["20065f48f840771dec27aa4ef3931a927025cbfb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness and nulls out the values setup by {@link #initCore}\n   */\n  public static void deleteCore() {\n    if (h != null) {\n      log.info(\"###deleteCore\" );\n      // If the test case set up Zk, it should still have it as available,\n      // otherwise the core close will just be unnecessarily delayed.\n      CoreContainer cc = h.getCoreContainer();\n      if (! cc.getCores().isEmpty() && cc.isZooKeeperAware()) {\n        try {\n          cc.getZkController().getZkClient().exists(\"/\", false);\n        } catch (KeeperException e) {\n          log.error(\"Testing connectivity to ZK by checking for root path failed\", e);\n          fail(\"Trying to tear down a ZK aware core container with ZK not reachable\");\n        } catch (InterruptedException ignored) {}\n      }\n\n      h.close();\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n\n    if (System.getProperty(UPDATELOG_SYSPROP) != null) {\n      // clears the updatelog sysprop at the end of the test run\n      System.clearProperty(UPDATELOG_SYSPROP);\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n    initCoreDataDir = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness, and makes the best attempt possible\n   * to delete dataDir, unless the system property \"solr.test.leavedatadir\"\n   * is set.\n   */\n  public static void deleteCore() {\n    if (h != null) {\n      log.info(\"###deleteCore\" );\n      // If the test case set up Zk, it should still have it as available,\n      // otherwise the core close will just be unnecessarily delayed.\n      CoreContainer cc = h.getCoreContainer();\n      if (! cc.getCores().isEmpty() && cc.isZooKeeperAware()) {\n        try {\n          cc.getZkController().getZkClient().exists(\"/\", false);\n        } catch (KeeperException e) {\n          log.error(\"Testing connectivity to ZK by checking for root path failed\", e);\n          fail(\"Trying to tear down a ZK aware core container with ZK not reachable\");\n        } catch (InterruptedException ignored) {}\n      }\n\n      h.close();\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n\n    if (System.getProperty(UPDATELOG_SYSPROP) != null) {\n      // clears the updatelog sysprop at the end of the test run\n      System.clearProperty(UPDATELOG_SYSPROP);\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness and nulls out the values setup by {@link #initCore}\n   */\n  public static void deleteCore() {\n    if (h != null) {\n      log.info(\"###deleteCore\" );\n      // If the test case set up Zk, it should still have it as available,\n      // otherwise the core close will just be unnecessarily delayed.\n      CoreContainer cc = h.getCoreContainer();\n      if (! cc.getCores().isEmpty() && cc.isZooKeeperAware()) {\n        try {\n          cc.getZkController().getZkClient().exists(\"/\", false);\n        } catch (KeeperException e) {\n          log.error(\"Testing connectivity to ZK by checking for root path failed\", e);\n          fail(\"Trying to tear down a ZK aware core container with ZK not reachable\");\n        } catch (InterruptedException ignored) {}\n      }\n\n      h.close();\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n\n    if (System.getProperty(UPDATELOG_SYSPROP) != null) {\n      // clears the updatelog sysprop at the end of the test run\n      System.clearProperty(UPDATELOG_SYSPROP);\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n    initCoreDataDir = null;\n    hdfsDataDir = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness and nulls out the values setup by {@link #initCore}\n   */\n  public static void deleteCore() {\n    if (h != null) {\n      log.info(\"###deleteCore\" );\n      // If the test case set up Zk, it should still have it as available,\n      // otherwise the core close will just be unnecessarily delayed.\n      CoreContainer cc = h.getCoreContainer();\n      if (! cc.getCores().isEmpty() && cc.isZooKeeperAware()) {\n        try {\n          cc.getZkController().getZkClient().exists(\"/\", false);\n        } catch (KeeperException e) {\n          log.error(\"Testing connectivity to ZK by checking for root path failed\", e);\n          fail(\"Trying to tear down a ZK aware core container with ZK not reachable\");\n        } catch (InterruptedException ignored) {}\n      }\n\n      h.close();\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n\n    if (System.getProperty(UPDATELOG_SYSPROP) != null) {\n      // clears the updatelog sysprop at the end of the test run\n      System.clearProperty(UPDATELOG_SYSPROP);\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n    initCoreDataDir = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#deleteCore().mjava","sourceNew":"  /**\n   * Shuts down the test harness and nulls out the values setup by {@link #initCore}\n   */\n  public static void deleteCore() {\n    if (h != null) {\n      log.info(\"###deleteCore\" );\n      // If the test case set up Zk, it should still have it as available,\n      // otherwise the core close will just be unnecessarily delayed.\n      CoreContainer cc = h.getCoreContainer();\n      if (! cc.getCores().isEmpty() && cc.isZooKeeperAware()) {\n        try {\n          cc.getZkController().getZkClient().exists(\"/\", false);\n        } catch (KeeperException e) {\n          log.error(\"Testing connectivity to ZK by checking for root path failed\", e);\n          fail(\"Trying to tear down a ZK aware core container with ZK not reachable\");\n        } catch (InterruptedException ignored) {}\n      }\n\n      h.close();\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n\n    if (System.getProperty(UPDATELOG_SYSPROP) != null) {\n      // clears the updatelog sysprop at the end of the test run\n      System.clearProperty(UPDATELOG_SYSPROP);\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n    initCoreDataDir = null;\n    hdfsDataDir = null;\n  }\n\n","sourceOld":"  /**\n   * Shuts down the test harness and nulls out the values setup by {@link #initCore}\n   */\n  public static void deleteCore() {\n    if (h != null) {\n      log.info(\"###deleteCore\" );\n      // If the test case set up Zk, it should still have it as available,\n      // otherwise the core close will just be unnecessarily delayed.\n      CoreContainer cc = h.getCoreContainer();\n      if (! cc.getCores().isEmpty() && cc.isZooKeeperAware()) {\n        try {\n          cc.getZkController().getZkClient().exists(\"/\", false);\n        } catch (KeeperException e) {\n          log.error(\"Testing connectivity to ZK by checking for root path failed\", e);\n          fail(\"Trying to tear down a ZK aware core container with ZK not reachable\");\n        } catch (InterruptedException ignored) {}\n      }\n\n      h.close();\n    }\n\n    if (factoryProp == null) {\n      System.clearProperty(\"solr.directoryFactory\");\n    }\n\n    if (System.getProperty(UPDATELOG_SYSPROP) != null) {\n      // clears the updatelog sysprop at the end of the test run\n      System.clearProperty(UPDATELOG_SYSPROP);\n    }\n    \n    solrConfig = null;\n    h = null;\n    lrf = null;\n    configString = schemaString = null;\n    initCoreDataDir = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","19275ba31e621f6da1b83bf13af75233876fd3d4"],"61c45e99cf6676da48f19d7511c73712ad39402b":["c51ec71292ada2c57ba58fd26d02655ef713dd48"],"c51ec71292ada2c57ba58fd26d02655ef713dd48":["ec4f25a2171450fd11fca6ecb7a809922c9ec694"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"f8061ddd97f3352007d927dae445884a6f3d857b":["17e1bfbfa5a260860e3f12522fca45ec1240752f","9799ebcab48102552d92f7807965a91fb6e116f7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["c51ec71292ada2c57ba58fd26d02655ef713dd48","61c45e99cf6676da48f19d7511c73712ad39402b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ec4f25a2171450fd11fca6ecb7a809922c9ec694","c51ec71292ada2c57ba58fd26d02655ef713dd48"],"17e1bfbfa5a260860e3f12522fca45ec1240752f":["61c45e99cf6676da48f19d7511c73712ad39402b"],"a229cb50768e988c50a2106bdae3a92154f428bf":["9799ebcab48102552d92f7807965a91fb6e116f7","6bdf107cf16be0f22504ae184fed81596665a244"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e22ffe8cc51a892ae103df018822d7873e901c2a","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"6bdf107cf16be0f22504ae184fed81596665a244":["9799ebcab48102552d92f7807965a91fb6e116f7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9799ebcab48102552d92f7807965a91fb6e116f7":["17e1bfbfa5a260860e3f12522fca45ec1240752f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["c26f00b574427b55127e869b935845554afde1fa"],"ec4f25a2171450fd11fca6ecb7a809922c9ec694":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdf107cf16be0f22504ae184fed81596665a244"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","17e1bfbfa5a260860e3f12522fca45ec1240752f"],"c51ec71292ada2c57ba58fd26d02655ef713dd48":["61c45e99cf6676da48f19d7511c73712ad39402b","e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"c26f00b574427b55127e869b935845554afde1fa":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","ec4f25a2171450fd11fca6ecb7a809922c9ec694"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"17e1bfbfa5a260860e3f12522fca45ec1240752f":["f8061ddd97f3352007d927dae445884a6f3d857b","9799ebcab48102552d92f7807965a91fb6e116f7"],"a229cb50768e988c50a2106bdae3a92154f428bf":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9799ebcab48102552d92f7807965a91fb6e116f7":["f8061ddd97f3352007d927dae445884a6f3d857b","a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"ec4f25a2171450fd11fca6ecb7a809922c9ec694":["c51ec71292ada2c57ba58fd26d02655ef713dd48","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","f8061ddd97f3352007d927dae445884a6f3d857b","e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a229cb50768e988c50a2106bdae3a92154f428bf","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}