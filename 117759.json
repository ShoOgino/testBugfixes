{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestOmitTf#testOmitTermFreqAndPositions().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestOmitTf#testOmitTermFreqAndPositions().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestOmitTf#testOmitTermFreqAndPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testOmitTermFreqAndPositions() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n        \n    writer.addDocument(d);\n    writer.optimize();\n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    writer.addDocument(d);\n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testOmitTermFreqAndPositions() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n        \n    writer.addDocument(d);\n    writer.optimize();\n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    writer.addDocument(d);\n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestOmitTf#testOmitTermFreqAndPositions().mjava","sourceNew":null,"sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testOmitTermFreqAndPositions() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n        \n    writer.addDocument(d);\n    writer.optimize();\n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    writer.addDocument(d);\n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}