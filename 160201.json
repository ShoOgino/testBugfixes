{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Clause#Clause(Map[String,Object]).mjava","sourceNew":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    collection = parse(COLLECTION, m);\n    shard = parse(SHARD, m);\n    this.replica = parse(REPLICA, m);\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    m.forEach((s, o) -> parseCondition(s, o));\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n  }\n\n","sourceOld":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    collection = parse(COLLECTION, m);\n    shard = parse(SHARD, m);\n    this.replica = parse(REPLICA, m);\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    m.forEach((s, o) -> parseCondition(s, o));\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","sourceNew":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream().filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s))).findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      this.replica = parse(REPLICA, m);\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","sourceOld":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    collection = parse(COLLECTION, m);\n    shard = parse(SHARD, m);\n    this.replica = parse(REPLICA, m);\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    m.forEach((s, o) -> parseCondition(s, o));\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4","date":1495700700,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","sourceNew":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream().filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s))).findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      Condition replica = parse(REPLICA, m);\n      try {\n        int replicaCount = Integer.parseInt(String.valueOf(replica.val));\n        this.replica = new Condition(replica.name, replicaCount, replica.op);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\"Only an integer value is supported for replica \"+Utils.toJSONString(m));\n      }\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","sourceOld":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream().filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s))).findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      this.replica = parse(REPLICA, m);\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b","date":1495756308,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","sourceNew":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream().filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s))).findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      Condition replica = parse(REPLICA, m);\n      try {\n        int replicaCount = Integer.parseInt(String.valueOf(replica.val));\n        this.replica = new Condition(replica.name, replicaCount, replica.op);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\"Only an integer value is supported for replica \" + Utils.toJSONString(m));\n      }\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","sourceOld":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream().filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s))).findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      Condition replica = parse(REPLICA, m);\n      try {\n        int replicaCount = Integer.parseInt(String.valueOf(replica.val));\n        this.replica = new Condition(replica.name, replicaCount, replica.op);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\"Only an integer value is supported for replica \"+Utils.toJSONString(m));\n      }\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f91997a81c31b7f7595272ad0252c6b57f0df614","date":1496053147,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","sourceNew":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream()\n          .filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s)))\n          .findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      if(m.get(REPLICA) == null){\n        throw new RuntimeException(StrUtils.formatString(\"'replica' is required\" + Utils.toJSONString(m)));\n      }\n      Condition replica = parse(REPLICA, m);\n      try {\n        int replicaCount = Integer.parseInt(String.valueOf(replica.val));\n        if(replicaCount<0){\n          throw new RuntimeException(\"replica value sould be non null \"+ Utils.toJSONString(m));\n        }\n        this.replica = new Condition(replica.name, replicaCount, replica.op);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\"Only an integer value is supported for replica \" + Utils.toJSONString(m));\n      }\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","sourceOld":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream().filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s))).findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      Condition replica = parse(REPLICA, m);\n      try {\n        int replicaCount = Integer.parseInt(String.valueOf(replica.val));\n        this.replica = new Condition(replica.name, replicaCount, replica.op);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\"Only an integer value is supported for replica \" + Utils.toJSONString(m));\n      }\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream()\n          .filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s)))\n          .findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      if(m.get(REPLICA) == null){\n        throw new RuntimeException(StrUtils.formatString(\"'replica' is required\" + Utils.toJSONString(m)));\n      }\n      Condition replica = parse(REPLICA, m);\n      try {\n        int replicaCount = Integer.parseInt(String.valueOf(replica.val));\n        if(replicaCount<0){\n          throw new RuntimeException(\"replica value sould be non null \"+ Utils.toJSONString(m));\n        }\n        this.replica = new Condition(replica.name, replicaCount, replica.op);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\"Only an integer value is supported for replica \" + Utils.toJSONString(m));\n      }\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15","date":1496411842,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","sourceNew":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream()\n          .filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s)))\n          .findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      if(m.get(REPLICA) == null){\n        throw new RuntimeException(StrUtils.formatString(\"'replica' is required\" + Utils.toJSONString(m)));\n      }\n      this.replica = parse(REPLICA, m);\n      if (replica.op == WILDCARD) throw new RuntimeException(\"replica val cannot be null\" + Utils.toJSONString(m));\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","sourceOld":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream()\n          .filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s)))\n          .findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      if(m.get(REPLICA) == null){\n        throw new RuntimeException(StrUtils.formatString(\"'replica' is required\" + Utils.toJSONString(m)));\n      }\n      Condition replica = parse(REPLICA, m);\n      try {\n        int replicaCount = Integer.parseInt(String.valueOf(replica.val));\n        if(replicaCount<0){\n          throw new RuntimeException(\"replica value sould be non null \"+ Utils.toJSONString(m));\n        }\n        this.replica = new Condition(replica.name, replicaCount, replica.op);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\"Only an integer value is supported for replica \" + Utils.toJSONString(m));\n      }\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","sourceNew":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream()\n          .filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s)))\n          .findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      if(m.get(REPLICA) == null){\n        throw new RuntimeException(StrUtils.formatString(\"'replica' is required in {0}\", Utils.toJSONString(m)));\n      }\n      this.replica = parse(REPLICA, m);\n      if (replica.op == WILDCARD) throw new RuntimeException(\"replica val cannot be null\" + Utils.toJSONString(m));\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","sourceOld":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream()\n          .filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s)))\n          .findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      if(m.get(REPLICA) == null){\n        throw new RuntimeException(StrUtils.formatString(\"'replica' is required\" + Utils.toJSONString(m)));\n      }\n      this.replica = parse(REPLICA, m);\n      if (replica.op == WILDCARD) throw new RuntimeException(\"replica val cannot be null\" + Utils.toJSONString(m));\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream()\n          .filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s)))\n          .findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      if(m.get(REPLICA) == null){\n        throw new RuntimeException(StrUtils.formatString(\"'replica' is required in {0}\", Utils.toJSONString(m)));\n      }\n      this.replica = parse(REPLICA, m);\n      if (replica.op == WILDCARD) throw new RuntimeException(\"replica val cannot be null\" + Utils.toJSONString(m));\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","sourceNew":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream()\n          .filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s)))\n          .findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      if(m.get(REPLICA) == null){\n        throw new RuntimeException(StrUtils.formatString(\"'replica' is required in {0}\", Utils.toJSONString(m)));\n      }\n      this.replica = parse(REPLICA, m);\n      if (replica.op == WILDCARD) throw new RuntimeException(\"replica val cannot be null\" + Utils.toJSONString(m));\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","sourceOld":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream()\n          .filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s)))\n          .findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      if(m.get(REPLICA) == null){\n        throw new RuntimeException(StrUtils.formatString(\"'replica' is required\" + Utils.toJSONString(m)));\n      }\n      Condition replica = parse(REPLICA, m);\n      try {\n        int replicaCount = Integer.parseInt(String.valueOf(replica.val));\n        if(replicaCount<0){\n          throw new RuntimeException(\"replica value sould be non null \"+ Utils.toJSONString(m));\n        }\n        this.replica = new Condition(replica.name, replicaCount, replica.op);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\"Only an integer value is supported for replica \" + Utils.toJSONString(m));\n      }\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","sourceNew":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    String type = (String) m.get(\"type\");\n    this.type = type == null || ANY.equals(type) ? null : Replica.Type.valueOf(type.toUpperCase(Locale.ROOT));\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream()\n          .filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s)))\n          .findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      if(m.get(REPLICA) == null){\n        throw new RuntimeException(StrUtils.formatString(\"'replica' is required in {0}\", Utils.toJSONString(m)));\n      }\n      this.replica = parse(REPLICA, m);\n      if (replica.op == WILDCARD) throw new RuntimeException(\"replica val cannot be null\" + Utils.toJSONString(m));\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","sourceOld":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream()\n          .filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s)))\n          .findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      if(m.get(REPLICA) == null){\n        throw new RuntimeException(StrUtils.formatString(\"'replica' is required in {0}\", Utils.toJSONString(m)));\n      }\n      this.replica = parse(REPLICA, m);\n      if (replica.op == WILDCARD) throw new RuntimeException(\"replica val cannot be null\" + Utils.toJSONString(m));\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","sourceNew":"  public Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream()\n          .filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s)))\n          .findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      if(m.get(REPLICA) == null){\n        throw new RuntimeException(StrUtils.formatString(\"'replica' is required in {0}\", Utils.toJSONString(m)));\n      }\n      this.replica = parse(REPLICA, m);\n      if (replica.op == WILDCARD) throw new RuntimeException(\"replica val cannot be null\" + Utils.toJSONString(m));\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","sourceOld":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream()\n          .filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s)))\n          .findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      if(m.get(REPLICA) == null){\n        throw new RuntimeException(StrUtils.formatString(\"'replica' is required in {0}\", Utils.toJSONString(m)));\n      }\n      this.replica = parse(REPLICA, m);\n      if (replica.op == WILDCARD) throw new RuntimeException(\"replica val cannot be null\" + Utils.toJSONString(m));\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#Clause(Map[String,Object]).mjava","sourceNew":"  public Clause(Map<String, Object> m) {\n    this.original = m;\n    String type = (String) m.get(\"type\");\n    this.type = type == null || ANY.equals(type) ? null : Replica.Type.valueOf(type.toUpperCase(Locale.ROOT));\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream()\n          .filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s)))\n          .findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      if(m.get(REPLICA) == null){\n        throw new RuntimeException(StrUtils.formatString(\"'replica' is required in {0}\", Utils.toJSONString(m)));\n      }\n      this.replica = parse(REPLICA, m);\n      if (replica.op == WILDCARD) throw new RuntimeException(\"replica val cannot be null\" + Utils.toJSONString(m));\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","sourceOld":"  Clause(Map<String, Object> m) {\n    this.original = m;\n    String type = (String) m.get(\"type\");\n    this.type = type == null || ANY.equals(type) ? null : Replica.Type.valueOf(type.toUpperCase(Locale.ROOT));\n    strict = Boolean.parseBoolean(String.valueOf(m.getOrDefault(\"strict\", \"true\")));\n    Optional<String> globalTagName = m.keySet().stream().filter(Policy.GLOBAL_ONLY_TAGS::contains).findFirst();\n    if (globalTagName.isPresent()) {\n      globalTag = parse(globalTagName.get(), m);\n      if (m.size() > 2) {\n        throw new RuntimeException(\"Only one extra tag supported for the tag \" + globalTagName.get() + \" in \" + Utils.toJSONString(m));\n      }\n      tag = parse(m.keySet().stream()\n          .filter(s -> (!globalTagName.get().equals(s) && !IGNORE_TAGS.contains(s)))\n          .findFirst().get(), m);\n    } else {\n      collection = parse(COLLECTION, m);\n      shard = parse(SHARD, m);\n      if(m.get(REPLICA) == null){\n        throw new RuntimeException(StrUtils.formatString(\"'replica' is required in {0}\", Utils.toJSONString(m)));\n      }\n      this.replica = parse(REPLICA, m);\n      if (replica.op == WILDCARD) throw new RuntimeException(\"replica val cannot be null\" + Utils.toJSONString(m));\n      m.forEach((s, o) -> parseCondition(s, o));\n    }\n    if (tag == null)\n      throw new RuntimeException(\"Invalid op, must have one and only one tag other than collection, shard,replica \" + Utils.toJSONString(m));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"86fff6c123a5a1d38adb665dd045347219798da9":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"f91997a81c31b7f7595272ad0252c6b57f0df614":["901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["86fff6c123a5a1d38adb665dd045347219798da9"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["f91997a81c31b7f7595272ad0252c6b57f0df614","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"98f11c416d30e556e0004a9a84960702d12d35b1":["1852ff897aecd2f7c8376a02aedfd44104533f28","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"86fff6c123a5a1d38adb665dd045347219798da9":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"f91997a81c31b7f7595272ad0252c6b57f0df614":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b":["f91997a81c31b7f7595272ad0252c6b57f0df614"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["98f11c416d30e556e0004a9a84960702d12d35b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["86fff6c123a5a1d38adb665dd045347219798da9"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}