{"path":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testQueryWrapperFilter().mjava","commits":[{"id":"81abdee99ea2cd37c59c455411c9948dba325dc5","date":1382778752,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testQueryWrapperFilter().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-5307\n  // don't reuse the scorer of filters since they have been created with topScorer=false\n  public void testQueryWrapperFilter() throws IOException {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filter = new QueryWrapperFilter(AssertingQuery.wrap(random(), new TermQuery(new Term(\"field\", \"a\"))));\n    IndexSearcher s = newSearcher(r);\n    assert s instanceof AssertingIndexSearcher;\n    // this used to fail\n    s.search(new ConstantScoreQuery(filter), new TotalHitCountCollector());\n    \n    // check the rewrite\n    Query rewritten = new ConstantScoreQuery(filter).rewrite(r);\n    assertTrue(rewritten instanceof ConstantScoreQuery);\n    assertTrue(((ConstantScoreQuery) rewritten).getQuery() instanceof AssertingQuery);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5794e5c995c57444b154b01a9f3c837cd530a77","date":1394190201,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testQueryWrapperFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testQueryWrapperFilter().mjava","sourceNew":"  // LUCENE-5307\n  // don't reuse the scorer of filters since they have been created with bulkScorer=false\n  public void testQueryWrapperFilter() throws IOException {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filter = new QueryWrapperFilter(AssertingQuery.wrap(random(), new TermQuery(new Term(\"field\", \"a\"))));\n    IndexSearcher s = newSearcher(r);\n    assert s instanceof AssertingIndexSearcher;\n    // this used to fail\n    s.search(new ConstantScoreQuery(filter), new TotalHitCountCollector());\n    \n    // check the rewrite\n    Query rewritten = new ConstantScoreQuery(filter).rewrite(r);\n    assertTrue(rewritten instanceof ConstantScoreQuery);\n    assertTrue(((ConstantScoreQuery) rewritten).getQuery() instanceof AssertingQuery);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-5307\n  // don't reuse the scorer of filters since they have been created with topScorer=false\n  public void testQueryWrapperFilter() throws IOException {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filter = new QueryWrapperFilter(AssertingQuery.wrap(random(), new TermQuery(new Term(\"field\", \"a\"))));\n    IndexSearcher s = newSearcher(r);\n    assert s instanceof AssertingIndexSearcher;\n    // this used to fail\n    s.search(new ConstantScoreQuery(filter), new TotalHitCountCollector());\n    \n    // check the rewrite\n    Query rewritten = new ConstantScoreQuery(filter).rewrite(r);\n    assertTrue(rewritten instanceof ConstantScoreQuery);\n    assertTrue(((ConstantScoreQuery) rewritten).getQuery() instanceof AssertingQuery);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testQueryWrapperFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testQueryWrapperFilter().mjava","sourceNew":"  // LUCENE-5307\n  // don't reuse the scorer of filters since they have been created with bulkScorer=false\n  public void testQueryWrapperFilter() throws IOException {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filter = new QueryWrapperFilter(AssertingQuery.wrap(random(), new TermQuery(new Term(\"field\", \"a\"))));\n    IndexSearcher s = newSearcher(r);\n    assert s instanceof AssertingIndexSearcher;\n    // this used to fail\n    s.search(new ConstantScoreQuery(filter), new TotalHitCountCollector());\n    \n    // check the rewrite\n    Query rewritten = new ConstantScoreQuery(filter).rewrite(r);\n    assertTrue(rewritten instanceof ConstantScoreQuery);\n    assertTrue(((ConstantScoreQuery) rewritten).getQuery() instanceof AssertingQuery);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-5307\n  // don't reuse the scorer of filters since they have been created with topScorer=false\n  public void testQueryWrapperFilter() throws IOException {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filter = new QueryWrapperFilter(AssertingQuery.wrap(random(), new TermQuery(new Term(\"field\", \"a\"))));\n    IndexSearcher s = newSearcher(r);\n    assert s instanceof AssertingIndexSearcher;\n    // this used to fail\n    s.search(new ConstantScoreQuery(filter), new TotalHitCountCollector());\n    \n    // check the rewrite\n    Query rewritten = new ConstantScoreQuery(filter).rewrite(r);\n    assertTrue(rewritten instanceof ConstantScoreQuery);\n    assertTrue(((ConstantScoreQuery) rewritten).getQuery() instanceof AssertingQuery);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testQueryWrapperFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testQueryWrapperFilter().mjava","sourceNew":"  // LUCENE-5307\n  // don't reuse the scorer of filters since they have been created with bulkScorer=false\n  public void testQueryWrapperFilter() throws IOException {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.shutdown();\n\n    Filter filter = new QueryWrapperFilter(AssertingQuery.wrap(random(), new TermQuery(new Term(\"field\", \"a\"))));\n    IndexSearcher s = newSearcher(r);\n    assert s instanceof AssertingIndexSearcher;\n    // this used to fail\n    s.search(new ConstantScoreQuery(filter), new TotalHitCountCollector());\n    \n    // check the rewrite\n    Query rewritten = new ConstantScoreQuery(filter).rewrite(r);\n    assertTrue(rewritten instanceof ConstantScoreQuery);\n    assertTrue(((ConstantScoreQuery) rewritten).getQuery() instanceof AssertingQuery);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-5307\n  // don't reuse the scorer of filters since they have been created with bulkScorer=false\n  public void testQueryWrapperFilter() throws IOException {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filter = new QueryWrapperFilter(AssertingQuery.wrap(random(), new TermQuery(new Term(\"field\", \"a\"))));\n    IndexSearcher s = newSearcher(r);\n    assert s instanceof AssertingIndexSearcher;\n    // this used to fail\n    s.search(new ConstantScoreQuery(filter), new TotalHitCountCollector());\n    \n    // check the rewrite\n    Query rewritten = new ConstantScoreQuery(filter).rewrite(r);\n    assertTrue(rewritten instanceof ConstantScoreQuery);\n    assertTrue(((ConstantScoreQuery) rewritten).getQuery() instanceof AssertingQuery);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testQueryWrapperFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testQueryWrapperFilter().mjava","sourceNew":"  // LUCENE-5307\n  // don't reuse the scorer of filters since they have been created with bulkScorer=false\n  public void testQueryWrapperFilter() throws IOException {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filter = new QueryWrapperFilter(AssertingQuery.wrap(random(), new TermQuery(new Term(\"field\", \"a\"))));\n    IndexSearcher s = newSearcher(r);\n    assert s instanceof AssertingIndexSearcher;\n    // this used to fail\n    s.search(new ConstantScoreQuery(filter), new TotalHitCountCollector());\n    \n    // check the rewrite\n    Query rewritten = new ConstantScoreQuery(filter).rewrite(r);\n    assertTrue(rewritten instanceof ConstantScoreQuery);\n    assertTrue(((ConstantScoreQuery) rewritten).getQuery() instanceof AssertingQuery);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-5307\n  // don't reuse the scorer of filters since they have been created with bulkScorer=false\n  public void testQueryWrapperFilter() throws IOException {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.shutdown();\n\n    Filter filter = new QueryWrapperFilter(AssertingQuery.wrap(random(), new TermQuery(new Term(\"field\", \"a\"))));\n    IndexSearcher s = newSearcher(r);\n    assert s instanceof AssertingIndexSearcher;\n    // this used to fail\n    s.search(new ConstantScoreQuery(filter), new TotalHitCountCollector());\n    \n    // check the rewrite\n    Query rewritten = new ConstantScoreQuery(filter).rewrite(r);\n    assertTrue(rewritten instanceof ConstantScoreQuery);\n    assertTrue(((ConstantScoreQuery) rewritten).getQuery() instanceof AssertingQuery);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testQueryWrapperFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testQueryWrapperFilter().mjava","sourceNew":"  // LUCENE-5307\n  // don't reuse the scorer of filters since they have been created with bulkScorer=false\n  public void testQueryWrapperFilter() throws IOException {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    final Query wrapped = AssertingQuery.wrap(random(), new TermQuery(new Term(\"field\", \"a\")));\n    Filter filter = new QueryWrapperFilter(wrapped);\n    IndexSearcher s = newSearcher(r);\n    assert s instanceof AssertingIndexSearcher;\n    // this used to fail\n    s.search(new ConstantScoreQuery(filter), new TotalHitCountCollector());\n    \n    // check the rewrite\n    Query rewritten = filter;\n    for (Query q = rewritten.rewrite(r); q != rewritten; q = rewritten.rewrite(r)) {\n      rewritten = q;\n    }\n    assertEquals(new BoostQuery(new ConstantScoreQuery(wrapped), 0), rewritten);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-5307\n  // don't reuse the scorer of filters since they have been created with bulkScorer=false\n  public void testQueryWrapperFilter() throws IOException {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filter = new QueryWrapperFilter(AssertingQuery.wrap(random(), new TermQuery(new Term(\"field\", \"a\"))));\n    IndexSearcher s = newSearcher(r);\n    assert s instanceof AssertingIndexSearcher;\n    // this used to fail\n    s.search(new ConstantScoreQuery(filter), new TotalHitCountCollector());\n    \n    // check the rewrite\n    Query rewritten = new ConstantScoreQuery(filter).rewrite(r);\n    assertTrue(rewritten instanceof ConstantScoreQuery);\n    assertTrue(((ConstantScoreQuery) rewritten).getQuery() instanceof AssertingQuery);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testQueryWrapperFilter().mjava","sourceNew":null,"sourceOld":"  // LUCENE-5307\n  // don't reuse the scorer of filters since they have been created with bulkScorer=false\n  public void testQueryWrapperFilter() throws IOException {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    final Query wrapped = AssertingQuery.wrap(random(), new TermQuery(new Term(\"field\", \"a\")));\n    Filter filter = new QueryWrapperFilter(wrapped);\n    IndexSearcher s = newSearcher(r);\n    assert s instanceof AssertingIndexSearcher;\n    // this used to fail\n    s.search(new ConstantScoreQuery(filter), new TotalHitCountCollector());\n    \n    // check the rewrite\n    Query rewritten = filter;\n    for (Query q = rewritten.rewrite(r); q != rewritten; q = rewritten.rewrite(r)) {\n      rewritten = q;\n    }\n    assertEquals(new BoostQuery(new ConstantScoreQuery(wrapped), 0), rewritten);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"81abdee99ea2cd37c59c455411c9948dba325dc5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a5794e5c995c57444b154b01a9f3c837cd530a77":["81abdee99ea2cd37c59c455411c9948dba325dc5"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["81abdee99ea2cd37c59c455411c9948dba325dc5","a5794e5c995c57444b154b01a9f3c837cd530a77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d52e48927ca4ef3655a261f2230b968b6fdf3608"]},"commit2Childs":{"81abdee99ea2cd37c59c455411c9948dba325dc5":["a5794e5c995c57444b154b01a9f3c837cd530a77","acf00221f44c5f08ccea014f2492b53af15ecd66"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81abdee99ea2cd37c59c455411c9948dba325dc5"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a5794e5c995c57444b154b01a9f3c837cd530a77":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}