{"path":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testBinaryOrderingAndIncrement(TrieUtils).mjava","commits":[{"id":"29191e6ce86bfcd231cd069834a87833fa4079c1","date":1228333111,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testBinaryOrderingAndIncrement(TrieUtils).mjava","pathOld":"/dev/null","sourceNew":"\tprivate void testBinaryOrderingAndIncrement(TrieUtils variant) throws Exception {\n\t\t// generate a series of encoded longs, each numerical one bigger than the one before\n\t\tString last=null;\n\t\tfor (long l=-100000L; l<100000L; l++) {\n\t\t\tString act=variant.longToTrieCoded(l);\n\t\t\tif (last!=null) {\n\t\t\t\t// test if smaller\n\t\t\t\tassertTrue( last.compareTo(act) < 0 );\n\t\t\t\t// test the increment method (the last incremented by one should be the actual)\n\t\t\t\tassertEquals( variant.incrementTrieCoded(last), act );\n\t\t\t\t// test the decrement method (the actual decremented by one should be the last)\n\t\t\t\tassertEquals( last, variant.decrementTrieCoded(act) );\n\t\t\t}\n\t\t\t// next step\n\t\t\tlast=act;\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ef14ec05032a847f9ce1820055c6c29f72d771a","date":1231669514,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testBinaryOrderingAndIncrement(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testBinaryOrderingAndIncrement(TrieUtils).mjava","sourceNew":"  private void testBinaryOrderingAndIncrement(TrieUtils variant) throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    String last=null;\n    for (long l=-100000L; l<100000L; l++) {\n      String act=variant.longToTrieCoded(l);\n      if (last!=null) {\n        // test if smaller\n        assertTrue( last.compareTo(act) < 0 );\n        // test the increment method (the last incremented by one should be the actual)\n        assertEquals( variant.incrementTrieCoded(last), act );\n        // test the decrement method (the actual decremented by one should be the last)\n        assertEquals( last, variant.decrementTrieCoded(act) );\n      }\n      // next step\n      last=act;\n    }\n  }\n\n","sourceOld":"\tprivate void testBinaryOrderingAndIncrement(TrieUtils variant) throws Exception {\n\t\t// generate a series of encoded longs, each numerical one bigger than the one before\n\t\tString last=null;\n\t\tfor (long l=-100000L; l<100000L; l++) {\n\t\t\tString act=variant.longToTrieCoded(l);\n\t\t\tif (last!=null) {\n\t\t\t\t// test if smaller\n\t\t\t\tassertTrue( last.compareTo(act) < 0 );\n\t\t\t\t// test the increment method (the last incremented by one should be the actual)\n\t\t\t\tassertEquals( variant.incrementTrieCoded(last), act );\n\t\t\t\t// test the decrement method (the actual decremented by one should be the last)\n\t\t\t\tassertEquals( last, variant.decrementTrieCoded(act) );\n\t\t\t}\n\t\t\t// next step\n\t\t\tlast=act;\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testLongConversionAndOrdering().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testBinaryOrderingAndIncrement(TrieUtils).mjava","sourceNew":"  public void testLongConversionAndOrdering() throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    String last=null;\n    for (long l=-100000L; l<100000L; l++) {\n      String act=TrieUtils.longToPrefixCoded(l);\n      if (last!=null) {\n        // test if smaller\n        assertTrue(\"actual bigger than last\", last.compareTo(act) < 0 );\n      }\n      // test is back and forward conversion works\n      assertEquals(\"forward and back conversion should generate same long\", l, TrieUtils.prefixCodedToLong(act));\n      // next step\n      last=act;\n    }\n  }\n\n","sourceOld":"  private void testBinaryOrderingAndIncrement(TrieUtils variant) throws Exception {\n    // generate a series of encoded longs, each numerical one bigger than the one before\n    String last=null;\n    for (long l=-100000L; l<100000L; l++) {\n      String act=variant.longToTrieCoded(l);\n      if (last!=null) {\n        // test if smaller\n        assertTrue( last.compareTo(act) < 0 );\n        // test the increment method (the last incremented by one should be the actual)\n        assertEquals( variant.incrementTrieCoded(last), act );\n        // test the decrement method (the actual decremented by one should be the last)\n        assertEquals( last, variant.decrementTrieCoded(act) );\n      }\n      // next step\n      last=act;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29191e6ce86bfcd231cd069834a87833fa4079c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"]},"commit2Childs":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"29191e6ce86bfcd231cd069834a87833fa4079c1":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}