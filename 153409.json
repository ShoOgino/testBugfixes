{"path":"solr/core/src/java/org/apache/solr/core/SolrCores#waitAddPendingCoreOps(String).mjava","commits":[{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#waitAddPendingCoreOps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps#waitAddPendingCoreOps(String).mjava","sourceNew":"  // Wait here until any pending operations (load, unload or reload) are completed on this core.\n  protected SolrCore waitAddPendingCoreOps(String name) {\n\n    // Keep multiple threads from operating on a core at one time.\n    synchronized (modifyLock) {\n      boolean pending;\n      do { // Are we currently doing anything to this core? Loading, unloading, reloading?\n        pending = pendingCoreOps.contains(name); // wait for the core to be done being operated upon\n        if (! pending) { // Linear list, but shouldn't be too long\n          for (SolrCore core : pendingCloses) {\n            if (core.getName().equals(name)) {\n              pending = true;\n              break;\n            }\n          }\n        }\n        if (container.isShutDown()) return null; // Just stop already.\n\n        if (pending) {\n          try {\n            modifyLock.wait();\n          } catch (InterruptedException e) {\n            return null; // Seems best not to do anything at all if the thread is interrupted\n          }\n        }\n      } while (pending);\n      // We _really_ need to do this within the synchronized block!\n      if (! container.isShutDown()) {\n        if (! pendingCoreOps.add(name)) {\n          CoreContainer.log.warn(\"Replaced an entry in pendingCoreOps {}, we should not be doing this\", name);\n        }\n        return getCoreFromAnyList(name); // we might have been _unloading_ the core, so return the core if it was loaded.\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // Wait here until any pending operations (load, unload or reload) are completed on this core.\n  protected SolrCore waitAddPendingCoreOps(String name) {\n\n    // Keep multiple threads from operating on a core at one time.\n    synchronized (locker) {\n      boolean pending;\n      do { // Are we currently doing anything to this core? Loading, unloading, reloading?\n        pending = pendingCoreOps.contains(name); // wait for the core to be done being operated upon\n        if (! pending) { // Linear list, but shouldn't be too long\n          for (SolrCore core : pendingCloses) {\n            if (core.getName().equals(name)) {\n              pending = true;\n              break;\n            }\n          }\n        }\n        if (container.isShutDown()) return null; // Just stop already.\n\n        if (pending) {\n          try {\n            locker.wait();\n          } catch (InterruptedException e) {\n            return null; // Seems best not to do anything at all if the thread is interrupted\n          }\n        }\n      } while (pending);\n      // We _really_ need to do this within the synchronized block!\n      if (! container.isShutDown()) {\n        if (! pendingCoreOps.add(name)) {\n          CoreContainer.log.warn(\"Replaced an entry in pendingCoreOps {}, we should not be doing this\", name);\n        }\n        return getCoreFromAnyList(name); // we might have been _unloading_ the core, so return the core if it was loaded.\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86184cf8c7654ee1badea2a629b8bc0487c7f690","date":1372190237,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#waitAddPendingCoreOps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#waitAddPendingCoreOps(String).mjava","sourceNew":"  // Wait here until any pending operations (load, unload or reload) are completed on this core.\n  protected SolrCore waitAddPendingCoreOps(String name) {\n\n    // Keep multiple threads from operating on a core at one time.\n    synchronized (modifyLock) {\n      boolean pending;\n      do { // Are we currently doing anything to this core? Loading, unloading, reloading?\n        pending = pendingCoreOps.contains(name); // wait for the core to be done being operated upon\n        if (! pending) { // Linear list, but shouldn't be too long\n          for (SolrCore core : pendingCloses) {\n            if (core.getName().equals(name)) {\n              pending = true;\n              break;\n            }\n          }\n        }\n        if (container.isShutDown()) return null; // Just stop already.\n\n        if (pending) {\n          try {\n            modifyLock.wait();\n          } catch (InterruptedException e) {\n            return null; // Seems best not to do anything at all if the thread is interrupted\n          }\n        }\n      } while (pending);\n      // We _really_ need to do this within the synchronized block!\n      if (! container.isShutDown()) {\n        if (! pendingCoreOps.add(name)) {\n          CoreContainer.log.warn(\"Replaced an entry in pendingCoreOps {}, we should not be doing this\", name);\n        }\n        return getCoreFromAnyList(name, false); // we might have been _unloading_ the core, so return the core if it was loaded.\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // Wait here until any pending operations (load, unload or reload) are completed on this core.\n  protected SolrCore waitAddPendingCoreOps(String name) {\n\n    // Keep multiple threads from operating on a core at one time.\n    synchronized (modifyLock) {\n      boolean pending;\n      do { // Are we currently doing anything to this core? Loading, unloading, reloading?\n        pending = pendingCoreOps.contains(name); // wait for the core to be done being operated upon\n        if (! pending) { // Linear list, but shouldn't be too long\n          for (SolrCore core : pendingCloses) {\n            if (core.getName().equals(name)) {\n              pending = true;\n              break;\n            }\n          }\n        }\n        if (container.isShutDown()) return null; // Just stop already.\n\n        if (pending) {\n          try {\n            modifyLock.wait();\n          } catch (InterruptedException e) {\n            return null; // Seems best not to do anything at all if the thread is interrupted\n          }\n        }\n      } while (pending);\n      // We _really_ need to do this within the synchronized block!\n      if (! container.isShutDown()) {\n        if (! pendingCoreOps.add(name)) {\n          CoreContainer.log.warn(\"Replaced an entry in pendingCoreOps {}, we should not be doing this\", name);\n        }\n        return getCoreFromAnyList(name); // we might have been _unloading_ the core, so return the core if it was loaded.\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#waitAddPendingCoreOps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#waitAddPendingCoreOps(String).mjava","sourceNew":"  // Wait here until any pending operations (load, unload or reload) are completed on this core.\n  protected SolrCore waitAddPendingCoreOps(String name) {\n\n    // Keep multiple threads from operating on a core at one time.\n    synchronized (modifyLock) {\n      boolean pending;\n      do { // Are we currently doing anything to this core? Loading, unloading, reloading?\n        pending = pendingCoreOps.contains(name); // wait for the core to be done being operated upon\n        if (! pending) { // Linear list, but shouldn't be too long\n          for (SolrCore core : pendingCloses) {\n            if (core.getName().equals(name)) {\n              pending = true;\n              break;\n            }\n          }\n        }\n        if (container.isShutDown()) return null; // Just stop already.\n\n        if (pending) {\n          try {\n            modifyLock.wait();\n          } catch (InterruptedException e) {\n            return null; // Seems best not to do anything at all if the thread is interrupted\n          }\n        }\n      } while (pending);\n      // We _really_ need to do this within the synchronized block!\n      if (! container.isShutDown()) {\n        if (! pendingCoreOps.add(name)) {\n          CoreContainer.log.warn(\"Replaced an entry in pendingCoreOps {}, we should not be doing this\", name);\n        }\n        return getCoreFromAnyList(name, false); // we might have been _unloading_ the core, so return the core if it was loaded.\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // Wait here until any pending operations (load, unload or reload) are completed on this core.\n  protected SolrCore waitAddPendingCoreOps(String name) {\n\n    // Keep multiple threads from operating on a core at one time.\n    synchronized (modifyLock) {\n      boolean pending;\n      do { // Are we currently doing anything to this core? Loading, unloading, reloading?\n        pending = pendingCoreOps.contains(name); // wait for the core to be done being operated upon\n        if (! pending) { // Linear list, but shouldn't be too long\n          for (SolrCore core : pendingCloses) {\n            if (core.getName().equals(name)) {\n              pending = true;\n              break;\n            }\n          }\n        }\n        if (container.isShutDown()) return null; // Just stop already.\n\n        if (pending) {\n          try {\n            modifyLock.wait();\n          } catch (InterruptedException e) {\n            return null; // Seems best not to do anything at all if the thread is interrupted\n          }\n        }\n      } while (pending);\n      // We _really_ need to do this within the synchronized block!\n      if (! container.isShutDown()) {\n        if (! pendingCoreOps.add(name)) {\n          CoreContainer.log.warn(\"Replaced an entry in pendingCoreOps {}, we should not be doing this\", name);\n        }\n        return getCoreFromAnyList(name); // we might have been _unloading_ the core, so return the core if it was loaded.\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#waitAddPendingCoreOps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#waitAddPendingCoreOps(String).mjava","sourceNew":"  // Wait here until any pending operations (load, unload or reload) are completed on this core.\n  protected SolrCore waitAddPendingCoreOps(String name) {\n\n    // Keep multiple threads from operating on a core at one time.\n    synchronized (modifyLock) {\n      boolean pending;\n      do { // Are we currently doing anything to this core? Loading, unloading, reloading?\n        pending = pendingCoreOps.contains(name); // wait for the core to be done being operated upon\n        if (! pending) { // Linear list, but shouldn't be too long\n          for (SolrCore core : pendingCloses) {\n            if (core.getName().equals(name)) {\n              pending = true;\n              break;\n            }\n          }\n        }\n        if (container.isShutDown()) return null; // Just stop already.\n\n        if (pending) {\n          try {\n            modifyLock.wait();\n          } catch (InterruptedException e) {\n            return null; // Seems best not to do anything at all if the thread is interrupted\n          }\n        }\n      } while (pending);\n      // We _really_ need to do this within the synchronized block!\n      if (! container.isShutDown()) {\n        if (! pendingCoreOps.add(name)) {\n          log.warn(\"Replaced an entry in pendingCoreOps {}, we should not be doing this\", name);\n        }\n        return getCoreFromAnyList(name, false); // we might have been _unloading_ the core, so return the core if it was loaded.\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  // Wait here until any pending operations (load, unload or reload) are completed on this core.\n  protected SolrCore waitAddPendingCoreOps(String name) {\n\n    // Keep multiple threads from operating on a core at one time.\n    synchronized (modifyLock) {\n      boolean pending;\n      do { // Are we currently doing anything to this core? Loading, unloading, reloading?\n        pending = pendingCoreOps.contains(name); // wait for the core to be done being operated upon\n        if (! pending) { // Linear list, but shouldn't be too long\n          for (SolrCore core : pendingCloses) {\n            if (core.getName().equals(name)) {\n              pending = true;\n              break;\n            }\n          }\n        }\n        if (container.isShutDown()) return null; // Just stop already.\n\n        if (pending) {\n          try {\n            modifyLock.wait();\n          } catch (InterruptedException e) {\n            return null; // Seems best not to do anything at all if the thread is interrupted\n          }\n        }\n      } while (pending);\n      // We _really_ need to do this within the synchronized block!\n      if (! container.isShutDown()) {\n        if (! pendingCoreOps.add(name)) {\n          CoreContainer.log.warn(\"Replaced an entry in pendingCoreOps {}, we should not be doing this\", name);\n        }\n        return getCoreFromAnyList(name, false); // we might have been _unloading_ the core, so return the core if it was loaded.\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["9409650933cc688e77e565092a25e58adfc2e18d","86184cf8c7654ee1badea2a629b8bc0487c7f690"],"86184cf8c7654ee1badea2a629b8bc0487c7f690":["9409650933cc688e77e565092a25e58adfc2e18d"],"9409650933cc688e77e565092a25e58adfc2e18d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["86184cf8c7654ee1badea2a629b8bc0487c7f690"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9367dbf5b00d7764583d991c1888f4acc9c9991a"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"86184cf8c7654ee1badea2a629b8bc0487c7f690":["37a0f60745e53927c4c876cfe5b5a58170f0646c","9367dbf5b00d7764583d991c1888f4acc9c9991a"],"9409650933cc688e77e565092a25e58adfc2e18d":["37a0f60745e53927c4c876cfe5b5a58170f0646c","86184cf8c7654ee1badea2a629b8bc0487c7f690"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9409650933cc688e77e565092a25e58adfc2e18d"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}