{"path":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","commits":[{"id":"044244fb346dc6965d217fce709880d0e3bc2e9f","date":1343347260,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"/dev/null","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n    \n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      cc.reload(\"col_bad\");\n      fail(\"corrupd solrconfig.xml failed to trigger exception from reload\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"reload exception doesn't mention bad prolog: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"prolog\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"prolog\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e4d5fc8284faca306256427bbbb86017a32002cf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd26a4f83e997bff232f650cd946256caf756425","date":1343434018,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n    \n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SAXParseException e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + e.getSystemId(),\n                 0 < e.getSystemId().indexOf(\"solrconfig.xml\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < fail.toString().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n    \n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      cc.reload(\"col_bad\");\n      fail(\"corrupd solrconfig.xml failed to trigger exception from reload\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"reload exception doesn't mention bad prolog: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"prolog\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"prolog\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30d8f34eef907e1151ea85fa06a5ffaa558f7fd4","date":1343436917,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n    \n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SAXParseException e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + e.getSystemId(),\n                 0 < e.getSystemId().indexOf(\"solrconfig.xml\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n    \n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SAXParseException e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + e.getSystemId(),\n                 0 < e.getSystemId().indexOf(\"solrconfig.xml\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < fail.toString().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"/dev/null","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n    \n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SAXParseException e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + e.getSystemId(),\n                 0 < e.getSystemId().indexOf(\"solrconfig.xml\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"/dev/null","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n    \n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SAXParseException e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + e.getSystemId(),\n                 0 < e.getSystemId().indexOf(\"solrconfig.xml\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6493bfa10477745a1307895992b7323b6e19ec6","date":1343781089,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n    // TODO: even if we close all solr cores in the container, there is still a leaked dir?\n    // maybe from one that didnt load right?\n    \n    // TODO: make SolrCore closeable since its has close()\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n    \n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SAXParseException e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + e.getSystemId(),\n                 0 < e.getSystemId().indexOf(\"solrconfig.xml\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n    \n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SAXParseException e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + e.getSystemId(),\n                 0 < e.getSystemId().indexOf(\"solrconfig.xml\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":["e4d5fc8284faca306256427bbbb86017a32002cf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n    // TODO: even if we close all solr cores in the container, there is still a leaked dir?\n    // maybe from one that didnt load right?\n    \n    // TODO: make SolrCore closeable since its has close()\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n    \n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SAXParseException e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + e.getSystemId(),\n                 0 < e.getSystemId().indexOf(\"solrconfig.xml\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n    \n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SAXParseException e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + e.getSystemId(),\n                 0 < e.getSystemId().indexOf(\"solrconfig.xml\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n    // TODO: even if we close all solr cores in the container, there is still a leaked dir?\n    // maybe from one that didnt load right?\n    \n    // TODO: make SolrCore closeable since its has close()\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n    \n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SAXParseException e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + e.getSystemId(),\n                 0 < e.getSystemId().indexOf(\"solrconfig.xml\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n    \n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SAXParseException e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + e.getSystemId(),\n                 0 < e.getSystemId().indexOf(\"solrconfig.xml\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4d5fc8284faca306256427bbbb86017a32002cf","date":1347055110,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SAXParseException e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + e.getSystemId(),\n                 0 < e.getSystemId().indexOf(\"solrconfig.xml\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n    // TODO: even if we close all solr cores in the container, there is still a leaked dir?\n    // maybe from one that didnt load right?\n    \n    // TODO: make SolrCore closeable since its has close()\n    System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.SimpleFSDirectoryFactory\");\n    \n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SAXParseException e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + e.getSystemId(),\n                 0 < e.getSystemId().indexOf(\"solrconfig.xml\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":["b6493bfa10477745a1307895992b7323b6e19ec6","044244fb346dc6965d217fce709880d0e3bc2e9f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b374d78db8148ec6796fdf37148b33897ab40a8c","date":1351606544,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      assertTrue(\"reload exception doesn't refer to prolog \" + e.getCause().getMessage(),\n                 0 < e.getCause().getMessage().indexOf(\"prolog\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SAXParseException e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + e.getSystemId(),\n                 0 < e.getSystemId().indexOf(\"solrconfig.xml\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84388a41c006baa44d0ad851eb8d8e1ca78f6746","date":1351641265,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          e.getCause() instanceof SAXParseException);\n      SAXParseException se = (SAXParseException)e.getCause();\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      assertTrue(\"reload exception doesn't refer to prolog \" + e.getCause().getMessage(),\n                 0 < e.getCause().getMessage().indexOf(\"prolog\"));\n      \n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab17cf116fd02ca93b83a5e65b242da418ec1181","date":1365450976,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          e.getCause() instanceof SAXParseException);\n      SAXParseException se = (SAXParseException)e.getCause();\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          e.getCause() instanceof SAXParseException);\n      SAXParseException se = (SAXParseException)e.getCause();\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f33ef255480d446ae7aa03506be85d0356a9850f","date":1371880818,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          e.getCause() instanceof SAXParseException);\n      SAXParseException se = (SAXParseException)e.getCause();\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          e.getCause() instanceof SAXParseException);\n      SAXParseException se = (SAXParseException)e.getCause();\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          e.getCause().getCause() instanceof SAXParseException);\n      SAXParseException se = (SAXParseException)e.getCause().getCause();\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail.getCause() instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail.getCause()).getSystemId().indexOf(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          e.getCause() instanceof SAXParseException);\n      SAXParseException se = (SAXParseException)e.getCause();\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          e.getCause() instanceof SAXParseException);\n      SAXParseException se = (SAXParseException)e.getCause();\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          e.getCause().getCause() instanceof SAXParseException);\n      SAXParseException se = (SAXParseException)e.getCause().getCause();\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail.getCause() instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail.getCause()).getSystemId().indexOf(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          e.getCause().getCause() instanceof SAXParseException);\n      SAXParseException se = (SAXParseException)e.getCause().getCause();\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail.getCause() instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail.getCause()).getSystemId().indexOf(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          e.getCause() instanceof SAXParseException);\n      SAXParseException se = (SAXParseException)e.getCause();\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          e.getCause().getCause() instanceof SAXParseException);\n      SAXParseException se = (SAXParseException)e.getCause().getCause();\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail.getCause() instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail.getCause()).getSystemId().indexOf(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n    \n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n    \n    \n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          e.getCause() instanceof SAXParseException);\n      SAXParseException se = (SAXParseException)e.getCause();\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail).getSystemId().indexOf(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-basic.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d4e985daefcb892b529223b478c47985fc3c483","date":1395658491,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\"));\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n               ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          e.getCause().getCause() instanceof SAXParseException);\n      SAXParseException se = (SAXParseException)e.getCause().getCause();\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure isn't SAXParseException\",\n               fail.getCause() instanceof SAXParseException);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.toString(),\n               0 < ((SAXParseException)fail.getCause()).getSystemId().indexOf(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.UTF_8);\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\"));\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n               ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\"));\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n               ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.UTF_8);\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\"));\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n               ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.CHARSET_UTF_8.toString());\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\"));\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n               ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85032ab568b3f50eabd577aaa994ba197db93758","date":1404157267,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.UTF_8);\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.create(fixed);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\"));\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n               ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.UTF_8);\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.register(\"col_bad\", cc.create(fixed), false);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // register bogus as an alias for col_ok and confirm failure goes away\n    cc.register(\"bogus\", cc.getCore(\"col_ok\"), false);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\"));\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n               ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 3, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    assertTrue(\"bogus not found\", cores.contains(\"bogus\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d629ca62e3b8ab6e29a127aebe213163d490413","date":1405524223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.UTF_8);\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.create(fixed);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n               ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.UTF_8);\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.create(fixed);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\"));\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n               ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir().toString());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(ConfigSolr.fromString(resourceLoader, CONFIGSETS_SOLR_XML), cl);\n    cl.add(new CoreDescriptor(cc, \"col_ok\", \"col_ok\", \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(cc, \"col_bad\", \"col_bad\", \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.create(fixed);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n        0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.UTF_8);\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.create(fixed);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n               ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["ab17cf116fd02ca93b83a5e65b242da418ec1181","7116474e2e390259937401cf928323e0cbc75e60"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"84388a41c006baa44d0ad851eb8d8e1ca78f6746":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30d8f34eef907e1151ea85fa06a5ffaa558f7fd4"],"f33ef255480d446ae7aa03506be85d0356a9850f":["ab17cf116fd02ca93b83a5e65b242da418ec1181"],"ab17cf116fd02ca93b83a5e65b242da418ec1181":["84388a41c006baa44d0ad851eb8d8e1ca78f6746"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b374d78db8148ec6796fdf37148b33897ab40a8c":["e4d5fc8284faca306256427bbbb86017a32002cf"],"5eb2511ababf862ea11e10761c70ee560cd84510":["2d4e985daefcb892b529223b478c47985fc3c483","7d89d7e4e5101347833eea558851bf4209218619"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"d264f386d864b5751209060e8886ca9845f70469":["f33ef255480d446ae7aa03506be85d0356a9850f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","b6493bfa10477745a1307895992b7323b6e19ec6"],"7d89d7e4e5101347833eea558851bf4209218619":["2d4e985daefcb892b529223b478c47985fc3c483"],"044244fb346dc6965d217fce709880d0e3bc2e9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e4d5fc8284faca306256427bbbb86017a32002cf":["b6493bfa10477745a1307895992b7323b6e19ec6"],"30d8f34eef907e1151ea85fa06a5ffaa558f7fd4":["dd26a4f83e997bff232f650cd946256caf756425"],"dd26a4f83e997bff232f650cd946256caf756425":["044244fb346dc6965d217fce709880d0e3bc2e9f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30d8f34eef907e1151ea85fa06a5ffaa558f7fd4"],"2d629ca62e3b8ab6e29a127aebe213163d490413":["85032ab568b3f50eabd577aaa994ba197db93758"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","b6493bfa10477745a1307895992b7323b6e19ec6"],"b6493bfa10477745a1307895992b7323b6e19ec6":["30d8f34eef907e1151ea85fa06a5ffaa558f7fd4"],"2d4e985daefcb892b529223b478c47985fc3c483":["7116474e2e390259937401cf928323e0cbc75e60"],"85032ab568b3f50eabd577aaa994ba197db93758":["7d89d7e4e5101347833eea558851bf4209218619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"]},"commit2Childs":{"7116474e2e390259937401cf928323e0cbc75e60":["37a0f60745e53927c4c876cfe5b5a58170f0646c","2d4e985daefcb892b529223b478c47985fc3c483"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84388a41c006baa44d0ad851eb8d8e1ca78f6746":["ab17cf116fd02ca93b83a5e65b242da418ec1181"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"ab17cf116fd02ca93b83a5e65b242da418ec1181":["37a0f60745e53927c4c876cfe5b5a58170f0646c","f33ef255480d446ae7aa03506be85d0356a9850f"],"f33ef255480d446ae7aa03506be85d0356a9850f":["d264f386d864b5751209060e8886ca9845f70469"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","044244fb346dc6965d217fce709880d0e3bc2e9f","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["84388a41c006baa44d0ad851eb8d8e1ca78f6746"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","85032ab568b3f50eabd577aaa994ba197db93758"],"044244fb346dc6965d217fce709880d0e3bc2e9f":["dd26a4f83e997bff232f650cd946256caf756425"],"e4d5fc8284faca306256427bbbb86017a32002cf":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"30d8f34eef907e1151ea85fa06a5ffaa558f7fd4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","b6493bfa10477745a1307895992b7323b6e19ec6"],"dd26a4f83e997bff232f650cd946256caf756425":["30d8f34eef907e1151ea85fa06a5ffaa558f7fd4"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"2d629ca62e3b8ab6e29a127aebe213163d490413":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"b6493bfa10477745a1307895992b7323b6e19ec6":["8fd5be977c105554c6a7b68afcdbc511439723ab","e4d5fc8284faca306256427bbbb86017a32002cf","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"2d4e985daefcb892b529223b478c47985fc3c483":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"85032ab568b3f50eabd577aaa994ba197db93758":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","5eb2511ababf862ea11e10761c70ee560cd84510","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}