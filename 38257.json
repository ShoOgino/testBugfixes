{"path":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaybeStallCalled().mjava","commits":[{"id":"7e13c4018a2a11854a5dc4a7661ba9e2f1132e4b","date":1416355396,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaybeStallCalled().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-6063\n  public void testMaybeStallCalled() throws Exception {\n    final AtomicBoolean wasCalled = new AtomicBoolean();\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        protected void maybeStall() {\n          wasCalled.set(true);\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    assertTrue(wasCalled.get());\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaybeStallCalled().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaybeStallCalled().mjava","sourceNew":"  // LUCENE-6063\n  public void testMaybeStallCalled() throws Exception {\n    final AtomicBoolean wasCalled = new AtomicBoolean();\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        protected void maybeStall(IndexWriter writer) {\n          wasCalled.set(true);\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    assertTrue(wasCalled.get());\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-6063\n  public void testMaybeStallCalled() throws Exception {\n    final AtomicBoolean wasCalled = new AtomicBoolean();\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        protected void maybeStall() {\n          wasCalled.set(true);\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    assertTrue(wasCalled.get());\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["c6cc2915889370c9313ee1741da315e976bdd574"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6cc2915889370c9313ee1741da315e976bdd574","date":1422111819,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaybeStallCalled().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaybeStallCalled().mjava","sourceNew":"  // LUCENE-6063\n  public void testMaybeStallCalled() throws Exception {\n    final AtomicBoolean wasCalled = new AtomicBoolean();\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        protected boolean maybeStall(IndexWriter writer) {\n          wasCalled.set(true);\n          return true;\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    assertTrue(wasCalled.get());\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-6063\n  public void testMaybeStallCalled() throws Exception {\n    final AtomicBoolean wasCalled = new AtomicBoolean();\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        protected void maybeStall(IndexWriter writer) {\n          wasCalled.set(true);\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    assertTrue(wasCalled.get());\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2178aefcd4690bd53785e9673e2c918cdb64165","date":1587583605,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaybeStallCalled().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaybeStallCalled().mjava","sourceNew":"  // LUCENE-6063\n  public void testMaybeStallCalled() throws Exception {\n    final AtomicBoolean wasCalled = new AtomicBoolean();\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergePolicy(new LogByteSizeMergePolicy());\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        protected boolean maybeStall(IndexWriter writer) {\n          wasCalled.set(true);\n          return true;\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    w.addDocument(new Document());\n    w.flush();\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    assertTrue(wasCalled.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-6063\n  public void testMaybeStallCalled() throws Exception {\n    final AtomicBoolean wasCalled = new AtomicBoolean();\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        protected boolean maybeStall(IndexWriter writer) {\n          wasCalled.set(true);\n          return true;\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    assertTrue(wasCalled.get());\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89697e7abc9807639c384eecf5a2a6eef1080426","date":1587733375,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaybeStallCalled().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testMaybeStallCalled().mjava","sourceNew":"  // LUCENE-6063\n  public void testMaybeStallCalled() throws Exception {\n    final AtomicBoolean wasCalled = new AtomicBoolean();\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergePolicy(new LogByteSizeMergePolicy());\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        protected boolean maybeStall(MergeSource mergeSource) {\n          wasCalled.set(true);\n          return true;\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    w.addDocument(new Document());\n    w.flush();\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    assertTrue(wasCalled.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-6063\n  public void testMaybeStallCalled() throws Exception {\n    final AtomicBoolean wasCalled = new AtomicBoolean();\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergePolicy(new LogByteSizeMergePolicy());\n    iwc.setMergeScheduler(new ConcurrentMergeScheduler() {\n        @Override\n        protected boolean maybeStall(IndexWriter writer) {\n          wasCalled.set(true);\n          return true;\n        }\n      });\n    IndexWriter w = new IndexWriter(dir, iwc);\n    w.addDocument(new Document());\n    w.flush();\n    w.addDocument(new Document());\n    w.forceMerge(1);\n    assertTrue(wasCalled.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89697e7abc9807639c384eecf5a2a6eef1080426":["d2178aefcd4690bd53785e9673e2c918cdb64165"],"d2178aefcd4690bd53785e9673e2c918cdb64165":["c6cc2915889370c9313ee1741da315e976bdd574"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6cc2915889370c9313ee1741da315e976bdd574":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"7e13c4018a2a11854a5dc4a7661ba9e2f1132e4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["7e13c4018a2a11854a5dc4a7661ba9e2f1132e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89697e7abc9807639c384eecf5a2a6eef1080426"]},"commit2Childs":{"89697e7abc9807639c384eecf5a2a6eef1080426":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2178aefcd4690bd53785e9673e2c918cdb64165":["89697e7abc9807639c384eecf5a2a6eef1080426"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e13c4018a2a11854a5dc4a7661ba9e2f1132e4b"],"c6cc2915889370c9313ee1741da315e976bdd574":["d2178aefcd4690bd53785e9673e2c918cdb64165"],"7e13c4018a2a11854a5dc4a7661ba9e2f1132e4b":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["c6cc2915889370c9313ee1741da315e976bdd574"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}