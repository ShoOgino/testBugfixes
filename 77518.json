{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","sourceNew":"  /** simple random test like testRandom2, but for large docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100*RANDOM_MULTIPLIER, 8192);\n    }\n  }\n\n","sourceOld":"  /** simple random test like testRandom2, but for large docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100*RANDOM_MULTIPLIER, 8192);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d135d0e0e3d4b83c56b666e6cf8c585c17d2fff9","date":1334679794,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","sourceNew":"  /** simple random test like testRandom2, but for large docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100, 8192);\n    }\n  }\n\n","sourceOld":"  /** simple random test like testRandom2, but for large docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100*RANDOM_MULTIPLIER, 8192);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6","date":1341575807,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","sourceNew":"  /** simple random test like testRandom2, but for larger docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(3);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100, 1024);\n    }\n  }\n\n","sourceOld":"  /** simple random test like testRandom2, but for large docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100, 8192);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e7f30683f53928b2fce016e6430c9795caff22","date":1341839598,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","sourceNew":"  /** simple random test like testRandom2, but for larger docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(3);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100, 1024);\n    }\n  }\n\n","sourceOld":"  /** simple random test like testRandom2, but for large docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100, 8192);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","sourceNew":"  /** simple random test like testRandom2, but for larger docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(3);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100, 1024);\n    }\n  }\n\n","sourceOld":"  /** simple random test like testRandom2, but for large docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100, 8192);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3938e891050232a07c92a8acfa853c5a5e2a8259","date":1348763107,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","sourceNew":"  /** simple random test like testRandom2, but for larger docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(3);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i + \" numEntries=\" + numEntries);\n      }\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100, 1024);\n    }\n  }\n\n","sourceOld":"  /** simple random test like testRandom2, but for larger docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(3);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100, 1024);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","sourceNew":"  /** simple random test like testRandom2, but for larger docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(3);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i + \" numEntries=\" + numEntries);\n      }\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100, 1024);\n    }\n  }\n\n","sourceOld":"  /** simple random test like testRandom2, but for larger docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(3);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i + \" numEntries=\" + numEntries);\n      }\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100, 1024);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","sourceNew":"  /** simple random test like testRandom2, but for larger docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(3);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i + \" numEntries=\" + numEntries);\n      }\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100, 1024);\n      analyzer.close();\n    }\n  }\n\n","sourceOld":"  /** simple random test like testRandom2, but for larger docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(3);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i + \" numEntries=\" + numEntries);\n      }\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100, 1024);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandomHuge().mjava","sourceNew":"  /** simple random test like testRandom2, but for larger docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(3);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i + \" numEntries=\" + numEntries);\n      }\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100, 1024);\n      analyzer.close();\n    }\n  }\n\n","sourceOld":"  /** simple random test like testRandom2, but for larger docs\n   */\n  public void testRandomHuge() throws Exception {\n    Random random = random();\n    final int numIters = atLeast(3);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i + \" numEntries=\" + numEntries);\n      }\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n          return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, ignoreCase));\n        }\n      };\n\n      checkRandomData(random, analyzer, 100, 1024);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","a56958d7f71a28824f20031ffbb2e13502a0274e"],"04e7f30683f53928b2fce016e6430c9795caff22":["d135d0e0e3d4b83c56b666e6cf8c585c17d2fff9","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6":["d135d0e0e3d4b83c56b666e6cf8c585c17d2fff9"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3938e891050232a07c92a8acfa853c5a5e2a8259":["16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["3938e891050232a07c92a8acfa853c5a5e2a8259"],"d135d0e0e3d4b83c56b666e6cf8c585c17d2fff9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["d135d0e0e3d4b83c56b666e6cf8c585c17d2fff9","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"04e7f30683f53928b2fce016e6430c9795caff22":[],"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6":["04e7f30683f53928b2fce016e6430c9795caff22","3938e891050232a07c92a8acfa853c5a5e2a8259","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d135d0e0e3d4b83c56b666e6cf8c585c17d2fff9"],"3938e891050232a07c92a8acfa853c5a5e2a8259":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"d135d0e0e3d4b83c56b666e6cf8c585c17d2fff9":["04e7f30683f53928b2fce016e6430c9795caff22","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","04e7f30683f53928b2fce016e6430c9795caff22","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}