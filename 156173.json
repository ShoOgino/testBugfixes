{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","commits":[{"id":"df2d68685a69bd82bf79243e28623c0775eb7bd8","date":1185567892,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","pathOld":"/dev/null","sourceNew":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap missingQueries = (HashMap) judgements.clone();\n    ArrayList missingJudgements = new ArrayList();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+(String)missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (Iterator it = missingQueries.keySet().iterator(); it.hasNext();) {\n          String id = (String) it.next();\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","sourceNew":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = (HashMap<String, QRelJudgement>) judgements.clone();\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap missingQueries = (HashMap) judgements.clone();\n    ArrayList missingJudgements = new ArrayList();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+(String)missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (Iterator it = missingQueries.keySet().iterator(); it.hasNext();) {\n          String id = (String) it.next();\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","bugFix":null,"bugIntro":["4d7a70709df2f3ba961939504c75098e92da8b99"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","sourceNew":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = (HashMap<String, QRelJudgement>) judgements.clone();\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = (HashMap<String, QRelJudgement>) judgements.clone();\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["df2d68685a69bd82bf79243e28623c0775eb7bd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df2d68685a69bd82bf79243e28623c0775eb7bd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df2d68685a69bd82bf79243e28623c0775eb7bd8"],"df2d68685a69bd82bf79243e28623c0775eb7bd8":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}