{"path":"src/java/org/apache/lucene/index/IndexReader#aquireWriteLock().mjava","commits":[{"id":"f653aecb322b74d99e6ecdb93765e453a3d7aa71","date":1082107025,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#aquireWriteLock().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Trys to acquire the WriteLock on this directory.\n   * this method is only valid if this IndexReader is directory owner.\n   * \n   * @throws IOException If WriteLock cannot be acquired.\n   */\n  private void aquireWriteLock() throws IOException {\n    if (stale)\n      throw new IOException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n    if (writeLock == null) {\n      Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n      if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n        throw new IOException(\"Index locked for write: \" + writeLock);\n      this.writeLock = writeLock;\n\n      // we have to check whether index has changed since this reader was opened.\n      // if so, this reader is no longer valid for deletion\n      if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n        stale = true;\n        this.writeLock.release();\n        this.writeLock = null;\n        throw new IOException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8cdfcb1011da40bd2e4a6606337b8aeef65004c","date":1092602970,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#aquireWriteLock().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#aquireWriteLock().mjava","sourceNew":"  /**\n   * Tries to acquire the WriteLock on this directory.\n   * this method is only valid if this IndexReader is directory owner.\n   * \n   * @throws IOException If WriteLock cannot be acquired.\n   */\n  private void aquireWriteLock() throws IOException {\n    if (stale)\n      throw new IOException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n    if (writeLock == null) {\n      Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n      if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n        throw new IOException(\"Index locked for write: \" + writeLock);\n      this.writeLock = writeLock;\n\n      // we have to check whether index has changed since this reader was opened.\n      // if so, this reader is no longer valid for deletion\n      if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n        stale = true;\n        this.writeLock.release();\n        this.writeLock = null;\n        throw new IOException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Trys to acquire the WriteLock on this directory.\n   * this method is only valid if this IndexReader is directory owner.\n   * \n   * @throws IOException If WriteLock cannot be acquired.\n   */\n  private void aquireWriteLock() throws IOException {\n    if (stale)\n      throw new IOException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n    if (writeLock == null) {\n      Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n      if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n        throw new IOException(\"Index locked for write: \" + writeLock);\n      this.writeLock = writeLock;\n\n      // we have to check whether index has changed since this reader was opened.\n      // if so, this reader is no longer valid for deletion\n      if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n        stale = true;\n        this.writeLock.release();\n        this.writeLock = null;\n        throw new IOException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#acquireWriteLock().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#aquireWriteLock().mjava","sourceNew":"  /**\n   * Tries to acquire the WriteLock on this directory.\n   * this method is only valid if this IndexReader is directory owner.\n   * \n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  private void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    if (stale)\n      throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n    if (isClosed)\n      throw new IOException(\"this reader is closed\");\n\n    if (writeLock == null) {\n      Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n      if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n        throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n      this.writeLock = writeLock;\n\n      // we have to check whether index has changed since this reader was opened.\n      // if so, this reader is no longer valid for deletion\n      if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n        stale = true;\n        this.writeLock.release();\n        this.writeLock = null;\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory.\n   * this method is only valid if this IndexReader is directory owner.\n   * \n   * @throws IOException If WriteLock cannot be acquired.\n   */\n  private void aquireWriteLock() throws IOException {\n    if (stale)\n      throw new IOException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n    if (writeLock == null) {\n      Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n      if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n        throw new IOException(\"Index locked for write: \" + writeLock);\n      this.writeLock = writeLock;\n\n      // we have to check whether index has changed since this reader was opened.\n      // if so, this reader is no longer valid for deletion\n      if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n        stale = true;\n        this.writeLock.release();\n        this.writeLock = null;\n        throw new IOException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b8cdfcb1011da40bd2e4a6606337b8aeef65004c":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"1b54a9bc667895a2095a886184bf69a3179e63df":["b8cdfcb1011da40bd2e4a6606337b8aeef65004c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1b54a9bc667895a2095a886184bf69a3179e63df"]},"commit2Childs":{"b8cdfcb1011da40bd2e4a6606337b8aeef65004c":["1b54a9bc667895a2095a886184bf69a3179e63df"],"1b54a9bc667895a2095a886184bf69a3179e63df":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["b8cdfcb1011da40bd2e4a6606337b8aeef65004c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}