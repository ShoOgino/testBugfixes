{"path":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","sourceNew":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","sourceOld":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","sourceNew":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","sourceOld":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","sourceNew":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","sourceOld":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","date":1308411958,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","sourceNew":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      register(new MemoryCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","sourceOld":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","sourceNew":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      register(new MemoryCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","sourceOld":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0b8069918917b33f361011899a1af0cdd2d462","date":1310039336,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","sourceNew":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(randomizCodec(random, new StandardCodec()));\n      register(randomizCodec(random, new PreFlexCodec()));\n      register(randomizCodec(random, new PulsingCodec( 1 + random.nextInt(20))));\n      register(randomizCodec(random, new SimpleTextCodec()));\n      register(randomizCodec(random, new MemoryCodec()));\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","sourceOld":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      register(new MemoryCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","sourceNew":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(randomizCodec(random, new StandardCodec()));\n      register(randomizCodec(random, new PreFlexCodec()));\n      register(randomizCodec(random, new PulsingCodec( 1 + random.nextInt(20))));\n      register(randomizCodec(random, new SimpleTextCodec()));\n      register(randomizCodec(random, new MemoryCodec()));\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","sourceOld":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      register(new MemoryCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","sourceNew":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(randomizCodec(random, new StandardCodec()));\n      register(randomizCodec(random, new PreFlexCodec()));\n      register(randomizCodec(random, new PulsingCodec( 1 + random.nextInt(20))));\n      register(randomizCodec(random, new SimpleTextCodec()));\n      register(randomizCodec(random, new MemoryCodec()));\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","sourceOld":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      register(new MemoryCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","sourceNew":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      // TODO: make it possible to specify min/max iterms per\n      // block via CL:\n      int minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n      int maxItemsPerBlock = 2*(Math.max(2, minItemsPerBlock-1)) + random.nextInt(100);\n      register(randomizCodec(random, new StandardCodec(minItemsPerBlock, maxItemsPerBlock)));\n      register(randomizCodec(random, new PreFlexCodec()));\n      // TODO: make it possible to specify min/max iterms per\n      // block via CL:\n      minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n      maxItemsPerBlock = 2*(Math.max(1, minItemsPerBlock-1)) + random.nextInt(100);\n      register(randomizCodec(random, new PulsingCodec( 1 + random.nextInt(20), minItemsPerBlock, maxItemsPerBlock)));\n      register(randomizCodec(random, new SimpleTextCodec()));\n      register(randomizCodec(random, new MemoryCodec()));\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","sourceOld":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(randomizCodec(random, new StandardCodec()));\n      register(randomizCodec(random, new PreFlexCodec()));\n      register(randomizCodec(random, new PulsingCodec( 1 + random.nextInt(20))));\n      register(randomizCodec(random, new SimpleTextCodec()));\n      register(randomizCodec(random, new MemoryCodec()));\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0eb7463fbe86f15add19bc7b9206f9e98a73144","date":1314325319,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","sourceNew":null,"sourceOld":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      // TODO: make it possible to specify min/max iterms per\n      // block via CL:\n      int minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n      int maxItemsPerBlock = 2*(Math.max(2, minItemsPerBlock-1)) + random.nextInt(100);\n      register(randomizCodec(random, new StandardCodec(minItemsPerBlock, maxItemsPerBlock)));\n      register(randomizCodec(random, new PreFlexCodec()));\n      // TODO: make it possible to specify min/max iterms per\n      // block via CL:\n      minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n      maxItemsPerBlock = 2*(Math.max(1, minItemsPerBlock-1)) + random.nextInt(100);\n      register(randomizCodec(random, new PulsingCodec( 1 + random.nextInt(20), minItemsPerBlock, maxItemsPerBlock)));\n      register(randomizCodec(random, new SimpleTextCodec()));\n      register(randomizCodec(random, new MemoryCodec()));\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["bc0b8069918917b33f361011899a1af0cdd2d462"],"1291e4568eb7d9463d751627596ef14baf4c1603":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","bc0b8069918917b33f361011899a1af0cdd2d462"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","bc0b8069918917b33f361011899a1af0cdd2d462"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bc0b8069918917b33f361011899a1af0cdd2d462":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"e0eb7463fbe86f15add19bc7b9206f9e98a73144":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e0eb7463fbe86f15add19bc7b9206f9e98a73144"],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["e0eb7463fbe86f15add19bc7b9206f9e98a73144"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bc0b8069918917b33f361011899a1af0cdd2d462":["60ba444201d2570214b6fcf1d15600dc1a01f548","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"e0eb7463fbe86f15add19bc7b9206f9e98a73144":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["1291e4568eb7d9463d751627596ef14baf4c1603","d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","bc0b8069918917b33f361011899a1af0cdd2d462"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}