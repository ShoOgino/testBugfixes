{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(LeafReader,PrintStream,boolean,boolean).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(LeafReader,PrintStream,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(LeafReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n    final Bits liveDocs = reader.getLiveDocs();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.fields();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, liveDocs, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      if (liveDocs != null) {\n        if (infoStream != null) {\n          infoStream.print(\"    test (ignoring deletes): terms, freq, prox...\");\n        }\n        checkFields(fields, null, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","date":1425345513,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(CodecReader,PrintStream,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(LeafReader,PrintStream,boolean,boolean).mjava","sourceNew":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(CodecReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n    final Bits liveDocs = reader.getLiveDocs();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.getPostingsReader().getMergeInstance();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, liveDocs, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      if (liveDocs != null) {\n        if (infoStream != null) {\n          infoStream.print(\"    test (ignoring deletes): terms, freq, prox...\");\n        }\n        checkFields(fields, null, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(LeafReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n    final Bits liveDocs = reader.getLiveDocs();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.fields();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, liveDocs, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      if (liveDocs != null) {\n        if (infoStream != null) {\n          infoStream.print(\"    test (ignoring deletes): terms, freq, prox...\");\n        }\n        checkFields(fields, null, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPostings(LeafReader,PrintStream,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Test the term index.\n   * @lucene.experimental\n   */\n  public static Status.TermIndexStatus testPostings(LeafReader reader, PrintStream infoStream, boolean verbose, boolean failFast) throws IOException {\n\n    // TODO: we should go and verify term vectors match, if\n    // crossCheckTermVectors is on...\n\n    Status.TermIndexStatus status;\n    final int maxDoc = reader.maxDoc();\n    final Bits liveDocs = reader.getLiveDocs();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: terms, freq, prox...\");\n      }\n\n      final Fields fields = reader.fields();\n      final FieldInfos fieldInfos = reader.getFieldInfos();\n      status = checkFields(fields, liveDocs, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      if (liveDocs != null) {\n        if (infoStream != null) {\n          infoStream.print(\"    test (ignoring deletes): terms, freq, prox...\");\n        }\n        checkFields(fields, null, maxDoc, fieldInfos, true, false, infoStream, verbose);\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status = new Status.TermIndexStatus();\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c9fb5f46e264daf5ba3860defe623a89d202dd87","8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"]},"commit2Childs":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}