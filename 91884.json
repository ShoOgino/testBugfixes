{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#getLogMergePolicy().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#getLogMergePolicy().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getLogMergePolicy().mjava","sourceNew":"  /**\n   * Casts current mergePolicy to LogMergePolicy, and throws\n   * an exception if the mergePolicy is not a LogMergePolicy.\n   */\n  private LogMergePolicy getLogMergePolicy() {\n    if (mergePolicy instanceof LogMergePolicy)\n      return (LogMergePolicy) mergePolicy;\n    else\n      throw new IllegalArgumentException(\"this method can only be called when the merge policy is the default LogMergePolicy\");\n  }\n\n","sourceOld":"  /**\n   * Casts current mergePolicy to LogMergePolicy, and throws\n   * an exception if the mergePolicy is not a LogMergePolicy.\n   */\n  private LogMergePolicy getLogMergePolicy() {\n    if (mergePolicy instanceof LogMergePolicy)\n      return (LogMergePolicy) mergePolicy;\n    else\n      throw new IllegalArgumentException(\"this method can only be called when the merge policy is the default LogMergePolicy\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f970050f4837d6c64c0228587d9cf569590110e2","date":1291198957,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#getLogMergePolicy().mjava","sourceNew":null,"sourceOld":"  /**\n   * Casts current mergePolicy to LogMergePolicy, and throws\n   * an exception if the mergePolicy is not a LogMergePolicy.\n   */\n  private LogMergePolicy getLogMergePolicy() {\n    if (mergePolicy instanceof LogMergePolicy)\n      return (LogMergePolicy) mergePolicy;\n    else\n      throw new IllegalArgumentException(\"this method can only be called when the merge policy is the default LogMergePolicy\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#getLogMergePolicy().mjava","sourceNew":null,"sourceOld":"  /**\n   * Casts current mergePolicy to LogMergePolicy, and throws\n   * an exception if the mergePolicy is not a LogMergePolicy.\n   */\n  private LogMergePolicy getLogMergePolicy() {\n    if (mergePolicy instanceof LogMergePolicy)\n      return (LogMergePolicy) mergePolicy;\n    else\n      throw new IllegalArgumentException(\"this method can only be called when the merge policy is the default LogMergePolicy\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#getLogMergePolicy().mjava","sourceNew":null,"sourceOld":"  /**\n   * Casts current mergePolicy to LogMergePolicy, and throws\n   * an exception if the mergePolicy is not a LogMergePolicy.\n   */\n  private LogMergePolicy getLogMergePolicy() {\n    if (mergePolicy instanceof LogMergePolicy)\n      return (LogMergePolicy) mergePolicy;\n    else\n      throw new IllegalArgumentException(\"this method can only be called when the merge policy is the default LogMergePolicy\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f970050f4837d6c64c0228587d9cf569590110e2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","f970050f4837d6c64c0228587d9cf569590110e2"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","f970050f4837d6c64c0228587d9cf569590110e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f970050f4837d6c64c0228587d9cf569590110e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f970050f4837d6c64c0228587d9cf569590110e2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f970050f4837d6c64c0228587d9cf569590110e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}