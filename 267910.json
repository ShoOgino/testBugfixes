{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,SolrConfig.SolrPluginInfo).mjava","commits":[{"id":"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74","date":1563736916,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,SolrConfig.SolrPluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","sourceNew":"    private boolean verifyClass(CommandOperation op, String clz, SolrConfig.SolrPluginInfo pluginMeta) {\n      if (clz == null) return true;\n      PluginInfo info = new PluginInfo(pluginMeta.getCleanTag(), op.getDataMap());\n      if(info.getRuntimeLibType() != null && !RuntimeLib.isEnabled()){\n        op.addError(\"node not started with enable.runtime.lib=true\");\n        return false;\n      }\n\n\n      if ( !\"true\".equals(String.valueOf(op.getStr(RuntimeLib.TYPE, null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), pluginMeta.clazz, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","sourceOld":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(RuntimeLib.TYPE, null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), expected, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,SolrConfig.SolrPluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,SolrConfig.SolrPluginInfo).mjava","sourceNew":"    private boolean verifyClass(CommandOperation op, String clz, SolrConfig.SolrPluginInfo pluginMeta) {\n      if (clz == null) return true;\n      PluginInfo info = new PluginInfo(pluginMeta.getCleanTag(), op.getDataMap());\n\n      if (info.isRuntimePlugin() && !RuntimeLib.isEnabled()) {\n        op.addError(\"node not started with enable.runtime.lib=true\");\n        return false;\n      }\n\n      if (!\"true\".equals(String.valueOf(op.getStr(RuntimeLib.TYPE, null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), pluginMeta.clazz, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","sourceOld":"    private boolean verifyClass(CommandOperation op, String clz, SolrConfig.SolrPluginInfo pluginMeta) {\n      if (clz == null) return true;\n      PluginInfo info = new PluginInfo(pluginMeta.getCleanTag(), op.getDataMap());\n      if(info.getRuntimeLibType() != null && !RuntimeLib.isEnabled()){\n        op.addError(\"node not started with enable.runtime.lib=true\");\n        return false;\n      }\n\n\n      if ( !\"true\".equals(String.valueOf(op.getStr(RuntimeLib.TYPE, null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), pluginMeta.clazz, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,SolrConfig.SolrPluginInfo).mjava","sourceNew":"    private boolean verifyClass(CommandOperation op, String clz, Class expected) {\n      if (clz == null) return true;\n      if (!\"true\".equals(String.valueOf(op.getStr(\"runtimeLib\", null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), expected, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","sourceOld":"    private boolean verifyClass(CommandOperation op, String clz, SolrConfig.SolrPluginInfo pluginMeta) {\n      if (clz == null) return true;\n      PluginInfo info = new PluginInfo(pluginMeta.getCleanTag(), op.getDataMap());\n\n      if (info.isRuntimePlugin() && !RuntimeLib.isEnabled()) {\n        op.addError(\"node not started with enable.runtime.lib=true\");\n        return false;\n      }\n\n      if (!\"true\".equals(String.valueOf(op.getStr(RuntimeLib.TYPE, null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), pluginMeta.clazz, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#verifyClass(CommandOperation,String,SolrConfig.SolrPluginInfo).mjava","sourceNew":null,"sourceOld":"    private boolean verifyClass(CommandOperation op, String clz, SolrConfig.SolrPluginInfo pluginMeta) {\n      if (clz == null) return true;\n      PluginInfo info = new PluginInfo(pluginMeta.getCleanTag(), op.getDataMap());\n\n      if (info.isRuntimePlugin() && !RuntimeLib.isEnabled()) {\n        op.addError(\"node not started with enable.runtime.lib=true\");\n        return false;\n      }\n\n      if (!\"true\".equals(String.valueOf(op.getStr(RuntimeLib.TYPE, null)))) {\n        //this is not dynamically loaded so we can verify the class right away\n        try {\n          req.getCore().createInitInstance(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()), pluginMeta.clazz, clz, \"\");\n        } catch (Exception e) {\n          op.addError(e.getMessage());\n          return false;\n        }\n\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["39dabfd19b49b248d63cedbb01ea144ee5ad071c","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}