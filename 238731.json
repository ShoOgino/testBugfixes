{"path":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","sourceNew":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        for (final String file : commit.files) {\n          decRef(file);\n        }\n      }\n      commitsToDelete.clear();\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        for (final String file : commit.files) {\n          decRef(file);\n        }\n      }\n      commitsToDelete.clear();\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cefe924a3b76c22b7df9a075329750871699af6b","date":1409757963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","sourceNew":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      Throwable firstThrowable = null;\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        try {\n          decRef(commit.files);\n        } catch (Throwable t) {\n          if (firstThrowable == null) {\n            firstThrowable = t;\n          }\n        }\n      }\n      commitsToDelete.clear();\n\n      // NOTE: does nothing if firstThrowable is null\n      IOUtils.reThrow(firstThrowable);\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        for (final String file : commit.files) {\n          decRef(file);\n        }\n      }\n      commitsToDelete.clear();\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","bugFix":["ef82ff03e4016c705811b2658e81471a645c0e49"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7599427f762eb1b4265584fd6e96521e4a1a4f3c","date":1413100083,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","sourceNew":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      Throwable firstThrowable = null;\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        try {\n          decRef(commit.files);\n        } catch (Throwable t) {\n          if (firstThrowable == null) {\n            firstThrowable = t;\n          }\n        }\n      }\n      commitsToDelete.clear();\n\n      // NOTE: does nothing if firstThrowable is null\n      IOUtils.reThrowUnchecked(firstThrowable);\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      Throwable firstThrowable = null;\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        try {\n          decRef(commit.files);\n        } catch (Throwable t) {\n          if (firstThrowable == null) {\n            firstThrowable = t;\n          }\n        }\n      }\n      commitsToDelete.clear();\n\n      // NOTE: does nothing if firstThrowable is null\n      IOUtils.reThrow(firstThrowable);\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","sourceNew":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      Throwable firstThrowable = null;\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        try {\n          decRef(commit.files);\n        } catch (Throwable t) {\n          if (firstThrowable == null) {\n            firstThrowable = t;\n          }\n        }\n      }\n      commitsToDelete.clear();\n\n      // NOTE: does nothing if firstThrowable is null\n      IOUtils.reThrowUnchecked(firstThrowable);\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      Throwable firstThrowable = null;\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        try {\n          decRef(commit.files);\n        } catch (Throwable t) {\n          if (firstThrowable == null) {\n            firstThrowable = t;\n          }\n        }\n      }\n      commitsToDelete.clear();\n\n      // NOTE: does nothing if firstThrowable is null\n      IOUtils.reThrow(firstThrowable);\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","sourceNew":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      Throwable firstThrowable = null;\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        try {\n          decRef(commit.files);\n        } catch (Throwable t) {\n          if (firstThrowable == null) {\n            firstThrowable = t;\n          }\n        }\n      }\n      commitsToDelete.clear();\n\n      if (firstThrowable != null) {\n        throw IOUtils.rethrowAlways(firstThrowable);\n      }\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      Throwable firstThrowable = null;\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        try {\n          decRef(commit.files);\n        } catch (Throwable t) {\n          if (firstThrowable == null) {\n            firstThrowable = t;\n          }\n        }\n      }\n      commitsToDelete.clear();\n\n      // NOTE: does nothing if firstThrowable is null\n      IOUtils.reThrowUnchecked(firstThrowable);\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","sourceNew":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      Throwable firstThrowable = null;\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        try {\n          decRef(commit.files);\n        } catch (Throwable t) {\n          if (firstThrowable == null) {\n            firstThrowable = t;\n          }\n        }\n      }\n      commitsToDelete.clear();\n\n      if (firstThrowable != null) {\n        throw IOUtils.rethrowAlways(firstThrowable);\n      }\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      Throwable firstThrowable = null;\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        try {\n          decRef(commit.files);\n        } catch (Throwable t) {\n          if (firstThrowable == null) {\n            firstThrowable = t;\n          }\n        }\n      }\n      commitsToDelete.clear();\n\n      // NOTE: does nothing if firstThrowable is null\n      IOUtils.reThrowUnchecked(firstThrowable);\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14d66d86a8b184a86bcaebcf6e15fcef486e0876","date":1521539412,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","sourceNew":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      Throwable firstThrowable = null;\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        try {\n          decRef(commit.files);\n        } catch (Throwable t) {\n          firstThrowable = IOUtils.useOrSuppress(firstThrowable, t);\n        }\n      }\n      commitsToDelete.clear();\n\n      if (firstThrowable != null) {\n        throw IOUtils.rethrowAlways(firstThrowable);\n      }\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      Throwable firstThrowable = null;\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        try {\n          decRef(commit.files);\n        } catch (Throwable t) {\n          if (firstThrowable == null) {\n            firstThrowable = t;\n          }\n        }\n      }\n      commitsToDelete.clear();\n\n      if (firstThrowable != null) {\n        throw IOUtils.rethrowAlways(firstThrowable);\n      }\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#deleteCommits().mjava","sourceNew":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      Throwable firstThrowable = null;\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        try {\n          decRef(commit.files);\n        } catch (Throwable t) {\n          firstThrowable = IOUtils.useOrSuppress(firstThrowable, t);\n        }\n      }\n      commitsToDelete.clear();\n\n      if (firstThrowable != null) {\n        throw IOUtils.rethrowAlways(firstThrowable);\n      }\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the CommitPoints in the commitsToDelete List by\n   * DecRef'ing all files from each SegmentInfos.\n   */\n  private void deleteCommits() throws IOException {\n\n    int size = commitsToDelete.size();\n\n    if (size > 0) {\n\n      // First decref all files that had been referred to by\n      // the now-deleted commits:\n      Throwable firstThrowable = null;\n      for(int i=0;i<size;i++) {\n        CommitPoint commit = commitsToDelete.get(i);\n        if (infoStream.isEnabled(\"IFD\")) {\n          infoStream.message(\"IFD\", \"deleteCommits: now decRef commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n        try {\n          decRef(commit.files);\n        } catch (Throwable t) {\n          if (firstThrowable == null) {\n            firstThrowable = t;\n          }\n        }\n      }\n      commitsToDelete.clear();\n\n      if (firstThrowable != null) {\n        throw IOUtils.rethrowAlways(firstThrowable);\n      }\n\n      // Now compact commits to remove deleted ones (preserving the sort):\n      size = commits.size();\n      int readFrom = 0;\n      int writeTo = 0;\n      while(readFrom < size) {\n        CommitPoint commit = commits.get(readFrom);\n        if (!commit.deleted) {\n          if (writeTo != readFrom) {\n            commits.set(writeTo, commits.get(readFrom));\n          }\n          writeTo++;\n        }\n        readFrom++;\n      }\n\n      while(size > writeTo) {\n        commits.remove(size-1);\n        size--;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7599427f762eb1b4265584fd6e96521e4a1a4f3c":["cefe924a3b76c22b7df9a075329750871699af6b"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7599427f762eb1b4265584fd6e96521e4a1a4f3c","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"55980207f1977bd1463465de1659b821347e2fa8":["cefe924a3b76c22b7df9a075329750871699af6b","7599427f762eb1b4265584fd6e96521e4a1a4f3c"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["7599427f762eb1b4265584fd6e96521e4a1a4f3c"],"cefe924a3b76c22b7df9a075329750871699af6b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"]},"commit2Childs":{"7599427f762eb1b4265584fd6e96521e4a1a4f3c":["e9017cf144952056066919f1ebc7897ff9bd71b1","55980207f1977bd1463465de1659b821347e2fa8","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"55980207f1977bd1463465de1659b821347e2fa8":[],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","e9017cf144952056066919f1ebc7897ff9bd71b1","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"cefe924a3b76c22b7df9a075329750871699af6b":["7599427f762eb1b4265584fd6e96521e4a1a4f3c","55980207f1977bd1463465de1659b821347e2fa8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cefe924a3b76c22b7df9a075329750871699af6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}