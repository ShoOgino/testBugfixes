{"path":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","sourceNew":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      Thread.sleep(100L);\n      assertTrue(size >= map.size());\n      size = map.size();\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","sourceOld":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      Thread.sleep(100L);\n      assertTrue(size >= map.size());\n      size = map.size();\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e721522f9692a64e877e34a4467f58dbeba866eb","date":1340444282,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","sourceNew":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    // try null key & check its iterator also return null:\n    map.put(null, \"null\");\n    {\n      Iterator<String> it = map.keyIterator();\n      assertTrue(it.hasNext());\n      assertNull(it.next());\n      assertFalse(it.hasNext());\n      assertFalse(it.hasNext());\n    }\n    // 2 more keys:\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    int c = 0, keysAssigned = 0;\n    for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n      assertTrue(it.hasNext()); // try again, should return same result!\n      final String k = it.next();\n      assertTrue(k == key1 || k == key2 | k == key3);\n      keysAssigned += (k == key1) ? 1 : ((k == key2) ? 2 : 4);\n      c++;\n    }\n    assertEquals(3, c);\n    assertEquals(\"all keys must have been seen\", 1+2+4, keysAssigned);\n    \n    c = 0;\n    for (Iterator<String> it = map.valueIterator(); it.hasNext();) {\n      final String v = it.next();\n      assertTrue(v.startsWith(\"bar\"));\n      c++;\n    }\n    assertEquals(3, c);\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      Thread.sleep(100L);\n      c = 0;\n      for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n        assertNotNull(it.next());\n        c++;\n      }\n      assertTrue(size >= c);\n      assertTrue(c >= map.size());\n      size = map.size();\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    Iterator<String> it = map.keyIterator();\n    assertFalse(it.hasNext());\n    try {\n      it.next();\n      fail(\"Should throw NoSuchElementException\");\n    } catch (NoSuchElementException nse) {\n    }\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","sourceOld":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      Thread.sleep(100L);\n      assertTrue(size >= map.size());\n      size = map.size();\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","sourceNew":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    // try null key & check its iterator also return null:\n    map.put(null, \"null\");\n    {\n      Iterator<String> it = map.keyIterator();\n      assertTrue(it.hasNext());\n      assertNull(it.next());\n      assertFalse(it.hasNext());\n      assertFalse(it.hasNext());\n    }\n    // 2 more keys:\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    int c = 0, keysAssigned = 0;\n    for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n      assertTrue(it.hasNext()); // try again, should return same result!\n      final String k = it.next();\n      assertTrue(k == key1 || k == key2 | k == key3);\n      keysAssigned += (k == key1) ? 1 : ((k == key2) ? 2 : 4);\n      c++;\n    }\n    assertEquals(3, c);\n    assertEquals(\"all keys must have been seen\", 1+2+4, keysAssigned);\n    \n    c = 0;\n    for (Iterator<String> it = map.valueIterator(); it.hasNext();) {\n      final String v = it.next();\n      assertTrue(v.startsWith(\"bar\"));\n      c++;\n    }\n    assertEquals(3, c);\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      Thread.sleep(100L);\n      c = 0;\n      for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n        assertNotNull(it.next());\n        c++;\n      }\n      assertTrue(size >= c);\n      assertTrue(c >= map.size());\n      size = map.size();\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    Iterator<String> it = map.keyIterator();\n    assertFalse(it.hasNext());\n    try {\n      it.next();\n      fail(\"Should throw NoSuchElementException\");\n    } catch (NoSuchElementException nse) {\n    }\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","sourceOld":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      Thread.sleep(100L);\n      assertTrue(size >= map.size());\n      size = map.size();\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24acb08412c25718ab57aac08306395faa2cd933","date":1344784256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","sourceNew":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    // try null key & check its iterator also return null:\n    map.put(null, \"null\");\n    {\n      Iterator<String> it = map.keyIterator();\n      assertTrue(it.hasNext());\n      assertNull(it.next());\n      assertFalse(it.hasNext());\n      assertFalse(it.hasNext());\n    }\n    // 2 more keys:\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    int c = 0, keysAssigned = 0;\n    for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n      assertTrue(it.hasNext()); // try again, should return same result!\n      final String k = it.next();\n      assertTrue(k == key1 || k == key2 | k == key3);\n      keysAssigned += (k == key1) ? 1 : ((k == key2) ? 2 : 4);\n      c++;\n    }\n    assertEquals(3, c);\n    assertEquals(\"all keys must have been seen\", 1+2+4, keysAssigned);\n    \n    c = 0;\n    for (Iterator<String> it = map.valueIterator(); it.hasNext();) {\n      final String v = it.next();\n      assertTrue(v.startsWith(\"bar\"));\n      c++;\n    }\n    assertEquals(3, c);\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      Thread.sleep(100L);\n      c = 0;\n      for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n        assertNotNull(it.next());\n        c++;\n      }\n      final int newSize = map.size();\n      assertTrue(\"previousSize(\"+size+\")>=iteratorSize(\"+c+\")\", size >= c);\n      assertTrue(\"iteratorSize(\"+c+\")>=newSize(\"+newSize+\")\", c >= newSize);\n      size = newSize;\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    Iterator<String> it = map.keyIterator();\n    assertFalse(it.hasNext());\n    try {\n      it.next();\n      fail(\"Should throw NoSuchElementException\");\n    } catch (NoSuchElementException nse) {\n    }\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","sourceOld":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    // try null key & check its iterator also return null:\n    map.put(null, \"null\");\n    {\n      Iterator<String> it = map.keyIterator();\n      assertTrue(it.hasNext());\n      assertNull(it.next());\n      assertFalse(it.hasNext());\n      assertFalse(it.hasNext());\n    }\n    // 2 more keys:\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    int c = 0, keysAssigned = 0;\n    for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n      assertTrue(it.hasNext()); // try again, should return same result!\n      final String k = it.next();\n      assertTrue(k == key1 || k == key2 | k == key3);\n      keysAssigned += (k == key1) ? 1 : ((k == key2) ? 2 : 4);\n      c++;\n    }\n    assertEquals(3, c);\n    assertEquals(\"all keys must have been seen\", 1+2+4, keysAssigned);\n    \n    c = 0;\n    for (Iterator<String> it = map.valueIterator(); it.hasNext();) {\n      final String v = it.next();\n      assertTrue(v.startsWith(\"bar\"));\n      c++;\n    }\n    assertEquals(3, c);\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      Thread.sleep(100L);\n      c = 0;\n      for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n        assertNotNull(it.next());\n        c++;\n      }\n      assertTrue(size >= c);\n      assertTrue(c >= map.size());\n      size = map.size();\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    Iterator<String> it = map.keyIterator();\n    assertFalse(it.hasNext());\n    try {\n      it.next();\n      fail(\"Should throw NoSuchElementException\");\n    } catch (NoSuchElementException nse) {\n    }\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":["a8363efa169b169f300a07252db8fdec6ebfe48f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","sourceNew":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    // try null key & check its iterator also return null:\n    map.put(null, \"null\");\n    {\n      Iterator<String> it = map.keyIterator();\n      assertTrue(it.hasNext());\n      assertNull(it.next());\n      assertFalse(it.hasNext());\n      assertFalse(it.hasNext());\n    }\n    // 2 more keys:\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    int c = 0, keysAssigned = 0;\n    for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n      assertTrue(it.hasNext()); // try again, should return same result!\n      final String k = it.next();\n      assertTrue(k == key1 || k == key2 | k == key3);\n      keysAssigned += (k == key1) ? 1 : ((k == key2) ? 2 : 4);\n      c++;\n    }\n    assertEquals(3, c);\n    assertEquals(\"all keys must have been seen\", 1+2+4, keysAssigned);\n    \n    c = 0;\n    for (Iterator<String> it = map.valueIterator(); it.hasNext();) {\n      final String v = it.next();\n      assertTrue(v.startsWith(\"bar\"));\n      c++;\n    }\n    assertEquals(3, c);\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      Thread.sleep(100L);\n      c = 0;\n      for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n        assertNotNull(it.next());\n        c++;\n      }\n      final int newSize = map.size();\n      assertTrue(\"previousSize(\"+size+\")>=iteratorSize(\"+c+\")\", size >= c);\n      assertTrue(\"iteratorSize(\"+c+\")>=newSize(\"+newSize+\")\", c >= newSize);\n      size = newSize;\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    Iterator<String> it = map.keyIterator();\n    assertFalse(it.hasNext());\n    try {\n      it.next();\n      fail(\"Should throw NoSuchElementException\");\n    } catch (NoSuchElementException nse) {\n    }\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","sourceOld":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    // try null key & check its iterator also return null:\n    map.put(null, \"null\");\n    {\n      Iterator<String> it = map.keyIterator();\n      assertTrue(it.hasNext());\n      assertNull(it.next());\n      assertFalse(it.hasNext());\n      assertFalse(it.hasNext());\n    }\n    // 2 more keys:\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    int c = 0, keysAssigned = 0;\n    for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n      assertTrue(it.hasNext()); // try again, should return same result!\n      final String k = it.next();\n      assertTrue(k == key1 || k == key2 | k == key3);\n      keysAssigned += (k == key1) ? 1 : ((k == key2) ? 2 : 4);\n      c++;\n    }\n    assertEquals(3, c);\n    assertEquals(\"all keys must have been seen\", 1+2+4, keysAssigned);\n    \n    c = 0;\n    for (Iterator<String> it = map.valueIterator(); it.hasNext();) {\n      final String v = it.next();\n      assertTrue(v.startsWith(\"bar\"));\n      c++;\n    }\n    assertEquals(3, c);\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      Thread.sleep(100L);\n      c = 0;\n      for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n        assertNotNull(it.next());\n        c++;\n      }\n      assertTrue(size >= c);\n      assertTrue(c >= map.size());\n      size = map.size();\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    Iterator<String> it = map.keyIterator();\n    assertFalse(it.hasNext());\n    try {\n      it.next();\n      fail(\"Should throw NoSuchElementException\");\n    } catch (NoSuchElementException nse) {\n    }\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","sourceNew":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    // try null key & check its iterator also return null:\n    map.put(null, \"null\");\n    {\n      Iterator<String> it = map.keyIterator();\n      assertTrue(it.hasNext());\n      assertNull(it.next());\n      assertFalse(it.hasNext());\n      assertFalse(it.hasNext());\n    }\n    // 2 more keys:\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    int c = 0, keysAssigned = 0;\n    for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n      assertTrue(it.hasNext()); // try again, should return same result!\n      final String k = it.next();\n      assertTrue(k == key1 || k == key2 | k == key3);\n      keysAssigned += (k == key1) ? 1 : ((k == key2) ? 2 : 4);\n      c++;\n    }\n    assertEquals(3, c);\n    assertEquals(\"all keys must have been seen\", 1+2+4, keysAssigned);\n    \n    c = 0;\n    for (Iterator<String> it = map.valueIterator(); it.hasNext();) {\n      final String v = it.next();\n      assertTrue(v.startsWith(\"bar\"));\n      c++;\n    }\n    assertEquals(3, c);\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      Thread.sleep(100L);\n      c = 0;\n      for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n        assertNotNull(it.next());\n        c++;\n      }\n      final int newSize = map.size();\n      assertTrue(\"previousSize(\"+size+\")>=iteratorSize(\"+c+\")\", size >= c);\n      assertTrue(\"iteratorSize(\"+c+\")>=newSize(\"+newSize+\")\", c >= newSize);\n      size = newSize;\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    Iterator<String> it = map.keyIterator();\n    assertFalse(it.hasNext());\n    try {\n      it.next();\n      fail(\"Should throw NoSuchElementException\");\n    } catch (NoSuchElementException nse) {\n    }\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","sourceOld":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    // try null key & check its iterator also return null:\n    map.put(null, \"null\");\n    {\n      Iterator<String> it = map.keyIterator();\n      assertTrue(it.hasNext());\n      assertNull(it.next());\n      assertFalse(it.hasNext());\n      assertFalse(it.hasNext());\n    }\n    // 2 more keys:\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    int c = 0, keysAssigned = 0;\n    for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n      assertTrue(it.hasNext()); // try again, should return same result!\n      final String k = it.next();\n      assertTrue(k == key1 || k == key2 | k == key3);\n      keysAssigned += (k == key1) ? 1 : ((k == key2) ? 2 : 4);\n      c++;\n    }\n    assertEquals(3, c);\n    assertEquals(\"all keys must have been seen\", 1+2+4, keysAssigned);\n    \n    c = 0;\n    for (Iterator<String> it = map.valueIterator(); it.hasNext();) {\n      final String v = it.next();\n      assertTrue(v.startsWith(\"bar\"));\n      c++;\n    }\n    assertEquals(3, c);\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      Thread.sleep(100L);\n      c = 0;\n      for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n        assertNotNull(it.next());\n        c++;\n      }\n      assertTrue(size >= c);\n      assertTrue(c >= map.size());\n      size = map.size();\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    Iterator<String> it = map.keyIterator();\n    assertFalse(it.hasNext());\n    try {\n      it.next();\n      fail(\"Should throw NoSuchElementException\");\n    } catch (NoSuchElementException nse) {\n    }\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8363efa169b169f300a07252db8fdec6ebfe48f","date":1349387906,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","sourceNew":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    // try null key & check its iterator also return null:\n    map.put(null, \"null\");\n    {\n      Iterator<String> it = map.keyIterator();\n      assertTrue(it.hasNext());\n      assertNull(it.next());\n      assertFalse(it.hasNext());\n      assertFalse(it.hasNext());\n    }\n    // 2 more keys:\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    int c = 0, keysAssigned = 0;\n    for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n      assertTrue(it.hasNext()); // try again, should return same result!\n      final String k = it.next();\n      assertTrue(k == key1 || k == key2 | k == key3);\n      keysAssigned += (k == key1) ? 1 : ((k == key2) ? 2 : 4);\n      c++;\n    }\n    assertEquals(3, c);\n    assertEquals(\"all keys must have been seen\", 1+2+4, keysAssigned);\n    \n    c = 0;\n    for (Iterator<String> it = map.valueIterator(); it.hasNext();) {\n      final String v = it.next();\n      assertTrue(v.startsWith(\"bar\"));\n      c++;\n    }\n    assertEquals(3, c);\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      int newSize = map.size();\n      assertTrue(\"previousSize(\"+size+\")>=newSize(\"+newSize+\")\", size >= newSize);\n      size = newSize;\n      Thread.sleep(100L);\n      c = 0;\n      for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n        assertNotNull(it.next());\n        c++;\n      }\n      newSize = map.size();\n      assertTrue(\"previousSize(\"+size+\")>=iteratorSize(\"+c+\")\", size >= c);\n      assertTrue(\"iteratorSize(\"+c+\")>=newSize(\"+newSize+\")\", c >= newSize);\n      size = newSize;\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    Iterator<String> it = map.keyIterator();\n    assertFalse(it.hasNext());\n    try {\n      it.next();\n      fail(\"Should throw NoSuchElementException\");\n    } catch (NoSuchElementException nse) {\n    }\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","sourceOld":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    // try null key & check its iterator also return null:\n    map.put(null, \"null\");\n    {\n      Iterator<String> it = map.keyIterator();\n      assertTrue(it.hasNext());\n      assertNull(it.next());\n      assertFalse(it.hasNext());\n      assertFalse(it.hasNext());\n    }\n    // 2 more keys:\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    int c = 0, keysAssigned = 0;\n    for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n      assertTrue(it.hasNext()); // try again, should return same result!\n      final String k = it.next();\n      assertTrue(k == key1 || k == key2 | k == key3);\n      keysAssigned += (k == key1) ? 1 : ((k == key2) ? 2 : 4);\n      c++;\n    }\n    assertEquals(3, c);\n    assertEquals(\"all keys must have been seen\", 1+2+4, keysAssigned);\n    \n    c = 0;\n    for (Iterator<String> it = map.valueIterator(); it.hasNext();) {\n      final String v = it.next();\n      assertTrue(v.startsWith(\"bar\"));\n      c++;\n    }\n    assertEquals(3, c);\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      Thread.sleep(100L);\n      c = 0;\n      for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n        assertNotNull(it.next());\n        c++;\n      }\n      final int newSize = map.size();\n      assertTrue(\"previousSize(\"+size+\")>=iteratorSize(\"+c+\")\", size >= c);\n      assertTrue(\"iteratorSize(\"+c+\")>=newSize(\"+newSize+\")\", c >= newSize);\n      size = newSize;\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    Iterator<String> it = map.keyIterator();\n    assertFalse(it.hasNext());\n    try {\n      it.next();\n      fail(\"Should throw NoSuchElementException\");\n    } catch (NoSuchElementException nse) {\n    }\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","bugFix":["24acb08412c25718ab57aac08306395faa2cd933"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"702ef053ffa12d6bc4fecda3ebf4fd0e897177be","date":1365845315,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","sourceNew":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap(random().nextBoolean());\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    // try null key & check its iterator also return null:\n    map.put(null, \"null\");\n    {\n      Iterator<String> it = map.keyIterator();\n      assertTrue(it.hasNext());\n      assertNull(it.next());\n      assertFalse(it.hasNext());\n      assertFalse(it.hasNext());\n    }\n    // 2 more keys:\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    int c = 0, keysAssigned = 0;\n    for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n      assertTrue(it.hasNext()); // try again, should return same result!\n      final String k = it.next();\n      assertTrue(k == key1 || k == key2 | k == key3);\n      keysAssigned += (k == key1) ? 1 : ((k == key2) ? 2 : 4);\n      c++;\n    }\n    assertEquals(3, c);\n    assertEquals(\"all keys must have been seen\", 1+2+4, keysAssigned);\n    \n    c = 0;\n    for (Iterator<String> it = map.valueIterator(); it.hasNext();) {\n      final String v = it.next();\n      assertTrue(v.startsWith(\"bar\"));\n      c++;\n    }\n    assertEquals(3, c);\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      int newSize = map.size();\n      assertTrue(\"previousSize(\"+size+\")>=newSize(\"+newSize+\")\", size >= newSize);\n      size = newSize;\n      Thread.sleep(100L);\n      c = 0;\n      for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n        assertNotNull(it.next());\n        c++;\n      }\n      newSize = map.size();\n      assertTrue(\"previousSize(\"+size+\")>=iteratorSize(\"+c+\")\", size >= c);\n      assertTrue(\"iteratorSize(\"+c+\")>=newSize(\"+newSize+\")\", c >= newSize);\n      size = newSize;\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    Iterator<String> it = map.keyIterator();\n    assertFalse(it.hasNext());\n    try {\n      it.next();\n      fail(\"Should throw NoSuchElementException\");\n    } catch (NoSuchElementException nse) {\n    }\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","sourceOld":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    // try null key & check its iterator also return null:\n    map.put(null, \"null\");\n    {\n      Iterator<String> it = map.keyIterator();\n      assertTrue(it.hasNext());\n      assertNull(it.next());\n      assertFalse(it.hasNext());\n      assertFalse(it.hasNext());\n    }\n    // 2 more keys:\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    int c = 0, keysAssigned = 0;\n    for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n      assertTrue(it.hasNext()); // try again, should return same result!\n      final String k = it.next();\n      assertTrue(k == key1 || k == key2 | k == key3);\n      keysAssigned += (k == key1) ? 1 : ((k == key2) ? 2 : 4);\n      c++;\n    }\n    assertEquals(3, c);\n    assertEquals(\"all keys must have been seen\", 1+2+4, keysAssigned);\n    \n    c = 0;\n    for (Iterator<String> it = map.valueIterator(); it.hasNext();) {\n      final String v = it.next();\n      assertTrue(v.startsWith(\"bar\"));\n      c++;\n    }\n    assertEquals(3, c);\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      int newSize = map.size();\n      assertTrue(\"previousSize(\"+size+\")>=newSize(\"+newSize+\")\", size >= newSize);\n      size = newSize;\n      Thread.sleep(100L);\n      c = 0;\n      for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n        assertNotNull(it.next());\n        c++;\n      }\n      newSize = map.size();\n      assertTrue(\"previousSize(\"+size+\")>=iteratorSize(\"+c+\")\", size >= c);\n      assertTrue(\"iteratorSize(\"+c+\")>=newSize(\"+newSize+\")\", c >= newSize);\n      size = newSize;\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    Iterator<String> it = map.keyIterator();\n    assertFalse(it.hasNext());\n    try {\n      it.next();\n      fail(\"Should throw NoSuchElementException\");\n    } catch (NoSuchElementException nse) {\n    }\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","sourceNew":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap(random().nextBoolean());\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    // try null key & check its iterator also return null:\n    map.put(null, \"null\");\n    {\n      Iterator<String> it = map.keyIterator();\n      assertTrue(it.hasNext());\n      assertNull(it.next());\n      assertFalse(it.hasNext());\n      assertFalse(it.hasNext());\n    }\n    // 2 more keys:\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    int c = 0, keysAssigned = 0;\n    for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n      assertTrue(it.hasNext()); // try again, should return same result!\n      final String k = it.next();\n      assertTrue(k == key1 || k == key2 | k == key3);\n      keysAssigned += (k == key1) ? 1 : ((k == key2) ? 2 : 4);\n      c++;\n    }\n    assertEquals(3, c);\n    assertEquals(\"all keys must have been seen\", 1+2+4, keysAssigned);\n    \n    c = 0;\n    for (Iterator<String> it = map.valueIterator(); it.hasNext();) {\n      final String v = it.next();\n      assertTrue(v.startsWith(\"bar\"));\n      c++;\n    }\n    assertEquals(3, c);\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      int newSize = map.size();\n      assertTrue(\"previousSize(\"+size+\")>=newSize(\"+newSize+\")\", size >= newSize);\n      size = newSize;\n      Thread.sleep(100L);\n      c = 0;\n      for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n        assertNotNull(it.next());\n        c++;\n      }\n      newSize = map.size();\n      assertTrue(\"previousSize(\"+size+\")>=iteratorSize(\"+c+\")\", size >= c);\n      assertTrue(\"iteratorSize(\"+c+\")>=newSize(\"+newSize+\")\", c >= newSize);\n      size = newSize;\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    Iterator<String> it = map.keyIterator();\n    assertFalse(it.hasNext());\n    expectThrows(NoSuchElementException.class, () -> {\n      it.next();\n    });\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","sourceOld":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap(random().nextBoolean());\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    // try null key & check its iterator also return null:\n    map.put(null, \"null\");\n    {\n      Iterator<String> it = map.keyIterator();\n      assertTrue(it.hasNext());\n      assertNull(it.next());\n      assertFalse(it.hasNext());\n      assertFalse(it.hasNext());\n    }\n    // 2 more keys:\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    int c = 0, keysAssigned = 0;\n    for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n      assertTrue(it.hasNext()); // try again, should return same result!\n      final String k = it.next();\n      assertTrue(k == key1 || k == key2 | k == key3);\n      keysAssigned += (k == key1) ? 1 : ((k == key2) ? 2 : 4);\n      c++;\n    }\n    assertEquals(3, c);\n    assertEquals(\"all keys must have been seen\", 1+2+4, keysAssigned);\n    \n    c = 0;\n    for (Iterator<String> it = map.valueIterator(); it.hasNext();) {\n      final String v = it.next();\n      assertTrue(v.startsWith(\"bar\"));\n      c++;\n    }\n    assertEquals(3, c);\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      int newSize = map.size();\n      assertTrue(\"previousSize(\"+size+\")>=newSize(\"+newSize+\")\", size >= newSize);\n      size = newSize;\n      Thread.sleep(100L);\n      c = 0;\n      for (Iterator<String> it = map.keyIterator(); it.hasNext();) {\n        assertNotNull(it.next());\n        c++;\n      }\n      newSize = map.size();\n      assertTrue(\"previousSize(\"+size+\")>=iteratorSize(\"+c+\")\", size >= c);\n      assertTrue(\"iteratorSize(\"+c+\")>=newSize(\"+newSize+\")\", c >= newSize);\n      size = newSize;\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    Iterator<String> it = map.keyIterator();\n    assertFalse(it.hasNext());\n    try {\n      it.next();\n      fail(\"Should throw NoSuchElementException\");\n    } catch (NoSuchElementException nse) {\n    }\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","bugFix":["e721522f9692a64e877e34a4467f58dbeba866eb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"702ef053ffa12d6bc4fecda3ebf4fd0e897177be":["a8363efa169b169f300a07252db8fdec6ebfe48f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","24acb08412c25718ab57aac08306395faa2cd933"],"a8363efa169b169f300a07252db8fdec6ebfe48f":["24acb08412c25718ab57aac08306395faa2cd933"],"24acb08412c25718ab57aac08306395faa2cd933":["e721522f9692a64e877e34a4467f58dbeba866eb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","e721522f9692a64e877e34a4467f58dbeba866eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["702ef053ffa12d6bc4fecda3ebf4fd0e897177be"],"e721522f9692a64e877e34a4467f58dbeba866eb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["e721522f9692a64e877e34a4467f58dbeba866eb","24acb08412c25718ab57aac08306395faa2cd933"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"702ef053ffa12d6bc4fecda3ebf4fd0e897177be":["05fe562aa248790944d43cdd478f512572835ba0"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a8363efa169b169f300a07252db8fdec6ebfe48f":["702ef053ffa12d6bc4fecda3ebf4fd0e897177be"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"24acb08412c25718ab57aac08306395faa2cd933":["c7869f64c874ebf7f317d22c00baf2b6857797a6","a8363efa169b169f300a07252db8fdec6ebfe48f","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","e721522f9692a64e877e34a4467f58dbeba866eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e721522f9692a64e877e34a4467f58dbeba866eb":["24acb08412c25718ab57aac08306395faa2cd933","fe33227f6805edab2036cbb80645cc4e2d1fa424","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}