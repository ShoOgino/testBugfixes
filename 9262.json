{"path":"solr/core/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testKeepOptimizedOnlyCommits().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testKeepOptimizedOnlyCommits().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testKeepOptimizedOnlyCommits().mjava","sourceNew":"  @Test\n  public void testKeepOptimizedOnlyCommits() {\n\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    IndexCommit latest = delPolicy.getLatestCommit();\n    for (Long version : commits.keySet()) {\n      if (commits.get(version) == latest)\n        continue;\n      assertTrue(commits.get(version).isOptimized());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testKeepOptimizedOnlyCommits() {\n\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    IndexCommit latest = delPolicy.getLatestCommit();\n    for (Long version : commits.keySet()) {\n      if (commits.get(version) == latest)\n        continue;\n      assertTrue(commits.get(version).isOptimized());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testKeepOptimizedOnlyCommits().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testKeepOptimizedOnlyCommits().mjava","sourceNew":"  @Test\n  public void testKeepOptimizedOnlyCommits() {\n\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    IndexCommit latest = delPolicy.getLatestCommit();\n    for (Long version : commits.keySet()) {\n      if (commits.get(version) == latest)\n        continue;\n      assertTrue(commits.get(version).isOptimized());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testKeepOptimizedOnlyCommits() {\n\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    IndexCommit latest = delPolicy.getLatestCommit();\n    for (Long version : commits.keySet()) {\n      if (commits.get(version) == latest)\n        continue;\n      assertTrue(commits.get(version).isOptimized());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testKeepOptimizedOnlyCommits().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testKeepOptimizedOnlyCommits().mjava","sourceNew":"  @Test\n  public void testKeepOptimizedOnlyCommits() {\n\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    IndexCommit latest = delPolicy.getLatestCommit();\n    for (Long version : commits.keySet()) {\n      if (commits.get(version) == latest)\n        continue;\n      assertTrue(commits.get(version).isOptimized());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testKeepOptimizedOnlyCommits() {\n\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    IndexCommit latest = delPolicy.getLatestCommit();\n    for (Long version : commits.keySet()) {\n      if (commits.get(version) == latest)\n        continue;\n      assertTrue(commits.get(version).isOptimized());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testKeepOptimizedOnlyCommits().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testKeepOptimizedOnlyCommits().mjava","sourceNew":"  @Test\n  public void testKeepOptimizedOnlyCommits() {\n\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    IndexCommit latest = delPolicy.getLatestCommit();\n    for (Long version : commits.keySet()) {\n      if (commits.get(version) == latest)\n        continue;\n      assertEquals(1, commits.get(version).getSegmentCount());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testKeepOptimizedOnlyCommits() {\n\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    IndexCommit latest = delPolicy.getLatestCommit();\n    for (Long version : commits.keySet()) {\n      if (commits.get(version) == latest)\n        continue;\n      assertTrue(commits.get(version).isOptimized());\n    }\n  }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testKeepOptimizedOnlyCommits().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testKeepOptimizedOnlyCommits().mjava","sourceNew":"  @Test\n  public void testKeepOptimizedOnlyCommits() {\n\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    IndexCommit latest = delPolicy.getLatestCommit();\n    for (Long gen : commits.keySet()) {\n      if (commits.get(gen) == latest)\n        continue;\n      assertEquals(1, commits.get(gen).getSegmentCount());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testKeepOptimizedOnlyCommits() {\n\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    IndexCommit latest = delPolicy.getLatestCommit();\n    for (Long version : commits.keySet()) {\n      if (commits.get(version) == latest)\n        continue;\n      assertEquals(1, commits.get(version).getSegmentCount());\n    }\n  }\n\n","bugFix":["97fc5a00245e9b31c118c53df88b1376237ea87b","d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testKeepOptimizedOnlyCommits().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testKeepOptimizedOnlyCommits().mjava","sourceNew":"  @Test\n  public void testKeepOptimizedOnlyCommits() {\n\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    IndexCommit latest = delPolicy.getLatestCommit();\n    for (Long gen : commits.keySet()) {\n      if (commits.get(gen) == latest)\n        continue;\n      assertEquals(1, commits.get(gen).getSegmentCount());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testKeepOptimizedOnlyCommits() {\n\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    IndexCommit latest = delPolicy.getLatestCommit();\n    for (Long version : commits.keySet()) {\n      if (commits.get(version) == latest)\n        continue;\n      assertEquals(1, commits.get(version).getSegmentCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testKeepOptimizedOnlyCommits().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testKeepOptimizedOnlyCommits().mjava","sourceNew":"  @Test\n  public void testKeepOptimizedOnlyCommits() {\n\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    IndexCommit latest = delPolicy.getLatestCommit();\n    for (Long gen : commits.keySet()) {\n      if (commits.get(gen) == latest)\n        continue;\n      assertEquals(1, commits.get(gen).getSegmentCount());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testKeepOptimizedOnlyCommits() {\n\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    IndexCommit latest = delPolicy.getLatestCommit();\n    for (Long version : commits.keySet()) {\n      if (commits.get(version) == latest)\n        continue;\n      assertEquals(1, commits.get(version).getSegmentCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"]},"commit2Childs":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"c26f00b574427b55127e869b935845554afde1fa":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}