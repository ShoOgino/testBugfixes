{"path":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#knnSearch(String).mjava","commits":[{"id":"c3b2d9bc464ed9ae5113f93c943d3954ee6078e0","date":1415781602,"type":1,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#knnSearch(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#knnSearcher(String).mjava","sourceNew":"  private TopDocs knnSearch(String text) throws IOException {\n    if (mlt == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    BooleanQuery mltQuery = new BooleanQuery();\n    for (String textFieldName : textFieldNames) {\n      mltQuery.add(new BooleanClause(mlt.like(textFieldName, new StringReader(text)), BooleanClause.Occur.SHOULD));\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    return indexSearcher.search(mltQuery, k);\n  }\n\n","sourceOld":"  private TopDocs knnSearcher(String text) throws IOException{\n    if (mlt == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    BooleanQuery mltQuery = new BooleanQuery();\n    for (String textFieldName : textFieldNames) {\n      mltQuery.add(new BooleanClause(mlt.like(textFieldName, new StringReader(text)), BooleanClause.Occur.SHOULD));\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    return indexSearcher.search(mltQuery, k);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b1d9c529eb221063d2cb164d05be5f922980ac7","date":1430403225,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#knnSearch(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#knnSearch(String).mjava","sourceNew":"  private TopDocs knnSearch(String text) throws IOException {\n    BooleanQuery mltQuery = new BooleanQuery();\n    for (String textFieldName : textFieldNames) {\n      mltQuery.add(new BooleanClause(mlt.like(textFieldName, new StringReader(text)), BooleanClause.Occur.SHOULD));\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    return indexSearcher.search(mltQuery, k);\n  }\n\n","sourceOld":"  private TopDocs knnSearch(String text) throws IOException {\n    if (mlt == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    BooleanQuery mltQuery = new BooleanQuery();\n    for (String textFieldName : textFieldNames) {\n      mltQuery.add(new BooleanClause(mlt.like(textFieldName, new StringReader(text)), BooleanClause.Occur.SHOULD));\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    return indexSearcher.search(mltQuery, k);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#knnSearch(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#knnSearch(String).mjava","sourceNew":"  private TopDocs knnSearch(String text) throws IOException {\n    BooleanQuery.Builder mltQuery = new BooleanQuery.Builder();\n    for (String textFieldName : textFieldNames) {\n      mltQuery.add(new BooleanClause(mlt.like(textFieldName, new StringReader(text)), BooleanClause.Occur.SHOULD));\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    return indexSearcher.search(mltQuery.build(), k);\n  }\n\n","sourceOld":"  private TopDocs knnSearch(String text) throws IOException {\n    BooleanQuery mltQuery = new BooleanQuery();\n    for (String textFieldName : textFieldNames) {\n      mltQuery.add(new BooleanClause(mlt.like(textFieldName, new StringReader(text)), BooleanClause.Occur.SHOULD));\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    return indexSearcher.search(mltQuery, k);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9dcf48d9030d73fb294fb586dc4c0bb879b80c8","date":1438605505,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#knnSearch(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#knnSearch(String).mjava","sourceNew":"  private TopDocs knnSearch(String text) throws IOException {\n    BooleanQuery.Builder mltQuery = new BooleanQuery.Builder();\n    for (String fieldName : textFieldNames) {\n      String boost = null;\n      mlt.setBoost(true); //terms boost actually helps in MLT queries\n      if (fieldName.contains(\"^\")) {\n        String[] field2boost = fieldName.split(\"\\\\^\");\n        fieldName = field2boost[0];\n        boost = field2boost[1];\n      }\n      if (boost != null) {\n        mlt.setBoostFactor(Float.parseFloat(boost));//if we have a field boost, we add it\n      }\n      mltQuery.add(new BooleanClause(mlt.like(fieldName, new StringReader(text)), BooleanClause.Occur.SHOULD));\n      mlt.setBoostFactor(1);// restore neutral boost for next field\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    return indexSearcher.search(mltQuery.build(), k);\n  }\n\n","sourceOld":"  private TopDocs knnSearch(String text) throws IOException {\n    BooleanQuery.Builder mltQuery = new BooleanQuery.Builder();\n    for (String textFieldName : textFieldNames) {\n      mltQuery.add(new BooleanClause(mlt.like(textFieldName, new StringReader(text)), BooleanClause.Occur.SHOULD));\n    }\n    Query classFieldQuery = new WildcardQuery(new Term(classFieldName, \"*\"));\n    mltQuery.add(new BooleanClause(classFieldQuery, BooleanClause.Occur.MUST));\n    if (query != null) {\n      mltQuery.add(query, BooleanClause.Occur.MUST);\n    }\n    return indexSearcher.search(mltQuery.build(), k);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["1b1d9c529eb221063d2cb164d05be5f922980ac7"],"d9dcf48d9030d73fb294fb586dc4c0bb879b80c8":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1b1d9c529eb221063d2cb164d05be5f922980ac7":["c3b2d9bc464ed9ae5113f93c943d3954ee6078e0"],"c3b2d9bc464ed9ae5113f93c943d3954ee6078e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9dcf48d9030d73fb294fb586dc4c0bb879b80c8"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["d9dcf48d9030d73fb294fb586dc4c0bb879b80c8"],"d9dcf48d9030d73fb294fb586dc4c0bb879b80c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3b2d9bc464ed9ae5113f93c943d3954ee6078e0"],"1b1d9c529eb221063d2cb164d05be5f922980ac7":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"c3b2d9bc464ed9ae5113f93c943d3954ee6078e0":["1b1d9c529eb221063d2cb164d05be5f922980ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}