{"path":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n\n    IndexReader r = new FilterIndexReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public IndexReader[] getSequentialSubReaders() {\n        return null;\n      }\n    };\n    return r;\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n\n    IndexReader r = new FilterIndexReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public IndexReader[] getSequentialSubReaders() {\n        return null;\n      }\n    };\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n\n    IndexReader r = new FilterIndexReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public IndexReader[] getSequentialSubReaders() {\n        return null;\n      }\n    };\n    return r;\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n\n    IndexReader r = new FilterIndexReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public IndexReader[] getSequentialSubReaders() {\n        return null;\n      }\n    };\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n\n    IndexReader r = new FilterIndexReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public IndexReader[] getSequentialSubReaders() {\n        return null;\n      }\n    };\n    return r;\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n\n    IndexReader r = new FilterIndexReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public IndexReader[] getSequentialSubReaders() {\n        return null;\n      }\n    };\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","date":1323543613,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n    // TODO FIXME: THIS IS HEAVY BROKEN AND ILLEGAL TO DO (null delegate):\n    IndexReader r = new FilterIndexReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public IndexReader[] getSequentialSubReaders() {\n        return null;\n      }\n    };\n    return r;\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n\n    IndexReader r = new FilterIndexReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public IndexReader[] getSequentialSubReaders() {\n        return null;\n      }\n    };\n    return r;\n  }\n\n","bugFix":null,"bugIntro":["a2a81b3988dfbdfb187c425043b89868e359b238"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n    // TODO FIXME: THIS IS HEAVY BROKEN AND ILLEGAL TO DO (null delegate):\n    IndexReader r = new FilterIndexReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public IndexReader[] getSequentialSubReaders() {\n        return null;\n      }\n    };\n    return r;\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n\n    IndexReader r = new FilterIndexReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public IndexReader[] getSequentialSubReaders() {\n        return null;\n      }\n    };\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n    // TODO FIXME: THIS IS HEAVY BROKEN AND ILLEGAL TO DO (null delegate):\n    IndexReader r = new FilterIndexReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public IndexReader[] getSequentialSubReaders() {\n        return null;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos();\n      }\n    };\n    return r;\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n    // TODO FIXME: THIS IS HEAVY BROKEN AND ILLEGAL TO DO (null delegate):\n    IndexReader r = new FilterIndexReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public IndexReader[] getSequentialSubReaders() {\n        return null;\n      }\n    };\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n    // TODO FIXME: THIS IS HEAVY BROKEN AND ILLEGAL TO DO (null delegate):\n    IndexReader r = new FilterIndexReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos();\n      }\n    };\n    return r;\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n    // TODO FIXME: THIS IS HEAVY BROKEN AND ILLEGAL TO DO (null delegate):\n    IndexReader r = new FilterIndexReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public IndexReader[] getSequentialSubReaders() {\n        return null;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos();\n      }\n    };\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n    // TODO FIXME: THIS IS HEAVY BROKEN AND ILLEGAL TO DO (null delegate):\n    IndexReader r = new FilterIndexReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos();\n      }\n    };\n    return r;\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n    // TODO FIXME: THIS IS HEAVY BROKEN AND ILLEGAL TO DO (null delegate):\n    IndexReader r = new FilterIndexReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public IndexReader[] getSequentialSubReaders() {\n        return null;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos();\n      }\n    };\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"635548f88824977119a14d0594bf158e75cb2b48","date":1328965599,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n    // TODO FIXME: THIS IS HEAVY BROKEN AND ILLEGAL TO DO (null delegate):\n    IndexReader r = new FilterAtomicReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos();\n      }\n    };\n    return r;\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n    // TODO FIXME: THIS IS HEAVY BROKEN AND ILLEGAL TO DO (null delegate):\n    IndexReader r = new FilterIndexReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos();\n      }\n    };\n    return r;\n  }\n\n","bugFix":null,"bugIntro":["a2a81b3988dfbdfb187c425043b89868e359b238"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2a81b3988dfbdfb187c425043b89868e359b238","date":1329919075,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos();\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n    // TODO FIXME: THIS IS HEAVY BROKEN AND ILLEGAL TO DO (null delegate):\n    IndexReader r = new FilterAtomicReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos();\n      }\n    };\n    return r;\n  }\n\n","bugFix":["1919b234a992d6438a59ccbb02bd0656162e602e","6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","635548f88824977119a14d0594bf158e75cb2b48"],"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos();\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public IndexReader dummyIndexReader(final int maxDoc) {\n    // TODO FIXME: THIS IS HEAVY BROKEN AND ILLEGAL TO DO (null delegate):\n    IndexReader r = new FilterAtomicReader(null) {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos();\n      }\n    };\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos();\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public InvertedFields fields() {\n        return null;\n      }\n\n      @Override\n      public InvertedFields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos();\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos();\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos();\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public InvertedFields fields() {\n        return null;\n      }\n\n      @Override\n      public InvertedFields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","date":1337136355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        // nocommit\n        return new ReadOnlyFieldInfos(new FieldInfo[0], false, false, false);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos();\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new ReadOnlyFieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        // nocommit\n        return new ReadOnlyFieldInfos(new FieldInfo[0], false, false, false);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a851824c09818632c94eba41e60ef5e72e323c8e","date":1337355760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new ReadOnlyFieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["7bc10aeb596994a4cbfa5801932a4dac9fdd2afc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos();\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34a3cb4eb36d5e20abde21f4d8fe5442588e7e03","date":1353235561,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field, boolean direct) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field, boolean direct) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field, boolean direct) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field, boolean direct) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field, boolean direct) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field, boolean direct) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d5a8eb5743033703f3df85b94725cd341066640d","date":1354571095,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues simpleNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues simpleNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues simpleNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues simpleNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public DocValues normValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DocValues docValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":["a2a81b3988dfbdfb187c425043b89868e359b238"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe43a17fb193c95257604ee5486e9f6e2a392c28","date":1365104925,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean hasDeletions() {\n        return false;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":["1919b234a992d6438a59ccbb02bd0656162e602e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7704e64a78bc9f245268f5c002d1e66b6c9f309f","date":1400878491,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public AtomicReader dummyIndexReader(final int maxDoc) {\n    return new AtomicReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","sourceOld":"   /**** needs code insertion into HashDocSet\n   public void testExistsCollisions() {\n    loadfactor=.75f;\n    rand=new Random(12345);  // make deterministic\n    int maxSetsize=4000;\n    int nSets=512;\n    int[] maxDocs=new int[] {100000,500000,1000000,5000000,10000000};\n    int ret=0;\n\n    for (int maxDoc : maxDocs) {\n      int mask = (BitUtil.nextHighestPowerOfTwo(maxDoc)>>1)-1;\n      DocSet[] sets = getRandomHashSets(nSets,maxSetsize, maxDoc);\n      int cstart = HashDocSet.collisions;      \n      for (DocSet s1 : sets) {\n        for (int j=0; j<maxDocs[0]; j++) {\n          int idx = rand.nextInt()&mask;\n          ret += s1.exists(idx) ? 1 :0;\n        }\n      }\n      int cend = HashDocSet.collisions;\n      System.out.println(\"maxDoc=\"+maxDoc+\"\\tcollisions=\"+(cend-cstart));\n    }\n    if (ret==-1)System.out.println(\"wow!\");\n    System.out.println(\"collisions=\"+HashDocSet.collisions);\n  }\n  ***/\n\n  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","bugFix":["1919b234a992d6438a59ccbb02bd0656162e602e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DimensionalValues getDimensionalValues() {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","sourceOld":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues() {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","sourceOld":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public DimensionalValues getDimensionalValues() {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c23672acbb5104509c1c2d6e3dda7a08eaf091f","date":1463128188,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues() {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public Sort getIndexSort() {\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues() {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues() {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public Sort getIndexSort() {\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues() {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues() {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public Sort getIndexSort() {\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues() {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues() {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public Sort getIndexSort() {\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues() {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues() {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public Sort getIndexSort() {\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues() {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public Sort getIndexSort() {\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues() {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public Sort getIndexSort() {\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues() {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public Sort getIndexSort() {\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public Sort getIndexSort() {\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues() {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public Sort getIndexSort() {\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public Sort getIndexSort() {\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public Bits getDocsWithField(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues() {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public Sort getIndexSort() {\n        return null;\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return null;\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public void addCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void removeCoreClosedListener(CoreClosedListener listener) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public Sort getIndexSort() {\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public LeafMetaData getMetaData() {\n        return new LeafMetaData(Version.LATEST.major, Version.LATEST, null);\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return null;\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public Sort getIndexSort() {\n        return null;\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return null;\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public LeafMetaData getMetaData() {\n        return new LeafMetaData(Version.LATEST.major, Version.LATEST, null);\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return null;\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public Sort getIndexSort() {\n        return null;\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return null;\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b6f36bb733c575dd04fdfa785127ebf82b0033f","date":1497502741,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Terms terms(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public LeafMetaData getMetaData() {\n        return new LeafMetaData(Version.LATEST.major, Version.LATEST, null);\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return null;\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public LeafMetaData getMetaData() {\n        return new LeafMetaData(Version.LATEST.major, Version.LATEST, null);\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return null;\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Terms terms(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public LeafMetaData getMetaData() {\n        return new LeafMetaData(Version.LATEST.major, Version.LATEST, null);\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return null;\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public LeafMetaData getMetaData() {\n        return new LeafMetaData(Version.LATEST.major, Version.LATEST, null);\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return null;\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Terms terms(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public LeafMetaData getMetaData() {\n        return new LeafMetaData(Version.LATEST.major, Version.LATEST, null);\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return null;\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Fields fields() {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public LeafMetaData getMetaData() {\n        return new LeafMetaData(Version.LATEST.major, Version.LATEST, null);\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return null;\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return null;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7bc10aeb596994a4cbfa5801932a4dac9fdd2afc","date":1541533532,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#dummyIndexReader(int).mjava","sourceNew":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return FieldInfos.EMPTY;\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Terms terms(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public LeafMetaData getMetaData() {\n        return new LeafMetaData(Version.LATEST.major, Version.LATEST, null);\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return null;\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return null;\n      }\n    };\n  }\n\n","sourceOld":"  public LeafReader dummyIndexReader(final int maxDoc) {\n    return new LeafReader() {\n      @Override\n      public int maxDoc() {\n        return maxDoc;\n      }\n\n      @Override\n      public int numDocs() {\n        return maxDoc;\n      }\n\n      @Override\n      public FieldInfos getFieldInfos() {\n        return new FieldInfos(new FieldInfo[0]);\n      }\n\n      @Override\n      public Bits getLiveDocs() {\n        return null;\n      }\n\n      @Override\n      public Terms terms(String field) throws IOException {\n        return null;\n      }\n\n      @Override\n      public Fields getTermVectors(int doc) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNumericDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public BinaryDocValues getBinaryDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public SortedDocValues getSortedDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedNumericDocValues getSortedNumericDocValues(String field) {\n        return null;\n      }\n      \n      @Override\n      public SortedSetDocValues getSortedSetDocValues(String field) {\n        return null;\n      }\n\n      @Override\n      public NumericDocValues getNormValues(String field) {\n        return null;\n      }\n\n      @Override\n      public PointValues getPointValues(String field) {\n        return null;\n      }\n\n      @Override\n      protected void doClose() {\n      }\n\n      @Override\n      public void document(int doc, StoredFieldVisitor visitor) {\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {\n      }\n\n      @Override\n      public LeafMetaData getMetaData() {\n        return new LeafMetaData(Version.LATEST.major, Version.LATEST, null);\n      }\n\n      @Override\n      public CacheHelper getCoreCacheHelper() {\n        return null;\n      }\n\n      @Override\n      public CacheHelper getReaderCacheHelper() {\n        return null;\n      }\n    };\n  }\n\n","bugFix":["a851824c09818632c94eba41e60ef5e72e323c8e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1f3b037cd083286b2af89f96e768f85dcd8072d6":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["635548f88824977119a14d0594bf158e75cb2b48","a2a81b3988dfbdfb187c425043b89868e359b238"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","f366ce28775e2b8ea4e06355009471328711666d"],"a2a81b3988dfbdfb187c425043b89868e359b238":["635548f88824977119a14d0594bf158e75cb2b48"],"fe43a17fb193c95257604ee5486e9f6e2a392c28":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["c26f00b574427b55127e869b935845554afde1fa"],"d211216c83f01894810543d1c107160a9ae3650b":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"f366ce28775e2b8ea4e06355009471328711666d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d5a8eb5743033703f3df85b94725cd341066640d":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["fe43a17fb193c95257604ee5486e9f6e2a392c28"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["34a3cb4eb36d5e20abde21f4d8fe5442588e7e03"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["7704e64a78bc9f245268f5c002d1e66b6c9f309f","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","2b6f36bb733c575dd04fdfa785127ebf82b0033f"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["7704e64a78bc9f245268f5c002d1e66b6c9f309f"],"7704e64a78bc9f245268f5c002d1e66b6c9f309f":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["c26f00b574427b55127e869b935845554afde1fa","6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"2b6f36bb733c575dd04fdfa785127ebf82b0033f":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"a851824c09818632c94eba41e60ef5e72e323c8e":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"0ad30c6a479e764150a3316e57263319775f1df2":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","3d33e731a93d4b57e662ff094f64f94a745422d4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["d211216c83f01894810543d1c107160a9ae3650b"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","0ad30c6a479e764150a3316e57263319775f1df2"],"7bc10aeb596994a4cbfa5801932a4dac9fdd2afc":["28288370235ed02234a64753cdbf0c6ec096304a"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["0837ab0472feecb3a54260729d845f839e1cbd72"],"635548f88824977119a14d0594bf158e75cb2b48":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"34a3cb4eb36d5e20abde21f4d8fe5442588e7e03":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d5a8eb5743033703f3df85b94725cd341066640d"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["d211216c83f01894810543d1c107160a9ae3650b"],"5eb2511ababf862ea11e10761c70ee560cd84510":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["fe43a17fb193c95257604ee5486e9f6e2a392c28","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["a2a81b3988dfbdfb187c425043b89868e359b238"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["fe43a17fb193c95257604ee5486e9f6e2a392c28","9faa42f41b6adb98daf009cf99a4ee239189e469"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","96d207426bd26fa5c1014e26d21d87603aea68b7"],"28288370235ed02234a64753cdbf0c6ec096304a":["31741cf1390044e38a2ec3127cf302ba841bfd75","2b6f36bb733c575dd04fdfa785127ebf82b0033f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","a851824c09818632c94eba41e60ef5e72e323c8e"],"9c23672acbb5104509c1c2d6e3dda7a08eaf091f":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","9c23672acbb5104509c1c2d6e3dda7a08eaf091f"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7bc10aeb596994a4cbfa5801932a4dac9fdd2afc"]},"commit2Childs":{"1f3b037cd083286b2af89f96e768f85dcd8072d6":["7704e64a78bc9f245268f5c002d1e66b6c9f309f","5eb2511ababf862ea11e10761c70ee560cd84510"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["fe43a17fb193c95257604ee5486e9f6e2a392c28"],"a2a81b3988dfbdfb187c425043b89868e359b238":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"fe43a17fb193c95257604ee5486e9f6e2a392c28":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"d211216c83f01894810543d1c107160a9ae3650b":["31741cf1390044e38a2ec3127cf302ba841bfd75","92212fd254551a0b1156aafc3a1a6ed1a43932ad"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["96d207426bd26fa5c1014e26d21d87603aea68b7","5cab9a86bd67202d20b6adc463008c8e982b070a"],"f366ce28775e2b8ea4e06355009471328711666d":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"d5a8eb5743033703f3df85b94725cd341066640d":["0837ab0472feecb3a54260729d845f839e1cbd72"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["0ad30c6a479e764150a3316e57263319775f1df2","d470c8182e92b264680e34081b75e70a9f2b3c89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9c23672acbb5104509c1c2d6e3dda7a08eaf091f","3d33e731a93d4b57e662ff094f64f94a745422d4"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["d5a8eb5743033703f3df85b94725cd341066640d"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ddbb72a33557d2b5bc22ee95daf3281c43560502","f366ce28775e2b8ea4e06355009471328711666d"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"7704e64a78bc9f245268f5c002d1e66b6c9f309f":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c26f00b574427b55127e869b935845554afde1fa":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"2b6f36bb733c575dd04fdfa785127ebf82b0033f":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","28288370235ed02234a64753cdbf0c6ec096304a"],"a851824c09818632c94eba41e60ef5e72e323c8e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["2b6f36bb733c575dd04fdfa785127ebf82b0033f","28288370235ed02234a64753cdbf0c6ec096304a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["a851824c09818632c94eba41e60ef5e72e323c8e"],"7bc10aeb596994a4cbfa5801932a4dac9fdd2afc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"635548f88824977119a14d0594bf158e75cb2b48":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a2a81b3988dfbdfb187c425043b89868e359b238"],"34a3cb4eb36d5e20abde21f4d8fe5442588e7e03":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"0837ab0472feecb3a54260729d845f839e1cbd72":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["d211216c83f01894810543d1c107160a9ae3650b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["1f3b037cd083286b2af89f96e768f85dcd8072d6","5eb2511ababf862ea11e10761c70ee560cd84510","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"28288370235ed02234a64753cdbf0c6ec096304a":["7bc10aeb596994a4cbfa5801932a4dac9fdd2afc"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["635548f88824977119a14d0594bf158e75cb2b48"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["d4d69c535930b5cce125cff868d40f6373dc27d4","34a3cb4eb36d5e20abde21f4d8fe5442588e7e03"],"9c23672acbb5104509c1c2d6e3dda7a08eaf091f":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c6f080a2ab37c464dd98db173f6cbf10dc74f211","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","5eb2511ababf862ea11e10761c70ee560cd84510","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}