{"path":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter#writeTerm(int,BytesRef).mjava","commits":[{"id":"e92a321a2612261e1010a4038c8586e30b081552","date":1328456689,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter#writeTerm(int,BytesRef).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/TermInfosWriter#writeTerm(int,BytesRef).mjava","sourceNew":"  private void writeTerm(int fieldNumber, BytesRef term)\n       throws IOException {\n\n    //System.out.println(\"  tiw.write field=\" + fieldNumber + \" term=\" + term.utf8ToString());\n\n    // TODO: UTF16toUTF8 could tell us this prefix\n    // Compute prefix in common with last term:\n    int start = 0;\n    final int limit = term.length < lastTerm.length ? term.length : lastTerm.length;\n    while(start < limit) {\n      if (term.bytes[start+term.offset] != lastTerm.bytes[start+lastTerm.offset])\n        break;\n      start++;\n    }\n\n    final int length = term.length - start;\n    output.writeVInt(start);                     // write shared prefix length\n    output.writeVInt(length);                  // write delta length\n    output.writeBytes(term.bytes, start+term.offset, length);  // write delta bytes\n    output.writeVInt(fieldNumber); // write field num\n    lastTerm.copyBytes(term);\n  }\n\n","sourceOld":"  private void writeTerm(int fieldNumber, BytesRef term)\n       throws IOException {\n\n    //System.out.println(\"  tiw.write field=\" + fieldNumber + \" term=\" + term.utf8ToString());\n\n    // TODO: UTF16toUTF8 could tell us this prefix\n    // Compute prefix in common with last term:\n    int start = 0;\n    final int limit = term.length < lastTerm.length ? term.length : lastTerm.length;\n    while(start < limit) {\n      if (term.bytes[start+term.offset] != lastTerm.bytes[start+lastTerm.offset])\n        break;\n      start++;\n    }\n\n    final int length = term.length - start;\n    output.writeVInt(start);                     // write shared prefix length\n    output.writeVInt(length);                  // write delta length\n    output.writeBytes(term.bytes, start+term.offset, length);  // write delta bytes\n    output.writeVInt(fieldNumber); // write field num\n    lastTerm.copyBytes(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter#writeTerm(int,BytesRef).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/TermInfosWriter#writeTerm(int,BytesRef).mjava","sourceNew":"  private void writeTerm(int fieldNumber, BytesRef term)\n       throws IOException {\n\n    //System.out.println(\"  tiw.write field=\" + fieldNumber + \" term=\" + term.utf8ToString());\n\n    // TODO: UTF16toUTF8 could tell us this prefix\n    // Compute prefix in common with last term:\n    int start = 0;\n    final int limit = term.length < lastTerm.length ? term.length : lastTerm.length;\n    while(start < limit) {\n      if (term.bytes[start+term.offset] != lastTerm.bytes[start+lastTerm.offset])\n        break;\n      start++;\n    }\n\n    final int length = term.length - start;\n    output.writeVInt(start);                     // write shared prefix length\n    output.writeVInt(length);                  // write delta length\n    output.writeBytes(term.bytes, start+term.offset, length);  // write delta bytes\n    output.writeVInt(fieldNumber); // write field num\n    lastTerm.copyBytes(term);\n  }\n\n","sourceOld":"  private void writeTerm(int fieldNumber, BytesRef term)\n       throws IOException {\n\n    //System.out.println(\"  tiw.write field=\" + fieldNumber + \" term=\" + term.utf8ToString());\n\n    // TODO: UTF16toUTF8 could tell us this prefix\n    // Compute prefix in common with last term:\n    int start = 0;\n    final int limit = term.length < lastTerm.length ? term.length : lastTerm.length;\n    while(start < limit) {\n      if (term.bytes[start+term.offset] != lastTerm.bytes[start+lastTerm.offset])\n        break;\n      start++;\n    }\n\n    final int length = term.length - start;\n    output.writeVInt(start);                     // write shared prefix length\n    output.writeVInt(length);                  // write delta length\n    output.writeBytes(term.bytes, start+term.offset, length);  // write delta bytes\n    output.writeVInt(fieldNumber); // write field num\n    lastTerm.copyBytes(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e92a321a2612261e1010a4038c8586e30b081552"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e92a321a2612261e1010a4038c8586e30b081552":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e92a321a2612261e1010a4038c8586e30b081552"],"e92a321a2612261e1010a4038c8586e30b081552":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}