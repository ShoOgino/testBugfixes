{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Increment the round number, for config values that are extracted by round number. \r\n   * @return the new round number.\r\n   */\r\n  public int newRound () {\r\n    roundNumber++;\r\n    \r\n    // log changes in values\r\n    if (valByRound.size()>0) {\r\n      StringBuffer sb = new StringBuffer(\"--> Round \").append(roundNumber-1).append(\"-->\").append(roundNumber).append(\": \");\r\n      for (Iterator iter = valByRound.keySet().iterator(); iter.hasNext();) {\r\n        String name = (String) iter.next();\r\n        Object a = valByRound.get(name);\r\n        if (a instanceof int[]) {\r\n          int ai[] = (int[]) a;\r\n          int n1 = (roundNumber-1)%ai.length;\r\n          int n2 = roundNumber%ai.length;\r\n          sb.append(\"  \").append(name).append(\":\").append(ai[n1]).append(\"-->\").append(ai[n2]);\r\n        } else {\r\n          boolean ab[] = (boolean[]) a;\r\n          int n1 = (roundNumber-1)%ab.length;\r\n          int n2 = roundNumber%ab.length;\r\n          sb.append(\"  \").append(name).append(\":\").append(ab[n1]).append(\"-->\").append(ab[n2]);\r\n        }\r\n      }\r\n      System.out.println();\r\n      System.out.println(sb.toString());\r\n      System.out.println();\r\n    }\r\n    \r\n    return roundNumber;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","sourceNew":"  /**\n   * Increment the round number, for config values that are extracted by round number. \n   * @return the new round number.\n   */\n  public int newRound () {\n    roundNumber++;\n    \n    // log changes in values\n    if (valByRound.size()>0) {\n      StringBuffer sb = new StringBuffer(\"--> Round \").append(roundNumber-1).append(\"-->\").append(roundNumber).append(\": \");\n      for (Iterator iter = valByRound.keySet().iterator(); iter.hasNext();) {\n        String name = (String) iter.next();\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n1 = (roundNumber-1)%ai.length;\n          int n2 = roundNumber%ai.length;\n          sb.append(\"  \").append(name).append(\":\").append(ai[n1]).append(\"-->\").append(ai[n2]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n1 = (roundNumber-1)%ab.length;\n          int n2 = roundNumber%ab.length;\n          sb.append(\"  \").append(name).append(\":\").append(ab[n1]).append(\"-->\").append(ab[n2]);\n        }\n      }\n      System.out.println();\n      System.out.println(sb.toString());\n      System.out.println();\n    }\n    \n    return roundNumber;\n  }\n\n","sourceOld":"  /**\r\n   * Increment the round number, for config values that are extracted by round number. \r\n   * @return the new round number.\r\n   */\r\n  public int newRound () {\r\n    roundNumber++;\r\n    \r\n    // log changes in values\r\n    if (valByRound.size()>0) {\r\n      StringBuffer sb = new StringBuffer(\"--> Round \").append(roundNumber-1).append(\"-->\").append(roundNumber).append(\": \");\r\n      for (Iterator iter = valByRound.keySet().iterator(); iter.hasNext();) {\r\n        String name = (String) iter.next();\r\n        Object a = valByRound.get(name);\r\n        if (a instanceof int[]) {\r\n          int ai[] = (int[]) a;\r\n          int n1 = (roundNumber-1)%ai.length;\r\n          int n2 = roundNumber%ai.length;\r\n          sb.append(\"  \").append(name).append(\":\").append(ai[n1]).append(\"-->\").append(ai[n2]);\r\n        } else {\r\n          boolean ab[] = (boolean[]) a;\r\n          int n1 = (roundNumber-1)%ab.length;\r\n          int n2 = roundNumber%ab.length;\r\n          sb.append(\"  \").append(name).append(\":\").append(ab[n1]).append(\"-->\").append(ab[n2]);\r\n        }\r\n      }\r\n      System.out.println();\r\n      System.out.println(sb.toString());\r\n      System.out.println();\r\n    }\r\n    \r\n    return roundNumber;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b29f7e4255869b50fe9fb21578b4f67a8f108c9","date":1176492603,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","sourceNew":"  /**\n   * Increment the round number, for config values that are extracted by round number. \n   * @return the new round number.\n   */\n  public int newRound () {\n    roundNumber++;\n    \n    StringBuffer sb = new StringBuffer(\"--> Round \").append(roundNumber-1).append(\"-->\").append(roundNumber);\n\n    // log changes in values\n    if (valByRound.size()>0) {\n      sb.append(\": \");\n      for (Iterator iter = valByRound.keySet().iterator(); iter.hasNext();) {\n        String name = (String) iter.next();\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n1 = (roundNumber-1)%ai.length;\n          int n2 = roundNumber%ai.length;\n          sb.append(\"  \").append(name).append(\":\").append(ai[n1]).append(\"-->\").append(ai[n2]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n1 = (roundNumber-1)%ab.length;\n          int n2 = roundNumber%ab.length;\n          sb.append(\"  \").append(name).append(\":\").append(ab[n1]).append(\"-->\").append(ab[n2]);\n        }\n      }\n    }\n\n    System.out.println();\n    System.out.println(sb.toString());\n    System.out.println();\n    \n    return roundNumber;\n  }\n\n","sourceOld":"  /**\n   * Increment the round number, for config values that are extracted by round number. \n   * @return the new round number.\n   */\n  public int newRound () {\n    roundNumber++;\n    \n    // log changes in values\n    if (valByRound.size()>0) {\n      StringBuffer sb = new StringBuffer(\"--> Round \").append(roundNumber-1).append(\"-->\").append(roundNumber).append(\": \");\n      for (Iterator iter = valByRound.keySet().iterator(); iter.hasNext();) {\n        String name = (String) iter.next();\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n1 = (roundNumber-1)%ai.length;\n          int n2 = roundNumber%ai.length;\n          sb.append(\"  \").append(name).append(\":\").append(ai[n1]).append(\"-->\").append(ai[n2]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n1 = (roundNumber-1)%ab.length;\n          int n2 = roundNumber%ab.length;\n          sb.append(\"  \").append(name).append(\":\").append(ab[n1]).append(\"-->\").append(ab[n2]);\n        }\n      }\n      System.out.println();\n      System.out.println(sb.toString());\n      System.out.println();\n    }\n    \n    return roundNumber;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"807ac6d1222d758e557255e78509486936aab12d","date":1192100740,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","sourceNew":"  /**\n   * Increment the round number, for config values that are extracted by round number. \n   * @return the new round number.\n   */\n  public int newRound () {\n    roundNumber++;\n    \n    StringBuffer sb = new StringBuffer(\"--> Round \").append(roundNumber-1).append(\"-->\").append(roundNumber);\n\n    // log changes in values\n    if (valByRound.size()>0) {\n      sb.append(\": \");\n      for (Iterator iter = valByRound.keySet().iterator(); iter.hasNext();) {\n        String name = (String) iter.next();\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n1 = (roundNumber-1)%ai.length;\n          int n2 = roundNumber%ai.length;\n          sb.append(\"  \").append(name).append(\":\").append(ai[n1]).append(\"-->\").append(ai[n2]);\n        } else if (a instanceof double[]){\n          double ad[] = (double[]) a;\n          int n1 = (roundNumber-1)%ad.length;\n          int n2 = roundNumber%ad.length;\n          sb.append(\"  \").append(name).append(\":\").append(ad[n1]).append(\"-->\").append(ad[n2]);\n        }\n        else {\n          boolean ab[] = (boolean[]) a;\n          int n1 = (roundNumber-1)%ab.length;\n          int n2 = roundNumber%ab.length;\n          sb.append(\"  \").append(name).append(\":\").append(ab[n1]).append(\"-->\").append(ab[n2]);\n        }\n      }\n    }\n\n    System.out.println();\n    System.out.println(sb.toString());\n    System.out.println();\n    \n    return roundNumber;\n  }\n\n","sourceOld":"  /**\n   * Increment the round number, for config values that are extracted by round number. \n   * @return the new round number.\n   */\n  public int newRound () {\n    roundNumber++;\n    \n    StringBuffer sb = new StringBuffer(\"--> Round \").append(roundNumber-1).append(\"-->\").append(roundNumber);\n\n    // log changes in values\n    if (valByRound.size()>0) {\n      sb.append(\": \");\n      for (Iterator iter = valByRound.keySet().iterator(); iter.hasNext();) {\n        String name = (String) iter.next();\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n1 = (roundNumber-1)%ai.length;\n          int n2 = roundNumber%ai.length;\n          sb.append(\"  \").append(name).append(\":\").append(ai[n1]).append(\"-->\").append(ai[n2]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n1 = (roundNumber-1)%ab.length;\n          int n2 = roundNumber%ab.length;\n          sb.append(\"  \").append(name).append(\":\").append(ab[n1]).append(\"-->\").append(ab[n2]);\n        }\n      }\n    }\n\n    System.out.println();\n    System.out.println(sb.toString());\n    System.out.println();\n    \n    return roundNumber;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11899016a0460a7ea2e4b008d002e1e75c7d867","date":1256772085,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","sourceNew":"  /**\n   * Increment the round number, for config values that are extracted by round number. \n   * @return the new round number.\n   */\n  public int newRound () {\n    roundNumber++;\n    \n    StringBuffer sb = new StringBuffer(\"--> Round \").append(roundNumber-1).append(\"-->\").append(roundNumber);\n\n    // log changes in values\n    if (valByRound.size()>0) {\n      sb.append(\": \");\n      for (final String name : valByRound.keySet()) {\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n1 = (roundNumber-1)%ai.length;\n          int n2 = roundNumber%ai.length;\n          sb.append(\"  \").append(name).append(\":\").append(ai[n1]).append(\"-->\").append(ai[n2]);\n        } else if (a instanceof double[]){\n          double ad[] = (double[]) a;\n          int n1 = (roundNumber-1)%ad.length;\n          int n2 = roundNumber%ad.length;\n          sb.append(\"  \").append(name).append(\":\").append(ad[n1]).append(\"-->\").append(ad[n2]);\n        }\n        else {\n          boolean ab[] = (boolean[]) a;\n          int n1 = (roundNumber-1)%ab.length;\n          int n2 = roundNumber%ab.length;\n          sb.append(\"  \").append(name).append(\":\").append(ab[n1]).append(\"-->\").append(ab[n2]);\n        }\n      }\n    }\n\n    System.out.println();\n    System.out.println(sb.toString());\n    System.out.println();\n    \n    return roundNumber;\n  }\n\n","sourceOld":"  /**\n   * Increment the round number, for config values that are extracted by round number. \n   * @return the new round number.\n   */\n  public int newRound () {\n    roundNumber++;\n    \n    StringBuffer sb = new StringBuffer(\"--> Round \").append(roundNumber-1).append(\"-->\").append(roundNumber);\n\n    // log changes in values\n    if (valByRound.size()>0) {\n      sb.append(\": \");\n      for (Iterator iter = valByRound.keySet().iterator(); iter.hasNext();) {\n        String name = (String) iter.next();\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n1 = (roundNumber-1)%ai.length;\n          int n2 = roundNumber%ai.length;\n          sb.append(\"  \").append(name).append(\":\").append(ai[n1]).append(\"-->\").append(ai[n2]);\n        } else if (a instanceof double[]){\n          double ad[] = (double[]) a;\n          int n1 = (roundNumber-1)%ad.length;\n          int n2 = roundNumber%ad.length;\n          sb.append(\"  \").append(name).append(\":\").append(ad[n1]).append(\"-->\").append(ad[n2]);\n        }\n        else {\n          boolean ab[] = (boolean[]) a;\n          int n1 = (roundNumber-1)%ab.length;\n          int n2 = roundNumber%ab.length;\n          sb.append(\"  \").append(name).append(\":\").append(ab[n1]).append(\"-->\").append(ab[n2]);\n        }\n      }\n    }\n\n    System.out.println();\n    System.out.println(sb.toString());\n    System.out.println();\n    \n    return roundNumber;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#newRound().mjava","sourceNew":"  /**\n   * Increment the round number, for config values that are extracted by round number. \n   * @return the new round number.\n   */\n  public int newRound () {\n    roundNumber++;\n    \n    StringBuffer sb = new StringBuffer(\"--> Round \").append(roundNumber-1).append(\"-->\").append(roundNumber);\n\n    // log changes in values\n    if (valByRound.size()>0) {\n      sb.append(\": \");\n      for (final String name : valByRound.keySet()) {\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n1 = (roundNumber-1)%ai.length;\n          int n2 = roundNumber%ai.length;\n          sb.append(\"  \").append(name).append(\":\").append(ai[n1]).append(\"-->\").append(ai[n2]);\n        } else if (a instanceof double[]){\n          double ad[] = (double[]) a;\n          int n1 = (roundNumber-1)%ad.length;\n          int n2 = roundNumber%ad.length;\n          sb.append(\"  \").append(name).append(\":\").append(ad[n1]).append(\"-->\").append(ad[n2]);\n        }\n        else {\n          boolean ab[] = (boolean[]) a;\n          int n1 = (roundNumber-1)%ab.length;\n          int n2 = roundNumber%ab.length;\n          sb.append(\"  \").append(name).append(\":\").append(ab[n1]).append(\"-->\").append(ab[n2]);\n        }\n      }\n    }\n\n    System.out.println();\n    System.out.println(sb.toString());\n    System.out.println();\n    \n    return roundNumber;\n  }\n\n","sourceOld":"  /**\n   * Increment the round number, for config values that are extracted by round number. \n   * @return the new round number.\n   */\n  public int newRound () {\n    roundNumber++;\n    \n    StringBuffer sb = new StringBuffer(\"--> Round \").append(roundNumber-1).append(\"-->\").append(roundNumber);\n\n    // log changes in values\n    if (valByRound.size()>0) {\n      sb.append(\": \");\n      for (final String name : valByRound.keySet()) {\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n1 = (roundNumber-1)%ai.length;\n          int n2 = roundNumber%ai.length;\n          sb.append(\"  \").append(name).append(\":\").append(ai[n1]).append(\"-->\").append(ai[n2]);\n        } else if (a instanceof double[]){\n          double ad[] = (double[]) a;\n          int n1 = (roundNumber-1)%ad.length;\n          int n2 = roundNumber%ad.length;\n          sb.append(\"  \").append(name).append(\":\").append(ad[n1]).append(\"-->\").append(ad[n2]);\n        }\n        else {\n          boolean ab[] = (boolean[]) a;\n          int n1 = (roundNumber-1)%ab.length;\n          int n2 = roundNumber%ab.length;\n          sb.append(\"  \").append(name).append(\":\").append(ab[n1]).append(\"-->\").append(ab[n2]);\n        }\n      }\n    }\n\n    System.out.println();\n    System.out.println(sb.toString());\n    System.out.println();\n    \n    return roundNumber;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"807ac6d1222d758e557255e78509486936aab12d":["9b29f7e4255869b50fe9fb21578b4f67a8f108c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b29f7e4255869b50fe9fb21578b4f67a8f108c9":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["807ac6d1222d758e557255e78509486936aab12d"]},"commit2Childs":{"807ac6d1222d758e557255e78509486936aab12d":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"9b29f7e4255869b50fe9fb21578b4f67a8f108c9":["807ac6d1222d758e557255e78509486936aab12d"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["9b29f7e4255869b50fe9fb21578b4f67a8f108c9"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}