{"path":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( field.storeTermVectors() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Fieldable fieldable = (Fieldable)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldable.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( fieldable ) );\n\n      Term t = new Term(fieldable.name(), ftype!=null ? ftype.storedToIndexed(fieldable) : fieldable.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( fieldable ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", fieldable.stringValue() );  // may be a binary number\n\n      byte[] arr = fieldable.getBinaryValue();\n      if (arr != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(arr, 0, arr.length));\n      }\n      f.add( \"boost\", fieldable.getBoost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( fieldable.isTermVectorStored() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, fieldable.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( fieldable.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( field.storeTermVectors() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              tfv.add( text.utf8ToChars(spare).toString(), freq );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          TermFreqVector v = reader.getTermFreqVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            for( int i=0; i<v.size(); i++ ) {\n              tfv.add( v.getTerms()[i].utf8ToChars(spare).toString(), v.getTermFrequencies()[i] );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0","date":1322229341,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              UnicodeUtil.UTF8toUTF16(text, spare);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              tfv.add( text.utf8ToChars(spare).toString(), freq );\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eb037ddbc4ef8b427189b9ca13486ea830d0c766","date":1325813112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  {\n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              UnicodeUtil.UTF8toUTF16(text, spare);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  { \n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n            \n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              UnicodeUtil.UTF8toUTF16(text, spare);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n      \n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c","date":1329188942,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              UnicodeUtil.UTF8toUTF16(text, spare);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader, IndexSchema schema ) throws IOException\n  {\n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              UnicodeUtil.UTF8toUTF16(text, spare);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(StoredDocument,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( StoredDocument doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              UnicodeUtil.UTF8toUTF16(text, spare);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              UnicodeUtil.UTF8toUTF16(text, spare);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(StoredDocument,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( StoredDocument doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              UnicodeUtil.UTF8toUTF16(text, spare);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRef spare = new CharsRef();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<Integer>();\n            final TermsEnum termsEnum = v.iterator(null);\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              UnicodeUtil.UTF8toUTF16(text, spare);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(StoredDocument,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<>();\n            final TermsEnum termsEnum = v.iterator();\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              spare.copyUTF8Bytes(text);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( StoredDocument doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<>();\n            final TermsEnum termsEnum = v.iterator();\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              spare.copyUTF8Bytes(text);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      if (!ftype.isPointField()) {\n        Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n        f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n      }// TODO: Calculate docFreq for point fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<>();\n            final TermsEnum termsEnum = v.iterator();\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              spare.copyUTF8Bytes(text);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<>();\n            final TermsEnum termsEnum = v.iterator();\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              spare.copyUTF8Bytes(text);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      if (!ftype.isPointField()) {\n        Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n        f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n      }// TODO: Calculate docFreq for point fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<>();\n            final TermsEnum termsEnum = v.iterator();\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              spare.copyUTF8Bytes(text);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<>();\n            final TermsEnum termsEnum = v.iterator();\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              spare.copyUTF8Bytes(text);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      if (!ftype.isPointField()) {\n        Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n        f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n      }// TODO: Calculate docFreq for point fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<>();\n            final TermsEnum termsEnum = v.iterator();\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              spare.copyUTF8Bytes(text);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getDocumentFieldsInfo( Document doc, int docId, IndexReader reader,\n                                                                 IndexSchema schema ) throws IOException\n  {\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<>();\n    for( Object o : doc.getFields() ) {\n      Field field = (Field)o;\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<>();\n\n      SchemaField sfield = schema.getFieldOrNull( field.name() );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      f.add( \"flags\", getFieldFlags( field ) );\n\n      f.add( \"value\", (ftype==null)?null:ftype.toExternal( field ) );\n\n      // TODO: this really should be \"stored\"\n      f.add( \"internal\", field.stringValue() );  // may be a binary number\n\n      BytesRef bytes = field.binaryValue();\n      if (bytes != null) {\n        f.add( \"binary\", Base64.byteArrayToBase64(bytes.bytes, bytes.offset, bytes.length));\n      }\n      f.add( \"boost\", field.boost() );\n      if (!ftype.isPointField()) {\n        Term t = new Term(field.name(), ftype!=null ? ftype.storedToIndexed(field) : field.stringValue());\n        f.add( \"docFreq\", t.text()==null ? 0 : reader.docFreq( t ) ); // this can be 0 for non-indexed fields\n      }// TODO: Calculate docFreq for point fields\n\n      // If we have a term vector, return that\n      if( field.fieldType().storeTermVectors() ) {\n        try {\n          Terms v = reader.getTermVector( docId, field.name() );\n          if( v != null ) {\n            SimpleOrderedMap<Integer> tfv = new SimpleOrderedMap<>();\n            final TermsEnum termsEnum = v.iterator();\n            BytesRef text;\n            while((text = termsEnum.next()) != null) {\n              final int freq = (int) termsEnum.totalTermFreq();\n              spare.copyUTF8Bytes(text);\n              tfv.add(spare.toString(), freq);\n            }\n            f.add( \"termVector\", tfv );\n          }\n        }\n        catch( Exception ex ) {\n          log.warn( \"error writing term vector\", ex );\n        }\n      }\n\n      finfo.add( field.name(), f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0":["3cc749c053615f5871f3b95715fe292f34e70a53"],"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"46dc9ac8b3e748407baaef82453138ff3974480c":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3cc749c053615f5871f3b95715fe292f34e70a53":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","46dc9ac8b3e748407baaef82453138ff3974480c"],"1d028314cced5858683a1bb4741423d0f934257b":["b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c26f00b574427b55127e869b935845554afde1fa"],"acd9883560fd89e6448b2b447302fe543040cd4f":["46dc9ac8b3e748407baaef82453138ff3974480c"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"],"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c"],"46dc9ac8b3e748407baaef82453138ff3974480c":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","acd9883560fd89e6448b2b447302fe543040cd4f"],"c26f00b574427b55127e869b935845554afde1fa":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}