{"path":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesTriangle(double,double,double,double,double,double,double,double,double,double,boolean).mjava","commits":[{"id":"908e262be655c65579ec6d94f228d47b663da975","date":1576571938,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesTriangle(double,double,double,double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesTriangle(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":"  /** Returns true if the triangle crosses any edge in this edge subtree */\n  protected boolean crossesTriangle(double minX, double maxX, double minY, double maxY,\n                          double ax, double ay, double bx, double by, double cx, double cy, boolean includeBoundary) {\n      if (minY <= max) {\n        double dy = y1;\n        double ey = y2;\n        double dx = x1;\n        double ex = x2;\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (dy < minY && ey < minY) ||\n            (dy > maxY && ey > maxY) ||\n            (dx < minX && ex < minX) ||\n            (dx > maxX && ex > maxX);\n\n        if (outside == false) {\n          if (includeBoundary == true) {\n            if (lineCrossesLineWithBoundary(dx, dy, ex, ey, ax, ay, bx, by) ||\n                lineCrossesLineWithBoundary(dx, dy, ex, ey, bx, by, cx, cy) ||\n                lineCrossesLineWithBoundary(dx, dy, ex, ey, cx, cy, ax, ay)) {\n              return true;\n            }\n          } else {\n            if (lineCrossesLine(dx, dy, ex, ey, ax, ay, bx, by) ||\n                lineCrossesLine(dx, dy, ex, ey, bx, by, cx, cy) ||\n                lineCrossesLine(dx, dy, ex, ey, cx, cy, ax, ay)) {\n              return true;\n            }\n          }\n        }\n\n\n        if (left != null && left.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, includeBoundary)) {\n          return true;\n        }\n\n        if (right != null && maxY >= low && right.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, includeBoundary)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n","sourceOld":"  /** Returns true if the triangle crosses any edge in this edge subtree */\n  protected boolean crossesTriangle(double minX, double maxX, double minY, double maxY,\n                          double ax, double ay, double bx, double by, double cx, double cy) {\n      if (minY <= max) {\n        double dy = y1;\n        double ey = y2;\n        double dx = x1;\n        double ex = x2;\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (dy < minY && ey < minY) ||\n            (dy > maxY && ey > maxY) ||\n            (dx < minX && ex < minX) ||\n            (dx > maxX && ex > maxX);\n\n        if (outside == false) {\n          if (lineCrossesLine(dx, dy, ex, ey, ax, ay, bx, by) ||\n              lineCrossesLine(dx, dy, ex, ey, bx, by, cx, cy) ||\n              lineCrossesLine(dx, dy, ex, ey, cx, cy, ax, ay)) {\n            return true;\n          }\n        }\n\n        if (left != null && left.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy)) {\n          return true;\n        }\n\n        if (right != null && maxY >= low && right.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesTriangle(double,double,double,double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesTriangle(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":"  /** Returns true if the triangle crosses any edge in this edge subtree */\n  protected boolean crossesTriangle(double minX, double maxX, double minY, double maxY,\n                          double ax, double ay, double bx, double by, double cx, double cy, boolean includeBoundary) {\n      if (minY <= max) {\n        double dy = y1;\n        double ey = y2;\n        double dx = x1;\n        double ex = x2;\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (dy < minY && ey < minY) ||\n            (dy > maxY && ey > maxY) ||\n            (dx < minX && ex < minX) ||\n            (dx > maxX && ex > maxX);\n\n        if (outside == false) {\n          if (includeBoundary == true) {\n            if (lineCrossesLineWithBoundary(dx, dy, ex, ey, ax, ay, bx, by) ||\n                lineCrossesLineWithBoundary(dx, dy, ex, ey, bx, by, cx, cy) ||\n                lineCrossesLineWithBoundary(dx, dy, ex, ey, cx, cy, ax, ay)) {\n              return true;\n            }\n          } else {\n            if (lineCrossesLine(dx, dy, ex, ey, ax, ay, bx, by) ||\n                lineCrossesLine(dx, dy, ex, ey, bx, by, cx, cy) ||\n                lineCrossesLine(dx, dy, ex, ey, cx, cy, ax, ay)) {\n              return true;\n            }\n          }\n        }\n\n\n        if (left != null && left.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, includeBoundary)) {\n          return true;\n        }\n\n        if (right != null && maxY >= low && right.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, includeBoundary)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n","sourceOld":"  /** Returns true if the triangle crosses any edge in this edge subtree */\n  protected boolean crossesTriangle(double minX, double maxX, double minY, double maxY,\n                          double ax, double ay, double bx, double by, double cx, double cy) {\n      if (minY <= max) {\n        double dy = y1;\n        double ey = y2;\n        double dx = x1;\n        double ex = x2;\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (dy < minY && ey < minY) ||\n            (dy > maxY && ey > maxY) ||\n            (dx < minX && ex < minX) ||\n            (dx > maxX && ex > maxX);\n\n        if (outside == false) {\n          if (lineCrossesLine(dx, dy, ex, ey, ax, ay, bx, by) ||\n              lineCrossesLine(dx, dy, ex, ey, bx, by, cx, cy) ||\n              lineCrossesLine(dx, dy, ex, ey, cx, cy, ax, ay)) {\n            return true;\n          }\n        }\n\n        if (left != null && left.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy)) {\n          return true;\n        }\n\n        if (right != null && maxY >= low && right.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a923e28c9d079048c6993884ec89c44f0380b923","date":1581100153,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesTriangle(double,double,double,double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesTriangle(double,double,double,double,double,double,double,double,double,double,boolean).mjava","sourceNew":"  /** Returns true if the triangle crosses any edge in this edge subtree */\n  boolean crossesTriangle(double minX, double maxX, double minY, double maxY,\n                          double ax, double ay, double bx, double by, double cx, double cy, boolean includeBoundary) {\n      if (minY <= max) {\n        double dy = y1;\n        double ey = y2;\n        double dx = x1;\n        double ex = x2;\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (dy < minY && ey < minY) ||\n            (dy > maxY && ey > maxY) ||\n            (dx < minX && ex < minX) ||\n            (dx > maxX && ex > maxX);\n\n        if (outside == false) {\n          if (includeBoundary == true) {\n            if (lineCrossesLineWithBoundary(dx, dy, ex, ey, ax, ay, bx, by) ||\n                lineCrossesLineWithBoundary(dx, dy, ex, ey, bx, by, cx, cy) ||\n                lineCrossesLineWithBoundary(dx, dy, ex, ey, cx, cy, ax, ay)) {\n              return true;\n            }\n          } else {\n            if (lineCrossesLine(dx, dy, ex, ey, ax, ay, bx, by) ||\n                lineCrossesLine(dx, dy, ex, ey, bx, by, cx, cy) ||\n                lineCrossesLine(dx, dy, ex, ey, cx, cy, ax, ay)) {\n              return true;\n            }\n          }\n        }\n\n\n        if (left != null && left.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, includeBoundary)) {\n          return true;\n        }\n\n        if (right != null && maxY >= low && right.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, includeBoundary)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n","sourceOld":"  /** Returns true if the triangle crosses any edge in this edge subtree */\n  protected boolean crossesTriangle(double minX, double maxX, double minY, double maxY,\n                          double ax, double ay, double bx, double by, double cx, double cy, boolean includeBoundary) {\n      if (minY <= max) {\n        double dy = y1;\n        double ey = y2;\n        double dx = x1;\n        double ex = x2;\n\n        // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n        // if not, don't waste our time trying more complicated stuff\n        boolean outside = (dy < minY && ey < minY) ||\n            (dy > maxY && ey > maxY) ||\n            (dx < minX && ex < minX) ||\n            (dx > maxX && ex > maxX);\n\n        if (outside == false) {\n          if (includeBoundary == true) {\n            if (lineCrossesLineWithBoundary(dx, dy, ex, ey, ax, ay, bx, by) ||\n                lineCrossesLineWithBoundary(dx, dy, ex, ey, bx, by, cx, cy) ||\n                lineCrossesLineWithBoundary(dx, dy, ex, ey, cx, cy, ax, ay)) {\n              return true;\n            }\n          } else {\n            if (lineCrossesLine(dx, dy, ex, ey, ax, ay, bx, by) ||\n                lineCrossesLine(dx, dy, ex, ey, bx, by, cx, cy) ||\n                lineCrossesLine(dx, dy, ex, ey, cx, cy, ax, ay)) {\n              return true;\n            }\n          }\n        }\n\n\n        if (left != null && left.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, includeBoundary)) {\n          return true;\n        }\n\n        if (right != null && maxY >= low && right.crossesTriangle(minX, maxX, minY, maxY, ax, ay, bx, by, cx, cy, includeBoundary)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"908e262be655c65579ec6d94f228d47b663da975":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a923e28c9d079048c6993884ec89c44f0380b923":["908e262be655c65579ec6d94f228d47b663da975"],"b945b8f5bba0303382bc69d60c0c287714f23328":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","908e262be655c65579ec6d94f228d47b663da975"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a923e28c9d079048c6993884ec89c44f0380b923"]},"commit2Childs":{"908e262be655c65579ec6d94f228d47b663da975":["a923e28c9d079048c6993884ec89c44f0380b923","b945b8f5bba0303382bc69d60c0c287714f23328"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["908e262be655c65579ec6d94f228d47b663da975","b945b8f5bba0303382bc69d60c0c287714f23328"],"a923e28c9d079048c6993884ec89c44f0380b923":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}