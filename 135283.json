{"path":"lucene/src/test-framework/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int).mjava","sourceNew":"  public static void checkRandomData(Random random, Analyzer a, int iterations) throws IOException {\n    checkRandomData(random, a, iterations, 20);\n  }\n\n","sourceOld":"  public static void checkRandomData(Random random, Analyzer a, int iterations) throws IOException {\n    checkRandomData(random, a, iterations, 20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c6ce79c21a8da5e778ef9179243bc50d6d42c52","date":1324010267,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int).mjava","sourceNew":"  // simple utility method for blasting tokenstreams with data to make sure they don't do anything crazy\n  // TODO: add a MockCharStream, and use it here too, to ensure that correctOffset etc is being done by tokenizers.\n  public static void checkRandomData(Random random, Analyzer a, int iterations) throws IOException {\n    checkRandomData(random, a, iterations, 20);\n  }\n\n","sourceOld":"  public static void checkRandomData(Random random, Analyzer a, int iterations) throws IOException {\n    checkRandomData(random, a, iterations, 20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db1ecb318b051dba771b572da3dcf3125ef832e6","date":1325602236,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int).mjava","sourceNew":"  // simple utility method for blasting tokenstreams with data to make sure they don't do anything crazy\n  // TODO: add a MockCharStream, and use it here too, to ensure that correctOffset etc is being done by tokenizers.\n  public static void checkRandomData(Random random, Analyzer a, int iterations) throws IOException {\n    checkRandomData(random, a, iterations, 20);\n    // now test with multiple threads\n    int numThreads = _TestUtil.nextInt(random, 4, 8);\n    Thread threads[] = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new AnalysisThread(new Random(random.nextLong()), a, iterations);\n    }\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i = 0; i < threads.length; i++) {\n      try {\n        threads[i].join();\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  // simple utility method for blasting tokenstreams with data to make sure they don't do anything crazy\n  // TODO: add a MockCharStream, and use it here too, to ensure that correctOffset etc is being done by tokenizers.\n  public static void checkRandomData(Random random, Analyzer a, int iterations) throws IOException {\n    checkRandomData(random, a, iterations, 20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int).mjava","sourceNew":"  // simple utility method for blasting tokenstreams with data to make sure they don't do anything crazy\n  // TODO: add a MockCharStream, and use it here too, to ensure that correctOffset etc is being done by tokenizers.\n  public static void checkRandomData(Random random, Analyzer a, int iterations) throws IOException {\n    checkRandomData(random, a, iterations, 20);\n    // now test with multiple threads\n    int numThreads = _TestUtil.nextInt(random, 4, 8);\n    Thread threads[] = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new AnalysisThread(new Random(random.nextLong()), a, iterations);\n    }\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i = 0; i < threads.length; i++) {\n      try {\n        threads[i].join();\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":"  // simple utility method for blasting tokenstreams with data to make sure they don't do anything crazy\n  // TODO: add a MockCharStream, and use it here too, to ensure that correctOffset etc is being done by tokenizers.\n  public static void checkRandomData(Random random, Analyzer a, int iterations) throws IOException {\n    checkRandomData(random, a, iterations, 20);\n    // now test with multiple threads\n    int numThreads = _TestUtil.nextInt(random, 4, 8);\n    Thread threads[] = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new AnalysisThread(new Random(random.nextLong()), a, iterations);\n    }\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i = 0; i < threads.length; i++) {\n      try {\n        threads[i].join();\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["db1ecb318b051dba771b572da3dcf3125ef832e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c6ce79c21a8da5e778ef9179243bc50d6d42c52":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"db1ecb318b051dba771b572da3dcf3125ef832e6":["1c6ce79c21a8da5e778ef9179243bc50d6d42c52"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["1c6ce79c21a8da5e778ef9179243bc50d6d42c52"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"1c6ce79c21a8da5e778ef9179243bc50d6d42c52":["db1ecb318b051dba771b572da3dcf3125ef832e6"],"db1ecb318b051dba771b572da3dcf3125ef832e6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}