{"path":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b103c0ed2ba7edf422d1ccb5489815dc6acb84","date":1345973500,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eae2a56dc810a17cf807d831f720dec931a03de","date":1349262073,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    File destDir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    File destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    File destDir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    File destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    File destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.shutdown();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    File destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    File destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    File destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.shutdown();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    File destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    File destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(5, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    Path dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Path destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    Path destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), destDir2.toAbsolutePath().toString(), splitSegName});\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    assertEquals(4, fsDirDest2.listAll().length);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    File destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f09633f6b08a3f37130b65efaa92de1cfcd95b0","date":1412434507,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    Path dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Path destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    Path destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), destDir2.toAbsolutePath().toString(), splitSegName});\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(fsDirDest2);\n    assertEquals(1, sis.size());\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Path dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Path destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    Path destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), destDir2.toAbsolutePath().toString(), splitSegName});\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    assertEquals(4, fsDirDest2.listAll().length);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    Path dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Path destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    Path destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), destDir2.toAbsolutePath().toString(), splitSegName});\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(fsDirDest2);\n    assertEquals(1, sis.size());\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Path dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Path destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    Path destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), destDir2.toAbsolutePath().toString(), splitSegName});\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    assertEquals(4, fsDirDest2.listAll().length);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    Path dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Path destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    Path destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), destDir2.toAbsolutePath().toString(), splitSegName});\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    SegmentInfos sis = SegmentInfos.readLatestCommit(fsDirDest2);\n    assertEquals(1, sis.size());\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Path dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Path destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    Path destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), destDir2.toAbsolutePath().toString(), splitSegName});\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(fsDirDest2);\n    assertEquals(1, sis.size());\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    Path dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Path destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    Path destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), destDir2.toAbsolutePath().toString(), splitSegName});\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    SegmentInfos sis = SegmentInfos.readLatestCommit(fsDirDest2);\n    assertEquals(1, sis.size());\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Path dir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Path destDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    Directory fsDir = newFSDirectory(dir);\n    // IndexSplitter.split makes its own commit directly with SIPC/SegmentInfos,\n    // so the unreferenced files are expected.\n    if (fsDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)fsDir).setAssertNoUnrefencedFilesOnClose(false);\n    }\n\n    MergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1.0);\n    mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.leaves().size());\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).info.name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    Path destDir2 = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), destDir2.toAbsolutePath().toString(), splitSegName});\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(fsDirDest2);\n    assertEquals(1, sis.size());\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.toAbsolutePath().toString(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.leaves().size());\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"4356000e349e38c9fb48034695b7c309abd54557":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9bb9a29a5e71a90295f175df8919802993142c9a":["f4abec28b874149a7223e32cc7a01704c27790de","8f09633f6b08a3f37130b65efaa92de1cfcd95b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"9eae2a56dc810a17cf807d831f720dec931a03de":["e7b103c0ed2ba7edf422d1ccb5489815dc6acb84"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"6613659748fe4411a7dcf85266e55db1f95f7315":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["4356000e349e38c9fb48034695b7c309abd54557"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["8f09633f6b08a3f37130b65efaa92de1cfcd95b0"],"8f09633f6b08a3f37130b65efaa92de1cfcd95b0":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","e7b103c0ed2ba7edf422d1ccb5489815dc6acb84"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["9eae2a56dc810a17cf807d831f720dec931a03de"],"e7b103c0ed2ba7edf422d1ccb5489815dc6acb84":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9d153abcf92dc5329d98571a8c3035df9bd80648"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"4356000e349e38c9fb48034695b7c309abd54557":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","e7b103c0ed2ba7edf422d1ccb5489815dc6acb84"],"9eae2a56dc810a17cf807d831f720dec931a03de":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"8f09633f6b08a3f37130b65efaa92de1cfcd95b0":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"f4abec28b874149a7223e32cc7a01704c27790de":["9bb9a29a5e71a90295f175df8919802993142c9a","8f09633f6b08a3f37130b65efaa92de1cfcd95b0"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["f4abec28b874149a7223e32cc7a01704c27790de"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4356000e349e38c9fb48034695b7c309abd54557","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"e7b103c0ed2ba7edf422d1ccb5489815dc6acb84":["9eae2a56dc810a17cf807d831f720dec931a03de","05a14b2611ead08655a2b2bdc61632eb31316e57"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}