{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClientTest#testConcurrentCollectionUpdate().mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClientTest#testConcurrentCollectionUpdate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient\n             = new ConcurrentUpdateHttp2SolrClient.Builder(jetty.getBaseUrl().toString(), http2Client)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount).build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      // ensure it doesn't block where there's nothing to do yet\n      concurrentClient.blockUntilFinished();\n\n      // Delete all existing documents.\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new ConcurrentUpdateSolrClientTest.SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      // ensure all docs are sent\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // wait until all requests are processed by CUSS\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient\n             = new ConcurrentUpdateHttp2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/collection1\", http2Client)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount).build()) {\n\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClientTest#testConcurrentCollectionUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClientTest#testConcurrentCollectionUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient\n             = new ConcurrentUpdateHttp2SolrClient.Builder(jetty.getBaseUrl().toString(), http2Client)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount).build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      // ensure it doesn't block where there's nothing to do yet\n      concurrentClient.blockUntilFinished();\n\n      // Delete all existing documents.\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new ConcurrentUpdateSolrClientTest.SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      // ensure all docs are sent\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // wait until all requests are processed by CUSS\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient\n             = new ConcurrentUpdateHttp2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/collection1\", http2Client)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount).build()) {\n\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient\n             = new ConcurrentUpdateHttp2SolrClient.Builder(jetty.getBaseUrl().toString(), http2Client)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount).build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      // ensure it doesn't block where there's nothing to do yet\n      concurrentClient.blockUntilFinished();\n\n      // Delete all existing documents.\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new ConcurrentUpdateSolrClientTest.SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      // ensure all docs are sent\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      // wait until all requests are processed by CUSS\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient\n             = new ConcurrentUpdateHttp2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/collection1\", http2Client)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount).build()) {\n\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}