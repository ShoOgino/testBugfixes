{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","commits":[{"id":"746d604154f8744382434608bf4f14fd4892ae36","date":1349102351,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["746d604154f8744382434608bf4f14fd4892ae36","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["746d604154f8744382434608bf4f14fd4892ae36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["746d604154f8744382434608bf4f14fd4892ae36","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"746d604154f8744382434608bf4f14fd4892ae36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["746d604154f8744382434608bf4f14fd4892ae36"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"746d604154f8744382434608bf4f14fd4892ae36":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}