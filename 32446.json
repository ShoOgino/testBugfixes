{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","commits":[{"id":"77d177b70aefca41f3edc910b0a703c76283d8b6","date":1411650976,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40SegmentInfoFormat.CODEC_NAME, Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion().toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringStringMap(Collections.<String,String>emptyMap());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: why must we do this? do we not get tracking dir wrapper?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40SegmentInfoFormat.CODEC_NAME, Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion().toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringStringMap(Collections.<String,String>emptyMap());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: why must we do this? do we not get tracking dir wrapper?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40SegmentInfoFormat.CODEC_NAME, Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion().toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringStringMap(Collections.<String,String>emptyMap());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: why must we do this? do we not get tracking dir wrapper?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40SegmentInfoFormat.CODEC_NAME, Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion().toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringStringMap(Collections.<String,String>emptyMap());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: why must we do this? do we not get tracking dir wrapper?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051","date":1412632911,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40SegmentInfoFormat.CODEC_NAME, Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion().toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringStringMap(Collections.<String,String>emptyMap());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: why must we do this? do we not get tracking dir wrapper?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40SegmentInfoFormat.CODEC_NAME, Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion().toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringStringMap(Collections.<String,String>emptyMap());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: why must we do this? do we not get tracking dir wrapper?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWSegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40SegmentInfoFormat.CODEC_NAME, Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion().toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringStringMap(Collections.<String,String>emptyMap());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: why must we do this? do we not get tracking dir wrapper?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40SegmentInfoFormat.CODEC_NAME, Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion().toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringStringMap(Collections.<String,String>emptyMap());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: why must we do this? do we not get tracking dir wrapper?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["77d177b70aefca41f3edc910b0a703c76283d8b6","2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"77d177b70aefca41f3edc910b0a703c76283d8b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","77d177b70aefca41f3edc910b0a703c76283d8b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"77d177b70aefca41f3edc910b0a703c76283d8b6":["55980207f1977bd1463465de1659b821347e2fa8","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77d177b70aefca41f3edc910b0a703c76283d8b6","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}