{"path":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":null,"sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b365e1bb255226e730a37a0bb229582adb1bc16f","date":1287326812,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057119d0666f2a2674ad4bba71baca71cb200801","date":1287510147,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    openSearchers.remove(this);\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9077e792550279352dfaab22b394064dc6c62fc","date":1287510928,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    openSearchers.remove(this);\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  @Override\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  @Override\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  @Override\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  @Override\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  @Override\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  @Override\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  @Override\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#close().mjava","sourceNew":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  @Override\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","sourceOld":"  /**\n   * Free's resources associated with this searcher.\n   *\n   * In particular, the underlying reader and any cache's in use are closed.\n   */\n  @Override\n  public void close() throws IOException {\n    if (cachingEnabled) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"Closing \").append(name);\n      for (SolrCache cache : cacheList) {\n        sb.append(\"\\n\\t\");\n        sb.append(cache);\n      }\n      log.info(sb.toString());\n    } else {\n      log.debug(\"Closing \" + name);\n    }\n    core.getInfoRegistry().remove(name);\n\n    // super.close();\n    // can't use super.close() since it just calls reader.close() and that may only be called once\n    // per reader (even if incRef() was previously called).\n    if (closeReader) reader.decRef();\n\n    for (SolrCache cache : cacheList) {\n      cache.close();\n    }\n\n    // do this at the end so it only gets done if there are no exceptions\n    numCloses.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["a9077e792550279352dfaab22b394064dc6c62fc"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","a9077e792550279352dfaab22b394064dc6c62fc"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"a9077e792550279352dfaab22b394064dc6c62fc":["057119d0666f2a2674ad4bba71baca71cb200801"],"b365e1bb255226e730a37a0bb229582adb1bc16f":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"057119d0666f2a2674ad4bba71baca71cb200801":["b365e1bb255226e730a37a0bb229582adb1bc16f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["1da8d55113b689b06716246649de6f62430f15c0","a9077e792550279352dfaab22b394064dc6c62fc"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b365e1bb255226e730a37a0bb229582adb1bc16f","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a9077e792550279352dfaab22b394064dc6c62fc":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"b365e1bb255226e730a37a0bb229582adb1bc16f":["057119d0666f2a2674ad4bba71baca71cb200801"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"057119d0666f2a2674ad4bba71baca71cb200801":["a9077e792550279352dfaab22b394064dc6c62fc"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}