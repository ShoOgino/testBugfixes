{"path":"src/test/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],ScoreDoc[]).mjava","commits":[{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],ScoreDoc[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],Hits).mjava","sourceNew":"  /** Tests that a Hits has an expected order of documents */\n  public static void checkDocIds(String mes, int[] results, ScoreDoc[] hits)\n  throws IOException {\n    TestCase.assertEquals(mes + \" nr of hits\", results.length, hits.length);\n    for (int i = 0; i < results.length; i++) {\n      TestCase.assertEquals(mes + \" doc nrs for hit \" + i, results[i], hits[i].doc);\n    }\n  }\n\n","sourceOld":"  /** Tests that a Hits has an expected order of documents */\n  public static void checkDocIds(String mes, int[] results, Hits hits)\n  throws IOException {\n    TestCase.assertEquals(mes + \" nr of hits\", results.length, hits.length());\n    for (int i = 0; i < results.length; i++) {\n      TestCase.assertEquals(mes + \" doc nrs for hit \" + i, results[i], hits.id(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],ScoreDoc[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],ScoreDoc[]).mjava","sourceNew":"  /** Tests that a Hits has an expected order of documents */\n  public static void checkDocIds(String mes, int[] results, ScoreDoc[] hits)\n  throws IOException {\n    TestCase.assertEquals(mes + \" nr of hits\", hits.length, results.length);\n    for (int i = 0; i < results.length; i++) {\n      TestCase.assertEquals(mes + \" doc nrs for hit \" + i, results[i], hits[i].doc);\n    }\n  }\n\n","sourceOld":"  /** Tests that a Hits has an expected order of documents */\n  public static void checkDocIds(String mes, int[] results, ScoreDoc[] hits)\n  throws IOException {\n    TestCase.assertEquals(mes + \" nr of hits\", results.length, hits.length);\n    for (int i = 0; i < results.length; i++) {\n      TestCase.assertEquals(mes + \" doc nrs for hit \" + i, results[i], hits[i].doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],ScoreDoc[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],ScoreDoc[]).mjava","sourceNew":"  /** Tests that a Hits has an expected order of documents */\n  public static void checkDocIds(String mes, int[] results, ScoreDoc[] hits)\n  throws IOException {\n    Assert.assertEquals(mes + \" nr of hits\", hits.length, results.length);\n    for (int i = 0; i < results.length; i++) {\n      Assert.assertEquals(mes + \" doc nrs for hit \" + i, results[i], hits[i].doc);\n    }\n  }\n\n","sourceOld":"  /** Tests that a Hits has an expected order of documents */\n  public static void checkDocIds(String mes, int[] results, ScoreDoc[] hits)\n  throws IOException {\n    TestCase.assertEquals(mes + \" nr of hits\", hits.length, results.length);\n    for (int i = 0; i < results.length; i++) {\n      TestCase.assertEquals(mes + \" doc nrs for hit \" + i, results[i], hits[i].doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],ScoreDoc[]).mjava","pathOld":"src/test/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],ScoreDoc[]).mjava","sourceNew":"  /** Tests that a Hits has an expected order of documents */\n  public static void checkDocIds(String mes, int[] results, ScoreDoc[] hits)\n  throws IOException {\n    Assert.assertEquals(mes + \" nr of hits\", hits.length, results.length);\n    for (int i = 0; i < results.length; i++) {\n      Assert.assertEquals(mes + \" doc nrs for hit \" + i, results[i], hits[i].doc);\n    }\n  }\n\n","sourceOld":"  /** Tests that a Hits has an expected order of documents */\n  public static void checkDocIds(String mes, int[] results, ScoreDoc[] hits)\n  throws IOException {\n    Assert.assertEquals(mes + \" nr of hits\", hits.length, results.length);\n    for (int i = 0; i < results.length; i++) {\n      Assert.assertEquals(mes + \" doc nrs for hit \" + i, results[i], hits[i].doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"052fac7830290bd38a04cddee1a121ee07656b56":["63bc3238545c6012bd44f5d294077997f236bc4e"],"63bc3238545c6012bd44f5d294077997f236bc4e":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["052fac7830290bd38a04cddee1a121ee07656b56"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["63bc3238545c6012bd44f5d294077997f236bc4e"],"052fac7830290bd38a04cddee1a121ee07656b56":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"63bc3238545c6012bd44f5d294077997f236bc4e":["052fac7830290bd38a04cddee1a121ee07656b56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}