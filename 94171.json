{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/config/TestAttributes#testAttributes().mjava","commits":[{"id":"ec58fb7921964848d01bea54f8ec4a2ac813eaeb","date":1295476876,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/config/TestAttributes#testAttributes().mjava","pathOld":"/dev/null","sourceNew":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new AllowLeadingWildcardAttributeImpl(),\n      Collections.singletonMap(AllowLeadingWildcardAttribute.class.getName()+\"#allowLeadingWildcard\", false));\n    _TestUtil.assertAttributeReflection(new AnalyzerAttributeImpl(),\n      Collections.singletonMap(AnalyzerAttribute.class.getName()+\"#analyzer\", null));\n    _TestUtil.assertAttributeReflection(new BoostAttributeImpl(),\n      Collections.singletonMap(BoostAttribute.class.getName()+\"#boost\", 1.0f));\n    _TestUtil.assertAttributeReflection(new DateResolutionAttributeImpl(),\n      Collections.singletonMap(DateResolutionAttribute.class.getName()+\"#dateResolution\", null));\n    _TestUtil.assertAttributeReflection(new DefaultOperatorAttributeImpl(),\n      Collections.singletonMap(DefaultOperatorAttribute.class.getName()+\"#operator\", DefaultOperatorAttribute.Operator.OR));\n    _TestUtil.assertAttributeReflection(new DefaultPhraseSlopAttributeImpl(),\n      Collections.singletonMap(DefaultPhraseSlopAttribute.class.getName()+\"#defaultPhraseSlop\", 0));\n    _TestUtil.assertAttributeReflection(new FieldBoostMapAttributeImpl(),\n      Collections.singletonMap(FieldBoostMapAttribute.class.getName()+\"#boosts\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FieldDateResolutionMapAttributeImpl(),\n      Collections.singletonMap(FieldDateResolutionMapAttribute.class.getName()+\"#dateRes\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FuzzyAttributeImpl(), new HashMap<String,Object>() {{\n      put(FuzzyAttribute.class.getName()+\"#prefixLength\", FuzzyQuery.defaultPrefixLength);\n      put(FuzzyAttribute.class.getName()+\"#minSimilarity\", FuzzyQuery.defaultMinSimilarity);\n    }});\n    _TestUtil.assertAttributeReflection(new LocaleAttributeImpl(),\n      Collections.singletonMap(LocaleAttribute.class.getName()+\"#locale\", Locale.getDefault()));\n    _TestUtil.assertAttributeReflection(new LowercaseExpandedTermsAttributeImpl(),\n      Collections.singletonMap(LowercaseExpandedTermsAttribute.class.getName()+\"#lowercaseExpandedTerms\", true));\n    _TestUtil.assertAttributeReflection(new MultiFieldAttributeImpl(),\n      Collections.singletonMap(MultiFieldAttribute.class.getName()+\"#fields\", null));\n    _TestUtil.assertAttributeReflection(new MultiTermRewriteMethodAttributeImpl(),\n      Collections.singletonMap(MultiTermRewriteMethodAttribute.class.getName()+\"#multiTermRewriteMethod\", MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT));\n    _TestUtil.assertAttributeReflection(new PositionIncrementsAttributeImpl(),\n      Collections.singletonMap(PositionIncrementsAttribute.class.getName()+\"#positionIncrementsEnabled\", false));\n    _TestUtil.assertAttributeReflection(new RangeCollatorAttributeImpl(),\n      Collections.singletonMap(RangeCollatorAttribute.class.getName()+\"#rangeCollator\", null));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/config/TestAttributes#testAttributes().mjava","pathOld":"/dev/null","sourceNew":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new AllowLeadingWildcardAttributeImpl(),\n      Collections.singletonMap(AllowLeadingWildcardAttribute.class.getName()+\"#allowLeadingWildcard\", false));\n    _TestUtil.assertAttributeReflection(new AnalyzerAttributeImpl(),\n      Collections.singletonMap(AnalyzerAttribute.class.getName()+\"#analyzer\", null));\n    _TestUtil.assertAttributeReflection(new BoostAttributeImpl(),\n      Collections.singletonMap(BoostAttribute.class.getName()+\"#boost\", 1.0f));\n    _TestUtil.assertAttributeReflection(new DateResolutionAttributeImpl(),\n      Collections.singletonMap(DateResolutionAttribute.class.getName()+\"#dateResolution\", null));\n    _TestUtil.assertAttributeReflection(new DefaultOperatorAttributeImpl(),\n      Collections.singletonMap(DefaultOperatorAttribute.class.getName()+\"#operator\", DefaultOperatorAttribute.Operator.OR));\n    _TestUtil.assertAttributeReflection(new DefaultPhraseSlopAttributeImpl(),\n      Collections.singletonMap(DefaultPhraseSlopAttribute.class.getName()+\"#defaultPhraseSlop\", 0));\n    _TestUtil.assertAttributeReflection(new FieldBoostMapAttributeImpl(),\n      Collections.singletonMap(FieldBoostMapAttribute.class.getName()+\"#boosts\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FieldDateResolutionMapAttributeImpl(),\n      Collections.singletonMap(FieldDateResolutionMapAttribute.class.getName()+\"#dateRes\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FuzzyAttributeImpl(), new HashMap<String,Object>() {{\n      put(FuzzyAttribute.class.getName()+\"#prefixLength\", FuzzyQuery.defaultPrefixLength);\n      put(FuzzyAttribute.class.getName()+\"#minSimilarity\", FuzzyQuery.defaultMinSimilarity);\n    }});\n    _TestUtil.assertAttributeReflection(new LocaleAttributeImpl(),\n      Collections.singletonMap(LocaleAttribute.class.getName()+\"#locale\", Locale.getDefault()));\n    _TestUtil.assertAttributeReflection(new LowercaseExpandedTermsAttributeImpl(),\n      Collections.singletonMap(LowercaseExpandedTermsAttribute.class.getName()+\"#lowercaseExpandedTerms\", true));\n    _TestUtil.assertAttributeReflection(new MultiFieldAttributeImpl(),\n      Collections.singletonMap(MultiFieldAttribute.class.getName()+\"#fields\", null));\n    _TestUtil.assertAttributeReflection(new MultiTermRewriteMethodAttributeImpl(),\n      Collections.singletonMap(MultiTermRewriteMethodAttribute.class.getName()+\"#multiTermRewriteMethod\", MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT));\n    _TestUtil.assertAttributeReflection(new PositionIncrementsAttributeImpl(),\n      Collections.singletonMap(PositionIncrementsAttribute.class.getName()+\"#positionIncrementsEnabled\", false));\n    _TestUtil.assertAttributeReflection(new RangeCollatorAttributeImpl(),\n      Collections.singletonMap(RangeCollatorAttribute.class.getName()+\"#rangeCollator\", null));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/config/TestAttributes#testAttributes().mjava","pathOld":"/dev/null","sourceNew":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new AllowLeadingWildcardAttributeImpl(),\n      Collections.singletonMap(AllowLeadingWildcardAttribute.class.getName()+\"#allowLeadingWildcard\", false));\n    _TestUtil.assertAttributeReflection(new AnalyzerAttributeImpl(),\n      Collections.singletonMap(AnalyzerAttribute.class.getName()+\"#analyzer\", null));\n    _TestUtil.assertAttributeReflection(new BoostAttributeImpl(),\n      Collections.singletonMap(BoostAttribute.class.getName()+\"#boost\", 1.0f));\n    _TestUtil.assertAttributeReflection(new DateResolutionAttributeImpl(),\n      Collections.singletonMap(DateResolutionAttribute.class.getName()+\"#dateResolution\", null));\n    _TestUtil.assertAttributeReflection(new DefaultOperatorAttributeImpl(),\n      Collections.singletonMap(DefaultOperatorAttribute.class.getName()+\"#operator\", DefaultOperatorAttribute.Operator.OR));\n    _TestUtil.assertAttributeReflection(new DefaultPhraseSlopAttributeImpl(),\n      Collections.singletonMap(DefaultPhraseSlopAttribute.class.getName()+\"#defaultPhraseSlop\", 0));\n    _TestUtil.assertAttributeReflection(new FieldBoostMapAttributeImpl(),\n      Collections.singletonMap(FieldBoostMapAttribute.class.getName()+\"#boosts\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FieldDateResolutionMapAttributeImpl(),\n      Collections.singletonMap(FieldDateResolutionMapAttribute.class.getName()+\"#dateRes\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FuzzyAttributeImpl(), new HashMap<String,Object>() {{\n      put(FuzzyAttribute.class.getName()+\"#prefixLength\", FuzzyQuery.defaultPrefixLength);\n      put(FuzzyAttribute.class.getName()+\"#minSimilarity\", FuzzyQuery.defaultMinSimilarity);\n    }});\n    _TestUtil.assertAttributeReflection(new LocaleAttributeImpl(),\n      Collections.singletonMap(LocaleAttribute.class.getName()+\"#locale\", Locale.getDefault()));\n    _TestUtil.assertAttributeReflection(new LowercaseExpandedTermsAttributeImpl(),\n      Collections.singletonMap(LowercaseExpandedTermsAttribute.class.getName()+\"#lowercaseExpandedTerms\", true));\n    _TestUtil.assertAttributeReflection(new MultiFieldAttributeImpl(),\n      Collections.singletonMap(MultiFieldAttribute.class.getName()+\"#fields\", null));\n    _TestUtil.assertAttributeReflection(new MultiTermRewriteMethodAttributeImpl(),\n      Collections.singletonMap(MultiTermRewriteMethodAttribute.class.getName()+\"#multiTermRewriteMethod\", MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT));\n    _TestUtil.assertAttributeReflection(new PositionIncrementsAttributeImpl(),\n      Collections.singletonMap(PositionIncrementsAttribute.class.getName()+\"#positionIncrementsEnabled\", false));\n    _TestUtil.assertAttributeReflection(new RangeCollatorAttributeImpl(),\n      Collections.singletonMap(RangeCollatorAttribute.class.getName()+\"#rangeCollator\", null));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/config/TestAttributes#testAttributes().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/config/TestAttributes#testAttributes().mjava","sourceNew":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new AllowLeadingWildcardAttributeImpl(),\n      Collections.singletonMap(AllowLeadingWildcardAttribute.class.getName()+\"#allowLeadingWildcard\", false));\n    _TestUtil.assertAttributeReflection(new AnalyzerAttributeImpl(),\n      Collections.singletonMap(AnalyzerAttribute.class.getName()+\"#analyzer\", null));\n    _TestUtil.assertAttributeReflection(new BoostAttributeImpl(),\n      Collections.singletonMap(BoostAttribute.class.getName()+\"#boost\", 1.0f));\n    _TestUtil.assertAttributeReflection(new DateResolutionAttributeImpl(),\n      Collections.singletonMap(DateResolutionAttribute.class.getName()+\"#dateResolution\", null));\n    _TestUtil.assertAttributeReflection(new DefaultOperatorAttributeImpl(),\n      Collections.singletonMap(DefaultOperatorAttribute.class.getName()+\"#operator\", DefaultOperatorAttribute.Operator.OR));\n    _TestUtil.assertAttributeReflection(new DefaultPhraseSlopAttributeImpl(),\n      Collections.singletonMap(DefaultPhraseSlopAttribute.class.getName()+\"#defaultPhraseSlop\", 0));\n    _TestUtil.assertAttributeReflection(new FieldBoostMapAttributeImpl(),\n      Collections.singletonMap(FieldBoostMapAttribute.class.getName()+\"#boosts\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FieldDateResolutionMapAttributeImpl(),\n      Collections.singletonMap(FieldDateResolutionMapAttribute.class.getName()+\"#dateRes\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FuzzyAttributeImpl(), new HashMap<String,Object>() {{\n      put(FuzzyAttribute.class.getName()+\"#prefixLength\", FuzzyQuery.defaultPrefixLength);\n      put(FuzzyAttribute.class.getName()+\"#minSimilarity\", FuzzyQuery.defaultMinSimilarity);\n    }});\n    _TestUtil.assertAttributeReflection(new LocaleAttributeImpl(),\n      Collections.singletonMap(LocaleAttribute.class.getName()+\"#locale\", Locale.getDefault()));\n    _TestUtil.assertAttributeReflection(new LowercaseExpandedTermsAttributeImpl(),\n      Collections.singletonMap(LowercaseExpandedTermsAttribute.class.getName()+\"#lowercaseExpandedTerms\", true));\n    _TestUtil.assertAttributeReflection(new MultiFieldAttributeImpl(),\n      Collections.singletonMap(MultiFieldAttribute.class.getName()+\"#fields\", null));\n    _TestUtil.assertAttributeReflection(new MultiTermRewriteMethodAttributeImpl(),\n      Collections.singletonMap(MultiTermRewriteMethodAttribute.class.getName()+\"#multiTermRewriteMethod\", MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT));\n    _TestUtil.assertAttributeReflection(new PositionIncrementsAttributeImpl(),\n      Collections.singletonMap(PositionIncrementsAttribute.class.getName()+\"#positionIncrementsEnabled\", false));\n  }\n\n","sourceOld":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new AllowLeadingWildcardAttributeImpl(),\n      Collections.singletonMap(AllowLeadingWildcardAttribute.class.getName()+\"#allowLeadingWildcard\", false));\n    _TestUtil.assertAttributeReflection(new AnalyzerAttributeImpl(),\n      Collections.singletonMap(AnalyzerAttribute.class.getName()+\"#analyzer\", null));\n    _TestUtil.assertAttributeReflection(new BoostAttributeImpl(),\n      Collections.singletonMap(BoostAttribute.class.getName()+\"#boost\", 1.0f));\n    _TestUtil.assertAttributeReflection(new DateResolutionAttributeImpl(),\n      Collections.singletonMap(DateResolutionAttribute.class.getName()+\"#dateResolution\", null));\n    _TestUtil.assertAttributeReflection(new DefaultOperatorAttributeImpl(),\n      Collections.singletonMap(DefaultOperatorAttribute.class.getName()+\"#operator\", DefaultOperatorAttribute.Operator.OR));\n    _TestUtil.assertAttributeReflection(new DefaultPhraseSlopAttributeImpl(),\n      Collections.singletonMap(DefaultPhraseSlopAttribute.class.getName()+\"#defaultPhraseSlop\", 0));\n    _TestUtil.assertAttributeReflection(new FieldBoostMapAttributeImpl(),\n      Collections.singletonMap(FieldBoostMapAttribute.class.getName()+\"#boosts\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FieldDateResolutionMapAttributeImpl(),\n      Collections.singletonMap(FieldDateResolutionMapAttribute.class.getName()+\"#dateRes\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FuzzyAttributeImpl(), new HashMap<String,Object>() {{\n      put(FuzzyAttribute.class.getName()+\"#prefixLength\", FuzzyQuery.defaultPrefixLength);\n      put(FuzzyAttribute.class.getName()+\"#minSimilarity\", FuzzyQuery.defaultMinSimilarity);\n    }});\n    _TestUtil.assertAttributeReflection(new LocaleAttributeImpl(),\n      Collections.singletonMap(LocaleAttribute.class.getName()+\"#locale\", Locale.getDefault()));\n    _TestUtil.assertAttributeReflection(new LowercaseExpandedTermsAttributeImpl(),\n      Collections.singletonMap(LowercaseExpandedTermsAttribute.class.getName()+\"#lowercaseExpandedTerms\", true));\n    _TestUtil.assertAttributeReflection(new MultiFieldAttributeImpl(),\n      Collections.singletonMap(MultiFieldAttribute.class.getName()+\"#fields\", null));\n    _TestUtil.assertAttributeReflection(new MultiTermRewriteMethodAttributeImpl(),\n      Collections.singletonMap(MultiTermRewriteMethodAttribute.class.getName()+\"#multiTermRewriteMethod\", MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT));\n    _TestUtil.assertAttributeReflection(new PositionIncrementsAttributeImpl(),\n      Collections.singletonMap(PositionIncrementsAttribute.class.getName()+\"#positionIncrementsEnabled\", false));\n    _TestUtil.assertAttributeReflection(new RangeCollatorAttributeImpl(),\n      Collections.singletonMap(RangeCollatorAttribute.class.getName()+\"#rangeCollator\", null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/config/TestAttributes#testAttributes().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/config/TestAttributes#testAttributes().mjava","sourceNew":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new AllowLeadingWildcardAttributeImpl(),\n      Collections.singletonMap(AllowLeadingWildcardAttribute.class.getName()+\"#allowLeadingWildcard\", false));\n    _TestUtil.assertAttributeReflection(new AnalyzerAttributeImpl(),\n      Collections.singletonMap(AnalyzerAttribute.class.getName()+\"#analyzer\", null));\n    _TestUtil.assertAttributeReflection(new BoostAttributeImpl(),\n      Collections.singletonMap(BoostAttribute.class.getName()+\"#boost\", 1.0f));\n    _TestUtil.assertAttributeReflection(new DateResolutionAttributeImpl(),\n      Collections.singletonMap(DateResolutionAttribute.class.getName()+\"#dateResolution\", null));\n    _TestUtil.assertAttributeReflection(new DefaultOperatorAttributeImpl(),\n      Collections.singletonMap(DefaultOperatorAttribute.class.getName()+\"#operator\", DefaultOperatorAttribute.Operator.OR));\n    _TestUtil.assertAttributeReflection(new DefaultPhraseSlopAttributeImpl(),\n      Collections.singletonMap(DefaultPhraseSlopAttribute.class.getName()+\"#defaultPhraseSlop\", 0));\n    _TestUtil.assertAttributeReflection(new FieldBoostMapAttributeImpl(),\n      Collections.singletonMap(FieldBoostMapAttribute.class.getName()+\"#boosts\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FieldDateResolutionMapAttributeImpl(),\n      Collections.singletonMap(FieldDateResolutionMapAttribute.class.getName()+\"#dateRes\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FuzzyAttributeImpl(), new HashMap<String,Object>() {{\n      put(FuzzyAttribute.class.getName()+\"#prefixLength\", FuzzyQuery.defaultPrefixLength);\n      put(FuzzyAttribute.class.getName()+\"#minSimilarity\", FuzzyQuery.defaultMinSimilarity);\n    }});\n    _TestUtil.assertAttributeReflection(new LocaleAttributeImpl(),\n      Collections.singletonMap(LocaleAttribute.class.getName()+\"#locale\", Locale.getDefault()));\n    _TestUtil.assertAttributeReflection(new LowercaseExpandedTermsAttributeImpl(),\n      Collections.singletonMap(LowercaseExpandedTermsAttribute.class.getName()+\"#lowercaseExpandedTerms\", true));\n    _TestUtil.assertAttributeReflection(new MultiFieldAttributeImpl(),\n      Collections.singletonMap(MultiFieldAttribute.class.getName()+\"#fields\", null));\n    _TestUtil.assertAttributeReflection(new MultiTermRewriteMethodAttributeImpl(),\n      Collections.singletonMap(MultiTermRewriteMethodAttribute.class.getName()+\"#multiTermRewriteMethod\", MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT));\n    _TestUtil.assertAttributeReflection(new PositionIncrementsAttributeImpl(),\n      Collections.singletonMap(PositionIncrementsAttribute.class.getName()+\"#positionIncrementsEnabled\", false));\n  }\n\n","sourceOld":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new AllowLeadingWildcardAttributeImpl(),\n      Collections.singletonMap(AllowLeadingWildcardAttribute.class.getName()+\"#allowLeadingWildcard\", false));\n    _TestUtil.assertAttributeReflection(new AnalyzerAttributeImpl(),\n      Collections.singletonMap(AnalyzerAttribute.class.getName()+\"#analyzer\", null));\n    _TestUtil.assertAttributeReflection(new BoostAttributeImpl(),\n      Collections.singletonMap(BoostAttribute.class.getName()+\"#boost\", 1.0f));\n    _TestUtil.assertAttributeReflection(new DateResolutionAttributeImpl(),\n      Collections.singletonMap(DateResolutionAttribute.class.getName()+\"#dateResolution\", null));\n    _TestUtil.assertAttributeReflection(new DefaultOperatorAttributeImpl(),\n      Collections.singletonMap(DefaultOperatorAttribute.class.getName()+\"#operator\", DefaultOperatorAttribute.Operator.OR));\n    _TestUtil.assertAttributeReflection(new DefaultPhraseSlopAttributeImpl(),\n      Collections.singletonMap(DefaultPhraseSlopAttribute.class.getName()+\"#defaultPhraseSlop\", 0));\n    _TestUtil.assertAttributeReflection(new FieldBoostMapAttributeImpl(),\n      Collections.singletonMap(FieldBoostMapAttribute.class.getName()+\"#boosts\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FieldDateResolutionMapAttributeImpl(),\n      Collections.singletonMap(FieldDateResolutionMapAttribute.class.getName()+\"#dateRes\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FuzzyAttributeImpl(), new HashMap<String,Object>() {{\n      put(FuzzyAttribute.class.getName()+\"#prefixLength\", FuzzyQuery.defaultPrefixLength);\n      put(FuzzyAttribute.class.getName()+\"#minSimilarity\", FuzzyQuery.defaultMinSimilarity);\n    }});\n    _TestUtil.assertAttributeReflection(new LocaleAttributeImpl(),\n      Collections.singletonMap(LocaleAttribute.class.getName()+\"#locale\", Locale.getDefault()));\n    _TestUtil.assertAttributeReflection(new LowercaseExpandedTermsAttributeImpl(),\n      Collections.singletonMap(LowercaseExpandedTermsAttribute.class.getName()+\"#lowercaseExpandedTerms\", true));\n    _TestUtil.assertAttributeReflection(new MultiFieldAttributeImpl(),\n      Collections.singletonMap(MultiFieldAttribute.class.getName()+\"#fields\", null));\n    _TestUtil.assertAttributeReflection(new MultiTermRewriteMethodAttributeImpl(),\n      Collections.singletonMap(MultiTermRewriteMethodAttribute.class.getName()+\"#multiTermRewriteMethod\", MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT));\n    _TestUtil.assertAttributeReflection(new PositionIncrementsAttributeImpl(),\n      Collections.singletonMap(PositionIncrementsAttribute.class.getName()+\"#positionIncrementsEnabled\", false));\n    _TestUtil.assertAttributeReflection(new RangeCollatorAttributeImpl(),\n      Collections.singletonMap(RangeCollatorAttribute.class.getName()+\"#rangeCollator\", null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/config/TestAttributes#testAttributes().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/config/TestAttributes#testAttributes().mjava","sourceNew":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new AllowLeadingWildcardAttributeImpl(),\n      Collections.singletonMap(AllowLeadingWildcardAttribute.class.getName()+\"#allowLeadingWildcard\", false));\n    _TestUtil.assertAttributeReflection(new AnalyzerAttributeImpl(),\n      Collections.singletonMap(AnalyzerAttribute.class.getName()+\"#analyzer\", null));\n    _TestUtil.assertAttributeReflection(new BoostAttributeImpl(),\n      Collections.singletonMap(BoostAttribute.class.getName()+\"#boost\", 1.0f));\n    _TestUtil.assertAttributeReflection(new DateResolutionAttributeImpl(),\n      Collections.singletonMap(DateResolutionAttribute.class.getName()+\"#dateResolution\", null));\n    _TestUtil.assertAttributeReflection(new DefaultOperatorAttributeImpl(),\n      Collections.singletonMap(DefaultOperatorAttribute.class.getName()+\"#operator\", DefaultOperatorAttribute.Operator.OR));\n    _TestUtil.assertAttributeReflection(new DefaultPhraseSlopAttributeImpl(),\n      Collections.singletonMap(DefaultPhraseSlopAttribute.class.getName()+\"#defaultPhraseSlop\", 0));\n    _TestUtil.assertAttributeReflection(new FieldBoostMapAttributeImpl(),\n      Collections.singletonMap(FieldBoostMapAttribute.class.getName()+\"#boosts\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FieldDateResolutionMapAttributeImpl(),\n      Collections.singletonMap(FieldDateResolutionMapAttribute.class.getName()+\"#dateRes\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FuzzyAttributeImpl(), new HashMap<String,Object>() {{\n      put(FuzzyAttribute.class.getName()+\"#prefixLength\", FuzzyQuery.defaultPrefixLength);\n      put(FuzzyAttribute.class.getName()+\"#minSimilarity\", FuzzyQuery.defaultMinSimilarity);\n    }});\n    _TestUtil.assertAttributeReflection(new LocaleAttributeImpl(),\n      Collections.singletonMap(LocaleAttribute.class.getName()+\"#locale\", Locale.getDefault()));\n    _TestUtil.assertAttributeReflection(new LowercaseExpandedTermsAttributeImpl(),\n      Collections.singletonMap(LowercaseExpandedTermsAttribute.class.getName()+\"#lowercaseExpandedTerms\", true));\n    _TestUtil.assertAttributeReflection(new MultiFieldAttributeImpl(),\n      Collections.singletonMap(MultiFieldAttribute.class.getName()+\"#fields\", null));\n    _TestUtil.assertAttributeReflection(new MultiTermRewriteMethodAttributeImpl(),\n      Collections.singletonMap(MultiTermRewriteMethodAttribute.class.getName()+\"#multiTermRewriteMethod\", MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT));\n    _TestUtil.assertAttributeReflection(new PositionIncrementsAttributeImpl(),\n      Collections.singletonMap(PositionIncrementsAttribute.class.getName()+\"#positionIncrementsEnabled\", false));\n  }\n\n","sourceOld":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new AllowLeadingWildcardAttributeImpl(),\n      Collections.singletonMap(AllowLeadingWildcardAttribute.class.getName()+\"#allowLeadingWildcard\", false));\n    _TestUtil.assertAttributeReflection(new AnalyzerAttributeImpl(),\n      Collections.singletonMap(AnalyzerAttribute.class.getName()+\"#analyzer\", null));\n    _TestUtil.assertAttributeReflection(new BoostAttributeImpl(),\n      Collections.singletonMap(BoostAttribute.class.getName()+\"#boost\", 1.0f));\n    _TestUtil.assertAttributeReflection(new DateResolutionAttributeImpl(),\n      Collections.singletonMap(DateResolutionAttribute.class.getName()+\"#dateResolution\", null));\n    _TestUtil.assertAttributeReflection(new DefaultOperatorAttributeImpl(),\n      Collections.singletonMap(DefaultOperatorAttribute.class.getName()+\"#operator\", DefaultOperatorAttribute.Operator.OR));\n    _TestUtil.assertAttributeReflection(new DefaultPhraseSlopAttributeImpl(),\n      Collections.singletonMap(DefaultPhraseSlopAttribute.class.getName()+\"#defaultPhraseSlop\", 0));\n    _TestUtil.assertAttributeReflection(new FieldBoostMapAttributeImpl(),\n      Collections.singletonMap(FieldBoostMapAttribute.class.getName()+\"#boosts\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FieldDateResolutionMapAttributeImpl(),\n      Collections.singletonMap(FieldDateResolutionMapAttribute.class.getName()+\"#dateRes\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FuzzyAttributeImpl(), new HashMap<String,Object>() {{\n      put(FuzzyAttribute.class.getName()+\"#prefixLength\", FuzzyQuery.defaultPrefixLength);\n      put(FuzzyAttribute.class.getName()+\"#minSimilarity\", FuzzyQuery.defaultMinSimilarity);\n    }});\n    _TestUtil.assertAttributeReflection(new LocaleAttributeImpl(),\n      Collections.singletonMap(LocaleAttribute.class.getName()+\"#locale\", Locale.getDefault()));\n    _TestUtil.assertAttributeReflection(new LowercaseExpandedTermsAttributeImpl(),\n      Collections.singletonMap(LowercaseExpandedTermsAttribute.class.getName()+\"#lowercaseExpandedTerms\", true));\n    _TestUtil.assertAttributeReflection(new MultiFieldAttributeImpl(),\n      Collections.singletonMap(MultiFieldAttribute.class.getName()+\"#fields\", null));\n    _TestUtil.assertAttributeReflection(new MultiTermRewriteMethodAttributeImpl(),\n      Collections.singletonMap(MultiTermRewriteMethodAttribute.class.getName()+\"#multiTermRewriteMethod\", MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT));\n    _TestUtil.assertAttributeReflection(new PositionIncrementsAttributeImpl(),\n      Collections.singletonMap(PositionIncrementsAttribute.class.getName()+\"#positionIncrementsEnabled\", false));\n    _TestUtil.assertAttributeReflection(new RangeCollatorAttributeImpl(),\n      Collections.singletonMap(RangeCollatorAttribute.class.getName()+\"#rangeCollator\", null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c1fe1aedb70da4139fd9f2f7e92e572017fd083","date":1309827452,"type":4,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/config/TestAttributes#testAttributes().mjava","sourceNew":null,"sourceOld":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new AllowLeadingWildcardAttributeImpl(),\n      Collections.singletonMap(AllowLeadingWildcardAttribute.class.getName()+\"#allowLeadingWildcard\", false));\n    _TestUtil.assertAttributeReflection(new AnalyzerAttributeImpl(),\n      Collections.singletonMap(AnalyzerAttribute.class.getName()+\"#analyzer\", null));\n    _TestUtil.assertAttributeReflection(new BoostAttributeImpl(),\n      Collections.singletonMap(BoostAttribute.class.getName()+\"#boost\", 1.0f));\n    _TestUtil.assertAttributeReflection(new DateResolutionAttributeImpl(),\n      Collections.singletonMap(DateResolutionAttribute.class.getName()+\"#dateResolution\", null));\n    _TestUtil.assertAttributeReflection(new DefaultOperatorAttributeImpl(),\n      Collections.singletonMap(DefaultOperatorAttribute.class.getName()+\"#operator\", DefaultOperatorAttribute.Operator.OR));\n    _TestUtil.assertAttributeReflection(new DefaultPhraseSlopAttributeImpl(),\n      Collections.singletonMap(DefaultPhraseSlopAttribute.class.getName()+\"#defaultPhraseSlop\", 0));\n    _TestUtil.assertAttributeReflection(new FieldBoostMapAttributeImpl(),\n      Collections.singletonMap(FieldBoostMapAttribute.class.getName()+\"#boosts\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FieldDateResolutionMapAttributeImpl(),\n      Collections.singletonMap(FieldDateResolutionMapAttribute.class.getName()+\"#dateRes\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FuzzyAttributeImpl(), new HashMap<String,Object>() {{\n      put(FuzzyAttribute.class.getName()+\"#prefixLength\", FuzzyQuery.defaultPrefixLength);\n      put(FuzzyAttribute.class.getName()+\"#minSimilarity\", FuzzyQuery.defaultMinSimilarity);\n    }});\n    _TestUtil.assertAttributeReflection(new LocaleAttributeImpl(),\n      Collections.singletonMap(LocaleAttribute.class.getName()+\"#locale\", Locale.getDefault()));\n    _TestUtil.assertAttributeReflection(new LowercaseExpandedTermsAttributeImpl(),\n      Collections.singletonMap(LowercaseExpandedTermsAttribute.class.getName()+\"#lowercaseExpandedTerms\", true));\n    _TestUtil.assertAttributeReflection(new MultiFieldAttributeImpl(),\n      Collections.singletonMap(MultiFieldAttribute.class.getName()+\"#fields\", null));\n    _TestUtil.assertAttributeReflection(new MultiTermRewriteMethodAttributeImpl(),\n      Collections.singletonMap(MultiTermRewriteMethodAttribute.class.getName()+\"#multiTermRewriteMethod\", MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT));\n    _TestUtil.assertAttributeReflection(new PositionIncrementsAttributeImpl(),\n      Collections.singletonMap(PositionIncrementsAttribute.class.getName()+\"#positionIncrementsEnabled\", false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/config/TestAttributes#testAttributes().mjava","sourceNew":null,"sourceOld":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new AllowLeadingWildcardAttributeImpl(),\n      Collections.singletonMap(AllowLeadingWildcardAttribute.class.getName()+\"#allowLeadingWildcard\", false));\n    _TestUtil.assertAttributeReflection(new AnalyzerAttributeImpl(),\n      Collections.singletonMap(AnalyzerAttribute.class.getName()+\"#analyzer\", null));\n    _TestUtil.assertAttributeReflection(new BoostAttributeImpl(),\n      Collections.singletonMap(BoostAttribute.class.getName()+\"#boost\", 1.0f));\n    _TestUtil.assertAttributeReflection(new DateResolutionAttributeImpl(),\n      Collections.singletonMap(DateResolutionAttribute.class.getName()+\"#dateResolution\", null));\n    _TestUtil.assertAttributeReflection(new DefaultOperatorAttributeImpl(),\n      Collections.singletonMap(DefaultOperatorAttribute.class.getName()+\"#operator\", DefaultOperatorAttribute.Operator.OR));\n    _TestUtil.assertAttributeReflection(new DefaultPhraseSlopAttributeImpl(),\n      Collections.singletonMap(DefaultPhraseSlopAttribute.class.getName()+\"#defaultPhraseSlop\", 0));\n    _TestUtil.assertAttributeReflection(new FieldBoostMapAttributeImpl(),\n      Collections.singletonMap(FieldBoostMapAttribute.class.getName()+\"#boosts\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FieldDateResolutionMapAttributeImpl(),\n      Collections.singletonMap(FieldDateResolutionMapAttribute.class.getName()+\"#dateRes\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FuzzyAttributeImpl(), new HashMap<String,Object>() {{\n      put(FuzzyAttribute.class.getName()+\"#prefixLength\", FuzzyQuery.defaultPrefixLength);\n      put(FuzzyAttribute.class.getName()+\"#minSimilarity\", FuzzyQuery.defaultMinSimilarity);\n    }});\n    _TestUtil.assertAttributeReflection(new LocaleAttributeImpl(),\n      Collections.singletonMap(LocaleAttribute.class.getName()+\"#locale\", Locale.getDefault()));\n    _TestUtil.assertAttributeReflection(new LowercaseExpandedTermsAttributeImpl(),\n      Collections.singletonMap(LowercaseExpandedTermsAttribute.class.getName()+\"#lowercaseExpandedTerms\", true));\n    _TestUtil.assertAttributeReflection(new MultiFieldAttributeImpl(),\n      Collections.singletonMap(MultiFieldAttribute.class.getName()+\"#fields\", null));\n    _TestUtil.assertAttributeReflection(new MultiTermRewriteMethodAttributeImpl(),\n      Collections.singletonMap(MultiTermRewriteMethodAttribute.class.getName()+\"#multiTermRewriteMethod\", MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT));\n    _TestUtil.assertAttributeReflection(new PositionIncrementsAttributeImpl(),\n      Collections.singletonMap(PositionIncrementsAttribute.class.getName()+\"#positionIncrementsEnabled\", false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/config/TestAttributes#testAttributes().mjava","sourceNew":null,"sourceOld":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new AllowLeadingWildcardAttributeImpl(),\n      Collections.singletonMap(AllowLeadingWildcardAttribute.class.getName()+\"#allowLeadingWildcard\", false));\n    _TestUtil.assertAttributeReflection(new AnalyzerAttributeImpl(),\n      Collections.singletonMap(AnalyzerAttribute.class.getName()+\"#analyzer\", null));\n    _TestUtil.assertAttributeReflection(new BoostAttributeImpl(),\n      Collections.singletonMap(BoostAttribute.class.getName()+\"#boost\", 1.0f));\n    _TestUtil.assertAttributeReflection(new DateResolutionAttributeImpl(),\n      Collections.singletonMap(DateResolutionAttribute.class.getName()+\"#dateResolution\", null));\n    _TestUtil.assertAttributeReflection(new DefaultOperatorAttributeImpl(),\n      Collections.singletonMap(DefaultOperatorAttribute.class.getName()+\"#operator\", DefaultOperatorAttribute.Operator.OR));\n    _TestUtil.assertAttributeReflection(new DefaultPhraseSlopAttributeImpl(),\n      Collections.singletonMap(DefaultPhraseSlopAttribute.class.getName()+\"#defaultPhraseSlop\", 0));\n    _TestUtil.assertAttributeReflection(new FieldBoostMapAttributeImpl(),\n      Collections.singletonMap(FieldBoostMapAttribute.class.getName()+\"#boosts\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FieldDateResolutionMapAttributeImpl(),\n      Collections.singletonMap(FieldDateResolutionMapAttribute.class.getName()+\"#dateRes\", Collections.emptyMap()));\n    _TestUtil.assertAttributeReflection(new FuzzyAttributeImpl(), new HashMap<String,Object>() {{\n      put(FuzzyAttribute.class.getName()+\"#prefixLength\", FuzzyQuery.defaultPrefixLength);\n      put(FuzzyAttribute.class.getName()+\"#minSimilarity\", FuzzyQuery.defaultMinSimilarity);\n    }});\n    _TestUtil.assertAttributeReflection(new LocaleAttributeImpl(),\n      Collections.singletonMap(LocaleAttribute.class.getName()+\"#locale\", Locale.getDefault()));\n    _TestUtil.assertAttributeReflection(new LowercaseExpandedTermsAttributeImpl(),\n      Collections.singletonMap(LowercaseExpandedTermsAttribute.class.getName()+\"#lowercaseExpandedTerms\", true));\n    _TestUtil.assertAttributeReflection(new MultiFieldAttributeImpl(),\n      Collections.singletonMap(MultiFieldAttribute.class.getName()+\"#fields\", null));\n    _TestUtil.assertAttributeReflection(new MultiTermRewriteMethodAttributeImpl(),\n      Collections.singletonMap(MultiTermRewriteMethodAttribute.class.getName()+\"#multiTermRewriteMethod\", MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT));\n    _TestUtil.assertAttributeReflection(new PositionIncrementsAttributeImpl(),\n      Collections.singletonMap(PositionIncrementsAttribute.class.getName()+\"#positionIncrementsEnabled\", false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c1fe1aedb70da4139fd9f2f7e92e572017fd083":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["e79a6d080bdd5b2a8f56342cf571b5476de04180","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["3e492fb0f2bb0b4b47208286f9331ff55963c656","2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["3e492fb0f2bb0b4b47208286f9331ff55963c656","2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c1fe1aedb70da4139fd9f2f7e92e572017fd083"]},"commit2Childs":{"2c1fe1aedb70da4139fd9f2f7e92e572017fd083":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","ec58fb7921964848d01bea54f8ec4a2ac813eaeb","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["2c1fe1aedb70da4139fd9f2f7e92e572017fd083","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}