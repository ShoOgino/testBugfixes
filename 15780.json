{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#removeDeadStates(LightAutomaton).mjava","commits":[{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#removeDeadStates(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#removeDeadTransitions(LightAutomaton).mjava","sourceNew":"  /**\n   * Removes transitions to dead states (a state is \"dead\" if it is not\n   * reachable from the initial state or no accept state is reachable from it.)\n   */\n  public static LightAutomaton removeDeadStates(LightAutomaton a) {\n    int numStates = a.getNumStates();\n    BitSet liveSet = getLiveStates(a);\n\n    int[] map = new int[numStates];\n\n    LightAutomaton result = new LightAutomaton();\n    //System.out.println(\"liveSet: \" + liveSet + \" numStates=\" + numStates);\n    for(int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        map[i] = result.createState();\n        result.setAccept(map[i], a.isAccept(i));\n      }\n    }\n\n    Transition t = new Transition();\n\n    for (int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        int numTransitions = a.initTransition(i, t);\n        // filter out transitions to dead states:\n        for(int j=0;j<numTransitions;j++) {\n          a.getNextTransition(t);\n          if (liveSet.get(t.dest)) {\n            result.addTransition(map[i], map[t.dest], t.min, t.max);\n          }\n        }\n      }\n    }\n\n    // nocommit need test case for \"accepts no strings\"\n\n    result.finish();\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Removes transitions to dead states and calls {@link #reduce()}.\n   * (A state is \"dead\" if no accept state is\n   * reachable from it.)\n   */\n  public static LightAutomaton removeDeadTransitions(LightAutomaton a) {\n    int numStates = a.getNumStates();\n    BitSet liveSet = getLiveStates(a);\n\n    int[] map = new int[numStates];\n\n    LightAutomaton result = new LightAutomaton();\n    //System.out.println(\"liveSet: \" + liveSet + \" numStates=\" + numStates);\n    for(int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        map[i] = result.createState();\n        result.setAccept(map[i], a.isAccept(i));\n      }\n    }\n\n    Transition t = new Transition();\n\n    for (int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        int numTransitions = a.initTransition(i, t);\n        // filter out transitions to dead states:\n        for(int j=0;j<numTransitions;j++) {\n          a.getNextTransition(t);\n          if (liveSet.get(t.dest)) {\n            result.addTransition(map[i], map[t.dest], t.min, t.max);\n          }\n        }\n      }\n    }\n\n    // nocommit need test case for \"accepts no strings\"\n\n    result.finish();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#removeDeadStates(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#removeDeadStates(LightAutomaton).mjava","sourceNew":"  /**\n   * Removes transitions to dead states (a state is \"dead\" if it is not\n   * reachable from the initial state or no accept state is reachable from it.)\n   */\n  public static LightAutomaton removeDeadStates(LightAutomaton a) {\n    int numStates = a.getNumStates();\n    BitSet liveSet = getLiveStates(a);\n\n    int[] map = new int[numStates];\n\n    LightAutomaton result = new LightAutomaton();\n    //System.out.println(\"liveSet: \" + liveSet + \" numStates=\" + numStates);\n    for(int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        map[i] = result.createState();\n        result.setAccept(map[i], a.isAccept(i));\n      }\n    }\n\n    Transition t = new Transition();\n\n    for (int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        int numTransitions = a.initTransition(i, t);\n        // filter out transitions to dead states:\n        for(int j=0;j<numTransitions;j++) {\n          a.getNextTransition(t);\n          if (liveSet.get(t.dest)) {\n            result.addTransition(map[i], map[t.dest], t.min, t.max);\n          }\n        }\n      }\n    }\n\n    result.finishState();\n    assert hasDeadStates(result) == false;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Removes transitions to dead states (a state is \"dead\" if it is not\n   * reachable from the initial state or no accept state is reachable from it.)\n   */\n  public static LightAutomaton removeDeadStates(LightAutomaton a) {\n    int numStates = a.getNumStates();\n    BitSet liveSet = getLiveStates(a);\n\n    int[] map = new int[numStates];\n\n    LightAutomaton result = new LightAutomaton();\n    //System.out.println(\"liveSet: \" + liveSet + \" numStates=\" + numStates);\n    for(int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        map[i] = result.createState();\n        result.setAccept(map[i], a.isAccept(i));\n      }\n    }\n\n    Transition t = new Transition();\n\n    for (int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        int numTransitions = a.initTransition(i, t);\n        // filter out transitions to dead states:\n        for(int j=0;j<numTransitions;j++) {\n          a.getNextTransition(t);\n          if (liveSet.get(t.dest)) {\n            result.addTransition(map[i], map[t.dest], t.min, t.max);\n          }\n        }\n      }\n    }\n\n    // nocommit need test case for \"accepts no strings\"\n\n    result.finish();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#removeDeadStates(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#removeDeadStates(LightAutomaton).mjava","sourceNew":"  /**\n   * Removes transitions to dead states (a state is \"dead\" if it is not\n   * reachable from the initial state or no accept state is reachable from it.)\n   */\n  public static Automaton removeDeadStates(Automaton a) {\n    int numStates = a.getNumStates();\n    BitSet liveSet = getLiveStates(a);\n\n    int[] map = new int[numStates];\n\n    Automaton result = new Automaton();\n    //System.out.println(\"liveSet: \" + liveSet + \" numStates=\" + numStates);\n    for(int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        map[i] = result.createState();\n        result.setAccept(map[i], a.isAccept(i));\n      }\n    }\n\n    Transition t = new Transition();\n\n    for (int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        int numTransitions = a.initTransition(i, t);\n        // filter out transitions to dead states:\n        for(int j=0;j<numTransitions;j++) {\n          a.getNextTransition(t);\n          if (liveSet.get(t.dest)) {\n            result.addTransition(map[i], map[t.dest], t.min, t.max);\n          }\n        }\n      }\n    }\n\n    result.finishState();\n    assert hasDeadStates(result) == false;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Removes transitions to dead states (a state is \"dead\" if it is not\n   * reachable from the initial state or no accept state is reachable from it.)\n   */\n  public static LightAutomaton removeDeadStates(LightAutomaton a) {\n    int numStates = a.getNumStates();\n    BitSet liveSet = getLiveStates(a);\n\n    int[] map = new int[numStates];\n\n    LightAutomaton result = new LightAutomaton();\n    //System.out.println(\"liveSet: \" + liveSet + \" numStates=\" + numStates);\n    for(int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        map[i] = result.createState();\n        result.setAccept(map[i], a.isAccept(i));\n      }\n    }\n\n    Transition t = new Transition();\n\n    for (int i=0;i<numStates;i++) {\n      if (liveSet.get(i)) {\n        int numTransitions = a.initTransition(i, t);\n        // filter out transitions to dead states:\n        for(int j=0;j<numTransitions;j++) {\n          a.getNextTransition(t);\n          if (liveSet.get(t.dest)) {\n            result.addTransition(map[i], map[t.dest], t.min, t.max);\n          }\n        }\n      }\n    }\n\n    result.finishState();\n    assert hasDeadStates(result) == false;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a67285d1a68175d877eb9fd1624fccad3db028ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}