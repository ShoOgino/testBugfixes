{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#SolrClientNodeStateProvider(CloudSolrClient).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#SolrClientNodeStateProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientNodeStateProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    this.zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getProperties()));\n      });\n    });\n    if(log.isDebugEnabled()) INST = this;\n  }\n\n","sourceOld":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), new HashMap<>()));\n      });\n    });\n    if(log.isDebugEnabled()) INST = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#SolrClientNodeStateProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#SolrClientNodeStateProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientNodeStateProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    this.zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), replica.getCoreName(), collName, shard, replica.getProperties()));\n      });\n    });\n    if(log.isDebugEnabled()) INST = this;\n  }\n\n","sourceOld":"  public SolrClientNodeStateProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    this.zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getProperties()));\n      });\n    });\n    if(log.isDebugEnabled()) INST = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#SolrClientNodeStateProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#SolrClientNodeStateProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientNodeStateProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    this.zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(collName, shard, replica, new HashMap<>(replica.getProperties())));\n      });\n    });\n    if(log.isDebugEnabled()) INST = this;\n  }\n\n","sourceOld":"  public SolrClientNodeStateProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    this.zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), replica.getCoreName(), collName, shard, replica.getProperties()));\n      });\n    });\n    if(log.isDebugEnabled()) INST = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6bec22994bec86702ad05304ae983f7be5b5a7","date":1530715192,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#SolrClientNodeStateProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#SolrClientNodeStateProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientNodeStateProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    try {\n      readReplicaDetails();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n    if(log.isDebugEnabled()) INST = this;\n  }\n\n","sourceOld":"  public SolrClientNodeStateProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    this.zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(collName, shard, replica, new HashMap<>(replica.getProperties())));\n      });\n    });\n    if(log.isDebugEnabled()) INST = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#SolrClientNodeStateProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#SolrClientNodeStateProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientNodeStateProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    try {\n      readReplicaDetails();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n    if(log.isDebugEnabled()) INST = this;\n  }\n\n","sourceOld":"  public SolrClientNodeStateProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    this.zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(collName, shard, replica, new HashMap<>(replica.getProperties())));\n      });\n    });\n    if(log.isDebugEnabled()) INST = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#SolrClientNodeStateProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#SolrClientNodeStateProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientNodeStateProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    try {\n      readReplicaDetails();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n    if(log.isDebugEnabled()) INST = this;\n  }\n\n","sourceOld":"  public SolrClientNodeStateProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    this.zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(collName, shard, replica, new HashMap<>(replica.getProperties())));\n      });\n    });\n    if(log.isDebugEnabled()) INST = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1bbcda32e5cd37ef61ea1190bacd080308e22070","7d6bec22994bec86702ad05304ae983f7be5b5a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d6bec22994bec86702ad05304ae983f7be5b5a7"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["1bbcda32e5cd37ef61ea1190bacd080308e22070","7d6bec22994bec86702ad05304ae983f7be5b5a7"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7d6bec22994bec86702ad05304ae983f7be5b5a7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}