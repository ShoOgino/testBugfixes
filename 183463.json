{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingTint().mjava","commits":[{"id":"d9fe3175bbaa122d67f736a75c2984617c502cc0","date":1490722938,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingTint().mjava","pathOld":"/dev/null","sourceNew":"  private void testBasicGroupingTint() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_ti\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_ti\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_ti\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_ti\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"60\");\n      indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_ti\", \"70\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), sum(field_ti), min(field_ti), max(field_ti), avg(field_ti) from collection1 where text='XXXX' group by str_s order by sum(field_ti) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 10); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 14); //avg(field_i)\n\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b741b54c163686a5fd077895a797daa9b0b95f","date":1490873946,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingTint().mjava","pathOld":"/dev/null","sourceNew":"  private void testBasicGroupingTint() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_ti\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_ti\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_ti\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_ti\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"60\");\n      indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_ti\", \"70\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), sum(field_ti), min(field_ti), max(field_ti), avg(field_ti) from collection1 where text='XXXX' group by str_s order by sum(field_ti) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 10); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 14); //avg(field_i)\n\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c58a62203315881cce5089ef67ffee6b8a988a75","date":1544601986,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingTint().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingTint().mjava","sourceNew":"  private void testBasicGroupingTint() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_ti\", \"7\");\n    indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_ti\", \"8\");\n    indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_ti\", \"20\");\n    indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_ti\", \"11\");\n    indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"30\");\n    indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"40\");\n    indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"50\");\n    indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"60\");\n    indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_ti\", \"70\");\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select str_s, count(*), sum(field_ti), min(field_ti), max(field_ti), avg(field_ti) from collection1 where text='XXXX' group by str_s order by sum(field_ti) asc limit 2\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 10); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 14); // avg(field_i)\n\n  }\n\n","sourceOld":"  private void testBasicGroupingTint() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_ti\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_ti\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_ti\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_ti\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"60\");\n      indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_ti\", \"70\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select str_s, count(*), sum(field_ti), min(field_ti), max(field_ti), avg(field_ti) from collection1 where text='XXXX' group by str_s order by sum(field_ti) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 10); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 14); //avg(field_i)\n\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"600937be95b5a041815220371fa7882e73031d56","date":1551734162,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingTint().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingTint().mjava","sourceNew":"  private void testBasicGroupingTint() throws Exception {\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_ti\", \"7\");\n    indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_ti\", \"8\");\n    indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_ti\", \"20\");\n    indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_ti\", \"11\");\n    indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"30\");\n    indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"40\");\n    indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"50\");\n    indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"60\");\n    indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_ti\", \"70\");\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select str_s, count(*), sum(field_ti), min(field_ti), max(field_ti), avg(field_ti) from collection1 where text='XXXX' group by str_s order by sum(field_ti) asc limit 2\");\n\n    List<Tuple> tuples = getTuples(sParams);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 10); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 14); // avg(field_i)\n\n  }\n\n","sourceOld":"  private void testBasicGroupingTint() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_ti\", \"7\");\n    indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_ti\", \"8\");\n    indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_ti\", \"20\");\n    indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_ti\", \"11\");\n    indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"30\");\n    indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"40\");\n    indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"50\");\n    indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"60\");\n    indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_ti\", \"70\");\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select str_s, count(*), sum(field_ti), min(field_ti), max(field_ti), avg(field_ti) from collection1 where text='XXXX' group by str_s order by sum(field_ti) asc limit 2\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 10); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 14); // avg(field_i)\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22191e72f6c40dec88c9b94f9bb55c7527772a47","date":1553715407,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingTint().mjava","sourceNew":null,"sourceOld":"  private void testBasicGroupingTint() throws Exception {\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_ti\", \"7\");\n    indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_ti\", \"8\");\n    indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_ti\", \"20\");\n    indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_ti\", \"11\");\n    indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"30\");\n    indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"40\");\n    indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"50\");\n    indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_ti\", \"60\");\n    indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_ti\", \"70\");\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\",\n        \"select str_s, count(*), sum(field_ti), min(field_ti), max(field_ti), avg(field_ti) from collection1 where text='XXXX' group by str_s order by sum(field_ti) asc limit 2\");\n\n    List<Tuple> tuples = getTuples(sParams);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 10); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 14); // avg(field_i)\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["600937be95b5a041815220371fa7882e73031d56"],"a9b741b54c163686a5fd077895a797daa9b0b95f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"600937be95b5a041815220371fa7882e73031d56":["c58a62203315881cce5089ef67ffee6b8a988a75"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c58a62203315881cce5089ef67ffee6b8a988a75":["d9fe3175bbaa122d67f736a75c2984617c502cc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22191e72f6c40dec88c9b94f9bb55c7527772a47"]},"commit2Childs":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a9b741b54c163686a5fd077895a797daa9b0b95f":[],"600937be95b5a041815220371fa7882e73031d56":["22191e72f6c40dec88c9b94f9bb55c7527772a47"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["c58a62203315881cce5089ef67ffee6b8a988a75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a9b741b54c163686a5fd077895a797daa9b0b95f","d9fe3175bbaa122d67f736a75c2984617c502cc0"],"c58a62203315881cce5089ef67ffee6b8a988a75":["600937be95b5a041815220371fa7882e73031d56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a9b741b54c163686a5fd077895a797daa9b0b95f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}