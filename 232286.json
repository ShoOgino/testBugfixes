{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#testBasic1().mjava","commits":[{"id":"24a98f5fdd23e04f85819dbc63b47a12f7c44311","date":1482439157,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#testBasic1().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic1() throws Exception {\n    SynonymMap.Builder b = new SynonymMap.Builder(true);\n    add(b, \"a\", \"foo\", true);\n    add(b, \"a b\", \"bar fee\", true);\n    add(b, \"b c\", \"dog collar\", true);\n    add(b, \"c d\", \"dog harness holder extras\", true);\n    add(b, \"m c e\", \"dog barks loudly\", false);\n    add(b, \"i j k\", \"feep\", true);\n\n    add(b, \"e f\", \"foo bar\", false);\n    add(b, \"e f\", \"baz bee\", false);\n\n    add(b, \"z\", \"boo\", false);\n    add(b, \"y\", \"bee\", true);\n    Analyzer a = getFlattenAnalyzer(b, true);\n\n    assertAnalyzesTo(a, \"a b c\",\n                     new String[] {\"bar\", \"a\", \"fee\", \"b\", \"c\"},\n                     new int[] {1, 0, 1, 0, 1});\n\n    assertAnalyzesTo(a, \"x a b c d\",\n                     new String[] {\"x\", \"bar\", \"a\", \"fee\", \"b\", \"dog\", \"c\", \"harness\", \"d\", \"holder\", \"extras\"},\n                     new int[] {1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1});\n\n    assertAnalyzesTo(a, \"a b a\",\n                     new String[] {\"bar\", \"a\", \"fee\", \"b\", \"foo\", \"a\"},\n                     new int[] {1, 0, 1, 0, 1, 0});\n\n    // outputs no longer add to one another:\n    assertAnalyzesTo(a, \"c d c d\",\n                     new String[] {\"dog\", \"c\", \"harness\", \"d\", \"holder\", \"extras\", \"dog\", \"c\", \"harness\", \"d\", \"holder\", \"extras\"},\n                     new int[] {1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1});\n\n    // two outputs for same input\n    assertAnalyzesTo(a, \"e f\",\n                     new String[] {\"foo\", \"baz\", \"bar\", \"bee\"},\n                     new int[] {1, 0, 1, 0});\n\n    // verify multi-word / single-output offsets:\n    assertAnalyzesTo(a, \"g i j k g\",\n                     new String[] {\"g\", \"feep\", \"i\", \"j\", \"k\", \"g\"},\n                     new int[] {1, 1, 0, 1, 1, 1});\n\n    // mixed keepOrig true/false:\n    assertAnalyzesTo(a, \"a m c e x\",\n                     new String[] {\"foo\", \"a\", \"dog\", \"barks\", \"loudly\", \"x\"},\n                     new int[] {1, 0, 1, 1, 1, 1});\n    assertAnalyzesTo(a, \"c d m c e x\",\n                     new String[] {\"dog\", \"c\", \"harness\", \"d\", \"holder\", \"extras\", \"dog\", \"barks\", \"loudly\",\"x\"},\n                     new int[] {1, 0, 1, 0, 1, 1, 1, 1, 1, 1});\n    assertTrue(synFilter.getCaptureCount() > 0);\n\n    // no captureStates when no syns matched\n    assertAnalyzesTo(a, \"p q r s t\",\n                     new String[] {\"p\", \"q\", \"r\", \"s\", \"t\"},\n                     new int[] {1, 1, 1, 1, 1});\n    assertEquals(0, synFilter.getCaptureCount());\n\n    // captureStates are necessary for the single-token syn case:\n    assertAnalyzesTo(a, \"p q z y t\",\n                     new String[] {\"p\", \"q\", \"boo\", \"bee\", \"y\", \"t\"},\n                     new int[] {1, 1, 1, 1, 0, 1});\n    assertTrue(synFilter.getCaptureCount() > 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#testBasic1().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic1() throws Exception {\n    SynonymMap.Builder b = new SynonymMap.Builder(true);\n    add(b, \"a\", \"foo\", true);\n    add(b, \"a b\", \"bar fee\", true);\n    add(b, \"b c\", \"dog collar\", true);\n    add(b, \"c d\", \"dog harness holder extras\", true);\n    add(b, \"m c e\", \"dog barks loudly\", false);\n    add(b, \"i j k\", \"feep\", true);\n\n    add(b, \"e f\", \"foo bar\", false);\n    add(b, \"e f\", \"baz bee\", false);\n\n    add(b, \"z\", \"boo\", false);\n    add(b, \"y\", \"bee\", true);\n    Analyzer a = getFlattenAnalyzer(b, true);\n\n    assertAnalyzesTo(a, \"a b c\",\n                     new String[] {\"bar\", \"a\", \"fee\", \"b\", \"c\"},\n                     new int[] {1, 0, 1, 0, 1});\n\n    assertAnalyzesTo(a, \"x a b c d\",\n                     new String[] {\"x\", \"bar\", \"a\", \"fee\", \"b\", \"dog\", \"c\", \"harness\", \"d\", \"holder\", \"extras\"},\n                     new int[] {1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1});\n\n    assertAnalyzesTo(a, \"a b a\",\n                     new String[] {\"bar\", \"a\", \"fee\", \"b\", \"foo\", \"a\"},\n                     new int[] {1, 0, 1, 0, 1, 0});\n\n    // outputs no longer add to one another:\n    assertAnalyzesTo(a, \"c d c d\",\n                     new String[] {\"dog\", \"c\", \"harness\", \"d\", \"holder\", \"extras\", \"dog\", \"c\", \"harness\", \"d\", \"holder\", \"extras\"},\n                     new int[] {1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1});\n\n    // two outputs for same input\n    assertAnalyzesTo(a, \"e f\",\n                     new String[] {\"foo\", \"baz\", \"bar\", \"bee\"},\n                     new int[] {1, 0, 1, 0});\n\n    // verify multi-word / single-output offsets:\n    assertAnalyzesTo(a, \"g i j k g\",\n                     new String[] {\"g\", \"feep\", \"i\", \"j\", \"k\", \"g\"},\n                     new int[] {1, 1, 0, 1, 1, 1});\n\n    // mixed keepOrig true/false:\n    assertAnalyzesTo(a, \"a m c e x\",\n                     new String[] {\"foo\", \"a\", \"dog\", \"barks\", \"loudly\", \"x\"},\n                     new int[] {1, 0, 1, 1, 1, 1});\n    assertAnalyzesTo(a, \"c d m c e x\",\n                     new String[] {\"dog\", \"c\", \"harness\", \"d\", \"holder\", \"extras\", \"dog\", \"barks\", \"loudly\",\"x\"},\n                     new int[] {1, 0, 1, 0, 1, 1, 1, 1, 1, 1});\n    assertTrue(synFilter.getCaptureCount() > 0);\n\n    // no captureStates when no syns matched\n    assertAnalyzesTo(a, \"p q r s t\",\n                     new String[] {\"p\", \"q\", \"r\", \"s\", \"t\"},\n                     new int[] {1, 1, 1, 1, 1});\n    assertEquals(0, synFilter.getCaptureCount());\n\n    // captureStates are necessary for the single-token syn case:\n    assertAnalyzesTo(a, \"p q z y t\",\n                     new String[] {\"p\", \"q\", \"boo\", \"bee\", \"y\", \"t\"},\n                     new int[] {1, 1, 1, 1, 0, 1});\n    assertTrue(synFilter.getCaptureCount() > 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24a98f5fdd23e04f85819dbc63b47a12f7c44311"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24a98f5fdd23e04f85819dbc63b47a12f7c44311"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a98f5fdd23e04f85819dbc63b47a12f7c44311","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}