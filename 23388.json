{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,Token[]).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,Token[]).mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,Token[]).mjava","sourceNew":"  public void checkCJKToken(final String str, final Token[] out_tokens) throws IOException {\n    CJKTokenizer tokenizer = new CJKTokenizer(new StringReader(str));\n    int i = 0;\n    System.out.println(\"string[\" + str + \"]\");\n    System.out.print(\"tokens[\");\n    final Token reusableToken = new Token();\n    for (Token token = tokenizer.next(reusableToken) ;\n         token != null                               ; \n         token = tokenizer.next(reusableToken)       ) {\n      if (token.term().equals(out_tokens[i].term()) \n          && token.startOffset() == out_tokens[i].startOffset() \n          && token.endOffset() == out_tokens[i].endOffset() \n          && token.type().equals(out_tokens[i].type()) ) {\n        System.out.print( token.term() + \" \");\n      }\n      else {\n        fail(token.term() + \" (start: \" + token.startOffset() \n             + \" end: \" + token.endOffset() + \" type: \" + token.type() + \") != \"\n             + out_tokens[i].term() + \" (start: \" + out_tokens[i].startOffset() \n             + \" end: \" + out_tokens[i].endOffset() \n             + \" type: \" + out_tokens[i].type() + \")\");\n        break;\n      }\n      ++i;\n    }\n    System.out.println(\"]\" + System.getProperty(\"line.separator\"));\n  }\n\n","sourceOld":"  public void checkCJKToken(final String str, final Token[] out_tokens) throws IOException {\n    CJKTokenizer tokenizer = new CJKTokenizer(new StringReader(str));\n    int i = 0;\n    System.out.println(\"string[\" + str + \"]\");\n    System.out.print(\"tokens[\");\n    final Token reusableToken = new Token();\n    for (Token token = tokenizer.next(reusableToken) ;\n         token != null                               ; \n         token = tokenizer.next(reusableToken)       ) {\n      if (token.term().equals(out_tokens[i].term()) \n          && token.startOffset() == out_tokens[i].startOffset() \n          && token.endOffset() == out_tokens[i].endOffset() \n          && token.type().equals(out_tokens[i].type()) ) {\n        System.out.print( token.term() + \" \");\n      }\n      else {\n        fail(token.term() + \" (start: \" + token.startOffset() \n             + \" end: \" + token.endOffset() + \" type: \" + token.type() + \") != \"\n             + out_tokens[i].term() + \" (start: \" + out_tokens[i].startOffset() \n             + \" end: \" + out_tokens[i].endOffset() \n             + \" type: \" + out_tokens[i].type() + \")\");\n        break;\n      }\n      ++i;\n    }\n    System.out.println(\"]\" + System.getProperty(\"line.separator\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,Token[]).mjava","sourceNew":null,"sourceOld":"  public void checkCJKToken(final String str, final Token[] out_tokens) throws IOException {\n    CJKTokenizer tokenizer = new CJKTokenizer(new StringReader(str));\n    int i = 0;\n    System.out.println(\"string[\" + str + \"]\");\n    System.out.print(\"tokens[\");\n    final Token reusableToken = new Token();\n    for (Token token = tokenizer.next(reusableToken) ;\n         token != null                               ; \n         token = tokenizer.next(reusableToken)       ) {\n      if (token.term().equals(out_tokens[i].term()) \n          && token.startOffset() == out_tokens[i].startOffset() \n          && token.endOffset() == out_tokens[i].endOffset() \n          && token.type().equals(out_tokens[i].type()) ) {\n        System.out.print( token.term() + \" \");\n      }\n      else {\n        fail(token.term() + \" (start: \" + token.startOffset() \n             + \" end: \" + token.endOffset() + \" type: \" + token.type() + \") != \"\n             + out_tokens[i].term() + \" (start: \" + out_tokens[i].startOffset() \n             + \" end: \" + out_tokens[i].endOffset() \n             + \" type: \" + out_tokens[i].type() + \")\");\n        break;\n      }\n      ++i;\n    }\n    System.out.println(\"]\" + System.getProperty(\"line.separator\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b5756469957918cac40a831acec9cf01c8c2bb3"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}