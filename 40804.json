{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#mileage().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#mileage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void mileage() {\n    Context context = AbstractDataImportHandlerTest.getContext(null, null,\n            null, 0, getFields(), null);\n\n    Map<String, Object> src = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    src.put(\"rowdata\", s);\n    Map<String, Object> result = new RegexTransformer().transformRow(src,\n            context);\n    Assert.assertEquals(3, result.size());\n    Assert.assertEquals(s, result.get(\"rowdata\"));\n    Assert.assertEquals(\"26\", result.get(\"highway_mileage\"));\n    Assert.assertEquals(\"19\", result.get(\"city_mileage\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d183f54b5c7a1c64bd2935a5d5bd71091ebe4198","date":1235539651,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#mileage().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#mileage().mjava","sourceNew":"  @Test\n  public void mileage() {\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(\"replaceWith\", \"*** $1 ***\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = AbstractDataImportHandlerTest.createMap(\"name\", \"e\");\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver, null, 0, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    Assert.assertEquals(4, result.size());\n    Assert.assertEquals(s, result.get(\"rowdata\"));\n    Assert.assertEquals(\"26\", result.get(\"highway_mileage\"));\n    Assert.assertEquals(\"19\", result.get(\"city_mileage\"));\n    Assert.assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n  }\n\n","sourceOld":"  @Test\n  public void mileage() {\n    Context context = AbstractDataImportHandlerTest.getContext(null, null,\n            null, 0, getFields(), null);\n\n    Map<String, Object> src = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    src.put(\"rowdata\", s);\n    Map<String, Object> result = new RegexTransformer().transformRow(src,\n            context);\n    Assert.assertEquals(3, result.size());\n    Assert.assertEquals(s, result.get(\"rowdata\"));\n    Assert.assertEquals(\"26\", result.get(\"highway_mileage\"));\n    Assert.assertEquals(\"19\", result.get(\"city_mileage\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"594d4ee17b3d941ed34827ca6646e378cf7d8d2a","date":1239868870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#mileage().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#mileage().mjava","sourceNew":"  @Test\n  public void mileage() {\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(\"replaceWith\", \"*** $1 ***\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = AbstractDataImportHandlerTest.createMap(\"name\", \"e\");\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    Assert.assertEquals(4, result.size());\n    Assert.assertEquals(s, result.get(\"rowdata\"));\n    Assert.assertEquals(\"26\", result.get(\"highway_mileage\"));\n    Assert.assertEquals(\"19\", result.get(\"city_mileage\"));\n    Assert.assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n  }\n\n","sourceOld":"  @Test\n  public void mileage() {\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(\"replaceWith\", \"*** $1 ***\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = AbstractDataImportHandlerTest.createMap(\"name\", \"e\");\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver, null, 0, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    Assert.assertEquals(4, result.size());\n    Assert.assertEquals(s, result.get(\"rowdata\"));\n    Assert.assertEquals(\"26\", result.get(\"highway_mileage\"));\n    Assert.assertEquals(\"19\", result.get(\"city_mileage\"));\n    Assert.assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72f7cca1d9eaf9232fb247ff10b18fb6e94d3250","date":1239876954,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#mileage().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#mileage().mjava","sourceNew":"  @Test\n  public void mileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = AbstractDataImportHandlerTest.createMap(\"name\", \"e\");\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    Assert.assertEquals(5, result.size());\n    Assert.assertEquals(s, result.get(\"rowdata\"));\n    Assert.assertEquals(\"26\", result.get(\"highway_mileage\"));\n    Assert.assertEquals(\"19\", result.get(\"city_mileage\"));\n    Assert.assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    Assert.assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","sourceOld":"  @Test\n  public void mileage() {\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(\"replaceWith\", \"*** $1 ***\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = AbstractDataImportHandlerTest.createMap(\"name\", \"e\");\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    Assert.assertEquals(4, result.size());\n    Assert.assertEquals(s, result.get(\"rowdata\"));\n    Assert.assertEquals(\"26\", result.get(\"highway_mileage\"));\n    Assert.assertEquals(\"19\", result.get(\"city_mileage\"));\n    Assert.assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n  }\n\n","bugFix":null,"bugIntro":["4e08ecdf9a28c81716b89f59f7db35cda7609a09","4e08ecdf9a28c81716b89f59f7db35cda7609a09","4e08ecdf9a28c81716b89f59f7db35cda7609a09","4e08ecdf9a28c81716b89f59f7db35cda7609a09"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#mileage().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#mileage().mjava","sourceNew":"  @Test\n  public void mileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = AbstractDataImportHandlerTest.createMap(\"name\", \"e\");\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    Assert.assertEquals(5, result.size());\n    Assert.assertEquals(s, result.get(\"rowdata\"));\n    Assert.assertEquals(\"26\", result.get(\"highway_mileage\"));\n    Assert.assertEquals(\"19\", result.get(\"city_mileage\"));\n    Assert.assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    Assert.assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","sourceOld":"  @Test\n  public void mileage() {\n    // init a whole pile of fields\n    List<Map<String, String>> fields = getFields();\n\n    // add another regex which reuses result from previous regex again!\n    // <field column=\"hltCityMPG\" sourceColName=\"rowdata\" regexp=\"(${e.city_mileage})\" />\n    Map<String, String> fld = getField(\"hltCityMPG\", \"string\",\n            \".*(${e.city_mileage})\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"*** $1 ***\");\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITHOUT a replaceWith\n    // <field column=\"t1\" sourceColName=\"rowdata\" regexp=\"duff\" />\n    fld = getField(\"t1\", \"string\",\"duff\", \"rowdata\", null);\n    fields.add(fld);\n\n    //  **ATTEMPTS** a match WITH a replaceWith\n    // <field column=\"t2\" sourceColName=\"rowdata\" regexp=\"duff\" replaceWith=\"60\"/>\n    fld = getField(\"t2\", \"string\",\"duff\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"60\");\n    fields.add(fld);\n\n    //  regex WITH both replaceWith and groupName (groupName ignored!)\n    // <field column=\"t3\" sourceColName=\"rowdata\" regexp=\"(Range)\" />\n    fld = getField(\"t3\", \"string\",\"(Range)\", \"rowdata\", null);\n    fld.put(REPLACE_WITH, \"range\");\n    fld.put(GROUP_NAMES,\"t4,t5\");\n    fields.add(fld);\n\n    Map<String, Object> row = new HashMap<String, Object>();\n    String s = \"Fuel Economy Range: 26 mpg Hwy, 19 mpg City\";\n    row.put(\"rowdata\", s);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> eAttrs = AbstractDataImportHandlerTest.createMap(\"name\", \"e\");\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver, null, Context.FULL_DUMP, fields, eAttrs);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(row, context);\n    Assert.assertEquals(5, result.size());\n    Assert.assertEquals(s, result.get(\"rowdata\"));\n    Assert.assertEquals(\"26\", result.get(\"highway_mileage\"));\n    Assert.assertEquals(\"19\", result.get(\"city_mileage\"));\n    Assert.assertEquals(\"*** 19 *** mpg City\", result.get(\"hltCityMPG\"));\n    Assert.assertEquals(\"Fuel Economy range: 26 mpg Hwy, 19 mpg City\", result.get(\"t3\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d183f54b5c7a1c64bd2935a5d5bd71091ebe4198":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"ad94625fb8d088209f46650c8097196fec67f00c":["72f7cca1d9eaf9232fb247ff10b18fb6e94d3250"],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["d183f54b5c7a1c64bd2935a5d5bd71091ebe4198"],"72f7cca1d9eaf9232fb247ff10b18fb6e94d3250":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["d183f54b5c7a1c64bd2935a5d5bd71091ebe4198"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d183f54b5c7a1c64bd2935a5d5bd71091ebe4198":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["72f7cca1d9eaf9232fb247ff10b18fb6e94d3250"],"72f7cca1d9eaf9232fb247ff10b18fb6e94d3250":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}