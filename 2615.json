{"path":"src/java/org/apache/lucene/queryParser/QueryParser#addClause(List[BooleanClause],int,int,Query).mjava","commits":[{"id":"84dc138e05008664b5e01dc83f6ad95bd73b91c5","date":1256054789,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#addClause(List[BooleanClause],int,int,Query).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#addClause(List,int,int,Query).mjava","sourceNew":"  protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == OR_OPERATOR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","sourceOld":"  protected void addClause(List clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n      BooleanClause c = (BooleanClause) clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = (BooleanClause) clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == OR_OPERATOR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#addClause(List[BooleanClause],int,int,Query).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#addClause(List[BooleanClause],int,int,Query).mjava","sourceNew":"  protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == OR_OPERATOR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","sourceOld":"  protected void addClause(List<BooleanClause> clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = clauses.get(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == OR_OPERATOR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.add(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}