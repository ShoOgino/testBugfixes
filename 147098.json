{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCapitalizationFilter#testCapitalization().mjava","commits":[{"id":"45e349695223fccf7b1b9d08ba85a1c919b06f7c","date":1277292317,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCapitalizationFilter#testCapitalization().mjava","pathOld":"/dev/null","sourceNew":"  public void testCapitalization() throws Exception {\n    CharArraySet keep = new CharArraySet(TEST_VERSION_CURRENT,\n        Arrays.asList(\"and\", \"the\", \"it\", \"BIG\"), false);\n    \n    assertCapitalizesTo(\"kiTTEN\", new String[] { \"Kitten\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    assertCapitalizesTo(\"and\", new String[] { \"And\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    assertCapitalizesTo(\"AnD\", new String[] { \"And\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n\n    //first is not forced, but it's not a keep word, either\n    assertCapitalizesTo(\"AnD\", new String[] { \"And\" }, \n        true, keep, false, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n\n    assertCapitalizesTo(\"big\", new String[] { \"Big\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n\n    assertCapitalizesTo(\"BIG\", new String[] { \"BIG\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    assertCapitalizesToKeyword(\"Hello thEre my Name is Ryan\", \"Hello there my name is ryan\", \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    // now each token\n    assertCapitalizesTo(\"Hello thEre my Name is Ryan\", \n        new String[] { \"Hello\", \"There\", \"My\", \"Name\", \"Is\", \"Ryan\" }, \n        false, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n           \n    // now only the long words\n    assertCapitalizesTo(\"Hello thEre my Name is Ryan\", \n        new String[] { \"Hello\", \"There\", \"my\", \"Name\", \"is\", \"Ryan\" }, \n        false, keep, true, null, 3, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    // without prefix\n    assertCapitalizesTo(\"McKinley\", \n        new String[] { \"Mckinley\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    // Now try some prefixes\n    List<char[]> okPrefix = new ArrayList<char[]>();\n    okPrefix.add(\"McK\".toCharArray());\n    \n    assertCapitalizesTo(\"McKinley\", \n        new String[] { \"McKinley\" }, \n        true, keep, true, okPrefix, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    // now try some stuff with numbers\n    assertCapitalizesTo(\"1st 2nd third\", \n        new String[] { \"1st\", \"2nd\", \"Third\" }, \n        false, keep, false, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);    \n    \n    assertCapitalizesToKeyword(\"the The the\", \"The The the\", \n        false, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCapitalizationFilter#testCapitalization().mjava","pathOld":"/dev/null","sourceNew":"  public void testCapitalization() throws Exception {\n    CharArraySet keep = new CharArraySet(TEST_VERSION_CURRENT,\n        Arrays.asList(\"and\", \"the\", \"it\", \"BIG\"), false);\n    \n    assertCapitalizesTo(\"kiTTEN\", new String[] { \"Kitten\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    assertCapitalizesTo(\"and\", new String[] { \"And\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    assertCapitalizesTo(\"AnD\", new String[] { \"And\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n\n    //first is not forced, but it's not a keep word, either\n    assertCapitalizesTo(\"AnD\", new String[] { \"And\" }, \n        true, keep, false, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n\n    assertCapitalizesTo(\"big\", new String[] { \"Big\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n\n    assertCapitalizesTo(\"BIG\", new String[] { \"BIG\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    assertCapitalizesToKeyword(\"Hello thEre my Name is Ryan\", \"Hello there my name is ryan\", \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    // now each token\n    assertCapitalizesTo(\"Hello thEre my Name is Ryan\", \n        new String[] { \"Hello\", \"There\", \"My\", \"Name\", \"Is\", \"Ryan\" }, \n        false, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n           \n    // now only the long words\n    assertCapitalizesTo(\"Hello thEre my Name is Ryan\", \n        new String[] { \"Hello\", \"There\", \"my\", \"Name\", \"is\", \"Ryan\" }, \n        false, keep, true, null, 3, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    // without prefix\n    assertCapitalizesTo(\"McKinley\", \n        new String[] { \"Mckinley\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    // Now try some prefixes\n    List<char[]> okPrefix = new ArrayList<char[]>();\n    okPrefix.add(\"McK\".toCharArray());\n    \n    assertCapitalizesTo(\"McKinley\", \n        new String[] { \"McKinley\" }, \n        true, keep, true, okPrefix, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    // now try some stuff with numbers\n    assertCapitalizesTo(\"1st 2nd third\", \n        new String[] { \"1st\", \"2nd\", \"Third\" }, \n        false, keep, false, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);    \n    \n    assertCapitalizesToKeyword(\"the The the\", \"The The the\", \n        false, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCapitalizationFilter#testCapitalization().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCapitalizationFilter#testCapitalization().mjava","sourceNew":"  public void testCapitalization() throws Exception {\n    CharArraySet keep = new CharArraySet(TEST_VERSION_CURRENT,\n        Arrays.asList(\"and\", \"the\", \"it\", \"BIG\"), false);\n    \n    assertCapitalizesTo(\"kiTTEN\", new String[] { \"Kitten\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    assertCapitalizesTo(\"and\", new String[] { \"And\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    assertCapitalizesTo(\"AnD\", new String[] { \"And\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n\n    //first is not forced, but it's not a keep word, either\n    assertCapitalizesTo(\"AnD\", new String[] { \"And\" }, \n        true, keep, false, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n\n    assertCapitalizesTo(\"big\", new String[] { \"Big\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n\n    assertCapitalizesTo(\"BIG\", new String[] { \"BIG\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    assertCapitalizesToKeyword(\"Hello thEre my Name is Ryan\", \"Hello there my name is ryan\", \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    // now each token\n    assertCapitalizesTo(\"Hello thEre my Name is Ryan\", \n        new String[] { \"Hello\", \"There\", \"My\", \"Name\", \"Is\", \"Ryan\" }, \n        false, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n           \n    // now only the long words\n    assertCapitalizesTo(\"Hello thEre my Name is Ryan\", \n        new String[] { \"Hello\", \"There\", \"my\", \"Name\", \"is\", \"Ryan\" }, \n        false, keep, true, null, 3, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    // without prefix\n    assertCapitalizesTo(\"McKinley\", \n        new String[] { \"Mckinley\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    // Now try some prefixes\n    List<char[]> okPrefix = new ArrayList<char[]>();\n    okPrefix.add(\"McK\".toCharArray());\n    \n    assertCapitalizesTo(\"McKinley\", \n        new String[] { \"McKinley\" }, \n        true, keep, true, okPrefix, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    // now try some stuff with numbers\n    assertCapitalizesTo(\"1st 2nd third\", \n        new String[] { \"1st\", \"2nd\", \"Third\" }, \n        false, keep, false, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);    \n    \n    assertCapitalizesToKeyword(\"the The the\", \"The The the\", \n        false, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);    \n  }\n\n","sourceOld":"  public void testCapitalization() throws Exception {\n    CharArraySet keep = new CharArraySet(TEST_VERSION_CURRENT,\n        Arrays.asList(\"and\", \"the\", \"it\", \"BIG\"), false);\n    \n    assertCapitalizesTo(\"kiTTEN\", new String[] { \"Kitten\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    assertCapitalizesTo(\"and\", new String[] { \"And\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    assertCapitalizesTo(\"AnD\", new String[] { \"And\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n\n    //first is not forced, but it's not a keep word, either\n    assertCapitalizesTo(\"AnD\", new String[] { \"And\" }, \n        true, keep, false, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n\n    assertCapitalizesTo(\"big\", new String[] { \"Big\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n\n    assertCapitalizesTo(\"BIG\", new String[] { \"BIG\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    assertCapitalizesToKeyword(\"Hello thEre my Name is Ryan\", \"Hello there my name is ryan\", \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    // now each token\n    assertCapitalizesTo(\"Hello thEre my Name is Ryan\", \n        new String[] { \"Hello\", \"There\", \"My\", \"Name\", \"Is\", \"Ryan\" }, \n        false, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n           \n    // now only the long words\n    assertCapitalizesTo(\"Hello thEre my Name is Ryan\", \n        new String[] { \"Hello\", \"There\", \"my\", \"Name\", \"is\", \"Ryan\" }, \n        false, keep, true, null, 3, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    // without prefix\n    assertCapitalizesTo(\"McKinley\", \n        new String[] { \"Mckinley\" }, \n        true, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    // Now try some prefixes\n    List<char[]> okPrefix = new ArrayList<char[]>();\n    okPrefix.add(\"McK\".toCharArray());\n    \n    assertCapitalizesTo(\"McKinley\", \n        new String[] { \"McKinley\" }, \n        true, keep, true, okPrefix, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);\n    \n    // now try some stuff with numbers\n    assertCapitalizesTo(\"1st 2nd third\", \n        new String[] { \"1st\", \"2nd\", \"Third\" }, \n        false, keep, false, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);    \n    \n    assertCapitalizesToKeyword(\"the The the\", \"The The the\", \n        false, keep, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["45e349695223fccf7b1b9d08ba85a1c919b06f7c"],"45e349695223fccf7b1b9d08ba85a1c919b06f7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45e349695223fccf7b1b9d08ba85a1c919b06f7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"45e349695223fccf7b1b9d08ba85a1c919b06f7c":["b89678825b68eccaf09e6ab71675fc0b0af1e099","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45e349695223fccf7b1b9d08ba85a1c919b06f7c","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}