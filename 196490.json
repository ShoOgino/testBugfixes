{"path":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockSkipWriter#BlockSkipWriter(int,int,int,IndexOutput,IndexOutput,IndexOutput).mjava","commits":[{"id":"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1","date":1342716838,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockSkipWriter#BlockSkipWriter(int,int,int,IndexOutput,IndexOutput,IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  public BlockSkipWriter(int skipInterval, int maxSkipLevels, int docCount, IndexOutput docOut, IndexOutput posOut, IndexOutput payOut) {\n    super(skipInterval, maxSkipLevels, docCount);\n    this.docOut = docOut;\n    this.posOut = posOut;\n    this.payOut = payOut;\n    \n    lastSkipDoc = new int[maxSkipLevels];\n    lastSkipDocPointer = new long[maxSkipLevels];\n    if (posOut != null) {\n      lastSkipPosPointer = new long[maxSkipLevels];\n      if (payOut != null) {\n        lastSkipPayPointer = new long[maxSkipLevels];\n      }\n      lastEndOffset = new int[maxSkipLevels];\n      lastPayloadByteUpto = new int[maxSkipLevels];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f81e20fb7784c464473faba4f1fdd4f775e8ee87","date":1343937502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockSkipWriter#BlockSkipWriter(int,int,int,IndexOutput,IndexOutput,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockSkipWriter#BlockSkipWriter(int,int,int,IndexOutput,IndexOutput,IndexOutput).mjava","sourceNew":"  public BlockSkipWriter(int skipInterval, int maxSkipLevels, int docCount, IndexOutput docOut, IndexOutput posOut, IndexOutput payOut) {\n    super(skipInterval, maxSkipLevels, docCount);\n    this.docOut = docOut;\n    this.posOut = posOut;\n    this.payOut = payOut;\n    \n    lastSkipDoc = new int[maxSkipLevels];\n    lastSkipDocPointer = new long[maxSkipLevels];\n    if (posOut != null) {\n      lastSkipPosPointer = new long[maxSkipLevels];\n      if (payOut != null) {\n        lastSkipPayPointer = new long[maxSkipLevels];\n      }\n      lastStartOffset = new int[maxSkipLevels];\n      lastPayloadByteUpto = new int[maxSkipLevels];\n    }\n  }\n\n","sourceOld":"  public BlockSkipWriter(int skipInterval, int maxSkipLevels, int docCount, IndexOutput docOut, IndexOutput posOut, IndexOutput payOut) {\n    super(skipInterval, maxSkipLevels, docCount);\n    this.docOut = docOut;\n    this.posOut = posOut;\n    this.payOut = payOut;\n    \n    lastSkipDoc = new int[maxSkipLevels];\n    lastSkipDocPointer = new long[maxSkipLevels];\n    if (posOut != null) {\n      lastSkipPosPointer = new long[maxSkipLevels];\n      if (payOut != null) {\n        lastSkipPayPointer = new long[maxSkipLevels];\n      }\n      lastEndOffset = new int[maxSkipLevels];\n      lastPayloadByteUpto = new int[maxSkipLevels];\n    }\n  }\n\n","bugFix":["e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"bugIntro":["c2808fd811f853d032fff6b48bb83a4b7b6f48e7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8081d5018e8846bf4080f2809432c759996e749f","date":1344206372,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockSkipWriter#BlockSkipWriter(int,int,int,IndexOutput,IndexOutput,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockSkipWriter#BlockSkipWriter(int,int,int,IndexOutput,IndexOutput,IndexOutput).mjava","sourceNew":"  public BlockSkipWriter(int maxSkipLevels, int blockSize, int docCount, IndexOutput docOut, IndexOutput posOut, IndexOutput payOut) {\n    super(blockSize, maxSkipLevels, docCount);\n    this.docOut = docOut;\n    this.posOut = posOut;\n    this.payOut = payOut;\n    \n    lastSkipDoc = new int[maxSkipLevels];\n    lastSkipDocPointer = new long[maxSkipLevels];\n    if (posOut != null) {\n      lastSkipPosPointer = new long[maxSkipLevels];\n      if (payOut != null) {\n        lastSkipPayPointer = new long[maxSkipLevels];\n      }\n      lastStartOffset = new int[maxSkipLevels];\n      lastPayloadByteUpto = new int[maxSkipLevels];\n    }\n  }\n\n","sourceOld":"  public BlockSkipWriter(int skipInterval, int maxSkipLevels, int docCount, IndexOutput docOut, IndexOutput posOut, IndexOutput payOut) {\n    super(skipInterval, maxSkipLevels, docCount);\n    this.docOut = docOut;\n    this.posOut = posOut;\n    this.payOut = payOut;\n    \n    lastSkipDoc = new int[maxSkipLevels];\n    lastSkipDocPointer = new long[maxSkipLevels];\n    if (posOut != null) {\n      lastSkipPosPointer = new long[maxSkipLevels];\n      if (payOut != null) {\n        lastSkipPayPointer = new long[maxSkipLevels];\n      }\n      lastStartOffset = new int[maxSkipLevels];\n      lastPayloadByteUpto = new int[maxSkipLevels];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e06babaa3e8b78433266149d50d1500ba941652c","date":1344293820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockSkipWriter#BlockSkipWriter(int,int,int,IndexOutput,IndexOutput,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockSkipWriter#BlockSkipWriter(int,int,int,IndexOutput,IndexOutput,IndexOutput).mjava","sourceNew":"  public BlockSkipWriter(int maxSkipLevels, int blockSize, int docCount, IndexOutput docOut, IndexOutput posOut, IndexOutput payOut) {\n    // nocommit figure out what skipMultiplier is best (4 is\n    // total guess):\n    super(blockSize, 4, maxSkipLevels, docCount);\n    this.docOut = docOut;\n    this.posOut = posOut;\n    this.payOut = payOut;\n    \n    lastSkipDoc = new int[maxSkipLevels];\n    lastSkipDocPointer = new long[maxSkipLevels];\n    if (posOut != null) {\n      lastSkipPosPointer = new long[maxSkipLevels];\n      if (payOut != null) {\n        lastSkipPayPointer = new long[maxSkipLevels];\n      }\n      lastStartOffset = new int[maxSkipLevels];\n      lastPayloadByteUpto = new int[maxSkipLevels];\n    }\n  }\n\n","sourceOld":"  public BlockSkipWriter(int maxSkipLevels, int blockSize, int docCount, IndexOutput docOut, IndexOutput posOut, IndexOutput payOut) {\n    super(blockSize, maxSkipLevels, docCount);\n    this.docOut = docOut;\n    this.posOut = posOut;\n    this.payOut = payOut;\n    \n    lastSkipDoc = new int[maxSkipLevels];\n    lastSkipDocPointer = new long[maxSkipLevels];\n    if (posOut != null) {\n      lastSkipPosPointer = new long[maxSkipLevels];\n      if (payOut != null) {\n        lastSkipPayPointer = new long[maxSkipLevels];\n      }\n      lastStartOffset = new int[maxSkipLevels];\n      lastPayloadByteUpto = new int[maxSkipLevels];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee41031dddaf62ff3c400e15f09e7a7893a65dab","date":1344338161,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockSkipWriter#BlockSkipWriter(int,int,int,IndexOutput,IndexOutput,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockSkipWriter#BlockSkipWriter(int,int,int,IndexOutput,IndexOutput,IndexOutput).mjava","sourceNew":"  public BlockSkipWriter(int maxSkipLevels, int blockSize, int docCount, IndexOutput docOut, IndexOutput posOut, IndexOutput payOut) {\n    // nocommit figure out what skipMultiplier is best (4 is\n    // total guess):\n    super(blockSize, 8, maxSkipLevels, docCount);\n    this.docOut = docOut;\n    this.posOut = posOut;\n    this.payOut = payOut;\n    \n    lastSkipDoc = new int[maxSkipLevels];\n    lastSkipDocPointer = new long[maxSkipLevels];\n    if (posOut != null) {\n      lastSkipPosPointer = new long[maxSkipLevels];\n      if (payOut != null) {\n        lastSkipPayPointer = new long[maxSkipLevels];\n      }\n      lastStartOffset = new int[maxSkipLevels];\n      lastPayloadByteUpto = new int[maxSkipLevels];\n    }\n  }\n\n","sourceOld":"  public BlockSkipWriter(int maxSkipLevels, int blockSize, int docCount, IndexOutput docOut, IndexOutput posOut, IndexOutput payOut) {\n    // nocommit figure out what skipMultiplier is best (4 is\n    // total guess):\n    super(blockSize, 4, maxSkipLevels, docCount);\n    this.docOut = docOut;\n    this.posOut = posOut;\n    this.payOut = payOut;\n    \n    lastSkipDoc = new int[maxSkipLevels];\n    lastSkipDocPointer = new long[maxSkipLevels];\n    if (posOut != null) {\n      lastSkipPosPointer = new long[maxSkipLevels];\n      if (payOut != null) {\n        lastSkipPayPointer = new long[maxSkipLevels];\n      }\n      lastStartOffset = new int[maxSkipLevels];\n      lastPayloadByteUpto = new int[maxSkipLevels];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51","date":1344355078,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockSkipWriter#BlockSkipWriter(int,int,int,IndexOutput,IndexOutput,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockSkipWriter#BlockSkipWriter(int,int,int,IndexOutput,IndexOutput,IndexOutput).mjava","sourceNew":"  public BlockSkipWriter(int maxSkipLevels, int blockSize, int docCount, IndexOutput docOut, IndexOutput posOut, IndexOutput payOut) {\n    super(blockSize, 8, maxSkipLevels, docCount);\n    this.docOut = docOut;\n    this.posOut = posOut;\n    this.payOut = payOut;\n    \n    lastSkipDoc = new int[maxSkipLevels];\n    lastSkipDocPointer = new long[maxSkipLevels];\n    if (posOut != null) {\n      lastSkipPosPointer = new long[maxSkipLevels];\n      if (payOut != null) {\n        lastSkipPayPointer = new long[maxSkipLevels];\n      }\n      lastStartOffset = new int[maxSkipLevels];\n      lastPayloadByteUpto = new int[maxSkipLevels];\n    }\n  }\n\n","sourceOld":"  public BlockSkipWriter(int maxSkipLevels, int blockSize, int docCount, IndexOutput docOut, IndexOutput posOut, IndexOutput payOut) {\n    // nocommit figure out what skipMultiplier is best (4 is\n    // total guess):\n    super(blockSize, 8, maxSkipLevels, docCount);\n    this.docOut = docOut;\n    this.posOut = posOut;\n    this.payOut = payOut;\n    \n    lastSkipDoc = new int[maxSkipLevels];\n    lastSkipDocPointer = new long[maxSkipLevels];\n    if (posOut != null) {\n      lastSkipPosPointer = new long[maxSkipLevels];\n      if (payOut != null) {\n        lastSkipPayPointer = new long[maxSkipLevels];\n      }\n      lastStartOffset = new int[maxSkipLevels];\n      lastPayloadByteUpto = new int[maxSkipLevels];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockSkipWriter#BlockSkipWriter(int,int,int,IndexOutput,IndexOutput,IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  public BlockSkipWriter(int maxSkipLevels, int blockSize, int docCount, IndexOutput docOut, IndexOutput posOut, IndexOutput payOut) {\n    super(blockSize, 8, maxSkipLevels, docCount);\n    this.docOut = docOut;\n    this.posOut = posOut;\n    this.payOut = payOut;\n    \n    lastSkipDoc = new int[maxSkipLevels];\n    lastSkipDocPointer = new long[maxSkipLevels];\n    if (posOut != null) {\n      lastSkipPosPointer = new long[maxSkipLevels];\n      if (payOut != null) {\n        lastSkipPayPointer = new long[maxSkipLevels];\n      }\n      lastStartOffset = new int[maxSkipLevels];\n      lastPayloadByteUpto = new int[maxSkipLevels];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockSkipWriter#BlockSkipWriter(int,int,int,IndexOutput,IndexOutput,IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  public BlockSkipWriter(int maxSkipLevels, int blockSize, int docCount, IndexOutput docOut, IndexOutput posOut, IndexOutput payOut) {\n    super(blockSize, 8, maxSkipLevels, docCount);\n    this.docOut = docOut;\n    this.posOut = posOut;\n    this.payOut = payOut;\n    \n    lastSkipDoc = new int[maxSkipLevels];\n    lastSkipDocPointer = new long[maxSkipLevels];\n    if (posOut != null) {\n      lastSkipPosPointer = new long[maxSkipLevels];\n      if (payOut != null) {\n        lastSkipPayPointer = new long[maxSkipLevels];\n      }\n      lastStartOffset = new int[maxSkipLevels];\n      lastPayloadByteUpto = new int[maxSkipLevels];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockSkipWriter#BlockSkipWriter(int,int,int,IndexOutput,IndexOutput,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockSkipWriter#BlockSkipWriter(int,int,int,IndexOutput,IndexOutput,IndexOutput).mjava","sourceNew":"  public BlockSkipWriter(int maxSkipLevels, int blockSize, int docCount, IndexOutput docOut, IndexOutput posOut, IndexOutput payOut) {\n    super(blockSize, 8, maxSkipLevels, docCount);\n    this.docOut = docOut;\n    this.posOut = posOut;\n    this.payOut = payOut;\n    \n    lastSkipDoc = new int[maxSkipLevels];\n    lastSkipDocPointer = new long[maxSkipLevels];\n    if (posOut != null) {\n      lastSkipPosPointer = new long[maxSkipLevels];\n      if (payOut != null) {\n        lastSkipPayPointer = new long[maxSkipLevels];\n      }\n      lastStartOffset = new int[maxSkipLevels];\n      lastPayloadByteUpto = new int[maxSkipLevels];\n    }\n  }\n\n","sourceOld":"  public BlockSkipWriter(int maxSkipLevels, int blockSize, int docCount, IndexOutput docOut, IndexOutput posOut, IndexOutput payOut) {\n    super(blockSize, 8, maxSkipLevels, docCount);\n    this.docOut = docOut;\n    this.posOut = posOut;\n    this.payOut = payOut;\n    \n    lastSkipDoc = new int[maxSkipLevels];\n    lastSkipDocPointer = new long[maxSkipLevels];\n    if (posOut != null) {\n      lastSkipPosPointer = new long[maxSkipLevels];\n      if (payOut != null) {\n        lastSkipPayPointer = new long[maxSkipLevels];\n      }\n      lastStartOffset = new int[maxSkipLevels];\n      lastPayloadByteUpto = new int[maxSkipLevels];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["ee41031dddaf62ff3c400e15f09e7a7893a65dab"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8081d5018e8846bf4080f2809432c759996e749f":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"e06babaa3e8b78433266149d50d1500ba941652c":["8081d5018e8846bf4080f2809432c759996e749f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"ee41031dddaf62ff3c400e15f09e7a7893a65dab":["e06babaa3e8b78433266149d50d1500ba941652c"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"8081d5018e8846bf4080f2809432c759996e749f":["e06babaa3e8b78433266149d50d1500ba941652c"],"e06babaa3e8b78433266149d50d1500ba941652c":["ee41031dddaf62ff3c400e15f09e7a7893a65dab"],"ee41031dddaf62ff3c400e15f09e7a7893a65dab":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["8081d5018e8846bf4080f2809432c759996e749f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}