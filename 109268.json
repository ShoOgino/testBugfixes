{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/Lucene43CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","commits":[{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/Lucene43CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","pathOld":"/dev/null","sourceNew":"    /** Construct the compound token based on a slice of the current {@link Lucene43CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      this.txt = Lucene43CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      \n      // offsets of the original word\n      int startOff = Lucene43CompoundWordTokenFilterBase.this.offsetAtt.startOffset();\n      int endOff = Lucene43CompoundWordTokenFilterBase.this.offsetAtt.endOffset();\n      \n      if (endOff - startOff != Lucene43CompoundWordTokenFilterBase.this.termAtt.length()) {\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        this.startOffset = startOff;\n        this.endOffset = endOff;\n      } else {\n        final int newStart = startOff + offset;\n        this.startOffset = newStart;\n        this.endOffset = newStart + length;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/Lucene43CompoundWordTokenFilterBase.CompoundToken#CompoundToken(int,int).mjava","sourceNew":null,"sourceOld":"    /** Construct the compound token based on a slice of the current {@link Lucene43CompoundWordTokenFilterBase#termAtt}. */\n    public CompoundToken(int offset, int length) {\n      this.txt = Lucene43CompoundWordTokenFilterBase.this.termAtt.subSequence(offset, offset + length);\n      \n      // offsets of the original word\n      int startOff = Lucene43CompoundWordTokenFilterBase.this.offsetAtt.startOffset();\n      int endOff = Lucene43CompoundWordTokenFilterBase.this.offsetAtt.endOffset();\n      \n      if (endOff - startOff != Lucene43CompoundWordTokenFilterBase.this.termAtt.length()) {\n        // if length by start + end offsets doesn't match the term text then assume\n        // this is a synonym and don't adjust the offsets.\n        this.startOffset = startOff;\n        this.endOffset = endOff;\n      } else {\n        final int newStart = startOff + offset;\n        this.startOffset = newStart;\n        this.endOffset = newStart + length;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71387d8cb6923eb831b17a8b734608ba2e21c653":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"379db3ad24c4f0214f30a122265a6d6be003a99d":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}