{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/SelectWithEvaluatorsTest#testSelectWithEvaluatorsStream().mjava","commits":[{"id":"88073e8783f450d4c0218decc2f001a1ac2c7e7c","date":1486705191,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/SelectWithEvaluatorsTest#testSelectWithEvaluatorsStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSelectWithEvaluatorsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"a_s\", \"foo\", \"b_i\", \"1\", \"c_d\", \"3.3\", \"d_b\", \"true\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id,\"\n            +   \"add(b_i,c_d) as result,\"\n            +   \"search(collection1, q=*:*, fl=\\\"id,a_s,b_i,c_d,d_b\\\", sort=\\\"id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"result\");\n    assertNotFields(tuples, \"a_s\", \"b_i\", \"c_d\", \"d_b\");\n    assertEquals(1, tuples.size());\n    assertDouble(tuples.get(0), \"result\", 4.3);\n    assertEquals(4.3, tuples.get(0).get(\"result\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/SelectWithEvaluatorsTest#testSelectWithEvaluatorsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/SelectWithEvaluatorsTest#testSelectWithEvaluatorsStream().mjava","sourceNew":"  @Test\n  public void testSelectWithEvaluatorsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"a_s\", \"foo\", \"b_i\", \"1\", \"c_d\", \"3.3\", \"d_b\", \"true\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      ;\n    try {\n      // Basic test\n      clause = \"select(\"\n          + \"id,\"\n          + \"add(b_i,c_d) as result,\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_s,b_i,c_d,d_b\\\", sort=\\\"id asc\\\")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"result\");\n      assertNotFields(tuples, \"a_s\", \"b_i\", \"c_d\", \"d_b\");\n      assertEquals(1, tuples.size());\n      assertDouble(tuples.get(0), \"result\", 4.3);\n      assertEquals(4.3, tuples.get(0).get(\"result\"));\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSelectWithEvaluatorsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"a_s\", \"foo\", \"b_i\", \"1\", \"c_d\", \"3.3\", \"d_b\", \"true\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id,\"\n            +   \"add(b_i,c_d) as result,\"\n            +   \"search(collection1, q=*:*, fl=\\\"id,a_s,b_i,c_d,d_b\\\", sort=\\\"id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"result\");\n    assertNotFields(tuples, \"a_s\", \"b_i\", \"c_d\", \"d_b\");\n    assertEquals(1, tuples.size());\n    assertDouble(tuples.get(0), \"result\", 4.3);\n    assertEquals(4.3, tuples.get(0).get(\"result\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/SelectWithEvaluatorsTest#testSelectWithEvaluatorsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/SelectWithEvaluatorsTest#testSelectWithEvaluatorsStream().mjava","sourceNew":"  @Test\n  public void testSelectWithEvaluatorsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"a_s\", \"foo\", \"b_i\", \"1\", \"c_d\", \"3.3\", \"d_b\", \"true\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      ;\n    try {\n      // Basic test\n      clause = \"select(\"\n          + \"id,\"\n          + \"add(b_i,c_d) as result,\"\n          + \"search(collection1, q=*:*, fl=\\\"id,a_s,b_i,c_d,d_b\\\", sort=\\\"id asc\\\")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"result\");\n      assertNotFields(tuples, \"a_s\", \"b_i\", \"c_d\", \"d_b\");\n      assertEquals(1, tuples.size());\n      assertDouble(tuples.get(0), \"result\", 4.3);\n      assertEquals(4.3, tuples.get(0).get(\"result\"));\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSelectWithEvaluatorsStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"a_s\", \"foo\", \"b_i\", \"1\", \"c_d\", \"3.3\", \"d_b\", \"true\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      ;\n    \n    // Basic test\n    clause = \"select(\"\n            +   \"id,\"\n            +   \"add(b_i,c_d) as result,\"\n            +   \"search(collection1, q=*:*, fl=\\\"id,a_s,b_i,c_d,d_b\\\", sort=\\\"id asc\\\")\"\n            + \")\";\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n    assertFields(tuples, \"id\", \"result\");\n    assertNotFields(tuples, \"a_s\", \"b_i\", \"c_d\", \"d_b\");\n    assertEquals(1, tuples.size());\n    assertDouble(tuples.get(0), \"result\", 4.3);\n    assertEquals(4.3, tuples.get(0).get(\"result\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}