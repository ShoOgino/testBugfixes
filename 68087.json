{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#read(BufferedReader,String,StringBuilder,boolean,boolean).mjava","commits":[{"id":"9b80ad3438ccc68d1ef441add711ed2143324f14","date":1293087175,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#read(BufferedReader,String,StringBuilder,boolean,boolean).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#read(BufferedReader,String,StringBuffer,boolean,boolean).mjava","sourceNew":"  // read until finding a line that starts with the specified prefix\n  private StringBuilder read (BufferedReader reader, String prefix, StringBuilder sb, boolean collectMatchLine, boolean collectAll) throws IOException {\n    sb = (sb==null ? new StringBuilder() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line==null) {\n        return null;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep+line);\n          sep = newline;\n        }\n        break;\n      }\n      if (collectAll) {\n        sb.append(sep+line);\n        sep = newline;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","sourceOld":"  // read until finding a line that starts with the specified prefix\n  private StringBuffer read (BufferedReader reader, String prefix, StringBuffer sb, boolean collectMatchLine, boolean collectAll) throws IOException {\n    sb = (sb==null ? new StringBuffer() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line==null) {\n        return null;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep+line);\n          sep = newline;\n        }\n        break;\n      }\n      if (collectAll) {\n        sb.append(sep+line);\n        sep = newline;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc5ecd93bcd50b2199757091d526fc1bcbce0db1","date":1293154244,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#read(BufferedReader,String,StringBuilder,boolean,boolean).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#read(BufferedReader,String,StringBuffer,boolean,boolean).mjava","sourceNew":"  // read until finding a line that starts with the specified prefix\n  private StringBuilder read (BufferedReader reader, String prefix, StringBuilder sb, boolean collectMatchLine, boolean collectAll) throws IOException {\n    sb = (sb==null ? new StringBuilder() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line==null) {\n        return null;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep+line);\n          sep = newline;\n        }\n        break;\n      }\n      if (collectAll) {\n        sb.append(sep+line);\n        sep = newline;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","sourceOld":"  // read until finding a line that starts with the specified prefix\n  private StringBuffer read (BufferedReader reader, String prefix, StringBuffer sb, boolean collectMatchLine, boolean collectAll) throws IOException {\n    sb = (sb==null ? new StringBuffer() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line==null) {\n        return null;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep+line);\n          sep = newline;\n        }\n        break;\n      }\n      if (collectAll) {\n        sb.append(sep+line);\n        sep = newline;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#read(BufferedReader,String,StringBuilder,boolean,boolean).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#read(BufferedReader,String,StringBuilder,boolean,boolean).mjava","sourceNew":"  // read until finding a line that starts with the specified prefix\n  private StringBuilder read (BufferedReader reader, String prefix, StringBuilder sb, boolean collectMatchLine, boolean collectAll) throws IOException {\n    sb = (sb==null ? new StringBuilder() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line==null) {\n        return null;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep+line);\n          sep = newline;\n        }\n        break;\n      }\n      if (collectAll) {\n        sb.append(sep+line);\n        sep = newline;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","sourceOld":"  // read until finding a line that starts with the specified prefix\n  private StringBuilder read (BufferedReader reader, String prefix, StringBuilder sb, boolean collectMatchLine, boolean collectAll) throws IOException {\n    sb = (sb==null ? new StringBuilder() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line==null) {\n        return null;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep+line);\n          sep = newline;\n        }\n        break;\n      }\n      if (collectAll) {\n        sb.append(sep+line);\n        sep = newline;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#read(BufferedReader,String,StringBuilder,boolean,boolean).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#read(BufferedReader,String,StringBuilder,boolean,boolean).mjava","sourceNew":"  // read until finding a line that starts with the specified prefix\n  private StringBuilder read (BufferedReader reader, String prefix, StringBuilder sb, boolean collectMatchLine, boolean collectAll) throws IOException {\n    sb = (sb==null ? new StringBuilder() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line==null) {\n        return null;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep+line);\n          sep = newline;\n        }\n        break;\n      }\n      if (collectAll) {\n        sb.append(sep+line);\n        sep = newline;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","sourceOld":"  // read until finding a line that starts with the specified prefix\n  private StringBuilder read (BufferedReader reader, String prefix, StringBuilder sb, boolean collectMatchLine, boolean collectAll) throws IOException {\n    sb = (sb==null ? new StringBuilder() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line==null) {\n        return null;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep+line);\n          sep = newline;\n        }\n        break;\n      }\n      if (collectAll) {\n        sb.append(sep+line);\n        sep = newline;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["9b80ad3438ccc68d1ef441add711ed2143324f14"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9b80ad3438ccc68d1ef441add711ed2143324f14"],"9b80ad3438ccc68d1ef441add711ed2143324f14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["dc5ecd93bcd50b2199757091d526fc1bcbce0db1","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"]},"commit2Childs":{"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"9b80ad3438ccc68d1ef441add711ed2143324f14":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","dc5ecd93bcd50b2199757091d526fc1bcbce0db1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dc5ecd93bcd50b2199757091d526fc1bcbce0db1","9b80ad3438ccc68d1ef441add711ed2143324f14"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}