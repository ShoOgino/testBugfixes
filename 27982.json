{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testUpdateAndDelete().mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testUpdateAndDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#testUpdateAndDelete().mjava","sourceNew":"  private long testUpdateAndDelete() throws Exception {\n    long docId = 99999999L;\n    indexr(\"id\", docId, t1, \"originalcontent\");\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":originalcontent\");\n    QueryResponse results = clients.get(0).query(params);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    // update doc\n    indexr(\"id\", docId, t1, \"updatedcontent\");\n    \n    commit();\n    \n    results = clients.get(0).query(params);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    params.set(\"q\", t1 + \":updatedcontent\");\n    \n    results = clients.get(0).query(params);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    UpdateRequest uReq = new UpdateRequest();\n    // uReq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    uReq.deleteById(Long.toString(docId)).process(clients.get(0));\n    \n    commit();\n    \n    results = clients.get(0).query(params);\n    assertEquals(0, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":"  private long testUpdateAndDelete() throws Exception {\n    long docId = 99999999L;\n    indexr(\"id\", docId, t1, \"originalcontent\");\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":originalcontent\");\n    QueryResponse results = clients.get(0).query(params);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    // update doc\n    indexr(\"id\", docId, t1, \"updatedcontent\");\n    \n    commit();\n    \n    results = clients.get(0).query(params);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    params.set(\"q\", t1 + \":updatedcontent\");\n    \n    results = clients.get(0).query(params);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    UpdateRequest uReq = new UpdateRequest();\n    // uReq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    uReq.deleteById(Long.toString(docId)).process(clients.get(0));\n    \n    commit();\n    \n    results = clients.get(0).query(params);\n    assertEquals(0, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testUpdateAndDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#testUpdateAndDelete().mjava","sourceNew":"  private long testUpdateAndDelete() throws Exception {\n    long docId = 99999999L;\n    indexr(\"id\", docId, t1, \"originalcontent\");\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":originalcontent\");\n    QueryResponse results = clients.get(0).query(params);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    // update doc\n    indexr(\"id\", docId, t1, \"updatedcontent\");\n    \n    commit();\n    \n    results = clients.get(0).query(params);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    params.set(\"q\", t1 + \":updatedcontent\");\n    \n    results = clients.get(0).query(params);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    UpdateRequest uReq = new UpdateRequest();\n    // uReq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    uReq.deleteById(Long.toString(docId)).process(clients.get(0));\n    \n    commit();\n    \n    results = clients.get(0).query(params);\n    assertEquals(0, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":"  private long testUpdateAndDelete() throws Exception {\n    long docId = 99999999L;\n    indexr(\"id\", docId, t1, \"originalcontent\");\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":originalcontent\");\n    QueryResponse results = clients.get(0).query(params);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    // update doc\n    indexr(\"id\", docId, t1, \"updatedcontent\");\n    \n    commit();\n    \n    results = clients.get(0).query(params);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    params.set(\"q\", t1 + \":updatedcontent\");\n    \n    results = clients.get(0).query(params);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    UpdateRequest uReq = new UpdateRequest();\n    // uReq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    uReq.deleteById(Long.toString(docId)).process(clients.get(0));\n    \n    commit();\n    \n    results = clients.get(0).query(params);\n    assertEquals(0, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#testUpdateAndDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#testUpdateAndDelete().mjava","sourceNew":"  private long testUpdateAndDelete() throws Exception {\n    long docId = 99999999L;\n    indexr(\"id\", docId, t1, \"originalcontent\");\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":originalcontent\");\n    QueryResponse results = clients.get(0).query(params);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    // update doc\n    indexr(\"id\", docId, t1, \"updatedcontent\");\n    \n    commit();\n    \n    results = clients.get(0).query(params);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    params.set(\"q\", t1 + \":updatedcontent\");\n    \n    results = clients.get(0).query(params);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    UpdateRequest uReq = new UpdateRequest();\n    // uReq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    uReq.deleteById(Long.toString(docId)).process(clients.get(0));\n    \n    commit();\n    \n    results = clients.get(0).query(params);\n    assertEquals(0, results.getResults().getNumFound());\n    return docId;\n  }\n\n","sourceOld":"  private long testUpdateAndDelete() throws Exception {\n    long docId = 99999999L;\n    indexr(\"id\", docId, t1, \"originalcontent\");\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":originalcontent\");\n    QueryResponse results = clients.get(0).query(params);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    // update doc\n    indexr(\"id\", docId, t1, \"updatedcontent\");\n    \n    commit();\n    \n    results = clients.get(0).query(params);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    params.set(\"q\", t1 + \":updatedcontent\");\n    \n    results = clients.get(0).query(params);\n    assertEquals(1, results.getResults().getNumFound());\n    \n    UpdateRequest uReq = new UpdateRequest();\n    // uReq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    uReq.deleteById(Long.toString(docId)).process(clients.get(0));\n    \n    commit();\n    \n    results = clients.get(0).query(params);\n    assertEquals(0, results.getResults().getNumFound());\n    return docId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}