{"path":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery#TermsQuery(String,Query,BytesRefHash).mjava","commits":[{"id":"4f4c1d6d595e9d4dc26250376376df0d41a79e32","date":1359317642,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery#TermsQuery(String,Query,BytesRefHash).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery#TermsQuery(String,BytesRefHash).mjava","sourceNew":"  /**\n   * @param field The field that should contain terms that are specified in the previous parameter\n   * @param terms The terms that matching documents should have. The terms must be sorted by natural order.\n   */\n  TermsQuery(String field, Query fromQuery, BytesRefHash terms) {\n    super(field);\n    this.fromQuery = fromQuery;\n    this.terms = terms;\n  }\n\n","sourceOld":"  /**\n   * @param field The field that should contain terms that are specified in the previous parameter\n   * @param terms The terms that matching documents should have. The terms must be sorted by natural order.\n   */\n  TermsQuery(String field, BytesRefHash terms) {\n    super(field);\n    this.terms = terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":1,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery#TermsQuery(String,Query,BytesRefHash).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery#TermsQuery(String,BytesRefHash).mjava","sourceNew":"  /**\n   * @param field The field that should contain terms that are specified in the previous parameter\n   * @param terms The terms that matching documents should have. The terms must be sorted by natural order.\n   */\n  TermsQuery(String field, Query fromQuery, BytesRefHash terms) {\n    super(field);\n    this.fromQuery = fromQuery;\n    this.terms = terms;\n  }\n\n","sourceOld":"  /**\n   * @param field The field that should contain terms that are specified in the previous parameter\n   * @param terms The terms that matching documents should have. The terms must be sorted by natural order.\n   */\n  TermsQuery(String field, BytesRefHash terms) {\n    super(field);\n    this.terms = terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c117697fbfe3a3efe9ac3c681d4c21d70d6ce879","date":1370620600,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery#TermsQuery(String,Query,BytesRefHash).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery#TermsQuery(String,Query,BytesRefHash).mjava","sourceNew":"  /**\n   * @param field The field that should contain terms that are specified in the previous parameter\n   * @param terms The terms that matching documents should have. The terms must be sorted by natural order.\n   */\n  TermsQuery(String field, Query fromQuery, BytesRefHash terms) {\n    super(field);\n    this.fromQuery = fromQuery;\n    this.terms = terms;\n    ords = terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n  }\n\n","sourceOld":"  /**\n   * @param field The field that should contain terms that are specified in the previous parameter\n   * @param terms The terms that matching documents should have. The terms must be sorted by natural order.\n   */\n  TermsQuery(String field, Query fromQuery, BytesRefHash terms) {\n    super(field);\n    this.fromQuery = fromQuery;\n    this.terms = terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91","date":1456586780,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery#TermsQuery(String,Query,BytesRefHash).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery#TermsQuery(String,Query,BytesRefHash).mjava","sourceNew":"  /**\n   * @param field The field that should contain terms that are specified in the previous parameter\n   * @param terms The terms that matching documents should have. The terms must be sorted by natural order.\n   */\n  TermsQuery(String field, Query fromQuery, BytesRefHash terms) {\n    super(field);\n    this.fromQuery = fromQuery;\n    this.terms = terms;\n    ords = terms.sort();\n  }\n\n","sourceOld":"  /**\n   * @param field The field that should contain terms that are specified in the previous parameter\n   * @param terms The terms that matching documents should have. The terms must be sorted by natural order.\n   */\n  TermsQuery(String field, Query fromQuery, BytesRefHash terms) {\n    super(field);\n    this.fromQuery = fromQuery;\n    this.terms = terms;\n    ords = terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery#TermsQuery(String,Query,BytesRefHash).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery#TermsQuery(String,Query,BytesRefHash).mjava","sourceNew":"  /**\n   * @param field The field that should contain terms that are specified in the previous parameter\n   * @param terms The terms that matching documents should have. The terms must be sorted by natural order.\n   */\n  TermsQuery(String field, Query fromQuery, BytesRefHash terms) {\n    super(field);\n    this.fromQuery = fromQuery;\n    this.terms = terms;\n    ords = terms.sort();\n  }\n\n","sourceOld":"  /**\n   * @param field The field that should contain terms that are specified in the previous parameter\n   * @param terms The terms that matching documents should have. The terms must be sorted by natural order.\n   */\n  TermsQuery(String field, Query fromQuery, BytesRefHash terms) {\n    super(field);\n    this.fromQuery = fromQuery;\n    this.terms = terms;\n    ords = terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7","date":1495529154,"type":4,"author":"Martijn van Groningen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery#TermsQuery(String,Query,BytesRefHash).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param field The field that should contain terms that are specified in the previous parameter\n   * @param terms The terms that matching documents should have. The terms must be sorted by natural order.\n   */\n  TermsQuery(String field, Query fromQuery, BytesRefHash terms) {\n    super(field);\n    this.fromQuery = fromQuery;\n    this.terms = terms;\n    ords = terms.sort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsQuery#TermsQuery(String,Query,BytesRefHash).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param field The field that should contain terms that are specified in the previous parameter\n   * @param terms The terms that matching documents should have. The terms must be sorted by natural order.\n   */\n  TermsQuery(String field, Query fromQuery, BytesRefHash terms) {\n    super(field);\n    this.fromQuery = fromQuery;\n    this.terms = terms;\n    ords = terms.sort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["c117697fbfe3a3efe9ac3c681d4c21d70d6ce879","78cf5dd35bc9be11f14b0c5b5806b05d3f529f91"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["af2638813028b254a88b418ebeafb541afb49653","00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7"],"00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7":["af2638813028b254a88b418ebeafb541afb49653"],"c117697fbfe3a3efe9ac3c681d4c21d70d6ce879":["4f4c1d6d595e9d4dc26250376376df0d41a79e32"],"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91":["c117697fbfe3a3efe9ac3c681d4c21d70d6ce879"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de522d9303bd67c8473a269a1319125d1f3700e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4f4c1d6d595e9d4dc26250376376df0d41a79e32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7"],"4f4c1d6d595e9d4dc26250376376df0d41a79e32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["e9017cf144952056066919f1ebc7897ff9bd71b1","00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c117697fbfe3a3efe9ac3c681d4c21d70d6ce879":["af2638813028b254a88b418ebeafb541afb49653","78cf5dd35bc9be11f14b0c5b5806b05d3f529f91"],"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91":["af2638813028b254a88b418ebeafb541afb49653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de522d9303bd67c8473a269a1319125d1f3700e0","4f4c1d6d595e9d4dc26250376376df0d41a79e32"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"4f4c1d6d595e9d4dc26250376376df0d41a79e32":["c117697fbfe3a3efe9ac3c681d4c21d70d6ce879","de522d9303bd67c8473a269a1319125d1f3700e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}