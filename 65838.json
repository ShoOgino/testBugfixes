{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e2d1edb0d4b63db0ffa514a529fb559609dbcd2","date":1341667852,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2], \"UTF-8\"), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(IOUtils.getDecodingReader(topicsFile, IOUtils.CHARSET_UTF_8)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(IOUtils.getDecodingReader(qrelsFile, IOUtils.CHARSET_UTF_8)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c70cdb81dc660d90f9d0664dd91b473b7e66563","date":1341679310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2], \"UTF-8\"), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()), true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(IOUtils.getDecodingReader(topicsFile, IOUtils.CHARSET_UTF_8)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(IOUtils.getDecodingReader(qrelsFile, IOUtils.CHARSET_UTF_8)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2], \"UTF-8\"), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(IOUtils.getDecodingReader(topicsFile, IOUtils.CHARSET_UTF_8)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(IOUtils.getDecodingReader(qrelsFile, IOUtils.CHARSET_UTF_8)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2], \"UTF-8\"), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()), true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(IOUtils.getDecodingReader(topicsFile, IOUtils.CHARSET_UTF_8)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(IOUtils.getDecodingReader(qrelsFile, IOUtils.CHARSET_UTF_8)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2], \"UTF-8\"), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()), true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(IOUtils.getDecodingReader(topicsFile, IOUtils.CHARSET_UTF_8)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(IOUtils.getDecodingReader(qrelsFile, IOUtils.CHARSET_UTF_8)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2], \"UTF-8\"), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()), true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(IOUtils.getDecodingReader(topicsFile, IOUtils.CHARSET_UTF_8)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(IOUtils.getDecodingReader(qrelsFile, IOUtils.CHARSET_UTF_8)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2], \"UTF-8\"), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()), true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(IOUtils.getDecodingReader(topicsFile, IOUtils.CHARSET_UTF_8)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(IOUtils.getDecodingReader(qrelsFile, IOUtils.CHARSET_UTF_8)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2], \"UTF-8\"), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()), true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(IOUtils.getDecodingReader(topicsFile, IOUtils.CHARSET_UTF_8)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(IOUtils.getDecodingReader(qrelsFile, IOUtils.CHARSET_UTF_8)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2], IOUtils.UTF_8 /* huh, no nio.Charset ctor? */), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()), true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(IOUtils.getDecodingReader(topicsFile, StandardCharsets.UTF_8)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(IOUtils.getDecodingReader(qrelsFile, StandardCharsets.UTF_8)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2], \"UTF-8\"), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()), true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(IOUtils.getDecodingReader(topicsFile, IOUtils.CHARSET_UTF_8)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(IOUtils.getDecodingReader(qrelsFile, IOUtils.CHARSET_UTF_8)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2], IOUtils.UTF_8 /* huh, no nio.Charset ctor? */), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()), true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(IOUtils.getDecodingReader(topicsFile, StandardCharsets.UTF_8)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(IOUtils.getDecodingReader(qrelsFile, StandardCharsets.UTF_8)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2], \"UTF-8\"), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()), true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(IOUtils.getDecodingReader(topicsFile, IOUtils.CHARSET_UTF_8)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(IOUtils.getDecodingReader(qrelsFile, IOUtils.CHARSET_UTF_8)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    Path topicsFile = Paths.get(args[0]);\n    Path qrelsFile = Paths.get(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2], IOUtils.UTF_8 /* huh, no nio.Charset ctor? */), \"lucene\");\n    FSDirectory dir = FSDirectory.open(Paths.get(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()), true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(Files.newBufferedReader(topicsFile, StandardCharsets.UTF_8));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(Files.newBufferedReader(qrelsFile, StandardCharsets.UTF_8));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2], IOUtils.UTF_8 /* huh, no nio.Charset ctor? */), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()), true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(IOUtils.getDecodingReader(topicsFile, StandardCharsets.UTF_8)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(IOUtils.getDecodingReader(qrelsFile, StandardCharsets.UTF_8)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3125c103a40467dd318d6beff055c5f34b7bcf3a","date":1410661891,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    Path topicsFile = Paths.get(args[0]);\n    Path qrelsFile = Paths.get(args[1]);\n    Path submissionFile = Paths.get(args[2]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(Files.newBufferedWriter(submissionFile, StandardCharsets.UTF_8)), \"lucene\");\n    FSDirectory dir = FSDirectory.open(Paths.get(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()), true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(Files.newBufferedReader(topicsFile, StandardCharsets.UTF_8));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(Files.newBufferedReader(qrelsFile, StandardCharsets.UTF_8));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    Path topicsFile = Paths.get(args[0]);\n    Path qrelsFile = Paths.get(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2], IOUtils.UTF_8 /* huh, no nio.Charset ctor? */), \"lucene\");\n    FSDirectory dir = FSDirectory.open(Paths.get(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(new OutputStreamWriter(System.out, Charset.defaultCharset()), true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(Files.newBufferedReader(topicsFile, StandardCharsets.UTF_8));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(Files.newBufferedReader(qrelsFile, StandardCharsets.UTF_8));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7d89d7e4e5101347833eea558851bf4209218619"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2acf500f78aa12b92e371fd89c719291986b6b90"],"1e2d1edb0d4b63db0ffa514a529fb559609dbcd2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"2acf500f78aa12b92e371fd89c719291986b6b90":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","9c70cdb81dc660d90f9d0664dd91b473b7e66563"],"f4abec28b874149a7223e32cc7a01704c27790de":["7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["1e2d1edb0d4b63db0ffa514a529fb559609dbcd2"],"46d8ada1fff8d18cb197c38c7983225162599948":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3125c103a40467dd318d6beff055c5f34b7bcf3a":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3125c103a40467dd318d6beff055c5f34b7bcf3a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"1e2d1edb0d4b63db0ffa514a529fb559609dbcd2":["9c70cdb81dc660d90f9d0664dd91b473b7e66563"],"2acf500f78aa12b92e371fd89c719291986b6b90":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["3125c103a40467dd318d6beff055c5f34b7bcf3a"],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["1e2d1edb0d4b63db0ffa514a529fb559609dbcd2","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3125c103a40467dd318d6beff055c5f34b7bcf3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}