{"path":"sandbox/contributions/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue).mjava","commits":[{"id":"0d57805a939f8923b86ca8202ccef1f7cf548098","date":1105995946,"type":0,"author":"David Spencer","isMerge":false,"pathNew":"sandbox/contributions/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Create the More like query from a PriorityQueue\n     */\n    private Query createQuery(PriorityQueue q) {\n        BooleanQuery query = new BooleanQuery();\n        Object cur;\n        int qterms = 0;\n        float bestScore = 0;\n\n        while (((cur = q.pop()) != null)) {\n            Object[] ar = (Object[]) cur;\n            TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n            if (boost) {\n                if (qterms == 0) {\n                    bestScore = ((Float) ar[2]).floatValue();\n                }\n                float myScore = ((Float) ar[2]).floatValue();\n\n                tq.setBoost(myScore / bestScore);\n            }\n\n            try {\n                query.add(tq, false, false);\n            }\n            catch (BooleanQuery.TooManyClauses ignore) {\n                break;\n            }\n\n            qterms++;\n            if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n                break;\n            }\n        }\n\n        return query;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue).mjava","pathOld":"sandbox/contributions/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue).mjava","sourceNew":"    /**\n     * Create the More like query from a PriorityQueue\n     */\n    private Query createQuery(PriorityQueue q) {\n        BooleanQuery query = new BooleanQuery();\n        Object cur;\n        int qterms = 0;\n        float bestScore = 0;\n\n        while (((cur = q.pop()) != null)) {\n            Object[] ar = (Object[]) cur;\n            TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n            if (boost) {\n                if (qterms == 0) {\n                    bestScore = ((Float) ar[2]).floatValue();\n                }\n                float myScore = ((Float) ar[2]).floatValue();\n\n                tq.setBoost(myScore / bestScore);\n            }\n\n            try {\n                query.add(tq, false, false);\n            }\n            catch (BooleanQuery.TooManyClauses ignore) {\n                break;\n            }\n\n            qterms++;\n            if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n                break;\n            }\n        }\n\n        return query;\n    }\n\n","sourceOld":"    /**\n     * Create the More like query from a PriorityQueue\n     */\n    private Query createQuery(PriorityQueue q) {\n        BooleanQuery query = new BooleanQuery();\n        Object cur;\n        int qterms = 0;\n        float bestScore = 0;\n\n        while (((cur = q.pop()) != null)) {\n            Object[] ar = (Object[]) cur;\n            TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n            if (boost) {\n                if (qterms == 0) {\n                    bestScore = ((Float) ar[2]).floatValue();\n                }\n                float myScore = ((Float) ar[2]).floatValue();\n\n                tq.setBoost(myScore / bestScore);\n            }\n\n            try {\n                query.add(tq, false, false);\n            }\n            catch (BooleanQuery.TooManyClauses ignore) {\n                break;\n            }\n\n            qterms++;\n            if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n                break;\n            }\n        }\n\n        return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d57805a939f8923b86ca8202ccef1f7cf548098":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["0d57805a939f8923b86ca8202ccef1f7cf548098"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"]},"commit2Childs":{"0d57805a939f8923b86ca8202ccef1f7cf548098":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d57805a939f8923b86ca8202ccef1f7cf548098"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}