{"path":"lucene/core/src/java/org/apache/lucene/search/BoostQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BoostQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight weight = query.createWeight(searcher, needsScores);\n    if (needsScores == false) {\n      return weight;\n    }\n    // Apply the query boost, this may impact the return value of getValueForNormalization()\n    weight.normalize(1f, boost);\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        weight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return weight.explain(context, doc);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return weight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float boost) {\n        weight.normalize(norm, BoostQuery.this.boost * boost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return weight.scorer(context);\n      }\n      \n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        return weight.bulkScorer(context);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BoostQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight weight = query.createWeight(searcher, needsScores);\n    if (needsScores == false) {\n      return weight;\n    }\n    // Apply the query boost, this may impact the return value of getValueForNormalization()\n    weight.normalize(1f, boost);\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        weight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return weight.explain(context, doc);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return weight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float boost) {\n        weight.normalize(norm, BoostQuery.this.boost * boost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return weight.scorer(context);\n      }\n      \n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        return weight.bulkScorer(context);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BoostQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Weight weight = query.createWeight(searcher, needsScores);\n    if (needsScores == false) {\n      return weight;\n    }\n    // Apply the query boost, this may impact the return value of getValueForNormalization()\n    weight.normalize(1f, boost);\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        weight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return weight.explain(context, doc);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        return weight.getValueForNormalization();\n      }\n\n      @Override\n      public void normalize(float norm, float boost) {\n        weight.normalize(norm, BoostQuery.this.boost * boost);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        return weight.scorer(context);\n      }\n      \n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        return weight.bulkScorer(context);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}