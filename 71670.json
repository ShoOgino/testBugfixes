{"path":"solr/src/java/org/apache/solr/handler/JsonLoader#parseCommitOptions(JSONParser,CommitUpdateCommand).mjava","commits":[{"id":"bc00220e3dec859110781d5d19a6116501fb4a38","date":1273880298,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#parseCommitOptions(JSONParser,CommitUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  void parseCommitOptions( JSONParser js, CommitUpdateCommand cmd ) throws IOException\n  {\n    assertNextEvent( js, JSONParser.OBJECT_START );\n\n    while( true ) {\n      int ev = js.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = js.getString();\n        if( js.wasKey() ) {\n          if( XmlUpdateRequestHandler.WAIT_SEARCHER.equals( key ) ) {\n            cmd.waitSearcher = js.getBoolean();\n          }\n          else if( XmlUpdateRequestHandler.WAIT_FLUSH.equals( key ) ) {\n            cmd.waitFlush = js.getBoolean();\n          }\n          else {\n            throw new IOException( \"Unknown key: \"+key+\" [\"+js.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new IOException( \n              \"invalid string: \" + key \n              +\" at [\"+js.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        return;\n      }\n      else {\n        throw new IOException( \n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+js.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19b15db2edd4d6bec35a41e44d8f1afe6384a905","date":1305144174,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseCommitOptions(JSONParser,CommitUpdateCommand).mjava","sourceNew":"  void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n  {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( XmlUpdateRequestHandler.WAIT_SEARCHER.equals( key ) ) {\n            cmd.waitSearcher = parser.getBoolean();\n          }\n          else if( XmlUpdateRequestHandler.WAIT_FLUSH.equals( key ) ) {\n            cmd.waitFlush = parser.getBoolean();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        return;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  void parseCommitOptions( JSONParser js, CommitUpdateCommand cmd ) throws IOException\n  {\n    assertNextEvent( js, JSONParser.OBJECT_START );\n\n    while( true ) {\n      int ev = js.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = js.getString();\n        if( js.wasKey() ) {\n          if( XmlUpdateRequestHandler.WAIT_SEARCHER.equals( key ) ) {\n            cmd.waitSearcher = js.getBoolean();\n          }\n          else if( XmlUpdateRequestHandler.WAIT_FLUSH.equals( key ) ) {\n            cmd.waitFlush = js.getBoolean();\n          }\n          else {\n            throw new IOException( \"Unknown key: \"+key+\" [\"+js.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new IOException( \n              \"invalid string: \" + key \n              +\" at [\"+js.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        return;\n      }\n      else {\n        throw new IOException( \n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+js.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseCommitOptions(JSONParser,CommitUpdateCommand).mjava","sourceNew":"  void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n  {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( XmlUpdateRequestHandler.WAIT_SEARCHER.equals( key ) ) {\n            cmd.waitSearcher = parser.getBoolean();\n          }\n          else if( XmlUpdateRequestHandler.WAIT_FLUSH.equals( key ) ) {\n            cmd.waitFlush = parser.getBoolean();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        return;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  void parseCommitOptions( JSONParser js, CommitUpdateCommand cmd ) throws IOException\n  {\n    assertNextEvent( js, JSONParser.OBJECT_START );\n\n    while( true ) {\n      int ev = js.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = js.getString();\n        if( js.wasKey() ) {\n          if( XmlUpdateRequestHandler.WAIT_SEARCHER.equals( key ) ) {\n            cmd.waitSearcher = js.getBoolean();\n          }\n          else if( XmlUpdateRequestHandler.WAIT_FLUSH.equals( key ) ) {\n            cmd.waitFlush = js.getBoolean();\n          }\n          else {\n            throw new IOException( \"Unknown key: \"+key+\" [\"+js.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new IOException( \n              \"invalid string: \" + key \n              +\" at [\"+js.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        return;\n      }\n      else {\n        throw new IOException( \n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+js.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseCommitOptions(JSONParser,CommitUpdateCommand).mjava","sourceNew":null,"sourceOld":"  void parseCommitOptions( JSONParser js, CommitUpdateCommand cmd ) throws IOException\n  {\n    assertNextEvent( js, JSONParser.OBJECT_START );\n\n    while( true ) {\n      int ev = js.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = js.getString();\n        if( js.wasKey() ) {\n          if( XmlUpdateRequestHandler.WAIT_SEARCHER.equals( key ) ) {\n            cmd.waitSearcher = js.getBoolean();\n          }\n          else if( XmlUpdateRequestHandler.WAIT_FLUSH.equals( key ) ) {\n            cmd.waitFlush = js.getBoolean();\n          }\n          else {\n            throw new IOException( \"Unknown key: \"+key+\" [\"+js.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new IOException( \n              \"invalid string: \" + key \n              +\" at [\"+js.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        return;\n      }\n      else {\n        throw new IOException( \n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+js.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19b15db2edd4d6bec35a41e44d8f1afe6384a905":["bc00220e3dec859110781d5d19a6116501fb4a38"],"a3776dccca01c11e7046323cfad46a3b4a471233":["bc00220e3dec859110781d5d19a6116501fb4a38","19b15db2edd4d6bec35a41e44d8f1afe6384a905"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["bc00220e3dec859110781d5d19a6116501fb4a38","19b15db2edd4d6bec35a41e44d8f1afe6384a905"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19b15db2edd4d6bec35a41e44d8f1afe6384a905"],"bc00220e3dec859110781d5d19a6116501fb4a38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"19b15db2edd4d6bec35a41e44d8f1afe6384a905":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc00220e3dec859110781d5d19a6116501fb4a38"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"bc00220e3dec859110781d5d19a6116501fb4a38":["19b15db2edd4d6bec35a41e44d8f1afe6384a905","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}