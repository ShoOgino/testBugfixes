{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#test().mjava","commits":[{"id":"f18d4e1cdc7330101ca433af5e8564dfd894f2bf","date":1379041877,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#test().mjava","pathOld":"/dev/null","sourceNew":"  /** an example of how to rank by an expression */\n  public void test() throws Exception {\n    // compile an expression:\n    Expression expr = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    \n    // we use SimpleBindings: which just maps variables to SortField instances\n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    \n    // create a sort field and sort by it (reverse order)\n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    searcher.search(query, null, 3, sort);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#test().mjava","pathOld":"/dev/null","sourceNew":"  /** an example of how to rank by an expression */\n  public void test() throws Exception {\n    // compile an expression:\n    Expression expr = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    \n    // we use SimpleBindings: which just maps variables to SortField instances\n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    \n    // create a sort field and sort by it (reverse order)\n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    searcher.search(query, null, 3, sort);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#test().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#test().mjava","sourceNew":"  /** an example of how to rank by an expression */\n  public void test() throws Exception {\n    // compile an expression:\n    Expression expr = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    \n    // we use SimpleBindings: which just maps variables to SortField instances\n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    \n    // create a sort field and sort by it (reverse order)\n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    searcher.search(query, 3, sort);\n  }\n\n","sourceOld":"  /** an example of how to rank by an expression */\n  public void test() throws Exception {\n    // compile an expression:\n    Expression expr = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    \n    // we use SimpleBindings: which just maps variables to SortField instances\n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    \n    // create a sort field and sort by it (reverse order)\n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    searcher.search(query, null, 3, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27d4663d3f6f21a687874d174b49d55645ce99db","date":1587726496,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#test().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestDemoExpressions#test().mjava","sourceNew":"  /** an example of how to rank by an expression */\n  public void test() throws Exception {\n    // compile an expression:\n    Expression expr = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    \n    // we use SimpleBindings: which just maps variables to SortField instances\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(\"_score\", DoubleValuesSource.SCORES);\n    bindings.add(\"popularity\", DoubleValuesSource.fromIntField(\"popularity\"));\n\n    // create a sort field and sort by it (reverse order)\n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    searcher.search(query, 3, sort);\n  }\n\n","sourceOld":"  /** an example of how to rank by an expression */\n  public void test() throws Exception {\n    // compile an expression:\n    Expression expr = JavascriptCompiler.compile(\"sqrt(_score) + ln(popularity)\");\n    \n    // we use SimpleBindings: which just maps variables to SortField instances\n    SimpleBindings bindings = new SimpleBindings();    \n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n    bindings.add(new SortField(\"popularity\", SortField.Type.INT));\n    \n    // create a sort field and sort by it (reverse order)\n    Sort sort = new Sort(expr.getSortField(bindings, true));\n    Query query = new TermQuery(new Term(\"body\", \"contents\"));\n    searcher.search(query, 3, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"27d4663d3f6f21a687874d174b49d55645ce99db":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27d4663d3f6f21a687874d174b49d55645ce99db"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f18d4e1cdc7330101ca433af5e8564dfd894f2bf"]},"commit2Childs":{"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"27d4663d3f6f21a687874d174b49d55645ce99db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["27d4663d3f6f21a687874d174b49d55645ce99db"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}