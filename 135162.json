{"path":"src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","commits":[{"id":"c881464041e282c06fdb34e91f883b83b8d97968","date":1247607562,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"/dev/null","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuffer(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.removeAll(Arrays.asList(TEST_STOP_WORDS));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.removeAll(Arrays.asList(TEST_STOP_WORDS));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuffer(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.removeAll(Arrays.asList(TEST_STOP_WORDS));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(Version.LUCENE_CURRENT, 10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.removeAll(Arrays.asList(TEST_STOP_WORDS));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.removeAll(Arrays.asList(TEST_STOP_WORDS));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c09067bd60a59f680992d62794689898c0148ac","date":1265200673,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(Version.LUCENE_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(Version.LUCENE_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(Version.LUCENE_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(Version.LUCENE_CURRENT, 10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.removeAll(Arrays.asList(TEST_STOP_WORDS));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(Version.LUCENE_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(Version.LUCENE_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(Version.LUCENE_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(TEST_VERSION_CURRENT, 10, true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    // This test was changed in 3.1, as a contains() call on the given Collection using the \"correct\" iterator's\n    // current key (now a char[]) on a Set<String> would not hit any element of the CAS and therefor never call\n    // remove() on the iterator\n    try{\n      set.removeAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(TEST_STOP_WORDS), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(NOT_IN_SET), true));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c09067bd60a59f680992d62794689898c0148ac":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["3c09067bd60a59f680992d62794689898c0148ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c881464041e282c06fdb34e91f883b83b8d97968":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["c881464041e282c06fdb34e91f883b83b8d97968"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"]},"commit2Childs":{"3c09067bd60a59f680992d62794689898c0148ac":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c881464041e282c06fdb34e91f883b83b8d97968"],"c881464041e282c06fdb34e91f883b83b8d97968":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["3c09067bd60a59f680992d62794689898c0148ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}