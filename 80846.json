{"path":"src/java/org/apache/lucene/index/DocumentsWriterFieldData#addNewVector().mjava","commits":[{"id":"5a0af3a442be522899177e5e11384a45a6784a3f","date":1205348952,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriterFieldData#addNewVector().mjava","pathOld":"/dev/null","sourceNew":"  /** Only called when term vectors are enabled.  This\n   *  is called the first time we see a given term for\n   *  each document, to allocate a PostingVector\n   *  instance that is used to record data needed to\n   *  write the posting vectors. */\n  private PostingVector addNewVector() {\n\n    if (postingsVectorsUpto == threadState.postingsVectors.length) {\n      final int newSize;\n      if (threadState.postingsVectors.length < 2)\n        newSize = 2;\n      else\n        newSize = (int) (1.5*threadState.postingsVectors.length);\n      PostingVector[] newArray = new PostingVector[newSize];\n      System.arraycopy(threadState.postingsVectors, 0, newArray, 0, threadState.postingsVectors.length);\n      threadState.postingsVectors = newArray;\n    }\n        \n    p.vector = threadState.postingsVectors[postingsVectorsUpto];\n    if (p.vector == null)\n      p.vector = threadState.postingsVectors[postingsVectorsUpto] = new PostingVector();\n\n    postingsVectorsUpto++;\n\n    final PostingVector v = p.vector;\n    v.p = p;\n\n    if (doVectorPositions) {\n      final int upto = threadState.vectorsPool.newSlice(ByteBlockPool.FIRST_LEVEL_SIZE);\n      v.posStart = v.posUpto = threadState.vectorsPool.byteOffset + upto;\n    }\n\n    if (doVectorOffsets) {\n      final int upto = threadState.vectorsPool.newSlice(ByteBlockPool.FIRST_LEVEL_SIZE);\n      v.offsetStart = v.offsetUpto = threadState.vectorsPool.byteOffset + upto;\n    }\n\n    return v;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/DocumentsWriterFieldData#addNewVector().mjava","sourceNew":null,"sourceOld":"  /** Only called when term vectors are enabled.  This\n   *  is called the first time we see a given term for\n   *  each document, to allocate a PostingVector\n   *  instance that is used to record data needed to\n   *  write the posting vectors. */\n  private PostingVector addNewVector() {\n\n    if (postingsVectorsUpto == threadState.postingsVectors.length) {\n      final int newSize;\n      if (threadState.postingsVectors.length < 2)\n        newSize = 2;\n      else\n        newSize = (int) (1.5*threadState.postingsVectors.length);\n      PostingVector[] newArray = new PostingVector[newSize];\n      System.arraycopy(threadState.postingsVectors, 0, newArray, 0, threadState.postingsVectors.length);\n      threadState.postingsVectors = newArray;\n    }\n        \n    p.vector = threadState.postingsVectors[postingsVectorsUpto];\n    if (p.vector == null)\n      p.vector = threadState.postingsVectors[postingsVectorsUpto] = new PostingVector();\n\n    postingsVectorsUpto++;\n\n    final PostingVector v = p.vector;\n    v.p = p;\n\n    if (doVectorPositions) {\n      final int upto = threadState.vectorsPool.newSlice(ByteBlockPool.FIRST_LEVEL_SIZE);\n      v.posStart = v.posUpto = threadState.vectorsPool.byteOffset + upto;\n    }\n\n    if (doVectorOffsets) {\n      final int upto = threadState.vectorsPool.newSlice(ByteBlockPool.FIRST_LEVEL_SIZE);\n      v.offsetStart = v.offsetUpto = threadState.vectorsPool.byteOffset + upto;\n    }\n\n    return v;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a0af3a442be522899177e5e11384a45a6784a3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5350389bf83287111f7760b9e3db3af8e3648474":["5a0af3a442be522899177e5e11384a45a6784a3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5350389bf83287111f7760b9e3db3af8e3648474"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a0af3a442be522899177e5e11384a45a6784a3f"],"5a0af3a442be522899177e5e11384a45a6784a3f":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}