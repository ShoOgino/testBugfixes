{"path":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","commits":[{"id":"1f192203c3feece147e3227c2446101d33858d81","date":1438359704,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","pathOld":"/dev/null","sourceNew":"  public void testBadRequests() {\n\n    // useful error msg when bogus selector is requested (ie: not min or max)\n    assertQEx(\"no error asking for bogus selector\",\n              \"hoss\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds_dv,'hoss')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error until/unless LUCENE-6709\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"val_tds\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"max\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error if min/max is unsupported for fieldtype\n    assertQEx(\"no error asking for max on a str field\",\n              \"cat_docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a str field\",\n              \"string\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"351efe6fdecf9af62134d37ec2582e4a0331a4dc","date":1498149096,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","sourceNew":"  public void testBadRequests() {\n\n    // useful error msg when bogus selector is requested (ie: not min or max)\n    assertQEx(\"no error asking for bogus selector\",\n              \"hoss\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds_dv,'hoss')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"no error asking for bogus selector\",\n        \"hoss\",\n        req(\"q\",\"*:*\", \"fl\", \"field(val_ds_p,'hoss')\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error until/unless LUCENE-6709\n    assertFalse(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").multiValued());\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"val_is_ndv_p\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"max\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error if min/max is unsupported for fieldtype\n    assertQEx(\"no error asking for max on a str field\",\n              \"cat_docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a str field\",\n              \"string\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n  }\n\n","sourceOld":"  public void testBadRequests() {\n\n    // useful error msg when bogus selector is requested (ie: not min or max)\n    assertQEx(\"no error asking for bogus selector\",\n              \"hoss\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds_dv,'hoss')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"no error asking for bogus selector\",\n        \"hoss\",\n        req(\"q\",\"*:*\", \"fl\", \"field(val_ds_p,'hoss')\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error until/unless LUCENE-6709\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"val_tds\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"max\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error if min/max is unsupported for fieldtype\n    assertQEx(\"no error asking for max on a str field\",\n              \"cat_docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a str field\",\n              \"string\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // MultiValued point field with dv=false\n    assertFalse(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").getType().isPointField());\n    assertTrue(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").multiValued());\n    assertQEx(\"no error asking for non-dv point fields\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e","date":1497547232,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","sourceNew":"  public void testBadRequests() {\n\n    // useful error msg when bogus selector is requested (ie: not min or max)\n    assertQEx(\"no error asking for bogus selector\",\n              \"hoss\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds_dv,'hoss')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"no error asking for bogus selector\",\n        \"hoss\",\n        req(\"q\",\"*:*\", \"fl\", \"field(val_ds_p,'hoss')\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error until/unless LUCENE-6709\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"val_tds\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"max\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error if min/max is unsupported for fieldtype\n    assertQEx(\"no error asking for max on a str field\",\n              \"cat_docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a str field\",\n              \"string\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // MultiValued point field with dv=false\n    assertFalse(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").getType().isPointField());\n    assertTrue(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").multiValued());\n    assertQEx(\"no error asking for non-dv point fields\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n  }\n\n","sourceOld":"  public void testBadRequests() {\n\n    // useful error msg when bogus selector is requested (ie: not min or max)\n    assertQEx(\"no error asking for bogus selector\",\n              \"hoss\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds_dv,'hoss')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error until/unless LUCENE-6709\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"val_tds\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"max\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error if min/max is unsupported for fieldtype\n    assertQEx(\"no error asking for max on a str field\",\n              \"cat_docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a str field\",\n              \"string\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","sourceNew":"  public void testBadRequests() {\n\n    // useful error msg when bogus selector is requested (ie: not min or max)\n    assertQEx(\"no error asking for bogus selector\",\n              \"hoss\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds_dv,'hoss')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"no error asking for bogus selector\",\n        \"hoss\",\n        req(\"q\",\"*:*\", \"fl\", \"field(val_ds_p,'hoss')\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error until/unless LUCENE-6709\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"val_tds\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"max\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error if min/max is unsupported for fieldtype\n    assertQEx(\"no error asking for max on a str field\",\n              \"cat_docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a str field\",\n              \"string\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // MultiValued point field with dv=false\n    assertFalse(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").getType().isPointField());\n    assertTrue(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").multiValued());\n    assertQEx(\"no error asking for non-dv point fields\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n  }\n\n","sourceOld":"  public void testBadRequests() {\n\n    // useful error msg when bogus selector is requested (ie: not min or max)\n    assertQEx(\"no error asking for bogus selector\",\n              \"hoss\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds_dv,'hoss')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error until/unless LUCENE-6709\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"val_tds\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"max\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error if min/max is unsupported for fieldtype\n    assertQEx(\"no error asking for max on a str field\",\n              \"cat_docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a str field\",\n              \"string\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","sourceNew":"  public void testBadRequests() {\n\n    // useful error msg when bogus selector is requested (ie: not min or max)\n    assertQEx(\"no error asking for bogus selector\",\n              \"hoss\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds_dv,'hoss')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"no error asking for bogus selector\",\n        \"hoss\",\n        req(\"q\",\"*:*\", \"fl\", \"field(val_ds_p,'hoss')\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error until/unless LUCENE-6709\n    assertFalse(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").multiValued());\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"val_is_ndv_p\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"max\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error if min/max is unsupported for fieldtype\n    assertQEx(\"no error asking for max on a str field\",\n              \"cat_docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a str field\",\n              \"string\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n  }\n\n","sourceOld":"  public void testBadRequests() {\n\n    // useful error msg when bogus selector is requested (ie: not min or max)\n    assertQEx(\"no error asking for bogus selector\",\n              \"hoss\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds_dv,'hoss')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"no error asking for bogus selector\",\n        \"hoss\",\n        req(\"q\",\"*:*\", \"fl\", \"field(val_ds_p,'hoss')\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error until/unless LUCENE-6709\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"val_tds\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"max\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error if min/max is unsupported for fieldtype\n    assertQEx(\"no error asking for max on a str field\",\n              \"cat_docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a str field\",\n              \"string\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // MultiValued point field with dv=false\n    assertFalse(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").getType().isPointField());\n    assertTrue(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").multiValued());\n    assertQEx(\"no error asking for non-dv point fields\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","sourceNew":"  public void testBadRequests() {\n\n    // useful error msg when bogus selector is requested (ie: not min or max)\n    assertQEx(\"no error asking for bogus selector\",\n              \"hoss\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds_dv,'hoss')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"no error asking for bogus selector\",\n        \"hoss\",\n        req(\"q\",\"*:*\", \"fl\", \"field(val_ds_p,'hoss')\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error until/unless LUCENE-6709\n    assertFalse(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").multiValued());\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"val_is_ndv_p\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"max\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error if min/max is unsupported for fieldtype\n    assertQEx(\"no error asking for max on a str field\",\n              \"cat_docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a str field\",\n              \"string\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n  }\n\n","sourceOld":"  public void testBadRequests() {\n\n    // useful error msg when bogus selector is requested (ie: not min or max)\n    assertQEx(\"no error asking for bogus selector\",\n              \"hoss\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds_dv,'hoss')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error until/unless LUCENE-6709\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"val_tds\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"max\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error if min/max is unsupported for fieldtype\n    assertQEx(\"no error asking for max on a str field\",\n              \"cat_docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a str field\",\n              \"string\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf2282b6a7c3f113e7a233b785b80527c03d590","date":1516129064,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","sourceNew":"  public void testBadRequests() {\n\n    // useful error msg when bogus selector is requested (ie: not min or max)\n    assertQEx(\"no error asking for bogus selector\",\n              \"hoss\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds_dv,'hoss')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"no error asking for bogus selector\",\n        \"hoss\",\n        req(\"q\",\"*:*\", \"fl\", \"field(val_ds_p,'hoss')\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error until/unless LUCENE-6709\n    assertFalse(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").multiValued());\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"val_is_ndv_p\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"max\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error if min/max is unsupported for fieldtype\n    assertQEx(\"no error mentioning field name when asking for max on type that doesn't support it\",\n              \"cat_length\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_length,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error mentioning type when asking for max on type that doesn't support it\",\n              \"text_length\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_length,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    // type supports, but field doesn't have docValues\n    assertQEx(\"no error mentioning field name when asking for max on a non-dv str field\",\n              \"cat\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error mentioning 'docValues' when asking for max on a non-dv str field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n  }\n\n","sourceOld":"  public void testBadRequests() {\n\n    // useful error msg when bogus selector is requested (ie: not min or max)\n    assertQEx(\"no error asking for bogus selector\",\n              \"hoss\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds_dv,'hoss')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"no error asking for bogus selector\",\n        \"hoss\",\n        req(\"q\",\"*:*\", \"fl\", \"field(val_ds_p,'hoss')\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error until/unless LUCENE-6709\n    assertFalse(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").multiValued());\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"val_is_ndv_p\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"max\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error if min/max is unsupported for fieldtype\n    assertQEx(\"no error asking for max on a str field\",\n              \"cat_docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a str field\",\n              \"string\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","sourceNew":"  public void testBadRequests() {\n\n    // useful error msg when bogus selector is requested (ie: not min or max)\n    assertQEx(\"no error asking for bogus selector\",\n              \"hoss\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds_dv,'hoss')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"no error asking for bogus selector\",\n        \"hoss\",\n        req(\"q\",\"*:*\", \"fl\", \"field(val_ds_p,'hoss')\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error until/unless LUCENE-6709\n    assertFalse(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").multiValued());\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"val_is_ndv_p\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"max\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error if min/max is unsupported for fieldtype\n    assertQEx(\"no error mentioning field name when asking for max on type that doesn't support it\",\n              \"cat_length\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_length,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error mentioning type when asking for max on type that doesn't support it\",\n              \"text_length\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_length,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    // type supports, but field doesn't have docValues\n    assertQEx(\"no error mentioning field name when asking for max on a non-dv str field\",\n              \"cat\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error mentioning 'docValues' when asking for max on a non-dv str field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n  }\n\n","sourceOld":"  public void testBadRequests() {\n\n    // useful error msg when bogus selector is requested (ie: not min or max)\n    assertQEx(\"no error asking for bogus selector\",\n              \"hoss\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds_dv,'hoss')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"no error asking for bogus selector\",\n        \"hoss\",\n        req(\"q\",\"*:*\", \"fl\", \"field(val_ds_p,'hoss')\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error until/unless LUCENE-6709\n    assertFalse(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").multiValued());\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"val_is_ndv_p\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"max\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error if min/max is unsupported for fieldtype\n    assertQEx(\"no error asking for max on a str field\",\n              \"cat_docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a str field\",\n              \"string\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_docValues,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09db84b25dda87b73022d145a68f14c86a3a552d","date":1517506829,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testBadRequests().mjava","sourceNew":"  public void testBadRequests() {\n\n    // useful error msg when bogus selector is requested (ie: not min or max)\n    assertQEx(\"no error asking for bogus selector\",\n              \"hoss\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds_dv,'hoss')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"no error asking for bogus selector\",\n        \"hoss\",\n        req(\"q\",\"*:*\", \"fl\", \"field(val_ds_p,'hoss')\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error until/unless LUCENE-6709\n    assertFalse(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").multiValued());\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"val_is_ndv_p\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"max\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error if min/max is unsupported for fieldtype\n    assertQEx(\"no error mentioning field name when asking for max on type that doesn't support it\",\n              \"cat_length\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_length,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error mentioning type when asking for max on type that doesn't support it\",\n              \"text_length\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_length,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    // type supports, but field doesn't have docValues\n    assertQEx(\"no error mentioning field name when asking for max on a non-dv str field\",\n              \"cat\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error mentioning 'docValues' when asking for max on a non-dv str field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error mentioning field name when asking for max on a non-dv sortable text field\",\n              \"val_stxt_s_nodv\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_stxt_s_nodv,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error mentioning 'docValues' when asking for max on a non-dv sortable field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_stxt_s_nodv,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n    \n  }\n\n","sourceOld":"  public void testBadRequests() {\n\n    // useful error msg when bogus selector is requested (ie: not min or max)\n    assertQEx(\"no error asking for bogus selector\",\n              \"hoss\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_tds_dv,'hoss')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"no error asking for bogus selector\",\n        \"hoss\",\n        req(\"q\",\"*:*\", \"fl\", \"field(val_ds_p,'hoss')\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error until/unless LUCENE-6709\n    assertFalse(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(\"val_is_ndv_p\").multiValued());\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"val_is_ndv_p\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"max\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error asking for max on a non docVals field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(val_is_ndv_p,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n    // useful error if min/max is unsupported for fieldtype\n    assertQEx(\"no error mentioning field name when asking for max on type that doesn't support it\",\n              \"cat_length\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_length,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error mentioning type when asking for max on type that doesn't support it\",\n              \"text_length\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat_length,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    // type supports, but field doesn't have docValues\n    assertQEx(\"no error mentioning field name when asking for max on a non-dv str field\",\n              \"cat\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    assertQEx(\"no error mentioning 'docValues' when asking for max on a non-dv str field\",\n              \"docValues\",\n              req(\"q\",\"*:*\", \"fl\", \"field(cat,'max')\"),\n              SolrException.ErrorCode.BAD_REQUEST);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e"],"5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e":["1f192203c3feece147e3227c2446101d33858d81"],"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"1f192203c3feece147e3227c2446101d33858d81":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09db84b25dda87b73022d145a68f14c86a3a552d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"28288370235ed02234a64753cdbf0c6ec096304a":["1f192203c3feece147e3227c2446101d33858d81","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["1f192203c3feece147e3227c2446101d33858d81","5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09db84b25dda87b73022d145a68f14c86a3a552d"]},"commit2Childs":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e":["351efe6fdecf9af62134d37ec2582e4a0331a4dc","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b94236357aaa22b76c10629851fe4e376e0cea82":["09db84b25dda87b73022d145a68f14c86a3a552d"],"1f192203c3feece147e3227c2446101d33858d81":["5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f192203c3feece147e3227c2446101d33858d81"],"09db84b25dda87b73022d145a68f14c86a3a552d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}