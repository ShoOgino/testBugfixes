{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#addField0(String,String,boolean,boolean,int).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#addField0(String,String,boolean,boolean,int).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#addField0(String,String,boolean,boolean,int).mjava","sourceNew":"  /**\n   * Splits the XPATH into a List of xpath segments and calls build() to\n   * construct a tree of Nodes representing xpath segments. The resulting\n   * tree structure ends up describing all the Xpaths we are interested in.\n   *\n   * @param xpath The xpath expression for this field\n   * @param name The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in \n   *                    a List<String>\n   * @param isRecord Flags that this XPATH is from a forEach statement\n   * @param flags The only supported flag is 'FLATTEN'\n   */\n  private void addField0(String xpath, String name, boolean multiValued,\n                         boolean isRecord, int flags) {\n    if (!xpath.startsWith(\"/\"))\n      throw new RuntimeException(\"xpath must start with '/' : \" + xpath);\n    List<String> paths = splitEscapeQuote(xpath);\n    // deal with how split behaves when seperator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, name, multiValued, isRecord, flags);\n    rootNode.buildOptimise(null);\n  }\n\n","sourceOld":"  /**\n   * Splits the XPATH into a List of xpath segments and calls build() to\n   * construct a tree of Nodes representing xpath segments. The resulting\n   * tree structure ends up describing all the Xpaths we are interested in.\n   *\n   * @param xpath The xpath expression for this field\n   * @param name The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in \n   *                    a List<String>\n   * @param isRecord Flags that this XPATH is from a forEach statement\n   * @param flags The only supported flag is 'FLATTEN'\n   */\n  private void addField0(String xpath, String name, boolean multiValued,\n                         boolean isRecord, int flags) {\n    if (!xpath.startsWith(\"/\"))\n      throw new RuntimeException(\"xpath must start with '/' : \" + xpath);\n    List<String> paths = splitEscapeQuote(xpath);\n    // deal with how split behaves when seperator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, name, multiValued, isRecord, flags);\n    rootNode.buildOptimise(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#addField0(String,String,boolean,boolean,int).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#addField0(String,String,boolean,boolean,int).mjava","sourceNew":"  /**\n   * Splits the XPATH into a List of xpath segments and calls build() to\n   * construct a tree of Nodes representing xpath segments. The resulting\n   * tree structure ends up describing all the Xpaths we are interested in.\n   *\n   * @param xpath The xpath expression for this field\n   * @param name The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in \n   *                    a List<String>\n   * @param isRecord Flags that this XPATH is from a forEach statement\n   * @param flags The only supported flag is 'FLATTEN'\n   */\n  private void addField0(String xpath, String name, boolean multiValued,\n                         boolean isRecord, int flags) {\n    if (!xpath.startsWith(\"/\"))\n      throw new RuntimeException(\"xpath must start with '/' : \" + xpath);\n    List<String> paths = splitEscapeQuote(xpath);\n    // deal with how split behaves when seperator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, name, multiValued, isRecord, flags);\n    rootNode.buildOptimise(null);\n  }\n\n","sourceOld":"  /**\n   * Splits the XPATH into a List of xpath segments and calls build() to\n   * construct a tree of Nodes representing xpath segments. The resulting\n   * tree structure ends up describing all the Xpaths we are interested in.\n   *\n   * @param xpath The xpath expression for this field\n   * @param name The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in \n   *                    a List<String>\n   * @param isRecord Flags that this XPATH is from a forEach statement\n   * @param flags The only supported flag is 'FLATTEN'\n   */\n  private void addField0(String xpath, String name, boolean multiValued,\n                         boolean isRecord, int flags) {\n    if (!xpath.startsWith(\"/\"))\n      throw new RuntimeException(\"xpath must start with '/' : \" + xpath);\n    List<String> paths = splitEscapeQuote(xpath);\n    // deal with how split behaves when seperator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, name, multiValued, isRecord, flags);\n    rootNode.buildOptimise(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"124e3f7e11a7f7f24a209763dbff8f43b69ae82e","date":1347302888,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#addField0(String,String,boolean,boolean,int).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#addField0(String,String,boolean,boolean,int).mjava","sourceNew":"  /**\n   * Splits the XPATH into a List of xpath segments and calls build() to\n   * construct a tree of Nodes representing xpath segments. The resulting\n   * tree structure ends up describing all the Xpaths we are interested in.\n   *\n   * @param xpath The xpath expression for this field\n   * @param name The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in \n   *                    a List&lt;String&gt;\n   * @param isRecord Flags that this XPATH is from a forEach statement\n   * @param flags The only supported flag is 'FLATTEN'\n   */\n  private void addField0(String xpath, String name, boolean multiValued,\n                         boolean isRecord, int flags) {\n    if (!xpath.startsWith(\"/\"))\n      throw new RuntimeException(\"xpath must start with '/' : \" + xpath);\n    List<String> paths = splitEscapeQuote(xpath);\n    // deal with how split behaves when seperator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, name, multiValued, isRecord, flags);\n    rootNode.buildOptimise(null);\n  }\n\n","sourceOld":"  /**\n   * Splits the XPATH into a List of xpath segments and calls build() to\n   * construct a tree of Nodes representing xpath segments. The resulting\n   * tree structure ends up describing all the Xpaths we are interested in.\n   *\n   * @param xpath The xpath expression for this field\n   * @param name The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in \n   *                    a List<String>\n   * @param isRecord Flags that this XPATH is from a forEach statement\n   * @param flags The only supported flag is 'FLATTEN'\n   */\n  private void addField0(String xpath, String name, boolean multiValued,\n                         boolean isRecord, int flags) {\n    if (!xpath.startsWith(\"/\"))\n      throw new RuntimeException(\"xpath must start with '/' : \" + xpath);\n    List<String> paths = splitEscapeQuote(xpath);\n    // deal with how split behaves when seperator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, name, multiValued, isRecord, flags);\n    rootNode.buildOptimise(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18e7cf5eab4be20c96aa36554daa39b53f43cf6e","date":1490632275,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#addField0(String,String,boolean,boolean,int).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#addField0(String,String,boolean,boolean,int).mjava","sourceNew":"  /**\n   * Splits the XPATH into a List of xpath segments and calls build() to\n   * construct a tree of Nodes representing xpath segments. The resulting\n   * tree structure ends up describing all the Xpaths we are interested in.\n   *\n   * @param xpath The xpath expression for this field\n   * @param name The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in \n   *                    a List&lt;String&gt;\n   * @param isRecord Flags that this XPATH is from a forEach statement\n   * @param flags The only supported flag is 'FLATTEN'\n   */\n  private void addField0(String xpath, String name, boolean multiValued,\n                         boolean isRecord, int flags) {\n    if (!xpath.startsWith(\"/\"))\n      throw new RuntimeException(\"xpath must start with '/' : \" + xpath);\n    List<String> paths = splitEscapeQuote(xpath);\n    // deal with how split behaves when separator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, name, multiValued, isRecord, flags);\n    rootNode.buildOptimise(null);\n  }\n\n","sourceOld":"  /**\n   * Splits the XPATH into a List of xpath segments and calls build() to\n   * construct a tree of Nodes representing xpath segments. The resulting\n   * tree structure ends up describing all the Xpaths we are interested in.\n   *\n   * @param xpath The xpath expression for this field\n   * @param name The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in \n   *                    a List&lt;String&gt;\n   * @param isRecord Flags that this XPATH is from a forEach statement\n   * @param flags The only supported flag is 'FLATTEN'\n   */\n  private void addField0(String xpath, String name, boolean multiValued,\n                         boolean isRecord, int flags) {\n    if (!xpath.startsWith(\"/\"))\n      throw new RuntimeException(\"xpath must start with '/' : \" + xpath);\n    List<String> paths = splitEscapeQuote(xpath);\n    // deal with how split behaves when seperator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, name, multiValued, isRecord, flags);\n    rootNode.buildOptimise(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"febf4fa8feff6bbc932c1b388cbd758a3e6697f7","date":1490873944,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#addField0(String,String,boolean,boolean,int).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#addField0(String,String,boolean,boolean,int).mjava","sourceNew":"  /**\n   * Splits the XPATH into a List of xpath segments and calls build() to\n   * construct a tree of Nodes representing xpath segments. The resulting\n   * tree structure ends up describing all the Xpaths we are interested in.\n   *\n   * @param xpath The xpath expression for this field\n   * @param name The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in \n   *                    a List&lt;String&gt;\n   * @param isRecord Flags that this XPATH is from a forEach statement\n   * @param flags The only supported flag is 'FLATTEN'\n   */\n  private void addField0(String xpath, String name, boolean multiValued,\n                         boolean isRecord, int flags) {\n    if (!xpath.startsWith(\"/\"))\n      throw new RuntimeException(\"xpath must start with '/' : \" + xpath);\n    List<String> paths = splitEscapeQuote(xpath);\n    // deal with how split behaves when separator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, name, multiValued, isRecord, flags);\n    rootNode.buildOptimise(null);\n  }\n\n","sourceOld":"  /**\n   * Splits the XPATH into a List of xpath segments and calls build() to\n   * construct a tree of Nodes representing xpath segments. The resulting\n   * tree structure ends up describing all the Xpaths we are interested in.\n   *\n   * @param xpath The xpath expression for this field\n   * @param name The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in \n   *                    a List&lt;String&gt;\n   * @param isRecord Flags that this XPATH is from a forEach statement\n   * @param flags The only supported flag is 'FLATTEN'\n   */\n  private void addField0(String xpath, String name, boolean multiValued,\n                         boolean isRecord, int flags) {\n    if (!xpath.startsWith(\"/\"))\n      throw new RuntimeException(\"xpath must start with '/' : \" + xpath);\n    List<String> paths = splitEscapeQuote(xpath);\n    // deal with how split behaves when seperator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, name, multiValued, isRecord, flags);\n    rootNode.buildOptimise(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#addField0(String,String,boolean,boolean,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Splits the XPATH into a List of xpath segments and calls build() to\n   * construct a tree of Nodes representing xpath segments. The resulting\n   * tree structure ends up describing all the Xpaths we are interested in.\n   *\n   * @param xpath The xpath expression for this field\n   * @param name The name for this field in the emitted record\n   * @param multiValued If 'true' then the emitted record will have values in \n   *                    a List&lt;String&gt;\n   * @param isRecord Flags that this XPATH is from a forEach statement\n   * @param flags The only supported flag is 'FLATTEN'\n   */\n  private void addField0(String xpath, String name, boolean multiValued,\n                         boolean isRecord, int flags) {\n    if (!xpath.startsWith(\"/\"))\n      throw new RuntimeException(\"xpath must start with '/' : \" + xpath);\n    List<String> paths = splitEscapeQuote(xpath);\n    // deal with how split behaves when separator starts a string!\n    if (\"\".equals(paths.get(0).trim()))\n      paths.remove(0);\n    rootNode.build(paths, name, multiValued, isRecord, flags);\n    rootNode.buildOptimise(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"febf4fa8feff6bbc932c1b388cbd758a3e6697f7":["124e3f7e11a7f7f24a209763dbff8f43b69ae82e"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["18e7cf5eab4be20c96aa36554daa39b53f43cf6e"],"18e7cf5eab4be20c96aa36554daa39b53f43cf6e":["124e3f7e11a7f7f24a209763dbff8f43b69ae82e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"124e3f7e11a7f7f24a209763dbff8f43b69ae82e":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"febf4fa8feff6bbc932c1b388cbd758a3e6697f7":[],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"18e7cf5eab4be20c96aa36554daa39b53f43cf6e":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["124e3f7e11a7f7f24a209763dbff8f43b69ae82e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"124e3f7e11a7f7f24a209763dbff8f43b69ae82e":["febf4fa8feff6bbc932c1b388cbd758a3e6697f7","18e7cf5eab4be20c96aa36554daa39b53f43cf6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["febf4fa8feff6bbc932c1b388cbd758a3e6697f7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}