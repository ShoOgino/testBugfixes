{"path":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testBigIntSpecialValues().mjava","commits":[{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testBigIntSpecialValues().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * check extreme values of big integers (4 bytes)\n   * check for correct ordering of the encoded bytes and that values round-trip.\n   */\n  public void testBigIntSpecialValues() throws Exception {\n    BigInteger[] values = new BigInteger[] {\n      BigInteger.valueOf(Integer.MIN_VALUE), BigInteger.valueOf(Integer.MIN_VALUE+1), \n      BigInteger.valueOf(Integer.MIN_VALUE+2), BigInteger.valueOf(-64765767),\n      BigInteger.valueOf(-4000), BigInteger.valueOf(-3000), BigInteger.valueOf(-2000), \n      BigInteger.valueOf(-1000), BigInteger.valueOf(-1), BigInteger.valueOf(0), \n      BigInteger.valueOf(1), BigInteger.valueOf(10), BigInteger.valueOf(300), \n      BigInteger.valueOf(765878989), BigInteger.valueOf(Integer.MAX_VALUE-2), \n      BigInteger.valueOf(Integer.MAX_VALUE-1), BigInteger.valueOf(Integer.MAX_VALUE)\n    };\n    BytesRef[] encoded = new BytesRef[values.length];\n    \n    for (int i = 0; i < values.length; i++) {\n      encoded[i] = new BytesRef(new byte[Integer.BYTES]);\n      NumericUtils.bigIntToSortableBytes(values[i], Integer.BYTES, encoded[i].bytes, encoded[i].offset);\n      \n      // check forward and back conversion\n      assertEquals(\"forward and back conversion should generate same big integer\", \n                   values[i], \n                   NumericUtils.sortableBytesToBigInt(encoded[i].bytes, encoded[i].offset, Integer.BYTES));\n    }\n    \n    // check sort order (encoded values should be ascending)\n    for (int i = 1; i < encoded.length; i++) {\n      assertTrue(\"check sort order\", encoded[i-1].compareTo(encoded[i]) < 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testBigIntSpecialValues().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * check extreme values of big integers (4 bytes)\n   * check for correct ordering of the encoded bytes and that values round-trip.\n   */\n  public void testBigIntSpecialValues() throws Exception {\n    BigInteger[] values = new BigInteger[] {\n      BigInteger.valueOf(Integer.MIN_VALUE), BigInteger.valueOf(Integer.MIN_VALUE+1), \n      BigInteger.valueOf(Integer.MIN_VALUE+2), BigInteger.valueOf(-64765767),\n      BigInteger.valueOf(-4000), BigInteger.valueOf(-3000), BigInteger.valueOf(-2000), \n      BigInteger.valueOf(-1000), BigInteger.valueOf(-1), BigInteger.valueOf(0), \n      BigInteger.valueOf(1), BigInteger.valueOf(10), BigInteger.valueOf(300), \n      BigInteger.valueOf(765878989), BigInteger.valueOf(Integer.MAX_VALUE-2), \n      BigInteger.valueOf(Integer.MAX_VALUE-1), BigInteger.valueOf(Integer.MAX_VALUE)\n    };\n    BytesRef[] encoded = new BytesRef[values.length];\n    \n    for (int i = 0; i < values.length; i++) {\n      encoded[i] = new BytesRef(new byte[Integer.BYTES]);\n      NumericUtils.bigIntToSortableBytes(values[i], Integer.BYTES, encoded[i].bytes, encoded[i].offset);\n      \n      // check forward and back conversion\n      assertEquals(\"forward and back conversion should generate same big integer\", \n                   values[i], \n                   NumericUtils.sortableBytesToBigInt(encoded[i].bytes, encoded[i].offset, Integer.BYTES));\n    }\n    \n    // check sort order (encoded values should be ascending)\n    for (int i = 1; i < encoded.length; i++) {\n      assertTrue(\"check sort order\", encoded[i-1].compareTo(encoded[i]) < 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}