{"path":"src/java/org/apache/lucene/search/payloads/BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer#explain(int).mjava","commits":[{"id":"5426a570e28de2804e59c68509fe71ab7f43afe5","date":1175086695,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer#explain(int).mjava","pathOld":"/dev/null","sourceNew":"      public Explanation explain(final int doc) throws IOException {\n        Explanation result = new Explanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        //QUESTION: Is there a wau to avoid this skipTo call?  We need to know whether to load the payload or not\n        \n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n/*\n        if (skipTo(doc) == true) {\n          loadPayload();\n        }\n*/\n        float payloadScore = getSimilarity().scorePayload(payload, 0, positions.getPayloadLength());\n        payloadBoost.setValue(payloadScore);\n        //GSI: I suppose we could toString the payload, but I don't think that would be a good idea \n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * payloadScore);\n        result.setDescription(\"btq\");\n        return result;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b6b238af60d31e039294cb26e9e927546a619206","0e60b4907a1867e066f425a450d96e4297dfa973"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32c97797222c63ae0cce3322818565bdb8d2b8c9","date":1177418982,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer#explain(int).mjava","sourceNew":"      public Explanation explain(final int doc) throws IOException {\n        Explanation result = new Explanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        //QUESTION: Is there a wau to avoid this skipTo call?  We need to know whether to load the payload or not\n        \n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n/*\n        if (skipTo(doc) == true) {\n          processPayload();\n        }\n*/\n\n        float avgPayloadScore = payloadScore / payloadsSeen;\n        payloadBoost.setValue(avgPayloadScore);\n        //GSI: I suppose we could toString the payload, but I don't think that would be a good idea \n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * avgPayloadScore);\n        result.setDescription(\"btq\");\n        return result;\n      }\n\n","sourceOld":"      public Explanation explain(final int doc) throws IOException {\n        Explanation result = new Explanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        //QUESTION: Is there a wau to avoid this skipTo call?  We need to know whether to load the payload or not\n        \n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n/*\n        if (skipTo(doc) == true) {\n          loadPayload();\n        }\n*/\n        float payloadScore = getSimilarity().scorePayload(payload, 0, positions.getPayloadLength());\n        payloadBoost.setValue(payloadScore);\n        //GSI: I suppose we could toString the payload, but I don't think that would be a good idea \n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * payloadScore);\n        result.setDescription(\"btq\");\n        return result;\n      }\n\n","bugFix":null,"bugIntro":["d6b0d3878b50401a76f5239a2c4a8391fced796f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e60b4907a1867e066f425a450d96e4297dfa973","date":1180989666,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer#explain(int).mjava","sourceNew":"      public Explanation explain(final int doc) throws IOException {\n        Explanation result = new Explanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        //QUESTION: Is there a wau to avoid this skipTo call?  We need to know whether to load the payload or not\n        \n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n/*\n        if (skipTo(doc) == true) {\n          processPayload();\n        }\n*/\n\n        float avgPayloadScore = payloadScore / payloadsSeen;\n        payloadBoost.setValue(avgPayloadScore);\n        //GSI: I suppose we could toString the payload, but I don't think that would be a good idea \n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * avgPayloadScore);\n        result.setDescription(\"btq, product of:\");\n        return result;\n      }\n\n","sourceOld":"      public Explanation explain(final int doc) throws IOException {\n        Explanation result = new Explanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        //QUESTION: Is there a wau to avoid this skipTo call?  We need to know whether to load the payload or not\n        \n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n/*\n        if (skipTo(doc) == true) {\n          processPayload();\n        }\n*/\n\n        float avgPayloadScore = payloadScore / payloadsSeen;\n        payloadBoost.setValue(avgPayloadScore);\n        //GSI: I suppose we could toString the payload, but I don't think that would be a good idea \n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * avgPayloadScore);\n        result.setDescription(\"btq\");\n        return result;\n      }\n\n","bugFix":["5426a570e28de2804e59c68509fe71ab7f43afe5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6b0d3878b50401a76f5239a2c4a8391fced796f","date":1189270648,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer#explain(int).mjava","sourceNew":"      public Explanation explain(final int doc) throws IOException {\n        Explanation result = new Explanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        //QUESTION: Is there a wau to avoid this skipTo call?  We need to know whether to load the payload or not\n        \n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n/*\n        if (skipTo(doc) == true) {\n          processPayload();\n        }\n*/\n\n        float avgPayloadScore =  (payloadsSeen > 0 ? (payloadScore / payloadsSeen) : 1); \n        payloadBoost.setValue(avgPayloadScore);\n        //GSI: I suppose we could toString the payload, but I don't think that would be a good idea \n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * avgPayloadScore);\n        result.setDescription(\"btq, product of:\");\n        return result;\n      }\n\n","sourceOld":"      public Explanation explain(final int doc) throws IOException {\n        Explanation result = new Explanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        //QUESTION: Is there a wau to avoid this skipTo call?  We need to know whether to load the payload or not\n        \n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n/*\n        if (skipTo(doc) == true) {\n          processPayload();\n        }\n*/\n\n        float avgPayloadScore = payloadScore / payloadsSeen;\n        payloadBoost.setValue(avgPayloadScore);\n        //GSI: I suppose we could toString the payload, but I don't think that would be a good idea \n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * avgPayloadScore);\n        result.setDescription(\"btq, product of:\");\n        return result;\n      }\n\n","bugFix":["32c97797222c63ae0cce3322818565bdb8d2b8c9"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6b238af60d31e039294cb26e9e927546a619206","date":1213244110,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer#explain(int).mjava","sourceNew":"      public Explanation explain(final int doc) throws IOException {\n        ComplexExplanation result = new ComplexExplanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        //QUESTION: Is there a wau to avoid this skipTo call?  We need to know whether to load the payload or not\n        \n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n/*\n        if (skipTo(doc) == true) {\n          processPayload();\n        }\n*/\n\n        float avgPayloadScore =  (payloadsSeen > 0 ? (payloadScore / payloadsSeen) : 1); \n        payloadBoost.setValue(avgPayloadScore);\n        //GSI: I suppose we could toString the payload, but I don't think that would be a good idea \n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * avgPayloadScore);\n        result.setDescription(\"btq, product of:\");\n        result.setMatch(nonPayloadExpl.getValue()==0 ? Boolean.FALSE : Boolean.TRUE); // LUCENE-1303\n        return result;\n      }\n\n","sourceOld":"      public Explanation explain(final int doc) throws IOException {\n        Explanation result = new Explanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        //QUESTION: Is there a wau to avoid this skipTo call?  We need to know whether to load the payload or not\n        \n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n/*\n        if (skipTo(doc) == true) {\n          processPayload();\n        }\n*/\n\n        float avgPayloadScore =  (payloadsSeen > 0 ? (payloadScore / payloadsSeen) : 1); \n        payloadBoost.setValue(avgPayloadScore);\n        //GSI: I suppose we could toString the payload, but I don't think that would be a good idea \n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * avgPayloadScore);\n        result.setDescription(\"btq, product of:\");\n        return result;\n      }\n\n","bugFix":["5426a570e28de2804e59c68509fe71ab7f43afe5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c94837f36779069fd9b6b70e462b57515473d88","date":1249677298,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/BoostingFunctionTermQuery.BoostingFunctionTermWeight.BoostingFunctionSpanScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer#explain(int).mjava","sourceNew":"      public Explanation explain(final int doc) throws IOException {\n        ComplexExplanation result = new ComplexExplanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        //QUESTION: Is there a way to avoid this skipTo call?  We need to know whether to load the payload or not\n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n\n\n        float payloadScore = getPayloadScore();\n        payloadBoost.setValue(payloadScore);\n        //GSI: I suppose we could toString the payload, but I don't think that would be a good idea\n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * payloadScore);\n        result.setDescription(\"btq, product of:\");\n        result.setMatch(nonPayloadExpl.getValue()==0 ? Boolean.FALSE : Boolean.TRUE); // LUCENE-1303\n        return result;\n      }\n\n","sourceOld":"      public Explanation explain(final int doc) throws IOException {\n        ComplexExplanation result = new ComplexExplanation();\n        Explanation nonPayloadExpl = super.explain(doc);\n        result.addDetail(nonPayloadExpl);\n        //QUESTION: Is there a wau to avoid this skipTo call?  We need to know whether to load the payload or not\n        \n        Explanation payloadBoost = new Explanation();\n        result.addDetail(payloadBoost);\n/*\n        if (skipTo(doc) == true) {\n          processPayload();\n        }\n*/\n\n        float avgPayloadScore =  (payloadsSeen > 0 ? (payloadScore / payloadsSeen) : 1); \n        payloadBoost.setValue(avgPayloadScore);\n        //GSI: I suppose we could toString the payload, but I don't think that would be a good idea \n        payloadBoost.setDescription(\"scorePayload(...)\");\n        result.setValue(nonPayloadExpl.getValue() * avgPayloadScore);\n        result.setDescription(\"btq, product of:\");\n        result.setMatch(nonPayloadExpl.getValue()==0 ? Boolean.FALSE : Boolean.TRUE); // LUCENE-1303\n        return result;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6b238af60d31e039294cb26e9e927546a619206":["d6b0d3878b50401a76f5239a2c4a8391fced796f"],"d6b0d3878b50401a76f5239a2c4a8391fced796f":["0e60b4907a1867e066f425a450d96e4297dfa973"],"4c94837f36779069fd9b6b70e462b57515473d88":["b6b238af60d31e039294cb26e9e927546a619206"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5426a570e28de2804e59c68509fe71ab7f43afe5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e60b4907a1867e066f425a450d96e4297dfa973":["32c97797222c63ae0cce3322818565bdb8d2b8c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c94837f36779069fd9b6b70e462b57515473d88"],"32c97797222c63ae0cce3322818565bdb8d2b8c9":["5426a570e28de2804e59c68509fe71ab7f43afe5"]},"commit2Childs":{"b6b238af60d31e039294cb26e9e927546a619206":["4c94837f36779069fd9b6b70e462b57515473d88"],"d6b0d3878b50401a76f5239a2c4a8391fced796f":["b6b238af60d31e039294cb26e9e927546a619206"],"4c94837f36779069fd9b6b70e462b57515473d88":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5426a570e28de2804e59c68509fe71ab7f43afe5"],"5426a570e28de2804e59c68509fe71ab7f43afe5":["32c97797222c63ae0cce3322818565bdb8d2b8c9"],"0e60b4907a1867e066f425a450d96e4297dfa973":["d6b0d3878b50401a76f5239a2c4a8391fced796f"],"32c97797222c63ae0cce3322818565bdb8d2b8c9":["0e60b4907a1867e066f425a450d96e4297dfa973"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}