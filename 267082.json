{"path":"lucene/contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest#setUp().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest#setUp().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90329759f82c33c8fdb14d8bc0db5e81d17934b8","date":1270913806,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#setUp().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.setTimeInMillis(1041397200000L); // 2003 January 01\n\n    for (int i = 0; i < MAX; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"key\", \"\" + (i + 1), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"owner\", (i < MAX / 2) ? \"bob\" : \"sue\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"date\", cal.getTime().toString(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n\n      cal.add(Calendar.DATE, 1);\n    }\n\n    writer.close();\n\n    searcher = new IndexSearcher(directory, true);\n\n    // query for everything to make life easier\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new TermQuery(new Term(\"owner\", \"bob\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"owner\", \"sue\")), BooleanClause.Occur.SHOULD);\n    query = bq;\n\n    // date filter matches everything too\n    //Date pastTheEnd = parseDate(\"2099 Jan 1\");\n    // dateFilter = DateFilter.Before(\"date\", pastTheEnd);\n    // just treat dates as strings and select the whole range for now...\n    dateFilter = new TermRangeFilter(\"date\",\"\",\"ZZZZ\",true,true);\n\n    bobFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"bob\")));\n    sueFilter = new QueryWrapperFilter(\n        new TermQuery(new Term(\"owner\", \"sue\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90329759f82c33c8fdb14d8bc0db5e81d17934b8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90329759f82c33c8fdb14d8bc0db5e81d17934b8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90329759f82c33c8fdb14d8bc0db5e81d17934b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90329759f82c33c8fdb14d8bc0db5e81d17934b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}