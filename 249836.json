{"path":"src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","commits":[{"id":"b77550c47735d804ddb8767848f5af9b02b88c84","date":1162245631,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","pathOld":"/dev/null","sourceNew":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        Hits hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length());\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertEquals(numHits, this.seeksCounter);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["56f0812b01cb0620e0240c4c705162386719f24a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56f0812b01cb0620e0240c4c705162386719f24a","date":1184256894,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","sourceNew":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        Hits hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length());\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter <= numHits + 1);\n    }\n\n","sourceOld":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        Hits hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length());\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertEquals(numHits, this.seeksCounter);\n    }\n\n","bugFix":["b77550c47735d804ddb8767848f5af9b02b88c84"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","sourceNew":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter <= numHits + 1);\n    }\n\n","sourceOld":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        Hits hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length());\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter <= numHits + 1);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66f3dadb253a44f4cccc81c8a21b685b18b201fb","date":1247245699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","sourceNew":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(this.seeksCounter <= numHits + 1);\n    }\n\n","sourceOld":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter <= numHits + 1);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","sourceNew":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(this.seeksCounter <= numHits + 1);\n    }\n\n","sourceOld":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(this.seeksCounter <= numHits + 1);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56f0812b01cb0620e0240c4c705162386719f24a":["b77550c47735d804ddb8767848f5af9b02b88c84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["56f0812b01cb0620e0240c4c705162386719f24a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"b77550c47735d804ddb8767848f5af9b02b88c84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"56f0812b01cb0620e0240c4c705162386719f24a":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b77550c47735d804ddb8767848f5af9b02b88c84"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"b77550c47735d804ddb8767848f5af9b02b88c84":["56f0812b01cb0620e0240c4c705162386719f24a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}