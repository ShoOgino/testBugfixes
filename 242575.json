{"path":"src/java/org/apache/solr/analysis/PatternTokenizerFactory#init(SolrConfig,Map[String,String]).mjava","commits":[{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PatternTokenizerFactory#init(SolrConfig,Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/PatternTokenizerFactory#init(Map[String,String]).mjava","sourceNew":"  /**\n   * Require a configured pattern\n   */\n  public void init(SolrConfig solrConfig, Map<String,String> args) \n  {\n    this.args = args;\n    String regex = args.get( PATTERN );\n    if( regex == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"missing required argument: \"+PATTERN );\n    }\n    int flags = 0; // TODO? -- read flags from config CASE_INSENSITIVE, etc\n    pattern = Pattern.compile( regex, flags );\n    \n    group = -1;  // use 'split'\n    String g = args.get( GROUP );\n    if( g != null ) {\n      try {\n        group = Integer.parseInt( g );\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"invalid group argument: \"+g );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Require a configured pattern\n   */\n  public void init(Map<String,String> args) \n  {\n    this.args = args;\n    String regex = args.get( PATTERN );\n    if( regex == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"missing required argument: \"+PATTERN );\n    }\n    int flags = 0; // TODO? -- read flags from config CASE_INSENSITIVE, etc\n    pattern = Pattern.compile( regex, flags );\n    \n    group = -1;  // use 'split'\n    String g = args.get( GROUP );\n    if( g != null ) {\n      try {\n        group = Integer.parseInt( g );\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"invalid group argument: \"+g );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PatternTokenizerFactory#init(Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/PatternTokenizerFactory#init(SolrConfig,Map[String,String]).mjava","sourceNew":"  /**\n   * Require a configured pattern\n   */\n  @Override\n  public void init(Map<String,String> args) \n  {\n    this.args = args;\n    String regex = args.get( PATTERN );\n    if( regex == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"missing required argument: \"+PATTERN );\n    }\n    int flags = 0; // TODO? -- read flags from config CASE_INSENSITIVE, etc\n    pattern = Pattern.compile( regex, flags );\n    \n    group = -1;  // use 'split'\n    String g = args.get( GROUP );\n    if( g != null ) {\n      try {\n        group = Integer.parseInt( g );\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"invalid group argument: \"+g );\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Require a configured pattern\n   */\n  public void init(SolrConfig solrConfig, Map<String,String> args) \n  {\n    this.args = args;\n    String regex = args.get( PATTERN );\n    if( regex == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"missing required argument: \"+PATTERN );\n    }\n    int flags = 0; // TODO? -- read flags from config CASE_INSENSITIVE, etc\n    pattern = Pattern.compile( regex, flags );\n    \n    group = -1;  // use 'split'\n    String g = args.get( GROUP );\n    if( g != null ) {\n      try {\n        group = Integer.parseInt( g );\n      }\n      catch( Exception ex ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"invalid group argument: \"+g );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6d6338c87060be5f66757a94945975f3bbd377a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}