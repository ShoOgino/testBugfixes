{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(SlowCompositeReaderWrapper.wrap(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(SlowCompositeReaderWrapper.wrap(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(SlowCompositeReaderWrapper.wrap(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(SlowCompositeReaderWrapper.wrap(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["95ae76773bf2b95987d5f9c8f566ab3738953fb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(SlowCompositeReaderWrapper.wrap(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(SlowCompositeReaderWrapper.wrap(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(SlowCompositeReaderWrapper.wrap(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(SlowCompositeReaderWrapper.wrap(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d988d1ad2c000ac97e5743a6ed8c69677492e35b","date":1361043522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    final DocTermOrds dto = new DocTermOrds(ar, \"field\");\n    SortedSetDocValues iter = dto.iterator(ar.terms(\"field\").iterator(null));\n    \n    iter.setDocument(0);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(1, iter.nextOrd());\n    assertEquals(2, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n    \n    iter.setDocument(1);\n    assertEquals(3, iter.nextOrd());\n    assertEquals(4, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    iter.setDocument(2);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(SlowCompositeReaderWrapper.wrap(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["240cffb5a9df98261aab509ee8fd2a252bccf157"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    final DocTermOrds dto = new DocTermOrds(ar, \"field\");\n    SortedSetDocValues iter = dto.iterator(ar.terms(\"field\").iterator(null));\n    \n    iter.setDocument(0);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(1, iter.nextOrd());\n    assertEquals(2, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n    \n    iter.setDocument(1);\n    assertEquals(3, iter.nextOrd());\n    assertEquals(4, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    iter.setDocument(2);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final DocTermOrds dto = new DocTermOrds(SlowCompositeReaderWrapper.wrap(r), \"field\");\n\n    TermOrdsIterator iter = dto.lookup(0, null);\n    final int[] buffer = new int[5];\n    assertEquals(3, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(1, buffer[1]);\n    assertEquals(2, buffer[2]);\n\n    iter = dto.lookup(1, iter);\n    assertEquals(3, iter.read(buffer));\n    assertEquals(3, buffer[0]);\n    assertEquals(4, buffer[1]);\n    assertEquals(5, buffer[2]);\n\n    iter = dto.lookup(2, iter);\n    assertEquals(2, iter.read(buffer));\n    assertEquals(0, buffer[0]);\n    assertEquals(5, buffer[1]);\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60daad1187870cb8dea2344dcd50c29136546f18","date":1361389468,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    final DocTermOrds dto = new DocTermOrds(ar, ar.getLiveDocs(), \"field\");\n    SortedSetDocValues iter = dto.iterator(ar.terms(\"field\").iterator(null));\n    \n    iter.setDocument(0);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(1, iter.nextOrd());\n    assertEquals(2, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n    \n    iter.setDocument(1);\n    assertEquals(3, iter.nextOrd());\n    assertEquals(4, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    iter.setDocument(2);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    final DocTermOrds dto = new DocTermOrds(ar, \"field\");\n    SortedSetDocValues iter = dto.iterator(ar.terms(\"field\").iterator(null));\n    \n    iter.setDocument(0);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(1, iter.nextOrd());\n    assertEquals(2, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n    \n    iter.setDocument(1);\n    assertEquals(3, iter.nextOrd());\n    assertEquals(4, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    iter.setDocument(2);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"240cffb5a9df98261aab509ee8fd2a252bccf157","date":1363702876,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    final DocTermOrds dto = new DocTermOrds(ar, ar.getLiveDocs(), \"field\");\n    SortedSetDocValues iter = dto.iterator(ar);\n    \n    iter.setDocument(0);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(1, iter.nextOrd());\n    assertEquals(2, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n    \n    iter.setDocument(1);\n    assertEquals(3, iter.nextOrd());\n    assertEquals(4, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    iter.setDocument(2);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    final DocTermOrds dto = new DocTermOrds(ar, ar.getLiveDocs(), \"field\");\n    SortedSetDocValues iter = dto.iterator(ar.terms(\"field\").iterator(null));\n    \n    iter.setDocument(0);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(1, iter.nextOrd());\n    assertEquals(2, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n    \n    iter.setDocument(1);\n    assertEquals(3, iter.nextOrd());\n    assertEquals(4, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    iter.setDocument(2);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["d988d1ad2c000ac97e5743a6ed8c69677492e35b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.shutdown();\n\n    final AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    final DocTermOrds dto = new DocTermOrds(ar, ar.getLiveDocs(), \"field\");\n    SortedSetDocValues iter = dto.iterator(ar);\n    \n    iter.setDocument(0);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(1, iter.nextOrd());\n    assertEquals(2, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n    \n    iter.setDocument(1);\n    assertEquals(3, iter.nextOrd());\n    assertEquals(4, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    iter.setDocument(2);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.close();\n\n    final AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    final DocTermOrds dto = new DocTermOrds(ar, ar.getLiveDocs(), \"field\");\n    SortedSetDocValues iter = dto.iterator(ar);\n    \n    iter.setDocument(0);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(1, iter.nextOrd());\n    assertEquals(2, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n    \n    iter.setDocument(1);\n    assertEquals(3, iter.nextOrd());\n    assertEquals(4, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    iter.setDocument(2);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.shutdown();\n\n    final AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    final DocTermOrds dto = new DocTermOrds(ar, ar.getLiveDocs(), \"field\");\n    SortedSetDocValues iter = dto.iterator(ar);\n    \n    iter.setDocument(0);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(1, iter.nextOrd());\n    assertEquals(2, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n    \n    iter.setDocument(1);\n    assertEquals(3, iter.nextOrd());\n    assertEquals(4, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    iter.setDocument(2);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.shutdown();\n\n    final AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    final DocTermOrds dto = new DocTermOrds(ar, ar.getLiveDocs(), \"field\");\n    SortedSetDocValues iter = dto.iterator(ar);\n    \n    iter.setDocument(0);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(1, iter.nextOrd());\n    assertEquals(2, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n    \n    iter.setDocument(1);\n    assertEquals(3, iter.nextOrd());\n    assertEquals(4, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    iter.setDocument(2);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.shutdown();\n\n    final AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    final DocTermOrds dto = new DocTermOrds(ar, ar.getLiveDocs(), \"field\");\n    SortedSetDocValues iter = dto.iterator(ar);\n    \n    iter.setDocument(0);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(1, iter.nextOrd());\n    assertEquals(2, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n    \n    iter.setDocument(1);\n    assertEquals(3, iter.nextOrd());\n    assertEquals(4, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    iter.setDocument(2);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.shutdown();\n\n    final AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    final DocTermOrds dto = new DocTermOrds(ar, ar.getLiveDocs(), \"field\");\n    SortedSetDocValues iter = dto.iterator(ar);\n    \n    iter.setDocument(0);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(1, iter.nextOrd());\n    assertEquals(2, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n    \n    iter.setDocument(1);\n    assertEquals(3, iter.nextOrd());\n    assertEquals(4, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    iter.setDocument(2);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.shutdown();\n\n    final AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    final DocTermOrds dto = new DocTermOrds(ar, ar.getLiveDocs(), \"field\");\n    SortedSetDocValues iter = dto.iterator(ar);\n    \n    iter.setDocument(0);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(1, iter.nextOrd());\n    assertEquals(2, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n    \n    iter.setDocument(1);\n    assertEquals(3, iter.nextOrd());\n    assertEquals(4, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    iter.setDocument(2);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field field = newTextField(\"field\", \"\", Field.Store.NO);\n    doc.add(field);\n    field.setStringValue(\"a b c\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"d e f\");\n    w.addDocument(doc);\n\n    field.setStringValue(\"a f\");\n    w.addDocument(doc);\n    \n    final IndexReader r = w.getReader();\n    w.shutdown();\n\n    final AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n    final DocTermOrds dto = new DocTermOrds(ar, ar.getLiveDocs(), \"field\");\n    SortedSetDocValues iter = dto.iterator(ar);\n    \n    iter.setDocument(0);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(1, iter.nextOrd());\n    assertEquals(2, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n    \n    iter.setDocument(1);\n    assertEquals(3, iter.nextOrd());\n    assertEquals(4, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    iter.setDocument(2);\n    assertEquals(0, iter.nextOrd());\n    assertEquals(5, iter.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, iter.nextOrd());\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["04f07771a2a7dd3a395700665ed839c3dae2def2","d988d1ad2c000ac97e5743a6ed8c69677492e35b"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d988d1ad2c000ac97e5743a6ed8c69677492e35b":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"60daad1187870cb8dea2344dcd50c29136546f18":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["240cffb5a9df98261aab509ee8fd2a252bccf157"],"240cffb5a9df98261aab509ee8fd2a252bccf157":["60daad1187870cb8dea2344dcd50c29136546f18"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["60daad1187870cb8dea2344dcd50c29136546f18"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["ddbb72a33557d2b5bc22ee95daf3281c43560502","d988d1ad2c000ac97e5743a6ed8c69677492e35b"],"d988d1ad2c000ac97e5743a6ed8c69677492e35b":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"60daad1187870cb8dea2344dcd50c29136546f18":["240cffb5a9df98261aab509ee8fd2a252bccf157"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"240cffb5a9df98261aab509ee8fd2a252bccf157":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}