{"path":"solr/core/src/java/org/apache/solr/core/SolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  /** The searchers passed here are only guaranteed to be valid for the duration\n   * of this method call, so care should be taken not to spawn threads or asynchronous\n   * tasks with references to these searchers.\n   * <p/>\n   * Implementations should add the {@link org.apache.solr.common.params.EventParams#EVENT} parameter and set it to a value of either:\n   * <ul>\n   * <li>{@link org.apache.solr.common.params.EventParams#FIRST_SEARCHER} - First Searcher event</li>\n   * <li>{@link org.apache.solr.common.params.EventParams#NEW_SEARCHER} - New Searcher event</li>\n   * </ul>\n   *\n   * Sample:\n   * <pre>\n    if (currentSearcher != null) {\n      nlst.add(CommonParams.EVENT, CommonParams.NEW_SEARCHER);\n    } else {\n      nlst.add(CommonParams.EVENT, CommonParams.FIRST_SEARCHER);\n    }\n   *\n   * </pre>\n   *\n   * @see org.apache.solr.core.AbstractSolrEventListener#addEventParms(org.apache.solr.search.SolrIndexSearcher, org.apache.solr.common.util.NamedList) \n   *\n   * @param newSearcher The new {@link org.apache.solr.search.SolrIndexSearcher} to use\n   * @param currentSearcher The existing {@link org.apache.solr.search.SolrIndexSearcher}.  null if this is a firstSearcher event.\n   *\n   */\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher);\n\n","sourceOld":"  /** The searchers passed here are only guaranteed to be valid for the duration\n   * of this method call, so care should be taken not to spawn threads or asynchronous\n   * tasks with references to these searchers.\n   * <p/>\n   * Implementations should add the {@link org.apache.solr.common.params.EventParams#EVENT} parameter and set it to a value of either:\n   * <ul>\n   * <li>{@link org.apache.solr.common.params.EventParams#FIRST_SEARCHER} - First Searcher event</li>\n   * <li>{@link org.apache.solr.common.params.EventParams#NEW_SEARCHER} - New Searcher event</li>\n   * </ul>\n   *\n   * Sample:\n   * <pre>\n    if (currentSearcher != null) {\n      nlst.add(CommonParams.EVENT, CommonParams.NEW_SEARCHER);\n    } else {\n      nlst.add(CommonParams.EVENT, CommonParams.FIRST_SEARCHER);\n    }\n   *\n   * </pre>\n   *\n   * @see org.apache.solr.core.AbstractSolrEventListener#addEventParms(org.apache.solr.search.SolrIndexSearcher, org.apache.solr.common.util.NamedList) \n   *\n   * @param newSearcher The new {@link org.apache.solr.search.SolrIndexSearcher} to use\n   * @param currentSearcher The existing {@link org.apache.solr.search.SolrIndexSearcher}.  null if this is a firstSearcher event.\n   *\n   */\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  /** The searchers passed here are only guaranteed to be valid for the duration\n   * of this method call, so care should be taken not to spawn threads or asynchronous\n   * tasks with references to these searchers.\n   * <p/>\n   * Implementations should add the {@link org.apache.solr.common.params.EventParams#EVENT} parameter and set it to a value of either:\n   * <ul>\n   * <li>{@link org.apache.solr.common.params.EventParams#FIRST_SEARCHER} - First Searcher event</li>\n   * <li>{@link org.apache.solr.common.params.EventParams#NEW_SEARCHER} - New Searcher event</li>\n   * </ul>\n   *\n   * Sample:\n   * <pre>\n    if (currentSearcher != null) {\n      nlst.add(CommonParams.EVENT, CommonParams.NEW_SEARCHER);\n    } else {\n      nlst.add(CommonParams.EVENT, CommonParams.FIRST_SEARCHER);\n    }\n   *\n   * </pre>\n   *\n   * @see org.apache.solr.core.AbstractSolrEventListener#addEventParms(org.apache.solr.search.SolrIndexSearcher, org.apache.solr.common.util.NamedList) \n   *\n   * @param newSearcher The new {@link org.apache.solr.search.SolrIndexSearcher} to use\n   * @param currentSearcher The existing {@link org.apache.solr.search.SolrIndexSearcher}.  null if this is a firstSearcher event.\n   *\n   */\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher);\n\n","sourceOld":"  /** The searchers passed here are only guaranteed to be valid for the duration\n   * of this method call, so care should be taken not to spawn threads or asynchronous\n   * tasks with references to these searchers.\n   * <p/>\n   * Implementations should add the {@link org.apache.solr.common.params.EventParams#EVENT} parameter and set it to a value of either:\n   * <ul>\n   * <li>{@link org.apache.solr.common.params.EventParams#FIRST_SEARCHER} - First Searcher event</li>\n   * <li>{@link org.apache.solr.common.params.EventParams#NEW_SEARCHER} - New Searcher event</li>\n   * </ul>\n   *\n   * Sample:\n   * <pre>\n    if (currentSearcher != null) {\n      nlst.add(CommonParams.EVENT, CommonParams.NEW_SEARCHER);\n    } else {\n      nlst.add(CommonParams.EVENT, CommonParams.FIRST_SEARCHER);\n    }\n   *\n   * </pre>\n   *\n   * @see org.apache.solr.core.AbstractSolrEventListener#addEventParms(org.apache.solr.search.SolrIndexSearcher, org.apache.solr.common.util.NamedList) \n   *\n   * @param newSearcher The new {@link org.apache.solr.search.SolrIndexSearcher} to use\n   * @param currentSearcher The existing {@link org.apache.solr.search.SolrIndexSearcher}.  null if this is a firstSearcher event.\n   *\n   */\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  /** The searchers passed here are only guaranteed to be valid for the duration\n   * of this method call, so care should be taken not to spawn threads or asynchronous\n   * tasks with references to these searchers.\n   * <p/>\n   * Implementations should add the {@link org.apache.solr.common.params.EventParams#EVENT} parameter and set it to a value of either:\n   * <ul>\n   * <li>{@link org.apache.solr.common.params.EventParams#FIRST_SEARCHER} - First Searcher event</li>\n   * <li>{@link org.apache.solr.common.params.EventParams#NEW_SEARCHER} - New Searcher event</li>\n   * </ul>\n   *\n   * Sample:\n   * <pre>\n    if (currentSearcher != null) {\n      nlst.add(CommonParams.EVENT, CommonParams.NEW_SEARCHER);\n    } else {\n      nlst.add(CommonParams.EVENT, CommonParams.FIRST_SEARCHER);\n    }\n   *\n   * </pre>\n   *\n   * @see org.apache.solr.core.AbstractSolrEventListener#addEventParms(org.apache.solr.search.SolrIndexSearcher, org.apache.solr.common.util.NamedList) \n   *\n   * @param newSearcher The new {@link org.apache.solr.search.SolrIndexSearcher} to use\n   * @param currentSearcher The existing {@link org.apache.solr.search.SolrIndexSearcher}.  null if this is a firstSearcher event.\n   *\n   */\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher);\n\n","sourceOld":"  /** The searchers passed here are only guaranteed to be valid for the duration\n   * of this method call, so care should be taken not to spawn threads or asynchronous\n   * tasks with references to these searchers.\n   * <p/>\n   * Implementations should add the {@link org.apache.solr.common.params.EventParams#EVENT} parameter and set it to a value of either:\n   * <ul>\n   * <li>{@link org.apache.solr.common.params.EventParams#FIRST_SEARCHER} - First Searcher event</li>\n   * <li>{@link org.apache.solr.common.params.EventParams#NEW_SEARCHER} - New Searcher event</li>\n   * </ul>\n   *\n   * Sample:\n   * <pre>\n    if (currentSearcher != null) {\n      nlst.add(CommonParams.EVENT, CommonParams.NEW_SEARCHER);\n    } else {\n      nlst.add(CommonParams.EVENT, CommonParams.FIRST_SEARCHER);\n    }\n   *\n   * </pre>\n   *\n   * @see org.apache.solr.core.AbstractSolrEventListener#addEventParms(org.apache.solr.search.SolrIndexSearcher, org.apache.solr.common.util.NamedList) \n   *\n   * @param newSearcher The new {@link org.apache.solr.search.SolrIndexSearcher} to use\n   * @param currentSearcher The existing {@link org.apache.solr.search.SolrIndexSearcher}.  null if this is a firstSearcher event.\n   *\n   */\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrEventListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  /** The searchers passed here are only guaranteed to be valid for the duration\n   * of this method call, so care should be taken not to spawn threads or asynchronous\n   * tasks with references to these searchers.\n   * <p>\n   * Implementations should add the {@link org.apache.solr.common.params.EventParams#EVENT} parameter and set it to a value of either:\n   * <ul>\n   * <li>{@link org.apache.solr.common.params.EventParams#FIRST_SEARCHER} - First Searcher event</li>\n   * <li>{@link org.apache.solr.common.params.EventParams#NEW_SEARCHER} - New Searcher event</li>\n   * </ul>\n   *\n   * Sample:\n   * <pre>\n    if (currentSearcher != null) {\n      nlst.add(CommonParams.EVENT, CommonParams.NEW_SEARCHER);\n    } else {\n      nlst.add(CommonParams.EVENT, CommonParams.FIRST_SEARCHER);\n    }\n   *\n   * </pre>\n   *\n   * @see org.apache.solr.core.AbstractSolrEventListener#addEventParms(org.apache.solr.search.SolrIndexSearcher, org.apache.solr.common.util.NamedList) \n   *\n   * @param newSearcher The new {@link org.apache.solr.search.SolrIndexSearcher} to use\n   * @param currentSearcher The existing {@link org.apache.solr.search.SolrIndexSearcher}.  null if this is a firstSearcher event.\n   *\n   */\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher);\n\n","sourceOld":"  /** The searchers passed here are only guaranteed to be valid for the duration\n   * of this method call, so care should be taken not to spawn threads or asynchronous\n   * tasks with references to these searchers.\n   * <p/>\n   * Implementations should add the {@link org.apache.solr.common.params.EventParams#EVENT} parameter and set it to a value of either:\n   * <ul>\n   * <li>{@link org.apache.solr.common.params.EventParams#FIRST_SEARCHER} - First Searcher event</li>\n   * <li>{@link org.apache.solr.common.params.EventParams#NEW_SEARCHER} - New Searcher event</li>\n   * </ul>\n   *\n   * Sample:\n   * <pre>\n    if (currentSearcher != null) {\n      nlst.add(CommonParams.EVENT, CommonParams.NEW_SEARCHER);\n    } else {\n      nlst.add(CommonParams.EVENT, CommonParams.FIRST_SEARCHER);\n    }\n   *\n   * </pre>\n   *\n   * @see org.apache.solr.core.AbstractSolrEventListener#addEventParms(org.apache.solr.search.SolrIndexSearcher, org.apache.solr.common.util.NamedList) \n   *\n   * @param newSearcher The new {@link org.apache.solr.search.SolrIndexSearcher} to use\n   * @param currentSearcher The existing {@link org.apache.solr.search.SolrIndexSearcher}.  null if this is a firstSearcher event.\n   *\n   */\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher);\n\n","bugFix":["c8c77019d92a937be281e1f8b72bf54b3ac89420"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}