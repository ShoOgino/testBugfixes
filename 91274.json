{"path":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","commits":[{"id":"4fd99b2074bc8d406fb664907b6fabba58f6212d","date":1280514193,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    MockRAMDirectory indexStore = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","sourceNew":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Random random = newRandom();\n    MockRAMDirectory indexStore = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    MockRAMDirectory indexStore = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    r.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","sourceNew":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Random random = newRandom();\n    Directory indexStore = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Random random = newRandom();\n    MockRAMDirectory indexStore = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    r.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","sourceNew":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Random random = newRandom();\n    Directory indexStore = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    r.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","sourceNew":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    searcher.close();\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    r.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","sourceNew":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    searcher.close();\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    r.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","sourceNew":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    searcher.close();\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    r.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","sourceNew":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    searcher.close();\n    r.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","sourceNew":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    searcher.close();\n    r.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testTall().mjava","sourceNew":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    r.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  // LUCENE-2580\n  public void testTall() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"blueberry chocolate pie\", writer);\n    add(\"blueberry chocolate tart\", writer);\n    IndexReader r = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(r);\n    MultiPhraseQuery q = new MultiPhraseQuery();\n    q.add(new Term(\"body\", \"blueberry\"));\n    q.add(new Term(\"body\", \"chocolate\"));\n    q.add(new Term[] {new Term(\"body\", \"pie\"), new Term(\"body\", \"tart\")});\n    assertEquals(2, searcher.search(q, 1).totalHits);\n    r.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["4fd99b2074bc8d406fb664907b6fabba58f6212d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["790e1fde4caa765b3faaad3fbcd25c6973450336","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f653cfcf159baeaafe5d01682a911e95bba4012"],"4fd99b2074bc8d406fb664907b6fabba58f6212d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1f653cfcf159baeaafe5d01682a911e95bba4012","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4fd99b2074bc8d406fb664907b6fabba58f6212d":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4fd99b2074bc8d406fb664907b6fabba58f6212d"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}