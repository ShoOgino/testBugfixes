{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    Searcher searcher = new IndexSearcher(dir, true);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    Searcher searcher = new IndexSearcher(dir, true);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    Searcher searcher = new IndexSearcher(dir, true);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","a3a0403b45dfe384fae4a1b6e96c3265d000c498","868da859b43505d9d2a023bfeae6dd0c795f5295"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["b89678825b68eccaf09e6ab71675fc0b0af1e099","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}