{"path":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}