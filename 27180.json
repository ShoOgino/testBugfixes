{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","commits":[{"id":"110125c995236a7f61057dd04b039ed2d267f3a1","date":1521014987,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","pathOld":"/dev/null","sourceNew":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = wrapSoftDeletes(DirectoryReader.open(writer), \"soft_delete\");\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits);\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"014ddb64cdf92cc8d862881e0f45b70eeaee5411","date":1521044766,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","sourceNew":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = wrapSoftDeletes(DirectoryReader.open(writer), \"soft_delete\");\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits);\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = wrapSoftDeletes(DirectoryReader.open(writer), \"soft_delete\");\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits);\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","sourceNew":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits);\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = wrapSoftDeletes(DirectoryReader.open(writer), \"soft_delete\");\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits);\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f2203cb8ae87188877cfbf6ad170c5738a0aad5","date":1528117512,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","sourceNew":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.segmentInfos) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    assertEquals(writer.maxDoc() - writer.numDocs(), numSoftDeleted);\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits);\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["631ea3d1607299c59f33edef140ffc19a81f07a0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","sourceNew":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.segmentInfos) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    assertEquals(writer.maxDoc() - writer.numDocs(), numSoftDeleted);\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits);\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","sourceNew":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.segmentInfos) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    assertEquals(writer.maxDoc() - writer.numDocs(), numSoftDeleted);\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits);\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"631ea3d1607299c59f33edef140ffc19a81f07a0","date":1532450367,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","sourceNew":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.cloneSegmentInfos()) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    assertEquals(writer.maxDoc() - writer.numDocs(), numSoftDeleted);\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.segmentInfos) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    assertEquals(writer.maxDoc() - writer.numDocs(), numSoftDeleted);\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"578a4d73d90ecd838846cc32bf1098aaa262b524","date":1532504076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","sourceNew":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.cloneSegmentInfos()) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    assertEquals(writer.maxDoc() - writer.numDocs(), numSoftDeleted);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leaf = context.reader();\n      assertNull(((SegmentReader) leaf).getHardLiveDocs());\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.cloneSegmentInfos()) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    assertEquals(writer.maxDoc() - writer.numDocs(), numSoftDeleted);\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","sourceNew":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits.value);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.cloneSegmentInfos()) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    assertEquals(writer.maxDoc() - writer.numDocs(), numSoftDeleted);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leaf = context.reader();\n      assertNull(((SegmentReader) leaf).getHardLiveDocs());\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.cloneSegmentInfos()) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    assertEquals(writer.maxDoc() - writer.numDocs(), numSoftDeleted);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leaf = context.reader();\n      assertNull(((SegmentReader) leaf).getHardLiveDocs());\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d78ff42ed42b1a618a189516a535d2f4cbcb90e7","date":1542892829,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","sourceNew":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        .setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits.value);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.cloneSegmentInfos()) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    assertEquals(writer.maxDoc() - writer.numDocs(), numSoftDeleted);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leaf = context.reader();\n      assertNull(((SegmentReader) leaf).getHardLiveDocs());\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits.value);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.cloneSegmentInfos()) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    assertEquals(writer.maxDoc() - writer.numDocs(), numSoftDeleted);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leaf = context.reader();\n      assertNull(((SegmentReader) leaf).getHardLiveDocs());\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","sourceNew":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        .setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits.value);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.cloneSegmentInfos()) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    IndexWriter.DocStats docStats = writer.getDocStats();\n    assertEquals(docStats.maxDoc - docStats.numDocs, numSoftDeleted);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leaf = context.reader();\n      assertNull(((SegmentReader) leaf).getHardLiveDocs());\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        .setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits.value);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.cloneSegmentInfos()) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    assertEquals(writer.maxDoc() - writer.numDocs(), numSoftDeleted);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leaf = context.reader();\n      assertNull(((SegmentReader) leaf).getHardLiveDocs());\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe39f1a106531207c028defebbc9eb5bb489ac50","date":1592513789,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","sourceNew":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        .setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits.value);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.cloneSegmentInfos()) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    IndexWriter.DocStats docStats = writer.getDocStats();\n    assertEquals(docStats.maxDoc - docStats.numDocs, numSoftDeleted);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leaf = context.reader();\n      assertNull(((SegmentReader) leaf).getHardLiveDocs());\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        .setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits.value);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.cloneSegmentInfos()) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    IndexWriter.DocStats docStats = writer.getDocStats();\n    assertEquals(docStats.maxDoc - docStats.numDocs, numSoftDeleted);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leaf = context.reader();\n      assertNull(((SegmentReader) leaf).getHardLiveDocs());\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1182fe36fb5df768dc2da53f6d5338cbc07268ae","date":1592861749,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","sourceNew":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        .setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits.value);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.cloneSegmentInfos()) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    IndexWriter.DocStats docStats = writer.getDocStats();\n    assertEquals(docStats.maxDoc - docStats.numDocs, numSoftDeleted);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leaf = context.reader();\n      assertNull(((SegmentReader) leaf).getHardLiveDocs());\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        .setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits.value);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.cloneSegmentInfos()) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    IndexWriter.DocStats docStats = writer.getDocStats();\n    assertEquals(docStats.maxDoc - docStats.numDocs, numSoftDeleted);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leaf = context.reader();\n      assertNull(((SegmentReader) leaf).getHardLiveDocs());\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2a23476693f2bd9a4b44cc3187c429a2e21dac2","date":1593289545,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSoftUpdateDocuments().mjava","sourceNew":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        .setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits.value);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.cloneSegmentInfos()) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    IndexWriter.DocStats docStats = writer.getDocStats();\n    assertEquals(docStats.maxDoc - docStats.numDocs, numSoftDeleted);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leaf = context.reader();\n      assertNull(((SegmentReader) leaf).getHardLiveDocs());\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSoftUpdateDocuments() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig()\n        .setMergePolicy(NoMergePolicy.INSTANCE)\n        .setSoftDeletesField(\"soft_delete\"));\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(null, new Document(), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocument(new Term(\"id\", \"1\"), new Document());\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(null, Arrays.asList(new Document()), new NumericDocValuesField(\"soft_delete\", 1));\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.softUpdateDocuments(new Term(\"id\", \"1\"), Arrays.asList(new Document()));\n    });\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"2\", Field.Store.YES));\n    Field field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader reader = DirectoryReader.open(writer);\n    assertEquals(2, reader.docFreq(new Term(\"id\", \"1\")));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    Document document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"2\", document.get(\"version\"));\n\n    // update the on-disk version\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new StringField(\"version\", \"3\", Field.Store.YES));\n    field = new NumericDocValuesField(\"soft_delete\", 1);\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), doc, field);\n    DirectoryReader oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(1, topDocs.totalHits.value);\n    document = reader.document(topDocs.scoreDocs[0].doc);\n    assertEquals(\"3\", document.get(\"version\"));\n\n    // now delete it\n    writer.updateDocValues(new Term(\"id\", \"1\"), field);\n    oldReader = reader;\n    reader = DirectoryReader.openIfChanged(reader, writer);\n    assertNotSame(reader, oldReader);\n    assertNotNull(reader);\n    oldReader.close();\n    searcher = new IndexSearcher(reader);\n    topDocs = searcher.search(new TermQuery(new Term(\"id\", \"1\")), 10);\n    assertEquals(0, topDocs.totalHits.value);\n    int numSoftDeleted = 0;\n    for (SegmentCommitInfo info : writer.cloneSegmentInfos()) {\n     numSoftDeleted += info.getSoftDelCount();\n    }\n    IndexWriter.DocStats docStats = writer.getDocStats();\n    assertEquals(docStats.maxDoc - docStats.numDocs, numSoftDeleted);\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leaf = context.reader();\n      assertNull(((SegmentReader) leaf).getHardLiveDocs());\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"014ddb64cdf92cc8d862881e0f45b70eeaee5411":["110125c995236a7f61057dd04b039ed2d267f3a1"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["014ddb64cdf92cc8d862881e0f45b70eeaee5411"],"fe39f1a106531207c028defebbc9eb5bb489ac50":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"578a4d73d90ecd838846cc32bf1098aaa262b524":["631ea3d1607299c59f33edef140ffc19a81f07a0"],"110125c995236a7f61057dd04b039ed2d267f3a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"d78ff42ed42b1a618a189516a535d2f4cbcb90e7":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"631ea3d1607299c59f33edef140ffc19a81f07a0":["8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["d78ff42ed42b1a618a189516a535d2f4cbcb90e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["5ee0394b8176abd7c90a4be8c05465be1879db79","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["fe39f1a106531207c028defebbc9eb5bb489ac50"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["578a4d73d90ecd838846cc32bf1098aaa262b524"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"f592209545c71895260367152601e9200399776d":["5ee0394b8176abd7c90a4be8c05465be1879db79","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"]},"commit2Childs":{"014ddb64cdf92cc8d862881e0f45b70eeaee5411":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["b70042a8a492f7054d480ccdd2be9796510d4327","8f2203cb8ae87188877cfbf6ad170c5738a0aad5","f592209545c71895260367152601e9200399776d"],"fe39f1a106531207c028defebbc9eb5bb489ac50":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"110125c995236a7f61057dd04b039ed2d267f3a1":["014ddb64cdf92cc8d862881e0f45b70eeaee5411"],"578a4d73d90ecd838846cc32bf1098aaa262b524":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d78ff42ed42b1a618a189516a535d2f4cbcb90e7":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"631ea3d1607299c59f33edef140ffc19a81f07a0":["578a4d73d90ecd838846cc32bf1098aaa262b524"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["fe39f1a106531207c028defebbc9eb5bb489ac50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["110125c995236a7f61057dd04b039ed2d267f3a1"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["d78ff42ed42b1a618a189516a535d2f4cbcb90e7"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["631ea3d1607299c59f33edef140ffc19a81f07a0","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}