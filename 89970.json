{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#[T]_search(IndexSearcher,Query,int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#[T]_search(IndexSearcher,Query,int,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#[T]_search(IndexSearcher,Query,int,int).mjava","sourceNew":"  /**\n   * Executes a grouped search. Both the first pass and second pass are executed on the specified searcher.\n   *\n   * @param searcher    The {@link org.apache.lucene.search.IndexSearcher} instance to execute the grouped search on.\n   * @param query       The query to execute with the grouping\n   * @param groupOffset The group offset\n   * @param groupLimit  The number of groups to return from the specified group offset\n   * @return the grouped result as a {@link TopGroups} instance\n   * @throws IOException If any I/O related errors occur\n   */\n  public <T> TopGroups<T> search(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    return search(searcher, null, query, groupOffset, groupLimit);\n  }\n\n","sourceOld":"  /**\n   * Executes a grouped search. Both the first pass and second pass are executed on the specified searcher.\n   *\n   * @param searcher    The {@link org.apache.lucene.search.IndexSearcher} instance to execute the grouped search on.\n   * @param query       The query to execute with the grouping\n   * @param groupOffset The group offset\n   * @param groupLimit  The number of groups to return from the specified group offset\n   * @return the grouped result as a {@link TopGroups} instance\n   * @throws IOException If any I/O related errors occur\n   */\n  public <T> TopGroups<T> search(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    return search(searcher, null, query, groupOffset, groupLimit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#[T]_search(IndexSearcher,Query,int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#[T]_search(IndexSearcher,Query,int,int).mjava","sourceNew":"  /**\n   * Executes a grouped search. Both the first pass and second pass are executed on the specified searcher.\n   *\n   * @param searcher    The {@link org.apache.lucene.search.IndexSearcher} instance to execute the grouped search on.\n   * @param query       The query to execute with the grouping\n   * @param groupOffset The group offset\n   * @param groupLimit  The number of groups to return from the specified group offset\n   * @return the grouped result as a {@link TopGroups} instance\n   * @throws IOException If any I/O related errors occur\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> TopGroups<T> search(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    if (groupField != null || groupFunction != null) {\n      return groupByFieldOrFunction(searcher, query, groupOffset, groupLimit);\n    } else if (groupEndDocs != null) {\n      return (TopGroups<T>) groupByDocBlock(searcher, query, groupOffset, groupLimit);\n    } else {\n      throw new IllegalStateException(\"Either groupField, groupFunction or groupEndDocs must be set.\"); // This can't happen...\n    }\n  }\n\n","sourceOld":"  /**\n   * Executes a grouped search. Both the first pass and second pass are executed on the specified searcher.\n   *\n   * @param searcher    The {@link org.apache.lucene.search.IndexSearcher} instance to execute the grouped search on.\n   * @param query       The query to execute with the grouping\n   * @param groupOffset The group offset\n   * @param groupLimit  The number of groups to return from the specified group offset\n   * @return the grouped result as a {@link TopGroups} instance\n   * @throws IOException If any I/O related errors occur\n   */\n  public <T> TopGroups<T> search(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    return search(searcher, null, query, groupOffset, groupLimit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#[T]_search(IndexSearcher,Query,int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#[T]_search(IndexSearcher,Query,int,int).mjava","sourceNew":"  /**\n   * Executes a grouped search. Both the first pass and second pass are executed on the specified searcher.\n   *\n   * @param searcher    The {@link org.apache.lucene.search.IndexSearcher} instance to execute the grouped search on.\n   * @param query       The query to execute with the grouping\n   * @param groupOffset The group offset\n   * @param groupLimit  The number of groups to return from the specified group offset\n   * @return the grouped result as a {@link TopGroups} instance\n   * @throws IOException If any I/O related errors occur\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> TopGroups<T> search(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    if (grouper != null) {\n      return groupByFieldOrFunction(searcher, query, groupOffset, groupLimit);\n    } else if (groupEndDocs != null) {\n      return (TopGroups<T>) groupByDocBlock(searcher, query, groupOffset, groupLimit);\n    } else {\n      throw new IllegalStateException(\"Either groupField, groupFunction or groupEndDocs must be set.\"); // This can't happen...\n    }\n  }\n\n","sourceOld":"  /**\n   * Executes a grouped search. Both the first pass and second pass are executed on the specified searcher.\n   *\n   * @param searcher    The {@link org.apache.lucene.search.IndexSearcher} instance to execute the grouped search on.\n   * @param query       The query to execute with the grouping\n   * @param groupOffset The group offset\n   * @param groupLimit  The number of groups to return from the specified group offset\n   * @return the grouped result as a {@link TopGroups} instance\n   * @throws IOException If any I/O related errors occur\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> TopGroups<T> search(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    if (groupField != null || groupFunction != null) {\n      return groupByFieldOrFunction(searcher, query, groupOffset, groupLimit);\n    } else if (groupEndDocs != null) {\n      return (TopGroups<T>) groupByDocBlock(searcher, query, groupOffset, groupLimit);\n    } else {\n      throw new IllegalStateException(\"Either groupField, groupFunction or groupEndDocs must be set.\"); // This can't happen...\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#[T]_search(IndexSearcher,Query,int,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupingSearch#[T]_search(IndexSearcher,Query,int,int).mjava","sourceNew":"  /**\n   * Executes a grouped search. Both the first pass and second pass are executed on the specified searcher.\n   *\n   * @param searcher    The {@link org.apache.lucene.search.IndexSearcher} instance to execute the grouped search on.\n   * @param query       The query to execute with the grouping\n   * @param groupOffset The group offset\n   * @param groupLimit  The number of groups to return from the specified group offset\n   * @return the grouped result as a {@link TopGroups} instance\n   * @throws IOException If any I/O related errors occur\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> TopGroups<T> search(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    if (grouper != null) {\n      return groupByFieldOrFunction(searcher, query, groupOffset, groupLimit);\n    } else if (groupEndDocs != null) {\n      return (TopGroups<T>) groupByDocBlock(searcher, query, groupOffset, groupLimit);\n    } else {\n      throw new IllegalStateException(\"Either groupField, groupFunction or groupEndDocs must be set.\"); // This can't happen...\n    }\n  }\n\n","sourceOld":"  /**\n   * Executes a grouped search. Both the first pass and second pass are executed on the specified searcher.\n   *\n   * @param searcher    The {@link org.apache.lucene.search.IndexSearcher} instance to execute the grouped search on.\n   * @param query       The query to execute with the grouping\n   * @param groupOffset The group offset\n   * @param groupLimit  The number of groups to return from the specified group offset\n   * @return the grouped result as a {@link TopGroups} instance\n   * @throws IOException If any I/O related errors occur\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> TopGroups<T> search(IndexSearcher searcher, Query query, int groupOffset, int groupLimit) throws IOException {\n    if (groupField != null || groupFunction != null) {\n      return groupByFieldOrFunction(searcher, query, groupOffset, groupLimit);\n    } else if (groupEndDocs != null) {\n      return (TopGroups<T>) groupByDocBlock(searcher, query, groupOffset, groupLimit);\n    } else {\n      throw new IllegalStateException(\"Either groupField, groupFunction or groupEndDocs must be set.\"); // This can't happen...\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20e94e61fe5291647346b70437617e6b6c370408":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","20e94e61fe5291647346b70437617e6b6c370408"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"20e94e61fe5291647346b70437617e6b6c370408":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}