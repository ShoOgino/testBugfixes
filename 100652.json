{"path":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseDateExplicitNotInSchemaSelector().mjava","commits":[{"id":"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8","date":1372293867,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseDateExplicitNotInSchemaSelector().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseDateExplicitNotInSchemaSelector() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNull(schema.getFieldOrNull(\"not_in_schema\"));\n    String dateString = \"2010-11-12T13:14:15.168Z\";\n    DateTimeFormatter dateTimeFormatter = ISODateTimeFormat.dateTime();\n    DateTime dateTime = dateTimeFormatter.parseDateTime(dateString);\n\n    SolrInputDocument d = processAdd(\"parse-date-explicit-not-in-schema-selector-no-run-processor\",\n                                     doc(f(\"id\", \"88\"), f(\"not_in_schema\", dateString)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"not_in_schema\") instanceof Date);\n    assertEquals(dateTime.getMillis(), ((Date)d.getFieldValue(\"not_in_schema\")).getTime());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseDateExplicitNotInSchemaSelector().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseDateExplicitNotInSchemaSelector() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNull(schema.getFieldOrNull(\"not_in_schema\"));\n    String dateString = \"2010-11-12T13:14:15.168Z\";\n    DateTimeFormatter dateTimeFormatter = ISODateTimeFormat.dateTime();\n    DateTime dateTime = dateTimeFormatter.parseDateTime(dateString);\n\n    SolrInputDocument d = processAdd(\"parse-date-explicit-not-in-schema-selector-no-run-processor\",\n                                     doc(f(\"id\", \"88\"), f(\"not_in_schema\", dateString)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"not_in_schema\") instanceof Date);\n    assertEquals(dateTime.getMillis(), ((Date)d.getFieldValue(\"not_in_schema\")).getTime());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141","date":1533657076,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseDateExplicitNotInSchemaSelector().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseDateExplicitNotInSchemaSelector().mjava","sourceNew":"  public void testParseDateExplicitNotInSchemaSelector() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNull(schema.getFieldOrNull(\"not_in_schema\"));\n    String dateString = \"2010-11-12T13:14:15.168Z\";\n\n    SolrInputDocument d = processAdd(\"parse-date-explicit-not-in-schema-selector-no-run-processor\",\n                                     doc(f(\"id\", \"88\"), f(\"not_in_schema\", dateString)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"not_in_schema\") instanceof Date);\n    assertEquals(Instant.parse(dateString), ((Date)d.getFieldValue(\"not_in_schema\")).toInstant());\n  }\n\n","sourceOld":"  public void testParseDateExplicitNotInSchemaSelector() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNull(schema.getFieldOrNull(\"not_in_schema\"));\n    String dateString = \"2010-11-12T13:14:15.168Z\";\n    DateTimeFormatter dateTimeFormatter = ISODateTimeFormat.dateTime();\n    DateTime dateTime = dateTimeFormatter.parseDateTime(dateString);\n\n    SolrInputDocument d = processAdd(\"parse-date-explicit-not-in-schema-selector-no-run-processor\",\n                                     doc(f(\"id\", \"88\"), f(\"not_in_schema\", dateString)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"not_in_schema\") instanceof Date);\n    assertEquals(dateTime.getMillis(), ((Date)d.getFieldValue(\"not_in_schema\")).getTime());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f","date":1561505163,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseDateExplicitNotInSchemaSelector().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseDateExplicitNotInSchemaSelector().mjava","sourceNew":"  public void testParseDateExplicitNotInSchemaSelector() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNull(schema.getFieldOrNull(\"not_in_schema\"));\n    String dateString = \"2010-11-12T13:14:15.168Z\";\n\n    SolrInputDocument d = processAdd(\"parse-date-explicit-not-in-schema-selector-no-run-processor\",\n                                     doc(f(\"id\", \"88\"), f(\"not_in_schema\", dateString)));\n    assertNotNull(d);\n    assertThat(d.getFieldValue(\"not_in_schema\"), IS_DATE);\n    assertEquals(Instant.parse(dateString), ((Date)d.getFieldValue(\"not_in_schema\")).toInstant());\n  }\n\n","sourceOld":"  public void testParseDateExplicitNotInSchemaSelector() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNull(schema.getFieldOrNull(\"not_in_schema\"));\n    String dateString = \"2010-11-12T13:14:15.168Z\";\n\n    SolrInputDocument d = processAdd(\"parse-date-explicit-not-in-schema-selector-no-run-processor\",\n                                     doc(f(\"id\", \"88\"), f(\"not_in_schema\", dateString)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"not_in_schema\") instanceof Date);\n    assertEquals(Instant.parse(dateString), ((Date)d.getFieldValue(\"not_in_schema\")).toInstant());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141":["039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f":["cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141"],"cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141":["695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f"],"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}