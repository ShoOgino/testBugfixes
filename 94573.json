{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","sourceNew":"  // TODO: should this take startTerm too?  This way\n  // Terms.intersect could forward to this method if type !=\n  // NORMAL:\n  public TermsEnum getTermsEnum(Terms terms) throws IOException {\n    switch(type) {\n    case NONE:\n      return TermsEnum.EMPTY;\n    case ALL:\n      return terms.iterator(null);\n    case SINGLE:\n      return new SingleTermsEnum(terms.iterator(null), term);\n    case PREFIX:\n      // TODO: this is very likely faster than .intersect,\n      // but we should test and maybe cutover\n      return new PrefixTermsEnum(terms.iterator(null), term);\n    case NORMAL:\n      return terms.intersect(this, null);\n    default:\n      // unreachable\n      throw new RuntimeException(\"unhandled case\");\n    }\n  }\n\n","sourceOld":"  // TODO: should this take startTerm too?  This way\n  // Terms.intersect could forward to this method if type !=\n  // NORMAL:\n  public TermsEnum getTermsEnum(Terms terms) throws IOException {\n    switch(type) {\n    case NONE:\n      return TermsEnum.EMPTY;\n    case ALL:\n      return terms.iterator(null);\n    case SINGLE:\n      return new SingleTermsEnum(terms.iterator(null), term);\n    case PREFIX:\n      // TODO: this is very likely faster than .intersect,\n      // but we should test and maybe cutover\n      return new PrefixTermsEnum(terms.iterator(null), term);\n    case NORMAL:\n      return terms.intersect(this, null);\n    default:\n      // unreachable\n      throw new RuntimeException(\"unhandled case\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bab620c8ab32bb77a62753eca4afb8e47efa87c","date":1402997861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","sourceNew":"  // TODO: should this take startTerm too?  This way\n  // Terms.intersect could forward to this method if type !=\n  // NORMAL:\n  /** Return a {@link TermsEnum} intersecting the provided {@link Terms}\n   *  with the terms accepted by this automaton. */\n  public TermsEnum getTermsEnum(Terms terms) throws IOException {\n    switch(type) {\n    case NONE:\n      return TermsEnum.EMPTY;\n    case ALL:\n      return terms.iterator(null);\n    case SINGLE:\n      return new SingleTermsEnum(terms.iterator(null), term);\n    case PREFIX:\n      // TODO: this is very likely faster than .intersect,\n      // but we should test and maybe cutover\n      return new PrefixTermsEnum(terms.iterator(null), term);\n    case NORMAL:\n      return terms.intersect(this, null);\n    default:\n      // unreachable\n      throw new RuntimeException(\"unhandled case\");\n    }\n  }\n\n","sourceOld":"  // TODO: should this take startTerm too?  This way\n  // Terms.intersect could forward to this method if type !=\n  // NORMAL:\n  public TermsEnum getTermsEnum(Terms terms) throws IOException {\n    switch(type) {\n    case NONE:\n      return TermsEnum.EMPTY;\n    case ALL:\n      return terms.iterator(null);\n    case SINGLE:\n      return new SingleTermsEnum(terms.iterator(null), term);\n    case PREFIX:\n      // TODO: this is very likely faster than .intersect,\n      // but we should test and maybe cutover\n      return new PrefixTermsEnum(terms.iterator(null), term);\n    case NORMAL:\n      return terms.intersect(this, null);\n    default:\n      // unreachable\n      throw new RuntimeException(\"unhandled case\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","sourceNew":"  // TODO: should this take startTerm too?  This way\n  // Terms.intersect could forward to this method if type !=\n  // NORMAL:\n  /** Return a {@link TermsEnum} intersecting the provided {@link Terms}\n   *  with the terms accepted by this automaton. */\n  public TermsEnum getTermsEnum(Terms terms) throws IOException {\n    switch(type) {\n    case NONE:\n      return TermsEnum.EMPTY;\n    case ALL:\n      return terms.iterator(null);\n    case SINGLE:\n      return new SingleTermsEnum(terms.iterator(null), term);\n    case PREFIX:\n      // TODO: this is very likely faster than .intersect,\n      // but we should test and maybe cutover\n      return new PrefixTermsEnum(terms.iterator(null), term);\n    case NORMAL:\n      return terms.intersect(this, null);\n    default:\n      // unreachable\n      throw new RuntimeException(\"unhandled case\");\n    }\n  }\n\n","sourceOld":"  // TODO: should this take startTerm too?  This way\n  // Terms.intersect could forward to this method if type !=\n  // NORMAL:\n  public TermsEnum getTermsEnum(Terms terms) throws IOException {\n    switch(type) {\n    case NONE:\n      return TermsEnum.EMPTY;\n    case ALL:\n      return terms.iterator(null);\n    case SINGLE:\n      return new SingleTermsEnum(terms.iterator(null), term);\n    case PREFIX:\n      // TODO: this is very likely faster than .intersect,\n      // but we should test and maybe cutover\n      return new PrefixTermsEnum(terms.iterator(null), term);\n    case NORMAL:\n      return terms.intersect(this, null);\n    default:\n      // unreachable\n      throw new RuntimeException(\"unhandled case\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0088660bdc1c051f58fbc38626d61ccf22dfd3e0","date":1427444574,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","sourceNew":"  // TODO: should this take startTerm too?  This way\n  // Terms.intersect could forward to this method if type !=\n  // NORMAL:\n  /** Return a {@link TermsEnum} intersecting the provided {@link Terms}\n   *  with the terms accepted by this automaton. */\n  public TermsEnum getTermsEnum(Terms terms) throws IOException {\n    switch(type) {\n    case NONE:\n      return TermsEnum.EMPTY;\n    case ALL:\n      return terms.iterator(null);\n    case SINGLE:\n      return new SingleTermsEnum(terms.iterator(null), term);\n    case NORMAL:\n      return terms.intersect(this, null);\n    default:\n      // unreachable\n      throw new RuntimeException(\"unhandled case\");\n    }\n  }\n\n","sourceOld":"  // TODO: should this take startTerm too?  This way\n  // Terms.intersect could forward to this method if type !=\n  // NORMAL:\n  /** Return a {@link TermsEnum} intersecting the provided {@link Terms}\n   *  with the terms accepted by this automaton. */\n  public TermsEnum getTermsEnum(Terms terms) throws IOException {\n    switch(type) {\n    case NONE:\n      return TermsEnum.EMPTY;\n    case ALL:\n      return terms.iterator(null);\n    case SINGLE:\n      return new SingleTermsEnum(terms.iterator(null), term);\n    case PREFIX:\n      // TODO: this is very likely faster than .intersect,\n      // but we should test and maybe cutover\n      return new PrefixTermsEnum(terms.iterator(null), term);\n    case NORMAL:\n      return terms.intersect(this, null);\n    default:\n      // unreachable\n      throw new RuntimeException(\"unhandled case\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","sourceNew":"  // TODO: should this take startTerm too?  This way\n  // Terms.intersect could forward to this method if type !=\n  // NORMAL:\n  /** Return a {@link TermsEnum} intersecting the provided {@link Terms}\n   *  with the terms accepted by this automaton. */\n  public TermsEnum getTermsEnum(Terms terms) throws IOException {\n    switch(type) {\n    case NONE:\n      return TermsEnum.EMPTY;\n    case ALL:\n      return terms.iterator(null);\n    case SINGLE:\n      return new SingleTermsEnum(terms.iterator(null), term);\n    case NORMAL:\n      return terms.intersect(this, null);\n    default:\n      // unreachable\n      throw new RuntimeException(\"unhandled case\");\n    }\n  }\n\n","sourceOld":"  // TODO: should this take startTerm too?  This way\n  // Terms.intersect could forward to this method if type !=\n  // NORMAL:\n  /** Return a {@link TermsEnum} intersecting the provided {@link Terms}\n   *  with the terms accepted by this automaton. */\n  public TermsEnum getTermsEnum(Terms terms) throws IOException {\n    switch(type) {\n    case NONE:\n      return TermsEnum.EMPTY;\n    case ALL:\n      return terms.iterator(null);\n    case SINGLE:\n      return new SingleTermsEnum(terms.iterator(null), term);\n    case PREFIX:\n      // TODO: this is very likely faster than .intersect,\n      // but we should test and maybe cutover\n      return new PrefixTermsEnum(terms.iterator(null), term);\n    case NORMAL:\n      return terms.intersect(this, null);\n    default:\n      // unreachable\n      throw new RuntimeException(\"unhandled case\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#getTermsEnum(Terms).mjava","sourceNew":"  // TODO: should this take startTerm too?  This way\n  // Terms.intersect could forward to this method if type !=\n  // NORMAL:\n  /** Return a {@link TermsEnum} intersecting the provided {@link Terms}\n   *  with the terms accepted by this automaton. */\n  public TermsEnum getTermsEnum(Terms terms) throws IOException {\n    switch(type) {\n    case NONE:\n      return TermsEnum.EMPTY;\n    case ALL:\n      return terms.iterator();\n    case SINGLE:\n      return new SingleTermsEnum(terms.iterator(), term);\n    case NORMAL:\n      return terms.intersect(this, null);\n    default:\n      // unreachable\n      throw new RuntimeException(\"unhandled case\");\n    }\n  }\n\n","sourceOld":"  // TODO: should this take startTerm too?  This way\n  // Terms.intersect could forward to this method if type !=\n  // NORMAL:\n  /** Return a {@link TermsEnum} intersecting the provided {@link Terms}\n   *  with the terms accepted by this automaton. */\n  public TermsEnum getTermsEnum(Terms terms) throws IOException {\n    switch(type) {\n    case NONE:\n      return TermsEnum.EMPTY;\n    case ALL:\n      return terms.iterator(null);\n    case SINGLE:\n      return new SingleTermsEnum(terms.iterator(null), term);\n    case NORMAL:\n      return terms.intersect(this, null);\n    default:\n      // unreachable\n      throw new RuntimeException(\"unhandled case\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["5c84485629d80d203608e8975a1139de9933cc38","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["5c84485629d80d203608e8975a1139de9933cc38"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6bab620c8ab32bb77a62753eca4afb8e47efa87c","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}