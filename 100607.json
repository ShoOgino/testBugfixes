{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,int,SortedSetDocValues).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,int,SortedSetDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,int,SortedSetDocValues,Bits).mjava","sourceNew":"  private static void checkSortedSetDocValues(String fieldName, int maxDoc, SortedSetDocValues dv) throws IOException {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    int docID;\n    // TODO: check advance too\n    while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n      long lastOrd = -1;\n      long ord;\n      int ordCount = 0;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + docID);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n        ordCount++;\n      }\n      if (ordCount == 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" returned docID=\" + docID + \" yet has no ordinals\");\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedSetDocValues(String fieldName, int maxDoc, SortedSetDocValues dv, Bits docsWithField) {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      long lastOrd = -1;\n      long ord;\n      if (docsWithField.get(i)) {\n        int ordCount = 0;\n        while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          if (ord <= lastOrd) {\n            throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + i);\n          }\n          if (ord < 0 || ord > maxOrd) {\n            throw new RuntimeException(\"ord out of bounds: \" + ord);\n          }\n          if (dv instanceof RandomAccessOrds) {\n            long ord2 = ((RandomAccessOrds)dv).ordAt(ordCount);\n            if (ord != ord2) {\n              throw new RuntimeException(\"ordAt(\" + ordCount + \") inconsistent, expected=\" + ord + \",got=\" + ord2 + \" for doc: \" + i);\n            }\n          }\n          lastOrd = ord;\n          maxOrd2 = Math.max(maxOrd2, ord);\n          seenOrds.set(ord);\n          ordCount++;\n        }\n        if (ordCount == 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has no ordinals but is not marked missing for doc: \" + i);\n        }\n        if (dv instanceof RandomAccessOrds) {\n          long ordCount2 = ((RandomAccessOrds)dv).cardinality();\n          if (ordCount != ordCount2) {\n            throw new RuntimeException(\"cardinality inconsistent, expected=\" + ordCount + \",got=\" + ordCount2 + \" for doc: \" + i);\n          }\n        }\n      } else {\n        long o = dv.nextOrd();\n        if (o != SortedSetDocValues.NO_MORE_ORDS) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has ord=\" + o + \" for doc: \" + i);\n        }\n        if (dv instanceof RandomAccessOrds) {\n          long ordCount2 = ((RandomAccessOrds)dv).cardinality();\n          if (ordCount2 != 0) {\n            throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has cardinality \" + ordCount2 + \" for doc: \" + i);\n          }\n        }\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,int,SortedSetDocValues).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkSortedSetDocValues(String fieldName, int maxDoc, SortedSetDocValues dv) throws IOException {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    int docID;\n    // TODO: check advance too\n    while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n      long lastOrd = -1;\n      long ord;\n      int ordCount = 0;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + docID);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n        ordCount++;\n      }\n      if (ordCount == 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" returned docID=\" + docID + \" yet has no ordinals\");\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,int,SortedSetDocValues).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkSortedSetDocValues(String fieldName, int maxDoc, SortedSetDocValues dv) throws IOException {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    int docID;\n    // TODO: check advance too\n    while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n      long lastOrd = -1;\n      long ord;\n      int ordCount = 0;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + docID);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n        ordCount++;\n      }\n      if (ordCount == 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" returned docID=\" + docID + \" yet has no ordinals\");\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,int,SortedSetDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,int,SortedSetDocValues).mjava","sourceNew":"  private static void checkSortedSetDocValues(String fieldName, int maxDoc, SortedSetDocValues dv) throws IOException {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    int docID;\n    while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n      long lastOrd = -1;\n      long ord;\n      int ordCount = 0;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + docID);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n        ordCount++;\n      }\n      if (ordCount == 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" returned docID=\" + docID + \" yet has no ordinals\");\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedSetDocValues(String fieldName, int maxDoc, SortedSetDocValues dv) throws IOException {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    int docID;\n    // TODO: check advance too\n    while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n      long lastOrd = -1;\n      long ord;\n      int ordCount = 0;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + docID);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n        ordCount++;\n      }\n      if (ordCount == 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" returned docID=\" + docID + \" yet has no ordinals\");\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,int,SortedSetDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,int,SortedSetDocValues).mjava","sourceNew":"  private static void checkSortedSetDocValues(String fieldName, int maxDoc, SortedSetDocValues dv) throws IOException {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    int docID;\n    while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n      long lastOrd = -1;\n      long ord;\n      int ordCount = 0;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + docID);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n        ordCount++;\n      }\n      if (ordCount == 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" returned docID=\" + docID + \" yet has no ordinals\");\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedSetDocValues(String fieldName, int maxDoc, SortedSetDocValues dv) throws IOException {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    int docID;\n    // TODO: check advance too\n    while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n      long lastOrd = -1;\n      long ord;\n      int ordCount = 0;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + docID);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n        ordCount++;\n      }\n      if (ordCount == 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" returned docID=\" + docID + \" yet has no ordinals\");\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,int,SortedSetDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,int,SortedSetDocValues).mjava","sourceNew":"  private static void checkSortedSetDocValues(String fieldName, int maxDoc, SortedSetDocValues dv) throws IOException {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    int docID;\n    while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n      long lastOrd = -1;\n      long ord;\n      int ordCount = 0;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + docID);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n        ordCount++;\n      }\n      if (ordCount == 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" returned docID=\" + docID + \" yet has no ordinals\");\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedSetDocValues(String fieldName, int maxDoc, SortedSetDocValues dv) throws IOException {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    int docID;\n    // TODO: check advance too\n    while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n      long lastOrd = -1;\n      long ord;\n      int ordCount = 0;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + docID);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n        ordCount++;\n      }\n      if (ordCount == 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" returned docID=\" + docID + \" yet has no ordinals\");\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3d2a33d17fc14a585ce28e167b1bb1c31946b0","date":1552989190,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,int,SortedSetDocValues,SortedSetDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,int,SortedSetDocValues).mjava","sourceNew":"  private static void checkSortedSetDocValues(String fieldName, int maxDoc, SortedSetDocValues dv, SortedSetDocValues dv2) throws IOException {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    for (int docID = dv.nextDoc(); docID != NO_MORE_DOCS; docID = dv.nextDoc()) {\n      if (dv2.advanceExact(docID) == false) {\n        throw new RuntimeException(\"advanceExact did not find matching doc ID: \" + docID);\n      }\n      long lastOrd = -1;\n      long ord;\n      int ordCount = 0;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        long ord2 = dv2.nextOrd();\n        if (ord != ord2) {\n          throw new RuntimeException(\"nextDoc and advanceExact report different ords: \" + ord + \" != \" + ord2);\n        }\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + docID);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n        ordCount++;\n      }\n      if (ordCount == 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" returned docID=\" + docID + \" yet has no ordinals\");\n      }\n      long ord2 = dv2.nextOrd();\n      if (ord != ord2) {\n        throw new RuntimeException(\"nextDoc and advanceExact report different ords: \" + ord + \" != \" + ord2);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedSetDocValues(String fieldName, int maxDoc, SortedSetDocValues dv) throws IOException {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    int docID;\n    while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n      long lastOrd = -1;\n      long ord;\n      int ordCount = 0;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + docID);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n        ordCount++;\n      }\n      if (ordCount == 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" returned docID=\" + docID + \" yet has no ordinals\");\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"7f3d2a33d17fc14a585ce28e167b1bb1c31946b0":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3d2a33d17fc14a585ce28e167b1bb1c31946b0"]},"commit2Childs":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"7f3d2a33d17fc14a585ce28e167b1bb1c31946b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","7f3d2a33d17fc14a585ce28e167b1bb1c31946b0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}