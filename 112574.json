{"path":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","commits":[{"id":"4daab2d6aed8d92bb885727ab0df59cde121d3df","date":1385888791,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(TEMP_DIR, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0);\n    HttpSolrServer server = null;\n    try {\n      runner.start();\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr/corex\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      server.add(doc);\n      server.commit();\n      server.shutdown();\n\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(server);\n      server.shutdown();\n\n      runner.stop();\n\n      assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n          corex.exists());\n    } catch (Exception e) {\n      log.error(\"Exception testing core unload with deleteInstanceDir=true\", e);\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n      if (!runner.isStopped())  {\n        runner.stop();\n      }\n      recurseDelete(solrHomeDirectory);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(TEMP_DIR, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0);\n    HttpSolrServer server = null;\n    try {\n      runner.start();\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr/corex\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      server.add(doc);\n      server.commit();\n      server.shutdown();\n\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(server);\n      server.shutdown();\n\n      runner.stop();\n\n      assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n          corex.exists());\n    } catch (Exception e) {\n      log.error(\"Exception testing core unload with deleteInstanceDir=true\", e);\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n      if (!runner.isStopped())  {\n        runner.stop();\n      }\n      recurseDelete(solrHomeDirectory);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4f25a2171450fd11fca6ecb7a809922c9ec694","date":1395865816,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(TEMP_DIR, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0);\n    HttpSolrServer server = null;\n    try {\n      runner.start();\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr/corex\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      server.add(doc);\n      server.commit();\n      server.shutdown();\n\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(server);\n      server.shutdown();\n\n      runner.stop();\n\n      assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n          corex.exists());\n    } catch (Exception e) {\n      log.error(\"Exception testing core unload with deleteInstanceDir=true\", e);\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n      if (!runner.isStopped())  {\n        runner.stop();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(TEMP_DIR, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0);\n    HttpSolrServer server = null;\n    try {\n      runner.start();\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr/corex\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      server.add(doc);\n      server.commit();\n      server.shutdown();\n\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(server);\n      server.shutdown();\n\n      runner.stop();\n\n      assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n          corex.exists());\n    } catch (Exception e) {\n      log.error(\"Exception testing core unload with deleteInstanceDir=true\", e);\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n      if (!runner.isStopped())  {\n        runner.stop();\n      }\n      recurseDelete(solrHomeDirectory);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0);\n    HttpSolrServer server = null;\n    try {\n      runner.start();\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr/corex\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      server.add(doc);\n      server.commit();\n      server.shutdown();\n\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(server);\n      server.shutdown();\n\n      runner.stop();\n\n      assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n          corex.exists());\n    } catch (Exception e) {\n      log.error(\"Exception testing core unload with deleteInstanceDir=true\", e);\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n      if (!runner.isStopped())  {\n        runner.stop();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(TEMP_DIR, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0);\n    HttpSolrServer server = null;\n    try {\n      runner.start();\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr/corex\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      server.add(doc);\n      server.commit();\n      server.shutdown();\n\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(server);\n      server.shutdown();\n\n      runner.stop();\n\n      assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n          corex.exists());\n    } catch (Exception e) {\n      log.error(\"Exception testing core unload with deleteInstanceDir=true\", e);\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n      if (!runner.isStopped())  {\n        runner.stop();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(dataDir, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0);\n    HttpSolrServer server = null;\n    try {\n      runner.start();\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr/corex\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      server.add(doc);\n      server.commit();\n      server.shutdown();\n\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(server);\n      server.shutdown();\n\n      runner.stop();\n\n      assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n          corex.exists());\n    } catch (Exception e) {\n      log.error(\"Exception testing core unload with deleteInstanceDir=true\", e);\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n      if (!runner.isStopped())  {\n        runner.stop();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(TEMP_DIR, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0);\n    HttpSolrServer server = null;\n    try {\n      runner.start();\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr/corex\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      server.add(doc);\n      server.commit();\n      server.shutdown();\n\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(server);\n      server.shutdown();\n\n      runner.stop();\n\n      assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n          corex.exists());\n    } catch (Exception e) {\n      log.error(\"Exception testing core unload with deleteInstanceDir=true\", e);\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n      if (!runner.isStopped())  {\n        runner.stop();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0);\n    HttpSolrServer server = null;\n    try {\n      runner.start();\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr/corex\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      server.add(doc);\n      server.commit();\n      server.shutdown();\n\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(server);\n      server.shutdown();\n\n      runner.stop();\n\n      assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n          corex.exists());\n    } catch (Exception e) {\n      log.error(\"Exception testing core unload with deleteInstanceDir=true\", e);\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n      if (!runner.isStopped())  {\n        runner.stop();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0);\n    HttpSolrServer server = null;\n    try {\n      runner.start();\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr/corex\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      server.add(doc);\n      server.commit();\n      server.shutdown();\n\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(server);\n      server.shutdown();\n\n      runner.stop();\n\n      assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n          corex.exists());\n    } catch (Exception e) {\n      log.error(\"Exception testing core unload with deleteInstanceDir=true\", e);\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n      if (!runner.isStopped())  {\n        runner.stop();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9799ebcab48102552d92f7807965a91fb6e116f7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0);\n    HttpSolrServer server = null;\n    try {\n      runner.start();\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr/corex\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      server.add(doc);\n      server.commit();\n      server.shutdown();\n\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(server);\n      server.shutdown();\n\n      runner.stop();\n\n      assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n          corex.exists());\n    } catch (Exception e) {\n      log.error(\"Exception testing core unload with deleteInstanceDir=true\", e);\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n      if (!runner.isStopped())  {\n        runner.stop();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(dataDir, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0);\n    HttpSolrServer server = null;\n    try {\n      runner.start();\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr/corex\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      server.add(doc);\n      server.commit();\n      server.shutdown();\n\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(server);\n      server.shutdown();\n\n      runner.stop();\n\n      assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n          corex.exists());\n    } catch (Exception e) {\n      log.error(\"Exception testing core unload with deleteInstanceDir=true\", e);\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n      if (!runner.isStopped())  {\n        runner.stop();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0);\n    HttpSolrClient client = null;\n    try {\n      runner.start();\n      client = new HttpSolrClient(\"http://localhost:\" + runner.getLocalPort() + \"/solr/corex\");\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n      client.shutdown();\n\n      client = new HttpSolrClient(\"http://localhost:\" + runner.getLocalPort() + \"/solr\");\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n      client.shutdown();\n\n      runner.stop();\n\n      assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n          corex.exists());\n    } catch (Exception e) {\n      log.error(\"Exception testing core unload with deleteInstanceDir=true\", e);\n    } finally {\n      if (client != null) {\n        client.shutdown();\n      }\n      if (!runner.isStopped())  {\n        runner.stop();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0);\n    HttpSolrServer server = null;\n    try {\n      runner.start();\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr/corex\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      server.add(doc);\n      server.commit();\n      server.shutdown();\n\n      server = new HttpSolrServer(\"http://localhost:\" + runner.getLocalPort() + \"/solr\");\n      server.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      server.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(server);\n      server.shutdown();\n\n      runner.stop();\n\n      assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n          corex.exists());\n    } catch (Exception e) {\n      log.error(\"Exception testing core unload with deleteInstanceDir=true\", e);\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n      if (!runner.isStopped())  {\n        runner.stop();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0);\n    runner.start();\n\n    try (HttpSolrClient client = new HttpSolrClient(\"http://localhost:\" + runner.getLocalPort() + \"/solr/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient(\"http://localhost:\" + runner.getLocalPort() + \"/solr\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0);\n    HttpSolrClient client = null;\n    try {\n      runner.start();\n      client = new HttpSolrClient(\"http://localhost:\" + runner.getLocalPort() + \"/solr/corex\");\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n      client.shutdown();\n\n      client = new HttpSolrClient(\"http://localhost:\" + runner.getLocalPort() + \"/solr\");\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n      client.shutdown();\n\n      runner.stop();\n\n      assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n          corex.exists());\n    } catch (Exception e) {\n      log.error(\"Exception testing core unload with deleteInstanceDir=true\", e);\n    } finally {\n      if (client != null) {\n        client.shutdown();\n      }\n      if (!runner.isStopped())  {\n        runner.stop();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86594bd599df3a27cc9368991328dded72efd349","date":1422459331,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0, null, null, true, null, sslConfig);\n    runner.start();\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0);\n    runner.start();\n\n    try (HttpSolrClient client = new HttpSolrClient(\"http://localhost:\" + runner.getLocalPort() + \"/solr/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient(\"http://localhost:\" + runner.getLocalPort() + \"/solr\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c66158bb16e902a21272772f1b911f04b1a55abb","date":1424959524,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0, null, null, true, null, sslConfig);\n    runner.start();\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), \"/solr\", 0, null, null, true, null, sslConfig);\n    runner.start();\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.currentTimeMillis());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","bugFix":null,"bugIntro":["9799ebcab48102552d92f7807965a91fb6e116f7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = new HttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"162e1895a880a7263b46e184f1478f0366eb095c","date":1467859866,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\", true);\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", Charsets.UTF_8.toString());\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ac93a5cce7c6ece26cc1f179d6a3352eb3acdcd","date":1514355412,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n\n    copySolrHomeToTemp(solrHomeDirectory, \"corerename\");\n\n    File coreRename = new File(solrHomeDirectory, \"corerename\");\n    File renamePropFile = new File(coreRename, \"core.properties\");\n    FileUtils.write(renamePropFile, \"\", StandardCharsets.UTF_8);\n\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    // Make sure a renamed core\n    // 1> has the property persisted (SOLR-11783)\n    // 2> is deleted after rename properly.\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.renameCore(\"corerename\", \"brand_new_core_name\", client);\n      Properties props = new Properties();\n      try (InputStreamReader is = new InputStreamReader(new FileInputStream(renamePropFile), StandardCharsets.UTF_8)) {\n        props.load(is);\n      }\n      assertEquals(\"Name should have been persisted!\", \"brand_new_core_name\", props.getProperty(\"name\"));\n    }\n\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"brand_new_core_name\");\n      req.process(client);\n    }\n\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + coreRename,\n        coreRename.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9799ebcab48102552d92f7807965a91fb6e116f7","date":1564676118,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = createTempDir(\"solr-home\").toFile();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n\n    copySolrHomeToTemp(solrHomeDirectory, \"corerename\");\n\n    File coreRename = new File(solrHomeDirectory, \"corerename\");\n    File renamePropFile = new File(coreRename, \"core.properties\");\n    FileUtils.write(renamePropFile, \"\", StandardCharsets.UTF_8);\n\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    // Make sure a renamed core\n    // 1> has the property persisted (SOLR-11783)\n    // 2> is deleted after rename properly.\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.renameCore(\"corerename\", \"brand_new_core_name\", client);\n      Properties props = new Properties();\n      try (InputStreamReader is = new InputStreamReader(new FileInputStream(renamePropFile), StandardCharsets.UTF_8)) {\n        props.load(is);\n      }\n      assertEquals(\"Name should have been persisted!\", \"brand_new_core_name\", props.getProperty(\"name\"));\n    }\n\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"brand_new_core_name\");\n      req.process(client);\n    }\n\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + coreRename,\n        coreRename.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n\n    copySolrHomeToTemp(solrHomeDirectory, \"corerename\");\n\n    File coreRename = new File(solrHomeDirectory, \"corerename\");\n    File renamePropFile = new File(coreRename, \"core.properties\");\n    FileUtils.write(renamePropFile, \"\", StandardCharsets.UTF_8);\n\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    // Make sure a renamed core\n    // 1> has the property persisted (SOLR-11783)\n    // 2> is deleted after rename properly.\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.renameCore(\"corerename\", \"brand_new_core_name\", client);\n      Properties props = new Properties();\n      try (InputStreamReader is = new InputStreamReader(new FileInputStream(renamePropFile), StandardCharsets.UTF_8)) {\n        props.load(is);\n      }\n      assertEquals(\"Name should have been persisted!\", \"brand_new_core_name\", props.getProperty(\"name\"));\n    }\n\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"brand_new_core_name\");\n      req.process(client);\n    }\n\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + coreRename,\n        coreRename.exists());\n\n  }\n\n","bugFix":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testDeleteInstanceDir().mjava","sourceNew":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = createTempDir(\"solr-home\").toFile();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n\n    copySolrHomeToTemp(solrHomeDirectory, \"corerename\");\n\n    File coreRename = new File(solrHomeDirectory, \"corerename\");\n    File renamePropFile = new File(coreRename, \"core.properties\");\n    FileUtils.write(renamePropFile, \"\", StandardCharsets.UTF_8);\n\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    // Make sure a renamed core\n    // 1> has the property persisted (SOLR-11783)\n    // 2> is deleted after rename properly.\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.renameCore(\"corerename\", \"brand_new_core_name\", client);\n      Properties props = new Properties();\n      try (InputStreamReader is = new InputStreamReader(new FileInputStream(renamePropFile), StandardCharsets.UTF_8)) {\n        props.load(is);\n      }\n      assertEquals(\"Name should have been persisted!\", \"brand_new_core_name\", props.getProperty(\"name\"));\n    }\n\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"brand_new_core_name\");\n      req.process(client);\n    }\n\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + coreRename,\n        coreRename.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteInstanceDir() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n\n    copySolrHomeToTemp(solrHomeDirectory, \"corerename\");\n\n    File coreRename = new File(solrHomeDirectory, \"corerename\");\n    File renamePropFile = new File(coreRename, \"core.properties\");\n    FileUtils.write(renamePropFile, \"\", StandardCharsets.UTF_8);\n\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    // Make sure a renamed core\n    // 1> has the property persisted (SOLR-11783)\n    // 2> is deleted after rename properly.\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.renameCore(\"corerename\", \"brand_new_core_name\", client);\n      Properties props = new Properties();\n      try (InputStreamReader is = new InputStreamReader(new FileInputStream(renamePropFile), StandardCharsets.UTF_8)) {\n        props.load(is);\n      }\n      assertEquals(\"Name should have been persisted!\", \"brand_new_core_name\", props.getProperty(\"name\"));\n    }\n\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(true);\n      req.setCoreName(\"brand_new_core_name\");\n      req.process(client);\n    }\n\n\n    runner.stop();\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + corex,\n        corex.exists());\n\n    assertFalse(\"Instance directory exists after core unload with deleteInstanceDir=true : \" + coreRename,\n        coreRename.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"162e1895a880a7263b46e184f1478f0366eb095c":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"4ac93a5cce7c6ece26cc1f179d6a3352eb3acdcd":["43d1e498704edd2bba13548a189eed4dfccff11b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bafca15d8e408346a67f4282ad1143b88023893b":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"320888923ec13b91f53082558f01f4c9960dd226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"43d1e498704edd2bba13548a189eed4dfccff11b":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["86594bd599df3a27cc9368991328dded72efd349","c66158bb16e902a21272772f1b911f04b1a55abb"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","43d1e498704edd2bba13548a189eed4dfccff11b"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["ec4f25a2171450fd11fca6ecb7a809922c9ec694"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"ec4f25a2171450fd11fca6ecb7a809922c9ec694":["4daab2d6aed8d92bb885727ab0df59cde121d3df"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"86594bd599df3a27cc9368991328dded72efd349":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"4daab2d6aed8d92bb885727ab0df59cde121d3df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["162e1895a880a7263b46e184f1478f0366eb095c"],"d0d579490a72f2e6297eaa648940611234c57cf1":["ec4f25a2171450fd11fca6ecb7a809922c9ec694"],"f8061ddd97f3352007d927dae445884a6f3d857b":["4ac93a5cce7c6ece26cc1f179d6a3352eb3acdcd","9799ebcab48102552d92f7807965a91fb6e116f7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","162e1895a880a7263b46e184f1478f0366eb095c"],"9799ebcab48102552d92f7807965a91fb6e116f7":["4ac93a5cce7c6ece26cc1f179d6a3352eb3acdcd"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["bcf9886c8ff537aafde14de48ebf744f5673f08b","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4daab2d6aed8d92bb885727ab0df59cde121d3df"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["c66158bb16e902a21272772f1b911f04b1a55abb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9799ebcab48102552d92f7807965a91fb6e116f7"],"c66158bb16e902a21272772f1b911f04b1a55abb":["86594bd599df3a27cc9368991328dded72efd349"]},"commit2Childs":{"162e1895a880a7263b46e184f1478f0366eb095c":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["bafca15d8e408346a67f4282ad1143b88023893b"],"4ac93a5cce7c6ece26cc1f179d6a3352eb3acdcd":["f8061ddd97f3352007d927dae445884a6f3d857b","9799ebcab48102552d92f7807965a91fb6e116f7"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"320888923ec13b91f53082558f01f4c9960dd226":[],"43d1e498704edd2bba13548a189eed4dfccff11b":["4ac93a5cce7c6ece26cc1f179d6a3352eb3acdcd","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4daab2d6aed8d92bb885727ab0df59cde121d3df","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["86594bd599df3a27cc9368991328dded72efd349"],"ec4f25a2171450fd11fca6ecb7a809922c9ec694":["1416f9d09d016a6894cd17e1caac137dad2bba59","d0d579490a72f2e6297eaa648940611234c57cf1"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"86594bd599df3a27cc9368991328dded72efd349":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c66158bb16e902a21272772f1b911f04b1a55abb"],"4daab2d6aed8d92bb885727ab0df59cde121d3df":["ec4f25a2171450fd11fca6ecb7a809922c9ec694","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["320888923ec13b91f53082558f01f4c9960dd226","43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["320888923ec13b91f53082558f01f4c9960dd226"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["162e1895a880a7263b46e184f1478f0366eb095c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9799ebcab48102552d92f7807965a91fb6e116f7":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"c66158bb16e902a21272772f1b911f04b1a55abb":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["320888923ec13b91f53082558f01f4c9960dd226","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","f8061ddd97f3352007d927dae445884a6f3d857b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}