{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocsWithField().mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getDoubles(reader, \"theDouble\", true);\n\n    // The double[] takes two slots (one w/ null parser, one\n    // w/ real parser), and docsWithField should also\n    // have been populated:\n    assertEquals(3, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(3, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    FieldCache.Ints ints = cache.getInts(reader, \"sparse\", true);\n    assertEquals(6, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(6, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    FieldCache.Ints numInts = cache.getInts(reader, \"numInt\", random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getDoubles(reader, \"theDouble\", true);\n\n    // The double[] takes two slots (one w/ null parser, one\n    // w/ real parser), and docsWithField should also\n    // have been populated:\n    assertEquals(3, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(3, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    FieldCache.Ints ints = cache.getInts(reader, \"sparse\", true);\n    assertEquals(6, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(6, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    FieldCache.Ints numInts = cache.getInts(reader, \"numInt\", random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocsWithField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getDoubles(reader, \"theDouble\", true);\n\n    // The double[] takes two slots (one w/ null parser, one\n    // w/ real parser), and docsWithField should also\n    // have been populated:\n    assertEquals(3, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(3, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    FieldCache.Ints ints = cache.getInts(reader, \"sparse\", true);\n    assertEquals(6, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(6, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    FieldCache.Ints numInts = cache.getInts(reader, \"numInt\", random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c146731a64debc22c115bbf11ee1a060aa7ea02","date":1457616596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocsWithField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.INT_POINT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.INT_POINT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\");\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\");\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\");\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","382fe3a6ca9745891afebda9b9a57cc158305545"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testDocsWithField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.INT_POINT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.INT_POINT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.INT_POINT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.INT_POINT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testDocsWithField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.INT_POINT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.INT_POINT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.INT_POINT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.INT_POINT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testDocsWithField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocsWithField().mjava","sourceNew":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.INT_POINT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.INT_POINT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.INT_POINT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.INT_POINT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocsWithField().mjava","sourceNew":null,"sourceOld":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER, true);\n\n    // The double[] takes one slots, and docsWithField should also\n    // have been populated:\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER);\n\n    // No new entries should appear:\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.INT_POINT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.INT_POINT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["8c146731a64debc22c115bbf11ee1a060aa7ea02","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["8c146731a64debc22c115bbf11ee1a060aa7ea02","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}