{"path":"lucene/luke/src/java/org/apache/lucene/luke/models/overview/TopTerms#getTopTerms(String,int).mjava","commits":[{"id":"f554f2d9b5456248ab6467b9d4f6015686797a6c","date":1554891357,"type":0,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/models/overview/TopTerms#getTopTerms(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the top indexed terms with their statistics for the specified field.\n   *\n   * @param field - the field name\n   * @param numTerms - the max number of terms to be returned\n   * @throws Exception - if an error occurs when collecting term statistics\n   */\n  List<TermStats> getTopTerms(String field, int numTerms) throws Exception {\n\n    if (!topTermsCache.containsKey(field) || topTermsCache.get(field).size() < numTerms) {\n      org.apache.lucene.misc.TermStats[] stats =\n          HighFreqTerms.getHighFreqTerms(reader, numTerms, field, new HighFreqTerms.DocFreqComparator());\n\n      List<TermStats> topTerms = Arrays.stream(stats)\n          .map(TermStats::of)\n          .collect(Collectors.toList());\n\n      // cache computed statistics for later uses\n      topTermsCache.put(field, topTerms);\n    }\n\n    return Collections.unmodifiableList(topTermsCache.get(field));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fde2206cd9f6d0b9e3b572079c4243bb23c6100","date":1555838303,"type":3,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/models/overview/TopTerms#getTopTerms(String,int).mjava","pathOld":"lucene/luke/src/java/org/apache/lucene/luke/models/overview/TopTerms#getTopTerms(String,int).mjava","sourceNew":"  /**\n   * Returns the top indexed terms with their statistics for the specified field.\n   *\n   * @param field - the field name\n   * @param numTerms - the max number of terms to be returned\n   * @throws Exception - if an error occurs when collecting term statistics\n   */\n  List<TermStats> getTopTerms(String field, int numTerms) throws Exception {\n\n    if (!topTermsCache.containsKey(field) || topTermsCache.get(field).size() < numTerms) {\n      org.apache.lucene.misc.TermStats[] stats =\n          HighFreqTerms.getHighFreqTerms(reader, numTerms, field, new HighFreqTerms.DocFreqComparator());\n\n      List<TermStats> topTerms = Arrays.stream(stats)\n          .map(TermStats::of)\n          .collect(Collectors.toList());\n\n      // cache computed statistics for later uses\n      topTermsCache.put(field, topTerms);\n    }\n\n    return List.copyOf(topTermsCache.get(field));\n  }\n\n","sourceOld":"  /**\n   * Returns the top indexed terms with their statistics for the specified field.\n   *\n   * @param field - the field name\n   * @param numTerms - the max number of terms to be returned\n   * @throws Exception - if an error occurs when collecting term statistics\n   */\n  List<TermStats> getTopTerms(String field, int numTerms) throws Exception {\n\n    if (!topTermsCache.containsKey(field) || topTermsCache.get(field).size() < numTerms) {\n      org.apache.lucene.misc.TermStats[] stats =\n          HighFreqTerms.getHighFreqTerms(reader, numTerms, field, new HighFreqTerms.DocFreqComparator());\n\n      List<TermStats> topTerms = Arrays.stream(stats)\n          .map(TermStats::of)\n          .collect(Collectors.toList());\n\n      // cache computed statistics for later uses\n      topTermsCache.put(field, topTerms);\n    }\n\n    return Collections.unmodifiableList(topTermsCache.get(field));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fde2206cd9f6d0b9e3b572079c4243bb23c6100":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fde2206cd9f6d0b9e3b572079c4243bb23c6100"]},"commit2Childs":{"2fde2206cd9f6d0b9e3b572079c4243bb23c6100":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["2fde2206cd9f6d0b9e3b572079c4243bb23c6100"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}