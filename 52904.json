{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacetsRanges().mjava","commits":[{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacetsRanges().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPivotFacetsRanges() throws Exception {\n    SolrClient client = getSolrClient();\n\n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    int id = 1;\n    ArrayList<SolrInputDocument> docs = new ArrayList<>();\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 12, \"price\", .017));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 13, \"price\", 16.04));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 14, \"price\", 12.34));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 24, \"price\", 51.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 28, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 32));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 31, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 36));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 37, \"price\", 1.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 38, \"price\", 47.98));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"b\", \"inStock\", true, \"popularity\", -38));\n    docs.add(makeTestDoc(\"id\", id++, \"cat\", \"b\")); // something not matching all fields\n    client.add(docs);\n    client.commit();\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.addFacetPivotField(\"{!range=s1}features,manu\");\n    query.add(FacetParams.FACET_RANGE, \"{!key=price1 tag=s1}price\");\n    query.add(String.format(Locale.ROOT, \"f.%s.%s\", \"price\", FacetParams.FACET_RANGE_START), \"0\");\n    query.add(String.format(Locale.ROOT, \"f.%s.%s\", \"price\", FacetParams.FACET_RANGE_END), \"200\");\n    query.add(String.format(Locale.ROOT, \"f.%s.%s\", \"price\", FacetParams.FACET_RANGE_GAP), \"50\");\n    query.set(FacetParams.FACET, true);\n    query.add(FacetParams.FACET_RANGE, \"{!key=price2 tag=s1}price\");\n    query.setFacetMinCount(0);\n    query.setRows(0);\n    QueryResponse rsp = client.query(query);\n\n    List<RangeFacet> list = rsp.getFacetRanges();\n    assertEquals(2, list.size());\n    @SuppressWarnings(\"unchecked\")\n    RangeFacet<Float, Float> range1 = list.get(0);\n    assertEquals(\"price1\", range1.getName());\n    assertEquals(0, range1.getStart().intValue());\n    assertEquals(200, range1.getEnd().intValue());\n    assertEquals(50, range1.getGap().intValue());\n    List<Count> counts1 = range1.getCounts();\n    assertEquals(4, counts1.size());\n    assertEquals(5, counts1.get(0).getCount());\n    assertEquals(\"0.0\", counts1.get(0).getValue());\n    assertEquals(1, counts1.get(1).getCount());\n    assertEquals(\"50.0\", counts1.get(1).getValue());\n    assertEquals(2, counts1.get(2).getCount());\n    assertEquals(\"100.0\", counts1.get(2).getValue());\n    assertEquals(0, counts1.get(3).getCount());\n    assertEquals(\"150.0\", counts1.get(3).getValue());\n    @SuppressWarnings(\"unchecked\")\n    RangeFacet<Float, Float> range2 = list.get(1);\n    assertEquals(\"price2\", range2.getName());\n    assertEquals(0, range2.getStart().intValue());\n    assertEquals(200, range2.getEnd().intValue());\n    assertEquals(50, range2.getGap().intValue());\n    List<Count> counts2 = range2.getCounts();\n    assertEquals(4, counts2.size());\n    assertEquals(5, counts2.get(0).getCount());\n    assertEquals(\"0.0\", counts2.get(0).getValue());\n    assertEquals(1, counts2.get(1).getCount());\n    assertEquals(\"50.0\", counts2.get(1).getValue());\n    assertEquals(2, counts2.get(2).getCount());\n    assertEquals(\"100.0\", counts2.get(2).getValue());\n    assertEquals(0, counts2.get(3).getCount());\n    assertEquals(\"150.0\", counts2.get(3).getValue());\n    \n    NamedList<List<PivotField>> pivots = rsp.getFacetPivot();\n    List<PivotField> pivotValues = pivots.get(\"features,manu\");\n\n    PivotField featuresBBBPivot = pivotValues.get(0);\n    assertEquals(\"features\", featuresBBBPivot.getField());\n    assertEquals(\"bbb\", featuresBBBPivot.getValue());\n    List<RangeFacet> featuresBBBRanges = featuresBBBPivot.getFacetRanges();\n\n    for (RangeFacet range : featuresBBBRanges) {\n      if (range.getName().equals(\"price1\")) {\n        assertNotNull(range);\n        assertEquals(0, ((Float)range.getStart()).intValue());\n        assertEquals(200, ((Float)range.getEnd()).intValue());\n        assertEquals(50, ((Float)range.getGap()).intValue());\n        List<Count> counts = range.getCounts();\n        assertEquals(4, counts.size());\n        for (Count count : counts) {\n          switch (count.getValue()) {\n            case \"0.0\": assertEquals(2, count.getCount()); break;\n            case \"50.0\": assertEquals(0, count.getCount()); break;\n            case \"100.0\": assertEquals(1, count.getCount()); break;\n            case \"150.0\": assertEquals(0, count.getCount()); break;\n          }\n        }\n      } else if (range.getName().equals(\"price2\"))  {\n        assertNotNull(range);\n        assertEquals(0, ((Float) range.getStart()).intValue());\n        assertEquals(200, ((Float) range.getEnd()).intValue());\n        assertEquals(50, ((Float) range.getGap()).intValue());\n        List<Count> counts = range.getCounts();\n        assertEquals(4, counts.size());\n        for (Count count : counts) {\n          switch (count.getValue()) {\n            case \"0.0\": assertEquals(2, count.getCount()); break;\n            case \"50.0\": assertEquals(0, count.getCount()); break;\n            case \"100.0\": assertEquals(1, count.getCount()); break;\n            case \"150.0\": assertEquals(0, count.getCount()); break;\n          }\n        }\n      }\n    }\n\n    PivotField featuresAAAPivot = pivotValues.get(1);\n    assertEquals(\"features\", featuresAAAPivot.getField());\n    assertEquals(\"aaa\", featuresAAAPivot.getValue());\n    List<RangeFacet> facetRanges = featuresAAAPivot.getFacetRanges();\n    for (RangeFacet range : facetRanges) {\n      if (range.getName().equals(\"price1\")) {\n        assertNotNull(range);\n        assertEquals(0, ((Float)range.getStart()).intValue());\n        assertEquals(200, ((Float)range.getEnd()).intValue());\n        assertEquals(50, ((Float)range.getGap()).intValue());\n        List<Count> counts = range.getCounts();\n        assertEquals(4, counts.size());\n        for (Count count : counts) {\n          switch (count.getValue()) {\n            case \"0.0\": assertEquals(3, count.getCount()); break;\n            case \"50.0\": assertEquals(1, count.getCount()); break;\n            case \"100.0\": assertEquals(1, count.getCount()); break;\n            case \"150.0\": assertEquals(0, count.getCount()); break;\n          }\n        }\n      } else if (range.getName().equals(\"price2\"))  {\n        assertNotNull(range);\n        assertEquals(0, ((Float)range.getStart()).intValue());\n        assertEquals(200, ((Float)range.getEnd()).intValue());\n        assertEquals(50, ((Float)range.getGap()).intValue());\n        List<Count> counts = range.getCounts();\n        assertEquals(4, counts.size());\n        for (Count count : counts) {\n          switch (count.getValue()) {\n            case \"0.0\": assertEquals(3, count.getCount()); break;\n            case \"50.0\": assertEquals(1, count.getCount()); break;\n            case \"100.0\": assertEquals(1, count.getCount()); break;\n            case \"150.0\": assertEquals(0, count.getCount()); break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacetsRanges().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacetsRanges().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"rawtypes\"})\n  public void testPivotFacetsRanges() throws Exception {\n    SolrClient client = getSolrClient();\n\n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    int id = 1;\n    ArrayList<SolrInputDocument> docs = new ArrayList<>();\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 12, \"price\", .017));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 13, \"price\", 16.04));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 14, \"price\", 12.34));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 24, \"price\", 51.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 28, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 32));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 31, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 36));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 37, \"price\", 1.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 38, \"price\", 47.98));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"b\", \"inStock\", true, \"popularity\", -38));\n    docs.add(makeTestDoc(\"id\", id++, \"cat\", \"b\")); // something not matching all fields\n    client.add(docs);\n    client.commit();\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.addFacetPivotField(\"{!range=s1}features,manu\");\n    query.add(FacetParams.FACET_RANGE, \"{!key=price1 tag=s1}price\");\n    query.add(String.format(Locale.ROOT, \"f.%s.%s\", \"price\", FacetParams.FACET_RANGE_START), \"0\");\n    query.add(String.format(Locale.ROOT, \"f.%s.%s\", \"price\", FacetParams.FACET_RANGE_END), \"200\");\n    query.add(String.format(Locale.ROOT, \"f.%s.%s\", \"price\", FacetParams.FACET_RANGE_GAP), \"50\");\n    query.set(FacetParams.FACET, true);\n    query.add(FacetParams.FACET_RANGE, \"{!key=price2 tag=s1}price\");\n    query.setFacetMinCount(0);\n    query.setRows(0);\n    QueryResponse rsp = client.query(query);\n\n    List<RangeFacet> list = rsp.getFacetRanges();\n    assertEquals(2, list.size());\n    @SuppressWarnings(\"unchecked\")\n    RangeFacet<Float, Float> range1 = list.get(0);\n    assertEquals(\"price1\", range1.getName());\n    assertEquals(0, range1.getStart().intValue());\n    assertEquals(200, range1.getEnd().intValue());\n    assertEquals(50, range1.getGap().intValue());\n    List<Count> counts1 = range1.getCounts();\n    assertEquals(4, counts1.size());\n    assertEquals(5, counts1.get(0).getCount());\n    assertEquals(\"0.0\", counts1.get(0).getValue());\n    assertEquals(1, counts1.get(1).getCount());\n    assertEquals(\"50.0\", counts1.get(1).getValue());\n    assertEquals(2, counts1.get(2).getCount());\n    assertEquals(\"100.0\", counts1.get(2).getValue());\n    assertEquals(0, counts1.get(3).getCount());\n    assertEquals(\"150.0\", counts1.get(3).getValue());\n    @SuppressWarnings(\"unchecked\")\n    RangeFacet<Float, Float> range2 = list.get(1);\n    assertEquals(\"price2\", range2.getName());\n    assertEquals(0, range2.getStart().intValue());\n    assertEquals(200, range2.getEnd().intValue());\n    assertEquals(50, range2.getGap().intValue());\n    List<Count> counts2 = range2.getCounts();\n    assertEquals(4, counts2.size());\n    assertEquals(5, counts2.get(0).getCount());\n    assertEquals(\"0.0\", counts2.get(0).getValue());\n    assertEquals(1, counts2.get(1).getCount());\n    assertEquals(\"50.0\", counts2.get(1).getValue());\n    assertEquals(2, counts2.get(2).getCount());\n    assertEquals(\"100.0\", counts2.get(2).getValue());\n    assertEquals(0, counts2.get(3).getCount());\n    assertEquals(\"150.0\", counts2.get(3).getValue());\n    \n    NamedList<List<PivotField>> pivots = rsp.getFacetPivot();\n    List<PivotField> pivotValues = pivots.get(\"features,manu\");\n\n    PivotField featuresBBBPivot = pivotValues.get(0);\n    assertEquals(\"features\", featuresBBBPivot.getField());\n    assertEquals(\"bbb\", featuresBBBPivot.getValue());\n    List<RangeFacet> featuresBBBRanges = featuresBBBPivot.getFacetRanges();\n\n    for (RangeFacet range : featuresBBBRanges) {\n      if (range.getName().equals(\"price1\")) {\n        assertNotNull(range);\n        assertEquals(0, ((Float)range.getStart()).intValue());\n        assertEquals(200, ((Float)range.getEnd()).intValue());\n        assertEquals(50, ((Float)range.getGap()).intValue());\n        @SuppressWarnings({\"unchecked\"})\n        List<Count> counts = range.getCounts();\n        assertEquals(4, counts.size());\n        for (Count count : counts) {\n          switch (count.getValue()) {\n            case \"0.0\": assertEquals(2, count.getCount()); break;\n            case \"50.0\": assertEquals(0, count.getCount()); break;\n            case \"100.0\": assertEquals(1, count.getCount()); break;\n            case \"150.0\": assertEquals(0, count.getCount()); break;\n          }\n        }\n      } else if (range.getName().equals(\"price2\"))  {\n        assertNotNull(range);\n        assertEquals(0, ((Float) range.getStart()).intValue());\n        assertEquals(200, ((Float) range.getEnd()).intValue());\n        assertEquals(50, ((Float) range.getGap()).intValue());\n        @SuppressWarnings({\"unchecked\"})\n        List<Count> counts = range.getCounts();\n        assertEquals(4, counts.size());\n        for (Count count : counts) {\n          switch (count.getValue()) {\n            case \"0.0\": assertEquals(2, count.getCount()); break;\n            case \"50.0\": assertEquals(0, count.getCount()); break;\n            case \"100.0\": assertEquals(1, count.getCount()); break;\n            case \"150.0\": assertEquals(0, count.getCount()); break;\n          }\n        }\n      }\n    }\n\n    PivotField featuresAAAPivot = pivotValues.get(1);\n    assertEquals(\"features\", featuresAAAPivot.getField());\n    assertEquals(\"aaa\", featuresAAAPivot.getValue());\n    List<RangeFacet> facetRanges = featuresAAAPivot.getFacetRanges();\n    for (RangeFacet range : facetRanges) {\n      if (range.getName().equals(\"price1\")) {\n        assertNotNull(range);\n        assertEquals(0, ((Float)range.getStart()).intValue());\n        assertEquals(200, ((Float)range.getEnd()).intValue());\n        assertEquals(50, ((Float)range.getGap()).intValue());\n        @SuppressWarnings({\"unchecked\"})\n        List<Count> counts = range.getCounts();\n        assertEquals(4, counts.size());\n        for (Count count : counts) {\n          switch (count.getValue()) {\n            case \"0.0\": assertEquals(3, count.getCount()); break;\n            case \"50.0\": assertEquals(1, count.getCount()); break;\n            case \"100.0\": assertEquals(1, count.getCount()); break;\n            case \"150.0\": assertEquals(0, count.getCount()); break;\n          }\n        }\n      } else if (range.getName().equals(\"price2\"))  {\n        assertNotNull(range);\n        assertEquals(0, ((Float)range.getStart()).intValue());\n        assertEquals(200, ((Float)range.getEnd()).intValue());\n        assertEquals(50, ((Float)range.getGap()).intValue());\n        @SuppressWarnings({\"unchecked\"})\n        List<Count> counts = range.getCounts();\n        assertEquals(4, counts.size());\n        for (Count count : counts) {\n          switch (count.getValue()) {\n            case \"0.0\": assertEquals(3, count.getCount()); break;\n            case \"50.0\": assertEquals(1, count.getCount()); break;\n            case \"100.0\": assertEquals(1, count.getCount()); break;\n            case \"150.0\": assertEquals(0, count.getCount()); break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPivotFacetsRanges() throws Exception {\n    SolrClient client = getSolrClient();\n\n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    int id = 1;\n    ArrayList<SolrInputDocument> docs = new ArrayList<>();\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 12, \"price\", .017));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 13, \"price\", 16.04));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 14, \"price\", 12.34));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 24, \"price\", 51.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 28, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 32));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 31, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 36));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 37, \"price\", 1.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 38, \"price\", 47.98));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"cat\", \"b\", \"inStock\", true, \"popularity\", -38));\n    docs.add(makeTestDoc(\"id\", id++, \"cat\", \"b\")); // something not matching all fields\n    client.add(docs);\n    client.commit();\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.addFacetPivotField(\"{!range=s1}features,manu\");\n    query.add(FacetParams.FACET_RANGE, \"{!key=price1 tag=s1}price\");\n    query.add(String.format(Locale.ROOT, \"f.%s.%s\", \"price\", FacetParams.FACET_RANGE_START), \"0\");\n    query.add(String.format(Locale.ROOT, \"f.%s.%s\", \"price\", FacetParams.FACET_RANGE_END), \"200\");\n    query.add(String.format(Locale.ROOT, \"f.%s.%s\", \"price\", FacetParams.FACET_RANGE_GAP), \"50\");\n    query.set(FacetParams.FACET, true);\n    query.add(FacetParams.FACET_RANGE, \"{!key=price2 tag=s1}price\");\n    query.setFacetMinCount(0);\n    query.setRows(0);\n    QueryResponse rsp = client.query(query);\n\n    List<RangeFacet> list = rsp.getFacetRanges();\n    assertEquals(2, list.size());\n    @SuppressWarnings(\"unchecked\")\n    RangeFacet<Float, Float> range1 = list.get(0);\n    assertEquals(\"price1\", range1.getName());\n    assertEquals(0, range1.getStart().intValue());\n    assertEquals(200, range1.getEnd().intValue());\n    assertEquals(50, range1.getGap().intValue());\n    List<Count> counts1 = range1.getCounts();\n    assertEquals(4, counts1.size());\n    assertEquals(5, counts1.get(0).getCount());\n    assertEquals(\"0.0\", counts1.get(0).getValue());\n    assertEquals(1, counts1.get(1).getCount());\n    assertEquals(\"50.0\", counts1.get(1).getValue());\n    assertEquals(2, counts1.get(2).getCount());\n    assertEquals(\"100.0\", counts1.get(2).getValue());\n    assertEquals(0, counts1.get(3).getCount());\n    assertEquals(\"150.0\", counts1.get(3).getValue());\n    @SuppressWarnings(\"unchecked\")\n    RangeFacet<Float, Float> range2 = list.get(1);\n    assertEquals(\"price2\", range2.getName());\n    assertEquals(0, range2.getStart().intValue());\n    assertEquals(200, range2.getEnd().intValue());\n    assertEquals(50, range2.getGap().intValue());\n    List<Count> counts2 = range2.getCounts();\n    assertEquals(4, counts2.size());\n    assertEquals(5, counts2.get(0).getCount());\n    assertEquals(\"0.0\", counts2.get(0).getValue());\n    assertEquals(1, counts2.get(1).getCount());\n    assertEquals(\"50.0\", counts2.get(1).getValue());\n    assertEquals(2, counts2.get(2).getCount());\n    assertEquals(\"100.0\", counts2.get(2).getValue());\n    assertEquals(0, counts2.get(3).getCount());\n    assertEquals(\"150.0\", counts2.get(3).getValue());\n    \n    NamedList<List<PivotField>> pivots = rsp.getFacetPivot();\n    List<PivotField> pivotValues = pivots.get(\"features,manu\");\n\n    PivotField featuresBBBPivot = pivotValues.get(0);\n    assertEquals(\"features\", featuresBBBPivot.getField());\n    assertEquals(\"bbb\", featuresBBBPivot.getValue());\n    List<RangeFacet> featuresBBBRanges = featuresBBBPivot.getFacetRanges();\n\n    for (RangeFacet range : featuresBBBRanges) {\n      if (range.getName().equals(\"price1\")) {\n        assertNotNull(range);\n        assertEquals(0, ((Float)range.getStart()).intValue());\n        assertEquals(200, ((Float)range.getEnd()).intValue());\n        assertEquals(50, ((Float)range.getGap()).intValue());\n        List<Count> counts = range.getCounts();\n        assertEquals(4, counts.size());\n        for (Count count : counts) {\n          switch (count.getValue()) {\n            case \"0.0\": assertEquals(2, count.getCount()); break;\n            case \"50.0\": assertEquals(0, count.getCount()); break;\n            case \"100.0\": assertEquals(1, count.getCount()); break;\n            case \"150.0\": assertEquals(0, count.getCount()); break;\n          }\n        }\n      } else if (range.getName().equals(\"price2\"))  {\n        assertNotNull(range);\n        assertEquals(0, ((Float) range.getStart()).intValue());\n        assertEquals(200, ((Float) range.getEnd()).intValue());\n        assertEquals(50, ((Float) range.getGap()).intValue());\n        List<Count> counts = range.getCounts();\n        assertEquals(4, counts.size());\n        for (Count count : counts) {\n          switch (count.getValue()) {\n            case \"0.0\": assertEquals(2, count.getCount()); break;\n            case \"50.0\": assertEquals(0, count.getCount()); break;\n            case \"100.0\": assertEquals(1, count.getCount()); break;\n            case \"150.0\": assertEquals(0, count.getCount()); break;\n          }\n        }\n      }\n    }\n\n    PivotField featuresAAAPivot = pivotValues.get(1);\n    assertEquals(\"features\", featuresAAAPivot.getField());\n    assertEquals(\"aaa\", featuresAAAPivot.getValue());\n    List<RangeFacet> facetRanges = featuresAAAPivot.getFacetRanges();\n    for (RangeFacet range : facetRanges) {\n      if (range.getName().equals(\"price1\")) {\n        assertNotNull(range);\n        assertEquals(0, ((Float)range.getStart()).intValue());\n        assertEquals(200, ((Float)range.getEnd()).intValue());\n        assertEquals(50, ((Float)range.getGap()).intValue());\n        List<Count> counts = range.getCounts();\n        assertEquals(4, counts.size());\n        for (Count count : counts) {\n          switch (count.getValue()) {\n            case \"0.0\": assertEquals(3, count.getCount()); break;\n            case \"50.0\": assertEquals(1, count.getCount()); break;\n            case \"100.0\": assertEquals(1, count.getCount()); break;\n            case \"150.0\": assertEquals(0, count.getCount()); break;\n          }\n        }\n      } else if (range.getName().equals(\"price2\"))  {\n        assertNotNull(range);\n        assertEquals(0, ((Float)range.getStart()).intValue());\n        assertEquals(200, ((Float)range.getEnd()).intValue());\n        assertEquals(50, ((Float)range.getGap()).intValue());\n        List<Count> counts = range.getCounts();\n        assertEquals(4, counts.size());\n        for (Count count : counts) {\n          switch (count.getValue()) {\n            case \"0.0\": assertEquals(3, count.getCount()); break;\n            case \"50.0\": assertEquals(1, count.getCount()); break;\n            case \"100.0\": assertEquals(1, count.getCount()); break;\n            case \"150.0\": assertEquals(0, count.getCount()); break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}