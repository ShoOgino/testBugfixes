{"path":"lucene/demo/src/java/org/apache/lucene/demo/facet/simple/SimpleSearcher#searchWithRequestAndQuery(Query,IndexReader,TaxonomyReader,FacetIndexingParams,FacetRequest...).mjava","commits":[{"id":"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","date":1359570667,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/simple/SimpleSearcher#searchWithRequestAndQuery(Query,IndexReader,TaxonomyReader,FacetIndexingParams,FacetRequest...).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithRequestAndQuery(Query,IndexReader,TaxonomyReader,FacetIndexingParams,FacetRequest...).mjava","sourceNew":"  /**\n   * Search an index with facets for given query and facet requests.\n   * @param q query of interest\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @param indexingParams the facet indexing params\n   * @param facetRequests facet requests of interest\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithRequestAndQuery(Query q,\n      IndexReader indexReader, TaxonomyReader taxoReader,\n      FacetIndexingParams indexingParams, FacetRequest... facetRequests)\n      throws Exception {\n    \n    ExampleUtils.log(\"Query: \" + q);\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // collect matching documents into a collector\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    if (indexingParams == null) {\n      indexingParams = FacetIndexingParams.ALL_PARENTS;\n    }\n    \n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(indexingParams, facetRequests);\n\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, indexReader, taxoReader);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets for given query and facet requests.\n   * @param q query of interest\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @param indexingParams the facet indexing params\n   * @param facetRequests facet requests of interest\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithRequestAndQuery(Query q,\n      IndexReader indexReader, TaxonomyReader taxoReader,\n      FacetIndexingParams indexingParams, FacetRequest... facetRequests)\n      throws Exception {\n    \n    ExampleUtils.log(\"Query: \" + q);\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // collect matching documents into a collector\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    if (indexingParams == null) {\n      indexingParams = FacetIndexingParams.ALL_PARENTS;\n    }\n    \n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(indexingParams, facetRequests);\n\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, indexReader, taxoReader);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/simple/SimpleSearcher#searchWithRequestAndQuery(Query,IndexReader,TaxonomyReader,FacetIndexingParams,FacetRequest...).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithRequestAndQuery(Query,IndexReader,TaxonomyReader,FacetIndexingParams,FacetRequest...).mjava","sourceNew":"  /**\n   * Search an index with facets for given query and facet requests.\n   * @param q query of interest\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @param indexingParams the facet indexing params\n   * @param facetRequests facet requests of interest\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithRequestAndQuery(Query q,\n      IndexReader indexReader, TaxonomyReader taxoReader,\n      FacetIndexingParams indexingParams, FacetRequest... facetRequests)\n      throws Exception {\n    \n    ExampleUtils.log(\"Query: \" + q);\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // collect matching documents into a collector\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    if (indexingParams == null) {\n      indexingParams = FacetIndexingParams.ALL_PARENTS;\n    }\n    \n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(indexingParams, facetRequests);\n\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, indexReader, taxoReader);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets for given query and facet requests.\n   * @param q query of interest\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @param indexingParams the facet indexing params\n   * @param facetRequests facet requests of interest\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithRequestAndQuery(Query q,\n      IndexReader indexReader, TaxonomyReader taxoReader,\n      FacetIndexingParams indexingParams, FacetRequest... facetRequests)\n      throws Exception {\n    \n    ExampleUtils.log(\"Query: \" + q);\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // collect matching documents into a collector\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    if (indexingParams == null) {\n      indexingParams = FacetIndexingParams.ALL_PARENTS;\n    }\n    \n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(indexingParams, facetRequests);\n\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, indexReader, taxoReader);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31703f98041a9e7086254ed134d8f91c22ac933f","date":1360500940,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/simple/SimpleSearcher#searchWithRequestAndQuery(Query,IndexReader,TaxonomyReader,FacetIndexingParams,FacetRequest...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Search an index with facets for given query and facet requests.\n   * @param q query of interest\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @param indexingParams the facet indexing params\n   * @param facetRequests facet requests of interest\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithRequestAndQuery(Query q,\n      IndexReader indexReader, TaxonomyReader taxoReader,\n      FacetIndexingParams indexingParams, FacetRequest... facetRequests)\n      throws Exception {\n    \n    ExampleUtils.log(\"Query: \" + q);\n    // prepare searcher to search against\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    // collect matching documents into a collector\n    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);\n\n    if (indexingParams == null) {\n      indexingParams = FacetIndexingParams.ALL_PARENTS;\n    }\n    \n    // Faceted search parameters indicate which facets are we interested in\n    FacetSearchParams facetSearchParams = new FacetSearchParams(indexingParams, facetRequests);\n\n    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, indexReader, taxoReader);\n\n    // perform documents search and facets accumulation\n    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));\n\n    // Obtain facets results and print them\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    int i = 0;\n    for (FacetResult facetResult : res) {\n      ExampleUtils.log(\"Res \" + (i++) + \": \" + facetResult);\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61d5f95d14e5b9b046998c51e16709a398c15226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"31703f98041a9e7086254ed134d8f91c22ac933f":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31703f98041a9e7086254ed134d8f91c22ac933f"]},"commit2Childs":{"61d5f95d14e5b9b046998c51e16709a398c15226":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61d5f95d14e5b9b046998c51e16709a398c15226","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"31703f98041a9e7086254ed134d8f91c22ac933f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["61d5f95d14e5b9b046998c51e16709a398c15226","31703f98041a9e7086254ed134d8f91c22ac933f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}