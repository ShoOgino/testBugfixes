{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","sourceNew":"  private void initEngine(Context context) {\n    try {\n      String scriptText = context.getScript();\n      String scriptLang = context.getScriptLanguage();\n      if(scriptText == null ){\n        throw new DataImportHandlerException(SEVERE,\n              \"<script> tag is not present under <dataConfig>\");\n      }\n      Object scriptEngineMgr = Class\n              .forName(\"javax.script.ScriptEngineManager\").newInstance();\n      // create a Script engine\n      Method getEngineMethod = scriptEngineMgr.getClass().getMethod(\n              \"getEngineByName\", String.class);\n      engine = getEngineMethod.invoke(scriptEngineMgr, scriptLang);\n      Method evalMethod = engine.getClass().getMethod(\"eval\", String.class);\n      invokeFunctionMethod = engine.getClass().getMethod(\"invokeFunction\",\n              String.class, Object[].class);\n      evalMethod.invoke(engine, scriptText);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE,e, \"<script> can be used only in java 6 or above\");\n    }\n  }\n\n","sourceOld":"  private void initEngine(Context context) {\n    try {\n      String scriptText = context.getScript();\n      String scriptLang = context.getScriptLanguage();\n      if(scriptText == null ){\n        throw new DataImportHandlerException(SEVERE,\n              \"<script> tag is not present under <dataConfig>\");\n      }\n      Object scriptEngineMgr = Class\n              .forName(\"javax.script.ScriptEngineManager\").newInstance();\n      // create a Script engine\n      Method getEngineMethod = scriptEngineMgr.getClass().getMethod(\n              \"getEngineByName\", String.class);\n      engine = getEngineMethod.invoke(scriptEngineMgr, scriptLang);\n      Method evalMethod = engine.getClass().getMethod(\"eval\", String.class);\n      invokeFunctionMethod = engine.getClass().getMethod(\"invokeFunction\",\n              String.class, Object[].class);\n      evalMethod.invoke(engine, scriptText);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE,e, \"<script> can be used only in java 6 or above\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","sourceNew":"  private void initEngine(Context context) {\n    try {\n      String scriptText = context.getScript();\n      String scriptLang = context.getScriptLanguage();\n      if(scriptText == null ){\n        throw new DataImportHandlerException(SEVERE,\n              \"<script> tag is not present under <dataConfig>\");\n      }\n      Object scriptEngineMgr = Class\n              .forName(\"javax.script.ScriptEngineManager\").newInstance();\n      // create a Script engine\n      Method getEngineMethod = scriptEngineMgr.getClass().getMethod(\n              \"getEngineByName\", String.class);\n      engine = getEngineMethod.invoke(scriptEngineMgr, scriptLang);\n      Method evalMethod = engine.getClass().getMethod(\"eval\", String.class);\n      invokeFunctionMethod = engine.getClass().getMethod(\"invokeFunction\",\n              String.class, Object[].class);\n      evalMethod.invoke(engine, scriptText);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE,e, \"<script> can be used only in java 6 or above\");\n    }\n  }\n\n","sourceOld":"  private void initEngine(Context context) {\n    try {\n      String scriptText = context.getScript();\n      String scriptLang = context.getScriptLanguage();\n      if(scriptText == null ){\n        throw new DataImportHandlerException(SEVERE,\n              \"<script> tag is not present under <dataConfig>\");\n      }\n      Object scriptEngineMgr = Class\n              .forName(\"javax.script.ScriptEngineManager\").newInstance();\n      // create a Script engine\n      Method getEngineMethod = scriptEngineMgr.getClass().getMethod(\n              \"getEngineByName\", String.class);\n      engine = getEngineMethod.invoke(scriptEngineMgr, scriptLang);\n      Method evalMethod = engine.getClass().getMethod(\"eval\", String.class);\n      invokeFunctionMethod = engine.getClass().getMethod(\"invokeFunction\",\n              String.class, Object[].class);\n      evalMethod.invoke(engine, scriptText);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE,e, \"<script> can be used only in java 6 or above\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e807e4d4ca57192ae0501a38771e721c7a31e34c","date":1332260473,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","sourceNew":"  private void initEngine(Context context) {\n    String scriptText = context.getScript();\n    String scriptLang = context.getScriptLanguage();\n    if (scriptText == null) {\n      throw new DataImportHandlerException(SEVERE,\n          \"<script> tag is not present under <dataConfig>\");\n    }\n    Object scriptEngineMgr = null;\n    try {\n      scriptEngineMgr = Class.forName(\"javax.script.ScriptEngineManager\")\n          .newInstance();\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"<script> can be used only in java 6 or above\");\n    }\n    try {\n      Method getEngineMethod = scriptEngineMgr.getClass().getMethod(\n          \"getEngineByName\", String.class);\n      engine = getEngineMethod.invoke(scriptEngineMgr, scriptLang);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Cannot load Script Engine for language: \"\n          + scriptLang);\n    }\n    try {\n      Method evalMethod = engine.getClass().getMethod(\"eval\", String.class);\n      invokeFunctionMethod = engine.getClass().getMethod(\"invokeFunction\",\n          String.class, Object[].class);\n      evalMethod.invoke(engine, scriptText);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"'eval' failed with language: \" + scriptLang\n          + \" and script: \\n\" + scriptText);\n    }\n  }\n\n","sourceOld":"  private void initEngine(Context context) {\n    try {\n      String scriptText = context.getScript();\n      String scriptLang = context.getScriptLanguage();\n      if(scriptText == null ){\n        throw new DataImportHandlerException(SEVERE,\n              \"<script> tag is not present under <dataConfig>\");\n      }\n      Object scriptEngineMgr = Class\n              .forName(\"javax.script.ScriptEngineManager\").newInstance();\n      // create a Script engine\n      Method getEngineMethod = scriptEngineMgr.getClass().getMethod(\n              \"getEngineByName\", String.class);\n      engine = getEngineMethod.invoke(scriptEngineMgr, scriptLang);\n      Method evalMethod = engine.getClass().getMethod(\"eval\", String.class);\n      invokeFunctionMethod = engine.getClass().getMethod(\"invokeFunction\",\n              String.class, Object[].class);\n      evalMethod.invoke(engine, scriptText);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE,e, \"<script> can be used only in java 6 or above\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae2a73c5ef2043e514f991fa7e95acc6f856ecb","date":1332350533,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","sourceNew":"  private void initEngine(Context context) {\n    String scriptText = context.getScript();\n    String scriptLang = context.getScriptLanguage();\n    if (scriptText == null) {\n      throw new DataImportHandlerException(SEVERE,\n          \"<script> tag is not present under <dataConfig>\");\n    }\n    ScriptEngineManager scriptEngineMgr = new ScriptEngineManager();\n    ScriptEngine scriptEngine = scriptEngineMgr.getEngineByName(scriptLang);\n    if (scriptEngine == null) {\n      throw new DataImportHandlerException(SEVERE,\n          \"Cannot load Script Engine for language: \" + scriptLang);\n    }\n    if (scriptEngine instanceof Invocable) {\n      engine = (Invocable) scriptEngine;\n    } else {\n      throw new DataImportHandlerException(SEVERE,\n          \"The installed ScriptEngine for: \" + scriptLang\n              + \" does not implement Invocable.  Class is \"\n              + scriptEngine.getClass().getName());\n    }\n    try {\n      scriptEngine.eval(scriptText);\n    } catch (ScriptException e) {\n      wrapAndThrow(SEVERE, e, \"'eval' failed with language: \" + scriptLang\n          + \" and script: \\n\" + scriptText);\n    }\n  }\n\n","sourceOld":"  private void initEngine(Context context) {\n    String scriptText = context.getScript();\n    String scriptLang = context.getScriptLanguage();\n    if (scriptText == null) {\n      throw new DataImportHandlerException(SEVERE,\n          \"<script> tag is not present under <dataConfig>\");\n    }\n    Object scriptEngineMgr = null;\n    try {\n      scriptEngineMgr = Class.forName(\"javax.script.ScriptEngineManager\")\n          .newInstance();\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"<script> can be used only in java 6 or above\");\n    }\n    try {\n      Method getEngineMethod = scriptEngineMgr.getClass().getMethod(\n          \"getEngineByName\", String.class);\n      engine = getEngineMethod.invoke(scriptEngineMgr, scriptLang);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Cannot load Script Engine for language: \"\n          + scriptLang);\n    }\n    try {\n      Method evalMethod = engine.getClass().getMethod(\"eval\", String.class);\n      invokeFunctionMethod = engine.getClass().getMethod(\"invokeFunction\",\n          String.class, Object[].class);\n      evalMethod.invoke(engine, scriptText);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"'eval' failed with language: \" + scriptLang\n          + \" and script: \\n\" + scriptText);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6d0c28263a15e6a013d6643c3b6e389fd45a6c2","date":1576668624,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","sourceNew":"  private void initEngine(Context context) {\n    String scriptText = context.getScript();\n    String scriptLang = context.getScriptLanguage();\n    if (scriptText == null) {\n      throw new DataImportHandlerException(SEVERE,\n          \"<script> tag is not present under <dataConfig>\");\n    }\n    ScriptEngineManager scriptEngineMgr = new ScriptEngineManager();\n    ScriptEngine scriptEngine = scriptEngineMgr.getEngineByName(scriptLang);\n    if (scriptEngine == null) {\n      throw new DataImportHandlerException(SEVERE,\n          \"Cannot load Script Engine for language: \" + scriptLang);\n    }\n    if (scriptEngine instanceof Invocable) {\n      engine = (Invocable) scriptEngine;\n    } else {\n      throw new DataImportHandlerException(SEVERE,\n          \"The installed ScriptEngine for: \" + scriptLang\n              + \" does not implement Invocable.  Class is \"\n              + scriptEngine.getClass().getName());\n    }\n    try {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n          @Override\n          public Void run() throws ScriptException  {\n            scriptEngine.eval(scriptText);\n            return null;\n          }\n        }, SCRIPT_SANDBOX);\n      } catch (PrivilegedActionException e) {\n        throw (ScriptException) e.getException();\n      }\n    } catch (ScriptException e) {\n      wrapAndThrow(SEVERE, e, \"'eval' failed with language: \" + scriptLang\n          + \" and script: \\n\" + scriptText);\n    }\n  }\n\n","sourceOld":"  private void initEngine(Context context) {\n    String scriptText = context.getScript();\n    String scriptLang = context.getScriptLanguage();\n    if (scriptText == null) {\n      throw new DataImportHandlerException(SEVERE,\n          \"<script> tag is not present under <dataConfig>\");\n    }\n    ScriptEngineManager scriptEngineMgr = new ScriptEngineManager();\n    ScriptEngine scriptEngine = scriptEngineMgr.getEngineByName(scriptLang);\n    if (scriptEngine == null) {\n      throw new DataImportHandlerException(SEVERE,\n          \"Cannot load Script Engine for language: \" + scriptLang);\n    }\n    if (scriptEngine instanceof Invocable) {\n      engine = (Invocable) scriptEngine;\n    } else {\n      throw new DataImportHandlerException(SEVERE,\n          \"The installed ScriptEngine for: \" + scriptLang\n              + \" does not implement Invocable.  Class is \"\n              + scriptEngine.getClass().getName());\n    }\n    try {\n      scriptEngine.eval(scriptText);\n    } catch (ScriptException e) {\n      wrapAndThrow(SEVERE, e, \"'eval' failed with language: \" + scriptLang\n          + \" and script: \\n\" + scriptText);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21970a18a53245a65302f031a590db9d78d08b4c","date":1576678204,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","sourceNew":"  private void initEngine(Context context) {\n    String scriptText = context.getScript();\n    String scriptLang = context.getScriptLanguage();\n    if (scriptText == null) {\n      throw new DataImportHandlerException(SEVERE,\n          \"<script> tag is not present under <dataConfig>\");\n    }\n    ScriptEngineManager scriptEngineMgr = new ScriptEngineManager();\n    ScriptEngine scriptEngine = scriptEngineMgr.getEngineByName(scriptLang);\n    if (scriptEngine == null) {\n      throw new DataImportHandlerException(SEVERE,\n          \"Cannot load Script Engine for language: \" + scriptLang);\n    }\n    if (scriptEngine instanceof Invocable) {\n      engine = (Invocable) scriptEngine;\n    } else {\n      throw new DataImportHandlerException(SEVERE,\n          \"The installed ScriptEngine for: \" + scriptLang\n              + \" does not implement Invocable.  Class is \"\n              + scriptEngine.getClass().getName());\n    }\n    try {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n          @Override\n          public Void run() throws ScriptException  {\n            scriptEngine.eval(scriptText);\n            return null;\n          }\n        }, SCRIPT_SANDBOX);\n      } catch (PrivilegedActionException e) {\n        throw (ScriptException) e.getException();\n      }\n    } catch (ScriptException e) {\n      wrapAndThrow(SEVERE, e, \"'eval' failed with language: \" + scriptLang\n          + \" and script: \\n\" + scriptText);\n    }\n  }\n\n","sourceOld":"  private void initEngine(Context context) {\n    String scriptText = context.getScript();\n    String scriptLang = context.getScriptLanguage();\n    if (scriptText == null) {\n      throw new DataImportHandlerException(SEVERE,\n          \"<script> tag is not present under <dataConfig>\");\n    }\n    ScriptEngineManager scriptEngineMgr = new ScriptEngineManager();\n    ScriptEngine scriptEngine = scriptEngineMgr.getEngineByName(scriptLang);\n    if (scriptEngine == null) {\n      throw new DataImportHandlerException(SEVERE,\n          \"Cannot load Script Engine for language: \" + scriptLang);\n    }\n    if (scriptEngine instanceof Invocable) {\n      engine = (Invocable) scriptEngine;\n    } else {\n      throw new DataImportHandlerException(SEVERE,\n          \"The installed ScriptEngine for: \" + scriptLang\n              + \" does not implement Invocable.  Class is \"\n              + scriptEngine.getClass().getName());\n    }\n    try {\n      scriptEngine.eval(scriptText);\n    } catch (ScriptException e) {\n      wrapAndThrow(SEVERE, e, \"'eval' failed with language: \" + scriptLang\n          + \" and script: \\n\" + scriptText);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","sourceNew":null,"sourceOld":"  private void initEngine(Context context) {\n    String scriptText = context.getScript();\n    String scriptLang = context.getScriptLanguage();\n    if (scriptText == null) {\n      throw new DataImportHandlerException(SEVERE,\n          \"<script> tag is not present under <dataConfig>\");\n    }\n    ScriptEngineManager scriptEngineMgr = new ScriptEngineManager();\n    ScriptEngine scriptEngine = scriptEngineMgr.getEngineByName(scriptLang);\n    if (scriptEngine == null) {\n      throw new DataImportHandlerException(SEVERE,\n          \"Cannot load Script Engine for language: \" + scriptLang);\n    }\n    if (scriptEngine instanceof Invocable) {\n      engine = (Invocable) scriptEngine;\n    } else {\n      throw new DataImportHandlerException(SEVERE,\n          \"The installed ScriptEngine for: \" + scriptLang\n              + \" does not implement Invocable.  Class is \"\n              + scriptEngine.getClass().getName());\n    }\n    try {\n      try {\n        AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n          @Override\n          public Void run() throws ScriptException  {\n            scriptEngine.eval(scriptText);\n            return null;\n          }\n        }, SCRIPT_SANDBOX);\n      } catch (PrivilegedActionException e) {\n        throw (ScriptException) e.getException();\n      }\n    } catch (ScriptException e) {\n      wrapAndThrow(SEVERE, e, \"'eval' failed with language: \" + scriptLang\n          + \" and script: \\n\" + scriptText);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["f6d0c28263a15e6a013d6643c3b6e389fd45a6c2"],"e807e4d4ca57192ae0501a38771e721c7a31e34c":["c26f00b574427b55127e869b935845554afde1fa"],"21970a18a53245a65302f031a590db9d78d08b4c":["aae2a73c5ef2043e514f991fa7e95acc6f856ecb","f6d0c28263a15e6a013d6643c3b6e389fd45a6c2"],"aae2a73c5ef2043e514f991fa7e95acc6f856ecb":["e807e4d4ca57192ae0501a38771e721c7a31e34c"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6d0c28263a15e6a013d6643c3b6e389fd45a6c2":["aae2a73c5ef2043e514f991fa7e95acc6f856ecb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e807e4d4ca57192ae0501a38771e721c7a31e34c":["aae2a73c5ef2043e514f991fa7e95acc6f856ecb"],"21970a18a53245a65302f031a590db9d78d08b4c":[],"aae2a73c5ef2043e514f991fa7e95acc6f856ecb":["21970a18a53245a65302f031a590db9d78d08b4c","f6d0c28263a15e6a013d6643c3b6e389fd45a6c2"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["e807e4d4ca57192ae0501a38771e721c7a31e34c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"f6d0c28263a15e6a013d6643c3b6e389fd45a6c2":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","21970a18a53245a65302f031a590db9d78d08b4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21970a18a53245a65302f031a590db9d78d08b4c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}