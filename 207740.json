{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatrix().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatrix().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMatrix().mjava","sourceNew":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setColumnLabels(matrix(array(1, 2, 3), \" +\n        \"                                        rev(array(4,5,6))),\" +\n        \"                                        array(col1, col2, col3)),\" +\n        \"               b=rowAt(a, 1),\" +\n        \"               c=colAt(a, 2),\" +\n        \"               d=getColumnLabels(a),\" +\n        \"               e=topFeatures(a, 1),\" +\n        \"               f=rowCount(a),\" +\n        \"               g=columnCount(a),\" +\n        \"               h=indexOf(d, \\\"col2\\\"),\" +\n        \"               i=indexOf(d, col3))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> row = (List<Number>)tuples.get(0).get(\"b\");\n\n    assertEquals(row.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> col = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(col.size(), 2);\n    assertEquals(col.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(col.get(1).doubleValue(), 4.0, 0.0);\n\n    List<String> colLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(colLabels.size(), 3);\n    assertEquals(colLabels.get(0), \"col1\");\n    assertEquals(colLabels.get(1), \"col2\");\n    assertEquals(colLabels.get(2), \"col3\");\n\n    List<List<String>> features  = (List<List<String>>)tuples.get(0).get(\"e\");\n    assertEquals(features.size(), 2);\n    assertEquals(features.get(0).size(), 1);\n    assertEquals(features.get(1).size(), 1);\n    assertEquals(features.get(0).get(0), \"col3\");\n    assertEquals(features.get(1).get(0), \"col1\");\n\n    assertTrue(tuples.get(0).getLong(\"f\") == 2);\n    assertTrue(tuples.get(0).getLong(\"g\")== 3);\n    assertTrue(tuples.get(0).getLong(\"h\")== 1);\n    assertTrue(tuples.get(0).getLong(\"i\")== 2);\n  }\n\n","sourceOld":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setColumnLabels(matrix(array(1, 2, 3), \" +\n        \"                                        rev(array(4,5,6))),\" +\n        \"                                        array(col1, col2, col3)),\" +\n        \"               b=rowAt(a, 1),\" +\n        \"               c=colAt(a, 2),\" +\n        \"               d=getColumnLabels(a),\" +\n        \"               e=topFeatures(a, 1),\" +\n        \"               f=rowCount(a),\" +\n        \"               g=columnCount(a),\" +\n        \"               h=indexOf(d, \\\"col2\\\"),\" +\n        \"               i=indexOf(d, col3))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> row = (List<Number>)tuples.get(0).get(\"b\");\n\n    assertEquals(row.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> col = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(col.size(), 2);\n    assertEquals(col.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(col.get(1).doubleValue(), 4.0, 0.0);\n\n    List<String> colLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(colLabels.size(), 3);\n    assertEquals(colLabels.get(0), \"col1\");\n    assertEquals(colLabels.get(1), \"col2\");\n    assertEquals(colLabels.get(2), \"col3\");\n\n    List<List<String>> features  = (List<List<String>>)tuples.get(0).get(\"e\");\n    assertEquals(features.size(), 2);\n    assertEquals(features.get(0).size(), 1);\n    assertEquals(features.get(1).size(), 1);\n    assertEquals(features.get(0).get(0), \"col3\");\n    assertEquals(features.get(1).get(0), \"col1\");\n\n    assertTrue(tuples.get(0).getLong(\"f\") == 2);\n    assertTrue(tuples.get(0).getLong(\"g\")== 3);\n    assertTrue(tuples.get(0).getLong(\"h\")== 1);\n    assertTrue(tuples.get(0).getLong(\"i\")== 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35cc45f54fe95a5534e02f9b8ca2a54af211ded5","date":1564774706,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatrix().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatrix().mjava","sourceNew":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setColumnLabels(matrix(array(1, 2, 3), \" +\n        \"                                        rev(array(4,5,6))),\" +\n        \"                                        array(\\\"col1\\\", \\\"col2\\\", \\\"col3\\\")),\" +\n        \"               b=rowAt(a, 1),\" +\n        \"               c=colAt(a, 2),\" +\n        \"               d=getColumnLabels(a),\" +\n        \"               e=topFeatures(a, 1),\" +\n        \"               f=rowCount(a),\" +\n        \"               g=columnCount(a),\" +\n        \"               h=indexOf(d, \\\"col2\\\"),\" +\n        \"               i=indexOf(d, \\\"col3\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> row = (List<Number>)tuples.get(0).get(\"b\");\n\n    assertEquals(row.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> col = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(col.size(), 2);\n    assertEquals(col.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(col.get(1).doubleValue(), 4.0, 0.0);\n\n    List<String> colLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(colLabels.size(), 3);\n    assertEquals(colLabels.get(0), \"col1\");\n    assertEquals(colLabels.get(1), \"col2\");\n    assertEquals(colLabels.get(2), \"col3\");\n\n    List<List<String>> features  = (List<List<String>>)tuples.get(0).get(\"e\");\n    assertEquals(features.size(), 2);\n    assertEquals(features.get(0).size(), 1);\n    assertEquals(features.get(1).size(), 1);\n    assertEquals(features.get(0).get(0), \"col3\");\n    assertEquals(features.get(1).get(0), \"col1\");\n\n    assertTrue(tuples.get(0).getLong(\"f\") == 2);\n    assertTrue(tuples.get(0).getLong(\"g\")== 3);\n    assertTrue(tuples.get(0).getLong(\"h\")== 1);\n    assertTrue(tuples.get(0).getLong(\"i\")== 2);\n  }\n\n","sourceOld":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setColumnLabels(matrix(array(1, 2, 3), \" +\n        \"                                        rev(array(4,5,6))),\" +\n        \"                                        array(col1, col2, col3)),\" +\n        \"               b=rowAt(a, 1),\" +\n        \"               c=colAt(a, 2),\" +\n        \"               d=getColumnLabels(a),\" +\n        \"               e=topFeatures(a, 1),\" +\n        \"               f=rowCount(a),\" +\n        \"               g=columnCount(a),\" +\n        \"               h=indexOf(d, \\\"col2\\\"),\" +\n        \"               i=indexOf(d, col3))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> row = (List<Number>)tuples.get(0).get(\"b\");\n\n    assertEquals(row.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> col = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(col.size(), 2);\n    assertEquals(col.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(col.get(1).doubleValue(), 4.0, 0.0);\n\n    List<String> colLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(colLabels.size(), 3);\n    assertEquals(colLabels.get(0), \"col1\");\n    assertEquals(colLabels.get(1), \"col2\");\n    assertEquals(colLabels.get(2), \"col3\");\n\n    List<List<String>> features  = (List<List<String>>)tuples.get(0).get(\"e\");\n    assertEquals(features.size(), 2);\n    assertEquals(features.get(0).size(), 1);\n    assertEquals(features.get(1).size(), 1);\n    assertEquals(features.get(0).get(0), \"col3\");\n    assertEquals(features.get(1).get(0), \"col1\");\n\n    assertTrue(tuples.get(0).getLong(\"f\") == 2);\n    assertTrue(tuples.get(0).getLong(\"g\")== 3);\n    assertTrue(tuples.get(0).getLong(\"h\")== 1);\n    assertTrue(tuples.get(0).getLong(\"i\")== 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatrix().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatrix().mjava","sourceNew":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setColumnLabels(matrix(array(1, 2, 3), \" +\n        \"                                        rev(array(4,5,6))),\" +\n        \"                                        array(\\\"col1\\\", \\\"col2\\\", \\\"col3\\\")),\" +\n        \"               b=rowAt(a, 1),\" +\n        \"               c=colAt(a, 2),\" +\n        \"               d=getColumnLabels(a),\" +\n        \"               e=topFeatures(a, 1),\" +\n        \"               f=rowCount(a),\" +\n        \"               g=columnCount(a),\" +\n        \"               h=indexOf(d, \\\"col2\\\"),\" +\n        \"               i=indexOf(d, \\\"col3\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> row = (List<Number>)tuples.get(0).get(\"b\");\n\n    assertEquals(row.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> col = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(col.size(), 2);\n    assertEquals(col.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(col.get(1).doubleValue(), 4.0, 0.0);\n\n    List<String> colLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(colLabels.size(), 3);\n    assertEquals(colLabels.get(0), \"col1\");\n    assertEquals(colLabels.get(1), \"col2\");\n    assertEquals(colLabels.get(2), \"col3\");\n\n    List<List<String>> features  = (List<List<String>>)tuples.get(0).get(\"e\");\n    assertEquals(features.size(), 2);\n    assertEquals(features.get(0).size(), 1);\n    assertEquals(features.get(1).size(), 1);\n    assertEquals(features.get(0).get(0), \"col3\");\n    assertEquals(features.get(1).get(0), \"col1\");\n\n    assertTrue(tuples.get(0).getLong(\"f\") == 2);\n    assertTrue(tuples.get(0).getLong(\"g\")== 3);\n    assertTrue(tuples.get(0).getLong(\"h\")== 1);\n    assertTrue(tuples.get(0).getLong(\"i\")== 2);\n  }\n\n","sourceOld":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setColumnLabels(matrix(array(1, 2, 3), \" +\n        \"                                        rev(array(4,5,6))),\" +\n        \"                                        array(col1, col2, col3)),\" +\n        \"               b=rowAt(a, 1),\" +\n        \"               c=colAt(a, 2),\" +\n        \"               d=getColumnLabels(a),\" +\n        \"               e=topFeatures(a, 1),\" +\n        \"               f=rowCount(a),\" +\n        \"               g=columnCount(a),\" +\n        \"               h=indexOf(d, \\\"col2\\\"),\" +\n        \"               i=indexOf(d, col3))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> row = (List<Number>)tuples.get(0).get(\"b\");\n\n    assertEquals(row.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> col = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(col.size(), 2);\n    assertEquals(col.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(col.get(1).doubleValue(), 4.0, 0.0);\n\n    List<String> colLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(colLabels.size(), 3);\n    assertEquals(colLabels.get(0), \"col1\");\n    assertEquals(colLabels.get(1), \"col2\");\n    assertEquals(colLabels.get(2), \"col3\");\n\n    List<List<String>> features  = (List<List<String>>)tuples.get(0).get(\"e\");\n    assertEquals(features.size(), 2);\n    assertEquals(features.get(0).size(), 1);\n    assertEquals(features.get(1).size(), 1);\n    assertEquals(features.get(0).get(0), \"col3\");\n    assertEquals(features.get(1).get(0), \"col1\");\n\n    assertTrue(tuples.get(0).getLong(\"f\") == 2);\n    assertTrue(tuples.get(0).getLong(\"g\")== 3);\n    assertTrue(tuples.get(0).getLong(\"h\")== 1);\n    assertTrue(tuples.get(0).getLong(\"i\")== 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatrix().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatrix().mjava","sourceNew":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setColumnLabels(matrix(array(1, 2, 3), \" +\n        \"                                        rev(array(4,5,6))),\" +\n        \"                                        array(\\\"col1\\\", \\\"col2\\\", \\\"col3\\\")),\" +\n        \"               b=rowAt(a, 1),\" +\n        \"               c=colAt(a, 2),\" +\n        \"               d=getColumnLabels(a),\" +\n        \"               e=topFeatures(a, 1),\" +\n        \"               f=rowCount(a),\" +\n        \"               g=columnCount(a),\" +\n        \"               h=indexOf(d, \\\"col2\\\"),\" +\n        \"               i=indexOf(d, \\\"col3\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> row = (List<Number>)tuples.get(0).get(\"b\");\n\n    assertEquals(row.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> col = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(col.size(), 2);\n    assertEquals(col.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(col.get(1).doubleValue(), 4.0, 0.0);\n\n    List<String> colLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(colLabels.size(), 3);\n    assertEquals(colLabels.get(0), \"col1\");\n    assertEquals(colLabels.get(1), \"col2\");\n    assertEquals(colLabels.get(2), \"col3\");\n\n    List<List<String>> features  = (List<List<String>>)tuples.get(0).get(\"e\");\n    assertEquals(features.size(), 2);\n    assertEquals(features.get(0).size(), 1);\n    assertEquals(features.get(1).size(), 1);\n    assertEquals(features.get(0).get(0), \"col3\");\n    assertEquals(features.get(1).get(0), \"col1\");\n\n    assertTrue(tuples.get(0).getLong(\"f\") == 2);\n    assertTrue(tuples.get(0).getLong(\"g\")== 3);\n    assertTrue(tuples.get(0).getLong(\"h\")== 1);\n    assertTrue(tuples.get(0).getLong(\"i\")== 2);\n  }\n\n","sourceOld":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setColumnLabels(matrix(array(1, 2, 3), \" +\n        \"                                        rev(array(4,5,6))),\" +\n        \"                                        array(col1, col2, col3)),\" +\n        \"               b=rowAt(a, 1),\" +\n        \"               c=colAt(a, 2),\" +\n        \"               d=getColumnLabels(a),\" +\n        \"               e=topFeatures(a, 1),\" +\n        \"               f=rowCount(a),\" +\n        \"               g=columnCount(a),\" +\n        \"               h=indexOf(d, \\\"col2\\\"),\" +\n        \"               i=indexOf(d, col3))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> row = (List<Number>)tuples.get(0).get(\"b\");\n\n    assertEquals(row.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> col = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(col.size(), 2);\n    assertEquals(col.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(col.get(1).doubleValue(), 4.0, 0.0);\n\n    List<String> colLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(colLabels.size(), 3);\n    assertEquals(colLabels.get(0), \"col1\");\n    assertEquals(colLabels.get(1), \"col2\");\n    assertEquals(colLabels.get(2), \"col3\");\n\n    List<List<String>> features  = (List<List<String>>)tuples.get(0).get(\"e\");\n    assertEquals(features.size(), 2);\n    assertEquals(features.get(0).size(), 1);\n    assertEquals(features.get(1).size(), 1);\n    assertEquals(features.get(0).get(0), \"col3\");\n    assertEquals(features.get(1).get(0), \"col1\");\n\n    assertTrue(tuples.get(0).getLong(\"f\") == 2);\n    assertTrue(tuples.get(0).getLong(\"g\")== 3);\n    assertTrue(tuples.get(0).getLong(\"h\")== 1);\n    assertTrue(tuples.get(0).getLong(\"i\")== 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatrix().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatrix().mjava","sourceNew":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setColumnLabels(matrix(array(1, 2, 3), \" +\n        \"                                        rev(array(4,5,6))),\" +\n        \"                                        array(\\\"col1\\\", \\\"col2\\\", \\\"col3\\\")),\" +\n        \"               b=rowAt(a, 1),\" +\n        \"               c=colAt(a, 2),\" +\n        \"               d=getColumnLabels(a),\" +\n        \"               e=topFeatures(a, 1),\" +\n        \"               f=rowCount(a),\" +\n        \"               g=columnCount(a),\" +\n        \"               h=indexOf(d, \\\"col2\\\"),\" +\n        \"               i=indexOf(d, \\\"col3\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> row = (List<Number>)tuples.get(0).get(\"b\");\n\n    assertEquals(row.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> col = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(col.size(), 2);\n    assertEquals(col.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(col.get(1).doubleValue(), 4.0, 0.0);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<String> colLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(colLabels.size(), 3);\n    assertEquals(colLabels.get(0), \"col1\");\n    assertEquals(colLabels.get(1), \"col2\");\n    assertEquals(colLabels.get(2), \"col3\");\n\n    @SuppressWarnings({\"unchecked\"})\n    List<List<String>> features  = (List<List<String>>)tuples.get(0).get(\"e\");\n    assertEquals(features.size(), 2);\n    assertEquals(features.get(0).size(), 1);\n    assertEquals(features.get(1).size(), 1);\n    assertEquals(features.get(0).get(0), \"col3\");\n    assertEquals(features.get(1).get(0), \"col1\");\n\n    assertTrue(tuples.get(0).getLong(\"f\") == 2);\n    assertTrue(tuples.get(0).getLong(\"g\")== 3);\n    assertTrue(tuples.get(0).getLong(\"h\")== 1);\n    assertTrue(tuples.get(0).getLong(\"i\")== 2);\n  }\n\n","sourceOld":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setColumnLabels(matrix(array(1, 2, 3), \" +\n        \"                                        rev(array(4,5,6))),\" +\n        \"                                        array(\\\"col1\\\", \\\"col2\\\", \\\"col3\\\")),\" +\n        \"               b=rowAt(a, 1),\" +\n        \"               c=colAt(a, 2),\" +\n        \"               d=getColumnLabels(a),\" +\n        \"               e=topFeatures(a, 1),\" +\n        \"               f=rowCount(a),\" +\n        \"               g=columnCount(a),\" +\n        \"               h=indexOf(d, \\\"col2\\\"),\" +\n        \"               i=indexOf(d, \\\"col3\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> row = (List<Number>)tuples.get(0).get(\"b\");\n\n    assertEquals(row.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> col = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(col.size(), 2);\n    assertEquals(col.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(col.get(1).doubleValue(), 4.0, 0.0);\n\n    List<String> colLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(colLabels.size(), 3);\n    assertEquals(colLabels.get(0), \"col1\");\n    assertEquals(colLabels.get(1), \"col2\");\n    assertEquals(colLabels.get(2), \"col3\");\n\n    List<List<String>> features  = (List<List<String>>)tuples.get(0).get(\"e\");\n    assertEquals(features.size(), 2);\n    assertEquals(features.get(0).size(), 1);\n    assertEquals(features.get(1).size(), 1);\n    assertEquals(features.get(0).get(0), \"col3\");\n    assertEquals(features.get(1).get(0), \"col1\");\n\n    assertTrue(tuples.get(0).getLong(\"f\") == 2);\n    assertTrue(tuples.get(0).getLong(\"g\")== 3);\n    assertTrue(tuples.get(0).getLong(\"h\")== 1);\n    assertTrue(tuples.get(0).getLong(\"i\")== 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"f8061ddd97f3352007d927dae445884a6f3d857b":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["9ba1b632c041956c93c41aa1143d16a567014891","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","35cc45f54fe95a5534e02f9b8ca2a54af211ded5","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}