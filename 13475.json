{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testSurfaceDistance().mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testSurfaceDistance().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testSurfaceDistance().mjava","sourceNew":"  @Test\n  public void testSurfaceDistance() {\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double p1Lat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p1Lon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p2Lat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p2Lon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final GeoPoint p1 = new GeoPoint(PlanetModel.SPHERE, p1Lat, p1Lon);\n      final GeoPoint p2 = new GeoPoint(PlanetModel.SPHERE, p2Lat, p2Lon);\n      final double arcDistance = p1.arcDistance(p2);\n      // Compute ellipsoid distance; it should agree for a sphere\n      final double surfaceDistance = PlanetModel.SPHERE.surfaceDistance(p1,p2);\n      assertEquals(arcDistance, surfaceDistance, 1e-6);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSurfaceDistance() {\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double p1Lat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p1Lon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p2Lat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p2Lon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final GeoPoint p1 = new GeoPoint(PlanetModel.SPHERE, p1Lat, p1Lon);\n      final GeoPoint p2 = new GeoPoint(PlanetModel.SPHERE, p2Lat, p2Lon);\n      final double arcDistance = p1.arcDistance(p2);\n      // Compute ellipsoid distance; it should agree for a sphere\n      final double surfaceDistance = PlanetModel.SPHERE.surfaceDistance(p1,p2);\n      assertEquals(arcDistance, surfaceDistance, 1e-6);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testSurfaceDistance().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testSurfaceDistance().mjava","sourceNew":"  @Test\n  public void testSurfaceDistance() {\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double p1Lat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p1Lon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p2Lat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p2Lon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final GeoPoint p1 = new GeoPoint(PlanetModel.SPHERE, p1Lat, p1Lon);\n      final GeoPoint p2 = new GeoPoint(PlanetModel.SPHERE, p2Lat, p2Lon);\n      final double arcDistance = p1.arcDistance(p2);\n      // Compute ellipsoid distance; it should agree for a sphere\n      final double surfaceDistance = PlanetModel.SPHERE.surfaceDistance(p1,p2);\n      assertEquals(arcDistance, surfaceDistance, 1e-6);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSurfaceDistance() {\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double p1Lat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p1Lon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p2Lat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p2Lon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final GeoPoint p1 = new GeoPoint(PlanetModel.SPHERE, p1Lat, p1Lon);\n      final GeoPoint p2 = new GeoPoint(PlanetModel.SPHERE, p2Lat, p2Lon);\n      final double arcDistance = p1.arcDistance(p2);\n      // Compute ellipsoid distance; it should agree for a sphere\n      final double surfaceDistance = PlanetModel.SPHERE.surfaceDistance(p1,p2);\n      assertEquals(arcDistance, surfaceDistance, 1e-6);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPointTest#testSurfaceDistance().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoPointTest#testSurfaceDistance().mjava","sourceNew":"  @Test\n  public void testSurfaceDistance() {\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double p1Lat = (randomFloat() * 180.0 - 90.0) * DEGREES_TO_RADIANS;\n      final double p1Lon = (randomFloat() * 360.0 - 180.0) * DEGREES_TO_RADIANS;\n      final double p2Lat = (randomFloat() * 180.0 - 90.0) * DEGREES_TO_RADIANS;\n      final double p2Lon = (randomFloat() * 360.0 - 180.0) * DEGREES_TO_RADIANS;\n      final GeoPoint p1 = new GeoPoint(PlanetModel.SPHERE, p1Lat, p1Lon);\n      final GeoPoint p2 = new GeoPoint(PlanetModel.SPHERE, p2Lat, p2Lon);\n      final double arcDistance = p1.arcDistance(p2);\n      // Compute ellipsoid distance; it should agree for a sphere\n      final double surfaceDistance = PlanetModel.SPHERE.surfaceDistance(p1,p2);\n      assertEquals(arcDistance, surfaceDistance, 1e-6);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSurfaceDistance() {\n    final int times = atLeast(100);\n    for (int i = 0; i < times; i++) {\n      final double p1Lat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p1Lon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p2Lat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final double p2Lon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n      final GeoPoint p1 = new GeoPoint(PlanetModel.SPHERE, p1Lat, p1Lon);\n      final GeoPoint p2 = new GeoPoint(PlanetModel.SPHERE, p2Lat, p2Lon);\n      final double arcDistance = p1.arcDistance(p2);\n      // Compute ellipsoid distance; it should agree for a sphere\n      final double surfaceDistance = PlanetModel.SPHERE.surfaceDistance(p1,p2);\n      assertEquals(arcDistance, surfaceDistance, 1e-6);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}