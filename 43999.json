{"path":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#fill(int).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#fill(int).mjava","pathOld":"/dev/null","sourceNew":"    // Fills up to but not including this docID\n    private void fill(final int docID) {\n      if (docID >= docToAddress.length) {\n        int oldSize = docToAddress.length;\n        docToAddress = ArrayUtil.grow(docToAddress, 1 + docID);\n        bytesUsed.addAndGet(-(docToAddress.length-oldSize)*RamUsageEstimator.NUM_BYTES_INT);\n      }\n      for (int i = lastDocID + 1; i < docID; i++) {\n        docToAddress[i] = address;\n      }\n      lastDocID = docID;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca","date":1289932456,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#fill(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#fill(int).mjava","sourceNew":"    // Fills up to but not including this docID\n    private void fill(final int docID) {\n      if (docID >= docToAddress.length) {\n        int oldSize = docToAddress.length;\n        docToAddress = ArrayUtil.grow(docToAddress, 1 + docID);\n        bytesUsed.addAndGet(-(docToAddress.length - oldSize)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      for (int i = lastDocID + 1; i < docID; i++) {\n        docToAddress[i] = address;\n      }\n      lastDocID = docID;\n    }\n\n","sourceOld":"    // Fills up to but not including this docID\n    private void fill(final int docID) {\n      if (docID >= docToAddress.length) {\n        int oldSize = docToAddress.length;\n        docToAddress = ArrayUtil.grow(docToAddress, 1 + docID);\n        bytesUsed.addAndGet(-(docToAddress.length-oldSize)*RamUsageEstimator.NUM_BYTES_INT);\n      }\n      for (int i = lastDocID + 1; i < docID; i++) {\n        docToAddress[i] = address;\n      }\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","date":1291128345,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#fill(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#fill(int).mjava","sourceNew":"    // Fills up to but not including this docID\n    private void fill(final int docID) {\n      if (docID >= docToAddress.length) {\n        int oldSize = docToAddress.length;\n        docToAddress = ArrayUtil.grow(docToAddress, 1 + docID);\n        bytesUsed.addAndGet((docToAddress.length - oldSize)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      for (int i = lastDocID + 1; i < docID; i++) {\n        docToAddress[i] = address;\n      }\n      lastDocID = docID;\n    }\n\n","sourceOld":"    // Fills up to but not including this docID\n    private void fill(final int docID) {\n      if (docID >= docToAddress.length) {\n        int oldSize = docToAddress.length;\n        docToAddress = ArrayUtil.grow(docToAddress, 1 + docID);\n        bytesUsed.addAndGet(-(docToAddress.length - oldSize)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      for (int i = lastDocID + 1; i < docID; i++) {\n        docToAddress[i] = address;\n      }\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#fill(int).mjava","pathOld":"/dev/null","sourceNew":"    // Fills up to but not including this docID\n    private void fill(final int docID) {\n      if (docID >= docToAddress.length) {\n        int oldSize = docToAddress.length;\n        docToAddress = ArrayUtil.grow(docToAddress, 1 + docID);\n        bytesUsed.addAndGet((docToAddress.length - oldSize)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      for (int i = lastDocID + 1; i < docID; i++) {\n        docToAddress[i] = address;\n      }\n      lastDocID = docID;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#fill(int).mjava","pathOld":"/dev/null","sourceNew":"    // Fills up to but not including this docID\n    private void fill(final int docID) {\n      if (docID >= docToAddress.length) {\n        int oldSize = docToAddress.length;\n        docToAddress = ArrayUtil.grow(docToAddress, 1 + docID);\n        bytesUsed.addAndGet((docToAddress.length - oldSize)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      for (int i = lastDocID + 1; i < docID; i++) {\n        docToAddress[i] = address;\n      }\n      lastDocID = docID;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b7a068f550e13e49517c6899cc3b94c8eeb72e5","date":1309354772,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#fill(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#fill(int).mjava","sourceNew":"    // Fills up to but not including this docID\n    private void fill(final int docID) {\n      if (docID >= docToAddress.length) {\n        int oldSize = docToAddress.length;\n        docToAddress = ArrayUtil.grow(docToAddress, 1 + docID);\n        bytesUsed.addAndGet((docToAddress.length - oldSize)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      for (int i = lastDocID + 1; i < docID; i++) {\n        docToAddress[i] = address;\n      }\n    }\n\n","sourceOld":"    // Fills up to but not including this docID\n    private void fill(final int docID) {\n      if (docID >= docToAddress.length) {\n        int oldSize = docToAddress.length;\n        docToAddress = ArrayUtil.grow(docToAddress, 1 + docID);\n        bytesUsed.addAndGet((docToAddress.length - oldSize)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      for (int i = lastDocID + 1; i < docID; i++) {\n        docToAddress[i] = address;\n      }\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#fill(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#fill(int).mjava","sourceNew":"    // Fills up to but not including this docID\n    private void fill(final int docID) {\n      if (docID >= docToAddress.length) {\n        int oldSize = docToAddress.length;\n        docToAddress = ArrayUtil.grow(docToAddress, 1 + docID);\n        bytesUsed.addAndGet((docToAddress.length - oldSize)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      for (int i = lastDocID + 1; i < docID; i++) {\n        docToAddress[i] = address;\n      }\n    }\n\n","sourceOld":"    // Fills up to but not including this docID\n    private void fill(final int docID) {\n      if (docID >= docToAddress.length) {\n        int oldSize = docToAddress.length;\n        docToAddress = ArrayUtil.grow(docToAddress, 1 + docID);\n        bytesUsed.addAndGet((docToAddress.length - oldSize)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      for (int i = lastDocID + 1; i < docID; i++) {\n        docToAddress[i] = address;\n      }\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#fill(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#fill(int).mjava","sourceNew":"    // Fills up to but not including this docID\n    private void fill(final int docID) {\n      if (docID >= docToAddress.length) {\n        int oldSize = docToAddress.length;\n        docToAddress = ArrayUtil.grow(docToAddress, 1 + docID);\n        bytesUsed.addAndGet((docToAddress.length - oldSize)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      for (int i = lastDocID + 1; i < docID; i++) {\n        docToAddress[i] = address;\n      }\n    }\n\n","sourceOld":"    // Fills up to but not including this docID\n    private void fill(final int docID) {\n      if (docID >= docToAddress.length) {\n        int oldSize = docToAddress.length;\n        docToAddress = ArrayUtil.grow(docToAddress, 1 + docID);\n        bytesUsed.addAndGet((docToAddress.length - oldSize)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      for (int i = lastDocID + 1; i < docID; i++) {\n        docToAddress[i] = address;\n      }\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#fill(int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#fill(int).mjava","sourceNew":"    // Fills up to but not including this docID\n    private void fill(final int docID, final long nextAddress) {\n      if (docID >= docToAddress.length) {\n        int oldSize = docToAddress.length;\n        docToAddress = ArrayUtil.grow(docToAddress, 1 + docID);\n        bytesUsed.addAndGet((docToAddress.length - oldSize)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      for (int i = lastDocID + 1; i < docID; i++) {\n        docToAddress[i] = nextAddress;\n      }\n    }\n\n","sourceOld":"    // Fills up to but not including this docID\n    private void fill(final int docID) {\n      if (docID >= docToAddress.length) {\n        int oldSize = docToAddress.length;\n        docToAddress = ArrayUtil.grow(docToAddress, 1 + docID);\n        bytesUsed.addAndGet((docToAddress.length - oldSize)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      for (int i = lastDocID + 1; i < docID; i++) {\n        docToAddress[i] = address;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["3ae97ad22c2ae646bfc1c09cab424cb07f9474ca"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e128967bca58657bc0039d4bfe631e63e81f1977":["3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e128967bca58657bc0039d4bfe631e63e81f1977"]},"commit2Childs":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3b7a068f550e13e49517c6899cc3b94c8eeb72e5","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["e128967bca58657bc0039d4bfe631e63e81f1977","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"e128967bca58657bc0039d4bfe631e63e81f1977":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["3ae97ad22c2ae646bfc1c09cab424cb07f9474ca"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}