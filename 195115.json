{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58b927ebb36b8784b0b3f719b1ef2752336a2e77","date":1341499263,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes(\"UTF-8\")));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes(\"UTF-8\")));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes(\"UTF-8\")));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes(\"UTF-8\")));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      @Override\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      @Override\n      public float getTokenScore() {\n        return 0;\n      }\n\n      @Override\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      @Override\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes(\"UTF-8\")));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes(\"UTF-8\")));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      @Override\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      @Override\n      public float getTokenScore() {\n        return 0;\n      }\n\n      @Override\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      @Override\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes(\"UTF-8\")));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes(\"UTF-8\")));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      @Override\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      @Override\n      public float getTokenScore() {\n        return 0;\n      }\n\n      @Override\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      @Override\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, rawDocContent);\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes(\"UTF-8\")));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      @Override\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      @Override\n      public float getTokenScore() {\n        return 0;\n      }\n\n      @Override\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      @Override\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes(\"UTF-8\")));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      @Override\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      @Override\n      public float getTokenScore() {\n        return 0;\n      }\n\n      @Override\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      @Override\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, rawDocContent);\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes(\"UTF-8\")));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      @Override\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      @Override\n      public float getTokenScore() {\n        return 0;\n      }\n\n      @Override\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      @Override\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes(\"UTF-8\")));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      @Override\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      @Override\n      public float getTokenScore() {\n        return 0;\n      }\n\n      @Override\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      @Override\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, rawDocContent);\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes(StandardCharsets.UTF_8)));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      @Override\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      @Override\n      public float getTokenScore() {\n        return 0;\n      }\n\n      @Override\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      @Override\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, rawDocContent);\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes(\"UTF-8\")));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      @Override\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      @Override\n      public float getTokenScore() {\n        return 0;\n      }\n\n      @Override\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      @Override\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, rawDocContent);\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes(StandardCharsets.UTF_8)));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      @Override\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      @Override\n      public float getTokenScore() {\n        return 0;\n      }\n\n      @Override\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      @Override\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, rawDocContent);\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes(\"UTF-8\")));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["58b927ebb36b8784b0b3f719b1ef2752336a2e77"],"5eb2511ababf862ea11e10761c70ee560cd84510":["c83d6c4335f31cae14f625a222bc842f20073dcd","7d89d7e4e5101347833eea558851bf4209218619"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","7530de27b87b961b51f01bd1299b7004d46e8823"],"58b927ebb36b8784b0b3f719b1ef2752336a2e77":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["7530de27b87b961b51f01bd1299b7004d46e8823","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["7530de27b87b961b51f01bd1299b7004d46e8823"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","58b927ebb36b8784b0b3f719b1ef2752336a2e77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d89d7e4e5101347833eea558851bf4209218619":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d89d7e4e5101347833eea558851bf4209218619"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"58b927ebb36b8784b0b3f719b1ef2752336a2e77":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["58b927ebb36b8784b0b3f719b1ef2752336a2e77","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","7d89d7e4e5101347833eea558851bf4209218619"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}