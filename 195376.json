{"path":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","sourceNew":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    expectThrows(IllegalStateException.class, () -> {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n    });\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    expectThrows(IllegalStateException.class, () -> {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n    });\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","sourceNew":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    expectThrows(IllegalStateException.class, () -> {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n    });\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    expectThrows(IllegalStateException.class, () -> {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n    });\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","sourceNew":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    expectThrows(IllegalStateException.class, () -> {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n    });\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    expectThrows(IllegalStateException.class, () -> {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n    });\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMultiValuedField().mjava","sourceNew":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    expectThrows(IllegalStateException.class, () -> {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n    });\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /** test that we throw exception on multi-valued field, creates corrupt reader, use SORTED_SET instead */\n  public void testMultiValuedField() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add(new StringField(\"string\", \"a\"+i, Field.Store.NO));\n        doc.add(new StringField(\"string\", \"b\"+i, Field.Store.NO));\n        writer.addDocument(doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    Sort sort = new Sort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC);\n    IndexReader reader = UninvertingReader.wrap(DirectoryReader.open(indexStore),\n                         Collections.singletonMap(\"string\", Type.SORTED));\n    IndexSearcher searcher = new IndexSearcher(reader);\n    expectThrows(IllegalStateException.class, () -> {\n      searcher.search(new MatchAllDocsQuery(), 500, sort);\n    });\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}