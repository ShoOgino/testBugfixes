{"path":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap().mjava","commits":[{"id":"9ac1922a6e5b4d1ec298c612640d012484d4e022","date":1461304949,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap().mjava","pathOld":"/dev/null","sourceNew":"  public Map<String,T> asShallowMap() {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        NamedList.this.add(key, value);\n        return  null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      public void putAll(Map m) {\n        NamedList.this.addAll(m);\n\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32c94eeb61edc7099a6ce0cb3cf3aa037a0b6d53","date":1474025935,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap().mjava","sourceNew":"  public Map<String,T> asShallowMap() {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        int idx = NamedList.this.indexOf(key, 0);\n        if (idx == -1) {\n          NamedList.this.add(key, value);\n        } else {\n          NamedList.this.setVal(idx, value);\n        }\n        return  null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      public void putAll(Map m) {\n        for (Object o : m.entrySet()) {\n          Map.Entry e = (Entry) o;\n          put(e.getKey() == null ? null : e.getKey().toString(), (T) e.getValue());\n        }\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n    };\n  }\n\n","sourceOld":"  public Map<String,T> asShallowMap() {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        NamedList.this.add(key, value);\n        return  null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      public void putAll(Map m) {\n        NamedList.this.addAll(m);\n\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f1f31880696765d6aec499d3b01fa501129af45","date":1474287317,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap().mjava","sourceNew":"  public Map<String,T> asShallowMap() {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        int idx = NamedList.this.indexOf(key, 0);\n        if (idx == -1) {\n          NamedList.this.add(key, value);\n        } else {\n          NamedList.this.setVal(idx, value);\n        }\n        return  null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      public void putAll(Map m) {\n        boolean isEmpty = isEmpty();\n        for (Object o : m.entrySet()) {\n          Map.Entry e = (Entry) o;\n          if (isEmpty) {// we know that there are no duplicates\n            add((String) e.getKey(), (T) e.getValue());\n          } else {\n            put(e.getKey() == null ? null : e.getKey().toString(), (T) e.getValue());\n          }\n        }\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n    };\n  }\n\n","sourceOld":"  public Map<String,T> asShallowMap() {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        int idx = NamedList.this.indexOf(key, 0);\n        if (idx == -1) {\n          NamedList.this.add(key, value);\n        } else {\n          NamedList.this.setVal(idx, value);\n        }\n        return  null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      public void putAll(Map m) {\n        for (Object o : m.entrySet()) {\n          Map.Entry e = (Entry) o;\n          put(e.getKey() == null ? null : e.getKey().toString(), (T) e.getValue());\n        }\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e8661269ebb23269662a2826882f11611e91d5a","date":1475042403,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap().mjava","sourceNew":"  public Map<String,T> asShallowMap() {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        int idx = NamedList.this.indexOf(key, 0);\n        if (idx == -1) {\n          NamedList.this.add(key, value);\n        } else {\n          NamedList.this.setVal(idx, value);\n        }\n        return  null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      public void putAll(Map m) {\n        boolean isEmpty = isEmpty();\n        for (Object o : m.entrySet()) {\n          Map.Entry e = (Entry) o;\n          if (isEmpty) {// we know that there are no duplicates\n            add((String) e.getKey(), (T) e.getValue());\n          } else {\n            put(e.getKey() == null ? null : e.getKey().toString(), (T) e.getValue());\n          }\n        }\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n\n      @Override\n      public void forEach(BiConsumer action) {\n        NamedList.this.forEach(action);\n      }\n    };\n  }\n\n","sourceOld":"  public Map<String,T> asShallowMap() {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        int idx = NamedList.this.indexOf(key, 0);\n        if (idx == -1) {\n          NamedList.this.add(key, value);\n        } else {\n          NamedList.this.setVal(idx, value);\n        }\n        return  null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      public void putAll(Map m) {\n        boolean isEmpty = isEmpty();\n        for (Object o : m.entrySet()) {\n          Map.Entry e = (Entry) o;\n          if (isEmpty) {// we know that there are no duplicates\n            add((String) e.getKey(), (T) e.getValue());\n          } else {\n            put(e.getKey() == null ? null : e.getKey().toString(), (T) e.getValue());\n          }\n        }\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap().mjava","sourceNew":"  public Map<String,T> asShallowMap() {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        int idx = NamedList.this.indexOf(key, 0);\n        if (idx == -1) {\n          NamedList.this.add(key, value);\n        } else {\n          NamedList.this.setVal(idx, value);\n        }\n        return  null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      public void putAll(Map m) {\n        boolean isEmpty = isEmpty();\n        for (Object o : m.entrySet()) {\n          Map.Entry e = (Entry) o;\n          if (isEmpty) {// we know that there are no duplicates\n            add((String) e.getKey(), (T) e.getValue());\n          } else {\n            put(e.getKey() == null ? null : e.getKey().toString(), (T) e.getValue());\n          }\n        }\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n\n      @Override\n      public void forEach(BiConsumer action) {\n        NamedList.this.forEach(action);\n      }\n    };\n  }\n\n","sourceOld":"  public Map<String,T> asShallowMap() {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        NamedList.this.add(key, value);\n        return  null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      public void putAll(Map m) {\n        NamedList.this.addAll(m);\n\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap().mjava","sourceNew":"  public Map<String,T> asShallowMap() {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        int idx = NamedList.this.indexOf(key, 0);\n        if (idx == -1) {\n          NamedList.this.add(key, value);\n        } else {\n          NamedList.this.setVal(idx, value);\n        }\n        return  null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      public void putAll(Map m) {\n        boolean isEmpty = isEmpty();\n        for (Object o : m.entrySet()) {\n          Map.Entry e = (Entry) o;\n          if (isEmpty) {// we know that there are no duplicates\n            add((String) e.getKey(), (T) e.getValue());\n          } else {\n            put(e.getKey() == null ? null : e.getKey().toString(), (T) e.getValue());\n          }\n        }\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n\n      @Override\n      public void forEach(BiConsumer action) {\n        NamedList.this.forEach(action);\n      }\n    };\n  }\n\n","sourceOld":"  public Map<String,T> asShallowMap() {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        NamedList.this.add(key, value);\n        return  null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      public void putAll(Map m) {\n        NamedList.this.addAll(m);\n\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"074c4e385ea7c9ae29556e95c886ea0ccc614029","date":1571011658,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap().mjava","sourceNew":"  public Map<String,T> asShallowMap() {\n    return asShallowMap(false);\n  }\n\n","sourceOld":"  public Map<String,T> asShallowMap() {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        int idx = NamedList.this.indexOf(key, 0);\n        if (idx == -1) {\n          NamedList.this.add(key, value);\n        } else {\n          NamedList.this.setVal(idx, value);\n        }\n        return  null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      public void putAll(Map m) {\n        boolean isEmpty = isEmpty();\n        for (Object o : m.entrySet()) {\n          Map.Entry e = (Entry) o;\n          if (isEmpty) {// we know that there are no duplicates\n            add((String) e.getKey(), (T) e.getValue());\n          } else {\n            put(e.getKey() == null ? null : e.getKey().toString(), (T) e.getValue());\n          }\n        }\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n\n      @Override\n      public void forEach(BiConsumer action) {\n        NamedList.this.forEach(action);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#asShallowMap().mjava","sourceNew":"  public Map<String,T> asShallowMap() {\n    return asShallowMap(false);\n  }\n\n","sourceOld":"  public Map<String,T> asShallowMap() {\n    return new Map<String, T>() {\n      @Override\n      public int size() {\n        return NamedList.this.size();\n      }\n\n      @Override\n      public boolean isEmpty() {\n        return size() == 0;\n      }\n\n      public boolean containsKey(Object  key) {\n        return NamedList.this.get((String) key) != null ;\n      }\n\n      @Override\n      public boolean containsValue(Object value) {\n        return false;\n      }\n\n      @Override\n      public T get(Object key) {\n        return  NamedList.this.get((String) key);\n      }\n\n      @Override\n      public T put(String  key, T value) {\n        int idx = NamedList.this.indexOf(key, 0);\n        if (idx == -1) {\n          NamedList.this.add(key, value);\n        } else {\n          NamedList.this.setVal(idx, value);\n        }\n        return  null;\n      }\n\n      @Override\n      public T remove(Object key) {\n        return  NamedList.this.remove((String) key);\n      }\n\n      @Override\n      public void putAll(Map m) {\n        boolean isEmpty = isEmpty();\n        for (Object o : m.entrySet()) {\n          Map.Entry e = (Entry) o;\n          if (isEmpty) {// we know that there are no duplicates\n            add((String) e.getKey(), (T) e.getValue());\n          } else {\n            put(e.getKey() == null ? null : e.getKey().toString(), (T) e.getValue());\n          }\n        }\n      }\n\n      @Override\n      public void clear() {\n        NamedList.this.clear();\n      }\n\n      @Override\n      public Set<String> keySet() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).keySet();\n      }\n\n      @Override\n      public Collection values() {\n        //TODO implement more efficiently\n        return  NamedList.this.asMap(1).values();\n      }\n\n      @Override\n      public Set<Entry<String,T>> entrySet() {\n        //TODO implement more efficiently\n        return NamedList.this.asMap(1).entrySet();\n      }\n\n      @Override\n      public void forEach(BiConsumer action) {\n        NamedList.this.forEach(action);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9ac1922a6e5b4d1ec298c612640d012484d4e022","5e8661269ebb23269662a2826882f11611e91d5a"],"5e8661269ebb23269662a2826882f11611e91d5a":["1f1f31880696765d6aec499d3b01fa501129af45"],"1f1f31880696765d6aec499d3b01fa501129af45":["32c94eeb61edc7099a6ce0cb3cf3aa037a0b6d53"],"32c94eeb61edc7099a6ce0cb3cf3aa037a0b6d53":["9ac1922a6e5b4d1ec298c612640d012484d4e022"],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9ac1922a6e5b4d1ec298c612640d012484d4e022":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9ac1922a6e5b4d1ec298c612640d012484d4e022","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["074c4e385ea7c9ae29556e95c886ea0ccc614029"],"b0b597c65628ca9e73913a07e81691f8229bae35":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","074c4e385ea7c9ae29556e95c886ea0ccc614029"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ac1922a6e5b4d1ec298c612640d012484d4e022"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["074c4e385ea7c9ae29556e95c886ea0ccc614029","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b0b597c65628ca9e73913a07e81691f8229bae35"],"5e8661269ebb23269662a2826882f11611e91d5a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"1f1f31880696765d6aec499d3b01fa501129af45":["5e8661269ebb23269662a2826882f11611e91d5a"],"32c94eeb61edc7099a6ce0cb3cf3aa037a0b6d53":["1f1f31880696765d6aec499d3b01fa501129af45"],"9ac1922a6e5b4d1ec298c612640d012484d4e022":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","32c94eeb61edc7099a6ce0cb3cf3aa037a0b6d53","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}