{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream#open().mjava","commits":[{"id":"8192418e56fee1a061317028a35f7f288824c856","date":1557514938,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n    FieldComparator[] adjustedSorts = adjustSorts(x, y, bucketSort);\n\n    String json = getJsonFacetString(x, y, metric, adjustedSorts, dimensionX, dimensionY);\n    System.out.println(\"#######JSON:\"+json);\n    //assert expectedJson(json);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      System.out.println(\"###### Response:\"+response.toString());\n      getTuples(response, x, y, metric);\n      this.out = tuples.iterator();\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcae52c1b98d5cec2317790cd1d7d58f97cf8117","date":1557519155,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n    FieldComparator[] adjustedSorts = adjustSorts(x, y, bucketSort);\n\n    String json = getJsonFacetString(x, y, metric, adjustedSorts, dimensionX, dimensionY);\n    //assert expectedJson(json);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, x, y, metric);\n      this.out = tuples.iterator();\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n    FieldComparator[] adjustedSorts = adjustSorts(x, y, bucketSort);\n\n    String json = getJsonFacetString(x, y, metric, adjustedSorts, dimensionX, dimensionY);\n    System.out.println(\"#######JSON:\"+json);\n    //assert expectedJson(json);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      System.out.println(\"###### Response:\"+response.toString());\n      getTuples(response, x, y, metric);\n      this.out = tuples.iterator();\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/Facet2DStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n    FieldComparator[] adjustedSorts = adjustSorts(x, y, bucketSort);\n\n    String json = getJsonFacetString(x, y, metric, adjustedSorts, dimensionX, dimensionY);\n    //assert expectedJson(json);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, x, y, metric);\n      this.out = tuples.iterator();\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if (cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n    FieldComparator[] adjustedSorts = adjustSorts(x, y, bucketSort);\n\n    String json = getJsonFacetString(x, y, metric, adjustedSorts, dimensionX, dimensionY);\n    //assert expectedJson(json);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, x, y, metric);\n      this.out = tuples.iterator();\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcae52c1b98d5cec2317790cd1d7d58f97cf8117":["8192418e56fee1a061317028a35f7f288824c856"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["fcae52c1b98d5cec2317790cd1d7d58f97cf8117"],"8192418e56fee1a061317028a35f7f288824c856":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"fcae52c1b98d5cec2317790cd1d7d58f97cf8117":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8192418e56fee1a061317028a35f7f288824c856"],"8192418e56fee1a061317028a35f7f288824c856":["fcae52c1b98d5cec2317790cd1d7d58f97cf8117"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}