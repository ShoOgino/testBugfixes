{"path":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","sourceNew":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    List<Fieldable> l = doc.getFields();\n    for (final Fieldable fieldable : l ) {\n      Field field = (Field) fieldable;\n\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n  }\n\n","sourceOld":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    List<Fieldable> l = doc.getFields();\n    for (final Fieldable fieldable : l ) {\n      Field field = (Field) fieldable;\n\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","sourceNew":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    List<Fieldable> l = doc.getFields();\n    for (final Fieldable fieldable : l ) {\n      Field field = (Field) fieldable;\n\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n    reader.close();\n  }\n\n","sourceOld":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    List<Fieldable> l = doc.getFields();\n    for (final Fieldable fieldable : l ) {\n      Field field = (Field) fieldable;\n\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","sourceNew":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    List<Fieldable> l = doc.getFields();\n    for (final Fieldable fieldable : l ) {\n      Field field = (Field) fieldable;\n\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n    reader.close();\n  }\n\n","sourceOld":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    List<Fieldable> l = doc.getFields();\n    for (final Fieldable fieldable : l ) {\n      Field field = (Field) fieldable;\n\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestContribFieldsReader#testLoadFirst().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLoadFirst().mjava","sourceNew":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    IndexReader reader = IndexReader.open(dir);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = getDocument(reader, 0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    List<IndexableField> l = doc.getFields();\n    for (final IndexableField IndexableField : l ) {\n      Field field = (Field) IndexableField;\n\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n    reader.close();\n  }\n\n","sourceOld":"  public void testLoadFirst() throws Exception {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader.size() == 1);\n    LoadFirstFieldSelector fieldSelector = new LoadFirstFieldSelector();\n    Document doc = reader.doc(0, fieldSelector);\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    int count = 0;\n    List<Fieldable> l = doc.getFields();\n    for (final Fieldable fieldable : l ) {\n      Field field = (Field) fieldable;\n\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      String sv = field.stringValue();\n      assertTrue(\"sv is null and it shouldn't be\", sv != null);\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 1, count == 1);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1509f151d7692d84fae414b2b799ac06ba60fcb4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}