{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/ModifyAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"b10ab715806383f3d7f9eece13c26772a9116022","date":1517176579,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ModifyAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String aliasName = message.getStr(NAME);\n\n\n    ZkStateReader zkStateReader = messageHandler.zkStateReader;\n    if (zkStateReader.getAliases().getCollectionAliasMap().get(aliasName) == null) {\n      // nicer than letting aliases object throw later on...\n      throw new SolrException(BAD_REQUEST,\n          String.format(Locale.ROOT,  \"Can't modify non-existent alias %s\", aliasName));\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    Map<String, String> metadata = (Map<String, String>) message.get(META_DATA);\n\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(aliases1 -> {\n      for (Map.Entry<String, String> entry : metadata.entrySet()) {\n        String key = entry.getKey();\n        if (\"\".equals(key.trim())) {\n          throw new SolrException(BAD_REQUEST, \"metadata keys must not be pure whitespace\");\n        }\n        if (!key.equals(key.trim())) {\n          throw new SolrException(BAD_REQUEST, \"metadata keys should not begin or end with whitespace\");\n        }\n        String value = entry.getValue();\n        if (\"\".equals(value)) {\n          value = null;\n        }\n        aliases1 = aliases1.cloneWithCollectionAliasMetadata(aliasName, key, value);\n      }\n      return aliases1;\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a980795a56f2fcbc94caeb3233071312d5684d59","a980795a56f2fcbc94caeb3233071312d5684d59"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cbd743a4843f513f793670e3ab0e272bf824faf","date":1518149529,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ModifyAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/ModifyAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String aliasName = message.getStr(NAME);\n\n\n    ZkStateReader zkStateReader = messageHandler.zkStateReader;\n    if (zkStateReader.getAliases().getCollectionAliasMap().get(aliasName) == null) {\n      // nicer than letting aliases object throw later on...\n      throw new SolrException(BAD_REQUEST,\n          String.format(Locale.ROOT,  \"Can't modify non-existent alias %s\", aliasName));\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    Map<String, String> metadata = (Map<String, String>) message.get(META_DATA);\n\n    zkStateReader.aliasesManager.applyModificationAndExportToZk(aliases1 -> {\n      for (Map.Entry<String, String> entry : metadata.entrySet()) {\n        String key = entry.getKey();\n        if (\"\".equals(key.trim())) {\n          throw new SolrException(BAD_REQUEST, \"metadata keys must not be pure whitespace\");\n        }\n        if (!key.equals(key.trim())) {\n          throw new SolrException(BAD_REQUEST, \"metadata keys should not begin or end with whitespace\");\n        }\n        String value = entry.getValue();\n        if (\"\".equals(value)) {\n          value = null;\n        }\n        aliases1 = aliases1.cloneWithCollectionAliasMetadata(aliasName, key, value);\n      }\n      return aliases1;\n    });\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String aliasName = message.getStr(NAME);\n\n\n    ZkStateReader zkStateReader = messageHandler.zkStateReader;\n    if (zkStateReader.getAliases().getCollectionAliasMap().get(aliasName) == null) {\n      // nicer than letting aliases object throw later on...\n      throw new SolrException(BAD_REQUEST,\n          String.format(Locale.ROOT,  \"Can't modify non-existent alias %s\", aliasName));\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    Map<String, String> metadata = (Map<String, String>) message.get(META_DATA);\n\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(aliases1 -> {\n      for (Map.Entry<String, String> entry : metadata.entrySet()) {\n        String key = entry.getKey();\n        if (\"\".equals(key.trim())) {\n          throw new SolrException(BAD_REQUEST, \"metadata keys must not be pure whitespace\");\n        }\n        if (!key.equals(key.trim())) {\n          throw new SolrException(BAD_REQUEST, \"metadata keys should not begin or end with whitespace\");\n        }\n        String value = entry.getValue();\n        if (\"\".equals(value)) {\n          value = null;\n        }\n        aliases1 = aliases1.cloneWithCollectionAliasMetadata(aliasName, key, value);\n      }\n      return aliases1;\n    });\n  }\n\n","bugFix":null,"bugIntro":["a980795a56f2fcbc94caeb3233071312d5684d59","a980795a56f2fcbc94caeb3233071312d5684d59"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767","date":1520865397,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SetAliasPropCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/ModifyAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String aliasName = message.getStr(NAME);\n\n\n    ZkStateReader zkStateReader = messageHandler.zkStateReader;\n    if (zkStateReader.getAliases().getCollectionAliasMap().get(aliasName) == null) {\n      // nicer than letting aliases object throw later on...\n      throw new SolrException(BAD_REQUEST,\n          String.format(Locale.ROOT,  \"Can't modify non-existent alias %s\", aliasName));\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    Map<String, String> properties = (Map<String, String>) message.get(PROPERTIES);\n\n    zkStateReader.aliasesManager.applyModificationAndExportToZk(aliases1 -> {\n      for (Map.Entry<String, String> entry : properties.entrySet()) {\n        String key = entry.getKey();\n        if (\"\".equals(key.trim())) {\n          throw new SolrException(BAD_REQUEST, \"property keys must not be pure whitespace\");\n        }\n        if (!key.equals(key.trim())) {\n          throw new SolrException(BAD_REQUEST, \"property keys should not begin or end with whitespace\");\n        }\n        String value = entry.getValue();\n        if (\"\".equals(value)) {\n          value = null;\n        }\n        aliases1 = aliases1.cloneWithCollectionAliasProperties(aliasName, key, value);\n      }\n      return aliases1;\n    });\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String aliasName = message.getStr(NAME);\n\n\n    ZkStateReader zkStateReader = messageHandler.zkStateReader;\n    if (zkStateReader.getAliases().getCollectionAliasMap().get(aliasName) == null) {\n      // nicer than letting aliases object throw later on...\n      throw new SolrException(BAD_REQUEST,\n          String.format(Locale.ROOT,  \"Can't modify non-existent alias %s\", aliasName));\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    Map<String, String> metadata = (Map<String, String>) message.get(META_DATA);\n\n    zkStateReader.aliasesManager.applyModificationAndExportToZk(aliases1 -> {\n      for (Map.Entry<String, String> entry : metadata.entrySet()) {\n        String key = entry.getKey();\n        if (\"\".equals(key.trim())) {\n          throw new SolrException(BAD_REQUEST, \"metadata keys must not be pure whitespace\");\n        }\n        if (!key.equals(key.trim())) {\n          throw new SolrException(BAD_REQUEST, \"metadata keys should not begin or end with whitespace\");\n        }\n        String value = entry.getValue();\n        if (\"\".equals(value)) {\n          value = null;\n        }\n        aliases1 = aliases1.cloneWithCollectionAliasMetadata(aliasName, key, value);\n      }\n      return aliases1;\n    });\n  }\n\n","bugFix":null,"bugIntro":["a980795a56f2fcbc94caeb3233071312d5684d59","a980795a56f2fcbc94caeb3233071312d5684d59"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"3cbd743a4843f513f793670e3ab0e272bf824faf":["b10ab715806383f3d7f9eece13c26772a9116022"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b10ab715806383f3d7f9eece13c26772a9116022":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767"]},"commit2Childs":{"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cbd743a4843f513f793670e3ab0e272bf824faf":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b10ab715806383f3d7f9eece13c26772a9116022"],"b10ab715806383f3d7f9eece13c26772a9116022":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}