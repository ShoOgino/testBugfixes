{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testEmptyBackups().mjava","commits":[{"id":"19f02bb04467ed179738a398a7da80bbbe161c16","date":1573660732,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testEmptyBackups().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEmptyBackups() throws Exception {\n    final File backupDir = createTempDir().toFile();\n    final CheckBackupStatus backupStatus = new CheckBackupStatus(masterClient, /* Silly API */ \".\");\n    \n    { // initial request w/o any committed docs\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", \"empty_backup1\"));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n      \n      while (!timeout.hasTimedOut()) {\n        backupStatus.fetchStatus();\n        if (backupStatus.success) {\n          break;\n        }\n        timeout.sleep(50);\n      }\n      assertTrue(backupStatus.success);\n    \n      assertTrue(\"snapshot.empty_backup1 doesn't exist in expected location\",\n                 new File(backupDir, \"snapshot.empty_backup1\").exists());\n    }\n    \n    index(masterClient, \"id\", \"1\", \"name\", \"foo\");\n    \n    { // second backup w/uncommited doc\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", \"empty_backup2\"));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n      \n      while (!timeout.hasTimedOut()) {\n        backupStatus.fetchStatus();\n        if (backupStatus.success) {\n          break;\n        }\n        timeout.sleep(50);\n      }\n      assertTrue(backupStatus.success);\n    \n      assertTrue(\"snapshot.empty_backup2 doesn't exist in expected location\",\n                 new File(backupDir, \"snapshot.empty_backup2\").exists());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec54bd926c45854b5a1599685b0f7d2bfbfe177f","date":1573838246,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testEmptyBackups().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testEmptyBackups().mjava","sourceNew":"  @Test\n  public void testEmptyBackups() throws Exception {\n    final File backupDir = createTempDir().toFile();\n    final BackupStatusChecker backupStatus = new BackupStatusChecker(masterClient);\n    \n    { // initial request w/o any committed docs\n      final String backupName = \"empty_backup1\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n\n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup1\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n    \n    index(masterClient, \"id\", \"1\", \"name\", \"foo\");\n    \n    { // second backup w/uncommited doc\n      final String backupName = \"empty_backup2\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n      \n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup2\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n\n    // confirm backups really are empty\n    for (int i = 1; i <=2; i++) {\n      final String name = \"snapshot.empty_backup\"+i;\n      try (Directory dir = new SimpleFSDirectory(new File(backupDir, name).toPath());\n           IndexReader reader = DirectoryReader.open(dir)) {\n        assertEquals(name + \" is not empty\", 0, reader.numDocs());\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyBackups() throws Exception {\n    final File backupDir = createTempDir().toFile();\n    final CheckBackupStatus backupStatus = new CheckBackupStatus(masterClient, /* Silly API */ \".\");\n    \n    { // initial request w/o any committed docs\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", \"empty_backup1\"));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n      \n      while (!timeout.hasTimedOut()) {\n        backupStatus.fetchStatus();\n        if (backupStatus.success) {\n          break;\n        }\n        timeout.sleep(50);\n      }\n      assertTrue(backupStatus.success);\n    \n      assertTrue(\"snapshot.empty_backup1 doesn't exist in expected location\",\n                 new File(backupDir, \"snapshot.empty_backup1\").exists());\n    }\n    \n    index(masterClient, \"id\", \"1\", \"name\", \"foo\");\n    \n    { // second backup w/uncommited doc\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", \"empty_backup2\"));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n      \n      while (!timeout.hasTimedOut()) {\n        backupStatus.fetchStatus();\n        if (backupStatus.success) {\n          break;\n        }\n        timeout.sleep(50);\n      }\n      assertTrue(backupStatus.success);\n    \n      assertTrue(\"snapshot.empty_backup2 doesn't exist in expected location\",\n                 new File(backupDir, \"snapshot.empty_backup2\").exists());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ae13d58e10d8dc818c75db483ed8b53c725f1d","date":1583449465,"type":3,"author":"Yannick Welsch","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testEmptyBackups().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testEmptyBackups().mjava","sourceNew":"  @Test\n  public void testEmptyBackups() throws Exception {\n    final File backupDir = createTempDir().toFile();\n    final BackupStatusChecker backupStatus = new BackupStatusChecker(masterClient);\n    \n    { // initial request w/o any committed docs\n      final String backupName = \"empty_backup1\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n\n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup1\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n    \n    index(masterClient, \"id\", \"1\", \"name\", \"foo\");\n    \n    { // second backup w/uncommited doc\n      final String backupName = \"empty_backup2\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n      \n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup2\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n\n    // confirm backups really are empty\n    for (int i = 1; i <=2; i++) {\n      final String name = \"snapshot.empty_backup\"+i;\n      try (Directory dir = new NIOFSDirectory(new File(backupDir, name).toPath());\n           IndexReader reader = DirectoryReader.open(dir)) {\n        assertEquals(name + \" is not empty\", 0, reader.numDocs());\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyBackups() throws Exception {\n    final File backupDir = createTempDir().toFile();\n    final BackupStatusChecker backupStatus = new BackupStatusChecker(masterClient);\n    \n    { // initial request w/o any committed docs\n      final String backupName = \"empty_backup1\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n\n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup1\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n    \n    index(masterClient, \"id\", \"1\", \"name\", \"foo\");\n    \n    { // second backup w/uncommited doc\n      final String backupName = \"empty_backup2\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n      \n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup2\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n\n    // confirm backups really are empty\n    for (int i = 1; i <=2; i++) {\n      final String name = \"snapshot.empty_backup\"+i;\n      try (Directory dir = new SimpleFSDirectory(new File(backupDir, name).toPath());\n           IndexReader reader = DirectoryReader.open(dir)) {\n        assertEquals(name + \" is not empty\", 0, reader.numDocs());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ca2a57dbb0665332572cf1a0dffa67234089615","date":1583491342,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testEmptyBackups().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testEmptyBackups().mjava","sourceNew":"  @Test\n  public void testEmptyBackups() throws Exception {\n    final File backupDir = createTempDir().toFile();\n    final BackupStatusChecker backupStatus = new BackupStatusChecker(masterClient);\n    \n    { // initial request w/o any committed docs\n      final String backupName = \"empty_backup1\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n\n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup1\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n    \n    index(masterClient, \"id\", \"1\", \"name\", \"foo\");\n    \n    { // second backup w/uncommited doc\n      final String backupName = \"empty_backup2\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n      \n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup2\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n\n    // confirm backups really are empty\n    for (int i = 1; i <=2; i++) {\n      final String name = \"snapshot.empty_backup\"+i;\n      try (Directory dir = new NIOFSDirectory(new File(backupDir, name).toPath());\n           IndexReader reader = DirectoryReader.open(dir)) {\n        assertEquals(name + \" is not empty\", 0, reader.numDocs());\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyBackups() throws Exception {\n    final File backupDir = createTempDir().toFile();\n    final BackupStatusChecker backupStatus = new BackupStatusChecker(masterClient);\n    \n    { // initial request w/o any committed docs\n      final String backupName = \"empty_backup1\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n\n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup1\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n    \n    index(masterClient, \"id\", \"1\", \"name\", \"foo\");\n    \n    { // second backup w/uncommited doc\n      final String backupName = \"empty_backup2\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n      \n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup2\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n\n    // confirm backups really are empty\n    for (int i = 1; i <=2; i++) {\n      final String name = \"snapshot.empty_backup\"+i;\n      try (Directory dir = new SimpleFSDirectory(new File(backupDir, name).toPath());\n           IndexReader reader = DirectoryReader.open(dir)) {\n        assertEquals(name + \" is not empty\", 0, reader.numDocs());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6b17e67903ace8abb1d4d602bfc40d1994692ff","date":1593429504,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testEmptyBackups().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testEmptyBackups().mjava","sourceNew":"  @Test\n  public void testEmptyBackups() throws Exception {\n    final File backupDir = createTempDir().toFile();\n    final BackupStatusChecker backupStatus = new BackupStatusChecker(masterClient);\n\n    masterJetty.getCoreContainer().getAllowPaths().add(backupDir.toPath());\n\n    { // initial request w/o any committed docs\n      final String backupName = \"empty_backup1\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n\n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup1\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n    \n    index(masterClient, \"id\", \"1\", \"name\", \"foo\");\n    \n    { // second backup w/uncommited doc\n      final String backupName = \"empty_backup2\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n      \n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup2\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n\n    // confirm backups really are empty\n    for (int i = 1; i <=2; i++) {\n      final String name = \"snapshot.empty_backup\"+i;\n      try (Directory dir = new NIOFSDirectory(new File(backupDir, name).toPath());\n           IndexReader reader = DirectoryReader.open(dir)) {\n        assertEquals(name + \" is not empty\", 0, reader.numDocs());\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyBackups() throws Exception {\n    final File backupDir = createTempDir().toFile();\n    final BackupStatusChecker backupStatus = new BackupStatusChecker(masterClient);\n    \n    { // initial request w/o any committed docs\n      final String backupName = \"empty_backup1\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n\n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup1\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n    \n    index(masterClient, \"id\", \"1\", \"name\", \"foo\");\n    \n    { // second backup w/uncommited doc\n      final String backupName = \"empty_backup2\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n      \n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup2\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n\n    // confirm backups really are empty\n    for (int i = 1; i <=2; i++) {\n      final String name = \"snapshot.empty_backup\"+i;\n      try (Directory dir = new NIOFSDirectory(new File(backupDir, name).toPath());\n           IndexReader reader = DirectoryReader.open(dir)) {\n        assertEquals(name + \" is not empty\", 0, reader.numDocs());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testEmptyBackups().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testEmptyBackups().mjava","sourceNew":"  @Test\n  public void testEmptyBackups() throws Exception {\n    final File backupDir = createTempDir().toFile();\n    final BackupStatusChecker backupStatus = new BackupStatusChecker(leaderClient);\n\n    leaderJetty.getCoreContainer().getAllowPaths().add(backupDir.toPath());\n\n    { // initial request w/o any committed docs\n      final String backupName = \"empty_backup1\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(leaderClient);\n\n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup1\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n    \n    index(leaderClient, \"id\", \"1\", \"name\", \"foo\");\n    \n    { // second backup w/uncommited doc\n      final String backupName = \"empty_backup2\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(leaderClient);\n      \n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup2\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n\n    // confirm backups really are empty\n    for (int i = 1; i <=2; i++) {\n      final String name = \"snapshot.empty_backup\"+i;\n      try (Directory dir = new NIOFSDirectory(new File(backupDir, name).toPath());\n           IndexReader reader = DirectoryReader.open(dir)) {\n        assertEquals(name + \" is not empty\", 0, reader.numDocs());\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyBackups() throws Exception {\n    final File backupDir = createTempDir().toFile();\n    final BackupStatusChecker backupStatus = new BackupStatusChecker(masterClient);\n\n    masterJetty.getCoreContainer().getAllowPaths().add(backupDir.toPath());\n\n    { // initial request w/o any committed docs\n      final String backupName = \"empty_backup1\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n\n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup1\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n    \n    index(masterClient, \"id\", \"1\", \"name\", \"foo\");\n    \n    { // second backup w/uncommited doc\n      final String backupName = \"empty_backup2\";\n      final GenericSolrRequest req = new GenericSolrRequest\n        (SolrRequest.METHOD.GET, \"/replication\",\n         params(\"command\", \"backup\",\n                \"location\", backupDir.getAbsolutePath(),\n                \"name\", backupName));\n      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      final SimpleSolrResponse rsp = req.process(masterClient);\n      \n      final String dirName = backupStatus.waitForBackupSuccess(backupName, timeout);\n      assertEquals(\"Did not get expected dir name for backup, did API change?\",\n                   \"snapshot.empty_backup2\", dirName);\n      assertTrue(dirName + \" doesn't exist in expected location for backup \" + backupName,\n                 new File(backupDir, dirName).exists());\n    }\n\n    // confirm backups really are empty\n    for (int i = 1; i <=2; i++) {\n      final String name = \"snapshot.empty_backup\"+i;\n      try (Directory dir = new NIOFSDirectory(new File(backupDir, name).toPath());\n           IndexReader reader = DirectoryReader.open(dir)) {\n        assertEquals(name + \" is not empty\", 0, reader.numDocs());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6b17e67903ace8abb1d4d602bfc40d1994692ff":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["a6b17e67903ace8abb1d4d602bfc40d1994692ff"],"9ca2a57dbb0665332572cf1a0dffa67234089615":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["19f02bb04467ed179738a398a7da80bbbe161c16"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"],"19f02bb04467ed179738a398a7da80bbbe161c16":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"a6b17e67903ace8abb1d4d602bfc40d1994692ff":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"9ca2a57dbb0665332572cf1a0dffa67234089615":["a6b17e67903ace8abb1d4d602bfc40d1994692ff"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["9ca2a57dbb0665332572cf1a0dffa67234089615","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"19f02bb04467ed179738a398a7da80bbbe161c16":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19f02bb04467ed179738a398a7da80bbbe161c16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}