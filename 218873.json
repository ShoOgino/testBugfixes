{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#findDirectory(DataImporter,Map[String,String]).mjava","commits":[{"id":"2a2d5d7d5a5bc6b66022afef3bcc646148c796b2","date":1357911503,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#findDirectory(DataImporter,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void findDirectory(DataImporter dataImporter, Map<String, String> params) {\n    String collection = dataImporter.getCore().getCoreDescriptor()\n        .getCloudDescriptor().getCollectionName();\n    path = \"/configs/\" + collection + \"/\" + filename;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9fd2b0e0e1141e4851e1281c4955c7690b374c3b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#findDirectory(DataImporter,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void findDirectory(DataImporter dataImporter, Map<String, String> params) {\n    String collection = dataImporter.getCore().getCoreDescriptor()\n        .getCloudDescriptor().getCollectionName();\n    path = \"/configs/\" + collection + \"/\" + filename;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fd2b0e0e1141e4851e1281c4955c7690b374c3b","date":1474031826,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#findDirectory(DataImporter,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#findDirectory(DataImporter,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void findDirectory(DataImporter dataImporter, Map<String, String> params) {\n    String collection = dataImporter.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    path = \"/configs/\" + collection + \"/\" + filename;\n  }\n\n","sourceOld":"  @Override\n  protected void findDirectory(DataImporter dataImporter, Map<String, String> params) {\n    String collection = dataImporter.getCore().getCoreDescriptor()\n        .getCloudDescriptor().getCollectionName();\n    path = \"/configs/\" + collection + \"/\" + filename;\n  }\n\n","bugFix":["2a2d5d7d5a5bc6b66022afef3bcc646148c796b2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#findDirectory(DataImporter,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#findDirectory(DataImporter,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void findDirectory(DataImporter dataImporter, Map<String, String> params) {\n    String collection = dataImporter.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    path = \"/configs/\" + collection + \"/\" + filename;\n  }\n\n","sourceOld":"  @Override\n  protected void findDirectory(DataImporter dataImporter, Map<String, String> params) {\n    String collection = dataImporter.getCore().getCoreDescriptor()\n        .getCloudDescriptor().getCollectionName();\n    path = \"/configs/\" + collection + \"/\" + filename;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#findDirectory(DataImporter,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#findDirectory(DataImporter,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void findDirectory(DataImporter dataImporter, Map<String, String> params) {\n    String collection = dataImporter.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    path = \"/configs/\" + collection + \"/\" + filename;\n  }\n\n","sourceOld":"  @Override\n  protected void findDirectory(DataImporter dataImporter, Map<String, String> params) {\n    String collection = dataImporter.getCore().getCoreDescriptor()\n        .getCloudDescriptor().getCollectionName();\n    path = \"/configs/\" + collection + \"/\" + filename;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#findDirectory(DataImporter,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void findDirectory(DataImporter dataImporter, Map<String, String> params) {\n    String collection = dataImporter.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    path = \"/configs/\" + collection + \"/\" + filename;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2a2d5d7d5a5bc6b66022afef3bcc646148c796b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2a2d5d7d5a5bc6b66022afef3bcc646148c796b2","9fd2b0e0e1141e4851e1281c4955c7690b374c3b"],"9fd2b0e0e1141e4851e1281c4955c7690b374c3b":["2a2d5d7d5a5bc6b66022afef3bcc646148c796b2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2a2d5d7d5a5bc6b66022afef3bcc646148c796b2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2a2d5d7d5a5bc6b66022afef3bcc646148c796b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a2d5d7d5a5bc6b66022afef3bcc646148c796b2":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","9fd2b0e0e1141e4851e1281c4955c7690b374c3b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a2d5d7d5a5bc6b66022afef3bcc646148c796b2","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"9fd2b0e0e1141e4851e1281c4955c7690b374c3b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}