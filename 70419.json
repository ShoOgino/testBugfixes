{"path":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessor#isVersionNewEnough(BytesRef,Object[]).mjava","commits":[{"id":"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15","date":1523556268,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessor#isVersionNewEnough(BytesRef,Object[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true if the specified new version values are greater the the ones\n   * already known to exist for the document, or if the document does not already\n   * exist.\n   * Returns false if the specified new versions are not high enough but the\n   * processor has been configured with ignoreOldUpdates=true\n   * Throws a SolrException if the version is not high enough and\n   * ignoreOldUpdates=false\n   */\n  private boolean isVersionNewEnough(BytesRef indexedDocId,\n                                     Object[] newUserVersions) throws IOException {\n    assert null != indexedDocId;\n    assert null != newUserVersions;\n\n    newUserVersions = convertFieldValuesUsingType(newUserVersions, userVersionFields);\n\n    final DocFoundAndOldUserAndSolrVersions docFoundAndOldUserVersions;\n    if (useFieldCache) {\n      docFoundAndOldUserVersions = getOldUserVersionsFromFieldCache(indexedDocId);\n    } else {\n      docFoundAndOldUserVersions = getOldUserVersionsFromStored(indexedDocId);\n    }\n    oldSolrVersion = docFoundAndOldUserVersions.oldSolrVersion;\n\n    if (!docFoundAndOldUserVersions.found) {\n      return true;\n    }\n    final Object[] oldUserVersions = docFoundAndOldUserVersions.oldUserVersions;\n\n    validateUserVersions(oldUserVersions, versionFieldNames, \"Doc exists in index, but has null versionField: \");\n\n    return versionInUpdateIsAcceptable(newUserVersions, oldUserVersions);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0f4b03a7701ad6256c4b8946243ae1981931a28","date":1527108277,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessor#isVersionNewEnough(BytesRef,Object[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessor#isVersionNewEnough(BytesRef,Object[]).mjava","sourceNew":"  /**\n   * Returns true if the specified new version values are greater the the ones\n   * already known to exist for the document, or if the document does not already\n   * exist.\n   * Returns false if the specified new versions are not high enough but the\n   * processor has been configured with ignoreOldUpdates=true\n   * Throws a SolrException if the version is not high enough and\n   * ignoreOldUpdates=false\n   */\n  private boolean isVersionNewEnough(BytesRef indexedDocId,\n                                     Object[] newUserVersions) throws IOException {\n    assert null != indexedDocId;\n    assert null != newUserVersions;\n\n    newUserVersions = convertFieldValuesUsingType(newUserVersions);\n\n    final DocFoundAndOldUserAndSolrVersions docFoundAndOldUserVersions;\n    if (useFieldCache) {\n      docFoundAndOldUserVersions = getOldUserVersionsFromFieldCache(indexedDocId);\n    } else {\n      docFoundAndOldUserVersions = getOldUserVersionsFromStored(indexedDocId);\n    }\n    oldSolrVersion = docFoundAndOldUserVersions.oldSolrVersion;\n\n    if (!docFoundAndOldUserVersions.found) {\n      return true;\n    }\n    final Object[] oldUserVersions = docFoundAndOldUserVersions.oldUserVersions;\n\n    validateUserVersions(oldUserVersions, versionFieldNames, \"Doc exists in index, but has null versionField: \");\n\n    return versionInUpdateIsAcceptable(newUserVersions, oldUserVersions);\n  }\n\n","sourceOld":"  /**\n   * Returns true if the specified new version values are greater the the ones\n   * already known to exist for the document, or if the document does not already\n   * exist.\n   * Returns false if the specified new versions are not high enough but the\n   * processor has been configured with ignoreOldUpdates=true\n   * Throws a SolrException if the version is not high enough and\n   * ignoreOldUpdates=false\n   */\n  private boolean isVersionNewEnough(BytesRef indexedDocId,\n                                     Object[] newUserVersions) throws IOException {\n    assert null != indexedDocId;\n    assert null != newUserVersions;\n\n    newUserVersions = convertFieldValuesUsingType(newUserVersions, userVersionFields);\n\n    final DocFoundAndOldUserAndSolrVersions docFoundAndOldUserVersions;\n    if (useFieldCache) {\n      docFoundAndOldUserVersions = getOldUserVersionsFromFieldCache(indexedDocId);\n    } else {\n      docFoundAndOldUserVersions = getOldUserVersionsFromStored(indexedDocId);\n    }\n    oldSolrVersion = docFoundAndOldUserVersions.oldSolrVersion;\n\n    if (!docFoundAndOldUserVersions.found) {\n      return true;\n    }\n    final Object[] oldUserVersions = docFoundAndOldUserVersions.oldUserVersions;\n\n    validateUserVersions(oldUserVersions, versionFieldNames, \"Doc exists in index, but has null versionField: \");\n\n    return versionInUpdateIsAcceptable(newUserVersions, oldUserVersions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d0f4b03a7701ad6256c4b8946243ae1981931a28":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0f4b03a7701ad6256c4b8946243ae1981931a28"]},"commit2Childs":{"d0f4b03a7701ad6256c4b8946243ae1981931a28":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["d0f4b03a7701ad6256c4b8946243ae1981931a28"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}