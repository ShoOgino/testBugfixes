{"path":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPResponse#retryRequest().mjava","commits":[{"id":"bc6055f4a2e8e9f9caaec2297010c9502480ed69","date":1050060580,"type":0,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPResponse#retryRequest().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Should the request be retried by the application? If the application used\n     * an <var>HttpOutputStream</var> in the request then various modules (such\n     * as the redirection and authorization modules) are not able to resend the\n     * request themselves. Instead, it becomes the application's responsibility.\n     * The application can check this flag, and if it's set, resend the exact\n     * same request. The modules such as the RedirectionModule or\n     * AuthorizationModule will then recognize the resend and fix up or redirect\n     * the request as required (i.e. they defer their normal action until the\n     * resend). <P>\n     *\n     * If the application resends the request then it <strong>must</strong> use\n     * the same <var>HttpOutputStream</var> instance. This is because the\n     * modules use this to recognize the retried request and to perform the\n     * necessary work on the request before it's sent. <P>\n     *\n     * Here is a skeleton example of usage: <PRE>\n     *     OutputStream out = new HttpOutputStream(1234);\n     *     do\n     *     {\n     *         rsp = con.Post(\"/cgi-bin/my_cgi\", out);\n     *         out.write(...);\n     *         out.close();\n     *     } while (rsp.retryRequest());\n     *\n     *     if (rsp.getStatusCode() >= 300)\n     *         ...\n     * </PRE> <P>\n     *\n     * Note that for this to ever return true, the java system property <var>\n     * HTTPClient.deferStreamed</var> must be set to true at the beginning of\n     * the application (before the HTTPConnection class is loaded). This\n     * prevents unwary applications from causing inadvertent memory leaks. If an\n     * application does set this, then it <em>must</em> resend any request whose\n     * response returns true here in order to prevent memory leaks (a switch to\n     * JDK 1.2 will allow us to use weak references and eliminate this problem).\n     *\n     * @return                     true if the request should be retried.\n     * @exception IOException      If any exception occurs on the socket.\n     * @exception ModuleException  if any module encounters an exception.\n     */\n    public boolean retryRequest()\n        throws IOException, ModuleException\n    {\n        if (!initialized)\n        {\n            try\n            {\n                handleResponse();\n            }\n            catch (RetryException re)\n            {\n                this.retry = response.retry;\n            }\n        }\n        return retry;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPResponse#retryRequest().mjava","sourceNew":null,"sourceOld":"    /**\n     * Should the request be retried by the application? If the application used\n     * an <var>HttpOutputStream</var> in the request then various modules (such\n     * as the redirection and authorization modules) are not able to resend the\n     * request themselves. Instead, it becomes the application's responsibility.\n     * The application can check this flag, and if it's set, resend the exact\n     * same request. The modules such as the RedirectionModule or\n     * AuthorizationModule will then recognize the resend and fix up or redirect\n     * the request as required (i.e. they defer their normal action until the\n     * resend). <P>\n     *\n     * If the application resends the request then it <strong>must</strong> use\n     * the same <var>HttpOutputStream</var> instance. This is because the\n     * modules use this to recognize the retried request and to perform the\n     * necessary work on the request before it's sent. <P>\n     *\n     * Here is a skeleton example of usage: <PRE>\n     *     OutputStream out = new HttpOutputStream(1234);\n     *     do\n     *     {\n     *         rsp = con.Post(\"/cgi-bin/my_cgi\", out);\n     *         out.write(...);\n     *         out.close();\n     *     } while (rsp.retryRequest());\n     *\n     *     if (rsp.getStatusCode() >= 300)\n     *         ...\n     * </PRE> <P>\n     *\n     * Note that for this to ever return true, the java system property <var>\n     * HTTPClient.deferStreamed</var> must be set to true at the beginning of\n     * the application (before the HTTPConnection class is loaded). This\n     * prevents unwary applications from causing inadvertent memory leaks. If an\n     * application does set this, then it <em>must</em> resend any request whose\n     * response returns true here in order to prevent memory leaks (a switch to\n     * JDK 1.2 will allow us to use weak references and eliminate this problem).\n     *\n     * @return                     true if the request should be retried.\n     * @exception IOException      If any exception occurs on the socket.\n     * @exception ModuleException  if any module encounters an exception.\n     */\n    public boolean retryRequest()\n        throws IOException, ModuleException\n    {\n        if (!initialized)\n        {\n            try\n            {\n                handleResponse();\n            }\n            catch (RetryException re)\n            {\n                this.retry = response.retry;\n            }\n        }\n        return retry;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc6055f4a2e8e9f9caaec2297010c9502480ed69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["bc6055f4a2e8e9f9caaec2297010c9502480ed69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"bc6055f4a2e8e9f9caaec2297010c9502480ed69":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc6055f4a2e8e9f9caaec2297010c9502480ed69"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}