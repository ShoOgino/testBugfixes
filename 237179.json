{"path":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setDefaultMaxMergesAndThreads(boolean).mjava","commits":[{"id":"f1db7bd2068060be0b68fcca95c8270c7cb60f6c","date":1419003415,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setDefaultMaxMergesAndThreads(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Sets max merges and threads to proper defaults for rotational\n   *  or non-rotational storage.\n   *\n   * @param spins true to set defaults best for traditional rotatational storage (spinning disks), \n   *        else false (e.g. for solid-state disks)\n   */\n  public synchronized void setDefaultMaxMergesAndThreads(boolean spins) {\n    if (spins) {\n      maxThreadCount = 1;\n      maxMergeCount = 2;\n    } else {\n      maxThreadCount = Math.max(1, Math.min(3, Runtime.getRuntime().availableProcessors()/2));\n      maxMergeCount = maxThreadCount+2;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setDefaultMaxMergesAndThreads(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setDefaultMaxMergesAndThreads(boolean).mjava","sourceNew":"  /** Sets max merges and threads to proper defaults for rotational\n   *  or non-rotational storage.\n   *\n   * @param spins true to set defaults best for traditional rotatational storage (spinning disks), \n   *        else false (e.g. for solid-state disks)\n   */\n  public synchronized void setDefaultMaxMergesAndThreads(boolean spins) {\n    if (spins) {\n      maxThreadCount = 1;\n      maxMergeCount = 6;\n    } else {\n      maxThreadCount = Math.max(1, Math.min(4, Runtime.getRuntime().availableProcessors()/2));\n      maxMergeCount = maxThreadCount+5;\n    }\n  }\n\n","sourceOld":"  /** Sets max merges and threads to proper defaults for rotational\n   *  or non-rotational storage.\n   *\n   * @param spins true to set defaults best for traditional rotatational storage (spinning disks), \n   *        else false (e.g. for solid-state disks)\n   */\n  public synchronized void setDefaultMaxMergesAndThreads(boolean spins) {\n    if (spins) {\n      maxThreadCount = 1;\n      maxMergeCount = 2;\n    } else {\n      maxThreadCount = Math.max(1, Math.min(3, Runtime.getRuntime().availableProcessors()/2));\n      maxMergeCount = maxThreadCount+2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4059f594c3bf4917eba6d4a08f70976ffc32a010","date":1429374480,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setDefaultMaxMergesAndThreads(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setDefaultMaxMergesAndThreads(boolean).mjava","sourceNew":"  /** Sets max merges and threads to proper defaults for rotational\n   *  or non-rotational storage.\n   *\n   * @param spins true to set defaults best for traditional rotatational storage (spinning disks), \n   *        else false (e.g. for solid-state disks)\n   */\n  public synchronized void setDefaultMaxMergesAndThreads(boolean spins) {\n    if (spins) {\n      maxThreadCount = 1;\n      maxMergeCount = 6;\n    } else {\n      int coreCount = Runtime.getRuntime().availableProcessors();\n\n      // Let tests override this to help reproducing a failure on a machine that has a different\n      // core count than the one where the test originally failed:\n      try {\n        String value = System.getProperty(DEFAULT_CPU_CORE_COUNT_PROPERTY);\n        if (value != null) {\n          coreCount = Integer.parseInt(value);\n        }\n      } catch (Throwable ignored) {\n      }\n\n      maxThreadCount = Math.max(1, Math.min(4, coreCount/2));\n      maxMergeCount = maxThreadCount+5;\n    }\n  }\n\n","sourceOld":"  /** Sets max merges and threads to proper defaults for rotational\n   *  or non-rotational storage.\n   *\n   * @param spins true to set defaults best for traditional rotatational storage (spinning disks), \n   *        else false (e.g. for solid-state disks)\n   */\n  public synchronized void setDefaultMaxMergesAndThreads(boolean spins) {\n    if (spins) {\n      maxThreadCount = 1;\n      maxMergeCount = 6;\n    } else {\n      maxThreadCount = Math.max(1, Math.min(4, Runtime.getRuntime().availableProcessors()/2));\n      maxMergeCount = maxThreadCount+5;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"4059f594c3bf4917eba6d4a08f70976ffc32a010":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4059f594c3bf4917eba6d4a08f70976ffc32a010"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["4059f594c3bf4917eba6d4a08f70976ffc32a010"],"4059f594c3bf4917eba6d4a08f70976ffc32a010":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}