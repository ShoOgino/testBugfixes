{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.SegmentEndpoint#intersects(PlanetModel,Plane,GeoPoint[],Membership[]).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.SegmentEndpoint#intersects(PlanetModel,Plane,GeoPoint[],Membership[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.SegmentEndpoint#intersects(PlanetModel,Plane,GeoPoint[],Membership[]).mjava","sourceNew":"    public boolean intersects(final PlanetModel planetModel, final Plane p, final GeoPoint[] notablePoints, final Membership[] bounds) {\n      //System.err.println(\"  looking for intersection between plane \"+p+\" and circle \"+circlePlane+\" on proper side of \"+cutoffPlanes+\" within \"+bounds);\n      if (circlePlane == null)\n        return false;\n      return circlePlane.intersects(planetModel, p, notablePoints, this.notablePoints, bounds, this.cutoffPlanes);\n    }\n\n","sourceOld":"    public boolean intersects(final PlanetModel planetModel, final Plane p, final GeoPoint[] notablePoints, final Membership[] bounds) {\n      //System.err.println(\"  looking for intersection between plane \"+p+\" and circle \"+circlePlane+\" on proper side of \"+cutoffPlanes+\" within \"+bounds);\n      if (circlePlane == null)\n        return false;\n      return circlePlane.intersects(planetModel, p, notablePoints, this.notablePoints, bounds, this.cutoffPlanes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71849bd31d150133a9a1027bf1607967b406c57","date":1436811056,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.SegmentEndpoint#intersects(PlanetModel,Plane,GeoPoint[],Membership[]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.SegmentEndpoint#intersects(PlanetModel,Plane,GeoPoint[],Membership[]).mjava","sourceNew":"    /** Determine if this endpoint intersects a specified plane.\n     *@param planetModel is the planet model.\n     *@param p is the plane.\n     *@param notablePoints are the points associated with the plane.\n     *@param bounds are any bounds which the intersection must lie within.\n     *@return true if there is a matching intersection.\n     */\n    public boolean intersects(final PlanetModel planetModel, final Plane p, final GeoPoint[] notablePoints, final Membership[] bounds) {\n      //System.err.println(\"  looking for intersection between plane \"+p+\" and circle \"+circlePlane+\" on proper side of \"+cutoffPlanes+\" within \"+bounds);\n      if (circlePlane == null)\n        return false;\n      return circlePlane.intersects(planetModel, p, notablePoints, this.notablePoints, bounds, this.cutoffPlanes);\n    }\n\n","sourceOld":"    public boolean intersects(final PlanetModel planetModel, final Plane p, final GeoPoint[] notablePoints, final Membership[] bounds) {\n      //System.err.println(\"  looking for intersection between plane \"+p+\" and circle \"+circlePlane+\" on proper side of \"+cutoffPlanes+\" within \"+bounds);\n      if (circlePlane == null)\n        return false;\n      return circlePlane.intersects(planetModel, p, notablePoints, this.notablePoints, bounds, this.cutoffPlanes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPath.SegmentEndpoint#intersects(PlanetModel,Plane,GeoPoint[],Membership[]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.SegmentEndpoint#intersects(PlanetModel,Plane,GeoPoint[],Membership[]).mjava","sourceNew":"    /** Determine if this endpoint intersects a specified plane.\n     *@param planetModel is the planet model.\n     *@param p is the plane.\n     *@param notablePoints are the points associated with the plane.\n     *@param bounds are any bounds which the intersection must lie within.\n     *@return true if there is a matching intersection.\n     */\n    public boolean intersects(final PlanetModel planetModel, final Plane p, final GeoPoint[] notablePoints, final Membership[] bounds) {\n      //System.err.println(\"  looking for intersection between plane \"+p+\" and circle \"+circlePlane+\" on proper side of \"+cutoffPlanes+\" within \"+bounds);\n      if (circlePlane == null)\n        return false;\n      return circlePlane.intersects(planetModel, p, notablePoints, this.notablePoints, bounds, this.cutoffPlanes);\n    }\n\n","sourceOld":"    /** Determine if this endpoint intersects a specified plane.\n     *@param planetModel is the planet model.\n     *@param p is the plane.\n     *@param notablePoints are the points associated with the plane.\n     *@param bounds are any bounds which the intersection must lie within.\n     *@return true if there is a matching intersection.\n     */\n    public boolean intersects(final PlanetModel planetModel, final Plane p, final GeoPoint[] notablePoints, final Membership[] bounds) {\n      //System.err.println(\"  looking for intersection between plane \"+p+\" and circle \"+circlePlane+\" on proper side of \"+cutoffPlanes+\" within \"+bounds);\n      if (circlePlane == null)\n        return false;\n      return circlePlane.intersects(planetModel, p, notablePoints, this.notablePoints, bounds, this.cutoffPlanes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a71849bd31d150133a9a1027bf1607967b406c57":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a71849bd31d150133a9a1027bf1607967b406c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a71849bd31d150133a9a1027bf1607967b406c57":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a71849bd31d150133a9a1027bf1607967b406c57"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}