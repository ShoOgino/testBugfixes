{"path":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/search/analysis/HTMLStrategy#processIndexable(Indexable[#-extends-Node,#-extends-ServerBaseEntry]).mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/search/analysis/HTMLStrategy#processIndexable(Indexable[#-extends-Node,#-extends-ServerBaseEntry]).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/search/analysis/HTMLStrategy#processIndexable(Indexable[#-extends-Node,#-extends-ServerBaseEntry]).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.search.analysis.ContentStrategy#processIndexable(org.apache.lucene.gdata.search.analysis.Indexable)\n     */\n    @Override\n    public void processIndexable(Indexable<? extends Node, ? extends ServerBaseEntry> indexable)\n            throws NotIndexableException {\n        String path = this.config.getPath();\n        Node node = null;\n        try {\n            node = indexable.applyPath(path);\n        } catch (XPathExpressionException e1) {\n            throw new NotIndexableException(\"Can not apply path -- \" + path);\n\n        }\n        if(node == null)\n            throw new NotIndexableException(\"Could not retrieve content for schema field: \"+this.config);\n        StringReader contentReader = new StringReader(node.getTextContent());\n        /*\n         * remove all elements and script parts\n         */\n        ElementRemover remover = new ElementRemover();\n        remover.removeElement(REMOVE_SCRIPT);\n        StringWriter contentWriter = new StringWriter();\n        Writer writer = new Writer(contentWriter, CHAR_ENCODING);\n        XMLDocumentFilter[] filters = { remover, writer, };\n        XMLParserConfiguration parser = new HTMLConfiguration();\n        parser.setProperty(\"http://cyberneko.org/html/properties/filters\",\n                filters);\n        XMLInputSource source = new XMLInputSource(null, null, null,\n                contentReader, CHAR_ENCODING);\n        try {\n            parser.parse(source);\n        } catch (XNIException e) {\n            throw new NotIndexableException(\"Can not parse html -- \", e);\n\n        } catch (IOException e) {\n            throw new NotIndexableException(\"Can not parse html -- \", e);\n\n        }\n        this.content = contentWriter.toString();\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.search.analysis.ContentStrategy#processIndexable(org.apache.lucene.gdata.search.analysis.Indexable)\n     */\n    @Override\n    public void processIndexable(Indexable<? extends Node, ? extends ServerBaseEntry> indexable)\n            throws NotIndexableException {\n        String path = this.config.getPath();\n        Node node = null;\n        try {\n            node = indexable.applyPath(path);\n        } catch (XPathExpressionException e1) {\n            throw new NotIndexableException(\"Can not apply path -- \" + path);\n\n        }\n        if(node == null)\n            throw new NotIndexableException(\"Could not retrieve content for schema field: \"+this.config);\n        StringReader contentReader = new StringReader(node.getTextContent());\n        /*\n         * remove all elements and script parts\n         */\n        ElementRemover remover = new ElementRemover();\n        remover.removeElement(REMOVE_SCRIPT);\n        StringWriter contentWriter = new StringWriter();\n        Writer writer = new Writer(contentWriter, CHAR_ENCODING);\n        XMLDocumentFilter[] filters = { remover, writer, };\n        XMLParserConfiguration parser = new HTMLConfiguration();\n        parser.setProperty(\"http://cyberneko.org/html/properties/filters\",\n                filters);\n        XMLInputSource source = new XMLInputSource(null, null, null,\n                contentReader, CHAR_ENCODING);\n        try {\n            parser.parse(source);\n        } catch (XNIException e) {\n            throw new NotIndexableException(\"Can not parse html -- \", e);\n\n        } catch (IOException e) {\n            throw new NotIndexableException(\"Can not parse html -- \", e);\n\n        }\n        this.content = contentWriter.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/search/analysis/HTMLStrategy#processIndexable(Indexable[#-extends-Node,#-extends-ServerBaseEntry]).mjava","sourceNew":null,"sourceOld":"    /**\n     * @see org.apache.lucene.gdata.search.analysis.ContentStrategy#processIndexable(org.apache.lucene.gdata.search.analysis.Indexable)\n     */\n    @Override\n    public void processIndexable(Indexable<? extends Node, ? extends ServerBaseEntry> indexable)\n            throws NotIndexableException {\n        String path = this.config.getPath();\n        Node node = null;\n        try {\n            node = indexable.applyPath(path);\n        } catch (XPathExpressionException e1) {\n            throw new NotIndexableException(\"Can not apply path -- \" + path);\n\n        }\n        if(node == null)\n            throw new NotIndexableException(\"Could not retrieve content for schema field: \"+this.config);\n        StringReader contentReader = new StringReader(node.getTextContent());\n        /*\n         * remove all elements and script parts\n         */\n        ElementRemover remover = new ElementRemover();\n        remover.removeElement(REMOVE_SCRIPT);\n        StringWriter contentWriter = new StringWriter();\n        Writer writer = new Writer(contentWriter, CHAR_ENCODING);\n        XMLDocumentFilter[] filters = { remover, writer, };\n        XMLParserConfiguration parser = new HTMLConfiguration();\n        parser.setProperty(\"http://cyberneko.org/html/properties/filters\",\n                filters);\n        XMLInputSource source = new XMLInputSource(null, null, null,\n                contentReader, CHAR_ENCODING);\n        try {\n            parser.parse(source);\n        } catch (XNIException e) {\n            throw new NotIndexableException(\"Can not parse html -- \", e);\n\n        } catch (IOException e) {\n            throw new NotIndexableException(\"Can not parse html -- \", e);\n\n        }\n        this.content = contentWriter.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}