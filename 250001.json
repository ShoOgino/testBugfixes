{"path":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanationsWithFillerDocs#replaceIndex().mjava","commits":[{"id":"7c82b0d4b7bf499a159eeff92add20bac6599cc1","date":1465223716,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanationsWithFillerDocs#replaceIndex().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Replaces the index created by our superclass with a new one that includes a lot of docs filler docs.\n   * {@link #qtest} will account for these extra filler docs.\n   * @see #qtest\n   */\n  @BeforeClass\n  public static void replaceIndex() throws Exception {\n    EXTRA = random().nextBoolean() ? null : \"extra\";\n    PRE_FILLER_DOCS = TestUtil.nextInt(random(), 0, (NUM_FILLER_DOCS / 2));\n\n    // free up what our super class created that we won't be using\n    reader.close();\n    directory.close();\n    \n    directory = newDirectory();\n    try (RandomIndexWriter writer = new RandomIndexWriter(random(), directory, newIndexWriterConfig(analyzer).setMergePolicy(newLogMergePolicy()))) {\n\n      for (int filler = 0; filler < PRE_FILLER_DOCS; filler++) {\n        writer.addDocument(makeFillerDoc());\n      }\n      for (int i = 0; i < docFields.length; i++) {\n        writer.addDocument(createDoc(i));\n        \n        for (int filler = 0; filler < NUM_FILLER_DOCS; filler++) {\n          writer.addDocument(makeFillerDoc());\n        }\n      }\n      reader = writer.getReader();\n      searcher = newSearcher(reader);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanationsWithFillerDocs#replaceIndex().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Replaces the index created by our superclass with a new one that includes a lot of docs filler docs.\n   * {@link #qtest} will account for these extra filler docs.\n   * @see #qtest\n   */\n  @BeforeClass\n  public static void replaceIndex() throws Exception {\n    EXTRA = random().nextBoolean() ? null : \"extra\";\n    PRE_FILLER_DOCS = TestUtil.nextInt(random(), 0, (NUM_FILLER_DOCS / 2));\n\n    // free up what our super class created that we won't be using\n    reader.close();\n    directory.close();\n    \n    directory = newDirectory();\n    try (RandomIndexWriter writer = new RandomIndexWriter(random(), directory, newIndexWriterConfig(analyzer).setMergePolicy(newLogMergePolicy()))) {\n\n      for (int filler = 0; filler < PRE_FILLER_DOCS; filler++) {\n        writer.addDocument(makeFillerDoc());\n      }\n      for (int i = 0; i < docFields.length; i++) {\n        writer.addDocument(createDoc(i));\n        \n        for (int filler = 0; filler < NUM_FILLER_DOCS; filler++) {\n          writer.addDocument(makeFillerDoc());\n        }\n      }\n      reader = writer.getReader();\n      searcher = newSearcher(reader);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanationsWithFillerDocs#replaceIndex().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Replaces the index created by our superclass with a new one that includes a lot of docs filler docs.\n   * {@link #qtest} will account for these extra filler docs.\n   * @see #qtest\n   */\n  @BeforeClass\n  public static void replaceIndex() throws Exception {\n    EXTRA = random().nextBoolean() ? null : \"extra\";\n    PRE_FILLER_DOCS = TestUtil.nextInt(random(), 0, (NUM_FILLER_DOCS / 2));\n\n    // free up what our super class created that we won't be using\n    reader.close();\n    directory.close();\n    \n    directory = newDirectory();\n    try (RandomIndexWriter writer = new RandomIndexWriter(random(), directory, newIndexWriterConfig(analyzer).setMergePolicy(newLogMergePolicy()))) {\n\n      for (int filler = 0; filler < PRE_FILLER_DOCS; filler++) {\n        writer.addDocument(makeFillerDoc());\n      }\n      for (int i = 0; i < docFields.length; i++) {\n        writer.addDocument(createDoc(i));\n        \n        for (int filler = 0; filler < NUM_FILLER_DOCS; filler++) {\n          writer.addDocument(makeFillerDoc());\n        }\n      }\n      reader = writer.getReader();\n      searcher = newSearcher(reader);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c82b0d4b7bf499a159eeff92add20bac6599cc1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"191128ac5b85671b1671e2c857437694283b6ebf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c82b0d4b7bf499a159eeff92add20bac6599cc1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","191128ac5b85671b1671e2c857437694283b6ebf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["191128ac5b85671b1671e2c857437694283b6ebf"]},"commit2Childs":{"7c82b0d4b7bf499a159eeff92add20bac6599cc1":["191128ac5b85671b1671e2c857437694283b6ebf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c82b0d4b7bf499a159eeff92add20bac6599cc1","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"191128ac5b85671b1671e2c857437694283b6ebf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}