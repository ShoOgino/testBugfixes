{"path":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(ConfigSolr,SolrResourceLoader).mjava","commits":[{"id":"85a757d77b8686d261b25acf542b0037bf65d8fa","date":1367436352,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(ConfigSolr,SolrResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  private static LogWatcher createWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    String fname = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null);\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      if (fname == null) {\n        if (slf4jImpl.indexOf(\"Log4j\") > 0) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["67a3984e96a6326891a938106ddac7df68770c28","67a3984e96a6326891a938106ddac7df68770c28"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92a4da96826f502cf1a56a096929b37ce73e523a","date":1374584011,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      if (fname == null) {\n        if (slf4jImpl.indexOf(\"Log4j\") > 0) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private static LogWatcher createWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    String fname = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null);\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      if (fname == null) {\n        if (slf4jImpl.indexOf(\"Log4j\") > 0) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":5,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      if (fname == null) {\n        if (slf4jImpl.indexOf(\"Log4j\") > 0) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private static LogWatcher createWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    String fname = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null);\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      if (fname == null) {\n        if (slf4jImpl.indexOf(\"Log4j\") > 0) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["85a757d77b8686d261b25acf542b0037bf65d8fa","92a4da96826f502cf1a56a096929b37ce73e523a"],"92a4da96826f502cf1a56a096929b37ce73e523a":["85a757d77b8686d261b25acf542b0037bf65d8fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a757d77b8686d261b25acf542b0037bf65d8fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92a4da96826f502cf1a56a096929b37ce73e523a"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"92a4da96826f502cf1a56a096929b37ce73e523a":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a757d77b8686d261b25acf542b0037bf65d8fa"],"85a757d77b8686d261b25acf542b0037bf65d8fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","92a4da96826f502cf1a56a096929b37ce73e523a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}