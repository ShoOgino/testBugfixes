{"path":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteTerm(Term).mjava","commits":[{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteTerm(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#checkDeleteTerm(Term).mjava","sourceNew":"  // used only by assert\n  private boolean checkDeleteTerm(Term term) {\n    if (term != null) {\n      assert lastDeleteTerm == null || term.compareTo(lastDeleteTerm) > 0: \"lastTerm=\" + lastDeleteTerm + \" vs term=\" + term;\n    }\n    lastDeleteTerm = term;\n    return true;\n  }\n\n","sourceOld":"  // used only by assert\n  private boolean checkDeleteTerm(Term term) {\n    if (term != null) {\n      assert lastDeleteTerm == null || term.compareTo(lastDeleteTerm) > 0: \"lastTerm=\" + lastDeleteTerm + \" vs term=\" + term;\n    }\n    lastDeleteTerm = term;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteTerm(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#checkDeleteTerm(Term).mjava","sourceNew":"  // used only by assert\n  private boolean checkDeleteTerm(Term term) {\n    if (term != null) {\n      assert lastDeleteTerm == null || term.compareTo(lastDeleteTerm) > 0: \"lastTerm=\" + lastDeleteTerm + \" vs term=\" + term;\n    }\n    lastDeleteTerm = term;\n    return true;\n  }\n\n","sourceOld":"  // used only by assert\n  private boolean checkDeleteTerm(Term term) {\n    if (term != null) {\n      assert lastDeleteTerm == null || term.compareTo(lastDeleteTerm) > 0: \"lastTerm=\" + lastDeleteTerm + \" vs term=\" + term;\n    }\n    lastDeleteTerm = term;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteTerm(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#checkDeleteTerm(Term).mjava","sourceNew":"  // used only by assert\n  private boolean checkDeleteTerm(Term term) {\n    if (term != null) {\n      assert lastDeleteTerm == null || term.compareTo(lastDeleteTerm) > 0: \"lastTerm=\" + lastDeleteTerm + \" vs term=\" + term;\n    }\n    lastDeleteTerm = term;\n    return true;\n  }\n\n","sourceOld":"  // used only by assert\n  private boolean checkDeleteTerm(Term term) {\n    if (term != null) {\n      assert lastDeleteTerm == null || term.compareTo(lastDeleteTerm) > 0: \"lastTerm=\" + lastDeleteTerm + \" vs term=\" + term;\n    }\n    lastDeleteTerm = term;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2","date":1311898374,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteTerm(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteTerm(Term).mjava","sourceNew":"  // used only by assert\n  private boolean checkDeleteTerm(Term term) {\n    if (term != null) {\n      assert lastDeleteTerm == null || term.compareTo(lastDeleteTerm) > 0: \"lastTerm=\" + lastDeleteTerm + \" vs term=\" + term;\n    }\n    // TODO: we re-use term now in our merged iterable, but we shouldn't clone, instead copy for this assert\n    lastDeleteTerm = term == null ? null : new Term(term.field(), new BytesRef(term.bytes));\n    return true;\n  }\n\n","sourceOld":"  // used only by assert\n  private boolean checkDeleteTerm(Term term) {\n    if (term != null) {\n      assert lastDeleteTerm == null || term.compareTo(lastDeleteTerm) > 0: \"lastTerm=\" + lastDeleteTerm + \" vs term=\" + term;\n    }\n    lastDeleteTerm = term;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteTerm(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteTerm(Term).mjava","sourceNew":"  // used only by assert\n  private boolean checkDeleteTerm(Term term) {\n    if (term != null) {\n      assert lastDeleteTerm == null || term.compareTo(lastDeleteTerm) > 0: \"lastTerm=\" + lastDeleteTerm + \" vs term=\" + term;\n    }\n    // TODO: we re-use term now in our merged iterable, but we shouldn't clone, instead copy for this assert\n    lastDeleteTerm = term == null ? null : new Term(term.field(), BytesRef.deepCopyOf(term.bytes));\n    return true;\n  }\n\n","sourceOld":"  // used only by assert\n  private boolean checkDeleteTerm(Term term) {\n    if (term != null) {\n      assert lastDeleteTerm == null || term.compareTo(lastDeleteTerm) > 0: \"lastTerm=\" + lastDeleteTerm + \" vs term=\" + term;\n    }\n    // TODO: we re-use term now in our merged iterable, but we shouldn't clone, instead copy for this assert\n    lastDeleteTerm = term == null ? null : new Term(term.field(), new BytesRef(term.bytes));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteTerm(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteTerm(Term).mjava","sourceNew":"  // used only by assert\n  private boolean checkDeleteTerm(Term term) {\n    if (term != null) {\n      assert lastDeleteTerm == null || term.compareTo(lastDeleteTerm) > 0: \"lastTerm=\" + lastDeleteTerm + \" vs term=\" + term;\n    }\n    // TODO: we re-use term now in our merged iterable, but we shouldn't clone, instead copy for this assert\n    lastDeleteTerm = term == null ? null : new Term(term.field(), BytesRef.deepCopyOf(term.bytes));\n    return true;\n  }\n\n","sourceOld":"  // used only by assert\n  private boolean checkDeleteTerm(Term term) {\n    if (term != null) {\n      assert lastDeleteTerm == null || term.compareTo(lastDeleteTerm) > 0: \"lastTerm=\" + lastDeleteTerm + \" vs term=\" + term;\n    }\n    // TODO: we re-use term now in our merged iterable, but we shouldn't clone, instead copy for this assert\n    lastDeleteTerm = term == null ? null : new Term(term.field(), BytesRef.deepCopyOf(term.bytes));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["c19f985e36a65cc969e8e564fe337a0d41512075"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e6e919043fa85ee891123768dd655a98edbbf63c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6e919043fa85ee891123768dd655a98edbbf63c":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"c19f985e36a65cc969e8e564fe337a0d41512075":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["e6e919043fa85ee891123768dd655a98edbbf63c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","c19f985e36a65cc969e8e564fe337a0d41512075","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"e6e919043fa85ee891123768dd655a98edbbf63c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}