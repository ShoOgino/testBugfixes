{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#logCollectionStateSummary(String,ZkStateReader).mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#logCollectionStateSummary(String,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  private static void logCollectionStateSummary(String collectionName, ZkStateReader zkStateReader) {\n    Pattern portPattern = Pattern.compile(\".*:([0-9]*).*\");\n    DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n    if (docCollection == null) {\n      monkeyLog(\"Could not find collection {}\", collectionName);\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Collection status: {\");\n    for (Slice slice:docCollection.getSlices()) {\n      builder.append(slice.getName() + \": {\");\n      for (Replica replica:slice.getReplicas()) {\n        log.info(replica.toString());\n        java.util.regex.Matcher m = portPattern.matcher(replica.getBaseUrl());\n        m.find();\n        String jettyPort = m.group(1);\n        builder.append(String.format(Locale.ROOT, \"%s(%s): {state: %s, type: %s, leader: %s, Live: %s}, \", \n            replica.getName(), jettyPort, replica.getState(), replica.getType(), (replica.get(\"leader\")!= null), zkStateReader.getClusterState().liveNodesContain(replica.getNodeName())));\n      }\n      if (slice.getReplicas().size() > 0) {\n        builder.setLength(builder.length() - 2);\n      }\n      builder.append(\"}, \");\n    }\n    if (docCollection.getSlices().size() > 0) {\n      builder.setLength(builder.length() - 2);\n    }\n    builder.append(\"}\");\n    monkeyLog(builder.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#logCollectionStateSummary(String,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  private static void logCollectionStateSummary(String collectionName, ZkStateReader zkStateReader) {\n    Pattern portPattern = Pattern.compile(\".*:([0-9]*).*\");\n    DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n    if (docCollection == null) {\n      monkeyLog(\"Could not find collection {}\", collectionName);\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Collection status: {\");\n    for (Slice slice:docCollection.getSlices()) {\n      builder.append(slice.getName() + \": {\");\n      for (Replica replica:slice.getReplicas()) {\n        log.info(replica.toString());\n        java.util.regex.Matcher m = portPattern.matcher(replica.getBaseUrl());\n        m.find();\n        String jettyPort = m.group(1);\n        builder.append(String.format(Locale.ROOT, \"%s(%s): {state: %s, type: %s, leader: %s, Live: %s}, \", \n            replica.getName(), jettyPort, replica.getState(), replica.getType(), (replica.get(\"leader\")!= null), zkStateReader.getClusterState().liveNodesContain(replica.getNodeName())));\n      }\n      if (slice.getReplicas().size() > 0) {\n        builder.setLength(builder.length() - 2);\n      }\n      builder.append(\"}, \");\n    }\n    if (docCollection.getSlices().size() > 0) {\n      builder.setLength(builder.length() - 2);\n    }\n    builder.append(\"}\");\n    monkeyLog(builder.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#logCollectionStateSummary(String,ZkStateReader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#logCollectionStateSummary(String,ZkStateReader).mjava","sourceNew":"  private static void logCollectionStateSummary(String collectionName, ZkStateReader zkStateReader) {\n    Pattern portPattern = Pattern.compile(\".*:([0-9]*).*\");\n    DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n    if (docCollection == null) {\n      monkeyLog(\"Could not find collection {}\", collectionName);\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Collection status: {\");\n    for (Slice slice:docCollection.getSlices()) {\n      builder.append(slice.getName()).append(\": {\");\n      for (Replica replica:slice.getReplicas()) {\n        log.info(replica.toString());\n        java.util.regex.Matcher m = portPattern.matcher(replica.getBaseUrl());\n        m.find();\n        String jettyPort = m.group(1);\n        builder.append(String.format(Locale.ROOT, \"%s(%s): {state: %s, type: %s, leader: %s, Live: %s}, \", \n            replica.getName(), jettyPort, replica.getState(), replica.getType(), (replica.get(\"leader\")!= null), zkStateReader.getClusterState().liveNodesContain(replica.getNodeName())));\n      }\n      if (slice.getReplicas().size() > 0) {\n        builder.setLength(builder.length() - 2);\n      }\n      builder.append(\"}, \");\n    }\n    if (docCollection.getSlices().size() > 0) {\n      builder.setLength(builder.length() - 2);\n    }\n    builder.append(\"}\");\n    monkeyLog(builder.toString());\n  }\n\n","sourceOld":"  private static void logCollectionStateSummary(String collectionName, ZkStateReader zkStateReader) {\n    Pattern portPattern = Pattern.compile(\".*:([0-9]*).*\");\n    DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n    if (docCollection == null) {\n      monkeyLog(\"Could not find collection {}\", collectionName);\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Collection status: {\");\n    for (Slice slice:docCollection.getSlices()) {\n      builder.append(slice.getName() + \": {\");\n      for (Replica replica:slice.getReplicas()) {\n        log.info(replica.toString());\n        java.util.regex.Matcher m = portPattern.matcher(replica.getBaseUrl());\n        m.find();\n        String jettyPort = m.group(1);\n        builder.append(String.format(Locale.ROOT, \"%s(%s): {state: %s, type: %s, leader: %s, Live: %s}, \", \n            replica.getName(), jettyPort, replica.getState(), replica.getType(), (replica.get(\"leader\")!= null), zkStateReader.getClusterState().liveNodesContain(replica.getNodeName())));\n      }\n      if (slice.getReplicas().size() > 0) {\n        builder.setLength(builder.length() - 2);\n      }\n      builder.append(\"}, \");\n    }\n    if (docCollection.getSlices().size() > 0) {\n      builder.setLength(builder.length() - 2);\n    }\n    builder.append(\"}\");\n    monkeyLog(builder.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#logCollectionStateSummary(String,ZkStateReader).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#logCollectionStateSummary(String,ZkStateReader).mjava","sourceNew":"  private static void logCollectionStateSummary(String collectionName, ZkStateReader zkStateReader) {\n    Pattern portPattern = Pattern.compile(\".*:([0-9]*).*\");\n    DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n    if (docCollection == null) {\n      monkeyLog(\"Could not find collection {}\", collectionName);\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Collection status: {\");\n    for (Slice slice:docCollection.getSlices()) {\n      builder.append(slice.getName()).append(\": {\");\n      for (Replica replica:slice.getReplicas()) {\n        log.info(\"{}\", replica);\n        java.util.regex.Matcher m = portPattern.matcher(replica.getBaseUrl());\n        m.find();\n        String jettyPort = m.group(1);\n        builder.append(String.format(Locale.ROOT, \"%s(%s): {state: %s, type: %s, leader: %s, Live: %s}, \", \n            replica.getName(), jettyPort, replica.getState(), replica.getType(), (replica.get(\"leader\")!= null), zkStateReader.getClusterState().liveNodesContain(replica.getNodeName())));\n      }\n      if (slice.getReplicas().size() > 0) {\n        builder.setLength(builder.length() - 2);\n      }\n      builder.append(\"}, \");\n    }\n    if (docCollection.getSlices().size() > 0) {\n      builder.setLength(builder.length() - 2);\n    }\n    builder.append(\"}\");\n    monkeyLog(builder.toString());\n  }\n\n","sourceOld":"  private static void logCollectionStateSummary(String collectionName, ZkStateReader zkStateReader) {\n    Pattern portPattern = Pattern.compile(\".*:([0-9]*).*\");\n    DocCollection docCollection = zkStateReader.getClusterState().getCollection(collectionName);\n    if (docCollection == null) {\n      monkeyLog(\"Could not find collection {}\", collectionName);\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Collection status: {\");\n    for (Slice slice:docCollection.getSlices()) {\n      builder.append(slice.getName()).append(\": {\");\n      for (Replica replica:slice.getReplicas()) {\n        log.info(replica.toString());\n        java.util.regex.Matcher m = portPattern.matcher(replica.getBaseUrl());\n        m.find();\n        String jettyPort = m.group(1);\n        builder.append(String.format(Locale.ROOT, \"%s(%s): {state: %s, type: %s, leader: %s, Live: %s}, \", \n            replica.getName(), jettyPort, replica.getState(), replica.getType(), (replica.get(\"leader\")!= null), zkStateReader.getClusterState().liveNodesContain(replica.getNodeName())));\n      }\n      if (slice.getReplicas().size() > 0) {\n        builder.setLength(builder.length() - 2);\n      }\n      builder.append(\"}, \");\n    }\n    if (docCollection.getSlices().size() > 0) {\n      builder.setLength(builder.length() - 2);\n    }\n    builder.append(\"}\");\n    monkeyLog(builder.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"2ffe681f212e5073c69955b4ad22946794c84940":["61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["2ffe681f212e5073c69955b4ad22946794c84940"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","2ffe681f212e5073c69955b4ad22946794c84940"],"2ffe681f212e5073c69955b4ad22946794c84940":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}