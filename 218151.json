{"path":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(ConfigSolr,SolrResourceLoader).mjava","commits":[{"id":"85a757d77b8686d261b25acf542b0037bf65d8fa","date":1367436352,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(ConfigSolr,SolrResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config the CoreContainer's config, with logging configuration details\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    if (!config.getBool(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, true))\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      ListenerConfig v = new ListenerConfig();\n      v.size = config.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 50);\n      v.threshold = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, null);\n      if (v.size > 0) {\n        log.info(\"Registering Log Listener\");\n        logWatcher.registerListener(v);\n      }\n    }\n\n    return logWatcher;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(ConfigSolr,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config the CoreContainer's config, with logging configuration details\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    if (!config.getBool(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, true))\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      ListenerConfig v = new ListenerConfig();\n      v.size = config.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 50);\n      v.threshold = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, null);\n      if (v.size > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(v);\n      }\n    }\n\n    return logWatcher;\n  }\n\n","sourceOld":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config the CoreContainer's config, with logging configuration details\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    if (!config.getBool(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, true))\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      ListenerConfig v = new ListenerConfig();\n      v.size = config.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 50);\n      v.threshold = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, null);\n      if (v.size > 0) {\n        log.info(\"Registering Log Listener\");\n        logWatcher.registerListener(v);\n      }\n    }\n\n    return logWatcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(ConfigSolr,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config the CoreContainer's config, with logging configuration details\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    if (!config.getBool(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, true))\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      ListenerConfig v = new ListenerConfig();\n      v.size = config.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 50);\n      v.threshold = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, null);\n      if (v.size > 0) {\n        log.info(\"Registering Log Listener\");\n        logWatcher.registerListener(v);\n      }\n    }\n\n    return logWatcher;\n  }\n\n","sourceOld":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config the CoreContainer's config, with logging configuration details\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    if (!config.getBool(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, true))\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      ListenerConfig v = new ListenerConfig();\n      v.size = config.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 50);\n      v.threshold = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, null);\n      if (v.size > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(v);\n      }\n    }\n\n    return logWatcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(ConfigSolr,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config the CoreContainer's config, with logging configuration details\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    if (!config.getBool(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, true))\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      ListenerConfig v = new ListenerConfig();\n      v.size = config.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 50);\n      v.threshold = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, null);\n      if (v.size > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(v);\n      }\n    }\n\n    return logWatcher;\n  }\n\n","sourceOld":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config the CoreContainer's config, with logging configuration details\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    if (!config.getBool(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, true))\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      ListenerConfig v = new ListenerConfig();\n      v.size = config.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 50);\n      v.threshold = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, null);\n      if (v.size > 0) {\n        log.info(\"Registering Log Listener\");\n        logWatcher.registerListener(v);\n      }\n    }\n\n    return logWatcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(ConfigSolr,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config the CoreContainer's config, with logging configuration details\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    if (!config.getBool(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, true))\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      ListenerConfig v = new ListenerConfig();\n      v.size = config.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 50);\n      v.threshold = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, null);\n      if (v.size > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(v);\n      }\n    }\n\n    return logWatcher;\n  }\n\n","sourceOld":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config the CoreContainer's config, with logging configuration details\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    if (!config.getBool(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, true))\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      ListenerConfig v = new ListenerConfig();\n      v.size = config.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 50);\n      v.threshold = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, null);\n      if (v.size > 0) {\n        log.info(\"Registering Log Listener\");\n        logWatcher.registerListener(v);\n      }\n    }\n\n    return logWatcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92a4da96826f502cf1a56a096929b37ce73e523a","date":1374584011,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled())\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","sourceOld":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config the CoreContainer's config, with logging configuration details\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    if (!config.getBool(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, true))\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      ListenerConfig v = new ListenerConfig();\n      v.size = config.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 50);\n      v.threshold = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, null);\n      if (v.size > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(v);\n      }\n    }\n\n    return logWatcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":5,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#newRegisteredLogWatcher(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config a LogWatcherConfig object, containing the configuration for this LogWatcher.\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    if (!config.isEnabled())\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      if (config.getWatcherSize() > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(config.asListenerConfig());\n      }\n    }\n\n    return logWatcher;\n  }\n\n","sourceOld":"  /**\n   * Create and register a LogWatcher.\n   *\n   * JUL and Log4j watchers are supported out-of-the-box.  You can register your own\n   * LogWatcher implementation via the plugins architecture\n   *\n   * @param config the CoreContainer's config, with logging configuration details\n   * @param loader a SolrResourceLoader, to be used to load plugin LogWatcher implementations.\n   *               Can be null if\n   *\n   * @return a LogWatcher configured for the container's logging framework\n   */\n  public static LogWatcher newRegisteredLogWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    if (!config.getBool(ConfigSolr.CfgProp.SOLR_LOGGING_ENABLED, true))\n      return null;\n\n    LogWatcher logWatcher = createWatcher(config, loader);\n\n    if (logWatcher != null) {\n      ListenerConfig v = new ListenerConfig();\n      v.size = config.getInt(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_SIZE, 50);\n      v.threshold = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_WATCHER_THRESHOLD, null);\n      if (v.size > 0) {\n        log.info(\"Registering Log Listener [{}]\", logWatcher.getName());\n        logWatcher.registerListener(v);\n      }\n    }\n\n    return logWatcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","92a4da96826f502cf1a56a096929b37ce73e523a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["85a757d77b8686d261b25acf542b0037bf65d8fa","7116474e2e390259937401cf928323e0cbc75e60"],"92a4da96826f502cf1a56a096929b37ce73e523a":["7116474e2e390259937401cf928323e0cbc75e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"85a757d77b8686d261b25acf542b0037bf65d8fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d264f386d864b5751209060e8886ca9845f70469":["85a757d77b8686d261b25acf542b0037bf65d8fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92a4da96826f502cf1a56a096929b37ce73e523a"]},"commit2Childs":{"7116474e2e390259937401cf928323e0cbc75e60":["37a0f60745e53927c4c876cfe5b5a58170f0646c","92a4da96826f502cf1a56a096929b37ce73e523a"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"92a4da96826f502cf1a56a096929b37ce73e523a":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a757d77b8686d261b25acf542b0037bf65d8fa"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"85a757d77b8686d261b25acf542b0037bf65d8fa":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}