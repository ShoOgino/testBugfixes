{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String,String).mjava","commits":[{"id":"daa9f76a48e97bb2d40fc67ecdaad33d166d596e","date":1488856307,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestDatePointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    String baseDate = \"1995-01-10T10:59:10Z\";\n    for (int i = 0; i < 10; i++) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, date, nonDvFieldName, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,\" + dvFieldName + \") asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:20Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", ms(\" + dvFieldName + \",\"+baseDate+\")\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:20Z']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\",\n        \"sort param could not be parsed as a query\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["02cc739d6621fdfc3991bde01ae8ef5cbdb46925"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"330274305237bd6f93e7ee021669f797394127b1","date":1489510162,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String,String).mjava","sourceNew":"  private void doTestDatePointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    String baseDate = \"1995-01-10T10:59:10Z\";\n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, date, nonDvFieldName, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,ms(\" + dvFieldName + \")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", ms(\" + dvFieldName + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:20Z']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\",\n        \"sort param could not be parsed as a query\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void doTestDatePointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    String baseDate = \"1995-01-10T10:59:10Z\";\n    for (int i = 0; i < 10; i++) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, date, nonDvFieldName, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,\" + dvFieldName + \") asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:20Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", ms(\" + dvFieldName + \",\"+baseDate+\")\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:20Z']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\",\n        \"sort param could not be parsed as a query\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02cc739d6621fdfc3991bde01ae8ef5cbdb46925","date":1489651910,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String,String).mjava","sourceNew":"  private void doTestDatePointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    String baseDate = \"1995-01-10T10:59:10Z\";\n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, date, nonDvFieldName, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,ms(\" + dvFieldName + \")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", ms(\" + dvFieldName + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:20Z']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\",\n        \"sort param could not be parsed as a query\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void doTestDatePointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    String baseDate = \"1995-01-10T10:59:10Z\";\n    for (int i = 0; i < 10; i++) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, date, nonDvFieldName, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,\" + dvFieldName + \") asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:20Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", ms(\" + dvFieldName + \",\"+baseDate+\")\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:20Z']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\",\n        \"sort param could not be parsed as a query\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String,String).mjava","sourceNew":"  private void doTestDatePointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    String baseDate = \"1995-01-10T10:59:10Z\";\n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, date, nonDvFieldName, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,ms(\" + dvFieldName + \")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", ms(\" + dvFieldName + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:20Z']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\",\n        \"sort param could not be parsed as a query\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void doTestDatePointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    String baseDate = \"1995-01-10T10:59:10Z\";\n    for (int i = 0; i < 10; i++) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, date, nonDvFieldName, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,\" + dvFieldName + \") asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:20Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", ms(\" + dvFieldName + \",\"+baseDate+\")\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:20Z']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\",\n        \"sort param could not be parsed as a query\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79900e89f08cc17c4bcf49789dd61a2236ee7840","date":1492541915,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String,String).mjava","sourceNew":null,"sourceOld":"  private void doTestDatePointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    String baseDate = \"1995-01-10T10:59:10Z\";\n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, date, nonDvFieldName, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,ms(\" + dvFieldName + \")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", ms(\" + dvFieldName + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:20Z']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\",\n        \"sort param could not be parsed as a query\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String,String,String).mjava","sourceNew":null,"sourceOld":"  private void doTestDatePointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {\n    String baseDate = \"1995-01-10T10:59:10Z\";\n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, date, nonDvFieldName, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"sort\", \"product(-1,ms(\" + dvFieldName + \")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + dvFieldName + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", ms(\" + dvFieldName + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + dvFieldName + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName + \", field(\" + dvFieldName + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/\" + type + \"[@name='field(\" + dvFieldName + \")'][.='1995-01-10T10:59:20Z']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);\n\n    assertQEx(\"Expecting Exception\",\n        \"sort param could not be parsed as a query\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDvFieldName, \"sort\", \"product(-1,\" + nonDvFieldName + \") asc\"),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ab68488225b6a6c357dda72ed11dedca9914a192"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["330274305237bd6f93e7ee021669f797394127b1"],"ab68488225b6a6c357dda72ed11dedca9914a192":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e","02cc739d6621fdfc3991bde01ae8ef5cbdb46925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"330274305237bd6f93e7ee021669f797394127b1":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"02cc739d6621fdfc3991bde01ae8ef5cbdb46925":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["ab68488225b6a6c357dda72ed11dedca9914a192","330274305237bd6f93e7ee021669f797394127b1","02cc739d6621fdfc3991bde01ae8ef5cbdb46925"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab68488225b6a6c357dda72ed11dedca9914a192":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"330274305237bd6f93e7ee021669f797394127b1":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"02cc739d6621fdfc3991bde01ae8ef5cbdb46925":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}