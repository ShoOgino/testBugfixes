{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#checkDiskSpace(String,String,Replica,SolrIndexSplitter.SplitMethod,SolrCloudManager).mjava","commits":[{"id":"8f79e6c597ec19b2f9669589153faac2f803462a","date":1575984097,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#checkDiskSpace(String,String,Replica,SolrIndexSplitter.SplitMethod,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#checkDiskSpace(String,String,Replica).mjava","sourceNew":"  // public and static to facilitate reuse in the simulation framework and in tests\n  public static void checkDiskSpace(String collection, String shard, Replica parentShardLeader, SolrIndexSplitter.SplitMethod method, SolrCloudManager cloudManager) throws SolrException {\n    // check that enough disk space is available on the parent leader node\n    // otherwise the actual index splitting will always fail\n    NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n    Map<String, Object> nodeValues = nodeStateProvider.getNodeValues(parentShardLeader.getNodeName(),\n        Collections.singletonList(ImplicitSnitch.DISK));\n    Map<String, Map<String, List<ReplicaInfo>>> infos = nodeStateProvider.getReplicaInfo(parentShardLeader.getNodeName(),\n        Collections.singletonList(Type.CORE_IDX.metricsAttribute));\n    if (infos.get(collection) == null || infos.get(collection).get(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing replica information for parent shard leader\");\n    }\n    // find the leader\n    List<ReplicaInfo> lst = infos.get(collection).get(shard);\n    Double indexSize = null;\n    for (ReplicaInfo info : lst) {\n      if (info.getCore().equals(parentShardLeader.getCoreName())) {\n        Number size = (Number)info.getVariable(Type.CORE_IDX.metricsAttribute);\n        if (size == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing index size information for parent shard leader\");\n        }\n        indexSize = (Double) Type.CORE_IDX.convertVal(size);\n        break;\n      }\n    }\n    if (indexSize == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing replica information for parent shard leader\");\n    }\n    Number freeSize = (Number)nodeValues.get(ImplicitSnitch.DISK);\n    if (freeSize == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing node disk space information for parent shard leader\");\n    }\n    // 100% more for REWRITE, 5% more for LINK\n    double neededSpace = method == SolrIndexSplitter.SplitMethod.REWRITE ? 2.0 * indexSize : 1.05 * indexSize;\n    if (freeSize.doubleValue() < neededSpace) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"not enough free disk space to perform index split on node \" +\n          parentShardLeader.getNodeName() + \", required: \" + neededSpace + \", available: \" + freeSize);\n    }\n  }\n\n","sourceOld":"  private void checkDiskSpace(String collection, String shard, Replica parentShardLeader) throws SolrException {\n    // check that enough disk space is available on the parent leader node\n    // otherwise the actual index splitting will always fail\n    NodeStateProvider nodeStateProvider = ocmh.cloudManager.getNodeStateProvider();\n    Map<String, Object> nodeValues = nodeStateProvider.getNodeValues(parentShardLeader.getNodeName(),\n        Collections.singletonList(ImplicitSnitch.DISK));\n    Map<String, Map<String, List<ReplicaInfo>>> infos = nodeStateProvider.getReplicaInfo(parentShardLeader.getNodeName(),\n        Collections.singletonList(Type.CORE_IDX.metricsAttribute));\n    if (infos.get(collection) == null || infos.get(collection).get(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing replica information for parent shard leader\");\n    }\n    // find the leader\n    List<ReplicaInfo> lst = infos.get(collection).get(shard);\n    Double indexSize = null;\n    for (ReplicaInfo info : lst) {\n      if (info.getCore().equals(parentShardLeader.getCoreName())) {\n        Number size = (Number)info.getVariable(Type.CORE_IDX.metricsAttribute);\n        if (size == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing index size information for parent shard leader\");\n        }\n        indexSize = (Double) Type.CORE_IDX.convertVal(size);\n        break;\n      }\n    }\n    if (indexSize == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing replica information for parent shard leader\");\n    }\n    Number freeSize = (Number)nodeValues.get(ImplicitSnitch.DISK);\n    if (freeSize == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing node disk space information for parent shard leader\");\n    }\n    if (freeSize.doubleValue() < 2.0 * indexSize) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"not enough free disk space to perform index split on node \" +\n          parentShardLeader.getNodeName() + \", required: \" + (2 * indexSize) + \", available: \" + freeSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"993b0c7dda6341b437fe5685d35c6cc35eaac420","date":1575985950,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#checkDiskSpace(String,String,Replica,SolrIndexSplitter.SplitMethod,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#checkDiskSpace(String,String,Replica).mjava","sourceNew":"  // public and static to facilitate reuse in the simulation framework and in tests\n  public static void checkDiskSpace(String collection, String shard, Replica parentShardLeader, SolrIndexSplitter.SplitMethod method, SolrCloudManager cloudManager) throws SolrException {\n    // check that enough disk space is available on the parent leader node\n    // otherwise the actual index splitting will always fail\n    NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n    Map<String, Object> nodeValues = nodeStateProvider.getNodeValues(parentShardLeader.getNodeName(),\n        Collections.singletonList(ImplicitSnitch.DISK));\n    Map<String, Map<String, List<ReplicaInfo>>> infos = nodeStateProvider.getReplicaInfo(parentShardLeader.getNodeName(),\n        Collections.singletonList(Type.CORE_IDX.metricsAttribute));\n    if (infos.get(collection) == null || infos.get(collection).get(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing replica information for parent shard leader\");\n    }\n    // find the leader\n    List<ReplicaInfo> lst = infos.get(collection).get(shard);\n    Double indexSize = null;\n    for (ReplicaInfo info : lst) {\n      if (info.getCore().equals(parentShardLeader.getCoreName())) {\n        Number size = (Number)info.getVariable(Type.CORE_IDX.metricsAttribute);\n        if (size == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing index size information for parent shard leader\");\n        }\n        indexSize = (Double) Type.CORE_IDX.convertVal(size);\n        break;\n      }\n    }\n    if (indexSize == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing replica information for parent shard leader\");\n    }\n    Number freeSize = (Number)nodeValues.get(ImplicitSnitch.DISK);\n    if (freeSize == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing node disk space information for parent shard leader\");\n    }\n    // 100% more for REWRITE, 5% more for LINK\n    double neededSpace = method == SolrIndexSplitter.SplitMethod.REWRITE ? 2.0 * indexSize : 1.05 * indexSize;\n    if (freeSize.doubleValue() < neededSpace) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"not enough free disk space to perform index split on node \" +\n          parentShardLeader.getNodeName() + \", required: \" + neededSpace + \", available: \" + freeSize);\n    }\n  }\n\n","sourceOld":"  private void checkDiskSpace(String collection, String shard, Replica parentShardLeader) throws SolrException {\n    // check that enough disk space is available on the parent leader node\n    // otherwise the actual index splitting will always fail\n    NodeStateProvider nodeStateProvider = ocmh.cloudManager.getNodeStateProvider();\n    Map<String, Object> nodeValues = nodeStateProvider.getNodeValues(parentShardLeader.getNodeName(),\n        Collections.singletonList(ImplicitSnitch.DISK));\n    Map<String, Map<String, List<ReplicaInfo>>> infos = nodeStateProvider.getReplicaInfo(parentShardLeader.getNodeName(),\n        Collections.singletonList(Type.CORE_IDX.metricsAttribute));\n    if (infos.get(collection) == null || infos.get(collection).get(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing replica information for parent shard leader\");\n    }\n    // find the leader\n    List<ReplicaInfo> lst = infos.get(collection).get(shard);\n    Double indexSize = null;\n    for (ReplicaInfo info : lst) {\n      if (info.getCore().equals(parentShardLeader.getCoreName())) {\n        Number size = (Number)info.getVariable(Type.CORE_IDX.metricsAttribute);\n        if (size == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing index size information for parent shard leader\");\n        }\n        indexSize = (Double) Type.CORE_IDX.convertVal(size);\n        break;\n      }\n    }\n    if (indexSize == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing replica information for parent shard leader\");\n    }\n    Number freeSize = (Number)nodeValues.get(ImplicitSnitch.DISK);\n    if (freeSize == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing node disk space information for parent shard leader\");\n    }\n    if (freeSize.doubleValue() < 2.0 * indexSize) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"not enough free disk space to perform index split on node \" +\n          parentShardLeader.getNodeName() + \", required: \" + (2 * indexSize) + \", available: \" + freeSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#checkDiskSpace(String,String,Replica,SolrIndexSplitter.SplitMethod,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#checkDiskSpace(String,String,Replica,SolrIndexSplitter.SplitMethod,SolrCloudManager).mjava","sourceNew":"  // public and static to facilitate reuse in the simulation framework and in tests\n  public static void checkDiskSpace(String collection, String shard, Replica parentShardLeader, SolrIndexSplitter.SplitMethod method, SolrCloudManager cloudManager) throws SolrException {\n    // check that enough disk space is available on the parent leader node\n    // otherwise the actual index splitting will always fail\n    NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n    Map<String, Object> nodeValues = nodeStateProvider.getNodeValues(parentShardLeader.getNodeName(),\n        Collections.singletonList(ImplicitSnitch.DISK));\n    Map<String, Map<String, List<Replica>>> infos = nodeStateProvider.getReplicaInfo(parentShardLeader.getNodeName(),\n        Collections.singletonList(Type.CORE_IDX.metricsAttribute));\n    if (infos.get(collection) == null || infos.get(collection).get(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing replica information for parent shard leader\");\n    }\n    // find the leader\n    List<Replica> lst = infos.get(collection).get(shard);\n    Double indexSize = null;\n    for (Replica info : lst) {\n      if (info.getCoreName().equals(parentShardLeader.getCoreName())) {\n        Number size = (Number)info.get(Type.CORE_IDX.metricsAttribute);\n        if (size == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing index size information for parent shard leader\");\n        }\n        indexSize = (Double) Type.CORE_IDX.convertVal(size);\n        break;\n      }\n    }\n    if (indexSize == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing replica information for parent shard leader\");\n    }\n    Number freeSize = (Number)nodeValues.get(ImplicitSnitch.DISK);\n    if (freeSize == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing node disk space information for parent shard leader\");\n    }\n    // 100% more for REWRITE, 5% more for LINK\n    double neededSpace = method == SolrIndexSplitter.SplitMethod.REWRITE ? 2.0 * indexSize : 1.05 * indexSize;\n    if (freeSize.doubleValue() < neededSpace) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"not enough free disk space to perform index split on node \" +\n          parentShardLeader.getNodeName() + \", required: \" + neededSpace + \", available: \" + freeSize);\n    }\n  }\n\n","sourceOld":"  // public and static to facilitate reuse in the simulation framework and in tests\n  public static void checkDiskSpace(String collection, String shard, Replica parentShardLeader, SolrIndexSplitter.SplitMethod method, SolrCloudManager cloudManager) throws SolrException {\n    // check that enough disk space is available on the parent leader node\n    // otherwise the actual index splitting will always fail\n    NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n    Map<String, Object> nodeValues = nodeStateProvider.getNodeValues(parentShardLeader.getNodeName(),\n        Collections.singletonList(ImplicitSnitch.DISK));\n    Map<String, Map<String, List<ReplicaInfo>>> infos = nodeStateProvider.getReplicaInfo(parentShardLeader.getNodeName(),\n        Collections.singletonList(Type.CORE_IDX.metricsAttribute));\n    if (infos.get(collection) == null || infos.get(collection).get(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing replica information for parent shard leader\");\n    }\n    // find the leader\n    List<ReplicaInfo> lst = infos.get(collection).get(shard);\n    Double indexSize = null;\n    for (ReplicaInfo info : lst) {\n      if (info.getCore().equals(parentShardLeader.getCoreName())) {\n        Number size = (Number)info.getVariable(Type.CORE_IDX.metricsAttribute);\n        if (size == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing index size information for parent shard leader\");\n        }\n        indexSize = (Double) Type.CORE_IDX.convertVal(size);\n        break;\n      }\n    }\n    if (indexSize == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing replica information for parent shard leader\");\n    }\n    Number freeSize = (Number)nodeValues.get(ImplicitSnitch.DISK);\n    if (freeSize == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing node disk space information for parent shard leader\");\n    }\n    // 100% more for REWRITE, 5% more for LINK\n    double neededSpace = method == SolrIndexSplitter.SplitMethod.REWRITE ? 2.0 * indexSize : 1.05 * indexSize;\n    if (freeSize.doubleValue() < neededSpace) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"not enough free disk space to perform index split on node \" +\n          parentShardLeader.getNodeName() + \", required: \" + neededSpace + \", available: \" + freeSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#checkDiskSpace(String,String,Replica,SolrIndexSplitter.SplitMethod,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#checkDiskSpace(String,String,Replica,SolrIndexSplitter.SplitMethod,SolrCloudManager).mjava","sourceNew":"  // public and static to facilitate reuse in the simulation framework and in tests\n  public static void checkDiskSpace(String collection, String shard, Replica parentShardLeader, SolrIndexSplitter.SplitMethod method, SolrCloudManager cloudManager) throws SolrException {\n    // check that enough disk space is available on the parent leader node\n    // otherwise the actual index splitting will always fail\n    NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n    Map<String, Object> nodeValues = nodeStateProvider.getNodeValues(parentShardLeader.getNodeName(),\n        Collections.singletonList(ImplicitSnitch.DISK));\n    Map<String, Map<String, List<Replica>>> infos = nodeStateProvider.getReplicaInfo(parentShardLeader.getNodeName(),\n        Collections.singletonList(CORE_IDX.metricsAttribute));\n    if (infos.get(collection) == null || infos.get(collection).get(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing replica information for parent shard leader\");\n    }\n    // find the leader\n    List<Replica> lst = infos.get(collection).get(shard);\n    Double indexSize = null;\n    for (Replica info : lst) {\n      if (info.getCoreName().equals(parentShardLeader.getCoreName())) {\n        Number size = (Number)info.get( CORE_IDX.metricsAttribute);\n        if (size == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing index size information for parent shard leader\");\n        }\n        indexSize = (Double) CORE_IDX.convertVal(size);\n        break;\n      }\n    }\n    if (indexSize == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing replica information for parent shard leader\");\n    }\n    Number freeSize = (Number)nodeValues.get(ImplicitSnitch.DISK);\n    if (freeSize == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing node disk space information for parent shard leader\");\n    }\n    // 100% more for REWRITE, 5% more for LINK\n    double neededSpace = method == SolrIndexSplitter.SplitMethod.REWRITE ? 2.0 * indexSize : 1.05 * indexSize;\n    if (freeSize.doubleValue() < neededSpace) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"not enough free disk space to perform index split on node \" +\n          parentShardLeader.getNodeName() + \", required: \" + neededSpace + \", available: \" + freeSize);\n    }\n  }\n\n","sourceOld":"  // public and static to facilitate reuse in the simulation framework and in tests\n  public static void checkDiskSpace(String collection, String shard, Replica parentShardLeader, SolrIndexSplitter.SplitMethod method, SolrCloudManager cloudManager) throws SolrException {\n    // check that enough disk space is available on the parent leader node\n    // otherwise the actual index splitting will always fail\n    NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n    Map<String, Object> nodeValues = nodeStateProvider.getNodeValues(parentShardLeader.getNodeName(),\n        Collections.singletonList(ImplicitSnitch.DISK));\n    Map<String, Map<String, List<Replica>>> infos = nodeStateProvider.getReplicaInfo(parentShardLeader.getNodeName(),\n        Collections.singletonList(Type.CORE_IDX.metricsAttribute));\n    if (infos.get(collection) == null || infos.get(collection).get(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing replica information for parent shard leader\");\n    }\n    // find the leader\n    List<Replica> lst = infos.get(collection).get(shard);\n    Double indexSize = null;\n    for (Replica info : lst) {\n      if (info.getCoreName().equals(parentShardLeader.getCoreName())) {\n        Number size = (Number)info.get(Type.CORE_IDX.metricsAttribute);\n        if (size == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing index size information for parent shard leader\");\n        }\n        indexSize = (Double) Type.CORE_IDX.convertVal(size);\n        break;\n      }\n    }\n    if (indexSize == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing replica information for parent shard leader\");\n    }\n    Number freeSize = (Number)nodeValues.get(ImplicitSnitch.DISK);\n    if (freeSize == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"missing node disk space information for parent shard leader\");\n    }\n    // 100% more for REWRITE, 5% more for LINK\n    double neededSpace = method == SolrIndexSplitter.SplitMethod.REWRITE ? 2.0 * indexSize : 1.05 * indexSize;\n    if (freeSize.doubleValue() < neededSpace) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"not enough free disk space to perform index split on node \" +\n          parentShardLeader.getNodeName() + \", required: \" + neededSpace + \", available: \" + freeSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["8f79e6c597ec19b2f9669589153faac2f803462a"],"993b0c7dda6341b437fe5685d35c6cc35eaac420":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8f79e6c597ec19b2f9669589153faac2f803462a"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f79e6c597ec19b2f9669589153faac2f803462a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"993b0c7dda6341b437fe5685d35c6cc35eaac420":[],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["993b0c7dda6341b437fe5685d35c6cc35eaac420","8f79e6c597ec19b2f9669589153faac2f803462a"],"8f79e6c597ec19b2f9669589153faac2f803462a":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","993b0c7dda6341b437fe5685d35c6cc35eaac420"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["993b0c7dda6341b437fe5685d35c6cc35eaac420","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}