{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIAsyncDistributedZkTest#testSolrJAPICalls().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIAsyncDistributedZkTest#testSolrJAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testSolrJAPICalls().mjava","sourceNew":"  @Test\n  public void testSolrJAPICalls() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = CollectionAdminRequest.createCollection(\"testasynccollectioncreation\",\"conf1\",1,1)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.createCollection(\"testasynccollectioncreation\",\"conf1\",1,1)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"Recreating a collection with the same should have failed.\", RequestStatusState.FAILED, state);\n\n    state = CollectionAdminRequest.addReplicaToShard(\"testasynccollectioncreation\", \"shard1\")\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"Add replica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.splitShard(\"testasynccollectioncreation\")\n        .setShardName(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS * 2);\n    assertEquals(\"Shard split did not complete. Last recorded state: \" + state, RequestStatusState.COMPLETED, state);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSolrJAPICalls() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = CollectionAdminRequest.createCollection(\"testasynccollectioncreation\",\"conf1\",1,1)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.createCollection(\"testasynccollectioncreation\",\"conf1\",1,1)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"Recreating a collection with the same should have failed.\", RequestStatusState.FAILED, state);\n\n    state = CollectionAdminRequest.addReplicaToShard(\"testasynccollectioncreation\", \"shard1\")\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"Add replica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.splitShard(\"testasynccollectioncreation\")\n        .setShardName(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS * 2);\n    assertEquals(\"Shard split did not complete. Last recorded state: \" + state, RequestStatusState.COMPLETED, state);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIAsyncDistributedZkTest#testSolrJAPICalls().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testSolrJAPICalls().mjava","sourceNew":"  @Test\n  public void testSolrJAPICalls() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = CollectionAdminRequest.createCollection(\"testasynccollectioncreation\",\"conf1\",1,1)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.createCollection(\"testasynccollectioncreation\",\"conf1\",1,1)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"Recreating a collection with the same should have failed.\", RequestStatusState.FAILED, state);\n\n    state = CollectionAdminRequest.addReplicaToShard(\"testasynccollectioncreation\", \"shard1\")\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"Add replica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.splitShard(\"testasynccollectioncreation\")\n        .setShardName(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS * 2);\n    assertEquals(\"Shard split did not complete. Last recorded state: \" + state, RequestStatusState.COMPLETED, state);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSolrJAPICalls() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = CollectionAdminRequest.createCollection(\"testasynccollectioncreation\",\"conf1\",1,1)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.createCollection(\"testasynccollectioncreation\",\"conf1\",1,1)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"Recreating a collection with the same should have failed.\", RequestStatusState.FAILED, state);\n\n    state = CollectionAdminRequest.addReplicaToShard(\"testasynccollectioncreation\", \"shard1\")\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"Add replica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.splitShard(\"testasynccollectioncreation\")\n        .setShardName(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS * 2);\n    assertEquals(\"Shard split did not complete. Last recorded state: \" + state, RequestStatusState.COMPLETED, state);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}