{"path":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, scoreMode, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public float maxScore() {\n            return Float.POSITIVE_INFINITY;\n          }\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;   // TODO delegate to BitSetProducer?\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, needsScores, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;   // TODO delegate to BitSetProducer?\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, scoreMode, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public float maxScore() {\n            return Float.POSITIVE_INFINITY;\n          }\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;   // TODO delegate to BitSetProducer?\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, needsScores, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;   // TODO delegate to BitSetProducer?\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, scoreMode, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return Float.POSITIVE_INFINITY;\n          }\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;   // TODO delegate to BitSetProducer?\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, scoreMode, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public float maxScore() {\n            return Float.POSITIVE_INFINITY;\n          }\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;   // TODO delegate to BitSetProducer?\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ParentChildrenBlockJoinQuery#createWeight(IndexSearcher,org.apache.lucene.search.ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, scoreMode, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return Float.POSITIVE_INFINITY;\n          }\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;   // TODO delegate to BitSetProducer?\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {\n    final Weight childWeight = childQuery.createWeight(searcher, scoreMode, boost);\n    final int readerIndex = ReaderUtil.subIndex(parentDocId, searcher.getIndexReader().leaves());\n    return new Weight(this) {\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        childWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return Explanation.noMatch(\"Not implemented, use ToParentBlockJoinQuery explain why a document matched\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Childs docs only reside in a single segment, so no need to evaluate all segments\n        if (context.ord != readerIndex) {\n          return null;\n        }\n\n        final int localParentDocId = parentDocId - context.docBase;\n        // If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored\n        // before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.\n        if (localParentDocId == 0) {\n          return null;\n        }\n\n        final BitSet parents = parentFilter.getBitSet(context);\n        final int firstChildDocId = parents.prevSetBit(localParentDocId - 1) + 1;\n        // A parent doc doesn't have child docs, so we can early exit here:\n        if (firstChildDocId == localParentDocId) {\n          return null;\n        }\n\n        final Scorer childrenScorer = childWeight.scorer(context);\n        if (childrenScorer == null) {\n          return null;\n        }\n        DocIdSetIterator childrenIterator = childrenScorer.iterator();\n        final DocIdSetIterator it = new DocIdSetIterator() {\n\n          int doc = -1;\n\n          @Override\n          public int docID() {\n            return doc;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return advance(doc + 1);\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            target = Math.max(firstChildDocId, target);\n            if (target >= localParentDocId) {\n              // We're outside the child nested scope, so it is done\n              return doc = NO_MORE_DOCS;\n            } else {\n              int advanced = childrenIterator.advance(target);\n              if (advanced >= localParentDocId) {\n                // We're outside the child nested scope, so it is done\n                return doc = NO_MORE_DOCS;\n              } else {\n                return doc = advanced;\n              }\n            }\n          }\n\n          @Override\n          public long cost() {\n            return Math.min(childrenIterator.cost(), localParentDocId - firstChildDocId);\n          }\n\n        };\n        return new Scorer(this) {\n          @Override\n          public int docID() {\n            return it.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return childrenScorer.score();\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return Float.POSITIVE_INFINITY;\n          }\n          @Override\n          public DocIdSetIterator iterator() {\n            return it;\n          }\n        };\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;   // TODO delegate to BitSetProducer?\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"523cc6563c99a55527ef7993efc5413c6648852d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["523cc6563c99a55527ef7993efc5413c6648852d"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"523cc6563c99a55527ef7993efc5413c6648852d":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"417142ff08fda9cf0b72d5133e63097a166c6458":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}