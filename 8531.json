{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader#checkFieldSummary(SegmentInfo,FieldReader,FieldReader).mjava","commits":[{"id":"232252bc7056b698c1e1c550f4b97a9a3c00e520","date":1372943634,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader#checkFieldSummary(SegmentInfo,FieldReader,FieldReader).mjava","pathOld":"/dev/null","sourceNew":"  private void checkFieldSummary(SegmentInfo info, FieldReader field, FieldReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) { \n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {  \n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (resource=\" + in + \")\");\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) { \n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (resource=\" + in + \")\");\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (resource=\" + in + \")\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a509b6df968a74c38a0528f5bf6ea26f503b756","date":1373188457,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader#checkFieldSummary(SegmentInfo,TermsReader,TermsReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader#checkFieldSummary(SegmentInfo,FieldReader,FieldReader).mjava","sourceNew":"  private void checkFieldSummary(SegmentInfo info, TermsReader field, TermsReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) { \n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {  \n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (resource=\" + in + \")\");\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) { \n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (resource=\" + in + \")\");\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (resource=\" + in + \")\");\n    }\n  }\n\n","sourceOld":"  private void checkFieldSummary(SegmentInfo info, FieldReader field, FieldReader previous) throws IOException {\n    // #docs with field must be <= #docs\n    if (field.docCount < 0 || field.docCount > info.getDocCount()) { \n      throw new CorruptIndexException(\"invalid docCount: \" + field.docCount + \" maxDoc: \" + info.getDocCount() + \" (resource=\" + in + \")\");\n    }\n    // #postings must be >= #docs with field\n    if (field.sumDocFreq < field.docCount) {  \n      throw new CorruptIndexException(\"invalid sumDocFreq: \" + field.sumDocFreq + \" docCount: \" + field.docCount + \" (resource=\" + in + \")\");\n    }\n    // #positions must be >= #postings\n    if (field.sumTotalTermFreq != -1 && field.sumTotalTermFreq < field.sumDocFreq) { \n      throw new CorruptIndexException(\"invalid sumTotalTermFreq: \" + field.sumTotalTermFreq + \" sumDocFreq: \" + field.sumDocFreq + \" (resource=\" + in + \")\");\n    }\n    if (previous != null) {\n      throw new CorruptIndexException(\"duplicate fields: \" + field.fieldInfo.name + \" (resource=\" + in + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"232252bc7056b698c1e1c550f4b97a9a3c00e520":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["232252bc7056b698c1e1c550f4b97a9a3c00e520"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["232252bc7056b698c1e1c550f4b97a9a3c00e520","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"232252bc7056b698c1e1c550f4b97a9a3c00e520":["3a509b6df968a74c38a0528f5bf6ea26f503b756"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a509b6df968a74c38a0528f5bf6ea26f503b756","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}