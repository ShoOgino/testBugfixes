{"path":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testMinCompetitiveScore().mjava","commits":[{"id":"063dae9421f2da2fe272aee10b891f49d21538bd","date":1592500789,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testMinCompetitiveScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testMinCompetitiveScore() throws IOException {\n    float[] currentMinScores = new float[3];\n    float[] minCompetitiveScore = new float[1];\n    Scorable scorer = new Scorable() {\n      \n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n      \n      @Override\n      public int docID() {\n        return 0;\n      }\n      \n      @Override\n      public void setMinCompetitiveScore(float minScore) throws IOException {\n        minCompetitiveScore[0] = minScore;\n      }\n    };\n    Scorable s0 = new MultiCollector.MinCompetitiveScoreAwareScorable(scorer, 0, currentMinScores);\n    Scorable s1 = new MultiCollector.MinCompetitiveScoreAwareScorable(scorer, 1, currentMinScores);\n    Scorable s2 = new MultiCollector.MinCompetitiveScoreAwareScorable(scorer, 2, currentMinScores);\n    assertEquals(0f, minCompetitiveScore[0], 0);\n    s0.setMinCompetitiveScore(0.5f);\n    assertEquals(0f, minCompetitiveScore[0], 0);\n    s1.setMinCompetitiveScore(0.8f);\n    assertEquals(0f, minCompetitiveScore[0], 0);\n    s2.setMinCompetitiveScore(0.3f);\n    assertEquals(0.3f, minCompetitiveScore[0], 0);\n    s2.setMinCompetitiveScore(0.1f);\n    assertEquals(0.3f, minCompetitiveScore[0], 0);\n    s1.setMinCompetitiveScore(Float.MAX_VALUE);\n    assertEquals(0.3f, minCompetitiveScore[0], 0);\n    s2.setMinCompetitiveScore(Float.MAX_VALUE);\n    assertEquals(0.5f, minCompetitiveScore[0], 0);\n    s0.setMinCompetitiveScore(Float.MAX_VALUE);\n    assertEquals(Float.MAX_VALUE, minCompetitiveScore[0], 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d488a38bddbdcc0d425b27beb126f54df6dd82a4","date":1598268476,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testMinCompetitiveScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#testMinCompetitiveScore().mjava","sourceNew":"  public void testMinCompetitiveScore() throws IOException {\n    float[] currentMinScores = new float[3];\n    float[] minCompetitiveScore = new float[1];\n    Scorable scorer = new Scorable() {\n      \n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n      \n      @Override\n      public int docID() {\n        return 0;\n      }\n      \n      @Override\n      public void setMinCompetitiveScore(float minScore) throws IOException {\n        minCompetitiveScore[0] = minScore;\n      }\n    };\n    Scorable s0 = new MultiCollector.MinCompetitiveScoreAwareScorable(scorer, 0, currentMinScores);\n    Scorable s1 = new MultiCollector.MinCompetitiveScoreAwareScorable(scorer, 1, currentMinScores);\n    Scorable s2 = new MultiCollector.MinCompetitiveScoreAwareScorable(scorer, 2, currentMinScores);\n    assertEquals(0f, minCompetitiveScore[0], 0);\n    s0.setMinCompetitiveScore(0.5f);\n    assertEquals(0f, minCompetitiveScore[0], 0);\n    s1.setMinCompetitiveScore(0.8f);\n    assertEquals(0f, minCompetitiveScore[0], 0);\n    s2.setMinCompetitiveScore(0.3f);\n    assertEquals(0.3f, minCompetitiveScore[0], 0);\n    s2.setMinCompetitiveScore(0.1f);\n    assertEquals(0.3f, minCompetitiveScore[0], 0);\n    s1.setMinCompetitiveScore(Float.MAX_VALUE);\n    assertEquals(0.3f, minCompetitiveScore[0], 0);\n    s2.setMinCompetitiveScore(Float.MAX_VALUE);\n    assertEquals(0.5f, minCompetitiveScore[0], 0);\n    s0.setMinCompetitiveScore(Float.MAX_VALUE);\n    assertEquals(Float.MAX_VALUE, minCompetitiveScore[0], 0);\n  }\n\n","sourceOld":"  public void testMinCompetitiveScore() throws IOException {\n    float[] currentMinScores = new float[3];\n    float[] minCompetitiveScore = new float[1];\n    Scorable scorer = new Scorable() {\n      \n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n      \n      @Override\n      public int docID() {\n        return 0;\n      }\n      \n      @Override\n      public void setMinCompetitiveScore(float minScore) throws IOException {\n        minCompetitiveScore[0] = minScore;\n      }\n    };\n    Scorable s0 = new MultiCollector.MinCompetitiveScoreAwareScorable(scorer, 0, currentMinScores);\n    Scorable s1 = new MultiCollector.MinCompetitiveScoreAwareScorable(scorer, 1, currentMinScores);\n    Scorable s2 = new MultiCollector.MinCompetitiveScoreAwareScorable(scorer, 2, currentMinScores);\n    assertEquals(0f, minCompetitiveScore[0], 0);\n    s0.setMinCompetitiveScore(0.5f);\n    assertEquals(0f, minCompetitiveScore[0], 0);\n    s1.setMinCompetitiveScore(0.8f);\n    assertEquals(0f, minCompetitiveScore[0], 0);\n    s2.setMinCompetitiveScore(0.3f);\n    assertEquals(0.3f, minCompetitiveScore[0], 0);\n    s2.setMinCompetitiveScore(0.1f);\n    assertEquals(0.3f, minCompetitiveScore[0], 0);\n    s1.setMinCompetitiveScore(Float.MAX_VALUE);\n    assertEquals(0.3f, minCompetitiveScore[0], 0);\n    s2.setMinCompetitiveScore(Float.MAX_VALUE);\n    assertEquals(0.5f, minCompetitiveScore[0], 0);\n    s0.setMinCompetitiveScore(Float.MAX_VALUE);\n    assertEquals(Float.MAX_VALUE, minCompetitiveScore[0], 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"063dae9421f2da2fe272aee10b891f49d21538bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["063dae9421f2da2fe272aee10b891f49d21538bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"]},"commit2Childs":{"063dae9421f2da2fe272aee10b891f49d21538bd":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["063dae9421f2da2fe272aee10b891f49d21538bd"],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}