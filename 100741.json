{"path":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testOrderedByTermFreqDescending().mjava","commits":[{"id":"1513361122ebc5ddd6075f633cd77d2345611767","date":1273770174,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testOrderedByTermFreqDescending().mjava","pathOld":"/dev/null","sourceNew":"  public static void testOrderedByTermFreqDescending () throws Exception{\n    int numTerms = 12;\n    String field = \"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n    TermStats[] termsWithTF = HighFreqTerms.sortByTotalTermFreq(reader, terms);\n \n  for (int i = 0; i < termsWithTF.length; i++) {\n    // check that they are sorted by descending termfreq order\n    if (i >0){\n      assertTrue (\"out of order\" +termsWithTF[i-1]+ \" > \" +termsWithTF[i],termsWithTF[i-1].totalTermFreq > termsWithTF[i].totalTermFreq);\n     }\n    } \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f0aae73ca2eeb899108e9fe36611ddf5a83ec790"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24bbea3efc4507c483f922462353c5994867de42","date":1284405081,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testOrderedByTermFreqDescending().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testOrderedByTermFreqDescending().mjava","sourceNew":"  public void testOrderedByTermFreqDescending () throws Exception{\n    int numTerms = 12;\n    String field = \"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n    TermStats[] termsWithTF = HighFreqTerms.sortByTotalTermFreq(reader, terms);\n \n  for (int i = 0; i < termsWithTF.length; i++) {\n    // check that they are sorted by descending termfreq order\n    if (i >0){\n      assertTrue (\"out of order\" +termsWithTF[i-1]+ \" > \" +termsWithTF[i],termsWithTF[i-1].totalTermFreq > termsWithTF[i].totalTermFreq);\n     }\n    } \n  }\n\n","sourceOld":"  public static void testOrderedByTermFreqDescending () throws Exception{\n    int numTerms = 12;\n    String field = \"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n    TermStats[] termsWithTF = HighFreqTerms.sortByTotalTermFreq(reader, terms);\n \n  for (int i = 0; i < termsWithTF.length; i++) {\n    // check that they are sorted by descending termfreq order\n    if (i >0){\n      assertTrue (\"out of order\" +termsWithTF[i-1]+ \" > \" +termsWithTF[i],termsWithTF[i-1].totalTermFreq > termsWithTF[i].totalTermFreq);\n     }\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testOrderedByTermFreqDescending().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testOrderedByTermFreqDescending().mjava","sourceNew":"  public void testOrderedByTermFreqDescending () throws Exception{\n    int numTerms = 12;\n    String field = \"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n    TermStats[] termsWithTF = HighFreqTerms.sortByTotalTermFreq(reader, terms);\n \n  for (int i = 0; i < termsWithTF.length; i++) {\n    // check that they are sorted by descending termfreq order\n    if (i >0){\n      assertTrue (\"out of order\" +termsWithTF[i-1]+ \" > \" +termsWithTF[i],termsWithTF[i-1].totalTermFreq > termsWithTF[i].totalTermFreq);\n     }\n    } \n  }\n\n","sourceOld":"  public static void testOrderedByTermFreqDescending () throws Exception{\n    int numTerms = 12;\n    String field = \"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n    TermStats[] termsWithTF = HighFreqTerms.sortByTotalTermFreq(reader, terms);\n \n  for (int i = 0; i < termsWithTF.length; i++) {\n    // check that they are sorted by descending termfreq order\n    if (i >0){\n      assertTrue (\"out of order\" +termsWithTF[i-1]+ \" > \" +termsWithTF[i],termsWithTF[i-1].totalTermFreq > termsWithTF[i].totalTermFreq);\n     }\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testOrderedByTermFreqDescending().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testOrderedByTermFreqDescending().mjava","sourceNew":"  public void testOrderedByTermFreqDescending () throws Exception{\n    int numTerms = 12;\n    String field = \"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n    TermStats[] termsWithTF = HighFreqTerms.sortByTotalTermFreq(reader, terms);\n \n    for (int i = 0; i < termsWithTF.length; i++) {\n      // check that they are sorted by descending termfreq\n      // order\n      if (i > 0) {\n        assertTrue (\"out of order\" +termsWithTF[i-1]+ \" > \" +termsWithTF[i],termsWithTF[i-1].totalTermFreq >= termsWithTF[i].totalTermFreq);\n      }\n    } \n  }\n\n","sourceOld":"  public void testOrderedByTermFreqDescending () throws Exception{\n    int numTerms = 12;\n    String field = \"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n    TermStats[] termsWithTF = HighFreqTerms.sortByTotalTermFreq(reader, terms);\n \n  for (int i = 0; i < termsWithTF.length; i++) {\n    // check that they are sorted by descending termfreq order\n    if (i >0){\n      assertTrue (\"out of order\" +termsWithTF[i-1]+ \" > \" +termsWithTF[i],termsWithTF[i-1].totalTermFreq > termsWithTF[i].totalTermFreq);\n     }\n    } \n  }\n\n","bugFix":null,"bugIntro":["f0aae73ca2eeb899108e9fe36611ddf5a83ec790"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testOrderedByTermFreqDescending().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testOrderedByTermFreqDescending().mjava","sourceNew":"  public void testOrderedByTermFreqDescending () throws Exception{\n    int numTerms = 12;\n    String field = \"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n    TermStats[] termsWithTF = HighFreqTerms.sortByTotalTermFreq(reader, terms);\n \n    for (int i = 0; i < termsWithTF.length; i++) {\n      // check that they are sorted by descending termfreq\n      // order\n      if (i > 0) {\n        assertTrue (\"out of order\" +termsWithTF[i-1]+ \" > \" +termsWithTF[i],termsWithTF[i-1].totalTermFreq >= termsWithTF[i].totalTermFreq);\n      }\n    } \n  }\n\n","sourceOld":"  public void testOrderedByTermFreqDescending () throws Exception{\n    int numTerms = 12;\n    String field = \"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n    TermStats[] termsWithTF = HighFreqTerms.sortByTotalTermFreq(reader, terms);\n \n  for (int i = 0; i < termsWithTF.length; i++) {\n    // check that they are sorted by descending termfreq order\n    if (i >0){\n      assertTrue (\"out of order\" +termsWithTF[i-1]+ \" > \" +termsWithTF[i],termsWithTF[i-1].totalTermFreq > termsWithTF[i].totalTermFreq);\n     }\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testOrderedByTermFreqDescending().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testOrderedByTermFreqDescending().mjava","sourceNew":"  public void testOrderedByTermFreqDescending () throws Exception{\n    int numTerms = 12;\n    String field = \"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n    TermStats[] termsWithTF = HighFreqTerms.sortByTotalTermFreq(reader, terms);\n \n    for (int i = 0; i < termsWithTF.length; i++) {\n      // check that they are sorted by descending termfreq\n      // order\n      if (i > 0) {\n        assertTrue (\"out of order\" +termsWithTF[i-1]+ \" > \" +termsWithTF[i],termsWithTF[i-1].totalTermFreq >= termsWithTF[i].totalTermFreq);\n      }\n    } \n  }\n\n","sourceOld":"  public void testOrderedByTermFreqDescending () throws Exception{\n    int numTerms = 12;\n    String field = \"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n    TermStats[] termsWithTF = HighFreqTerms.sortByTotalTermFreq(reader, terms);\n \n  for (int i = 0; i < termsWithTF.length; i++) {\n    // check that they are sorted by descending termfreq order\n    if (i >0){\n      assertTrue (\"out of order\" +termsWithTF[i-1]+ \" > \" +termsWithTF[i],termsWithTF[i-1].totalTermFreq > termsWithTF[i].totalTermFreq);\n     }\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testOrderedByTermFreqDescending().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testOrderedByTermFreqDescending().mjava","sourceNew":"  public void testOrderedByTermFreqDescending () throws Exception{\n    int numTerms = 12;\n    String field = \"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n    TermStats[] termsWithTF = HighFreqTerms.sortByTotalTermFreq(reader, terms);\n \n    for (int i = 0; i < termsWithTF.length; i++) {\n      // check that they are sorted by descending termfreq\n      // order\n      if (i > 0) {\n        assertTrue (\"out of order\" +termsWithTF[i-1]+ \" > \" +termsWithTF[i],termsWithTF[i-1].totalTermFreq >= termsWithTF[i].totalTermFreq);\n      }\n    } \n  }\n\n","sourceOld":"  public void testOrderedByTermFreqDescending () throws Exception{\n    int numTerms = 12;\n    String field = \"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n    TermStats[] termsWithTF = HighFreqTerms.sortByTotalTermFreq(reader, terms);\n \n    for (int i = 0; i < termsWithTF.length; i++) {\n      // check that they are sorted by descending termfreq\n      // order\n      if (i > 0) {\n        assertTrue (\"out of order\" +termsWithTF[i-1]+ \" > \" +termsWithTF[i],termsWithTF[i-1].totalTermFreq >= termsWithTF[i].totalTermFreq);\n      }\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"24bbea3efc4507c483f922462353c5994867de42":["1513361122ebc5ddd6075f633cd77d2345611767"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["24bbea3efc4507c483f922462353c5994867de42","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16843358872ed92ba92888ab99df297550b9a36a":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1513361122ebc5ddd6075f633cd77d2345611767","24bbea3efc4507c483f922462353c5994867de42"],"1513361122ebc5ddd6075f633cd77d2345611767":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["24bbea3efc4507c483f922462353c5994867de42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"24bbea3efc4507c483f922462353c5994867de42":["29ef99d61cda9641b6250bf9567329a6e65f901d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1513361122ebc5ddd6075f633cd77d2345611767"],"16843358872ed92ba92888ab99df297550b9a36a":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["16843358872ed92ba92888ab99df297550b9a36a"],"1513361122ebc5ddd6075f633cd77d2345611767":["24bbea3efc4507c483f922462353c5994867de42","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["b89678825b68eccaf09e6ab71675fc0b0af1e099","29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}