{"path":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/hack/MiniYARNCluster.ResourceManagerWrapper#serviceStart().mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/hack/MiniYARNCluster.ResourceManagerWrapper#serviceStart().mjava","pathOld":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/hack/MiniYARNCluster.ResourceManagerWrapper#serviceStart().mjava","sourceNew":"    @Override\n    public synchronized void serviceStart() throws Exception {\n      try {\n        getConfig().setBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, true);\n        if (!getConfig().getBoolean(\n            YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS,\n            YarnConfiguration.DEFAULT_YARN_MINICLUSTER_FIXED_PORTS)) {\n          // pick free random ports.\n          String hostname = MiniYARNCluster.getHostname();\n          getConfig().set(YarnConfiguration.RM_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_ADMIN_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_WEBAPP_ADDRESS,\n              hostname + \":0\");\n        }\n        resourceManager = new ResourceManager() {\n          @Override\n          protected void doSecureLogin() throws IOException {\n            // Don't try to login using keytab in the testcase.\n          };\n        };\n        resourceManager.init(getConfig());\n        new Thread() {\n          public void run() {\n            resourceManager.start();\n          };\n        }.start();\n        int waitCount = 0;\n        while (resourceManager.getServiceState() == STATE.INITED\n            && waitCount++ < 60) {\n          LOG.info(\"Waiting for RM to start...\");\n          Thread.sleep(1500);\n        }\n        if (resourceManager.getServiceState() != STATE.STARTED) {\n          // RM could have failed.\n          throw new IOException(\n              \"ResourceManager failed to start. Final state is \"\n                  + resourceManager.getServiceState());\n        }\n        super.serviceStart();\n      } catch (Throwable t) {\n        throw new YarnRuntimeException(t);\n      }\n      LOG.info(\"MiniYARN ResourceManager address: \" +\n               getConfig().get(YarnConfiguration.RM_ADDRESS));\n      LOG.info(\"MiniYARN ResourceManager web address: \" +\n               getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS));\n    }\n\n","sourceOld":"    @Override\n    public synchronized void serviceStart() throws Exception {\n      try {\n        getConfig().setBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, true);\n        if (!getConfig().getBoolean(\n            YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS,\n            YarnConfiguration.DEFAULT_YARN_MINICLUSTER_FIXED_PORTS)) {\n          // pick free random ports.\n          String hostname = MiniYARNCluster.getHostname();\n          getConfig().set(YarnConfiguration.RM_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_ADMIN_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_WEBAPP_ADDRESS,\n              hostname + \":0\");\n        }\n        resourceManager = new ResourceManager() {\n          @Override\n          protected void doSecureLogin() throws IOException {\n            // Don't try to login using keytab in the testcase.\n          };\n        };\n        resourceManager.init(getConfig());\n        new Thread() {\n          public void run() {\n            resourceManager.start();\n          };\n        }.start();\n        int waitCount = 0;\n        while (resourceManager.getServiceState() == STATE.INITED\n            && waitCount++ < 60) {\n          LOG.info(\"Waiting for RM to start...\");\n          Thread.sleep(1500);\n        }\n        if (resourceManager.getServiceState() != STATE.STARTED) {\n          // RM could have failed.\n          throw new IOException(\n              \"ResourceManager failed to start. Final state is \"\n                  + resourceManager.getServiceState());\n        }\n        super.serviceStart();\n      } catch (Throwable t) {\n        throw new YarnRuntimeException(t);\n      }\n      LOG.info(\"MiniYARN ResourceManager address: \" +\n               getConfig().get(YarnConfiguration.RM_ADDRESS));\n      LOG.info(\"MiniYARN ResourceManager web address: \" +\n               getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/hack/MiniYARNCluster.ResourceManagerWrapper#serviceStart().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public synchronized void serviceStart() throws Exception {\n      try {\n        getConfig().setBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, true);\n        if (!getConfig().getBoolean(\n            YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS,\n            YarnConfiguration.DEFAULT_YARN_MINICLUSTER_FIXED_PORTS)) {\n          // pick free random ports.\n          String hostname = MiniYARNCluster.getHostname();\n          getConfig().set(YarnConfiguration.RM_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_ADMIN_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_WEBAPP_ADDRESS,\n              hostname + \":0\");\n        }\n        resourceManager = new ResourceManager() {\n          @Override\n          protected void doSecureLogin() throws IOException {\n            // Don't try to login using keytab in the testcase.\n          };\n        };\n        resourceManager.init(getConfig());\n        new Thread() {\n          public void run() {\n            resourceManager.start();\n          };\n        }.start();\n        int waitCount = 0;\n        while (resourceManager.getServiceState() == STATE.INITED\n            && waitCount++ < 60) {\n          LOG.info(\"Waiting for RM to start...\");\n          Thread.sleep(1500);\n        }\n        if (resourceManager.getServiceState() != STATE.STARTED) {\n          // RM could have failed.\n          throw new IOException(\n              \"ResourceManager failed to start. Final state is \"\n                  + resourceManager.getServiceState());\n        }\n        super.serviceStart();\n      } catch (Throwable t) {\n        throw new YarnRuntimeException(t);\n      }\n      LOG.info(\"MiniYARN ResourceManager address: \" +\n               getConfig().get(YarnConfiguration.RM_ADDRESS));\n      LOG.info(\"MiniYARN ResourceManager web address: \" +\n               getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/hack/MiniYARNCluster.ResourceManagerWrapper#serviceStart().mjava","sourceNew":null,"sourceOld":"    @Override\n    public synchronized void serviceStart() throws Exception {\n      try {\n        getConfig().setBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, true);\n        if (!getConfig().getBoolean(\n            YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS,\n            YarnConfiguration.DEFAULT_YARN_MINICLUSTER_FIXED_PORTS)) {\n          // pick free random ports.\n          String hostname = MiniYARNCluster.getHostname();\n          getConfig().set(YarnConfiguration.RM_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_ADMIN_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_WEBAPP_ADDRESS,\n              hostname + \":0\");\n        }\n        resourceManager = new ResourceManager() {\n          @Override\n          protected void doSecureLogin() throws IOException {\n            // Don't try to login using keytab in the testcase.\n          };\n        };\n        resourceManager.init(getConfig());\n        new Thread() {\n          public void run() {\n            resourceManager.start();\n          };\n        }.start();\n        int waitCount = 0;\n        while (resourceManager.getServiceState() == STATE.INITED\n            && waitCount++ < 60) {\n          LOG.info(\"Waiting for RM to start...\");\n          Thread.sleep(1500);\n        }\n        if (resourceManager.getServiceState() != STATE.STARTED) {\n          // RM could have failed.\n          throw new IOException(\n              \"ResourceManager failed to start. Final state is \"\n                  + resourceManager.getServiceState());\n        }\n        super.serviceStart();\n      } catch (Throwable t) {\n        throw new YarnRuntimeException(t);\n      }\n      LOG.info(\"MiniYARN ResourceManager address: \" +\n               getConfig().get(YarnConfiguration.RM_ADDRESS));\n      LOG.info(\"MiniYARN ResourceManager web address: \" +\n               getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/hack/MiniYARNCluster.ResourceManagerWrapper#serviceStart().mjava","sourceNew":null,"sourceOld":"    @Override\n    public synchronized void serviceStart() throws Exception {\n      try {\n        getConfig().setBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, true);\n        if (!getConfig().getBoolean(\n            YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS,\n            YarnConfiguration.DEFAULT_YARN_MINICLUSTER_FIXED_PORTS)) {\n          // pick free random ports.\n          String hostname = MiniYARNCluster.getHostname();\n          getConfig().set(YarnConfiguration.RM_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_ADMIN_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n              hostname + \":0\");\n          getConfig().set(YarnConfiguration.RM_WEBAPP_ADDRESS,\n              hostname + \":0\");\n        }\n        resourceManager = new ResourceManager() {\n          @Override\n          protected void doSecureLogin() throws IOException {\n            // Don't try to login using keytab in the testcase.\n          };\n        };\n        resourceManager.init(getConfig());\n        new Thread() {\n          public void run() {\n            resourceManager.start();\n          };\n        }.start();\n        int waitCount = 0;\n        while (resourceManager.getServiceState() == STATE.INITED\n            && waitCount++ < 60) {\n          LOG.info(\"Waiting for RM to start...\");\n          Thread.sleep(1500);\n        }\n        if (resourceManager.getServiceState() != STATE.STARTED) {\n          // RM could have failed.\n          throw new IOException(\n              \"ResourceManager failed to start. Final state is \"\n                  + resourceManager.getServiceState());\n        }\n        super.serviceStart();\n      } catch (Throwable t) {\n        throw new YarnRuntimeException(t);\n      }\n      LOG.info(\"MiniYARN ResourceManager address: \" +\n               getConfig().get(YarnConfiguration.RM_ADDRESS));\n      LOG.info(\"MiniYARN ResourceManager web address: \" +\n               getConfig().get(YarnConfiguration.RM_WEBAPP_ADDRESS));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["12109b652e9210b8d58fca47f6c4a725d058a58e","74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}