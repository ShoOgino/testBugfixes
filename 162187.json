{"path":"lucene/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += getSimilarity().sloppyFreq(matchLength);\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","sourceOld":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += getSimilarity().sloppyFreq(matchLength);\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5e679b9c5f68f1f331de920ae8366af75b44060","date":1295555804,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += similarity.sloppyFreq(matchLength);\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","sourceOld":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += getSimilarity().sloppyFreq(matchLength);\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += similarity.sloppyFreq(matchLength);\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","sourceOld":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += getSimilarity().sloppyFreq(matchLength);\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += similarity.sloppyFreq(matchLength);\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","sourceOld":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += getSimilarity().sloppyFreq(matchLength);\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0952c55e47c70ea2d8c8e2b634da066f9bde4e38","date":1310506639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += docScorer.computeSlopFactor(matchLength);\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","sourceOld":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += similarity.sloppyFreq(matchLength);\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanScorer#setFreqCurrentDoc().mjava","sourceNew":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += docScorer.computeSlopFactor(matchLength);\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","sourceOld":"  protected boolean setFreqCurrentDoc() throws IOException {\n    if (!more) {\n      return false;\n    }\n    doc = spans.doc();\n    freq = 0.0f;\n    do {\n      int matchLength = spans.end() - spans.start();\n      freq += docScorer.computeSlopFactor(matchLength);\n      more = spans.next();\n    } while (more && (doc == spans.doc()));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0952c55e47c70ea2d8c8e2b634da066f9bde4e38"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","e5e679b9c5f68f1f331de920ae8366af75b44060"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0952c55e47c70ea2d8c8e2b634da066f9bde4e38":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["9454a6510e2db155fb01faa5c049b06ece95fab9","e5e679b9c5f68f1f331de920ae8366af75b44060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0952c55e47c70ea2d8c8e2b634da066f9bde4e38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["29ef99d61cda9641b6250bf9567329a6e65f901d","0952c55e47c70ea2d8c8e2b634da066f9bde4e38","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["29ef99d61cda9641b6250bf9567329a6e65f901d","e5e679b9c5f68f1f331de920ae8366af75b44060","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}