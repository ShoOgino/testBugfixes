{"path":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#ZkDistributedQueue(SolrZkClient,String,Overseer.Stats).mjava","commits":[{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#ZkDistributedQueue(SolrZkClient,String,Overseer.Stats).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#DistributedQueue(SolrZkClient,String,Overseer.Stats).mjava","sourceNew":"  public ZkDistributedQueue(SolrZkClient zookeeper, String dir, Overseer.Stats stats) {\n    this.dir = dir;\n\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zookeeper.getZkClientTimeout());\n    try {\n      cmdExecutor.ensureExists(dir, zookeeper);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n    this.zookeeper = zookeeper;\n    this.stats = stats;\n  }\n\n","sourceOld":"  public DistributedQueue(SolrZkClient zookeeper, String dir, Overseer.Stats stats) {\n    this.dir = dir;\n\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zookeeper.getZkClientTimeout());\n    try {\n      cmdExecutor.ensureExists(dir, zookeeper);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n    this.zookeeper = zookeeper;\n    this.stats = stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#DistributedQueue(SolrZkClient,String,Overseer.Stats).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#ZkDistributedQueue(SolrZkClient,String,Overseer.Stats).mjava","sourceNew":"  public DistributedQueue(SolrZkClient zookeeper, String dir, Overseer.Stats stats) {\n    this.dir = dir;\n\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zookeeper.getZkClientTimeout());\n    try {\n      cmdExecutor.ensureExists(dir, zookeeper);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n    this.zookeeper = zookeeper;\n    this.stats = stats;\n  }\n\n","sourceOld":"  public ZkDistributedQueue(SolrZkClient zookeeper, String dir, Overseer.Stats stats) {\n    this.dir = dir;\n\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zookeeper.getZkClientTimeout());\n    try {\n      cmdExecutor.ensureExists(dir, zookeeper);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n    this.zookeeper = zookeeper;\n    this.stats = stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#ZkDistributedQueue(SolrZkClient,String,Overseer.Stats).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#DistributedQueue(SolrZkClient,String,Overseer.Stats).mjava","sourceNew":"  public ZkDistributedQueue(SolrZkClient zookeeper, String dir, Overseer.Stats stats) {\n    this.dir = dir;\n\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zookeeper.getZkClientTimeout());\n    try {\n      cmdExecutor.ensureExists(dir, zookeeper);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n    this.zookeeper = zookeeper;\n    this.stats = stats;\n  }\n\n","sourceOld":"  public DistributedQueue(SolrZkClient zookeeper, String dir, Overseer.Stats stats) {\n    this.dir = dir;\n\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zookeeper.getZkClientTimeout());\n    try {\n      cmdExecutor.ensureExists(dir, zookeeper);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n    this.zookeeper = zookeeper;\n    this.stats = stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#ZkDistributedQueue(SolrZkClient,String,Overseer.Stats).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#DistributedQueue(SolrZkClient,String,Overseer.Stats).mjava","sourceNew":"  public ZkDistributedQueue(SolrZkClient zookeeper, String dir, Overseer.Stats stats) {\n    this.dir = dir;\n\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zookeeper.getZkClientTimeout());\n    try {\n      cmdExecutor.ensureExists(dir, zookeeper);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n    this.zookeeper = zookeeper;\n    this.stats = stats;\n  }\n\n","sourceOld":"  public DistributedQueue(SolrZkClient zookeeper, String dir, Overseer.Stats stats) {\n    this.dir = dir;\n\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zookeeper.getZkClientTimeout());\n    try {\n      cmdExecutor.ensureExists(dir, zookeeper);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n    this.zookeeper = zookeeper;\n    this.stats = stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be96d8a30bc93529faa1e8ee22a48fbe6db12d11","date":1507229563,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#ZkDistributedQueue(SolrZkClient,String,Overseer.Stats).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#ZkDistributedQueue(SolrZkClient,String,Overseer.Stats).mjava","sourceNew":"  public ZkDistributedQueue(SolrZkClient zookeeper, String dir, Overseer.Stats stats) {\n    this(zookeeper, dir, stats, 0);\n  }\n\n","sourceOld":"  public ZkDistributedQueue(SolrZkClient zookeeper, String dir, Overseer.Stats stats) {\n    this.dir = dir;\n\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zookeeper.getZkClientTimeout());\n    try {\n      cmdExecutor.ensureExists(dir, zookeeper);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n    this.zookeeper = zookeeper;\n    this.stats = stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#ZkDistributedQueue(SolrZkClient,String,Stats).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#ZkDistributedQueue(SolrZkClient,String,Overseer.Stats).mjava","sourceNew":"  public ZkDistributedQueue(SolrZkClient zookeeper, String dir, Stats stats) {\n    this(zookeeper, dir, stats, 0);\n  }\n\n","sourceOld":"  public ZkDistributedQueue(SolrZkClient zookeeper, String dir, Overseer.Stats stats) {\n    this(zookeeper, dir, stats, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["be96d8a30bc93529faa1e8ee22a48fbe6db12d11"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"be96d8a30bc93529faa1e8ee22a48fbe6db12d11":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","be96d8a30bc93529faa1e8ee22a48fbe6db12d11"],"be96d8a30bc93529faa1e8ee22a48fbe6db12d11":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}