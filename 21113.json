{"path":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testInsertionSort().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testInsertionSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testInsertionSort().mjava","sourceNew":"  public void testInsertionSort() {\n    for (int i = 0, c = atLeast(500); i < c; i++) {\n      Integer[] a1 = createRandomArray(30), a2 = a1.clone();\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n      \n      a1 = createRandomArray(30);\n      a2 = a1.clone();\n      ArrayUtil.insertionSort(a1, Collections.reverseOrder());\n      Arrays.sort(a2, Collections.reverseOrder());\n      assertArrayEquals(a2, a1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":"  public void testInsertionSort() {\n    for (int i = 0, c = atLeast(500); i < c; i++) {\n      Integer[] a1 = createRandomArray(30), a2 = a1.clone();\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n      \n      a1 = createRandomArray(30);\n      a2 = a1.clone();\n      ArrayUtil.insertionSort(a1, Collections.reverseOrder());\n      Arrays.sort(a2, Collections.reverseOrder());\n      assertArrayEquals(a2, a1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testInsertionSort().mjava","sourceNew":null,"sourceOld":"  public void testInsertionSort() {\n    for (int i = 0, c = atLeast(500); i < c; i++) {\n      Integer[] a1 = createRandomArray(30), a2 = a1.clone();\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n      \n      a1 = createRandomArray(30);\n      a2 = a1.clone();\n      ArrayUtil.insertionSort(a1, Collections.reverseOrder());\n      Arrays.sort(a2, Collections.reverseOrder());\n      assertArrayEquals(a2, a1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}