{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#constructNormalizedVerticalPlane(Vector...).mjava","commits":[{"id":"5f3c09e163d39ea7acb6f142f32aed0a6f523c5a","date":1435805572,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#constructNormalizedVerticalPlane(Vector...).mjava","pathOld":"/dev/null","sourceNew":"  /** Construct the most accurate normalized, vertical plane given a set of points.  If none of the points can determine\n  * the plane, return null.\n  */\n  public static Plane constructNormalizedVerticalPlane(final Vector... planePoints) {\n    // Pick the best one (with the greatest x-y distance)\n    double bestDistance = 0.0;\n    Vector bestPoint = null;\n    for (final Vector point : planePoints) {\n      final double pointDist = point.x * point.x + point.y * point.y;\n      if (pointDist > bestDistance) {\n        bestDistance = pointDist;\n        bestPoint = point;\n      }\n    }\n    return constructNormalizedVerticalPlane(bestPoint.x, bestPoint.y);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#constructNormalizedVerticalPlane(Vector...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#constructNormalizedVerticalPlane(Vector...).mjava","sourceNew":"  /** Construct the most accurate normalized, vertical plane given a set of points.  If none of the points can determine\n  * the plane, return null.\n  */\n  public static Plane constructNormalizedVerticalPlane(final Vector... planePoints) {\n    // Pick the best one (with the greatest x-y distance)\n    double bestDistance = 0.0;\n    Vector bestPoint = null;\n    for (final Vector point : planePoints) {\n      final double pointDist = point.x * point.x + point.y * point.y;\n      if (pointDist > bestDistance) {\n        bestDistance = pointDist;\n        bestPoint = point;\n      }\n    }\n    return constructNormalizedVerticalPlane(bestPoint.x, bestPoint.y);\n  }\n\n","sourceOld":"  /** Construct the most accurate normalized, vertical plane given a set of points.  If none of the points can determine\n  * the plane, return null.\n  */\n  public static Plane constructNormalizedVerticalPlane(final Vector... planePoints) {\n    // Pick the best one (with the greatest x-y distance)\n    double bestDistance = 0.0;\n    Vector bestPoint = null;\n    for (final Vector point : planePoints) {\n      final double pointDist = point.x * point.x + point.y * point.y;\n      if (pointDist > bestDistance) {\n        bestDistance = pointDist;\n        bestPoint = point;\n      }\n    }\n    return constructNormalizedVerticalPlane(bestPoint.x, bestPoint.y);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5f3c09e163d39ea7acb6f142f32aed0a6f523c5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["5f3c09e163d39ea7acb6f142f32aed0a6f523c5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"5f3c09e163d39ea7acb6f142f32aed0a6f523c5a":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f3c09e163d39ea7acb6f142f32aed0a6f523c5a"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}