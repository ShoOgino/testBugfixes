{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int[],MutablePointValues,int,int,BytesRef,BytesRef).mjava","commits":[{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int[],MutablePointValues,int,int,BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int[],MutablePointsReader,int,int,BytesRef,BytesRef).mjava","sourceNew":"  /** Sort points on the given dimension. */\n  static void sortByDim(int sortedDim, int bytesPerDim, int[] commonPrefixLengths,\n      MutablePointValues reader, int from, int to,\n      BytesRef scratch1, BytesRef scratch2) {\n\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    final int offset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n    final int numBytesToCompare = bytesPerDim - commonPrefixLengths[sortedDim];\n    new IntroSorter() {\n\n      final BytesRef pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = StringHelper.compare(numBytesToCompare, pivot.bytes, pivot.offset + offset, scratch2.bytes, scratch2.offset + offset);\n        if (cmp == 0) {\n          cmp = pivotDoc - reader.getDocID(j);\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","sourceOld":"  /** Sort points on the given dimension. */\n  static void sortByDim(int sortedDim, int bytesPerDim, int[] commonPrefixLengths,\n      MutablePointsReader reader, int from, int to,\n      BytesRef scratch1, BytesRef scratch2) {\n\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    final int offset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n    final int numBytesToCompare = bytesPerDim - commonPrefixLengths[sortedDim];\n    new IntroSorter() {\n\n      final BytesRef pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = StringHelper.compare(numBytesToCompare, pivot.bytes, pivot.offset + offset, scratch2.bytes, scratch2.offset + offset);\n        if (cmp == 0) {\n          cmp = pivotDoc - reader.getDocID(j);\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int[],MutablePointValues,int,int,BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Sort points on the given dimension. */\n  static void sortByDim(int sortedDim, int bytesPerDim, int[] commonPrefixLengths,\n      MutablePointValues reader, int from, int to,\n      BytesRef scratch1, BytesRef scratch2) {\n\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    final int offset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n    final int numBytesToCompare = bytesPerDim - commonPrefixLengths[sortedDim];\n    new IntroSorter() {\n\n      final BytesRef pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = StringHelper.compare(numBytesToCompare, pivot.bytes, pivot.offset + offset, scratch2.bytes, scratch2.offset + offset);\n        if (cmp == 0) {\n          cmp = pivotDoc - reader.getDocID(j);\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int[],MutablePointValues,int,int,BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int[],MutablePointValues,int,int,BytesRef,BytesRef).mjava","sourceNew":"  /** Sort points on the given dimension. */\n  public static void sortByDim(int sortedDim, int bytesPerDim, int[] commonPrefixLengths,\n                               MutablePointValues reader, int from, int to,\n                               BytesRef scratch1, BytesRef scratch2) {\n\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    final int offset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n    final int numBytesToCompare = bytesPerDim - commonPrefixLengths[sortedDim];\n    new IntroSorter() {\n\n      final BytesRef pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = StringHelper.compare(numBytesToCompare, pivot.bytes, pivot.offset + offset, scratch2.bytes, scratch2.offset + offset);\n        if (cmp == 0) {\n          cmp = pivotDoc - reader.getDocID(j);\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","sourceOld":"  /** Sort points on the given dimension. */\n  static void sortByDim(int sortedDim, int bytesPerDim, int[] commonPrefixLengths,\n      MutablePointValues reader, int from, int to,\n      BytesRef scratch1, BytesRef scratch2) {\n\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    final int offset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n    final int numBytesToCompare = bytesPerDim - commonPrefixLengths[sortedDim];\n    new IntroSorter() {\n\n      final BytesRef pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = StringHelper.compare(numBytesToCompare, pivot.bytes, pivot.offset + offset, scratch2.bytes, scratch2.offset + offset);\n        if (cmp == 0) {\n          cmp = pivotDoc - reader.getDocID(j);\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int[],MutablePointValues,int,int,BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int[],MutablePointValues,int,int,BytesRef,BytesRef).mjava","sourceNew":"  /** Sort points on the given dimension. */\n  public static void sortByDim(int sortedDim, int bytesPerDim, int[] commonPrefixLengths,\n                               MutablePointValues reader, int from, int to,\n                               BytesRef scratch1, BytesRef scratch2) {\n\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    final int offset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n    final int numBytesToCompare = bytesPerDim - commonPrefixLengths[sortedDim];\n    new IntroSorter() {\n\n      final BytesRef pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = StringHelper.compare(numBytesToCompare, pivot.bytes, pivot.offset + offset, scratch2.bytes, scratch2.offset + offset);\n        if (cmp == 0) {\n          cmp = pivotDoc - reader.getDocID(j);\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","sourceOld":"  /** Sort points on the given dimension. */\n  static void sortByDim(int sortedDim, int bytesPerDim, int[] commonPrefixLengths,\n      MutablePointValues reader, int from, int to,\n      BytesRef scratch1, BytesRef scratch2) {\n\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    final int offset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n    final int numBytesToCompare = bytesPerDim - commonPrefixLengths[sortedDim];\n    new IntroSorter() {\n\n      final BytesRef pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = StringHelper.compare(numBytesToCompare, pivot.bytes, pivot.offset + offset, scratch2.bytes, scratch2.offset + offset);\n        if (cmp == 0) {\n          cmp = pivotDoc - reader.getDocID(j);\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int[],MutablePointValues,int,int,BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int[],MutablePointValues,int,int,BytesRef,BytesRef).mjava","sourceNew":"  /** Sort points on the given dimension. */\n  public static void sortByDim(int sortedDim, int bytesPerDim, int[] commonPrefixLengths,\n                               MutablePointValues reader, int from, int to,\n                               BytesRef scratch1, BytesRef scratch2) {\n\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    final int offset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n    final int numBytesToCompare = bytesPerDim - commonPrefixLengths[sortedDim];\n    new IntroSorter() {\n\n      final BytesRef pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = FutureArrays.compareUnsigned(pivot.bytes, pivot.offset + offset, pivot.offset + offset + numBytesToCompare, scratch2.bytes, scratch2.offset + offset, scratch2.offset + offset + numBytesToCompare);\n        if (cmp == 0) {\n          cmp = pivotDoc - reader.getDocID(j);\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","sourceOld":"  /** Sort points on the given dimension. */\n  public static void sortByDim(int sortedDim, int bytesPerDim, int[] commonPrefixLengths,\n                               MutablePointValues reader, int from, int to,\n                               BytesRef scratch1, BytesRef scratch2) {\n\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    final int offset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n    final int numBytesToCompare = bytesPerDim - commonPrefixLengths[sortedDim];\n    new IntroSorter() {\n\n      final BytesRef pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = StringHelper.compare(numBytesToCompare, pivot.bytes, pivot.offset + offset, scratch2.bytes, scratch2.offset + offset);\n        if (cmp == 0) {\n          cmp = pivotDoc - reader.getDocID(j);\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int[],MutablePointValues,int,int,BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int[],MutablePointValues,int,int,BytesRef,BytesRef).mjava","sourceNew":"  /** Sort points on the given dimension. */\n  public static void sortByDim(int sortedDim, int bytesPerDim, int[] commonPrefixLengths,\n                               MutablePointValues reader, int from, int to,\n                               BytesRef scratch1, BytesRef scratch2) {\n\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    final int offset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n    final int numBytesToCompare = bytesPerDim - commonPrefixLengths[sortedDim];\n    new IntroSorter() {\n\n      final BytesRef pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = Arrays.compareUnsigned(pivot.bytes, pivot.offset + offset, pivot.offset + offset + numBytesToCompare, scratch2.bytes, scratch2.offset + offset, scratch2.offset + offset + numBytesToCompare);\n        if (cmp == 0) {\n          cmp = pivotDoc - reader.getDocID(j);\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","sourceOld":"  /** Sort points on the given dimension. */\n  public static void sortByDim(int sortedDim, int bytesPerDim, int[] commonPrefixLengths,\n                               MutablePointValues reader, int from, int to,\n                               BytesRef scratch1, BytesRef scratch2) {\n\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    final int offset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n    final int numBytesToCompare = bytesPerDim - commonPrefixLengths[sortedDim];\n    new IntroSorter() {\n\n      final BytesRef pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = FutureArrays.compareUnsigned(pivot.bytes, pivot.offset + offset, pivot.offset + offset + numBytesToCompare, scratch2.bytes, scratch2.offset + offset, scratch2.offset + offset + numBytesToCompare);\n        if (cmp == 0) {\n          cmp = pivotDoc - reader.getDocID(j);\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f06758793500ca773d0df1037290e6e404fb33","date":1562230223,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int,int,int[],MutablePointValues,int,int,BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int[],MutablePointValues,int,int,BytesRef,BytesRef).mjava","sourceNew":"  /** Sort points on the given dimension. */\n  public static void sortByDim(int numDataDim, int numIndexDim, int sortedDim, int bytesPerDim, int[] commonPrefixLengths,\n                               MutablePointValues reader, int from, int to,\n                               BytesRef scratch1, BytesRef scratch2) {\n\n    final int start = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n    final int dimEnd =  sortedDim * bytesPerDim + bytesPerDim;\n    final int dataStart = numIndexDim * bytesPerDim;\n    final int dataEnd = dataStart + (numDataDim - numIndexDim) * bytesPerDim;\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    new IntroSorter() {\n\n      final BytesRef pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = Arrays.compareUnsigned(pivot.bytes, pivot.offset + start, pivot.offset + dimEnd, scratch2.bytes,\n            scratch2.offset + start, scratch2.offset + dimEnd);\n        if (cmp == 0) {\n          cmp = Arrays.compareUnsigned(pivot.bytes, pivot.offset + dataStart, pivot.offset + dataEnd,\n              scratch2.bytes, scratch2.offset + dataStart, scratch2.offset + dataEnd);\n          if (cmp == 0) {\n            cmp = pivotDoc - reader.getDocID(j);\n          }\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","sourceOld":"  /** Sort points on the given dimension. */\n  public static void sortByDim(int sortedDim, int bytesPerDim, int[] commonPrefixLengths,\n                               MutablePointValues reader, int from, int to,\n                               BytesRef scratch1, BytesRef scratch2) {\n\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    final int offset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n    final int numBytesToCompare = bytesPerDim - commonPrefixLengths[sortedDim];\n    new IntroSorter() {\n\n      final BytesRef pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = Arrays.compareUnsigned(pivot.bytes, pivot.offset + offset, pivot.offset + offset + numBytesToCompare, scratch2.bytes, scratch2.offset + offset, scratch2.offset + offset + numBytesToCompare);\n        if (cmp == 0) {\n          cmp = pivotDoc - reader.getDocID(j);\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"c7f06758793500ca773d0df1037290e6e404fb33":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7f06758793500ca773d0df1037290e6e404fb33"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["41f60ea1802fda42d3c91d023406066d00ddb5f8","9856095f7afb5a607bf5e65077615ed91273508c"],"c7f06758793500ca773d0df1037290e6e404fb33":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["c7f06758793500ca773d0df1037290e6e404fb33"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}