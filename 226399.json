{"path":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomPolygonQueries(IndexReader,Object...).mjava","commits":[{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomPolygonQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomPolygonQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated polygons */\n  protected void verifyRandomPolygonQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // Polygon\n      Object queryPolygon = randomQueryPolygon();\n      Object queryPoly2D = toPolygon2D(queryPolygon);\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newPolygonQuery(FIELD_NAME, queryRelation, queryPolygon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = VALIDATOR.setRelation(queryRelation).testPolygonQuery(queryPoly2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryPolygon);\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated polygons */\n  protected void verifyRandomPolygonQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // Polygon\n      Polygon queryPolygon = GeoTestUtil.nextPolygon();\n      Polygon2D queryPoly2D = Polygon2D.create(queryPolygon);\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newPolygonQuery(FIELD_NAME, queryRelation, queryPolygon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = getValidator(queryRelation).testPolygonQuery(queryPoly2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryPolygon.toGeoJSON());\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomPolygonQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomPolygonQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated polygons */\n  protected void verifyRandomPolygonQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // Polygon\n      Object queryPolygon = randomQueryPolygon();\n      Component2D queryPoly2D = toPolygon2D(queryPolygon);\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newPolygonQuery(FIELD_NAME, queryRelation, queryPolygon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = VALIDATOR.setRelation(queryRelation).testComponentQuery(queryPoly2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryPolygon);\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated polygons */\n  protected void verifyRandomPolygonQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // Polygon\n      Object queryPolygon = randomQueryPolygon();\n      Object queryPoly2D = toPolygon2D(queryPolygon);\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newPolygonQuery(FIELD_NAME, queryRelation, queryPolygon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = VALIDATOR.setRelation(queryRelation).testPolygonQuery(queryPoly2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryPolygon);\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomPolygonQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomPolygonQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated polygons */\n  protected void verifyRandomPolygonQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // Polygon\n      Object queryPolygon = randomQueryPolygon();\n      Component2D queryPoly2D = toPolygon2D(queryPolygon);\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newPolygonQuery(FIELD_NAME, queryRelation, queryPolygon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = VALIDATOR.setRelation(queryRelation).testComponentQuery(queryPoly2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryPolygon);\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated polygons */\n  protected void verifyRandomPolygonQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // Polygon\n      Object queryPolygon = randomQueryPolygon();\n      Object queryPoly2D = toPolygon2D(queryPolygon);\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newPolygonQuery(FIELD_NAME, queryRelation, queryPolygon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = VALIDATOR.setRelation(queryRelation).testPolygonQuery(queryPoly2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryPolygon);\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomPolygonQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomPolygonQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated polygons */\n  protected void verifyRandomPolygonQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // Polygon\n      Object queryPolygon = randomQueryPolygon();\n      Component2D queryPoly2D = toPolygon2D(queryPolygon);\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newPolygonQuery(FIELD_NAME, queryRelation, queryPolygon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = VALIDATOR.setRelation(queryRelation).testComponentQuery(queryPoly2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryPolygon);\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated polygons */\n  protected void verifyRandomPolygonQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // Polygon\n      Object queryPolygon = randomQueryPolygon();\n      Component2D queryPoly2D = toPolygon2D(queryPolygon);\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newPolygonQuery(FIELD_NAME, queryRelation, queryPolygon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          expected = VALIDATOR.setRelation(queryRelation).testComponentQuery(queryPoly2D, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryPolygon);\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"b0b597c65628ca9e73913a07e81691f8229bae35":["c286b0d8c507a88b289407e2fe161effa275c6b0","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["09c1e6d465800c73af60624bf9d4459a19f7940c","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}