{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","sourceNew":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","sourceOld":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c1b87b155748a27fbed84a0ffb3f8799177451e","date":1346349018,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","sourceNew":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    in.reset();\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","sourceOld":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","sourceNew":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    in.reset();\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","sourceOld":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c1b87b155748a27fbed84a0ffb3f8799177451e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4c1b87b155748a27fbed84a0ffb3f8799177451e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c1b87b155748a27fbed84a0ffb3f8799177451e"]},"commit2Childs":{"4c1b87b155748a27fbed84a0ffb3f8799177451e":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4c1b87b155748a27fbed84a0ffb3f8799177451e","05a14b2611ead08655a2b2bdc61632eb31316e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}