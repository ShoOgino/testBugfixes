{"path":"solr/core/src/test/org/apache/solr/request/macro/TestMacros#testMacros().mjava","commits":[{"id":"2fa33edb6216dc94f84690314f1ca005ab42cc99","date":1427399820,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/macro/TestMacros#testMacros().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestMacros#testMacros().mjava","sourceNew":"  @Test\n  public void testMacros() throws Exception {\n    assertU(add(doc(\"id\", \"1\", \"val_s\", \"aaa\", \"val_i\",\"123\")));\n    assertU(add(doc(\"id\", \"2\", \"val_s\", \"bbb\", \"val_i\",\"456\")));\n\n    assertU(commit());\n\n\n\n    assertJQ(req(\"fl\",\"id\", \"q\", \"id:${id}\", \"id\",\"1\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n    assertJQ(req(\"fl\",\"id\", \"q\", \"${idquery}\", \"idquery\",\"id:1\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n    assertJQ(req(\"fl\",\"id\", \"q\", \"${fname}:${fval}\", \"fname\",\"id\", \"fval\",\"2\")\n        , \"/response/docs==[{'id':'2'}]\"\n    );\n\n    // test macro expansion in keys...\n    assertJQ(req(\"fl\",\"id\", \"q\", \"{!term f=$fieldparam v=$valueparam}\", \"field${p}\",\"val_s\", \"value${p}\", \"aaa\", \"p\",\"param\", \"echoParams\",\"ALL\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n    // test disabling expansion\n    assertJQ(req(\"fl\",\"id\", \"q\", \"id:\\\"${id}\\\"\", \"id\",\"1\", \"expandMacros\",\"false\")\n        , \"/response/docs==[]\"\n    );\n\n    // test multiple levels in values\n    assertJQ(req(\"fl\",\"id\", \"q\", \"${idquery}\", \"idquery\",\"${a}${b}\", \"a\",\"val${fieldpostfix}:\", \"b\",\"${fieldval}\", \"fieldpostfix\",\"_s\", \"fieldval\",\"bbb\")\n        , \"/response/docs==[{'id':'2'}]\"\n    );\n\n    // test defaults\n    assertJQ(req(\"fl\",\"id\", \"q\", \"val_s:${val:aaa}\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n    // test defaults with value present\n    assertJQ(req(\"fl\",\"id\", \"q\", \"val_s:${val:aaa}\", \"val\",\"bbb\")\n        , \"/response/docs==[{'id':'2'}]\"\n    );\n\n    // test zero length default value\n    assertJQ(req(\"fl\",\"id\", \"q\", \"val_s:${missing:}aaa\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n    // test missing value\n    assertJQ(req(\"fl\",\"id\", \"q\", \"val_s:${missing}aaa\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testMacros() throws Exception {\n    assertU(add(doc(\"id\", \"1\", \"val_s\", \"aaa\", \"val_i\",\"123\")));\n    assertU(add(doc(\"id\", \"2\", \"val_s\", \"bbb\", \"val_i\",\"456\")));\n\n    assertU(commit());\n\n\n\n    assertJQ(req(\"fl\",\"id\", \"q\", \"id:${id}\", \"id\",\"1\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n    assertJQ(req(\"fl\",\"id\", \"q\", \"${idquery}\", \"idquery\",\"id:1\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n    assertJQ(req(\"fl\",\"id\", \"q\", \"${fname}:${fval}\", \"fname\",\"id\", \"fval\",\"2\")\n        , \"/response/docs==[{'id':'2'}]\"\n    );\n\n    // test macro expansion in keys...\n    assertJQ(req(\"fl\",\"id\", \"q\", \"{!term f=$fieldparam v=$valueparam}\", \"field${p}\",\"val_s\", \"value${p}\", \"aaa\", \"p\",\"param\", \"echoParams\",\"ALL\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n    // test disabling expansion\n    assertJQ(req(\"fl\",\"id\", \"q\", \"id:\\\"${id}\\\"\", \"id\",\"1\", \"expandMacros\",\"false\")\n        , \"/response/docs==[]\"\n    );\n\n    // test multiple levels in values\n    assertJQ(req(\"fl\",\"id\", \"q\", \"${idquery}\", \"idquery\",\"${a}${b}\", \"a\",\"val${fieldpostfix}:\", \"b\",\"${fieldval}\", \"fieldpostfix\",\"_s\", \"fieldval\",\"bbb\")\n        , \"/response/docs==[{'id':'2'}]\"\n    );\n\n    // test defaults\n    assertJQ(req(\"fl\",\"id\", \"q\", \"val_s:${val:aaa}\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n    // test defaults with value present\n    assertJQ(req(\"fl\",\"id\", \"q\", \"val_s:${val:aaa}\", \"val\",\"bbb\")\n        , \"/response/docs==[{'id':'2'}]\"\n    );\n\n    // test zero length default value\n    assertJQ(req(\"fl\",\"id\", \"q\", \"val_s:${missing:}aaa\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n    // test missing value\n    assertJQ(req(\"fl\",\"id\", \"q\", \"val_s:${missing}aaa\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/macro/TestMacros#testMacros().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMacros() throws Exception {\n    assertU(add(doc(\"id\", \"1\", \"val_s\", \"aaa\", \"val_i\",\"123\")));\n    assertU(add(doc(\"id\", \"2\", \"val_s\", \"bbb\", \"val_i\",\"456\")));\n\n    assertU(commit());\n\n\n\n    assertJQ(req(\"fl\",\"id\", \"q\", \"id:${id}\", \"id\",\"1\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n    assertJQ(req(\"fl\",\"id\", \"q\", \"${idquery}\", \"idquery\",\"id:1\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n    assertJQ(req(\"fl\",\"id\", \"q\", \"${fname}:${fval}\", \"fname\",\"id\", \"fval\",\"2\")\n        , \"/response/docs==[{'id':'2'}]\"\n    );\n\n    // test macro expansion in keys...\n    assertJQ(req(\"fl\",\"id\", \"q\", \"{!term f=$fieldparam v=$valueparam}\", \"field${p}\",\"val_s\", \"value${p}\", \"aaa\", \"p\",\"param\", \"echoParams\",\"ALL\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n    // test disabling expansion\n    assertJQ(req(\"fl\",\"id\", \"q\", \"id:\\\"${id}\\\"\", \"id\",\"1\", \"expandMacros\",\"false\")\n        , \"/response/docs==[]\"\n    );\n\n    // test multiple levels in values\n    assertJQ(req(\"fl\",\"id\", \"q\", \"${idquery}\", \"idquery\",\"${a}${b}\", \"a\",\"val${fieldpostfix}:\", \"b\",\"${fieldval}\", \"fieldpostfix\",\"_s\", \"fieldval\",\"bbb\")\n        , \"/response/docs==[{'id':'2'}]\"\n    );\n\n    // test defaults\n    assertJQ(req(\"fl\",\"id\", \"q\", \"val_s:${val:aaa}\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n    // test defaults with value present\n    assertJQ(req(\"fl\",\"id\", \"q\", \"val_s:${val:aaa}\", \"val\",\"bbb\")\n        , \"/response/docs==[{'id':'2'}]\"\n    );\n\n    // test zero length default value\n    assertJQ(req(\"fl\",\"id\", \"q\", \"val_s:${missing:}aaa\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n    // test missing value\n    assertJQ(req(\"fl\",\"id\", \"q\", \"val_s:${missing}aaa\")\n        , \"/response/docs==[{'id':'1'}]\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2fa33edb6216dc94f84690314f1ca005ab42cc99"],"2fa33edb6216dc94f84690314f1ca005ab42cc99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fa33edb6216dc94f84690314f1ca005ab42cc99"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2fa33edb6216dc94f84690314f1ca005ab42cc99":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2fa33edb6216dc94f84690314f1ca005ab42cc99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}