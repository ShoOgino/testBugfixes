{"path":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testInvokeApi().mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testInvokeApi().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInvokeApi() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try (SolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      GenericSolrRequest req =  new GenericSolrRequest(GET, \"/v2/node/invoke\", new ModifiableSolrParams()\n          .add(\"class\", ImplicitSnitch.class.getName())\n          .add(\"cores\", \"1\")\n          .add(\"freedisk\", \"1\")\n      );\n      SimpleSolrResponse rsp = req.process(client);\n      assertNotNull(((Map) rsp.getResponse().get(ImplicitSnitch.class.getName())).get(\"cores\"));\n      assertNotNull(((Map) rsp.getResponse().get(ImplicitSnitch.class.getName())).get(\"freedisk\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testInvokeApi().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInvokeApi() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try (SolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      GenericSolrRequest req =  new GenericSolrRequest(GET, \"/v2/node/invoke\", new ModifiableSolrParams()\n          .add(\"class\", ImplicitSnitch.class.getName())\n          .add(\"cores\", \"1\")\n          .add(\"freedisk\", \"1\")\n      );\n      SimpleSolrResponse rsp = req.process(client);\n      assertNotNull(((Map) rsp.getResponse().get(ImplicitSnitch.class.getName())).get(\"cores\"));\n      assertNotNull(((Map) rsp.getResponse().get(ImplicitSnitch.class.getName())).get(\"freedisk\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","date":1489203052,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testInvokeApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testInvokeApi().mjava","sourceNew":"  @Test\n  public void testInvokeApi() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try (SolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      GenericSolrRequest req =  new GenericSolrRequest(GET, \"/____v2/node/invoke\", new ModifiableSolrParams()\n          .add(\"class\", ImplicitSnitch.class.getName())\n          .add(\"cores\", \"1\")\n          .add(\"freedisk\", \"1\")\n      );\n      SimpleSolrResponse rsp = req.process(client);\n      assertNotNull(((Map) rsp.getResponse().get(ImplicitSnitch.class.getName())).get(\"cores\"));\n      assertNotNull(((Map) rsp.getResponse().get(ImplicitSnitch.class.getName())).get(\"freedisk\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvokeApi() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try (SolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n      GenericSolrRequest req =  new GenericSolrRequest(GET, \"/v2/node/invoke\", new ModifiableSolrParams()\n          .add(\"class\", ImplicitSnitch.class.getName())\n          .add(\"cores\", \"1\")\n          .add(\"freedisk\", \"1\")\n      );\n      SimpleSolrResponse rsp = req.process(client);\n      assertNotNull(((Map) rsp.getResponse().get(ImplicitSnitch.class.getName())).get(\"cores\"));\n      assertNotNull(((Map) rsp.getResponse().get(ImplicitSnitch.class.getName())).get(\"freedisk\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b"]},"commit2Childs":{"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}