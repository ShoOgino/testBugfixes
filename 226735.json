{"path":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocState,FieldInfo).mjava","commits":[{"id":"5ebb742ffd3fae76a577a68de595d711f43e6944","date":1305546231,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocState,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocState,FieldInfo,FieldInfos).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumer docValuesConsumer = docValues.get(fieldInfo.name);\n    if (docValuesConsumer != null) {\n      return docValuesConsumer;\n    }\n    PerDocConsumer perDocConsumer = perDocConsumers.get(fieldInfo.getCodecId());\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(fieldInfo.getCodecId());\n      SegmentCodecs codecs = perDocWriteState.segmentCodecs;\n      assert codecs.codecs.length > fieldInfo.getCodecId();\n      Codec codec = codecs.codecs[fieldInfo.getCodecId()];\n      perDocConsumer = codec.docsConsumer(perDocWriteState);\n      perDocConsumers.put(Integer.valueOf(fieldInfo.getCodecId()), perDocConsumer);\n    }\n    docValuesConsumer = perDocConsumer.addValuesField(fieldInfo);\n    fieldInfo.commitDocValues();\n    docValues.put(fieldInfo.name, docValuesConsumer);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocState docState, FieldInfo fieldInfo, FieldInfos infos) \n      throws IOException {\n    DocValuesConsumer docValuesConsumer = docValues.get(fieldInfo.name);\n    if (docValuesConsumer != null) {\n      return docValuesConsumer;\n    }\n    PerDocConsumer perDocConsumer = perDocConsumers.get(fieldInfo.getCodecId());\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(fieldInfo.getCodecId());\n      SegmentCodecs codecs = perDocWriteState.segmentCodecs;\n      assert codecs.codecs.length > fieldInfo.getCodecId();\n      \n      Codec codec = codecs.codecs[fieldInfo.getCodecId()];\n      perDocConsumer = codec.docsConsumer(perDocWriteState);\n      perDocConsumers.put(Integer.valueOf(fieldInfo.getCodecId()), perDocConsumer);\n    }\n    docValuesConsumer = perDocConsumer.addValuesField(fieldInfo);\n    docValues.put(fieldInfo.name, docValuesConsumer);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd04845a7e675e6eda07c4475e3f5ec15d5a2f94","date":1305894342,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocState,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumer docValuesConsumer = docValues.get(fieldInfo.name);\n    if (docValuesConsumer != null) {\n      return docValuesConsumer;\n    }\n    PerDocConsumer perDocConsumer = perDocConsumers.get(fieldInfo.getCodecId());\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(fieldInfo.getCodecId());\n      SegmentCodecs codecs = perDocWriteState.segmentCodecs;\n      assert codecs.codecs.length > fieldInfo.getCodecId();\n      Codec codec = codecs.codecs[fieldInfo.getCodecId()];\n      perDocConsumer = codec.docsConsumer(perDocWriteState);\n      perDocConsumers.put(Integer.valueOf(fieldInfo.getCodecId()), perDocConsumer);\n    }\n    boolean success = false;\n    try {\n      docValuesConsumer = perDocConsumer.addValuesField(fieldInfo);\n      fieldInfo.commitDocValues();\n      success = true;\n    } finally {\n      if (!success) {\n        fieldInfo.revertUncommitted();\n      }\n    }\n    docValues.put(fieldInfo.name, docValuesConsumer);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumer docValuesConsumer = docValues.get(fieldInfo.name);\n    if (docValuesConsumer != null) {\n      return docValuesConsumer;\n    }\n    PerDocConsumer perDocConsumer = perDocConsumers.get(fieldInfo.getCodecId());\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(fieldInfo.getCodecId());\n      SegmentCodecs codecs = perDocWriteState.segmentCodecs;\n      assert codecs.codecs.length > fieldInfo.getCodecId();\n      Codec codec = codecs.codecs[fieldInfo.getCodecId()];\n      perDocConsumer = codec.docsConsumer(perDocWriteState);\n      perDocConsumers.put(Integer.valueOf(fieldInfo.getCodecId()), perDocConsumer);\n    }\n    docValuesConsumer = perDocConsumer.addValuesField(fieldInfo);\n    fieldInfo.commitDocValues();\n    docValues.put(fieldInfo.name, docValuesConsumer);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocState,FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  DocValuesConsumer docValuesConsumer(DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumer docValuesConsumer = docValues.get(fieldInfo.name);\n    if (docValuesConsumer != null) {\n      return docValuesConsumer;\n    }\n    PerDocConsumer perDocConsumer = perDocConsumers.get(fieldInfo.getCodecId());\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(fieldInfo.getCodecId());\n      SegmentCodecs codecs = perDocWriteState.segmentCodecs;\n      assert codecs.codecs.length > fieldInfo.getCodecId();\n      Codec codec = codecs.codecs[fieldInfo.getCodecId()];\n      perDocConsumer = codec.docsConsumer(perDocWriteState);\n      perDocConsumers.put(Integer.valueOf(fieldInfo.getCodecId()), perDocConsumer);\n    }\n    boolean success = false;\n    try {\n      docValuesConsumer = perDocConsumer.addValuesField(fieldInfo);\n      fieldInfo.commitDocValues();\n      success = true;\n    } finally {\n      if (!success) {\n        fieldInfo.revertUncommitted();\n      }\n    }\n    docValues.put(fieldInfo.name, docValuesConsumer);\n    return docValuesConsumer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocState,FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  DocValuesConsumer docValuesConsumer(DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumer docValuesConsumer = docValues.get(fieldInfo.name);\n    if (docValuesConsumer != null) {\n      return docValuesConsumer;\n    }\n    PerDocConsumer perDocConsumer = perDocConsumers.get(fieldInfo.getCodecId());\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(fieldInfo.getCodecId());\n      SegmentCodecs codecs = perDocWriteState.segmentCodecs;\n      assert codecs.codecs.length > fieldInfo.getCodecId();\n      Codec codec = codecs.codecs[fieldInfo.getCodecId()];\n      perDocConsumer = codec.docsConsumer(perDocWriteState);\n      perDocConsumers.put(Integer.valueOf(fieldInfo.getCodecId()), perDocConsumer);\n    }\n    boolean success = false;\n    try {\n      docValuesConsumer = perDocConsumer.addValuesField(fieldInfo);\n      fieldInfo.commitDocValues();\n      success = true;\n    } finally {\n      if (!success) {\n        fieldInfo.revertUncommitted();\n      }\n    }\n    docValues.put(fieldInfo.name, docValuesConsumer);\n    return docValuesConsumer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"594a11fd830b89fd08a253593d8e5062e20f5564","date":1317054010,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocState,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"IndexDocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n    PerDocConsumer perDocConsumer = perDocConsumers.get(fieldInfo.getCodecId());\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(fieldInfo.getCodecId());\n      SegmentCodecs codecs = perDocWriteState.segmentCodecs;\n      assert codecs.codecs.length > fieldInfo.getCodecId();\n      Codec codec = codecs.codecs[fieldInfo.getCodecId()];\n      perDocConsumer = codec.docsConsumer(perDocWriteState);\n      perDocConsumers.put(Integer.valueOf(fieldInfo.getCodecId()), perDocConsumer);\n    }\n    boolean success = false;\n    DocValuesConsumer docValuesConsumer = null;\n    try {\n      docValuesConsumer = perDocConsumer.addValuesField(fieldInfo);\n      fieldInfo.commitDocValues();\n      success = true;\n    } finally {\n      if (!success) {\n        fieldInfo.revertUncommitted();\n      }\n    }\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumer docValuesConsumer = docValues.get(fieldInfo.name);\n    if (docValuesConsumer != null) {\n      return docValuesConsumer;\n    }\n    PerDocConsumer perDocConsumer = perDocConsumers.get(fieldInfo.getCodecId());\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(fieldInfo.getCodecId());\n      SegmentCodecs codecs = perDocWriteState.segmentCodecs;\n      assert codecs.codecs.length > fieldInfo.getCodecId();\n      Codec codec = codecs.codecs[fieldInfo.getCodecId()];\n      perDocConsumer = codec.docsConsumer(perDocWriteState);\n      perDocConsumers.put(Integer.valueOf(fieldInfo.getCodecId()), perDocConsumer);\n    }\n    boolean success = false;\n    try {\n      docValuesConsumer = perDocConsumer.addValuesField(fieldInfo);\n      fieldInfo.commitDocValues();\n      success = true;\n    } finally {\n      if (!success) {\n        fieldInfo.revertUncommitted();\n      }\n    }\n    docValues.put(fieldInfo.name, docValuesConsumer);\n    return docValuesConsumer;\n  }\n\n","bugFix":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocState,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"IndexDocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    PerDocConsumer perDocConsumer = perDocConsumers.get(0);\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      DocValuesFormat dvFormat = docState.docWriter.codec.docValuesFormat();\n      perDocConsumer = dvFormat.docsConsumer(perDocWriteState);\n      perDocConsumers.put(0, perDocConsumer);\n    }\n    boolean success = false;\n    DocValuesConsumer docValuesConsumer = null;\n    try {\n      docValuesConsumer = perDocConsumer.addValuesField(fieldInfo);\n      fieldInfo.commitDocValues();\n      success = true;\n    } finally {\n      if (!success) {\n        fieldInfo.revertUncommitted();\n      }\n    }\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"IndexDocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n    PerDocConsumer perDocConsumer = perDocConsumers.get(fieldInfo.getCodecId());\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(fieldInfo.getCodecId());\n      SegmentCodecs codecs = perDocWriteState.segmentCodecs;\n      assert codecs.codecs.length > fieldInfo.getCodecId();\n      Codec codec = codecs.codecs[fieldInfo.getCodecId()];\n      perDocConsumer = codec.docsConsumer(perDocWriteState);\n      perDocConsumers.put(Integer.valueOf(fieldInfo.getCodecId()), perDocConsumer);\n    }\n    boolean success = false;\n    DocValuesConsumer docValuesConsumer = null;\n    try {\n      docValuesConsumer = perDocConsumer.addValuesField(fieldInfo);\n      fieldInfo.commitDocValues();\n      success = true;\n    } finally {\n      if (!success) {\n        fieldInfo.revertUncommitted();\n      }\n    }\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766","fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05","date":1323284809,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(ValueType,DocState,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(ValueType valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"IndexDocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    PerDocConsumer perDocConsumer = perDocConsumers.get(0);\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      DocValuesFormat dvFormat = docState.docWriter.codec.docValuesFormat();\n      perDocConsumer = dvFormat.docsConsumer(perDocWriteState);\n      perDocConsumers.put(0, perDocConsumer);\n    }\n\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"IndexDocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    PerDocConsumer perDocConsumer = perDocConsumers.get(0);\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      DocValuesFormat dvFormat = docState.docWriter.codec.docValuesFormat();\n      perDocConsumer = dvFormat.docsConsumer(perDocWriteState);\n      perDocConsumers.put(0, perDocConsumer);\n    }\n    boolean success = false;\n    DocValuesConsumer docValuesConsumer = null;\n    try {\n      docValuesConsumer = perDocConsumer.addValuesField(fieldInfo);\n      fieldInfo.commitDocValues();\n      success = true;\n    } finally {\n      if (!success) {\n        fieldInfo.revertUncommitted();\n      }\n    }\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocValues.Type,DocState,FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#docValuesConsumer(DocState,FieldInfo).mjava","sourceNew":"  DocValuesConsumer docValuesConsumer(DocValues.Type valueType, DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    PerDocConsumer perDocConsumer = perDocConsumers.get(0);\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      DocValuesFormat dvFormat = docState.docWriter.codec.docValuesFormat();\n      perDocConsumer = dvFormat.docsConsumer(perDocWriteState);\n      perDocConsumers.put(0, perDocConsumer);\n    }\n\n    DocValuesConsumer docValuesConsumer = perDocConsumer.addValuesField(valueType, fieldInfo);\n    fieldInfo.setDocValuesType(valueType);\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","sourceOld":"  DocValuesConsumer docValuesConsumer(DocState docState, FieldInfo fieldInfo) \n      throws IOException {\n    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);\n    if (docValuesConsumerAndDocID != null) {\n      if (docState.docID == docValuesConsumerAndDocID.docID) {\n        throw new IllegalArgumentException(\"IndexDocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed, per field)\");\n      }\n      assert docValuesConsumerAndDocID.docID < docState.docID;\n      docValuesConsumerAndDocID.docID = docState.docID;\n      return docValuesConsumerAndDocID.docValuesConsumer;\n    }\n\n    PerDocConsumer perDocConsumer = perDocConsumers.get(0);\n    if (perDocConsumer == null) {\n      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(\"\");\n      DocValuesFormat dvFormat = docState.docWriter.codec.docValuesFormat();\n      perDocConsumer = dvFormat.docsConsumer(perDocWriteState);\n      perDocConsumers.put(0, perDocConsumer);\n    }\n    boolean success = false;\n    DocValuesConsumer docValuesConsumer = null;\n    try {\n      docValuesConsumer = perDocConsumer.addValuesField(fieldInfo);\n      fieldInfo.commitDocValues();\n      success = true;\n    } finally {\n      if (!success) {\n        fieldInfo.revertUncommitted();\n      }\n    }\n\n    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);\n    docValuesConsumerAndDocID.docID = docState.docID;\n    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);\n    return docValuesConsumer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"7b91922b55d15444d554721b352861d028eb8278":["594a11fd830b89fd08a253593d8e5062e20f5564"],"5ebb742ffd3fae76a577a68de595d711f43e6944":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dd04845a7e675e6eda07c4475e3f5ec15d5a2f94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd04845a7e675e6eda07c4475e3f5ec15d5a2f94":["5ebb742ffd3fae76a577a68de595d711f43e6944"],"594a11fd830b89fd08a253593d8e5062e20f5564":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["7b91922b55d15444d554721b352861d028eb8278","ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"7b91922b55d15444d554721b352861d028eb8278":["ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"5ebb742ffd3fae76a577a68de595d711f43e6944":["dd04845a7e675e6eda07c4475e3f5ec15d5a2f94"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","594a11fd830b89fd08a253593d8e5062e20f5564"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","5ebb742ffd3fae76a577a68de595d711f43e6944","2e8d7ba2175f47e280231533f7d3016249cea88b"],"dd04845a7e675e6eda07c4475e3f5ec15d5a2f94":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"594a11fd830b89fd08a253593d8e5062e20f5564":["7b91922b55d15444d554721b352861d028eb8278"],"ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}