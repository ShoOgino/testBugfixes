{"path":"lucene/core/src/java/org/apache/lucene/geo/Circle2D#intersectsLine(double,double,double,double).mjava","commits":[{"id":"8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc","date":1582124610,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Circle2D#intersectsLine(double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  // This methods in a new helper class XYUtil?\n  private boolean intersectsLine(double aX, double aY, double bX, double bY) {\n    //Algorithm based on this thread : https://stackoverflow.com/questions/3120357/get-closest-point-to-a-line\n    final double[] vectorAP = new double[] {calculator.geX() - aX, calculator.getY() - aY};\n    final double[] vectorAB = new double[] {bX - aX, bY - aY};\n\n    final double magnitudeAB = vectorAB[0] * vectorAB[0] + vectorAB[1] * vectorAB[1];\n    final double dotProduct = vectorAP[0] * vectorAB[0] + vectorAP[1] * vectorAB[1];\n\n    final double distance = dotProduct / magnitudeAB;\n\n    if (distance < 0 || distance > dotProduct) {\n      return false;\n    }\n\n    final double pX = aX + vectorAB[0] * distance;\n    final double pY = aY + vectorAB[1] * distance;\n\n    final double minX = StrictMath.min(aX, bX);\n    final double minY = StrictMath.min(aY, bY);\n    final double maxX = StrictMath.max(aX, bX);\n    final double maxY = StrictMath.max(aY, bY);\n\n    if (pX >= minX && pX <= maxX && pY >= minY && pY <= maxY) {\n      return contains(pX, pY);\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1","date":1582881747,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Circle2D#intersectsLine(double,double,double,double,double,double,DistanceCalculator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Circle2D#intersectsLine(double,double,double,double).mjava","sourceNew":"  private static boolean intersectsLine(double centerX, double centerY, double aX, double aY, double bX, double bY, DistanceCalculator calculator) {\n    //Algorithm based on this thread : https://stackoverflow.com/questions/3120357/get-closest-point-to-a-line\n    final double vectorAPX = centerX - aX;\n    final double vectorAPY = centerY - aY;\n\n    final double vectorABX = bX - aX;\n    final double vectorABY = bY - aY;\n\n    final double magnitudeAB = vectorABX * vectorABX + vectorABY * vectorABY;\n    final double dotProduct = vectorAPX * vectorABX + vectorAPY * vectorABY;\n\n    final double distance = dotProduct / magnitudeAB;\n\n    if (distance < 0 || distance > dotProduct) {\n      return false;\n    }\n\n    final double pX = aX + vectorABX * distance;\n    final double pY = aY + vectorABY * distance;\n\n    final double minX = StrictMath.min(aX, bX);\n    final double minY = StrictMath.min(aY, bY);\n    final double maxX = StrictMath.max(aX, bX);\n    final double maxY = StrictMath.max(aY, bY);\n\n    if (pX >= minX && pX <= maxX && pY >= minY && pY <= maxY) {\n      return calculator.contains(pX, pY);\n    }\n    return false;\n  }\n\n","sourceOld":"  // This methods in a new helper class XYUtil?\n  private boolean intersectsLine(double aX, double aY, double bX, double bY) {\n    //Algorithm based on this thread : https://stackoverflow.com/questions/3120357/get-closest-point-to-a-line\n    final double[] vectorAP = new double[] {calculator.geX() - aX, calculator.getY() - aY};\n    final double[] vectorAB = new double[] {bX - aX, bY - aY};\n\n    final double magnitudeAB = vectorAB[0] * vectorAB[0] + vectorAB[1] * vectorAB[1];\n    final double dotProduct = vectorAP[0] * vectorAB[0] + vectorAP[1] * vectorAB[1];\n\n    final double distance = dotProduct / magnitudeAB;\n\n    if (distance < 0 || distance > dotProduct) {\n      return false;\n    }\n\n    final double pX = aX + vectorAB[0] * distance;\n    final double pY = aY + vectorAB[1] * distance;\n\n    final double minX = StrictMath.min(aX, bX);\n    final double minY = StrictMath.min(aY, bY);\n    final double maxX = StrictMath.max(aX, bX);\n    final double maxY = StrictMath.max(aY, bY);\n\n    if (pX >= minX && pX <= maxX && pY >= minY && pY <= maxY) {\n      return contains(pX, pY);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1":["8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1"]},"commit2Childs":{"ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc"],"8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc":["ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}