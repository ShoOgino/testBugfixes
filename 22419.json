{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoSortedNumberSameValue().mjava","commits":[{"id":"26528d5285d5485e3c0b24a6fae22ef227513cf7","date":1413457389,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoSortedNumberSameValue().mjava","pathOld":"/dev/null","sourceNew":"  public void testTwoSortedNumberSameValue() throws IOException {\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // Now search the index:\n    IndexReader reader = DirectoryReader.open(directory);\n    assert reader.leaves().size() == 1;\n    SortedNumericDocValues dv = reader.leaves().get(0).reader().getSortedNumericDocValues(\"dv\");\n    dv.setDocument(0);\n    assertEquals(2, dv.count());\n    assertEquals(11, dv.valueAt(0));\n    assertEquals(11, dv.valueAt(1));\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoSortedNumberSameValue().mjava","pathOld":"/dev/null","sourceNew":"  public void testTwoSortedNumberSameValue() throws IOException {\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // Now search the index:\n    IndexReader reader = DirectoryReader.open(directory);\n    assert reader.leaves().size() == 1;\n    SortedNumericDocValues dv = reader.leaves().get(0).reader().getSortedNumericDocValues(\"dv\");\n    dv.setDocument(0);\n    assertEquals(2, dv.count());\n    assertEquals(11, dv.valueAt(0));\n    assertEquals(11, dv.valueAt(1));\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoSortedNumberSameValue().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoSortedNumberSameValue().mjava","sourceNew":"  public void testTwoSortedNumberSameValue() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // Now search the index:\n    IndexReader reader = DirectoryReader.open(directory);\n    assert reader.leaves().size() == 1;\n    SortedNumericDocValues dv = reader.leaves().get(0).reader().getSortedNumericDocValues(\"dv\");\n    assertEquals(0, dv.nextDoc());\n    assertEquals(2, dv.docValueCount());\n    assertEquals(11, dv.nextValue());\n    assertEquals(11, dv.nextValue());\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTwoSortedNumberSameValue() throws IOException {\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // Now search the index:\n    IndexReader reader = DirectoryReader.open(directory);\n    assert reader.leaves().size() == 1;\n    SortedNumericDocValues dv = reader.leaves().get(0).reader().getSortedNumericDocValues(\"dv\");\n    dv.setDocument(0);\n    assertEquals(2, dv.count());\n    assertEquals(11, dv.valueAt(0));\n    assertEquals(11, dv.valueAt(1));\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoSortedNumberSameValue().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoSortedNumberSameValue().mjava","sourceNew":"  public void testTwoSortedNumberSameValue() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // Now search the index:\n    IndexReader reader = DirectoryReader.open(directory);\n    assert reader.leaves().size() == 1;\n    SortedNumericDocValues dv = reader.leaves().get(0).reader().getSortedNumericDocValues(\"dv\");\n    assertEquals(0, dv.nextDoc());\n    assertEquals(2, dv.docValueCount());\n    assertEquals(11, dv.nextValue());\n    assertEquals(11, dv.nextValue());\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTwoSortedNumberSameValue() throws IOException {\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // Now search the index:\n    IndexReader reader = DirectoryReader.open(directory);\n    assert reader.leaves().size() == 1;\n    SortedNumericDocValues dv = reader.leaves().get(0).reader().getSortedNumericDocValues(\"dv\");\n    dv.setDocument(0);\n    assertEquals(2, dv.count());\n    assertEquals(11, dv.valueAt(0));\n    assertEquals(11, dv.valueAt(1));\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoSortedNumberSameValue().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testTwoSortedNumberSameValue().mjava","sourceNew":"  public void testTwoSortedNumberSameValue() throws IOException {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // Now search the index:\n    IndexReader reader = DirectoryReader.open(directory);\n    assert reader.leaves().size() == 1;\n    SortedNumericDocValues dv = reader.leaves().get(0).reader().getSortedNumericDocValues(\"dv\");\n    assertEquals(0, dv.nextDoc());\n    assertEquals(2, dv.docValueCount());\n    assertEquals(11, dv.nextValue());\n    assertEquals(11, dv.nextValue());\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTwoSortedNumberSameValue() throws IOException {\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    Document doc = new Document();\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    doc.add(new SortedNumericDocValuesField(\"dv\", 11));\n    writer.addDocument(doc);\n    writer.close();\n    \n    // Now search the index:\n    IndexReader reader = DirectoryReader.open(directory);\n    assert reader.leaves().size() == 1;\n    SortedNumericDocValues dv = reader.leaves().get(0).reader().getSortedNumericDocValues(\"dv\");\n    dv.setDocument(0);\n    assertEquals(2, dv.count());\n    assertEquals(11, dv.valueAt(0));\n    assertEquals(11, dv.valueAt(1));\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","26528d5285d5485e3c0b24a6fae22ef227513cf7"],"26528d5285d5485e3c0b24a6fae22ef227513cf7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","26528d5285d5485e3c0b24a6fae22ef227513cf7"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"26528d5285d5485e3c0b24a6fae22ef227513cf7":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}