{"path":"solr/core/src/java/org/apache/solr/logging/jul/JulWatcher#getAllLoggers().mjava","commits":[{"id":"829761a123d59d7a3c39e5f13fbc03de63f55ce5","date":1334686329,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/jul/JulWatcher#getAllLoggers().mjava","pathOld":"/dev/null","sourceNew":"  @Override\r\n  public Collection<LoggerInfo> getAllLoggers() {\r\n    LogManager manager = LogManager.getLogManager();\r\n\r\n    Logger root = manager.getLogger(\"\");\r\n    Map<String,LoggerInfo> map = new HashMap<String,LoggerInfo>();\r\n    Enumeration<String> names = manager.getLoggerNames();\r\n    while (names.hasMoreElements()) {\r\n      String name = names.nextElement();\r\n      Logger logger = Logger.getLogger(name);\r\n      if( logger == root) {\r\n        continue;\r\n      }\r\n      map.put(name, new JulInfo(name, logger));\r\n\r\n      while (true) {\r\n        int dot = name.lastIndexOf(\".\");\r\n        if (dot < 0)\r\n          break;\r\n        name = name.substring(0, dot);\r\n        if(!map.containsKey(name)) {\r\n          map.put(name, new JulInfo(name, null));\r\n        }\r\n      }\r\n    }\r\n    map.put(LoggerInfo.ROOT_NAME, new JulInfo(LoggerInfo.ROOT_NAME, root));\r\n    return map.values();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d681ca1a1c487b2501ef9bde8602a65c4c717a46","date":1346078839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/jul/JulWatcher#getAllLoggers().mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/jul/JulWatcher#getAllLoggers().mjava","sourceNew":"  @Override\n  public Collection<LoggerInfo> getAllLoggers() {\n    LogManager manager = LogManager.getLogManager();\n\n    Logger root = manager.getLogger(\"\");\n    Map<String,LoggerInfo> map = new HashMap<String,LoggerInfo>();\n    Enumeration<String> names = manager.getLoggerNames();\n    while (names.hasMoreElements()) {\n      String name = names.nextElement();\n      Logger logger = Logger.getLogger(name);\n      if( logger == root) {\n        continue;\n      }\n      map.put(name, new JulInfo(name, logger));\n\n      while (true) {\n        int dot = name.lastIndexOf(\".\");\n        if (dot < 0)\n          break;\n        name = name.substring(0, dot);\n        if(!map.containsKey(name)) {\n          map.put(name, new JulInfo(name, null));\n        }\n      }\n    }\n    map.put(LoggerInfo.ROOT_NAME, new JulInfo(LoggerInfo.ROOT_NAME, root));\n    return map.values();\n  }\n\n","sourceOld":"  @Override\r\n  public Collection<LoggerInfo> getAllLoggers() {\r\n    LogManager manager = LogManager.getLogManager();\r\n\r\n    Logger root = manager.getLogger(\"\");\r\n    Map<String,LoggerInfo> map = new HashMap<String,LoggerInfo>();\r\n    Enumeration<String> names = manager.getLoggerNames();\r\n    while (names.hasMoreElements()) {\r\n      String name = names.nextElement();\r\n      Logger logger = Logger.getLogger(name);\r\n      if( logger == root) {\r\n        continue;\r\n      }\r\n      map.put(name, new JulInfo(name, logger));\r\n\r\n      while (true) {\r\n        int dot = name.lastIndexOf(\".\");\r\n        if (dot < 0)\r\n          break;\r\n        name = name.substring(0, dot);\r\n        if(!map.containsKey(name)) {\r\n          map.put(name, new JulInfo(name, null));\r\n        }\r\n      }\r\n    }\r\n    map.put(LoggerInfo.ROOT_NAME, new JulInfo(LoggerInfo.ROOT_NAME, root));\r\n    return map.values();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/jul/JulWatcher#getAllLoggers().mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/jul/JulWatcher#getAllLoggers().mjava","sourceNew":"  @Override\n  public Collection<LoggerInfo> getAllLoggers() {\n    LogManager manager = LogManager.getLogManager();\n\n    Logger root = manager.getLogger(\"\");\n    Map<String,LoggerInfo> map = new HashMap<String,LoggerInfo>();\n    Enumeration<String> names = manager.getLoggerNames();\n    while (names.hasMoreElements()) {\n      String name = names.nextElement();\n      Logger logger = Logger.getLogger(name);\n      if( logger == root) {\n        continue;\n      }\n      map.put(name, new JulInfo(name, logger));\n\n      while (true) {\n        int dot = name.lastIndexOf(\".\");\n        if (dot < 0)\n          break;\n        name = name.substring(0, dot);\n        if(!map.containsKey(name)) {\n          map.put(name, new JulInfo(name, null));\n        }\n      }\n    }\n    map.put(LoggerInfo.ROOT_NAME, new JulInfo(LoggerInfo.ROOT_NAME, root));\n    return map.values();\n  }\n\n","sourceOld":"  @Override\r\n  public Collection<LoggerInfo> getAllLoggers() {\r\n    LogManager manager = LogManager.getLogManager();\r\n\r\n    Logger root = manager.getLogger(\"\");\r\n    Map<String,LoggerInfo> map = new HashMap<String,LoggerInfo>();\r\n    Enumeration<String> names = manager.getLoggerNames();\r\n    while (names.hasMoreElements()) {\r\n      String name = names.nextElement();\r\n      Logger logger = Logger.getLogger(name);\r\n      if( logger == root) {\r\n        continue;\r\n      }\r\n      map.put(name, new JulInfo(name, logger));\r\n\r\n      while (true) {\r\n        int dot = name.lastIndexOf(\".\");\r\n        if (dot < 0)\r\n          break;\r\n        name = name.substring(0, dot);\r\n        if(!map.containsKey(name)) {\r\n          map.put(name, new JulInfo(name, null));\r\n        }\r\n      }\r\n    }\r\n    map.put(LoggerInfo.ROOT_NAME, new JulInfo(LoggerInfo.ROOT_NAME, root));\r\n    return map.values();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/jul/JulWatcher#getAllLoggers().mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/jul/JulWatcher#getAllLoggers().mjava","sourceNew":"  @Override\n  public Collection<LoggerInfo> getAllLoggers() {\n    LogManager manager = LogManager.getLogManager();\n\n    Logger root = manager.getLogger(\"\");\n    Map<String,LoggerInfo> map = new HashMap<>();\n    Enumeration<String> names = manager.getLoggerNames();\n    while (names.hasMoreElements()) {\n      String name = names.nextElement();\n      Logger logger = Logger.getLogger(name);\n      if( logger == root) {\n        continue;\n      }\n      map.put(name, new JulInfo(name, logger));\n\n      while (true) {\n        int dot = name.lastIndexOf(\".\");\n        if (dot < 0)\n          break;\n        name = name.substring(0, dot);\n        if(!map.containsKey(name)) {\n          map.put(name, new JulInfo(name, null));\n        }\n      }\n    }\n    map.put(LoggerInfo.ROOT_NAME, new JulInfo(LoggerInfo.ROOT_NAME, root));\n    return map.values();\n  }\n\n","sourceOld":"  @Override\n  public Collection<LoggerInfo> getAllLoggers() {\n    LogManager manager = LogManager.getLogManager();\n\n    Logger root = manager.getLogger(\"\");\n    Map<String,LoggerInfo> map = new HashMap<String,LoggerInfo>();\n    Enumeration<String> names = manager.getLoggerNames();\n    while (names.hasMoreElements()) {\n      String name = names.nextElement();\n      Logger logger = Logger.getLogger(name);\n      if( logger == root) {\n        continue;\n      }\n      map.put(name, new JulInfo(name, logger));\n\n      while (true) {\n        int dot = name.lastIndexOf(\".\");\n        if (dot < 0)\n          break;\n        name = name.substring(0, dot);\n        if(!map.containsKey(name)) {\n          map.put(name, new JulInfo(name, null));\n        }\n      }\n    }\n    map.put(LoggerInfo.ROOT_NAME, new JulInfo(LoggerInfo.ROOT_NAME, root));\n    return map.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d681ca1a1c487b2501ef9bde8602a65c4c717a46"],"d681ca1a1c487b2501ef9bde8602a65c4c717a46":["829761a123d59d7a3c39e5f13fbc03de63f55ce5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"829761a123d59d7a3c39e5f13fbc03de63f55ce5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["829761a123d59d7a3c39e5f13fbc03de63f55ce5","d681ca1a1c487b2501ef9bde8602a65c4c717a46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d681ca1a1c487b2501ef9bde8602a65c4c717a46":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","05a14b2611ead08655a2b2bdc61632eb31316e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["829761a123d59d7a3c39e5f13fbc03de63f55ce5"],"829761a123d59d7a3c39e5f13fbc03de63f55ce5":["d681ca1a1c487b2501ef9bde8602a65c4c717a46","05a14b2611ead08655a2b2bdc61632eb31316e57"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}