{"path":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#getFacetCounts(SimpleFacets,FacetDebugInfo).mjava","commits":[{"id":"3e5f469d206ae27a1d59e654e70a1413ffcec765","date":1462661221,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#getFacetCounts(SimpleFacets,FacetDebugInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see SimpleFacets#getFacetQueryCounts\n   * @see SimpleFacets#getFacetFieldCounts\n   * @see RangeFacetProcessor#getFacetRangeCounts\n   * @see RangeFacetProcessor#getFacetIntervalCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public static NamedList<Object> getFacetCounts(SimpleFacets simpleFacets, FacetDebugInfo fdebug) {\n    // if someone called this method, benefit of the doubt: assume true\n    if (!simpleFacets.getGlobalParams().getBool(FacetParams.FACET, true))\n      return null;\n\n    RangeFacetProcessor rangeFacetProcessor = new RangeFacetProcessor(simpleFacets.getRequest(), simpleFacets.getDocsOrig(), simpleFacets.getGlobalParams(), simpleFacets.getResponseBuilder());\n    NamedList<Object> counts = new SimpleOrderedMap<>();\n    try {\n      counts.add(FACET_QUERY_KEY, simpleFacets.getFacetQueryCounts());\n      if (fdebug != null) {\n        FacetDebugInfo fd = new FacetDebugInfo();\n        fd.putInfoItem(\"action\", \"field facet\");\n        fd.setProcessor(simpleFacets.getClass().getSimpleName());\n        fdebug.addChild(fd);\n        simpleFacets.setFacetDebugInfo(fd);\n        final RTimer timer = new RTimer();\n        counts.add(FACET_FIELD_KEY, simpleFacets.getFacetFieldCounts());\n        long timeElapsed = (long) timer.getTime();\n        fd.setElapse(timeElapsed);\n      } else {\n        counts.add(FACET_FIELD_KEY, simpleFacets.getFacetFieldCounts());\n      }\n      counts.add(FACET_RANGES_KEY, rangeFacetProcessor.getFacetRangeCounts());\n      counts.add(FACET_INTERVALS_KEY, simpleFacets.getFacetIntervalCounts());\n      counts.add(SpatialHeatmapFacets.RESPONSE_KEY, simpleFacets.getHeatmapCounts());\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (SyntaxError e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return counts;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#getFacetCounts(SimpleFacets,FacetDebugInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see SimpleFacets#getFacetQueryCounts\n   * @see SimpleFacets#getFacetFieldCounts\n   * @see RangeFacetProcessor#getFacetRangeCounts\n   * @see RangeFacetProcessor#getFacetIntervalCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public static NamedList<Object> getFacetCounts(SimpleFacets simpleFacets, FacetDebugInfo fdebug) {\n    // if someone called this method, benefit of the doubt: assume true\n    if (!simpleFacets.getGlobalParams().getBool(FacetParams.FACET, true))\n      return null;\n\n    RangeFacetProcessor rangeFacetProcessor = new RangeFacetProcessor(simpleFacets.getRequest(), simpleFacets.getDocsOrig(), simpleFacets.getGlobalParams(), simpleFacets.getResponseBuilder());\n    NamedList<Object> counts = new SimpleOrderedMap<>();\n    try {\n      counts.add(FACET_QUERY_KEY, simpleFacets.getFacetQueryCounts());\n      if (fdebug != null) {\n        FacetDebugInfo fd = new FacetDebugInfo();\n        fd.putInfoItem(\"action\", \"field facet\");\n        fd.setProcessor(simpleFacets.getClass().getSimpleName());\n        fdebug.addChild(fd);\n        simpleFacets.setFacetDebugInfo(fd);\n        final RTimer timer = new RTimer();\n        counts.add(FACET_FIELD_KEY, simpleFacets.getFacetFieldCounts());\n        long timeElapsed = (long) timer.getTime();\n        fd.setElapse(timeElapsed);\n      } else {\n        counts.add(FACET_FIELD_KEY, simpleFacets.getFacetFieldCounts());\n      }\n      counts.add(FACET_RANGES_KEY, rangeFacetProcessor.getFacetRangeCounts());\n      counts.add(FACET_INTERVALS_KEY, simpleFacets.getFacetIntervalCounts());\n      counts.add(SpatialHeatmapFacets.RESPONSE_KEY, simpleFacets.getHeatmapCounts());\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (SyntaxError e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return counts;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#getFacetCounts(SimpleFacets,FacetDebugInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see SimpleFacets#getFacetQueryCounts\n   * @see SimpleFacets#getFacetFieldCounts\n   * @see RangeFacetProcessor#getFacetRangeCounts\n   * @see RangeFacetProcessor#getFacetIntervalCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public static NamedList<Object> getFacetCounts(SimpleFacets simpleFacets, FacetDebugInfo fdebug) {\n    // if someone called this method, benefit of the doubt: assume true\n    if (!simpleFacets.getGlobalParams().getBool(FacetParams.FACET, true))\n      return null;\n\n    RangeFacetProcessor rangeFacetProcessor = new RangeFacetProcessor(simpleFacets.getRequest(), simpleFacets.getDocsOrig(), simpleFacets.getGlobalParams(), simpleFacets.getResponseBuilder());\n    NamedList<Object> counts = new SimpleOrderedMap<>();\n    try {\n      counts.add(FACET_QUERY_KEY, simpleFacets.getFacetQueryCounts());\n      if (fdebug != null) {\n        FacetDebugInfo fd = new FacetDebugInfo();\n        fd.putInfoItem(\"action\", \"field facet\");\n        fd.setProcessor(simpleFacets.getClass().getSimpleName());\n        fdebug.addChild(fd);\n        simpleFacets.setFacetDebugInfo(fd);\n        final RTimer timer = new RTimer();\n        counts.add(FACET_FIELD_KEY, simpleFacets.getFacetFieldCounts());\n        long timeElapsed = (long) timer.getTime();\n        fd.setElapse(timeElapsed);\n      } else {\n        counts.add(FACET_FIELD_KEY, simpleFacets.getFacetFieldCounts());\n      }\n      counts.add(FACET_RANGES_KEY, rangeFacetProcessor.getFacetRangeCounts());\n      counts.add(FACET_INTERVALS_KEY, simpleFacets.getFacetIntervalCounts());\n      counts.add(SpatialHeatmapFacets.RESPONSE_KEY, simpleFacets.getHeatmapCounts());\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (SyntaxError e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return counts;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e5f469d206ae27a1d59e654e70a1413ffcec765":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e5f469d206ae27a1d59e654e70a1413ffcec765"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e5f469d206ae27a1d59e654e70a1413ffcec765"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e5f469d206ae27a1d59e654e70a1413ffcec765"]},"commit2Childs":{"3e5f469d206ae27a1d59e654e70a1413ffcec765":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e5f469d206ae27a1d59e654e70a1413ffcec765","e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}