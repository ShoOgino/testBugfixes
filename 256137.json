{"path":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = boostAtt.getMaxNonCompetitiveBoost();\n    if (bottom != this.bottom) {\n      this.bottom = bottom;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      bottomChanged(bottom, term == null ? null : (BytesRef) term.clone());\n    }\n    \n    return term;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["29ef08168a3efc403780104add48224b45fe7bd5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef08168a3efc403780104add48224b45fe7bd5","date":1287098047,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n    if (queuedBottom != null) {\n      bottomChanged(bottom, queuedBottom);\n      queuedBottom = null;\n    }\n    \n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = boostAtt.getMaxNonCompetitiveBoost();\n    if (bottom != this.bottom && term != null) {\n      this.bottom = bottom;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      queuedBottom = new BytesRef(term);\n    }\n    \n    return term;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = boostAtt.getMaxNonCompetitiveBoost();\n    if (bottom != this.bottom) {\n      this.bottom = bottom;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      bottomChanged(bottom, term == null ? null : (BytesRef) term.clone());\n    }\n    \n    return term;\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33a8b1f99104f4144f210f5d068411c297cd7163","date":1287152748,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom, false);\n      queuedBottom = null;\n    }\n    \n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      queuedBottom = new BytesRef(term);\n    }\n    \n    return term;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n    if (queuedBottom != null) {\n      bottomChanged(bottom, queuedBottom);\n      queuedBottom = null;\n    }\n    \n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = boostAtt.getMaxNonCompetitiveBoost();\n    if (bottom != this.bottom && term != null) {\n      this.bottom = bottom;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      queuedBottom = new BytesRef(term);\n    }\n    \n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom, false);\n      queuedBottom = null;\n    }\n    \n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      queuedBottom = new BytesRef(term);\n    }\n    \n    return term;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = boostAtt.getMaxNonCompetitiveBoost();\n    if (bottom != this.bottom) {\n      this.bottom = bottom;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      bottomChanged(bottom, term == null ? null : (BytesRef) term.clone());\n    }\n    \n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom, false);\n      queuedBottom = null;\n    }\n    \n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      queuedBottom = new BytesRef(term);\n    }\n    \n    return term;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = boostAtt.getMaxNonCompetitiveBoost();\n    if (bottom != this.bottom) {\n      this.bottom = bottom;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      bottomChanged(bottom, term == null ? null : (BytesRef) term.clone());\n    }\n    \n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom, false);\n      queuedBottom = null;\n    }\n    \n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      queuedBottom = BytesRef.deepCopyOf(term);\n    }\n    \n    return term;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom, false);\n      queuedBottom = null;\n    }\n    \n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      queuedBottom = new BytesRef(term);\n    }\n    \n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#next().mjava","sourceNew":"  @Override\n  public BytesRef next() throws IOException {\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom, false);\n      queuedBottom = null;\n    }\n    \n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      queuedBottom = BytesRef.deepCopyOf(term);\n    }\n    \n    return term;\n  }\n\n","sourceOld":"  @Override\n  public BytesRef next() throws IOException {\n    if (queuedBottom != null) {\n      bottomChanged(queuedBottom, false);\n      queuedBottom = null;\n    }\n    \n    BytesRef term = actualEnum.next();\n    boostAtt.setBoost(actualBoostAtt.getBoost());\n    \n    final float bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    final BytesRef bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    if (term != null && (bottom != this.bottom || bottomTerm != this.bottomTerm)) {\n      this.bottom = bottom;\n      this.bottomTerm = bottomTerm;\n      // clone the term before potentially doing something with it\n      // this is a rare but wonderful occurrence anyway\n      queuedBottom = BytesRef.deepCopyOf(term);\n    }\n    \n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33a8b1f99104f4144f210f5d068411c297cd7163":["29ef08168a3efc403780104add48224b45fe7bd5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29ef08168a3efc403780104add48224b45fe7bd5":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","33a8b1f99104f4144f210f5d068411c297cd7163"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","33a8b1f99104f4144f210f5d068411c297cd7163"],"e6e919043fa85ee891123768dd655a98edbbf63c":["33a8b1f99104f4144f210f5d068411c297cd7163"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"33a8b1f99104f4144f210f5d068411c297cd7163":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","e6e919043fa85ee891123768dd655a98edbbf63c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"29ef08168a3efc403780104add48224b45fe7bd5":["33a8b1f99104f4144f210f5d068411c297cd7163"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["29ef08168a3efc403780104add48224b45fe7bd5","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"e6e919043fa85ee891123768dd655a98edbbf63c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}