{"path":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#assertNoOverLap(Set,Set).mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#assertNoOverLap(Set,Set).mjava","pathOld":"/dev/null","sourceNew":"  private void assertNoOverLap(Set setA, Set setB) throws Exception {\n    Iterator it =  setA.iterator();\n    while(it.hasNext()) {\n      Object o = it.next();\n      if(setB.contains(o)) {\n        throw new Exception(\"Overlapping sets for value:\"+o.toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#assertNoOverLap(Set,Set).mjava","pathOld":"/dev/null","sourceNew":"  private void assertNoOverLap(Set setA, Set setB) throws Exception {\n    Iterator it =  setA.iterator();\n    while(it.hasNext()) {\n      Object o = it.next();\n      if(setB.contains(o)) {\n        throw new Exception(\"Overlapping sets for value:\"+o.toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#assertNoOverLap(Set,Set).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#assertNoOverLap(Set,Set).mjava","sourceNew":"  private void assertNoOverLap(@SuppressWarnings({\"rawtypes\"})Set setA,\n                               @SuppressWarnings({\"rawtypes\"})Set setB) throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    Iterator it =  setA.iterator();\n    while(it.hasNext()) {\n      Object o = it.next();\n      if(setB.contains(o)) {\n        throw new Exception(\"Overlapping sets for value:\"+o.toString());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertNoOverLap(Set setA, Set setB) throws Exception {\n    Iterator it =  setA.iterator();\n    while(it.hasNext()) {\n      Object o = it.next();\n      if(setB.contains(o)) {\n        throw new Exception(\"Overlapping sets for value:\"+o.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91814ce09be68efd0626969632e79ae47d8876d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["91814ce09be68efd0626969632e79ae47d8876d4"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","91814ce09be68efd0626969632e79ae47d8876d4"],"91814ce09be68efd0626969632e79ae47d8876d4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}