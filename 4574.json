{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSetWithAssertions(String,String,String,String).mjava","commits":[{"id":"2c944148a761a75ff64169148c3ff7b6432aed85","date":1530279727,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSetWithAssertions(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSet(String,String,String,String).mjava","sourceNew":"  private void uploadConfigSetWithAssertions(String configSetName, String suffix, String username, String password) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n    try {\n      long statusCode = uploadConfigSet(configSetName, suffix, username, password, zkClient);\n      assertEquals(0l, statusCode);\n\n      assertTrue(\"managed-schema file should have been uploaded\",\n          zkClient.exists(\"/configs/\"+configSetName+suffix+\"/managed-schema\", true));\n      assertTrue(\"managed-schema file contents on zookeeper are not exactly same as that of the file uploaded in config\",\n          Arrays.equals(zkClient.getData(\"/configs/\"+configSetName+suffix+\"/managed-schema\", null, null, true),\n              readFile(\"solr/configsets/upload/\"+configSetName+\"/managed-schema\")));\n\n      assertTrue(\"solrconfig.xml file should have been uploaded\",\n          zkClient.exists(\"/configs/\"+configSetName+suffix+\"/solrconfig.xml\", true));\n      byte data[] = zkClient.getData(\"/configs/\"+configSetName+suffix, null, null, true);\n      //assertEquals(\"{\\\"trusted\\\": false}\", new String(data, StandardCharsets.UTF_8));\n      assertTrue(\"solrconfig.xml file contents on zookeeper are not exactly same as that of the file uploaded in config\",\n          Arrays.equals(zkClient.getData(\"/configs/\"+configSetName+suffix+\"/solrconfig.xml\", null, null, true),\n              readFile(\"solr/configsets/upload/\"+configSetName+\"/solrconfig.xml\")));\n    } finally {\n      zkClient.close();\n    }\n  }\n\n","sourceOld":"  private void uploadConfigSet(String configSetName, String suffix, String username, String password) throws Exception {\n    // Read zipped sample config\n    ByteBuffer sampleZippedConfig = TestDynamicLoading\n        .getFileContent(\n            createTempZipFile(\"solr/configsets/upload/\"+configSetName), false);\n\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n    try {\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertFalse(configManager.configExists(configSetName+suffix));\n\n      Map map = postDataAndGetResponse(solrCluster.getSolrClient(),\n          solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/admin/configs?action=UPLOAD&name=\"+configSetName+suffix,\n          sampleZippedConfig, username, password);\n      assertNotNull(map);\n      long statusCode = (long) getObjectByPath(map, false, Arrays.asList(\"responseHeader\", \"status\"));\n      assertEquals(0l, statusCode);\n\n      assertTrue(\"managed-schema file should have been uploaded\",\n          zkClient.exists(\"/configs/\"+configSetName+suffix+\"/managed-schema\", true));\n      assertTrue(\"managed-schema file contents on zookeeper are not exactly same as that of the file uploaded in config\",\n          Arrays.equals(zkClient.getData(\"/configs/\"+configSetName+suffix+\"/managed-schema\", null, null, true),\n              readFile(\"solr/configsets/upload/\"+configSetName+\"/managed-schema\")));\n\n      assertTrue(\"solrconfig.xml file should have been uploaded\",\n          zkClient.exists(\"/configs/\"+configSetName+suffix+\"/solrconfig.xml\", true));\n      byte data[] = zkClient.getData(\"/configs/\"+configSetName+suffix, null, null, true);\n      //assertEquals(\"{\\\"trusted\\\": false}\", new String(data, StandardCharsets.UTF_8));\n      assertTrue(\"solrconfig.xml file contents on zookeeper are not exactly same as that of the file uploaded in config\",\n          Arrays.equals(zkClient.getData(\"/configs/\"+configSetName+suffix+\"/solrconfig.xml\", null, null, true),\n              readFile(\"solr/configsets/upload/\"+configSetName+\"/solrconfig.xml\")));\n    } finally {\n      zkClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSetWithAssertions(String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void uploadConfigSetWithAssertions(String configSetName, String suffix, String username, String password) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n    try {\n      long statusCode = uploadConfigSet(configSetName, suffix, username, password, zkClient);\n      assertEquals(0l, statusCode);\n\n      assertTrue(\"managed-schema file should have been uploaded\",\n          zkClient.exists(\"/configs/\"+configSetName+suffix+\"/managed-schema\", true));\n      assertTrue(\"managed-schema file contents on zookeeper are not exactly same as that of the file uploaded in config\",\n          Arrays.equals(zkClient.getData(\"/configs/\"+configSetName+suffix+\"/managed-schema\", null, null, true),\n              readFile(\"solr/configsets/upload/\"+configSetName+\"/managed-schema\")));\n\n      assertTrue(\"solrconfig.xml file should have been uploaded\",\n          zkClient.exists(\"/configs/\"+configSetName+suffix+\"/solrconfig.xml\", true));\n      byte data[] = zkClient.getData(\"/configs/\"+configSetName+suffix, null, null, true);\n      //assertEquals(\"{\\\"trusted\\\": false}\", new String(data, StandardCharsets.UTF_8));\n      assertTrue(\"solrconfig.xml file contents on zookeeper are not exactly same as that of the file uploaded in config\",\n          Arrays.equals(zkClient.getData(\"/configs/\"+configSetName+suffix+\"/solrconfig.xml\", null, null, true),\n              readFile(\"solr/configsets/upload/\"+configSetName+\"/solrconfig.xml\")));\n    } finally {\n      zkClient.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSetWithAssertions(String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void uploadConfigSetWithAssertions(String configSetName, String suffix, String username, String password) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n    try {\n      long statusCode = uploadConfigSet(configSetName, suffix, username, password, zkClient);\n      assertEquals(0l, statusCode);\n\n      assertTrue(\"managed-schema file should have been uploaded\",\n          zkClient.exists(\"/configs/\"+configSetName+suffix+\"/managed-schema\", true));\n      assertTrue(\"managed-schema file contents on zookeeper are not exactly same as that of the file uploaded in config\",\n          Arrays.equals(zkClient.getData(\"/configs/\"+configSetName+suffix+\"/managed-schema\", null, null, true),\n              readFile(\"solr/configsets/upload/\"+configSetName+\"/managed-schema\")));\n\n      assertTrue(\"solrconfig.xml file should have been uploaded\",\n          zkClient.exists(\"/configs/\"+configSetName+suffix+\"/solrconfig.xml\", true));\n      byte data[] = zkClient.getData(\"/configs/\"+configSetName+suffix, null, null, true);\n      //assertEquals(\"{\\\"trusted\\\": false}\", new String(data, StandardCharsets.UTF_8));\n      assertTrue(\"solrconfig.xml file contents on zookeeper are not exactly same as that of the file uploaded in config\",\n          Arrays.equals(zkClient.getData(\"/configs/\"+configSetName+suffix+\"/solrconfig.xml\", null, null, true),\n              readFile(\"solr/configsets/upload/\"+configSetName+\"/solrconfig.xml\")));\n    } finally {\n      zkClient.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7612891097d4751617c396cdd7a092833799147","date":1600707827,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSetWithAssertions(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSetWithAssertions(String,String,String,String).mjava","sourceNew":"  private void uploadConfigSetWithAssertions(String configSetName, String suffix, String username) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(cluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n    try {\n      long statusCode = uploadConfigSet(configSetName, suffix, username, zkClient);\n      assertEquals(0l, statusCode);\n\n      assertTrue(\"managed-schema file should have been uploaded\",\n          zkClient.exists(\"/configs/\"+configSetName+suffix+\"/managed-schema\", true));\n      assertTrue(\"managed-schema file contents on zookeeper are not exactly same as that of the file uploaded in config\",\n          Arrays.equals(zkClient.getData(\"/configs/\"+configSetName+suffix+\"/managed-schema\", null, null, true),\n              readFile(\"solr/configsets/upload/\"+configSetName+\"/managed-schema\")));\n\n      assertTrue(\"solrconfig.xml file should have been uploaded\",\n          zkClient.exists(\"/configs/\"+configSetName+suffix+\"/solrconfig.xml\", true));\n      byte data[] = zkClient.getData(\"/configs/\"+configSetName+suffix, null, null, true);\n      //assertEquals(\"{\\\"trusted\\\": false}\", new String(data, StandardCharsets.UTF_8));\n      assertTrue(\"solrconfig.xml file contents on zookeeper are not exactly same as that of the file uploaded in config\",\n          Arrays.equals(zkClient.getData(\"/configs/\"+configSetName+suffix+\"/solrconfig.xml\", null, null, true),\n              readFile(\"solr/configsets/upload/\"+configSetName+\"/solrconfig.xml\")));\n    } finally {\n      zkClient.close();\n    }\n  }\n\n","sourceOld":"  private void uploadConfigSetWithAssertions(String configSetName, String suffix, String username, String password) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(solrCluster.getZkServer().getZkAddress(),\n        AbstractZkTestCase.TIMEOUT, 45000, null);\n    try {\n      long statusCode = uploadConfigSet(configSetName, suffix, username, password, zkClient);\n      assertEquals(0l, statusCode);\n\n      assertTrue(\"managed-schema file should have been uploaded\",\n          zkClient.exists(\"/configs/\"+configSetName+suffix+\"/managed-schema\", true));\n      assertTrue(\"managed-schema file contents on zookeeper are not exactly same as that of the file uploaded in config\",\n          Arrays.equals(zkClient.getData(\"/configs/\"+configSetName+suffix+\"/managed-schema\", null, null, true),\n              readFile(\"solr/configsets/upload/\"+configSetName+\"/managed-schema\")));\n\n      assertTrue(\"solrconfig.xml file should have been uploaded\",\n          zkClient.exists(\"/configs/\"+configSetName+suffix+\"/solrconfig.xml\", true));\n      byte data[] = zkClient.getData(\"/configs/\"+configSetName+suffix, null, null, true);\n      //assertEquals(\"{\\\"trusted\\\": false}\", new String(data, StandardCharsets.UTF_8));\n      assertTrue(\"solrconfig.xml file contents on zookeeper are not exactly same as that of the file uploaded in config\",\n          Arrays.equals(zkClient.getData(\"/configs/\"+configSetName+suffix+\"/solrconfig.xml\", null, null, true),\n              readFile(\"solr/configsets/upload/\"+configSetName+\"/solrconfig.xml\")));\n    } finally {\n      zkClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7612891097d4751617c396cdd7a092833799147":["2c944148a761a75ff64169148c3ff7b6432aed85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c944148a761a75ff64169148c3ff7b6432aed85"],"2c944148a761a75ff64169148c3ff7b6432aed85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7612891097d4751617c396cdd7a092833799147"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c944148a761a75ff64169148c3ff7b6432aed85"]},"commit2Childs":{"c7612891097d4751617c396cdd7a092833799147":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"2c944148a761a75ff64169148c3ff7b6432aed85":["c7612891097d4751617c396cdd7a092833799147","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2c944148a761a75ff64169148c3ff7b6432aed85","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}