{"path":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterIterator#doNext(int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterIterator#doNext(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterIterator#doNext(int).mjava","sourceNew":"    private int doNext(int doc) throws IOException {\n      int which=0;  // index of the iterator with the highest id\n      int i=1;\n      outer: for(;;) {\n        for (; i<iterators.length; i++) {\n          if (i == which) continue;\n          DocIdSetIterator iter = iterators[i];\n          int next = iter.advance(doc);\n          if (next != doc) {\n            doc = next;\n            which = i;\n            i = 0;\n            continue outer;\n          }\n        }\n        return doc;\n      }\n    }\n\n","sourceOld":"    private int doNext(int doc) throws IOException {\n      int which=0;  // index of the iterator with the highest id\n      int i=1;\n      outer: for(;;) {\n        for (; i<iterators.length; i++) {\n          if (i == which) continue;\n          DocIdSetIterator iter = iterators[i];\n          int next = iter.advance(doc);\n          if (next != doc) {\n            doc = next;\n            which = i;\n            i = 0;\n            continue outer;\n          }\n        }\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterIterator#doNext(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterIterator#doNext(int).mjava","sourceNew":"    private int doNext(int doc) throws IOException {\n      int which=0;  // index of the iterator with the highest id\n      int i=1;\n      outer: for(;;) {\n        for (; i<iterators.length; i++) {\n          if (i == which) continue;\n          DocIdSetIterator iter = iterators[i];\n          int next = iter.advance(doc);\n          if (next != doc) {\n            doc = next;\n            which = i;\n            i = 0;\n            continue outer;\n          }\n        }\n        return doc;\n      }\n    }\n\n","sourceOld":"    private int doNext(int doc) throws IOException {\n      int which=0;  // index of the iterator with the highest id\n      int i=1;\n      outer: for(;;) {\n        for (; i<iterators.length; i++) {\n          if (i == which) continue;\n          DocIdSetIterator iter = iterators[i];\n          int next = iter.advance(doc);\n          if (next != doc) {\n            doc = next;\n            which = i;\n            i = 0;\n            continue outer;\n          }\n        }\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterIterator#doNext(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterIterator#doNext(int).mjava","sourceNew":"    private int doNext(int doc) throws IOException {\n      int which=0;  // index of the iterator with the highest id\n      int i=1;\n      outer: for(;;) {\n        for (; i<iterators.length; i++) {\n          if (i == which) continue;\n          DocIdSetIterator iter = iterators[i];\n          int next = iter.advance(doc);\n          if (next != doc) {\n            doc = next;\n            which = i;\n            i = 0;\n            continue outer;\n          }\n        }\n        return doc;\n      }\n    }\n\n","sourceOld":"    private int doNext(int doc) throws IOException {\n      int which=0;  // index of the iterator with the highest id\n      int i=1;\n      outer: for(;;) {\n        for (; i<iterators.length; i++) {\n          if (i == which) continue;\n          DocIdSetIterator iter = iterators[i];\n          int next = iter.advance(doc);\n          if (next != doc) {\n            doc = next;\n            which = i;\n            i = 0;\n            continue outer;\n          }\n        }\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/FilterImpl[SolrIndexSearcher].FilterIterator#doNext(int).mjava","sourceNew":null,"sourceOld":"    private int doNext(int doc) throws IOException {\n      int which=0;  // index of the iterator with the highest id\n      int i=1;\n      outer: for(;;) {\n        for (; i<iterators.length; i++) {\n          if (i == which) continue;\n          DocIdSetIterator iter = iterators[i];\n          int next = iter.advance(doc);\n          if (next != doc) {\n            doc = next;\n            which = i;\n            i = 0;\n            continue outer;\n          }\n        }\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}