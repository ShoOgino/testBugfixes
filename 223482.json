{"path":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","commits":[{"id":"3e00f80591de714c6975f454e33e0fa5218b5902","date":1294514405,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotLengthNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(\"foo\", invertState),\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"foo\", invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    ss.setLengthNormFactors(\"bar\",8,13, 0.5f, false);\n    ss.setLengthNormFactors(\"yak\",6,9, 0.5f, false);\n\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"foo\", invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"bar\", invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"yak\", invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"bar\", invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"yak\", invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    ss.setLengthNormFactors(\"a\",5,8,0.5f, false);\n    ss.setLengthNormFactors(\"b\",5,8,0.1f, false);\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = ss.computeNorm(\"a\", invertState);\n      final float normS = s.computeNorm(\"b\", invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotLengthNorm() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n  \n    for (int i = 1; i < 1000; i++) {\n      assertEquals(\"base case: i=\"+i,\n                   d.lengthNorm(\"foo\",i), s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f);\n  \n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-9), s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    ss.setLengthNormFactors(\"bar\",8,13, 0.5f, false);\n    ss.setLengthNormFactors(\"yak\",6,9, 0.5f, false);\n\n  \n    for (int i = 3; i <=10; i++) {\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-9), s.lengthNorm(\"foo\",i),\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"bar\",i),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f, s.lengthNorm(\"yak\",i),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-12), s.lengthNorm(\"bar\",i),\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   d.lengthNorm(\"foo\",i-8), s.lengthNorm(\"yak\",i),\n                   0.0f);\n    }\n\n\n    // steepness\n\n    ss.setLengthNormFactors(\"a\",5,8,0.5f, false);\n    ss.setLengthNormFactors(\"b\",5,8,0.1f, false);\n\n    for (int i = 9; i < 1000; i++) {\n      assertTrue(\"s: i=\"+i+\" : a=\"+ss.lengthNorm(\"a\",i)+\n                 \" < b=\"+ss.lengthNorm(\"b\",i),\n                 ss.lengthNorm(\"a\",i) < s.lengthNorm(\"b\",i));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"/dev/null","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(\"foo\", invertState),\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"foo\", invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    ss.setLengthNormFactors(\"bar\",8,13, 0.5f, false);\n    ss.setLengthNormFactors(\"yak\",6,9, 0.5f, false);\n\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"foo\", invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"bar\", invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"yak\", invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"bar\", invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"yak\", invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    ss.setLengthNormFactors(\"a\",5,8,0.5f, false);\n    ss.setLengthNormFactors(\"b\",5,8,0.1f, false);\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = ss.computeNorm(\"a\", invertState);\n      final float normS = s.computeNorm(\"b\", invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"/dev/null","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(\"foo\", invertState),\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"foo\", invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    ss.setLengthNormFactors(\"bar\",8,13, 0.5f, false);\n    ss.setLengthNormFactors(\"yak\",6,9, 0.5f, false);\n\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"foo\", invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"bar\", invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"yak\", invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"bar\", invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"yak\", invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    ss.setLengthNormFactors(\"a\",5,8,0.5f, false);\n    ss.setLengthNormFactors(\"b\",5,8,0.1f, false);\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = ss.computeNorm(\"a\", invertState);\n      final float normS = s.computeNorm(\"b\", invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ce8d53d5582eaa6a0c771c9b119d480f41da59c","date":1297466174,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(invertState),\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new SweetSpotSimilarity() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"foo\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"foo\").computeNorm(invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"bar\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"yak\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"bar\").computeNorm(invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"yak\").computeNorm(invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = sp.get(\"a\").computeNorm(invertState);\n      final float normS = sp.get(\"b\").computeNorm(invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(\"foo\", invertState),\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"foo\", invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    ss.setLengthNormFactors(\"bar\",8,13, 0.5f, false);\n    ss.setLengthNormFactors(\"yak\",6,9, 0.5f, false);\n\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"foo\", invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"bar\", invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"yak\", invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"bar\", invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"yak\", invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    ss.setLengthNormFactors(\"a\",5,8,0.5f, false);\n    ss.setLengthNormFactors(\"b\",5,8,0.1f, false);\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = ss.computeNorm(\"a\", invertState);\n      final float normS = s.computeNorm(\"b\", invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(invertState),\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new SweetSpotSimilarity() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"foo\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"foo\").computeNorm(invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"bar\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"yak\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"bar\").computeNorm(invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"yak\").computeNorm(invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = sp.get(\"a\").computeNorm(invertState);\n      final float normS = sp.get(\"b\").computeNorm(invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(\"foo\", invertState),\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"foo\", invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    ss.setLengthNormFactors(\"bar\",8,13, 0.5f, false);\n    ss.setLengthNormFactors(\"yak\",6,9, 0.5f, false);\n\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"foo\", invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"bar\", invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"yak\", invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"bar\", invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"yak\", invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    ss.setLengthNormFactors(\"a\",5,8,0.5f, false);\n    ss.setLengthNormFactors(\"b\",5,8,0.1f, false);\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = ss.computeNorm(\"a\", invertState);\n      final float normS = s.computeNorm(\"b\", invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(invertState),\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new SweetSpotSimilarity() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"foo\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"foo\").computeNorm(invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"bar\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"yak\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"bar\").computeNorm(invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"yak\").computeNorm(invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = sp.get(\"a\").computeNorm(invertState);\n      final float normS = sp.get(\"b\").computeNorm(invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(\"foo\", invertState),\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"foo\", invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    ss.setLengthNormFactors(\"bar\",8,13, 0.5f, false);\n    ss.setLengthNormFactors(\"yak\",6,9, 0.5f, false);\n\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"foo\", invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"foo\", invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"bar\", invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(\"yak\", invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"bar\", invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(\"foo\", invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(\"yak\", invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    ss.setLengthNormFactors(\"a\",5,8,0.5f, false);\n    ss.setLengthNormFactors(\"b\",5,8,0.1f, false);\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = ss.computeNorm(\"a\", invertState);\n      final float normS = s.computeNorm(\"b\", invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"160d004a0e8f5361a446f9d01456aee1c1af20dc","date":1301061642,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(invertState),\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new DefaultSimilarityProvider() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"foo\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"foo\").computeNorm(invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"bar\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"yak\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"bar\").computeNorm(invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"yak\").computeNorm(invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = sp.get(\"a\").computeNorm(invertState);\n      final float normS = sp.get(\"b\").computeNorm(invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(invertState),\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new SweetSpotSimilarity() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"foo\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"foo\").computeNorm(invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"bar\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"yak\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"bar\").computeNorm(invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"yak\").computeNorm(invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = sp.get(\"a\").computeNorm(invertState);\n      final float normS = sp.get(\"b\").computeNorm(invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(invertState),\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new DefaultSimilarityProvider() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"foo\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"foo\").computeNorm(invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"bar\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"yak\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"bar\").computeNorm(invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"yak\").computeNorm(invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = sp.get(\"a\").computeNorm(invertState);\n      final float normS = sp.get(\"b\").computeNorm(invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(invertState),\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new SweetSpotSimilarity() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"foo\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"foo\").computeNorm(invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"bar\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"yak\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"bar\").computeNorm(invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"yak\").computeNorm(invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = sp.get(\"a\").computeNorm(invertState);\n      final float normS = sp.get(\"b\").computeNorm(invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(invertState),\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new DefaultSimilarityProvider() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"foo\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"foo\").computeNorm(invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"bar\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"yak\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"bar\").computeNorm(invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"yak\").computeNorm(invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = sp.get(\"a\").computeNorm(invertState);\n      final float normS = sp.get(\"b\").computeNorm(invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(invertState),\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new SweetSpotSimilarity() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"foo\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"foo\").computeNorm(invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"bar\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"yak\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"bar\").computeNorm(invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"yak\").computeNorm(invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = sp.get(\"a\").computeNorm(invertState);\n      final float normS = sp.get(\"b\").computeNorm(invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(invertState),\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   ss.decodeNormValue(s.computeNorm(invertState)),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final byte normS = s.computeNorm(invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new DefaultSimilarityProvider() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   ss.decodeNormValue(sp.get(\"foo\").computeNorm(invertState)),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final byte normS = sp.get(\"foo\").computeNorm(invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   ss.decodeNormValue(sp.get(\"bar\").computeNorm(invertState)),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   ss.decodeNormValue(sp.get(\"yak\").computeNorm(invertState)),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final byte normS = sp.get(\"bar\").computeNorm(invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final byte normS = sp.get(\"yak\").computeNorm(invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final byte normSS = sp.get(\"a\").computeNorm(invertState);\n      final byte normS = sp.get(\"b\").computeNorm(invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(invertState),\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new DefaultSimilarityProvider() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"foo\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"foo\").computeNorm(invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"bar\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"yak\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"bar\").computeNorm(invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"yak\").computeNorm(invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = sp.get(\"a\").computeNorm(invertState);\n      final float normS = sp.get(\"b\").computeNorm(invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(invertState),\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   ss.decodeNormValue(s.computeNorm(invertState)),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final byte normS = s.computeNorm(invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new DefaultSimilarityProvider() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   ss.decodeNormValue(sp.get(\"foo\").computeNorm(invertState)),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final byte normS = sp.get(\"foo\").computeNorm(invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   ss.decodeNormValue(sp.get(\"bar\").computeNorm(invertState)),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   ss.decodeNormValue(sp.get(\"yak\").computeNorm(invertState)),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final byte normS = sp.get(\"bar\").computeNorm(invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final byte normS = sp.get(\"yak\").computeNorm(invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final byte normSS = sp.get(\"a\").computeNorm(invertState);\n      final byte normS = sp.get(\"b\").computeNorm(invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(invertState),\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new DefaultSimilarityProvider() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"foo\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"foo\").computeNorm(invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"bar\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"yak\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"bar\").computeNorm(invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"yak\").computeNorm(invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = sp.get(\"a\").computeNorm(invertState);\n      final float normS = sp.get(\"b\").computeNorm(invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(invertState),\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   ss.decodeNormValue(s.computeNorm(invertState)),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final byte normS = s.computeNorm(invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new DefaultSimilarityProvider() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   ss.decodeNormValue(sp.get(\"foo\").computeNorm(invertState)),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final byte normS = sp.get(\"foo\").computeNorm(invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   ss.decodeNormValue(sp.get(\"bar\").computeNorm(invertState)),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   ss.decodeNormValue(sp.get(\"yak\").computeNorm(invertState)),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final byte normS = sp.get(\"bar\").computeNorm(invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final byte normS = sp.get(\"yak\").computeNorm(invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final byte normSS = sp.get(\"a\").computeNorm(invertState);\n      final byte normS = sp.get(\"b\").computeNorm(invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(invertState),\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = s.computeNorm(invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new DefaultSimilarityProvider() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"foo\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"foo\").computeNorm(invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"bar\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   sp.get(\"yak\").computeNorm(invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"bar\").computeNorm(invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final float normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final float normS = sp.get(\"yak\").computeNorm(invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final float normSS = sp.get(\"a\").computeNorm(invertState);\n      final float normS = sp.get(\"b\").computeNorm(invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      Norm lNorm = new Norm();\n      Norm rNorm = new Norm();\n      d.computeNorm(invertState, lNorm);\n      s.computeNorm(invertState, rNorm);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new DefaultSimilarityProvider() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp.get(\"foo\"), invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp.get(\"foo\"), invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp.get(\"bar\"), invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp.get(\"yak\"), invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp.get(\"bar\"), invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp.get(\"yak\"), invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp.get(\"a\"), invertState);\n      final byte normS = computeAndGetNorm(sp.get(\"b\"), invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      assertEquals(\"base case: i=\"+i,\n                   d.computeNorm(invertState),\n                   s.computeNorm(invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   ss.decodeNormValue(s.computeNorm(invertState)),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final byte normS = s.computeNorm(invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new DefaultSimilarityProvider() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   ss.decodeNormValue(sp.get(\"foo\").computeNorm(invertState)),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final byte normS = sp.get(\"foo\").computeNorm(invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   ss.decodeNormValue(sp.get(\"bar\").computeNorm(invertState)),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   ss.decodeNormValue(sp.get(\"yak\").computeNorm(invertState)),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final byte normS = sp.get(\"bar\").computeNorm(invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = d.computeNorm(invertState);\n      invertState.setLength(i);\n      final byte normS = sp.get(\"yak\").computeNorm(invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final byte normSS = sp.get(\"a\").computeNorm(invertState);\n      final byte normS = sp.get(\"b\").computeNorm(invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    FieldInvertState invertState = new FieldInvertState(\"bogus\");\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      Norm lNorm = new Norm();\n      Norm rNorm = new Norm();\n      d.computeNorm(invertState, lNorm);\n      s.computeNorm(invertState, rNorm);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    invertState = new FieldInvertState(\"foo\");\n    invertState.setBoost(1.0f);\n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState = new FieldInvertState(\"a\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp, invertState);\n      invertState = new FieldInvertState(\"b\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    final FieldInvertState invertState = new FieldInvertState();\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      Norm lNorm = new Norm();\n      Norm rNorm = new Norm();\n      d.computeNorm(invertState, lNorm);\n      s.computeNorm(invertState, rNorm);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    SimilarityProvider sp = new DefaultSimilarityProvider() {\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp.get(\"foo\"), invertState),\n                   0.0f);\n    }\n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp.get(\"foo\"), invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp.get(\"bar\"), invertState),\n                   0.0f);\n    }\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp.get(\"yak\"), invertState),\n                   0.0f);\n    }\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp.get(\"bar\"), invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp.get(\"yak\"), invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp.get(\"a\"), invertState);\n      final byte normS = computeAndGetNorm(sp.get(\"b\"), invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotComputeNorm().mjava","sourceNew":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    FieldInvertState invertState = new FieldInvertState(\"bogus\");\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      Norm lNorm = new Norm();\n      Norm rNorm = new Norm();\n      d.computeNorm(invertState, lNorm);\n      s.computeNorm(invertState, rNorm);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    invertState = new FieldInvertState(\"foo\");\n    invertState.setBoost(1.0f);\n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState = new FieldInvertState(\"a\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp, invertState);\n      invertState = new FieldInvertState(\"b\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","sourceOld":"  public void testSweetSpotComputeNorm() {\n  \n    final SweetSpotSimilarity ss = new SweetSpotSimilarity();\n    ss.setLengthNormFactors(1,1,0.5f,true);\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n\n\n    // base case, should degrade\n    FieldInvertState invertState = new FieldInvertState(\"bogus\");\n    invertState.setBoost(1.0f);\n    for (int i = 1; i < 1000; i++) {\n      invertState.setLength(i);\n      Norm lNorm = new Norm();\n      Norm rNorm = new Norm();\n      d.computeNorm(invertState, lNorm);\n      s.computeNorm(invertState, rNorm);\n      assertEquals(\"base case: i=\"+i,\n                   computeAndGetNorm(d, invertState),\n                   computeAndGetNorm(s, invertState),\n                   0.0f);\n    }\n\n    // make a sweet spot\n  \n    ss.setLengthNormFactors(3,10,0.5f,true);\n  \n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, ss, invertState),\n                   0.0f);\n    }\n  \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(s, invertState);\n      assertEquals(\"3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // seperate sweet spot for certain fields\n\n    final SweetSpotSimilarity ssBar = new SweetSpotSimilarity();\n    ssBar.setLengthNormFactors(8,13, 0.5f, false);\n    final SweetSpotSimilarity ssYak = new SweetSpotSimilarity();\n    ssYak.setLengthNormFactors(6,9, 0.5f, false);\n    final SweetSpotSimilarity ssA = new SweetSpotSimilarity();\n    ssA.setLengthNormFactors(5,8,0.5f, false);\n    final SweetSpotSimilarity ssB = new SweetSpotSimilarity();\n    ssB.setLengthNormFactors(5,8,0.1f, false);\n    \n    Similarity sp = new PerFieldSimilarityWrapper() {\n      @Override\n      public Similarity get(String field) {\n        if (field.equals(\"bar\"))\n          return ssBar;\n        else if (field.equals(\"yak\"))\n          return ssYak;\n        else if (field.equals(\"a\"))\n          return ssA;\n        else if (field.equals(\"b\"))\n          return ssB;\n        else\n          return ss;\n      }\n    };\n\n    invertState = new FieldInvertState(\"foo\");\n    invertState.setBoost(1.0f);\n    for (int i = 3; i <=10; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 3,10: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    for (int i = 10; i < 1000; i++) {\n      invertState.setLength(i-9);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 3,10: 10<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 8; i <=13; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 8,13: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 6; i <=9; i++) {\n      invertState.setLength(i);\n      assertEquals(\"f: 6,9: spot i=\"+i,\n                   1.0f,\n                   computeAndDecodeNorm(ss, sp, invertState),\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"bar\");\n    invertState.setBoost(1.0f);\n    for (int i = 13; i < 1000; i++) {\n      invertState.setLength(i-12);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 8,13: 13<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n    \n    invertState = new FieldInvertState(\"yak\");\n    invertState.setBoost(1.0f);\n    for (int i = 9; i < 1000; i++) {\n      invertState.setLength(i-8);\n      final byte normD = computeAndGetNorm(d, invertState);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertEquals(\"f: 6,9: 9<x : i=\"+i,\n                   normD,\n                   normS,\n                   0.0f);\n    }\n\n\n    // steepness\n\n    for (int i = 9; i < 1000; i++) {\n      invertState = new FieldInvertState(\"a\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normSS = computeAndGetNorm(sp, invertState);\n      invertState = new FieldInvertState(\"b\");\n      invertState.setBoost(1.0f);\n      invertState.setLength(i);\n      final byte normS = computeAndGetNorm(sp, invertState);\n      assertTrue(\"s: i=\"+i+\" : a=\"+normSS+\n                 \" < b=\"+normS,\n                 normSS < normS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["160d004a0e8f5361a446f9d01456aee1c1af20dc"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"1291e4568eb7d9463d751627596ef14baf4c1603":["160d004a0e8f5361a446f9d01456aee1c1af20dc","0f3cee3d20b0c786e6fca20539454262e29edcab"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","160d004a0e8f5361a446f9d01456aee1c1af20dc"],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"160d004a0e8f5361a446f9d01456aee1c1af20dc":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"3e00f80591de714c6975f454e33e0fa5218b5902":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["160d004a0e8f5361a446f9d01456aee1c1af20dc","0f3cee3d20b0c786e6fca20539454262e29edcab"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","160d004a0e8f5361a446f9d01456aee1c1af20dc"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e00f80591de714c6975f454e33e0fa5218b5902"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["3e00f80591de714c6975f454e33e0fa5218b5902"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e00f80591de714c6975f454e33e0fa5218b5902"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","9e8d5a6ffbfa3405d234a87c833741eabed98d13","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"160d004a0e8f5361a446f9d01456aee1c1af20dc":["0f3cee3d20b0c786e6fca20539454262e29edcab","1291e4568eb7d9463d751627596ef14baf4c1603","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f0b9507caf22f292ac0e5e59f62db4275adf4511","d619839baa8ce5503e496b94a9e42ad6f079293f"],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"3e00f80591de714c6975f454e33e0fa5218b5902":["29ef99d61cda9641b6250bf9567329a6e65f901d","5ce8d53d5582eaa6a0c771c9b119d480f41da59c","868da859b43505d9d2a023bfeae6dd0c795f5295"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e00f80591de714c6975f454e33e0fa5218b5902","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["f1bdbf92da222965b46c0a942c3857ba56e5c638","160d004a0e8f5361a446f9d01456aee1c1af20dc","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f0b9507caf22f292ac0e5e59f62db4275adf4511","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}