{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(DirectoryReader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(DirectoryReader).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(DirectoryReader).mjava","sourceNew":"  /**\n   * Set the index reader. Takes ownership of that index reader, that is,\n   * internally performs indexReader.incRef() (If caller no longer needs that \n   * reader it should decRef()/close() it after calling this method, otherwise, \n   * the reader will remain open). \n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(DirectoryReader indexReader) throws IOException {\n    if (indexReader == this.indexReader) {\n      return;\n    }\n    \n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the index reader. Takes ownership of that index reader, that is,\n   * internally performs indexReader.incRef() (If caller no longer needs that \n   * reader it should decRef()/close() it after calling this method, otherwise, \n   * the reader will remain open). \n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(DirectoryReader indexReader) throws IOException {\n    if (indexReader == this.indexReader) {\n      return;\n    }\n    \n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"141e140cd2260284f58cb5cf2b17da4027e82094","date":1475848631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(DirectoryReader).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(DirectoryReader).mjava","sourceNew":"  /**\n   * Set the index reader. Takes ownership of that index reader, that is,\n   * internally performs indexReader.incRef() (If caller no longer needs that \n   * reader it should decRef()/close() it after calling this method, otherwise, \n   * the reader will remain open). \n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(DirectoryReader indexReader) throws IOException {\n    if (indexReader == this.indexReader) {\n      return;\n    }\n    \n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n      // TODO Some day we should make the query cache in this module configurable and control clearing the cache\n      indexSearcher.setQueryCache(null);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the index reader. Takes ownership of that index reader, that is,\n   * internally performs indexReader.incRef() (If caller no longer needs that \n   * reader it should decRef()/close() it after calling this method, otherwise, \n   * the reader will remain open). \n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(DirectoryReader indexReader) throws IOException {\n    if (indexReader == this.indexReader) {\n      return;\n    }\n    \n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(DirectoryReader).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#setIndexReader(DirectoryReader).mjava","sourceNew":"  /**\n   * Set the index reader. Takes ownership of that index reader, that is,\n   * internally performs indexReader.incRef() (If caller no longer needs that \n   * reader it should decRef()/close() it after calling this method, otherwise, \n   * the reader will remain open). \n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(DirectoryReader indexReader) throws IOException {\n    if (indexReader == this.indexReader) {\n      return;\n    }\n    \n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n      // TODO Some day we should make the query cache in this module configurable and control clearing the cache\n      indexSearcher.setQueryCache(null);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the index reader. Takes ownership of that index reader, that is,\n   * internally performs indexReader.incRef() (If caller no longer needs that \n   * reader it should decRef()/close() it after calling this method, otherwise, \n   * the reader will remain open). \n   * @param indexReader The indexReader to set.\n   */\n  public synchronized void setIndexReader(DirectoryReader indexReader) throws IOException {\n    if (indexReader == this.indexReader) {\n      return;\n    }\n    \n    if (this.indexReader != null) {\n      // Release current IR\n      this.indexReader.decRef();\n    }\n\n    this.indexReader = indexReader;\n    if (indexReader != null) {\n      // Hold reference to new IR\n      indexReader.incRef();\n      indexSearcher = new IndexSearcher(indexReader);\n    } else {\n      indexSearcher = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"141e140cd2260284f58cb5cf2b17da4027e82094":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","141e140cd2260284f58cb5cf2b17da4027e82094"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["141e140cd2260284f58cb5cf2b17da4027e82094"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["141e140cd2260284f58cb5cf2b17da4027e82094","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"141e140cd2260284f58cb5cf2b17da4027e82094":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}