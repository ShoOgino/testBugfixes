{"path":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap<IndexReader,DocIdSet>();\n    }\n    \n    synchronized (cache) {  // check cache\n      DocIdSet cached = cache.get(reader);\n      if (shouldHaveCache) {\n        Assert.assertNotNull(\"Cache should have data \", cached);\n      } else {\n        Assert.assertNull(\"Cache should be null \" + cached , cached);\n      }\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final DocIdSet bits = filter.getDocIdSet(reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap<IndexReader,DocIdSet>();\n    }\n    \n    synchronized (cache) {  // check cache\n      DocIdSet cached = cache.get(reader);\n      if (shouldHaveCache) {\n        Assert.assertNotNull(\"Cache should have data \", cached);\n      } else {\n        Assert.assertNull(\"Cache should be null \" + cached , cached);\n      }\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final DocIdSet bits = filter.getDocIdSet(reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbf497fc92342be81ff184a144dfa7c96264116b","date":1275079529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public synchronized DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(reader);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) {\n      cache = new WeakHashMap<IndexReader,DocIdSet>();\n    }\n    \n    synchronized (cache) {  // check cache\n      DocIdSet cached = cache.get(reader);\n      if (shouldHaveCache) {\n        Assert.assertNotNull(\"Cache should have data \", cached);\n      } else {\n        Assert.assertNull(\"Cache should be null \" + cached , cached);\n      }\n      if (cached != null) {\n        return cached;\n      }\n    }\n\n    final DocIdSet bits = filter.getDocIdSet(reader);\n\n    synchronized (cache) {  // update cache\n      cache.put(reader, bits);\n    }\n\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(ReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public synchronized DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(context);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","sourceOld":"  @Override\n  public synchronized DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(reader);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(reader);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(reader);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["cbf497fc92342be81ff184a144dfa7c96264116b","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["cbf497fc92342be81ff184a144dfa7c96264116b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["cbf497fc92342be81ff184a144dfa7c96264116b","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cbf497fc92342be81ff184a144dfa7c96264116b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cbf497fc92342be81ff184a144dfa7c96264116b":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cbf497fc92342be81ff184a144dfa7c96264116b"]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}