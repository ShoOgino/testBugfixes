{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testRankStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withStreamFunction(\"search\", CloudSolrStream.class)\n      .withStreamFunction(\"unique\", UniqueStream.class)\n      .withStreamFunction(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f desc\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f asc\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","sourceNew":"  private void testRankStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withStreamFunction(\"search\", CloudSolrStream.class)\n      .withStreamFunction(\"unique\", UniqueStream.class)\n      .withStreamFunction(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testRankStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withStreamFunction(\"search\", CloudSolrStream.class)\n      .withStreamFunction(\"unique\", UniqueStream.class)\n      .withStreamFunction(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f desc\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f asc\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3078cad1008b796c6d573b743c586fdf9ef5660a","date":1436019875,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","sourceNew":"  private void testRankStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testRankStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withStreamFunction(\"search\", CloudSolrStream.class)\n      .withStreamFunction(\"unique\", UniqueStream.class)\n      .withStreamFunction(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"333d804f5abfaf34c57493306a4cb2e01e55662d","date":1447206304,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","sourceNew":"  private void testRankStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testRankStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","sourceNew":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","sourceOld":"  private void testRankStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","sourceNew":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","sourceOld":"  private void testRankStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","sourceNew":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","sourceOld":"  private void testRankStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","sourceNew":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","sourceOld":"  private void testRankStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n    \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ac1075ab5d486199f24ec3a7c07dc9b74606161","date":1476897426,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","sourceNew":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=2,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4, 3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n        + \"n=4,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","sourceOld":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2305f39a86a068f1cee6fc5fbdfb760b153ac138","date":1476906991,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","sourceNew":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=2,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4, 3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n        + \"n=4,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","sourceOld":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","sourceNew":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=2,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4, 3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n        + \"n=4,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","sourceOld":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=2,\"\n                                              + \"unique(\"\n                                              +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n                                              +   \"over=\\\"a_f\\\"),\"\n                                              + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4,3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n                                    + \"n=4,\"\n                                    + \"unique(\"\n                                    +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                    +   \"over=\\\"a_f\\\"),\"\n                                    + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c9480bf8e52feb02af9b7fa13bf50929da7900b","date":1477527580,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","sourceNew":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=3,\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 2, 1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=2,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4, 3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n        + \"n=4,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","sourceOld":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=2,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4, 3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n        + \"n=4,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","sourceNew":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=3,\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 2, 1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=2,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4, 3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n        + \"n=4,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","sourceOld":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n                                              + \"n=3,\"\n                                              + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n                                              + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0,2,1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=2,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4, 3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n        + \"n=4,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","sourceNew":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=3,\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 2, 1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=2,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4, 3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n        + \"n=4,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","sourceOld":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=3,\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 2, 1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=2,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4, 3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n        + \"n=4,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","sourceNew":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=3,\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 2, 1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=2,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4, 3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n        + \"n=4,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","sourceOld":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=3,\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 2, 1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=2,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4, 3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n        + \"n=4,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","sourceNew":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"top(\"\n          + \"n=3,\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n          + \"sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new RankStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n      assertOrder(tuples, 0, 2, 1);\n\n      // Basic test desc\n      expression = StreamExpressionParser.parse(\"top(\"\n          + \"n=2,\"\n          + \"unique(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n          + \"over=\\\"a_f\\\"),\"\n          + \"sort=\\\"a_f desc\\\")\");\n      stream = new RankStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 2);\n      assertOrder(tuples, 4, 3);\n\n      // full factory\n      stream = factory.constructStream(\"top(\"\n          + \"n=4,\"\n          + \"unique(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n          + \"over=\\\"a_f\\\"),\"\n          + \"sort=\\\"a_f asc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 0, 1, 3, 4);\n\n      // full factory, switch order\n      stream = factory.constructStream(\"top(\"\n          + \"n=4,\"\n          + \"unique(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n          + \"over=\\\"a_f\\\"),\"\n          + \"sort=\\\"a_f asc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 2, 1, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=3,\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 2, 1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=2,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4, 3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n        + \"n=4,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","sourceNew":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"top(\"\n          + \"n=3,\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n          + \"sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new RankStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n      assertOrder(tuples, 0, 2, 1);\n\n      // Basic test desc\n      expression = StreamExpressionParser.parse(\"top(\"\n          + \"n=2,\"\n          + \"unique(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n          + \"over=\\\"a_f\\\"),\"\n          + \"sort=\\\"a_f desc\\\")\");\n      stream = new RankStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 2);\n      assertOrder(tuples, 4, 3);\n\n      // full factory\n      stream = factory.constructStream(\"top(\"\n          + \"n=4,\"\n          + \"unique(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n          + \"over=\\\"a_f\\\"),\"\n          + \"sort=\\\"a_f asc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 0, 1, 3, 4);\n\n      // full factory, switch order\n      stream = factory.constructStream(\"top(\"\n          + \"n=4,\"\n          + \"unique(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n          + \"over=\\\"a_f\\\"),\"\n          + \"sort=\\\"a_f asc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 2, 1, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=3,\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"sort=\\\"a_f asc, a_i asc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 3);\n    assertOrder(tuples, 0, 2, 1);\n\n    // Basic test desc\n    expression = StreamExpressionParser.parse(\"top(\"\n        + \"n=2,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f desc\\\")\");\n    stream = new RankStream(expression, factory);\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 2);\n    assertOrder(tuples, 4, 3);\n    \n    // full factory\n    stream = factory.constructStream(\"top(\"\n        + \"n=4,\"\n        + \"unique(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n        + \"over=\\\"a_f\\\"),\"\n        + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    // full factory, switch order\n    stream = factory.constructStream(\"top(\"\n            + \"n=4,\"\n            + \"unique(\"\n            +   \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n            +   \"over=\\\"a_f\\\"),\"\n            + \"sort=\\\"a_f asc\\\")\");\n    tuples = getTuples(stream);\n    \n    assert(tuples.size() == 4);\n    assertOrder(tuples, 2,1,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testRankStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testRankStream().mjava","sourceNew":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"top(\"\n          + \"n=3,\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n          + \"sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new RankStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n      assertOrder(tuples, 0, 2, 1);\n\n      // Basic test desc\n      expression = StreamExpressionParser.parse(\"top(\"\n          + \"n=2,\"\n          + \"unique(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n          + \"over=\\\"a_f\\\"),\"\n          + \"sort=\\\"a_f desc\\\")\");\n      stream = new RankStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 2);\n      assertOrder(tuples, 4, 3);\n\n      // full factory\n      stream = factory.constructStream(\"top(\"\n          + \"n=4,\"\n          + \"unique(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n          + \"over=\\\"a_f\\\"),\"\n          + \"sort=\\\"a_f asc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 0, 1, 3, 4);\n\n      // full factory, switch order\n      stream = factory.constructStream(\"top(\"\n          + \"n=4,\"\n          + \"unique(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n          + \"over=\\\"a_f\\\"),\"\n          + \"sort=\\\"a_f asc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 2, 1, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRankStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class);\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"top(\"\n          + \"n=3,\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n          + \"sort=\\\"a_f asc, a_i asc\\\")\");\n      stream = new RankStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n      assertOrder(tuples, 0, 2, 1);\n\n      // Basic test desc\n      expression = StreamExpressionParser.parse(\"top(\"\n          + \"n=2,\"\n          + \"unique(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n          + \"over=\\\"a_f\\\"),\"\n          + \"sort=\\\"a_f desc\\\")\");\n      stream = new RankStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 2);\n      assertOrder(tuples, 4, 3);\n\n      // full factory\n      stream = factory.constructStream(\"top(\"\n          + \"n=4,\"\n          + \"unique(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"),\"\n          + \"over=\\\"a_f\\\"),\"\n          + \"sort=\\\"a_f asc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 0, 1, 3, 4);\n\n      // full factory, switch order\n      stream = factory.constructStream(\"top(\"\n          + \"n=4,\"\n          + \"unique(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"),\"\n          + \"over=\\\"a_f\\\"),\"\n          + \"sort=\\\"a_f asc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 2, 1, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"3078cad1008b796c6d573b743c586fdf9ef5660a":["e431b0806b8db369da896b66a74e304a49953c7b"],"333d804f5abfaf34c57493306a4cb2e01e55662d":["3078cad1008b796c6d573b743c586fdf9ef5660a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["333d804f5abfaf34c57493306a4cb2e01e55662d","b940572a59da1b42b6c20ab5278155b12816807a"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"b940572a59da1b42b6c20ab5278155b12816807a":["333d804f5abfaf34c57493306a4cb2e01e55662d"],"3ac1075ab5d486199f24ec3a7c07dc9b74606161":["73450c0955930295d34703e7ddbfc6973b7a121a"],"5c9480bf8e52feb02af9b7fa13bf50929da7900b":["2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"e431b0806b8db369da896b66a74e304a49953c7b":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"2305f39a86a068f1cee6fc5fbdfb760b153ac138":["73450c0955930295d34703e7ddbfc6973b7a121a","3ac1075ab5d486199f24ec3a7c07dc9b74606161"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["333d804f5abfaf34c57493306a4cb2e01e55662d","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["333d804f5abfaf34c57493306a4cb2e01e55662d","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5c9480bf8e52feb02af9b7fa13bf50929da7900b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["5c9480bf8e52feb02af9b7fa13bf50929da7900b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["e431b0806b8db369da896b66a74e304a49953c7b"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"3078cad1008b796c6d573b743c586fdf9ef5660a":["333d804f5abfaf34c57493306a4cb2e01e55662d"],"333d804f5abfaf34c57493306a4cb2e01e55662d":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"73450c0955930295d34703e7ddbfc6973b7a121a":["3ac1075ab5d486199f24ec3a7c07dc9b74606161","2305f39a86a068f1cee6fc5fbdfb760b153ac138","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"3ac1075ab5d486199f24ec3a7c07dc9b74606161":["2305f39a86a068f1cee6fc5fbdfb760b153ac138"],"e431b0806b8db369da896b66a74e304a49953c7b":["3078cad1008b796c6d573b743c586fdf9ef5660a"],"5c9480bf8e52feb02af9b7fa13bf50929da7900b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","8c969f15cd04d31e520319c619a445ae21f02d72"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"2305f39a86a068f1cee6fc5fbdfb760b153ac138":["5c9480bf8e52feb02af9b7fa13bf50929da7900b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}