{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/CachingCollector#replay(Collector).mjava","commits":[{"id":"307cff5af2b00f126fdf9d3435b75d5ed4d0f402","date":1305370109,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/CachingCollector#replay(Collector).mjava","pathOld":"/dev/null","sourceNew":"  public void replay(Collector other) throws IOException {\n    if (!isCached()) {\n      throw new IllegalStateException(\"cannot replay: cache was cleared because too much RAM was required\");\n    }\n    //System.out.println(\"CC: replay totHits=\" + (upto + base));\n    if (lastReaderContext != null) {\n      cachedSegs.add(new SegStart(lastReaderContext, base+upto));\n      lastReaderContext = null;\n    }\n    final int uptoSav = upto;\n    final int baseSav = base;\n    try {\n      upto = 0;\n      base = 0;\n      int chunkUpto = 0;\n      other.setScorer(cachedScorer);\n      curDocs = EMPTY_INT_ARRAY;\n      for(SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while(base+upto < seg.end) {\n          if (upto == curDocs.length) {\n            base += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            if (curScores != null) {\n              curScores = cachedScores.get(chunkUpto);\n            }\n            chunkUpto++;\n            upto = 0;\n          }\n          if (curScores != null) {\n            score = curScores[upto];\n          }\n          other.collect(curDocs[upto++]);\n        }\n      }\n    } finally {\n      upto = uptoSav;\n      base = baseSav;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e77feb4ffb7321af961c838aeafdd07ef1f307d4","date":1305577750,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/CachingCollector#replay(Collector).mjava","sourceNew":null,"sourceOld":"  public void replay(Collector other) throws IOException {\n    if (!isCached()) {\n      throw new IllegalStateException(\"cannot replay: cache was cleared because too much RAM was required\");\n    }\n    //System.out.println(\"CC: replay totHits=\" + (upto + base));\n    if (lastReaderContext != null) {\n      cachedSegs.add(new SegStart(lastReaderContext, base+upto));\n      lastReaderContext = null;\n    }\n    final int uptoSav = upto;\n    final int baseSav = base;\n    try {\n      upto = 0;\n      base = 0;\n      int chunkUpto = 0;\n      other.setScorer(cachedScorer);\n      curDocs = EMPTY_INT_ARRAY;\n      for(SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while(base+upto < seg.end) {\n          if (upto == curDocs.length) {\n            base += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            if (curScores != null) {\n              curScores = cachedScores.get(chunkUpto);\n            }\n            chunkUpto++;\n            upto = 0;\n          }\n          if (curScores != null) {\n            score = curScores[upto];\n          }\n          other.collect(curDocs[upto++]);\n        }\n      }\n    } finally {\n      upto = uptoSav;\n      base = baseSav;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e77feb4ffb7321af961c838aeafdd07ef1f307d4":["307cff5af2b00f126fdf9d3435b75d5ed4d0f402"],"307cff5af2b00f126fdf9d3435b75d5ed4d0f402":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e77feb4ffb7321af961c838aeafdd07ef1f307d4"]},"commit2Childs":{"e77feb4ffb7321af961c838aeafdd07ef1f307d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"307cff5af2b00f126fdf9d3435b75d5ed4d0f402":["e77feb4ffb7321af961c838aeafdd07ef1f307d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["307cff5af2b00f126fdf9d3435b75d5ed4d0f402"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}