{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#writePosition(int,BytesRef).mjava","commits":[{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#writePosition(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  private void writePosition(int delta, BytesRef payload) throws IOException {\n    if (payloads) {\n      int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        tvf.writeVInt((delta<<1)|1);\n        tvf.writeVInt(payloadLength);\n      } else {\n        tvf.writeVInt(delta << 1);\n      }\n      if (payloadLength > 0) {\n        if (payloadLength + payloadData.length < 0) {\n          // we overflowed the payload buffer, just throw UOE\n          // having > Integer.MAX_VALUE bytes of payload for a single term in a single doc is nuts.\n          throw new UnsupportedOperationException(\"A term cannot have more than Integer.MAX_VALUE bytes of payload data in a single document\");\n        }\n        payloadData.append(payload);\n      }\n    } else {\n      tvf.writeVInt(delta);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#writePosition(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  private void writePosition(int delta, BytesRef payload) throws IOException {\n    if (payloads) {\n      int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        tvf.writeVInt((delta<<1)|1);\n        tvf.writeVInt(payloadLength);\n      } else {\n        tvf.writeVInt(delta << 1);\n      }\n      if (payloadLength > 0) {\n        if (payloadLength + payloadData.length < 0) {\n          // we overflowed the payload buffer, just throw UOE\n          // having > Integer.MAX_VALUE bytes of payload for a single term in a single doc is nuts.\n          throw new UnsupportedOperationException(\"A term cannot have more than Integer.MAX_VALUE bytes of payload data in a single document\");\n        }\n        payloadData.append(payload);\n      }\n    } else {\n      tvf.writeVInt(delta);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#writePosition(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  private void writePosition(int delta, BytesRef payload) throws IOException {\n    if (payloads) {\n      int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        tvf.writeVInt((delta<<1)|1);\n        tvf.writeVInt(payloadLength);\n      } else {\n        tvf.writeVInt(delta << 1);\n      }\n      if (payloadLength > 0) {\n        if (payloadLength + payloadData.length < 0) {\n          // we overflowed the payload buffer, just throw UOE\n          // having > Integer.MAX_VALUE bytes of payload for a single term in a single doc is nuts.\n          throw new UnsupportedOperationException(\"A term cannot have more than Integer.MAX_VALUE bytes of payload data in a single document\");\n        }\n        payloadData.append(payload);\n      }\n    } else {\n      tvf.writeVInt(delta);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#writePosition(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#writePosition(int,BytesRef).mjava","sourceNew":"  private void writePosition(int delta, BytesRef payload) throws IOException {\n    if (payloads) {\n      int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        tvf.writeVInt((delta<<1)|1);\n        tvf.writeVInt(payloadLength);\n      } else {\n        tvf.writeVInt(delta << 1);\n      }\n      if (payloadLength > 0) {\n        if (payloadLength + payloadData.length() < 0) {\n          // we overflowed the payload buffer, just throw UOE\n          // having > Integer.MAX_VALUE bytes of payload for a single term in a single doc is nuts.\n          throw new UnsupportedOperationException(\"A term cannot have more than Integer.MAX_VALUE bytes of payload data in a single document\");\n        }\n        payloadData.append(payload);\n      }\n    } else {\n      tvf.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  private void writePosition(int delta, BytesRef payload) throws IOException {\n    if (payloads) {\n      int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        tvf.writeVInt((delta<<1)|1);\n        tvf.writeVInt(payloadLength);\n      } else {\n        tvf.writeVInt(delta << 1);\n      }\n      if (payloadLength > 0) {\n        if (payloadLength + payloadData.length < 0) {\n          // we overflowed the payload buffer, just throw UOE\n          // having > Integer.MAX_VALUE bytes of payload for a single term in a single doc is nuts.\n          throw new UnsupportedOperationException(\"A term cannot have more than Integer.MAX_VALUE bytes of payload data in a single document\");\n        }\n        payloadData.append(payload);\n      }\n    } else {\n      tvf.writeVInt(delta);\n    }\n  }\n\n","bugFix":["0935c850ea562932997b72c69d93e345f21d7f45"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#writePosition(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#writePosition(int,BytesRef).mjava","sourceNew":"  private void writePosition(int delta, BytesRef payload) throws IOException {\n    if (payloads) {\n      int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        tvf.writeVInt((delta<<1)|1);\n        tvf.writeVInt(payloadLength);\n      } else {\n        tvf.writeVInt(delta << 1);\n      }\n      if (payloadLength > 0) {\n        if (payloadLength + payloadData.length() < 0) {\n          // we overflowed the payload buffer, just throw UOE\n          // having > Integer.MAX_VALUE bytes of payload for a single term in a single doc is nuts.\n          throw new UnsupportedOperationException(\"A term cannot have more than Integer.MAX_VALUE bytes of payload data in a single document\");\n        }\n        payloadData.append(payload);\n      }\n    } else {\n      tvf.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  private void writePosition(int delta, BytesRef payload) throws IOException {\n    if (payloads) {\n      int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        tvf.writeVInt((delta<<1)|1);\n        tvf.writeVInt(payloadLength);\n      } else {\n        tvf.writeVInt(delta << 1);\n      }\n      if (payloadLength > 0) {\n        if (payloadLength + payloadData.length() < 0) {\n          // we overflowed the payload buffer, just throw UOE\n          // having > Integer.MAX_VALUE bytes of payload for a single term in a single doc is nuts.\n          throw new UnsupportedOperationException(\"A term cannot have more than Integer.MAX_VALUE bytes of payload data in a single document\");\n        }\n        payloadData.append(payload);\n      }\n    } else {\n      tvf.writeVInt(delta);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0935c850ea562932997b72c69d93e345f21d7f45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["0935c850ea562932997b72c69d93e345f21d7f45"],"0935c850ea562932997b72c69d93e345f21d7f45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22a2e66dfda83847e80095b8693c660742ab3e9c"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","0935c850ea562932997b72c69d93e345f21d7f45","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"0935c850ea562932997b72c69d93e345f21d7f45":["c7869f64c874ebf7f317d22c00baf2b6857797a6","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}