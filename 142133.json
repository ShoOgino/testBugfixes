{"path":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","commits":[{"id":"1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d","date":1383508626,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","pathOld":"/dev/null","sourceNew":"  /** User runs a query and aggregates facets. */\n  private List<FacetResult> search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    FacetSearchParams fsp = new FacetSearchParams(\n        new SumValueSourceFacetRequest(new CategoryPath(\"A\"), 10, expr.getValueSource(bindings), true));\n\n    // Aggregates the facet values\n    FacetsCollector fc = FacetsCollector.create(fsp, searcher.getIndexReader(), taxoReader);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","sourceNew":"  /** User runs a query and aggregates facets. */\n  private List<FacetResult> search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    FacetSearchParams fsp = new FacetSearchParams(\n        new SumValueSourceFacetRequest(new FacetLabel(\"A\"), 10, expr.getValueSource(bindings), true));\n\n    // Aggregates the facet values\n    FacetsCollector fc = FacetsCollector.create(fsp, searcher.getIndexReader(), taxoReader);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets. */\n  private List<FacetResult> search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    FacetSearchParams fsp = new FacetSearchParams(\n        new SumValueSourceFacetRequest(new CategoryPath(\"A\"), 10, expr.getValueSource(bindings), true));\n\n    // Aggregates the facet values\n    FacetsCollector fc = FacetsCollector.create(fsp, searcher.getIndexReader(), taxoReader);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d899affd3c008feba40d1405b7a38972ce2005b4","date":1385469973,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","sourceNew":"  /** User runs a query and aggregates facets. */\n  private SimpleFacetResult search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    // Aggregates the facet values\n    SimpleFacetsCollector sfc = new SimpleFacetsCollector(true);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    // Retrieve results\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, sfc, expr.getValueSource(bindings));\n    SimpleFacetResult result = facets.getTopChildren(10, \"A\");\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return result;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets. */\n  private List<FacetResult> search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    FacetSearchParams fsp = new FacetSearchParams(\n        new SumValueSourceFacetRequest(new FacetLabel(\"A\"), 10, expr.getValueSource(bindings), true));\n\n    // Aggregates the facet values\n    FacetsCollector fc = FacetsCollector.create(fsp, searcher.getIndexReader(), taxoReader);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","sourceNew":"  /** User runs a query and aggregates facets. */\n  private FacetResult search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    // Aggregates the facet values\n    FacetsCollector sfc = new FacetsCollector(true);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    // Retrieve results\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, sfc, expr.getValueSource(bindings));\n    FacetResult result = facets.getTopChildren(10, \"A\");\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return result;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets. */\n  private SimpleFacetResult search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    // Aggregates the facet values\n    SimpleFacetsCollector sfc = new SimpleFacetsCollector(true);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    // Retrieve results\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, sfc, expr.getValueSource(bindings));\n    SimpleFacetResult result = facets.getTopChildren(10, \"A\");\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","sourceNew":"  /** User runs a query and aggregates facets. */\n  private FacetResult search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    // Aggregates the facet values\n    FacetsCollector fc = new FacetsCollector(true);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    Facets.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, expr.getValueSource(bindings));\n    FacetResult result = facets.getTopChildren(10, \"A\");\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return result;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets. */\n  private FacetResult search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    // Aggregates the facet values\n    FacetsCollector sfc = new FacetsCollector(true);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), sfc);\n\n    // Retrieve results\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, sfc, expr.getValueSource(bindings));\n    FacetResult result = facets.getTopChildren(10, \"A\");\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","sourceNew":"  /** User runs a query and aggregates facets. */\n  private FacetResult search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    // Aggregates the facet values\n    FacetsCollector fc = new FacetsCollector(true);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, expr.getValueSource(bindings));\n    FacetResult result = facets.getTopChildren(10, \"A\");\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return result;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets. */\n  private FacetResult search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    // Aggregates the facet values\n    FacetsCollector fc = new FacetsCollector(true);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    Facets.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, expr.getValueSource(bindings));\n    FacetResult result = facets.getTopChildren(10, \"A\");\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","sourceNew":"  /** User runs a query and aggregates facets. */\n  private FacetResult search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    // Aggregates the facet values\n    FacetsCollector fc = new FacetsCollector(true);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, expr.getValueSource(bindings));\n    FacetResult result = facets.getTopChildren(10, \"A\");\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return result;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets. */\n  private List<FacetResult> search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    FacetSearchParams fsp = new FacetSearchParams(\n        new SumValueSourceFacetRequest(new CategoryPath(\"A\"), 10, expr.getValueSource(bindings), true));\n\n    // Aggregates the facet values\n    FacetsCollector fc = FacetsCollector.create(fsp, searcher.getIndexReader(), taxoReader);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n\n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae1ad302fc92a61505409a38838f2b1a4a2b092","date":1483787106,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","sourceNew":"  /** User runs a query and aggregates facets. */\n  private FacetResult search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    // Aggregates the facet values\n    FacetsCollector fc = new FacetsCollector(true);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, expr.getDoubleValuesSource(bindings));\n    FacetResult result = facets.getTopChildren(10, \"A\");\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return result;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets. */\n  private FacetResult search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    // Aggregates the facet values\n    FacetsCollector fc = new FacetsCollector(true);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, expr.getValueSource(bindings));\n    FacetResult result = facets.getTopChildren(10, \"A\");\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","sourceNew":"  /** User runs a query and aggregates facets. */\n  private FacetResult search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    // Aggregates the facet values\n    FacetsCollector fc = new FacetsCollector(true);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, expr.getDoubleValuesSource(bindings));\n    FacetResult result = facets.getTopChildren(10, \"A\");\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return result;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets. */\n  private FacetResult search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    // Aggregates the facet values\n    FacetsCollector fc = new FacetsCollector(true);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, expr.getValueSource(bindings));\n    FacetResult result = facets.getTopChildren(10, \"A\");\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27d4663d3f6f21a687874d174b49d55645ce99db","date":1587726496,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/ExpressionAggregationFacetsExample#search().mjava","sourceNew":"  /** User runs a query and aggregates facets. */\n  private FacetResult search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(\"_score\", DoubleValuesSource.SCORES); // the score of the document\n    bindings.add(\"popularity\", DoubleValuesSource.fromLongField(\"popularity\")); // the value of the 'popularity' field\n\n    // Aggregates the facet values\n    FacetsCollector fc = new FacetsCollector(true);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, expr.getDoubleValuesSource(bindings));\n    FacetResult result = facets.getTopChildren(10, \"A\");\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return result;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets. */\n  private FacetResult search() throws IOException, ParseException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Aggregate categories by an expression that combines the document's score\n    // and its popularity field\n    Expression expr = JavascriptCompiler.compile(\"_score * sqrt(popularity)\");\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(new SortField(\"_score\", SortField.Type.SCORE)); // the score of the document\n    bindings.add(new SortField(\"popularity\", SortField.Type.LONG)); // the value of the 'popularity' field\n\n    // Aggregates the facet values\n    FacetsCollector fc = new FacetsCollector(true);\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query:\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, fc);\n\n    // Retrieve results\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, expr.getDoubleValuesSource(bindings));\n    FacetResult result = facets.getTopChildren(10, \"A\");\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"27d4663d3f6f21a687874d174b49d55645ce99db":["7ae1ad302fc92a61505409a38838f2b1a4a2b092"],"1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"21d36d0db865f7b84026b447bec653469a6e66df":["d899affd3c008feba40d1405b7a38972ce2005b4"],"d899affd3c008feba40d1405b7a38972ce2005b4":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["78522aad83283ca58fae08fd89406b65429d0229"],"78522aad83283ca58fae08fd89406b65429d0229":["21d36d0db865f7b84026b447bec653469a6e66df"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d","fd83550e4b0bdd36e7d9dca9273264100782440b"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["3cc728b07df73b197e6d940d27f9b08b63918f13","7ae1ad302fc92a61505409a38838f2b1a4a2b092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27d4663d3f6f21a687874d174b49d55645ce99db"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d"]},"commit2Childs":{"27d4663d3f6f21a687874d174b49d55645ce99db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d"],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["27d4663d3f6f21a687874d174b49d55645ce99db","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"21d36d0db865f7b84026b447bec653469a6e66df":["78522aad83283ca58fae08fd89406b65429d0229"],"d899affd3c008feba40d1405b7a38972ce2005b4":["21d36d0db865f7b84026b447bec653469a6e66df"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"78522aad83283ca58fae08fd89406b65429d0229":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["7ae1ad302fc92a61505409a38838f2b1a4a2b092","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d899affd3c008feba40d1405b7a38972ce2005b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}