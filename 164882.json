{"path":"solr/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testNumCommitsConfigured().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testNumCommitsConfigured().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNumCommitsConfigured() {\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    assertEquals(((SolrDeletionPolicy) (delPolicy.getWrappedDeletionPolicy())).getMaxOptimizedCommitsToKeep(), commits.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testNumCommitsConfigured().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testNumCommitsConfigured() {\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    assertEquals(((SolrDeletionPolicy) (delPolicy.getWrappedDeletionPolicy())).getMaxOptimizedCommitsToKeep(), commits.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testNumCommitsConfigured().mjava","pathOld":"src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testNumCommitsConfigured().mjava","sourceNew":"  @Test\n  public void testNumCommitsConfigured() {\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    assertEquals(((SolrDeletionPolicy) (delPolicy.getWrappedDeletionPolicy())).getMaxOptimizedCommitsToKeep(), commits.size());\n  }\n\n","sourceOld":"  @Test\n  public void testNumCommitsConfigured() {\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    assertEquals(((SolrDeletionPolicy) (delPolicy.getWrappedDeletionPolicy())).getMaxOptimizedCommitsToKeep(), commits.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testNumCommitsConfigured().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNumCommitsConfigured() {\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    assertEquals(((SolrDeletionPolicy) (delPolicy.getWrappedDeletionPolicy())).getMaxOptimizedCommitsToKeep(), commits.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7461fcfc9209db892cb44cfaa79dde69559fa345","date":1279065932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testNumCommitsConfigured().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testNumCommitsConfigured().mjava","sourceNew":"  @Test\n  public void testNumCommitsConfigured() {\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    assertTrue(commits.size() <= ((SolrDeletionPolicy) (delPolicy.getWrappedDeletionPolicy())).getMaxOptimizedCommitsToKeep());\n  }\n\n","sourceOld":"  @Test\n  public void testNumCommitsConfigured() {\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    assertEquals(((SolrDeletionPolicy) (delPolicy.getWrappedDeletionPolicy())).getMaxOptimizedCommitsToKeep(), commits.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testNumCommitsConfigured().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testNumCommitsConfigured().mjava","sourceNew":"  @Test\n  public void testNumCommitsConfigured() {\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    assertTrue(commits.size() <= ((SolrDeletionPolicy) (delPolicy.getWrappedDeletionPolicy())).getMaxOptimizedCommitsToKeep());\n  }\n\n","sourceOld":"  @Test\n  public void testNumCommitsConfigured() {\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    assertEquals(((SolrDeletionPolicy) (delPolicy.getWrappedDeletionPolicy())).getMaxOptimizedCommitsToKeep(), commits.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testNumCommitsConfigured().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testNumCommitsConfigured().mjava","sourceNew":"  @Test\n  public void testNumCommitsConfigured() {\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    assertTrue(commits.size() <= ((SolrDeletionPolicy) (delPolicy.getWrappedDeletionPolicy())).getMaxOptimizedCommitsToKeep());\n  }\n\n","sourceOld":"  @Test\n  public void testNumCommitsConfigured() {\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    assertTrue(commits.size() <= ((SolrDeletionPolicy) (delPolicy.getWrappedDeletionPolicy())).getMaxOptimizedCommitsToKeep());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testNumCommitsConfigured().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testNumCommitsConfigured().mjava","sourceNew":"  @Test\n  public void testNumCommitsConfigured() {\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    assertTrue(commits.size() <= ((SolrDeletionPolicy) (delPolicy.getWrappedDeletionPolicy())).getMaxOptimizedCommitsToKeep());\n  }\n\n","sourceOld":"  @Test\n  public void testNumCommitsConfigured() {\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    assertTrue(commits.size() <= ((SolrDeletionPolicy) (delPolicy.getWrappedDeletionPolicy())).getMaxOptimizedCommitsToKeep());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testNumCommitsConfigured().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestSolrDeletionPolicy1#testNumCommitsConfigured().mjava","sourceNew":"  @Test\n  public void testNumCommitsConfigured() {\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    assertTrue(commits.size() <= ((SolrDeletionPolicy) (delPolicy.getWrappedDeletionPolicy())).getMaxOptimizedCommitsToKeep());\n  }\n\n","sourceOld":"  @Test\n  public void testNumCommitsConfigured() {\n    IndexDeletionPolicyWrapper delPolicy = h.getCore().getDeletionPolicy();\n    addDocs();\n    Map<Long, IndexCommit> commits = delPolicy.getCommits();\n    assertTrue(commits.size() <= ((SolrDeletionPolicy) (delPolicy.getWrappedDeletionPolicy())).getMaxOptimizedCommitsToKeep());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["7461fcfc9209db892cb44cfaa79dde69559fa345"],"c26f00b574427b55127e869b935845554afde1fa":["7461fcfc9209db892cb44cfaa79dde69559fa345","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7461fcfc9209db892cb44cfaa79dde69559fa345"],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","7461fcfc9209db892cb44cfaa79dde69559fa345"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"7461fcfc9209db892cb44cfaa79dde69559fa345":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","7461fcfc9209db892cb44cfaa79dde69559fa345"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7461fcfc9209db892cb44cfaa79dde69559fa345":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}