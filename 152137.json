{"path":"lucene/src/java/org/apache/lucene/search/Similarity#scorePayload(int,int,int,byte[],int,int).mjava","commits":[{"id":"5ce8d53d5582eaa6a0c771c9b119d480f41da59c","date":1297466174,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#scorePayload(int,int,int,byte[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#scorePayload(int,String,int,int,byte[],int,int).mjava","sourceNew":"  /**\n   * Calculate a scoring factor based on the data in the payload.  Overriding implementations\n   * are responsible for interpreting what is in the payload.  Lucene makes no assumptions about\n   * what is in the byte array.\n   * <p>\n   * The default implementation returns 1.\n   *\n   * @param docId The docId currently being scored.  If this value is {@link #NO_DOC_ID_PROVIDED}, then it should be assumed that the PayloadQuery implementation does not provide document information\n   * @param start The start position of the payload\n   * @param end The end position of the payload\n   * @param payload The payload byte array to be scored\n   * @param offset The offset into the payload array\n   * @param length The length in the array\n   * @return An implementation dependent float to be used as a scoring factor\n   *\n   */\n  // TODO: maybe switch this API to BytesRef?\n  public float scorePayload(int docId, int start, int end, byte [] payload, int offset, int length)\n  {\n    return 1;\n  }\n\n","sourceOld":"  /**\n   * Calculate a scoring factor based on the data in the payload.  Overriding implementations\n   * are responsible for interpreting what is in the payload.  Lucene makes no assumptions about\n   * what is in the byte array.\n   * <p>\n   * The default implementation returns 1.\n   *\n   * @param docId The docId currently being scored.  If this value is {@link #NO_DOC_ID_PROVIDED}, then it should be assumed that the PayloadQuery implementation does not provide document information\n   * @param fieldName The fieldName of the term this payload belongs to\n   * @param start The start position of the payload\n   * @param end The end position of the payload\n   * @param payload The payload byte array to be scored\n   * @param offset The offset into the payload array\n   * @param length The length in the array\n   * @return An implementation dependent float to be used as a scoring factor\n   *\n   */\n  // TODO: maybe switch this API to BytesRef?\n  public float scorePayload(int docId, String fieldName, int start, int end, byte [] payload, int offset, int length)\n  {\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#scorePayload(int,int,int,byte[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#scorePayload(int,String,int,int,byte[],int,int).mjava","sourceNew":"  /**\n   * Calculate a scoring factor based on the data in the payload.  Overriding implementations\n   * are responsible for interpreting what is in the payload.  Lucene makes no assumptions about\n   * what is in the byte array.\n   * <p>\n   * The default implementation returns 1.\n   *\n   * @param docId The docId currently being scored.  If this value is {@link #NO_DOC_ID_PROVIDED}, then it should be assumed that the PayloadQuery implementation does not provide document information\n   * @param start The start position of the payload\n   * @param end The end position of the payload\n   * @param payload The payload byte array to be scored\n   * @param offset The offset into the payload array\n   * @param length The length in the array\n   * @return An implementation dependent float to be used as a scoring factor\n   *\n   */\n  // TODO: maybe switch this API to BytesRef?\n  public float scorePayload(int docId, int start, int end, byte [] payload, int offset, int length)\n  {\n    return 1;\n  }\n\n","sourceOld":"  /**\n   * Calculate a scoring factor based on the data in the payload.  Overriding implementations\n   * are responsible for interpreting what is in the payload.  Lucene makes no assumptions about\n   * what is in the byte array.\n   * <p>\n   * The default implementation returns 1.\n   *\n   * @param docId The docId currently being scored.  If this value is {@link #NO_DOC_ID_PROVIDED}, then it should be assumed that the PayloadQuery implementation does not provide document information\n   * @param fieldName The fieldName of the term this payload belongs to\n   * @param start The start position of the payload\n   * @param end The end position of the payload\n   * @param payload The payload byte array to be scored\n   * @param offset The offset into the payload array\n   * @param length The length in the array\n   * @return An implementation dependent float to be used as a scoring factor\n   *\n   */\n  // TODO: maybe switch this API to BytesRef?\n  public float scorePayload(int docId, String fieldName, int start, int end, byte [] payload, int offset, int length)\n  {\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#scorePayload(int,int,int,byte[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#scorePayload(int,String,int,int,byte[],int,int).mjava","sourceNew":"  /**\n   * Calculate a scoring factor based on the data in the payload.  Overriding implementations\n   * are responsible for interpreting what is in the payload.  Lucene makes no assumptions about\n   * what is in the byte array.\n   * <p>\n   * The default implementation returns 1.\n   *\n   * @param docId The docId currently being scored.  If this value is {@link #NO_DOC_ID_PROVIDED}, then it should be assumed that the PayloadQuery implementation does not provide document information\n   * @param start The start position of the payload\n   * @param end The end position of the payload\n   * @param payload The payload byte array to be scored\n   * @param offset The offset into the payload array\n   * @param length The length in the array\n   * @return An implementation dependent float to be used as a scoring factor\n   *\n   */\n  // TODO: maybe switch this API to BytesRef?\n  public float scorePayload(int docId, int start, int end, byte [] payload, int offset, int length)\n  {\n    return 1;\n  }\n\n","sourceOld":"  /**\n   * Calculate a scoring factor based on the data in the payload.  Overriding implementations\n   * are responsible for interpreting what is in the payload.  Lucene makes no assumptions about\n   * what is in the byte array.\n   * <p>\n   * The default implementation returns 1.\n   *\n   * @param docId The docId currently being scored.  If this value is {@link #NO_DOC_ID_PROVIDED}, then it should be assumed that the PayloadQuery implementation does not provide document information\n   * @param fieldName The fieldName of the term this payload belongs to\n   * @param start The start position of the payload\n   * @param end The end position of the payload\n   * @param payload The payload byte array to be scored\n   * @param offset The offset into the payload array\n   * @param length The length in the array\n   * @return An implementation dependent float to be used as a scoring factor\n   *\n   */\n  // TODO: maybe switch this API to BytesRef?\n  public float scorePayload(int docId, String fieldName, int start, int end, byte [] payload, int offset, int length)\n  {\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0952c55e47c70ea2d8c8e2b634da066f9bde4e38","date":1310506639,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TFIDFSimilarity#scorePayload(int,int,int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#scorePayload(int,int,int,byte[],int,int).mjava","sourceNew":"  /**\n   * Calculate a scoring factor based on the data in the payload.  Implementations\n   * are responsible for interpreting what is in the payload.  Lucene makes no assumptions about\n   * what is in the byte array.\n   *\n   * @param doc The docId currently being scored.\n   * @param start The start position of the payload\n   * @param end The end position of the payload\n   * @param payload The payload byte array to be scored\n   * @return An implementation dependent float to be used as a scoring factor\n   */\n  public abstract float scorePayload(int doc, int start, int end, BytesRef payload);\n\n","sourceOld":"  /**\n   * Calculate a scoring factor based on the data in the payload.  Overriding implementations\n   * are responsible for interpreting what is in the payload.  Lucene makes no assumptions about\n   * what is in the byte array.\n   * <p>\n   * The default implementation returns 1.\n   *\n   * @param docId The docId currently being scored.  If this value is {@link #NO_DOC_ID_PROVIDED}, then it should be assumed that the PayloadQuery implementation does not provide document information\n   * @param start The start position of the payload\n   * @param end The end position of the payload\n   * @param payload The payload byte array to be scored\n   * @param offset The offset into the payload array\n   * @param length The length in the array\n   * @return An implementation dependent float to be used as a scoring factor\n   *\n   */\n  // TODO: maybe switch this API to BytesRef?\n  public float scorePayload(int docId, int start, int end, byte [] payload, int offset, int length)\n  {\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0952c55e47c70ea2d8c8e2b634da066f9bde4e38":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0952c55e47c70ea2d8c8e2b634da066f9bde4e38"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1bdbf92da222965b46c0a942c3857ba56e5c638","5ce8d53d5582eaa6a0c771c9b119d480f41da59c","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["f1bdbf92da222965b46c0a942c3857ba56e5c638","0952c55e47c70ea2d8c8e2b634da066f9bde4e38","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"0952c55e47c70ea2d8c8e2b634da066f9bde4e38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}