{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    dir.setMaxSizeInBytes(dir.getRecomputedActualSizeInBytes());\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockDirectoryWrapper dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockDirectoryWrapper dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9","d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84b590669deb3d3a471cec6cb13b104b2ee94418","date":1288889547,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testImmediateDiskFull().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnDiskFull#testImmediateDiskFull().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testImmediateDiskFull().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1130: make sure immeidate disk full on creating\n  // an IndexWriter (hit during DW.ThreadState.init()) is\n  // OK:\n  public void testImmediateDiskFull() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    dir.setMaxSizeInBytes(Math.max(1, dir.getRecomputedActualSizeInBytes()));\n    final Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    // Without fix for LUCENE-1130: this call will hang:\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n    try {\n      writer.close(false);\n      fail(\"did not hit disk full\");\n    } catch (IOException ioe) {\n    }\n\n    // Make sure once disk space is avail again, we can\n    // cleanly close:\n    dir.setMaxSizeInBytes(0);\n    writer.close(false);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"85a883878c0af761245ab048babc63d099f835f3":["132903c28af3aa6f67284b78de91c0f0a99488c2","84b590669deb3d3a471cec6cb13b104b2ee94418"],"d572389229127c297dd1fa5ce4758e1cec41e799":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","84b590669deb3d3a471cec6cb13b104b2ee94418"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"84b590669deb3d3a471cec6cb13b104b2ee94418":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84b590669deb3d3a471cec6cb13b104b2ee94418"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"85a883878c0af761245ab048babc63d099f835f3":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["85a883878c0af761245ab048babc63d099f835f3","84b590669deb3d3a471cec6cb13b104b2ee94418"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"84b590669deb3d3a471cec6cb13b104b2ee94418":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}