{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper.SessionRef#release(SessionWrapper).mjava","commits":[{"id":"d907c28c7fe6305eaec1756d51365f5149e1e41d","date":1512533044,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper.SessionRef#release(SessionWrapper).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * All operations suggested by the current session object\n     * is complete. Do not even cache anything\n     *\n     */\n    private void release(SessionWrapper sessionWrapper) {\n      synchronized (lockObj) {\n        if (sessionWrapper.createTime == this.sessionWrapper.createTime && this.sessionWrapper.refCount.get() <= 0) {\n          log.debug(\"session set to NULL\");\n          this.sessionWrapper = SessionWrapper.DEF_INST;\n        } // else somebody created a new session b/c of expiry . So no need to do anything about it\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper.SessionRef#release(SessionWrapper).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper.SessionRef#release(SessionWrapper).mjava","sourceNew":"    /**\n     * All operations suggested by the current session object\n     * is complete. Do not even cache anything\n     *\n     */\n    private void release(SessionWrapper sessionWrapper) {\n      synchronized (lockObj) {\n        if (sessionWrapper.createTime == this.sessionWrapper.createTime && this.sessionWrapper.refCount.get() <= 0) {\n          log.debug(\"session set to NULL\");\n          this.sessionWrapper = SessionWrapper.DEFAULT_INSTANCE;\n        } // else somebody created a new session b/c of expiry . So no need to do anything about it\n      }\n    }\n\n","sourceOld":"    /**\n     * All operations suggested by the current session object\n     * is complete. Do not even cache anything\n     *\n     */\n    private void release(SessionWrapper sessionWrapper) {\n      synchronized (lockObj) {\n        if (sessionWrapper.createTime == this.sessionWrapper.createTime && this.sessionWrapper.refCount.get() <= 0) {\n          log.debug(\"session set to NULL\");\n          this.sessionWrapper = SessionWrapper.DEF_INST;\n        } // else somebody created a new session b/c of expiry . So no need to do anything about it\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6428b274f6593f368c4f838379620e7f5d196d65","date":1537799661,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper.SessionRef#release(SessionWrapper).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper.SessionRef#release(SessionWrapper).mjava","sourceNew":"    /**\n     * All operations suggested by the current session object\n     * is complete. Do not even cache anything\n     */\n    private void release(SessionWrapper sessionWrapper) {\n      synchronized (lockObj) {\n        if (sessionWrapper.createTime == this.sessionWrapper.createTime && this.sessionWrapper.refCount.get() <= 0) {\n          log.debug(\"session set to NULL\");\n          this.sessionWrapper = SessionWrapper.DEFAULT_INSTANCE;\n        } // else somebody created a new session b/c of expiry . So no need to do anything about it\n      }\n    }\n\n","sourceOld":"    /**\n     * All operations suggested by the current session object\n     * is complete. Do not even cache anything\n     *\n     */\n    private void release(SessionWrapper sessionWrapper) {\n      synchronized (lockObj) {\n        if (sessionWrapper.createTime == this.sessionWrapper.createTime && this.sessionWrapper.refCount.get() <= 0) {\n          log.debug(\"session set to NULL\");\n          this.sessionWrapper = SessionWrapper.DEFAULT_INSTANCE;\n        } // else somebody created a new session b/c of expiry . So no need to do anything about it\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e17627eb9673daf01d17fdfb583c621c55c34208","date":1593028963,"type":3,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper.SessionRef#release(SessionWrapper).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper.SessionRef#release(SessionWrapper).mjava","sourceNew":"    /**\n     * All operations suggested by the current session object\n     * is complete. Do not even cache anything\n     */\n    private void release(SessionWrapper sessionWrapper) {\n      boolean present;\n      synchronized (lockObj) {\n        present = sessionWrapperSet.remove(sessionWrapper);\n      }\n      if (!present) {\n        log.warn(\"released session {} not found in session set\", sessionWrapper.getCreateTime());\n      } else {\n        if (log.isDebugEnabled()) {\n          TimeSource timeSource = sessionWrapper.session.cloudManager.getTimeSource();\n          log.debug(\"final release, session {} lived a total of {}ms, \", sessionWrapper.getCreateTime(),\n              timeElapsed(timeSource, TimeUnit.MILLISECONDS.convert(sessionWrapper.getCreateTime(),\n                  TimeUnit.NANOSECONDS), MILLISECONDS)); // logOk\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * All operations suggested by the current session object\n     * is complete. Do not even cache anything\n     */\n    private void release(SessionWrapper sessionWrapper) {\n      synchronized (lockObj) {\n        if (sessionWrapper.createTime == this.sessionWrapper.createTime && this.sessionWrapper.refCount.get() <= 0) {\n          log.debug(\"session set to NULL\");\n          this.sessionWrapper = SessionWrapper.DEFAULT_INSTANCE;\n        } // else somebody created a new session b/c of expiry . So no need to do anything about it\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper.SessionRef#release(SessionWrapper).mjava","sourceNew":null,"sourceOld":"    /**\n     * All operations suggested by the current session object\n     * is complete. Do not even cache anything\n     */\n    private void release(SessionWrapper sessionWrapper) {\n      boolean present;\n      synchronized (lockObj) {\n        present = sessionWrapperSet.remove(sessionWrapper);\n      }\n      if (!present) {\n        log.warn(\"released session {} not found in session set\", sessionWrapper.getCreateTime());\n      } else {\n        if (log.isDebugEnabled()) {\n          TimeSource timeSource = sessionWrapper.session.cloudManager.getTimeSource();\n          log.debug(\"final release, session {} lived a total of {}ms, \", sessionWrapper.getCreateTime(),\n              timeElapsed(timeSource, TimeUnit.MILLISECONDS.convert(sessionWrapper.getCreateTime(),\n                  TimeUnit.NANOSECONDS), MILLISECONDS)); // logOk\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e17627eb9673daf01d17fdfb583c621c55c34208":["6428b274f6593f368c4f838379620e7f5d196d65"],"3f504512a03d978990cbff30db0522b354e846db":["e17627eb9673daf01d17fdfb583c621c55c34208"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6428b274f6593f368c4f838379620e7f5d196d65":["27639bb5e041490ce599065875dd2f6d8beef62a"],"27639bb5e041490ce599065875dd2f6d8beef62a":["d907c28c7fe6305eaec1756d51365f5149e1e41d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"d907c28c7fe6305eaec1756d51365f5149e1e41d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e17627eb9673daf01d17fdfb583c621c55c34208":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d907c28c7fe6305eaec1756d51365f5149e1e41d"],"6428b274f6593f368c4f838379620e7f5d196d65":["e17627eb9673daf01d17fdfb583c621c55c34208"],"27639bb5e041490ce599065875dd2f6d8beef62a":["6428b274f6593f368c4f838379620e7f5d196d65"],"d907c28c7fe6305eaec1756d51365f5149e1e41d":["27639bb5e041490ce599065875dd2f6d8beef62a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}