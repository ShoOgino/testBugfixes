{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShard(int,String).mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShard(int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShard(int,String).mjava","sourceNew":"  /**\n   * Get shard id for hash. This is used when determining which Slice the\n   * document is to be submitted to.\n   */\n  public String getShard(int hash, String collection) {\n    RangeInfo rangInfo = getRanges(collection);\n    \n    int cnt = 0;\n    for (Range range : rangInfo.ranges) {\n      if (hash < range.max) {\n        return rangInfo.shardList.get(cnt);\n      }\n      cnt++;\n    }\n    \n    throw new IllegalStateException(\"The HashPartitioner failed\");\n  }\n\n","sourceOld":"  /**\n   * Get shard id for hash. This is used when determining which Slice the\n   * document is to be submitted to.\n   */\n  public String getShard(int hash, String collection) {\n    RangeInfo rangInfo = getRanges(collection);\n    \n    int cnt = 0;\n    for (Range range : rangInfo.ranges) {\n      if (hash < range.max) {\n        return rangInfo.shardList.get(cnt);\n      }\n      cnt++;\n    }\n    \n    throw new IllegalStateException(\"The HashPartitioner failed\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShard(int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShard(int,String).mjava","sourceNew":"  /**\n   * Get shard id for hash. This is used when determining which Slice the\n   * document is to be submitted to.\n   */\n  public String getShard(int hash, String collection) {\n    RangeInfo rangInfo = getRanges(collection);\n    \n    int cnt = 0;\n    for (Range range : rangInfo.ranges) {\n      if (hash < range.max) {\n        return rangInfo.shardList.get(cnt);\n      }\n      cnt++;\n    }\n    \n    throw new IllegalStateException(\"The HashPartitioner failed\");\n  }\n\n","sourceOld":"  /**\n   * Get shard id for hash. This is used when determining which Slice the\n   * document is to be submitted to.\n   */\n  public String getShard(int hash, String collection) {\n    RangeInfo rangInfo = getRanges(collection);\n    \n    int cnt = 0;\n    for (Range range : rangInfo.ranges) {\n      if (hash < range.max) {\n        return rangInfo.shardList.get(cnt);\n      }\n      cnt++;\n    }\n    \n    throw new IllegalStateException(\"The HashPartitioner failed\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShard(int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShard(int,String).mjava","sourceNew":"  /**\n   * Get shard id for hash. This is used when determining which Slice the\n   * document is to be submitted to.\n   */\n  public String getShard(int hash, String collection) {\n    RangeInfo rangInfo = getRanges(collection);\n    \n    int cnt = 0;\n    for (Range range : rangInfo.ranges) {\n      if (hash < range.max) {\n        return rangInfo.shardList.get(cnt);\n      }\n      cnt++;\n    }\n    \n    throw new IllegalStateException(\"The HashPartitioner failed\");\n  }\n\n","sourceOld":"  /**\n   * Get shard id for hash. This is used when determining which Slice the\n   * document is to be submitted to.\n   */\n  public String getShard(int hash, String collection) {\n    RangeInfo rangInfo = getRanges(collection);\n    \n    int cnt = 0;\n    for (Range range : rangInfo.ranges) {\n      if (hash < range.max) {\n        return rangInfo.shardList.get(cnt);\n      }\n      cnt++;\n    }\n    \n    throw new IllegalStateException(\"The HashPartitioner failed\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e147cce225492338f15a94a427f51f867da574ee","date":1346365916,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShard(int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShard(int,String).mjava","sourceNew":"  /**\n   * Get shard id for hash. This is used when determining which Slice the\n   * document is to be submitted to.\n   */\n  public String getShard(int hash, String collection) {\n    RangeInfo rangInfo = getRanges(collection);\n    \n    int cnt = 0;\n    for (Range range : rangInfo.ranges) {\n      if (range.includes(hash)) {\n        return rangInfo.shardList.get(cnt);\n      }\n      cnt++;\n    }\n    \n    throw new IllegalStateException(\"The HashPartitioner failed\");\n  }\n\n","sourceOld":"  /**\n   * Get shard id for hash. This is used when determining which Slice the\n   * document is to be submitted to.\n   */\n  public String getShard(int hash, String collection) {\n    RangeInfo rangInfo = getRanges(collection);\n    \n    int cnt = 0;\n    for (Range range : rangInfo.ranges) {\n      if (hash < range.max) {\n        return rangInfo.shardList.get(cnt);\n      }\n      cnt++;\n    }\n    \n    throw new IllegalStateException(\"The HashPartitioner failed\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShard(int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShard(int,String).mjava","sourceNew":"  /**\n   * Get shard id for hash. This is used when determining which Slice the\n   * document is to be submitted to.\n   */\n  public String getShard(int hash, String collection) {\n    RangeInfo rangInfo = getRanges(collection);\n    \n    int cnt = 0;\n    for (Range range : rangInfo.ranges) {\n      if (range.includes(hash)) {\n        return rangInfo.shardList.get(cnt);\n      }\n      cnt++;\n    }\n    \n    throw new IllegalStateException(\"The HashPartitioner failed\");\n  }\n\n","sourceOld":"  /**\n   * Get shard id for hash. This is used when determining which Slice the\n   * document is to be submitted to.\n   */\n  public String getShard(int hash, String collection) {\n    RangeInfo rangInfo = getRanges(collection);\n    \n    int cnt = 0;\n    for (Range range : rangInfo.ranges) {\n      if (hash < range.max) {\n        return rangInfo.shardList.get(cnt);\n      }\n      cnt++;\n    }\n    \n    throw new IllegalStateException(\"The HashPartitioner failed\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShard(int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShard(int,String).mjava","sourceNew":"  /**\n   * Get shard id for hash. This is used when determining which Slice the\n   * document is to be submitted to.\n   */\n  public String getShard(int hash, String collection) {\n    RangeInfo rangInfo = getRanges(collection);\n    \n    int cnt = 0;\n    for (Range range : rangInfo.ranges) {\n      if (range.includes(hash)) {\n        return rangInfo.shardList.get(cnt);\n      }\n      cnt++;\n    }\n    \n    throw new IllegalStateException(\"The DocRouter failed\");\n  }\n\n","sourceOld":"  /**\n   * Get shard id for hash. This is used when determining which Slice the\n   * document is to be submitted to.\n   */\n  public String getShard(int hash, String collection) {\n    RangeInfo rangInfo = getRanges(collection);\n    \n    int cnt = 0;\n    for (Range range : rangInfo.ranges) {\n      if (range.includes(hash)) {\n        return rangInfo.shardList.get(cnt);\n      }\n      cnt++;\n    }\n    \n    throw new IllegalStateException(\"The HashPartitioner failed\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5950eb64b8186de9916cbfc47470784523079a","date":1355004015,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShard(int,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get shard id for hash. This is used when determining which Slice the\n   * document is to be submitted to.\n   */\n  public String getShard(int hash, String collection) {\n    RangeInfo rangInfo = getRanges(collection);\n    \n    int cnt = 0;\n    for (Range range : rangInfo.ranges) {\n      if (range.includes(hash)) {\n        return rangInfo.shardList.get(cnt);\n      }\n      cnt++;\n    }\n    \n    throw new IllegalStateException(\"The DocRouter failed\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShard(int,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get shard id for hash. This is used when determining which Slice the\n   * document is to be submitted to.\n   */\n  public String getShard(int hash, String collection) {\n    RangeInfo rangInfo = getRanges(collection);\n    \n    int cnt = 0;\n    for (Range range : rangInfo.ranges) {\n      if (range.includes(hash)) {\n        return rangInfo.shardList.get(cnt);\n      }\n      cnt++;\n    }\n    \n    throw new IllegalStateException(\"The HashPartitioner failed\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5a558d54519c651068ddb202f03befefb1514a7":["e147cce225492338f15a94a427f51f867da574ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["e147cce225492338f15a94a427f51f867da574ee","0f5950eb64b8186de9916cbfc47470784523079a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"0f5950eb64b8186de9916cbfc47470784523079a":["c5a558d54519c651068ddb202f03befefb1514a7"],"e147cce225492338f15a94a427f51f867da574ee":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["d6f074e73200c07d54f242d3880a8da5a35ff97b","e147cce225492338f15a94a427f51f867da574ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5950eb64b8186de9916cbfc47470784523079a"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","e147cce225492338f15a94a427f51f867da574ee","8fd5be977c105554c6a7b68afcdbc511439723ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"c5a558d54519c651068ddb202f03befefb1514a7":["0f5950eb64b8186de9916cbfc47470784523079a"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"0f5950eb64b8186de9916cbfc47470784523079a":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e147cce225492338f15a94a427f51f867da574ee":["c5a558d54519c651068ddb202f03befefb1514a7","407687e67faf6e1f02a211ca078d8e3eed631027","05a14b2611ead08655a2b2bdc61632eb31316e57"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","8fd5be977c105554c6a7b68afcdbc511439723ab","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}