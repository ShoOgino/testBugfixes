{"path":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"/dev/null","sourceNew":"  public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(new File(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    up = new ContentStreamUpdateRequest(\"/update/extract\");\n    up.addFile(new File(\"mailing_lists.pdf\"));\n    up.setParam(\"literal.id\", \"mailing_lists.pdf\");\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    result = server.request(up);\n    assertNotNull(\"Couldn't upload mailing_lists.pdf\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":null,"sourceOld":"  public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(new File(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    up = new ContentStreamUpdateRequest(\"/update/extract\");\n    up.addFile(new File(\"mailing_lists.pdf\"));\n    up.setParam(\"literal.id\", \"mailing_lists.pdf\");\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    result = server.request(up);\n    assertNotNull(\"Couldn't upload mailing_lists.pdf\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":"  public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(new File(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    up = new ContentStreamUpdateRequest(\"/update/extract\");\n    up.addFile(new File(\"mailing_lists.pdf\"));\n    up.setParam(\"literal.id\", \"mailing_lists.pdf\");\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    result = server.request(up);\n    assertNotNull(\"Couldn't upload mailing_lists.pdf\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n\n  }\n\n","sourceOld":"  public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(new File(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    up = new ContentStreamUpdateRequest(\"/update/extract\");\n    up.addFile(new File(\"mailing_lists.pdf\"));\n    up.setParam(\"literal.id\", \"mailing_lists.pdf\");\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    result = server.request(up);\n    assertNotNull(\"Couldn't upload mailing_lists.pdf\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"/dev/null","sourceNew":"  public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(new File(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    up = new ContentStreamUpdateRequest(\"/update/extract\");\n    up.addFile(new File(\"mailing_lists.pdf\"));\n    up.setParam(\"literal.id\", \"mailing_lists.pdf\");\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    result = server.request(up);\n    assertNotNull(\"Couldn't upload mailing_lists.pdf\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94","date":1269556173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(new File(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    up = new ContentStreamUpdateRequest(\"/update/extract\");\n    up.addFile(new File(\"mailing_lists.pdf\"));\n    up.setParam(\"literal.id\", \"mailing_lists.pdf\");\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    result = server.request(up);\n    assertNotNull(\"Couldn't upload mailing_lists.pdf\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n\n  }\n\n","sourceOld":"  public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(new File(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    up = new ContentStreamUpdateRequest(\"/update/extract\");\n    up.addFile(new File(\"mailing_lists.pdf\"));\n    up.setParam(\"literal.id\", \"mailing_lists.pdf\");\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    result = server.request(up);\n    assertNotNull(\"Couldn't upload mailing_lists.pdf\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"50d7d726990fd1c1cdb2db20f6b4f7b301c104e6","date":1279278004,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(new File(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(new File(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    up = new ContentStreamUpdateRequest(\"/update/extract\");\n    up.addFile(new File(\"mailing_lists.pdf\"));\n    up.setParam(\"literal.id\", \"mailing_lists.pdf\");\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    result = server.request(up);\n    assertNotNull(\"Couldn't upload mailing_lists.pdf\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(new File(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(new File(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    up = new ContentStreamUpdateRequest(\"/update/extract\");\n    up.addFile(new File(\"mailing_lists.pdf\"));\n    up.setParam(\"literal.id\", \"mailing_lists.pdf\");\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    result = server.request(up);\n    assertNotNull(\"Couldn't upload mailing_lists.pdf\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6da674254994fc11839b3f6ad511ef8871a94f7","date":1293591321,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(new File(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(new File(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(new File(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e122d6e4a2d4e9b25c10c99d0df3066f9358cfda","date":1310073081,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","bugFix":["0698c497f27c6f59a7a094c46c0f8795f330edf7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","sourceOld":" @Test\n public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(getFile(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6da674254994fc11839b3f6ad511ef8871a94f7":["50d7d726990fd1c1cdb2db20f6b4f7b301c104e6"],"70ad682703b8585f5d0a637efec044d57ec05efb":["50d7d726990fd1c1cdb2db20f6b4f7b301c104e6","b6da674254994fc11839b3f6ad511ef8871a94f7"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["e122d6e4a2d4e9b25c10c99d0df3066f9358cfda","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94","50d7d726990fd1c1cdb2db20f6b4f7b301c104e6"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"1291e4568eb7d9463d751627596ef14baf4c1603":["b6da674254994fc11839b3f6ad511ef8871a94f7","e122d6e4a2d4e9b25c10c99d0df3066f9358cfda"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["5f4e87790277826a2aea119328600dfb07761f32","b6da674254994fc11839b3f6ad511ef8871a94f7"],"2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["b6da674254994fc11839b3f6ad511ef8871a94f7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["e122d6e4a2d4e9b25c10c99d0df3066f9358cfda"],"e122d6e4a2d4e9b25c10c99d0df3066f9358cfda":["b6da674254994fc11839b3f6ad511ef8871a94f7"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"50d7d726990fd1c1cdb2db20f6b4f7b301c104e6":["2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"b6da674254994fc11839b3f6ad511ef8871a94f7":["70ad682703b8585f5d0a637efec044d57ec05efb","1291e4568eb7d9463d751627596ef14baf4c1603","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","c903c3d15906a3da96b8c0c2fb704491005fdbdb","e122d6e4a2d4e9b25c10c99d0df3066f9358cfda"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"1da8d55113b689b06716246649de6f62430f15c0":["2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"2dcd5e222dc34cb9732195d2cf29a82bdcfa1e94":["5f4e87790277826a2aea119328600dfb07761f32","50d7d726990fd1c1cdb2db20f6b4f7b301c104e6"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e122d6e4a2d4e9b25c10c99d0df3066f9358cfda":["c26f00b574427b55127e869b935845554afde1fa","1291e4568eb7d9463d751627596ef14baf4c1603","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"50d7d726990fd1c1cdb2db20f6b4f7b301c104e6":["b6da674254994fc11839b3f6ad511ef8871a94f7","70ad682703b8585f5d0a637efec044d57ec05efb","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","1291e4568eb7d9463d751627596ef14baf4c1603","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}