{"path":"src/test/org/apache/lucene/analysis/TestNumericTokenStream#testLongStream().mjava","commits":[{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestNumericTokenStream#testLongStream().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestNumericTokenStream#testLongStreamNewAPI().mjava","sourceNew":"  public void testLongStream() throws Exception {\n    final NumericTokenStream stream=new NumericTokenStream().setLongValue(lvalue);\n    // use getAttribute to test if attributes really exist, if not an IAE will be throwed\n    final TermAttribute termAtt = (TermAttribute) stream.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = (TypeAttribute) stream.getAttribute(TypeAttribute.class);\n    for (int shift=0; shift<64; shift+=NumericUtils.PRECISION_STEP_DEFAULT) {\n      assertTrue(\"New token is available\", stream.incrementToken());\n      assertEquals(\"Term is correctly encoded\", NumericUtils.longToPrefixCoded(lvalue, shift), termAtt.term());\n      assertEquals(\"Type correct\", (shift == 0) ? NumericTokenStream.TOKEN_TYPE_FULL_PREC : NumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());\n    }\n    assertFalse(\"No more tokens available\", stream.incrementToken());\n  }\n\n","sourceOld":"  public void testLongStreamNewAPI() throws Exception {\n    final NumericTokenStream stream=new NumericTokenStream().setLongValue(lvalue);\n    stream.setUseNewAPI(true);\n    // use getAttribute to test if attributes really exist, if not an IAE will be throwed\n    final TermAttribute termAtt = (TermAttribute) stream.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = (TypeAttribute) stream.getAttribute(TypeAttribute.class);\n    for (int shift=0; shift<64; shift+=NumericUtils.PRECISION_STEP_DEFAULT) {\n      assertTrue(\"New token is available\", stream.incrementToken());\n      assertEquals(\"Term is correctly encoded\", NumericUtils.longToPrefixCoded(lvalue, shift), termAtt.term());\n      assertEquals(\"Type correct\", (shift == 0) ? NumericTokenStream.TOKEN_TYPE_FULL_PREC : NumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());\n    }\n    assertFalse(\"No more tokens available\", stream.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestNumericTokenStream#testLongStream().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestNumericTokenStream#testLongStream().mjava","sourceNew":"  public void testLongStream() throws Exception {\n    final NumericTokenStream stream=new NumericTokenStream().setLongValue(lvalue);\n    // use getAttribute to test if attributes really exist, if not an IAE will be throwed\n    final TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = stream.getAttribute(TypeAttribute.class);\n    for (int shift=0; shift<64; shift+=NumericUtils.PRECISION_STEP_DEFAULT) {\n      assertTrue(\"New token is available\", stream.incrementToken());\n      assertEquals(\"Term is correctly encoded\", NumericUtils.longToPrefixCoded(lvalue, shift), termAtt.term());\n      assertEquals(\"Type correct\", (shift == 0) ? NumericTokenStream.TOKEN_TYPE_FULL_PREC : NumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());\n    }\n    assertFalse(\"No more tokens available\", stream.incrementToken());\n  }\n\n","sourceOld":"  public void testLongStream() throws Exception {\n    final NumericTokenStream stream=new NumericTokenStream().setLongValue(lvalue);\n    // use getAttribute to test if attributes really exist, if not an IAE will be throwed\n    final TermAttribute termAtt = (TermAttribute) stream.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = (TypeAttribute) stream.getAttribute(TypeAttribute.class);\n    for (int shift=0; shift<64; shift+=NumericUtils.PRECISION_STEP_DEFAULT) {\n      assertTrue(\"New token is available\", stream.incrementToken());\n      assertEquals(\"Term is correctly encoded\", NumericUtils.longToPrefixCoded(lvalue, shift), termAtt.term());\n      assertEquals(\"Type correct\", (shift == 0) ? NumericTokenStream.TOKEN_TYPE_FULL_PREC : NumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());\n    }\n    assertFalse(\"No more tokens available\", stream.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestNumericTokenStream#testLongStream().mjava","sourceNew":null,"sourceOld":"  public void testLongStream() throws Exception {\n    final NumericTokenStream stream=new NumericTokenStream().setLongValue(lvalue);\n    // use getAttribute to test if attributes really exist, if not an IAE will be throwed\n    final TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = stream.getAttribute(TypeAttribute.class);\n    for (int shift=0; shift<64; shift+=NumericUtils.PRECISION_STEP_DEFAULT) {\n      assertTrue(\"New token is available\", stream.incrementToken());\n      assertEquals(\"Term is correctly encoded\", NumericUtils.longToPrefixCoded(lvalue, shift), termAtt.term());\n      assertEquals(\"Type correct\", (shift == 0) ? NumericTokenStream.TOKEN_TYPE_FULL_PREC : NumericTokenStream.TOKEN_TYPE_LOWER_PREC, typeAtt.type());\n    }\n    assertFalse(\"No more tokens available\", stream.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}