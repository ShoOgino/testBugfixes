{"path":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestTimeout(boolean,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestTimeout(boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestTimeout(boolean,boolean).mjava","sourceNew":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    Collector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeExceededException timoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeExceededException x) {\n      timoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n    assertTrue( \"doc collected at timeout must be > 0!\", exceptionDoc > 0 );\n    if (greedy) {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n      assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n    } else {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-counterThread.getResolution()),\n        timoutException.getTimeElapsed() > TIME_ALLOWED-counterThread.getResolution());\n    // b) Not too late.\n    //    This part is problematic in a busy test system, so we just print a warning.\n    //    We already verified that a timeout occurred, we just can't be picky about how long it took.\n    if (timoutException.getTimeElapsed() > maxTime(multiThreaded)) {\n      System.out.println(\"Informative: timeout exceeded (no action required: most probably just \" +\n        \" because the test machine is slower than usual):  \" +\n        \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded));\n    }\n  }\n\n","sourceOld":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    Collector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeExceededException timoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeExceededException x) {\n      timoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n    assertTrue( \"doc collected at timeout must be > 0!\", exceptionDoc > 0 );\n    if (greedy) {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n      assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n    } else {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-counterThread.getResolution()),\n        timoutException.getTimeElapsed() > TIME_ALLOWED-counterThread.getResolution());\n    // b) Not too late.\n    //    This part is problematic in a busy test system, so we just print a warning.\n    //    We already verified that a timeout occurred, we just can't be picky about how long it took.\n    if (timoutException.getTimeElapsed() > maxTime(multiThreaded)) {\n      System.out.println(\"Informative: timeout exceeded (no action required: most probably just \" +\n        \" because the test machine is slower than usual):  \" +\n        \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b632a6d6dda760b0fb5e1f0626881c08c56d12f","date":1434442854,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestTimeout(boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestTimeout(boolean,boolean).mjava","sourceNew":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    Collector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeExceededException timoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeExceededException x) {\n      timoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n    assertTrue( \"doc collected at timeout must be > 0! or == -1 but was: \" + exceptionDoc, exceptionDoc == -1 || exceptionDoc > 0);\n    if (greedy) {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n      assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n    } else {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-counterThread.getResolution()),\n        timoutException.getTimeElapsed() > TIME_ALLOWED-counterThread.getResolution());\n    // b) Not too late.\n    //    This part is problematic in a busy test system, so we just print a warning.\n    //    We already verified that a timeout occurred, we just can't be picky about how long it took.\n    if (timoutException.getTimeElapsed() > maxTime(multiThreaded)) {\n      System.out.println(\"Informative: timeout exceeded (no action required: most probably just \" +\n        \" because the test machine is slower than usual):  \" +\n        \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded));\n    }\n  }\n\n","sourceOld":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    Collector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeExceededException timoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeExceededException x) {\n      timoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n    assertTrue( \"doc collected at timeout must be > 0!\", exceptionDoc > 0 );\n    if (greedy) {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n      assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n    } else {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-counterThread.getResolution()),\n        timoutException.getTimeElapsed() > TIME_ALLOWED-counterThread.getResolution());\n    // b) Not too late.\n    //    This part is problematic in a busy test system, so we just print a warning.\n    //    We already verified that a timeout occurred, we just can't be picky about how long it took.\n    if (timoutException.getTimeElapsed() > maxTime(multiThreaded)) {\n      System.out.println(\"Informative: timeout exceeded (no action required: most probably just \" +\n        \" because the test machine is slower than usual):  \" +\n        \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded));\n    }\n  }\n\n","bugFix":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"550cf6504b217adb129a3ce192d5b5a1caa6fd88","date":1434721222,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestTimeout(boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestTimeout(boolean,boolean).mjava","sourceNew":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    Collector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeExceededException timeoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeExceededException x) {\n      timeoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timeoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timeoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n\n    // exceptionDoc == -1 means we hit the timeout in getLeafCollector:\n    if (exceptionDoc != -1) {\n      assertTrue( \"doc collected at timeout must be > 0! or == -1 but was: \" + exceptionDoc, exceptionDoc > 0);\n      if (greedy) {\n        assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n        assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n      } else {\n        assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n      }\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timeoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timeoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-counterThread.getResolution()),\n        timeoutException.getTimeElapsed() > TIME_ALLOWED-counterThread.getResolution());\n    // b) Not too late.\n    //    This part is problematic in a busy test system, so we just print a warning.\n    //    We already verified that a timeout occurred, we just can't be picky about how long it took.\n    if (timeoutException.getTimeElapsed() > maxTime(multiThreaded)) {\n      System.out.println(\"Informative: timeout exceeded (no action required: most probably just \" +\n        \" because the test machine is slower than usual):  \" +\n        \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timeoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timeoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded));\n    }\n  }\n\n","sourceOld":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    Collector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeExceededException timoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeExceededException x) {\n      timoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n    assertTrue( \"doc collected at timeout must be > 0! or == -1 but was: \" + exceptionDoc, exceptionDoc == -1 || exceptionDoc > 0);\n    if (greedy) {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n      assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n    } else {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-counterThread.getResolution()),\n        timoutException.getTimeElapsed() > TIME_ALLOWED-counterThread.getResolution());\n    // b) Not too late.\n    //    This part is problematic in a busy test system, so we just print a warning.\n    //    We already verified that a timeout occurred, we just can't be picky about how long it took.\n    if (timoutException.getTimeElapsed() > maxTime(multiThreaded)) {\n      System.out.println(\"Informative: timeout exceeded (no action required: most probably just \" +\n        \" because the test machine is slower than usual):  \" +\n        \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded));\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestTimeout(boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestTimeout(boolean,boolean).mjava","sourceNew":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    Collector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search: must get exception\n    TimeExceededException timeoutException = expectThrows(TimeExceededException.class, () -> {\n      search(tlCollector);\n    });\n\n    // greediness affect last doc collected\n    int exceptionDoc = timeoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n\n    // exceptionDoc == -1 means we hit the timeout in getLeafCollector:\n    if (exceptionDoc != -1) {\n      assertTrue( \"doc collected at timeout must be > 0! or == -1 but was: \" + exceptionDoc, exceptionDoc > 0);\n      if (greedy) {\n        assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n        assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n      } else {\n        assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n      }\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timeoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timeoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-counterThread.getResolution()),\n        timeoutException.getTimeElapsed() > TIME_ALLOWED-counterThread.getResolution());\n    // b) Not too late.\n    //    This part is problematic in a busy test system, so we just print a warning.\n    //    We already verified that a timeout occurred, we just can't be picky about how long it took.\n    if (timeoutException.getTimeElapsed() > maxTime(multiThreaded)) {\n      System.out.println(\"Informative: timeout exceeded (no action required: most probably just \" +\n        \" because the test machine is slower than usual):  \" +\n        \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timeoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timeoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded));\n    }\n  }\n\n","sourceOld":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    Collector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeExceededException timeoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeExceededException x) {\n      timeoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timeoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timeoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n\n    // exceptionDoc == -1 means we hit the timeout in getLeafCollector:\n    if (exceptionDoc != -1) {\n      assertTrue( \"doc collected at timeout must be > 0! or == -1 but was: \" + exceptionDoc, exceptionDoc > 0);\n      if (greedy) {\n        assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n        assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n      } else {\n        assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n      }\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timeoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timeoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-counterThread.getResolution()),\n        timeoutException.getTimeElapsed() > TIME_ALLOWED-counterThread.getResolution());\n    // b) Not too late.\n    //    This part is problematic in a busy test system, so we just print a warning.\n    //    We already verified that a timeout occurred, we just can't be picky about how long it took.\n    if (timeoutException.getTimeElapsed() > maxTime(multiThreaded)) {\n      System.out.println(\"Informative: timeout exceeded (no action required: most probably just \" +\n        \" because the test machine is slower than usual):  \" +\n        \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timeoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timeoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded));\n    }\n  }\n\n","bugFix":["550cf6504b217adb129a3ce192d5b5a1caa6fd88","64714133cf5ec732e3bbceee63351bb9af0117dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2b632a6d6dda760b0fb5e1f0626881c08c56d12f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"550cf6504b217adb129a3ce192d5b5a1caa6fd88":["2b632a6d6dda760b0fb5e1f0626881c08c56d12f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["550cf6504b217adb129a3ce192d5b5a1caa6fd88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"2b632a6d6dda760b0fb5e1f0626881c08c56d12f":["550cf6504b217adb129a3ce192d5b5a1caa6fd88"],"550cf6504b217adb129a3ce192d5b5a1caa6fd88":["05fe562aa248790944d43cdd478f512572835ba0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2b632a6d6dda760b0fb5e1f0626881c08c56d12f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}