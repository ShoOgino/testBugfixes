{"path":"lucene/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#newTerm(int).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#newTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(int).mjava","sourceNew":"  @Override\n  void newTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":"  @Override\n  void newTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#newTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#newTerm(int).mjava","sourceNew":"  @Override\n  void newTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":"  @Override\n  void newTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID] = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}