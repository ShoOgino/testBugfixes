{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/DeflateWithPresetDictCompressionMode.DeflateWithPresetDictDecompressor#doDecompress(DataInput,Inflater,BytesRef).mjava","commits":[{"id":"9aefce86de8b17eed91ab011fb54d704d91102ef","date":1599128224,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/DeflateWithPresetDictCompressionMode.DeflateWithPresetDictDecompressor#doDecompress(DataInput,Inflater,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat.DeflateWithPresetDictDecompressor#doDecompress(DataInput,Inflater,BytesRef).mjava","sourceNew":"    private void doDecompress(DataInput in, Inflater decompressor, BytesRef bytes) throws IOException {\n      final int compressedLength = in.readVInt();\n      if (compressedLength == 0) {\n        return;\n      }\n      // pad with extra \"dummy byte\": see javadocs for using Inflater(true)\n      // we do it for compliance, but it's unnecessary for years in zlib.\n      final int paddedLength = compressedLength + 1;\n      compressed = ArrayUtil.grow(compressed, paddedLength);\n      in.readBytes(compressed, 0, compressedLength);\n      compressed[compressedLength] = 0; // explicitly set dummy byte to 0\n\n      // extra \"dummy byte\"\n      decompressor.setInput(compressed, 0, paddedLength);\n      try {\n        bytes.length += decompressor.inflate(bytes.bytes, bytes.length, bytes.bytes.length - bytes.length);\n      } catch (DataFormatException e) {\n        throw new IOException(e);\n      }\n      if (decompressor.finished() == false) {\n        throw new CorruptIndexException(\"Invalid decoder state: needsInput=\" + decompressor.needsInput()\n        + \", needsDict=\" + decompressor.needsDictionary(), in);\n      }\n    }\n\n","sourceOld":"    private void doDecompress(DataInput in, Inflater decompressor, BytesRef bytes) throws IOException {\n      final int compressedLength = in.readVInt();\n      if (compressedLength == 0) {\n        return;\n      }\n      // pad with extra \"dummy byte\": see javadocs for using Inflater(true)\n      // we do it for compliance, but it's unnecessary for years in zlib.\n      final int paddedLength = compressedLength + 1;\n      compressed = ArrayUtil.grow(compressed, paddedLength);\n      in.readBytes(compressed, 0, compressedLength);\n      compressed[compressedLength] = 0; // explicitly set dummy byte to 0\n\n      // extra \"dummy byte\"\n      decompressor.setInput(compressed, 0, paddedLength);\n      try {\n        bytes.length += decompressor.inflate(bytes.bytes, bytes.length, bytes.bytes.length - bytes.length);\n      } catch (DataFormatException e) {\n        throw new IOException(e);\n      }\n      if (decompressor.finished() == false) {\n        throw new CorruptIndexException(\"Invalid decoder state: needsInput=\" + decompressor.needsInput()\n        + \", needsDict=\" + decompressor.needsDictionary(), in);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aefce86de8b17eed91ab011fb54d704d91102ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aefce86de8b17eed91ab011fb54d704d91102ef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9aefce86de8b17eed91ab011fb54d704d91102ef"],"9aefce86de8b17eed91ab011fb54d704d91102ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}