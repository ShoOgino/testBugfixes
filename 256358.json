{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEvaluator(StreamExpression).mjava","commits":[{"id":"88073e8783f450d4c0218decc2f001a1ac2c7e7c","date":1486705191,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEvaluator(StreamExpression).mjava","pathOld":"/dev/null","sourceNew":"  public StreamEvaluator constructEvaluator(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)){\n        return (StreamEvaluator)createInstance(functionNames.get(function), new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid evaluator expression %s - function '%s' is unknown (not mapped to a valid StreamEvaluator)\", expression, expression.getFunctionName()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEvaluator(StreamExpression).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEvaluator(StreamExpression).mjava","sourceNew":"  public org.apache.solr.client.solrj.io.eval.StreamEvaluator constructEvaluator(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)){\n        return (org.apache.solr.client.solrj.io.eval.StreamEvaluator)createInstance(functionNames.get(function), new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid evaluator expression %s - function '%s' is unknown (not mapped to a valid StreamEvaluator)\", expression, expression.getFunctionName()));\n  }\n\n","sourceOld":"  public StreamEvaluator constructEvaluator(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)){\n        return (StreamEvaluator)createInstance(functionNames.get(function), new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid evaluator expression %s - function '%s' is unknown (not mapped to a valid StreamEvaluator)\", expression, expression.getFunctionName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEvaluator(StreamExpression).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEvaluator(StreamExpression).mjava","sourceNew":"  public org.apache.solr.client.solrj.io.eval.StreamEvaluator constructEvaluator(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)){\n        return (org.apache.solr.client.solrj.io.eval.StreamEvaluator)createInstance(functionNames.get(function), new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid evaluator expression %s - function '%s' is unknown (not mapped to a valid StreamEvaluator)\", expression, expression.getFunctionName()));\n  }\n\n","sourceOld":"  public StreamEvaluator constructEvaluator(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)){\n        return (StreamEvaluator)createInstance(functionNames.get(function), new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid evaluator expression %s - function '%s' is unknown (not mapped to a valid StreamEvaluator)\", expression, expression.getFunctionName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEvaluator(StreamExpression).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEvaluator(StreamExpression).mjava","sourceNew":"  public org.apache.solr.client.solrj.io.eval.StreamEvaluator constructEvaluator(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)){\n        return (org.apache.solr.client.solrj.io.eval.StreamEvaluator)createInstance(functionNames.get(function), new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid evaluator expression %s - function '%s' is unknown (not mapped to a valid StreamEvaluator)\", expression, expression.getFunctionName()));\n  }\n\n","sourceOld":"  public StreamEvaluator constructEvaluator(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)){\n        return (StreamEvaluator)createInstance(functionNames.get(function), new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid evaluator expression %s - function '%s' is unknown (not mapped to a valid StreamEvaluator)\", expression, expression.getFunctionName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60c716cf818aff6857d8490cd0fb8b5aa432408f","date":1577074826,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEvaluator(StreamExpression).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEvaluator(StreamExpression).mjava","sourceNew":"  public org.apache.solr.client.solrj.io.eval.StreamEvaluator constructEvaluator(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(function);\n\n    if(classSupplier != null){\n      Class<? extends Expressible> clazz = classSupplier.get();\n      if(Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)){\n        return (org.apache.solr.client.solrj.io.eval.StreamEvaluator)createInstance(clazz, new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid evaluator expression %s - function '%s' is unknown (not mapped to a valid StreamEvaluator)\", expression, expression.getFunctionName()));\n  }\n\n","sourceOld":"  public org.apache.solr.client.solrj.io.eval.StreamEvaluator constructEvaluator(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)){\n        return (org.apache.solr.client.solrj.io.eval.StreamEvaluator)createInstance(functionNames.get(function), new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid evaluator expression %s - function '%s' is unknown (not mapped to a valid StreamEvaluator)\", expression, expression.getFunctionName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","date":1577276097,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEvaluator(StreamExpression).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEvaluator(StreamExpression).mjava","sourceNew":"  public org.apache.solr.client.solrj.io.eval.StreamEvaluator constructEvaluator(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(function);\n\n    if(classSupplier != null){\n      Class<? extends Expressible> clazz = classSupplier.get();\n      if(Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)){\n        return (org.apache.solr.client.solrj.io.eval.StreamEvaluator)createInstance(clazz, new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid evaluator expression %s - function '%s' is unknown (not mapped to a valid StreamEvaluator)\", expression, expression.getFunctionName()));\n  }\n\n","sourceOld":"  public org.apache.solr.client.solrj.io.eval.StreamEvaluator constructEvaluator(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)){\n        return (org.apache.solr.client.solrj.io.eval.StreamEvaluator)createInstance(functionNames.get(function), new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid evaluator expression %s - function '%s' is unknown (not mapped to a valid StreamEvaluator)\", expression, expression.getFunctionName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEvaluator(StreamExpression).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEvaluator(StreamExpression).mjava","sourceNew":"  public org.apache.solr.client.solrj.io.eval.StreamEvaluator constructEvaluator(StreamExpression expression) throws IOException {\n    String function = expression.getFunctionName();\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(function);\n\n    if (classSupplier != null) {\n      Class<? extends Expressible> clazz = classSupplier.get();\n      if (Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)) {\n        return (org.apache.solr.client.solrj.io.eval.StreamEvaluator)createInstance(clazz, new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT, \"Invalid evaluator expression %s - function '%s' is unknown (not mapped to a valid StreamEvaluator)\", expression, expression.getFunctionName()));\n  }\n\n","sourceOld":"  public org.apache.solr.client.solrj.io.eval.StreamEvaluator constructEvaluator(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(function);\n\n    if(classSupplier != null){\n      Class<? extends Expressible> clazz = classSupplier.get();\n      if(Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)){\n        return (org.apache.solr.client.solrj.io.eval.StreamEvaluator)createInstance(clazz, new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT,\"Invalid evaluator expression %s - function '%s' is unknown (not mapped to a valid StreamEvaluator)\", expression, expression.getFunctionName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEvaluator(StreamExpression).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEvaluator(StreamExpression).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  public org.apache.solr.client.solrj.io.eval.StreamEvaluator constructEvaluator(StreamExpression expression) throws IOException {\n    String function = expression.getFunctionName();\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(function);\n\n    if (classSupplier != null) {\n      Class<? extends Expressible> clazz = classSupplier.get();\n      if (Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)) {\n        return (org.apache.solr.client.solrj.io.eval.StreamEvaluator)createInstance(clazz, new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT, \"Invalid evaluator expression %s - function '%s' is unknown (not mapped to a valid StreamEvaluator)\", expression, expression.getFunctionName()));\n  }\n\n","sourceOld":"  public org.apache.solr.client.solrj.io.eval.StreamEvaluator constructEvaluator(StreamExpression expression) throws IOException {\n    String function = expression.getFunctionName();\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(function);\n\n    if (classSupplier != null) {\n      Class<? extends Expressible> clazz = classSupplier.get();\n      if (Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)) {\n        return (org.apache.solr.client.solrj.io.eval.StreamEvaluator)createInstance(clazz, new Class[]{ StreamExpression.class, StreamFactory.class }, new Object[]{ expression, this});\n      }\n    }\n    \n    throw new IOException(String.format(Locale.ROOT, \"Invalid evaluator expression %s - function '%s' is unknown (not mapped to a valid StreamEvaluator)\", expression, expression.getFunctionName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60c716cf818aff6857d8490cd0fb8b5aa432408f":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","60c716cf818aff6857d8490cd0fb8b5aa432408f"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["88073e8783f450d4c0218decc2f001a1ac2c7e7c","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["88073e8783f450d4c0218decc2f001a1ac2c7e7c","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["804a8d5358fe7b7563b85ee7838714d720b89272"],"804a8d5358fe7b7563b85ee7838714d720b89272":["60c716cf818aff6857d8490cd0fb8b5aa432408f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"60c716cf818aff6857d8490cd0fb8b5aa432408f":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","804a8d5358fe7b7563b85ee7838714d720b89272"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":[],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["60c716cf818aff6857d8490cd0fb8b5aa432408f","96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"804a8d5358fe7b7563b85ee7838714d720b89272":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}