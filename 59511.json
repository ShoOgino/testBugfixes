{"path":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"/dev/null","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private void initAutomata(int maxDistance) {\n    if (automata == null && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(term.text().substring(realPrefixLength));\n      automata = new ArrayList<Automaton>(maxDistance);\n      runAutomata = new ArrayList<RunAutomaton>(maxDistance);\n      for (int i = 0; i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n              term.text().substring(0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        automata.add(a);\n        runAutomata.add(new RunAutomaton(a));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private void initAutomata(int maxDistance) {\n    if (runAutomata == null && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(new String(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      runAutomata = new ArrayList<ByteRunAutomaton>(maxDistance);\n      for (int i = 0; i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n              new String(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new ByteRunAutomaton(a));\n      }\n    }\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private void initAutomata(int maxDistance) {\n    if (automata == null && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(term.text().substring(realPrefixLength));\n      automata = new ArrayList<Automaton>(maxDistance);\n      runAutomata = new ArrayList<RunAutomaton>(maxDistance);\n      for (int i = 0; i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n              term.text().substring(0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        automata.add(a);\n        runAutomata.add(new RunAutomaton(a));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private void initAutomata(int maxDistance) {\n    if (runAutomata == null && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      runAutomata = new ArrayList<ByteRunAutomaton>(maxDistance);\n      for (int i = 0; i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n              UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new ByteRunAutomaton(a));\n      }\n    }\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private void initAutomata(int maxDistance) {\n    if (runAutomata == null && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(new String(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      runAutomata = new ArrayList<ByteRunAutomaton>(maxDistance);\n      for (int i = 0; i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n              new String(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new ByteRunAutomaton(a));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe4a3ebf5c1e3884dde4bbfc98129de70d678ccc","date":1279454901,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private void initAutomata(int maxDistance) {\n    if (runAutomata == null && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      final ByteRunAutomaton[] ra = new ByteRunAutomaton[maxDistance + 1];\n      for (int i = 0; i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n              UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        ra[i] = new ByteRunAutomaton(a);\n      }\n      runAutomata = Arrays.asList(ra);\n    }\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private void initAutomata(int maxDistance) {\n    if (runAutomata == null && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      runAutomata = new ArrayList<ByteRunAutomaton>(maxDistance);\n      for (int i = 0; i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n              UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new ByteRunAutomaton(a));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private void initAutomata(int maxDistance) {\n    if (runAutomata == null && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      final ByteRunAutomaton[] ra = new ByteRunAutomaton[maxDistance + 1];\n      for (int i = 0; i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n              UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        ra[i] = new ByteRunAutomaton(a);\n      }\n      runAutomata = Arrays.asList(ra);\n    }\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private void initAutomata(int maxDistance) {\n    if (runAutomata == null && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      runAutomata = new ArrayList<ByteRunAutomaton>(maxDistance);\n      for (int i = 0; i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n              UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new ByteRunAutomaton(a));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee442305cb676e72c58d48df25e052c4602fc7c1","date":1287577314,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<ByteRunAutomaton> initAutomata(int maxDistance) {\n    final List<ByteRunAutomaton> runAutomata = dfaAtt.automata();\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new ByteRunAutomaton(a));\n      }\n    }\n    return runAutomata;\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private void initAutomata(int maxDistance) {\n    if (runAutomata == null && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      final ByteRunAutomaton[] ra = new ByteRunAutomaton[maxDistance + 1];\n      for (int i = 0; i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n              UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        ra[i] = new ByteRunAutomaton(a);\n      }\n      runAutomata = Arrays.asList(ra);\n    }\n  }\n\n","bugFix":null,"bugIntro":["95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<ByteRunAutomaton> initAutomata(int maxDistance) {\n    final List<ByteRunAutomaton> runAutomata = dfaAtt.automata();\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new ByteRunAutomaton(a));\n      }\n    }\n    return runAutomata;\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private void initAutomata(int maxDistance) {\n    if (runAutomata == null && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      final ByteRunAutomaton[] ra = new ByteRunAutomaton[maxDistance + 1];\n      for (int i = 0; i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n              UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        ra[i] = new ByteRunAutomaton(a);\n      }\n      runAutomata = Arrays.asList(ra);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<ByteRunAutomaton> initAutomata(int maxDistance) {\n    final List<ByteRunAutomaton> runAutomata = dfaAtt.automata();\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new ByteRunAutomaton(a));\n      }\n    }\n    return runAutomata;\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private void initAutomata(int maxDistance) {\n    if (runAutomata == null && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      final ByteRunAutomaton[] ra = new ByteRunAutomaton[maxDistance + 1];\n      for (int i = 0; i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n              UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        ra[i] = new ByteRunAutomaton(a);\n      }\n      runAutomata = Arrays.asList(ra);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95f7ab6c9bc005d456da65d8d74c5338ffc031aa","date":1297016220,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new CompiledAutomaton(a, true));\n      }\n    }\n    return runAutomata;\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<ByteRunAutomaton> initAutomata(int maxDistance) {\n    final List<ByteRunAutomaton> runAutomata = dfaAtt.automata();\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new ByteRunAutomaton(a));\n      }\n    }\n    return runAutomata;\n  }\n\n","bugFix":["ee442305cb676e72c58d48df25e052c4602fc7c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new CompiledAutomaton(a, true));\n      }\n    }\n    return runAutomata;\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<ByteRunAutomaton> initAutomata(int maxDistance) {\n    final List<ByteRunAutomaton> runAutomata = dfaAtt.automata();\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new ByteRunAutomaton(a));\n      }\n    }\n    return runAutomata;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new CompiledAutomaton(a, true));\n      }\n    }\n    return runAutomata;\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<ByteRunAutomaton> initAutomata(int maxDistance) {\n    final List<ByteRunAutomaton> runAutomata = dfaAtt.automata();\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new ByteRunAutomaton(a));\n      }\n    }\n    return runAutomata;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        //System.out.println(\"compute automaton n=\" + i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new CompiledAutomaton(a, true));\n      }\n    }\n    return runAutomata;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab","date":1324934316,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength), transpositions);\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        //System.out.println(\"compute automaton n=\" + i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength));\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        //System.out.println(\"compute automaton n=\" + i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#initAutomata(int).mjava","sourceNew":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength), transpositions);\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        //System.out.println(\"compute automaton n=\" + i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","sourceOld":"  /** initialize levenshtein DFAs up to maxDistance, if possible */\n  private List<CompiledAutomaton> initAutomata(int maxDistance) {\n    final List<CompiledAutomaton> runAutomata = dfaAtt.automata();\n    //System.out.println(\"cached automata size: \" + runAutomata.size());\n    if (runAutomata.size() <= maxDistance && \n        maxDistance <= LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      LevenshteinAutomata builder = \n        new LevenshteinAutomata(UnicodeUtil.newString(termText, realPrefixLength, termText.length - realPrefixLength), transpositions);\n\n      for (int i = runAutomata.size(); i <= maxDistance; i++) {\n        Automaton a = builder.toAutomaton(i);\n        //System.out.println(\"compute automaton n=\" + i);\n        // constant prefix\n        if (realPrefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(\n            UnicodeUtil.newString(termText, 0, realPrefixLength));\n          a = BasicOperations.concatenate(prefix, a);\n        }\n        runAutomata.add(new CompiledAutomaton(a, true, false));\n      }\n    }\n    return runAutomata;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe4a3ebf5c1e3884dde4bbfc98129de70d678ccc":["2aafd88401639311b0404e67c94e829e123a0e45"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2aafd88401639311b0404e67c94e829e123a0e45":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5f4e87790277826a2aea119328600dfb07761f32":["2aafd88401639311b0404e67c94e829e123a0e45","fe4a3ebf5c1e3884dde4bbfc98129de70d678ccc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","ee442305cb676e72c58d48df25e052c4602fc7c1"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"95f7ab6c9bc005d456da65d8d74c5338ffc031aa":["ee442305cb676e72c58d48df25e052c4602fc7c1"],"ee442305cb676e72c58d48df25e052c4602fc7c1":["fe4a3ebf5c1e3884dde4bbfc98129de70d678ccc"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["fe4a3ebf5c1e3884dde4bbfc98129de70d678ccc","ee442305cb676e72c58d48df25e052c4602fc7c1"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"fe4a3ebf5c1e3884dde4bbfc98129de70d678ccc":["5f4e87790277826a2aea119328600dfb07761f32","ee442305cb676e72c58d48df25e052c4602fc7c1","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["2aafd88401639311b0404e67c94e829e123a0e45"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"2aafd88401639311b0404e67c94e829e123a0e45":["fe4a3ebf5c1e3884dde4bbfc98129de70d678ccc","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"ee442305cb676e72c58d48df25e052c4602fc7c1":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","95f7ab6c9bc005d456da65d8d74c5338ffc031aa","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"95f7ab6c9bc005d456da65d8d74c5338ffc031aa":["60ba444201d2570214b6fcf1d15600dc1a01f548","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}