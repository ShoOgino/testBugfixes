{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getShorts(AtomicReader,String,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getShorts(AtomicReader,String,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCache#getShorts(AtomicReader,String,boolean).mjava","sourceNew":"  /** Checks the internal cache for an appropriate entry, and if none is\n   * found, reads the terms in <code>field</code> as shorts and returns an array\n   * of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * @param reader  Used to get field values.\n   * @param field   Which field contains the shorts.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException  If any error occurs.\n   */\n  public short[] getShorts (AtomicReader reader, String field, boolean setDocsWithField)\n  throws IOException;\n\n","sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is\n   * found, reads the terms in <code>field</code> as shorts and returns an array\n   * of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * @param reader  Used to get field values.\n   * @param field   Which field contains the shorts.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException  If any error occurs.\n   */\n  public short[] getShorts (AtomicReader reader, String field, boolean setDocsWithField)\n  throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f45457a742a53533c348c4b990b1c579ff364467","date":1353197071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getShorts(AtomicReader,String,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getShorts(AtomicReader,String,boolean).mjava","sourceNew":"  /** Checks the internal cache for an appropriate entry, and if none is\n   * found, reads the terms in <code>field</code> as shorts and returns an array\n   * of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * @param reader  Used to get field values.\n   * @param field   Which field contains the shorts.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException  If any error occurs.\n   */\n  public Shorts getShorts (AtomicReader reader, String field, boolean setDocsWithField) throws IOException;\n\n","sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is\n   * found, reads the terms in <code>field</code> as shorts and returns an array\n   * of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * @param reader  Used to get field values.\n   * @param field   Which field contains the shorts.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException  If any error occurs.\n   */\n  public short[] getShorts (AtomicReader reader, String field, boolean setDocsWithField)\n  throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getShorts(AtomicReader,String,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getShorts(AtomicReader,String,boolean).mjava","sourceNew":"  /** Checks the internal cache for an appropriate entry, and if none is\n   * found, reads the terms in <code>field</code> as shorts and returns an array\n   * of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * @param reader  Used to get field values.\n   * @param field   Which field contains the shorts.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException  If any error occurs.\n   */\n  public Shorts getShorts (AtomicReader reader, String field, boolean setDocsWithField) throws IOException;\n\n","sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is\n   * found, reads the terms in <code>field</code> as shorts and returns an array\n   * of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * @param reader  Used to get field values.\n   * @param field   Which field contains the shorts.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException  If any error occurs.\n   */\n  public short[] getShorts (AtomicReader reader, String field, boolean setDocsWithField)\n  throws IOException;\n\n","bugFix":["3f74570911bfdb9f7b01948745dcd67c69676c0e","da6d5ac19a80d65b1e864251f155d30960353b7e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getShorts(AtomicReader,String,boolean).mjava","sourceNew":null,"sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is\n   * found, reads the terms in <code>field</code> as shorts and returns an array\n   * of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * @param reader  Used to get field values.\n   * @param field   Which field contains the shorts.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException  If any error occurs.\n   */\n  public Shorts getShorts (AtomicReader reader, String field, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getShorts(AtomicReader,String,boolean).mjava","sourceNew":null,"sourceOld":"  /** Checks the internal cache for an appropriate entry, and if none is\n   * found, reads the terms in <code>field</code> as shorts and returns an array\n   * of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * @param reader  Used to get field values.\n   * @param field   Which field contains the shorts.\n   * @param setDocsWithField  If true then {@link #getDocsWithField} will\n   *        also be computed and stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException  If any error occurs.\n   */\n  public Shorts getShorts (AtomicReader reader, String field, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f45457a742a53533c348c4b990b1c579ff364467"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["d4d69c535930b5cce125cff868d40f6373dc27d4","59a0020b413d44dd79d85d7a66ed5004265fb453"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"f45457a742a53533c348c4b990b1c579ff364467":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59a0020b413d44dd79d85d7a66ed5004265fb453"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","f45457a742a53533c348c4b990b1c579ff364467"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f45457a742a53533c348c4b990b1c579ff364467":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}