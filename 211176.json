{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","commits":[{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    this.name = name;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexOptions != null) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = null;\n    }\n    this.dvGen = dvGen;\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = null;\n    }\n    this.dvGen = dvGen;\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    this.name = name;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexOptions != null) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = null;\n    }\n    this.dvGen = dvGen;\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = null;\n    }\n    this.dvGen = dvGen;\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    if (docValues == null) {\n      throw new NullPointerException(\"DocValuesType cannot be null\");\n    }\n    if (indexOptions == null) {\n      throw new NullPointerException(\"IndexOptions cannot be null\");\n    }\n    this.name = name;\n    this.number = number;\n    this.docValueType = docValues;\n    this.indexOptions = indexOptions;\n    if (indexOptions != IndexOptions.NO) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    this.name = name;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexOptions != null) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = null;\n    }\n    this.dvGen = dvGen;\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1edd0fe3b3915bf01160dfd544ab0c18cb77e45","date":1414773150,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    if (docValues == null) {\n      throw new NullPointerException(\"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (indexOptions == null) {\n      throw new NullPointerException(\"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    this.name = name;\n    this.number = number;\n    this.docValuesType = docValues;\n    this.indexOptions = indexOptions;\n    if (indexOptions != IndexOptions.NO) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    if (docValues == null) {\n      throw new NullPointerException(\"DocValuesType cannot be null\");\n    }\n    if (indexOptions == null) {\n      throw new NullPointerException(\"IndexOptions cannot be null\");\n    }\n    this.name = name;\n    this.number = number;\n    this.docValueType = docValues;\n    this.indexOptions = indexOptions;\n    if (indexOptions != IndexOptions.NO) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    if (docValues == null) {\n      throw new NullPointerException(\"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (indexOptions == null) {\n      throw new NullPointerException(\"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    this.name = name;\n    this.number = number;\n    this.docValuesType = docValues;\n    this.indexOptions = indexOptions;\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    if (docValues == null) {\n      throw new NullPointerException(\"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (indexOptions == null) {\n      throw new NullPointerException(\"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    this.name = name;\n    this.number = number;\n    this.docValuesType = docValues;\n    this.indexOptions = indexOptions;\n    if (indexOptions != IndexOptions.NO) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79700663e164dece87bed4adfd3e28bab6cb1385","date":1425241849,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    if (docValues == null) {\n      throw new NullPointerException(\"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (indexOptions == null) {\n      throw new NullPointerException(\"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    this.name = name;\n    this.number = number;\n    this.docValuesType = docValues;\n    this.indexOptions = indexOptions;\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4","ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"299a2348fa24151d150182211b6208a38e5e3450","date":1425304608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    if (docValues == null) {\n      throw new NullPointerException(\"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (indexOptions == null) {\n      throw new NullPointerException(\"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    this.name = name;\n    this.number = number;\n    this.docValuesType = docValues;\n    this.indexOptions = indexOptions;\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    if (docValues == null) {\n      throw new NullPointerException(\"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    if (indexOptions == null) {\n      throw new NullPointerException(\"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    }\n    this.name = name;\n    this.number = number;\n    this.docValuesType = docValues;\n    this.indexOptions = indexOptions;\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String]).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n                   boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n                   long dvGen, Map<String,String> attributes, int dimensionCount, int dimensionNumBytes) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.dimensionCount = dimensionCount;\n    this.dimensionNumBytes = dimensionNumBytes;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, \n      boolean storePayloads, IndexOptions indexOptions, DocValuesType docValues,\n      long dvGen, Map<String,String> attributes) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType cannot be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions cannot be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f95ce1375367b92d411a06175eab3915fe93c6bc","79700663e164dece87bed4adfd3e28bab6cb1385"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3184874f7f3aca850248483485b4995343066875"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["79700663e164dece87bed4adfd3e28bab6cb1385"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79700663e164dece87bed4adfd3e28bab6cb1385":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"d1edd0fe3b3915bf01160dfd544ab0c18cb77e45":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"299a2348fa24151d150182211b6208a38e5e3450":["f95ce1375367b92d411a06175eab3915fe93c6bc","79700663e164dece87bed4adfd3e28bab6cb1385"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["d1edd0fe3b3915bf01160dfd544ab0c18cb77e45"],"3184874f7f3aca850248483485b4995343066875":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","3184874f7f3aca850248483485b4995343066875"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"79700663e164dece87bed4adfd3e28bab6cb1385":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ca792c26af46bd6c4a08d81117c60440cf6a7e3d","299a2348fa24151d150182211b6208a38e5e3450"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["d1edd0fe3b3915bf01160dfd544ab0c18cb77e45"],"d1edd0fe3b3915bf01160dfd544ab0c18cb77e45":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"299a2348fa24151d150182211b6208a38e5e3450":[],"f95ce1375367b92d411a06175eab3915fe93c6bc":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","79700663e164dece87bed4adfd3e28bab6cb1385","299a2348fa24151d150182211b6208a38e5e3450"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","2bb2842e561df4e8e9ad89010605fc86ac265465"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0a22eafe3f72a4c2945eaad9547e6c78816978f4","299a2348fa24151d150182211b6208a38e5e3450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}