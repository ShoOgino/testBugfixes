{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","sourceNew":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, format, docStoreOffset, (IndexInput)fieldsStream.clone(), (IndexInput)indexStream.clone());\n  }\n\n","sourceOld":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, format, docStoreOffset, (IndexInput)fieldsStream.clone(), (IndexInput)indexStream.clone());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1538bc2b1cdbe17dacb2c1e6d11a8dc7a18c6d30","date":1327936772,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","sourceNew":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, (IndexInput)fieldsStream.clone(), (IndexInput)indexStream.clone());\n  }\n\n","sourceOld":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, format, docStoreOffset, (IndexInput)fieldsStream.clone(), (IndexInput)indexStream.clone());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296df632fd63421ea20756fa11ad36fbc6f4c8a9","date":1327957998,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","sourceNew":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, (IndexInput)fieldsStream.clone(), (IndexInput)indexStream.clone());\n  }\n\n","sourceOld":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, format, docStoreOffset, (IndexInput)fieldsStream.clone(), (IndexInput)indexStream.clone());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","sourceNew":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, (IndexInput)fieldsStream.clone(), (IndexInput)indexStream.clone());\n  }\n\n","sourceOld":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, format, docStoreOffset, (IndexInput)fieldsStream.clone(), (IndexInput)indexStream.clone());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#clone().mjava","sourceNew":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, (IndexInput)fieldsStream.clone(), (IndexInput)indexStream.clone());\n  }\n\n","sourceOld":"  /** Returns a cloned FieldsReader that shares open\n   *  IndexInputs with the original one.  It is the caller's\n   *  job not to close the original FieldsReader until all\n   *  clones are called (eg, currently SegmentReader manages\n   *  this logic). */\n  @Override\n  public Lucene40StoredFieldsReader clone() {\n    ensureOpen();\n    return new Lucene40StoredFieldsReader(fieldInfos, numTotalDocs, size, (IndexInput)fieldsStream.clone(), (IndexInput)indexStream.clone());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"410e066f093e407222d9681429d209084e783149":["a0ae5e3ed1232483b7b8a014f175a5fe43595982","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["a0ae5e3ed1232483b7b8a014f175a5fe43595982","1538bc2b1cdbe17dacb2c1e6d11a8dc7a18c6d30"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1538bc2b1cdbe17dacb2c1e6d11a8dc7a18c6d30":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"410e066f093e407222d9681429d209084e783149":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["410e066f093e407222d9681429d209084e783149","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["410e066f093e407222d9681429d209084e783149","296df632fd63421ea20756fa11ad36fbc6f4c8a9","1538bc2b1cdbe17dacb2c1e6d11a8dc7a18c6d30"],"1538bc2b1cdbe17dacb2c1e6d11a8dc7a18c6d30":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["410e066f093e407222d9681429d209084e783149","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}