{"path":"lucene/src/java/org/apache/lucene/search/function/NumericIndexDocValueSource#getValues(AtomicReaderContext).mjava","commits":[{"id":"50abb735a84cec6e0073e474a428ebac1265a397","date":1307113865,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/function/NumericIndexDocValueSource#getValues(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(AtomicReaderContext context) throws IOException {\n    final IndexDocValues.Source source = context.reader.docValues(field)\n        .getSource();\n    ValueType type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/function/NumericIndexDocValueSource#getValues(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(AtomicReaderContext context) throws IOException {\n    final IndexDocValues.Source source = context.reader.docValues(field)\n        .getSource();\n    ValueType type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/function/NumericIndexDocValueSource#getValues(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(AtomicReaderContext context) throws IOException {\n    final IndexDocValues.Source source = context.reader.docValues(field)\n        .getSource();\n    ValueType type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/function/NumericIndexDocValueSource#getValues(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/function/NumericIndexDocValueSource#getValues(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(AtomicReaderContext context) throws IOException {\n    final IndexDocValues.Source source = context.reader.docValues(field)\n        .getSource();\n    ValueType type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(AtomicReaderContext context) throws IOException {\n    final IndexDocValues.Source source = context.reader.docValues(field)\n        .getSource();\n    ValueType type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/function/NumericIndexDocValueSource#getValues(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/function/NumericIndexDocValueSource#getValues(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(AtomicReaderContext context) throws IOException {\n    final IndexDocValues.Source source = context.reader.docValues(field)\n        .getSource();\n    ValueType type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(AtomicReaderContext context) throws IOException {\n    final IndexDocValues.Source source = context.reader.docValues(field)\n        .getSource();\n    ValueType type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","date":1309476031,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/function/NumericIndexDocValueSource#getValues(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexDocValues.Source source = readerContext.reader.docValues(field)\n        .getSource();\n    ValueType type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(AtomicReaderContext context) throws IOException {\n    final IndexDocValues.Source source = context.reader.docValues(field)\n        .getSource();\n    ValueType type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/function/NumericIndexDocValueSource#getValues(AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValues getValues(AtomicReaderContext context) throws IOException {\n    final IndexDocValues.Source source = context.reader.docValues(field)\n        .getSource();\n    ValueType type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/function/NumericIndexDocValueSource#getValues(AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValues getValues(AtomicReaderContext context) throws IOException {\n    final IndexDocValues.Source source = context.reader.docValues(field)\n        .getSource();\n    ValueType type = source.type();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      return new DocValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case INTS:\n      return new DocValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","50abb735a84cec6e0073e474a428ebac1265a397"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"50abb735a84cec6e0073e474a428ebac1265a397":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","93c59ad5034eecd863f267bd75e1df7b8a51e427","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","50abb735a84cec6e0073e474a428ebac1265a397"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"50abb735a84cec6e0073e474a428ebac1265a397":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}