{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","sourceNew":"  @Test\n  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    // basic test if fields were filled in\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    // assertTrue(sug.getOriginalFrequency() > 0);\n\n    // Hmmm... the API for SpellCheckResponse could be nicer:\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    // basic test if fields were filled in\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    // assertTrue(sug.getOriginalFrequency() > 0);\n\n    // Hmmm... the API for SpellCheckResponse could be nicer:\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","sourceNew":"  @Test\n  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    // basic test if fields were filled in\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    // assertTrue(sug.getOriginalFrequency() > 0);\n\n    // Hmmm... the API for SpellCheckResponse could be nicer:\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    // basic test if fields were filled in\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    // assertTrue(sug.getOriginalFrequency() > 0);\n\n    // Hmmm... the API for SpellCheckResponse could be nicer:\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","sourceNew":"  @Test\n  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    // basic test if fields were filled in\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    // assertTrue(sug.getOriginalFrequency() > 0);\n\n    // Hmmm... the API for SpellCheckResponse could be nicer:\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    // basic test if fields were filled in\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    // assertTrue(sug.getOriginalFrequency() > 0);\n\n    // Hmmm... the API for SpellCheckResponse could be nicer:\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1034497e9ecad8fcbefaa3b8abeac94f06daa15","date":1338836491,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","sourceNew":"  @Test\n  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"name:samsang\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    //query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    // basic test if fields were filled in\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    // assertTrue(sug.getOriginalFrequency() > 0);\n\n    // Hmmm... the API for SpellCheckResponse could be nicer:\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    // basic test if fields were filled in\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    // assertTrue(sug.getOriginalFrequency() > 0);\n\n    // Hmmm... the API for SpellCheckResponse could be nicer:\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56d78974d33c1244e0810e0dc8f1c6371faceac9","date":1338918242,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","sourceNew":"  @Test\n  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    // basic test if fields were filled in\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    // assertTrue(sug.getOriginalFrequency() > 0);\n\n    // Hmmm... the API for SpellCheckResponse could be nicer:\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"name:samsang\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    //query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    // basic test if fields were filled in\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    // assertTrue(sug.getOriginalFrequency() > 0);\n\n    // Hmmm... the API for SpellCheckResponse could be nicer:\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse_Extended().mjava","sourceNew":"  @Test\n  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    client.add(doc);\n    client.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(client).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    // basic test if fields were filled in\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    // assertTrue(sug.getOriginalFrequency() > 0);\n\n    // Hmmm... the API for SpellCheckResponse could be nicer:\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckResponse_Extended() throws Exception {\n    getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_EXTENDED_RESULTS, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n\n    SpellCheckResponse.Suggestion sug = response.getSuggestion(\"samsang\");\n    List<SpellCheckResponse.Suggestion> sugs = response.getSuggestions();\n\n    assertEquals(sug.getAlternatives().size(), sug.getAlternativeFrequencies().size());\n    assertEquals(sugs.get(0).getAlternatives().size(), sugs.get(0).getAlternativeFrequencies().size());\n\n    assertEquals(\"samsung\", sug.getAlternatives().get(0));\n    assertEquals(\"samsung\", sugs.get(0).getAlternatives().get(0));\n\n    // basic test if fields were filled in\n    assertTrue(sug.getEndOffset()>0);\n    assertTrue(sug.getToken().length() > 0);\n    assertTrue(sug.getNumFound() > 0);\n    // assertTrue(sug.getOriginalFrequency() > 0);\n\n    // Hmmm... the API for SpellCheckResponse could be nicer:\n    response.getSuggestions().get(0).getAlternatives().get(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1034497e9ecad8fcbefaa3b8abeac94f06daa15":["c26f00b574427b55127e869b935845554afde1fa"],"56d78974d33c1244e0810e0dc8f1c6371faceac9":["b1034497e9ecad8fcbefaa3b8abeac94f06daa15"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["56d78974d33c1244e0810e0dc8f1c6371faceac9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"b1034497e9ecad8fcbefaa3b8abeac94f06daa15":["56d78974d33c1244e0810e0dc8f1c6371faceac9"],"56d78974d33c1244e0810e0dc8f1c6371faceac9":["bafca15d8e408346a67f4282ad1143b88023893b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["b1034497e9ecad8fcbefaa3b8abeac94f06daa15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}