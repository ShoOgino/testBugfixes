{"path":"src/java/org/apache/lucene/search/RangeQuery#hashCode().mjava","commits":[{"id":"f81be51430d74c492f81c1491f9eb2806f8e4d9f","date":1113309296,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#hashCode().mjava","pathOld":"/dev/null","sourceNew":"    /** Returns a hash code value for this object.*/\n    public int hashCode() {\n        return Float.floatToIntBits(getBoost()) ^\n            (lowerTerm != null ? lowerTerm.hashCode() : 0) ^\n            (upperTerm != null ? upperTerm.hashCode() : 0) ^\n            (this.inclusive ? 1 : 0);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"431ff9ccbdbb7b6f61cf38f85631fd7ffc4a325a","date":1135309070,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#hashCode().mjava","sourceNew":"    /** Returns a hash code value for this object.*/\n    public int hashCode() {\n      int h = Float.floatToIntBits(getBoost());\n      h ^= lowerTerm != null ? lowerTerm.hashCode() : 0;\n      // reversible mix to make lower and upper position dependent and\n      // to prevent them from cancelling out.\n      h ^= (h << 25) | (h >>> 8);\n      h ^= upperTerm != null ? upperTerm.hashCode() : 0;\n      h ^= this.inclusive ? 0x2742E74A : 0;\n      return h;\n    }\n\n","sourceOld":"    /** Returns a hash code value for this object.*/\n    public int hashCode() {\n        return Float.floatToIntBits(getBoost()) ^\n            (lowerTerm != null ? lowerTerm.hashCode() : 0) ^\n            (upperTerm != null ? upperTerm.hashCode() : 0) ^\n            (this.inclusive ? 1 : 0);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b33dc4652df2747e38f9782fde82bd426b77c538","date":1221599001,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#hashCode().mjava","sourceNew":"    /** Returns a hash code value for this object.*/\n    public int hashCode() {\n      int h = Float.floatToIntBits(getBoost());\n      h ^= lowerTerm != null ? lowerTerm.hashCode() : 0;\n      // reversible mix to make lower and upper position dependent and\n      // to prevent them from cancelling out.\n      h ^= (h << 25) | (h >>> 8);\n      h ^= upperTerm != null ? upperTerm.hashCode() : 0;\n      h ^= this.inclusive ? 0x2742E74A : 0;\n      h ^= collator != null ? collator.hashCode() : 0; \n      return h;\n    }\n\n","sourceOld":"    /** Returns a hash code value for this object.*/\n    public int hashCode() {\n      int h = Float.floatToIntBits(getBoost());\n      h ^= lowerTerm != null ? lowerTerm.hashCode() : 0;\n      // reversible mix to make lower and upper position dependent and\n      // to prevent them from cancelling out.\n      h ^= (h << 25) | (h >>> 8);\n      h ^= upperTerm != null ? upperTerm.hashCode() : 0;\n      h ^= this.inclusive ? 0x2742E74A : 0;\n      return h;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#hashCode().mjava","sourceNew":"  /** Returns a hash code value for this object.*/\n  public int hashCode() {\n    int h = Float.floatToIntBits(getBoost()) ^ field.hashCode();\n    String lowerVal = this.lowerTerm == null ? null : lowerTerm.text();\n    String upperVal = this.upperTerm == null ? null : upperTerm.text();\n    // hashCode of \"\" is 0, so don't use that for null...\n    h ^= lowerVal != null ? lowerVal.hashCode() : 0x965a965a;\n    // don't just XOR upperVal with out mixing either it or h, as it will cancel\n    // out lowerVal if they are equal.\n    h ^= (h << 17) | (h >>> 16);  // a reversible (one to one) 32 bit mapping mix\n    h ^= (upperVal != null ? (upperVal.hashCode()) : 0x5a695a69);\n    h ^= (includeLower ? 0x665599aa : 0)\n       ^ (includeUpper ? 0x99aa5566 : 0);\n    h ^= collator != null ? collator.hashCode() : 0;\n    return h;\n  }\n\n","sourceOld":"    /** Returns a hash code value for this object.*/\n    public int hashCode() {\n      int h = Float.floatToIntBits(getBoost());\n      h ^= lowerTerm != null ? lowerTerm.hashCode() : 0;\n      // reversible mix to make lower and upper position dependent and\n      // to prevent them from cancelling out.\n      h ^= (h << 25) | (h >>> 8);\n      h ^= upperTerm != null ? upperTerm.hashCode() : 0;\n      h ^= this.inclusive ? 0x2742E74A : 0;\n      h ^= collator != null ? collator.hashCode() : 0; \n      return h;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d0a32bc578c175fa42d65d95f21290d3473d84","date":1241610125,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#hashCode().mjava","sourceNew":"  //@Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = super.hashCode();\n    result = prime * result + ((collator == null) ? 0 : collator.hashCode());\n    result = prime * result + ((field == null) ? 0 : field.hashCode());\n    result = prime * result + (includeLower ? 1231 : 1237);\n    result = prime * result + (includeUpper ? 1231 : 1237);\n    result = prime * result + ((lowerTerm == null) ? 0 : lowerTerm.hashCode());\n    result = prime * result + ((upperTerm == null) ? 0 : upperTerm.hashCode());\n    return result;\n  }\n\n","sourceOld":"  /** Returns a hash code value for this object.*/\n  public int hashCode() {\n    int h = Float.floatToIntBits(getBoost()) ^ field.hashCode();\n    String lowerVal = this.lowerTerm == null ? null : lowerTerm.text();\n    String upperVal = this.upperTerm == null ? null : upperTerm.text();\n    // hashCode of \"\" is 0, so don't use that for null...\n    h ^= lowerVal != null ? lowerVal.hashCode() : 0x965a965a;\n    // don't just XOR upperVal with out mixing either it or h, as it will cancel\n    // out lowerVal if they are equal.\n    h ^= (h << 17) | (h >>> 16);  // a reversible (one to one) 32 bit mapping mix\n    h ^= (upperVal != null ? (upperVal.hashCode()) : 0x5a695a69);\n    h ^= (includeLower ? 0x665599aa : 0)\n       ^ (includeUpper ? 0x99aa5566 : 0);\n    h ^= collator != null ? collator.hashCode() : 0;\n    return h;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermRangeQuery#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#hashCode().mjava","sourceNew":"  //@Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = super.hashCode();\n    result = prime * result + ((collator == null) ? 0 : collator.hashCode());\n    result = prime * result + ((field == null) ? 0 : field.hashCode());\n    result = prime * result + (includeLower ? 1231 : 1237);\n    result = prime * result + (includeUpper ? 1231 : 1237);\n    result = prime * result + ((lowerTerm == null) ? 0 : lowerTerm.hashCode());\n    result = prime * result + ((upperTerm == null) ? 0 : upperTerm.hashCode());\n    return result;\n  }\n\n","sourceOld":"  //@Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = super.hashCode();\n    result = prime * result + ((collator == null) ? 0 : collator.hashCode());\n    result = prime * result + ((field == null) ? 0 : field.hashCode());\n    result = prime * result + (includeLower ? 1231 : 1237);\n    result = prime * result + (includeUpper ? 1231 : 1237);\n    result = prime * result + ((lowerTerm == null) ? 0 : lowerTerm.hashCode());\n    result = prime * result + ((upperTerm == null) ? 0 : upperTerm.hashCode());\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c","date":1246738520,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#hashCode().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a hash code value for this object.*/\n  public int hashCode() {\n    return delegate.hashCode();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da","date":1255296547,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/RangeQuery#hashCode().mjava","sourceNew":null,"sourceOld":"  /** Returns a hash code value for this object.*/\n  public int hashCode() {\n    return delegate.hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58d0a32bc578c175fa42d65d95f21290d3473d84":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"f81be51430d74c492f81c1491f9eb2806f8e4d9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["58d0a32bc578c175fa42d65d95f21290d3473d84"],"b33dc4652df2747e38f9782fde82bd426b77c538":["431ff9ccbdbb7b6f61cf38f85631fd7ffc4a325a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"431ff9ccbdbb7b6f61cf38f85631fd7ffc4a325a":["f81be51430d74c492f81c1491f9eb2806f8e4d9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["b33dc4652df2747e38f9782fde82bd426b77c538"]},"commit2Childs":{"58d0a32bc578c175fa42d65d95f21290d3473d84":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"f81be51430d74c492f81c1491f9eb2806f8e4d9f":["431ff9ccbdbb7b6f61cf38f85631fd7ffc4a325a"],"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c"],"b33dc4652df2747e38f9782fde82bd426b77c538":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f81be51430d74c492f81c1491f9eb2806f8e4d9f"],"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"431ff9ccbdbb7b6f61cf38f85631fd7ffc4a325a":["b33dc4652df2747e38f9782fde82bd426b77c538"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["58d0a32bc578c175fa42d65d95f21290d3473d84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}