{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","commits":[{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"/dev/null","sourceNew":"  /** returns an address instance for variable-length binary values. */\n  private MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b873e6a2036c1deda886d1fcf6ba42c995dd15a0","date":1408410832,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","sourceNew":null,"sourceOld":"  /** returns an address instance for variable-length binary values. */\n  private MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b873e6a2036c1deda886d1fcf6ba42c995dd15a0":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0"]},"commit2Childs":{"b873e6a2036c1deda886d1fcf6ba42c995dd15a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}