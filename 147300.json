{"path":"solr/solrj/src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","sourceNew":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          @Override\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          @Override\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","sourceNew":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          @Override\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          @Override\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","sourceNew":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          @Override\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          @Override\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf0b1b21012d341c80a1f3975cf88823f0fe95a9","date":1316016056,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#put(K,V).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ConcurrentLRUCache#put(K,V).mjava","sourceNew":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          @Override\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","sourceOld":"  public V put(K key, V val) {\n    if (val == null) return null;\n    CacheEntry<K,V> e = new CacheEntry<K,V>(key, val, stats.accessCounter.incrementAndGet());\n    CacheEntry<K,V> oldCacheEntry = map.put(key, e);\n    int currentSize;\n    if (oldCacheEntry == null) {\n      currentSize = stats.size.incrementAndGet();\n    } else {\n      currentSize = stats.size.get();\n    }\n    if (islive) {\n      stats.putCounter.incrementAndGet();\n    } else {\n      stats.nonLivePutCounter.incrementAndGet();\n    }\n\n    // Check if we need to clear out old entries from the cache.\n    // isCleaning variable is checked instead of markAndSweepLock.isLocked()\n    // for performance because every put invokation will check until\n    // the size is back to an acceptable level.\n    //\n    // There is a race between the check and the call to markAndSweep, but\n    // it's unimportant because markAndSweep actually aquires the lock or returns if it can't.\n    //\n    // Thread safety note: isCleaning read is piggybacked (comes after) other volatile reads\n    // in this method.\n    if (currentSize > upperWaterMark && !isCleaning) {\n      if (newThreadForCleanup) {\n        new Thread() {\n          @Override\n          public void run() {\n            markAndSweep();\n          }\n        }.start();\n      } else if (cleanupThread != null){\n        cleanupThread.wakeThread();\n      } else {\n        markAndSweep();\n      }\n    }\n    return oldCacheEntry == null ? null : oldCacheEntry.value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf0b1b21012d341c80a1f3975cf88823f0fe95a9":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf0b1b21012d341c80a1f3975cf88823f0fe95a9"]},"commit2Childs":{"cf0b1b21012d341c80a1f3975cf88823f0fe95a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cf0b1b21012d341c80a1f3975cf88823f0fe95a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}