{"path":"lucene/core/src/test/org/apache/lucene/search/TestDoubleRangeFieldQueries#nextDoubleInternal().mjava","commits":[{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDoubleRangeFieldQueries#nextDoubleInternal().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDoubleRangeFieldQueries#nextDoubleInternal().mjava","sourceNew":"  private double nextDoubleInternal() {\n    if (rarely()) {\n      return random().nextBoolean() ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n    }\n    double max = Double.MAX_VALUE / 2;\n    return (max + max) * random().nextDouble() - max;\n  }\n\n","sourceOld":"  private double nextDoubleInternal() {\n    if (rarely()) {\n      return random().nextBoolean() ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n    }\n    double max = Double.MAX_VALUE / 2;\n    return (max + max) * random().nextDouble() - max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91e78d339fc63f8487cc36dbc676582553f5e622","date":1495558010,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDoubleRangeFieldQueries#nextDoubleInternal().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDoubleRangeFieldQueries#nextDoubleInternal().mjava","sourceNew":"  private double nextDoubleInternal() {\n    switch (random().nextInt(5)) {\n      case 0:\n        return Double.NEGATIVE_INFINITY;\n      case 1:\n        return Double.POSITIVE_INFINITY;\n      default:\n        if (random().nextBoolean()) {\n          return random().nextDouble();\n        } else {\n          return (random().nextInt(15) - 7) / 3d;\n        }\n    }\n  }\n\n","sourceOld":"  private double nextDoubleInternal() {\n    if (rarely()) {\n      return random().nextBoolean() ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n    }\n    double max = Double.MAX_VALUE / 2;\n    return (max + max) * random().nextDouble() - max;\n  }\n\n","bugFix":["7825da0fed0bd08a466fec72f7c6a18a2abb303d","05f4c28bc6a6df30868753f35eb802cbff28ce5c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDoubleRangeFieldQueries#nextDoubleInternal().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDoubleRangeFieldQueries#nextDoubleInternal().mjava","sourceNew":"  private double nextDoubleInternal() {\n    switch (random().nextInt(5)) {\n      case 0:\n        return Double.NEGATIVE_INFINITY;\n      case 1:\n        return Double.POSITIVE_INFINITY;\n      default:\n        if (random().nextBoolean()) {\n          return random().nextDouble();\n        } else {\n          return (random().nextInt(15) - 7) / 3d;\n        }\n    }\n  }\n\n","sourceOld":"  private double nextDoubleInternal() {\n    if (rarely()) {\n      return random().nextBoolean() ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;\n    }\n    double max = Double.MAX_VALUE / 2;\n    return (max + max) * random().nextDouble() - max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["4a52b01a73cacbd2d360240e72d64c0ba353618f","91e78d339fc63f8487cc36dbc676582553f5e622"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91e78d339fc63f8487cc36dbc676582553f5e622":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91e78d339fc63f8487cc36dbc676582553f5e622"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["e9017cf144952056066919f1ebc7897ff9bd71b1","91e78d339fc63f8487cc36dbc676582553f5e622"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"91e78d339fc63f8487cc36dbc676582553f5e622":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}