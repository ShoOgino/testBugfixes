{"path":"solr/core/src/java/org/apache/solr/util/FileUtils#resolvePath(File,String).mjava","commits":[{"id":"e6a2315ba749856e5787b2ad962fa124bc3ed121","date":1334194349,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FileUtils#resolvePath(File,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/FileUtils#resolvePath(File,String).mjava","sourceNew":"  /**\n   * Resolves a path relative a base directory.\n   *\n   * <p>\n   * This method does what \"new File(base,path)\" <b>Should</b> do, it wasn't\n   * completely lame: If path is absolute, then a File for that path is returned;\n   * if it's not absoluve, then a File is returnd using \"path\" as a child \n   * of \"base\")\n   * </p>\n   */\n  public static File resolvePath(File base, String path) {\n    File r = new File(path);\n    return r.isAbsolute() ? r : new File(base, path);\n  }\n\n","sourceOld":"  /**\n   * Resolves a path relative a base directory.\n   *\n   * <p>\n   * This method does what \"new File(base,path)\" <b>Should</b> do, it wasn't\n   * completely lame: If path is absolute, then a File for that path is returned;\n   * if it's not absoluve, then a File is returnd using \"path\" as a child \n   * of \"base\")\n   * </p>\n   */\n  public static File resolvePath(File base, String path) {\n    File r = new File(path);\n    return r.isAbsolute() ? r : new File(base, path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bda9c6867f7ffe0259131ae73f1a6417b512080a","date":1337203442,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/FileUtils#resolvePath(File,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FileUtils#resolvePath(File,String).mjava","sourceNew":"  /**\n   * Resolves a path relative a base directory.\n   *\n   * <p>\n   * This method does what \"new File(base,path)\" <b>Should</b> do, if it wasn't\n   * completely lame: If path is absolute, then a File for that path is returned;\n   * if it's not absolute, then a File is returned using \"path\" as a child\n   * of \"base\")\n   * </p>\n   */\n  public static File resolvePath(File base, String path) {\n    File r = new File(path);\n    return r.isAbsolute() ? r : new File(base, path);\n  }\n\n","sourceOld":"  /**\n   * Resolves a path relative a base directory.\n   *\n   * <p>\n   * This method does what \"new File(base,path)\" <b>Should</b> do, it wasn't\n   * completely lame: If path is absolute, then a File for that path is returned;\n   * if it's not absoluve, then a File is returnd using \"path\" as a child \n   * of \"base\")\n   * </p>\n   */\n  public static File resolvePath(File base, String path) {\n    File r = new File(path);\n    return r.isAbsolute() ? r : new File(base, path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/FileUtils#resolvePath(File,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/FileUtils#resolvePath(File,String).mjava","sourceNew":"  /**\n   * Resolves a path relative a base directory.\n   *\n   * <p>\n   * This method does what \"new File(base,path)\" <b>Should</b> do, if it wasn't\n   * completely lame: If path is absolute, then a File for that path is returned;\n   * if it's not absolute, then a File is returned using \"path\" as a child\n   * of \"base\")\n   * </p>\n   */\n  public static File resolvePath(File base, String path) {\n    File r = new File(path);\n    return r.isAbsolute() ? r : new File(base, path);\n  }\n\n","sourceOld":"  /**\n   * Resolves a path relative a base directory.\n   *\n   * <p>\n   * This method does what \"new File(base,path)\" <b>Should</b> do, it wasn't\n   * completely lame: If path is absolute, then a File for that path is returned;\n   * if it's not absoluve, then a File is returnd using \"path\" as a child \n   * of \"base\")\n   * </p>\n   */\n  public static File resolvePath(File base, String path) {\n    File r = new File(path);\n    return r.isAbsolute() ? r : new File(base, path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e6a2315ba749856e5787b2ad962fa124bc3ed121":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bda9c6867f7ffe0259131ae73f1a6417b512080a":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"ef0d8a69209261514c5739c770bba706c2308450":["e6a2315ba749856e5787b2ad962fa124bc3ed121","bda9c6867f7ffe0259131ae73f1a6417b512080a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bda9c6867f7ffe0259131ae73f1a6417b512080a"]},"commit2Childs":{"e6a2315ba749856e5787b2ad962fa124bc3ed121":["bda9c6867f7ffe0259131ae73f1a6417b512080a","ef0d8a69209261514c5739c770bba706c2308450"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"bda9c6867f7ffe0259131ae73f1a6417b512080a":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}