{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBasicDouble().mjava","commits":[{"id":"45bfb4d30b7e62ec7d645a5e0113362636ac4981","date":1462660573,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBasicDouble().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicDouble() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.DOUBLE));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 18.0));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", -1.0));\n    w.addDocument(doc);\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 7.0));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    assertEquals(-1.0, Double.longBitsToDouble(values.get(0)), 0.0);\n    assertEquals(7.0, Double.longBitsToDouble(values.get(1)), 0.0);\n    assertEquals(18.0, Double.longBitsToDouble(values.get(2)), 0.0);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBasicDouble().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicDouble() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.DOUBLE));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 18.0));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", -1.0));\n    w.addDocument(doc);\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 7.0));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    assertEquals(-1.0, Double.longBitsToDouble(values.get(0)), 0.0);\n    assertEquals(7.0, Double.longBitsToDouble(values.get(1)), 0.0);\n    assertEquals(18.0, Double.longBitsToDouble(values.get(2)), 0.0);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBasicDouble().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicDouble() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.DOUBLE));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 18.0));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", -1.0));\n    w.addDocument(doc);\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 7.0));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    assertEquals(-1.0, Double.longBitsToDouble(values.get(0)), 0.0);\n    assertEquals(7.0, Double.longBitsToDouble(values.get(1)), 0.0);\n    assertEquals(18.0, Double.longBitsToDouble(values.get(2)), 0.0);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBasicDouble().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicDouble() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.DOUBLE));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 18.0));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", -1.0));\n    w.addDocument(doc);\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 7.0));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    assertEquals(-1.0, Double.longBitsToDouble(values.get(0)), 0.0);\n    assertEquals(7.0, Double.longBitsToDouble(values.get(1)), 0.0);\n    assertEquals(18.0, Double.longBitsToDouble(values.get(2)), 0.0);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBasicDouble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBasicDouble().mjava","sourceNew":"  public void testBasicDouble() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.DOUBLE));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 18.0));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", -1.0));\n    w.addDocument(doc);\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 7.0));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(-1.0, Double.longBitsToDouble(values.longValue()), 0.0);\n    assertEquals(1, values.nextDoc());\n    assertEquals(7.0, Double.longBitsToDouble(values.longValue()), 0.0);\n    assertEquals(2, values.nextDoc());\n    assertEquals(18.0, Double.longBitsToDouble(values.longValue()), 0.0);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasicDouble() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.DOUBLE));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 18.0));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", -1.0));\n    w.addDocument(doc);\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 7.0));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    assertEquals(-1.0, Double.longBitsToDouble(values.get(0)), 0.0);\n    assertEquals(7.0, Double.longBitsToDouble(values.get(1)), 0.0);\n    assertEquals(18.0, Double.longBitsToDouble(values.get(2)), 0.0);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBasicDouble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBasicDouble().mjava","sourceNew":"  public void testBasicDouble() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.DOUBLE));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 18.0));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", -1.0));\n    w.addDocument(doc);\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 7.0));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(-1.0, Double.longBitsToDouble(values.longValue()), 0.0);\n    assertEquals(1, values.nextDoc());\n    assertEquals(7.0, Double.longBitsToDouble(values.longValue()), 0.0);\n    assertEquals(2, values.nextDoc());\n    assertEquals(18.0, Double.longBitsToDouble(values.longValue()), 0.0);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasicDouble() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.DOUBLE));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 18.0));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", -1.0));\n    w.addDocument(doc);\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 7.0));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    assertEquals(-1.0, Double.longBitsToDouble(values.get(0)), 0.0);\n    assertEquals(7.0, Double.longBitsToDouble(values.get(1)), 0.0);\n    assertEquals(18.0, Double.longBitsToDouble(values.get(2)), 0.0);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBasicDouble().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicDouble() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.DOUBLE));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 18.0));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", -1.0));\n    w.addDocument(doc);\n    w.commit();\n\n    doc = new Document();\n    doc.add(new DoubleDocValuesField(\"foo\", 7.0));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(-1.0, Double.longBitsToDouble(values.longValue()), 0.0);\n    assertEquals(1, values.nextDoc());\n    assertEquals(7.0, Double.longBitsToDouble(values.longValue()), 0.0);\n    assertEquals(2, values.nextDoc());\n    assertEquals(18.0, Double.longBitsToDouble(values.longValue()), 0.0);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"45bfb4d30b7e62ec7d645a5e0113362636ac4981":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45bfb4d30b7e62ec7d645a5e0113362636ac4981"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"45bfb4d30b7e62ec7d645a5e0113362636ac4981":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45bfb4d30b7e62ec7d645a5e0113362636ac4981","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}