{"path":"src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","commits":[{"id":"9b240c33c89713e9821af46e867f4710eb811864","date":1261647570,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n\n      SolrIndexReader reader = searcher.getReader();\n      SolrIndexReader[] readers = reader.getLeafReaders();\n      SolrIndexReader subReader = reader;\n      if (readers.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        subReader = readers[0];\n        readers=null;\n      }\n      int[] offsets = reader.getLeafOffsets();\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (readers==null) ? null : new FieldComparator[readers.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int offset = 0;\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (readers != null) {\n            idx = SolrIndexReader.readerIndex(doc, offsets);\n            subReader = readers[idx];\n            offset = offsets[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator.setNextReader(subReader, offset);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= offset;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe","a78a90fc9701e511308346ea29f4f5e548bb39fe","a78a90fc9701e511308346ea29f4f5e548bb39fe","0a18eb901f731cd8fa21582194fb07b0754fe389","0a18eb901f731cd8fa21582194fb07b0754fe389","0a18eb901f731cd8fa21582194fb07b0754fe389","a3584d3db8b472772e3329d9d95d584b68ae997e","a3584d3db8b472772e3329d9d95d584b68ae997e","a3584d3db8b472772e3329d9d95d584b68ae997e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#doFieldSortValues(ResponseBuilder,SolrIndexSearcher).mjava","sourceNew":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n\n      SolrIndexReader reader = searcher.getReader();\n      SolrIndexReader[] readers = reader.getLeafReaders();\n      SolrIndexReader subReader = reader;\n      if (readers.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        subReader = readers[0];\n        readers=null;\n      }\n      int[] offsets = reader.getLeafOffsets();\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (readers==null) ? null : new FieldComparator[readers.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int offset = 0;\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (readers != null) {\n            idx = SolrIndexReader.readerIndex(doc, offsets);\n            subReader = readers[idx];\n            offset = offsets[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator.setNextReader(subReader, offset);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= offset;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","sourceOld":"  protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n  {\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    // The query cache doesn't currently store sort field values, and SolrIndexSearcher doesn't\n    // currently have an option to return sort field values.  Because of this, we\n    // take the documents given and re-derive the sort values.\n    boolean fsv = req.getParams().getBool(ResponseBuilder.FIELD_SORT_VALUES,false);\n    if(fsv){\n      Sort sort = rb.getSortSpec().getSort();\n      SortField[] sortFields = sort==null ? new SortField[]{SortField.FIELD_SCORE} : sort.getSort();\n      NamedList sortVals = new NamedList(); // order is important for the sort fields\n      Field field = new Field(\"dummy\", \"\", Field.Store.YES, Field.Index.NO); // a dummy Field\n\n      SolrIndexReader reader = searcher.getReader();\n      SolrIndexReader[] readers = reader.getLeafReaders();\n      SolrIndexReader subReader = reader;\n      if (readers.length==1) {\n        // if there is a single segment, use that subReader and avoid looking up each time\n        subReader = readers[0];\n        readers=null;\n      }\n      int[] offsets = reader.getLeafOffsets();\n\n      for (SortField sortField: sortFields) {\n        int type = sortField.getType();\n        if (type==SortField.SCORE || type==SortField.DOC) continue;\n\n        FieldComparator comparator = null;\n        FieldComparator comparators[] = (readers==null) ? null : new FieldComparator[readers.length];\n\n        String fieldname = sortField.getField();\n        FieldType ft = fieldname==null ? null : req.getSchema().getFieldTypeNoEx(fieldname);\n\n        DocList docList = rb.getResults().docList;\n        ArrayList<Object> vals = new ArrayList<Object>(docList.size());\n        DocIterator it = rb.getResults().docList.iterator();\n\n        int offset = 0;\n        int idx = 0;\n\n        while(it.hasNext()) {\n          int doc = it.nextDoc();\n          if (readers != null) {\n            idx = SolrIndexReader.readerIndex(doc, offsets);\n            subReader = readers[idx];\n            offset = offsets[idx];\n            comparator = comparators[idx];\n          }\n\n          if (comparator == null) {\n            comparator = sortField.getComparator(1,0);\n            comparator.setNextReader(subReader, offset);\n            if (comparators != null)\n              comparators[idx] = comparator;\n          }\n\n          doc -= offset;  // adjust for what segment this is in\n          comparator.copy(0, doc);\n          Object val = comparator.value(0);\n\n          // Sortable float, double, int, long types all just use a string\n          // comparator. For these, we need to put the type into a readable\n          // format.  One reason for this is that XML can't represent all\n          // string values (or even all unicode code points).\n          // indexedToReadable() should be a no-op and should\n          // thus be harmless anyway (for all current ways anyway)\n          if (val instanceof String) {\n            field.setValue((String)val);\n            val = ft.toObject(field);\n          }\n\n          vals.add(val);\n        }\n\n        sortVals.add(fieldname, vals);\n      }\n\n      rsp.add(\"sort_values\", sortVals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["9b240c33c89713e9821af46e867f4710eb811864"],"9b240c33c89713e9821af46e867f4710eb811864":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9b240c33c89713e9821af46e867f4710eb811864"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"9b240c33c89713e9821af46e867f4710eb811864":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}