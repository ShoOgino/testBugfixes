{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      @Override\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (Transformer.class.isAssignableFrom(clazz)) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (NoSuchMethodException nsme){\n         String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map<String.Object> m)method\";\n            log.error(msg);\n            wrapAndThrow(SEVERE, nsme,msg);        \n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        wrapAndThrow(SEVERE, e,\"Unable to load Transformer: \" + trans);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}