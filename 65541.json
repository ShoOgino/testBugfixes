{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.FacetQueryParser#parse(Object).mjava","commits":[{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":0,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.FacetQueryParser#parse(Object).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public FacetQuery parse(Object arg) throws SyntaxError {\n      parseCommonParams(arg);\n\n      String qstring = null;\n      if (arg instanceof String) {\n        // just the field name...\n        qstring = (String)arg;\n\n      } else if (arg instanceof Map) {\n        Map<String, Object> m = (Map<String, Object>) arg;\n        qstring = getString(m, \"q\", null);\n        if (qstring == null) {\n          qstring = getString(m, \"query\", null);\n        }\n\n        // OK to parse subs before we have parsed our own query?\n        // as long as subs don't need to know about it.\n        parseSubs( m.get(\"facet\") );\n      } else if (arg != null) {\n        // something lke json.facet.facet.query=2\n        throw err(\"Expected string/map for facet query, received \" + arg.getClass().getSimpleName() + \"=\" + arg);\n      }\n\n      // TODO: substats that are from defaults!!!\n\n      if (qstring != null) {\n        QParser parser = QParser.getParser(qstring, getSolrRequest());\n        parser.setIsFilter(true);\n        facet.q = parser.getQuery();\n      }\n\n      return facet;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.FacetQueryParser#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.FacetQueryParser#parse(Object).mjava","sourceNew":"    @Override\n    public FacetQuery parse(Object arg) throws SyntaxError {\n      parseCommonParams(arg);\n\n      String qstring = null;\n      if (arg instanceof String) {\n        // just the field name...\n        qstring = (String)arg;\n\n      } else if (arg instanceof Map) {\n        @SuppressWarnings({\"unchecked\"})\n        Map<String, Object> m = (Map<String, Object>) arg;\n        qstring = getString(m, \"q\", null);\n        if (qstring == null) {\n          qstring = getString(m, \"query\", null);\n        }\n\n        // OK to parse subs before we have parsed our own query?\n        // as long as subs don't need to know about it.\n        parseSubs( m.get(\"facet\") );\n      } else if (arg != null) {\n        // something lke json.facet.facet.query=2\n        throw err(\"Expected string/map for facet query, received \" + arg.getClass().getSimpleName() + \"=\" + arg);\n      }\n\n      // TODO: substats that are from defaults!!!\n\n      if (qstring != null) {\n        QParser parser = QParser.getParser(qstring, getSolrRequest());\n        parser.setIsFilter(true);\n        facet.q = parser.getQuery();\n      }\n\n      return facet;\n    }\n\n","sourceOld":"    @Override\n    public FacetQuery parse(Object arg) throws SyntaxError {\n      parseCommonParams(arg);\n\n      String qstring = null;\n      if (arg instanceof String) {\n        // just the field name...\n        qstring = (String)arg;\n\n      } else if (arg instanceof Map) {\n        Map<String, Object> m = (Map<String, Object>) arg;\n        qstring = getString(m, \"q\", null);\n        if (qstring == null) {\n          qstring = getString(m, \"query\", null);\n        }\n\n        // OK to parse subs before we have parsed our own query?\n        // as long as subs don't need to know about it.\n        parseSubs( m.get(\"facet\") );\n      } else if (arg != null) {\n        // something lke json.facet.facet.query=2\n        throw err(\"Expected string/map for facet query, received \" + arg.getClass().getSimpleName() + \"=\" + arg);\n      }\n\n      // TODO: substats that are from defaults!!!\n\n      if (qstring != null) {\n        QParser parser = QParser.getParser(qstring, getSolrRequest());\n        parser.setIsFilter(true);\n        facet.q = parser.getQuery();\n      }\n\n      return facet;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetParser.FacetQueryParser#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRequest.FacetQueryParser#parse(Object).mjava","sourceNew":"    @Override\n    public FacetQuery parse(Object arg) throws SyntaxError {\n      parseCommonParams(arg);\n\n      String qstring = null;\n      if (arg instanceof String) {\n        // just the field name...\n        qstring = (String)arg;\n\n      } else if (arg instanceof Map) {\n        @SuppressWarnings({\"unchecked\"})\n        Map<String, Object> m = (Map<String, Object>) arg;\n        qstring = getString(m, \"q\", null);\n        if (qstring == null) {\n          qstring = getString(m, \"query\", null);\n        }\n\n        // OK to parse subs before we have parsed our own query?\n        // as long as subs don't need to know about it.\n        parseSubs( m.get(\"facet\") );\n      } else if (arg != null) {\n        // something lke json.facet.facet.query=2\n        throw err(\"Expected string/map for facet query, received \" + arg.getClass().getSimpleName() + \"=\" + arg);\n      }\n\n      // TODO: substats that are from defaults!!!\n\n      if (qstring != null) {\n        QParser parser = QParser.getParser(qstring, getSolrRequest());\n        parser.setIsFilter(true);\n        facet.q = parser.getQuery();\n      }\n\n      return facet;\n    }\n\n","sourceOld":"    @Override\n    public FacetQuery parse(Object arg) throws SyntaxError {\n      parseCommonParams(arg);\n\n      String qstring = null;\n      if (arg instanceof String) {\n        // just the field name...\n        qstring = (String)arg;\n\n      } else if (arg instanceof Map) {\n        @SuppressWarnings({\"unchecked\"})\n        Map<String, Object> m = (Map<String, Object>) arg;\n        qstring = getString(m, \"q\", null);\n        if (qstring == null) {\n          qstring = getString(m, \"query\", null);\n        }\n\n        // OK to parse subs before we have parsed our own query?\n        // as long as subs don't need to know about it.\n        parseSubs( m.get(\"facet\") );\n      } else if (arg != null) {\n        // something lke json.facet.facet.query=2\n        throw err(\"Expected string/map for facet query, received \" + arg.getClass().getSimpleName() + \"=\" + arg);\n      }\n\n      // TODO: substats that are from defaults!!!\n\n      if (qstring != null) {\n        QParser parser = QParser.getParser(qstring, getSolrRequest());\n        parser.setIsFilter(true);\n        facet.q = parser.getQuery();\n      }\n\n      return facet;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba33781da68babcaa5828121b443d3eb5c9d8480":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}