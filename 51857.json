{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","commits":[{"id":"993d0b0d77c623d30cb24cdadbff9bb3b5f516bb","date":1376485874,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","pathOld":"/dev/null","sourceNew":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    try {\n      NamedList<Object> resp = createNewSolrServer(\"\", baseUrl)\n          .request(request);\n      fail(\"Expected to fail, because collection is not in clusterstate\");\n    } catch (RemoteSolrException e) {\n      \n    }\n    \n    checkForMissingCollection(collectionName);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164","5a82d855abc18f7ee3e1ec359d8f256c8c86977a","273ff2f5b0b365591fcbe91ea23b5e97027ca60d","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","pathOld":"/dev/null","sourceNew":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    try {\n      NamedList<Object> resp = createNewSolrServer(\"\", baseUrl)\n          .request(request);\n      fail(\"Expected to fail, because collection is not in clusterstate\");\n    } catch (RemoteSolrException e) {\n      \n    }\n    \n    checkForMissingCollection(collectionName);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a82d855abc18f7ee3e1ec359d8f256c8c86977a","date":1381347960,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","sourceNew":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    try {\n      NamedList<Object> resp = createNewSolrServer(\"\", baseUrl)\n          .request(request);\n      fail(\"Expected to fail, because collection is not in clusterstate\");\n    } catch (RemoteSolrException e) {\n      \n    }\n    \n    checkForMissingCollection(collectionName);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n    \n  }\n\n","sourceOld":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    try {\n      NamedList<Object> resp = createNewSolrServer(\"\", baseUrl)\n          .request(request);\n      fail(\"Expected to fail, because collection is not in clusterstate\");\n    } catch (RemoteSolrException e) {\n      \n    }\n    \n    checkForMissingCollection(collectionName);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n    \n  }\n\n","bugFix":["993d0b0d77c623d30cb24cdadbff9bb3b5f516bb"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","sourceNew":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    try {\n      NamedList<Object> resp = createNewSolrServer(\"\", baseUrl)\n          .request(request);\n      fail(\"Expected to fail, because collection is not in clusterstate\");\n    } catch (RemoteSolrException e) {\n      \n    }\n    \n    checkForMissingCollection(collectionName);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n    \n  }\n\n","sourceOld":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<Integer>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    try {\n      NamedList<Object> resp = createNewSolrServer(\"\", baseUrl)\n          .request(request);\n      fail(\"Expected to fail, because collection is not in clusterstate\");\n    } catch (RemoteSolrException e) {\n      \n    }\n    \n    checkForMissingCollection(collectionName);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","sourceNew":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    try {\n      NamedList<Object> resp = createNewSolrServer(\"\", baseUrl)\n          .request(request);\n      fail(\"Expected to fail, because collection is not in clusterstate\");\n    } catch (RemoteSolrException e) {\n      \n    }\n    \n    checkForMissingCollection(collectionName);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n\n  }\n\n","sourceOld":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    try {\n      NamedList<Object> resp = createNewSolrServer(\"\", baseUrl)\n          .request(request);\n      fail(\"Expected to fail, because collection is not in clusterstate\");\n    } catch (RemoteSolrException e) {\n      \n    }\n    \n    checkForMissingCollection(collectionName);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n    \n  }\n\n","bugFix":null,"bugIntro":["273ff2f5b0b365591fcbe91ea23b5e97027ca60d","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","sourceNew":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    try {\n      NamedList<Object> resp = createNewSolrClient(\"\", baseUrl)\n          .request(request);\n      fail(\"Expected to fail, because collection is not in clusterstate\");\n    } catch (RemoteSolrException e) {\n      \n    }\n    \n    checkForMissingCollection(collectionName);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n\n  }\n\n","sourceOld":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    try {\n      NamedList<Object> resp = createNewSolrServer(\"\", baseUrl)\n          .request(request);\n      fail(\"Expected to fail, because collection is not in clusterstate\");\n    } catch (RemoteSolrException e) {\n      \n    }\n    \n    checkForMissingCollection(collectionName);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","sourceNew":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    try {\n      makeRequest(baseUrl, request);\n      fail(\"Expected to fail, because collection is not in clusterstate\");\n    } catch (RemoteSolrException e) {\n      \n    }\n    \n    checkForMissingCollection(collectionName);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n\n  }\n\n","sourceOld":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    try {\n      NamedList<Object> resp = createNewSolrClient(\"\", baseUrl)\n          .request(request);\n      fail(\"Expected to fail, because collection is not in clusterstate\");\n    } catch (RemoteSolrException e) {\n      \n    }\n    \n    checkForMissingCollection(collectionName);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n\n  }\n\n","bugFix":["993d0b0d77c623d30cb24cdadbff9bb3b5f516bb","bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"234afba21d42e6c527535c6aa11baba09a4771f3","date":1432825127,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","sourceNew":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    try {\n      makeRequest(baseUrl, request);\n      fail(\"Expected to fail, because collection is not in clusterstate\");\n    } catch (RemoteSolrException e) {\n      \n    }\n    \n    assertCollectionNotExists(collectionName, 45);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n\n  }\n\n","sourceOld":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    try {\n      makeRequest(baseUrl, request);\n      fail(\"Expected to fail, because collection is not in clusterstate\");\n    } catch (RemoteSolrException e) {\n      \n    }\n    \n    checkForMissingCollection(collectionName);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9362075f92dff89425ca488b480f70d565d66e7","date":1454985541,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","sourceNew":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    // there are remnants of the collection in zk, should work\n    makeRequest(baseUrl, request);\n    \n    assertCollectionNotExists(collectionName, 45);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n\n  }\n\n","sourceOld":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    try {\n      makeRequest(baseUrl, request);\n      fail(\"Expected to fail, because collection is not in clusterstate\");\n    } catch (RemoteSolrException e) {\n      \n    }\n    \n    assertCollectionNotExists(collectionName, 45);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","sourceNew":"  @Test\n  public void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    String collectionName = \"out_of_sync_collection\";\n\n    // manually create a collections zknode\n    cluster.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n\n    CollectionAdminRequest.deleteCollection(collectionName)\n        .process(cluster.getSolrClient());\n\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient())\n                  .contains(collectionName));\n    \n    assertFalse(cluster.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n\n  }\n\n","sourceOld":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    // there are remnants of the collection in zk, should work\n    makeRequest(baseUrl, request);\n    \n    assertCollectionNotExists(collectionName, 45);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","sourceNew":"  @Test\n  public void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    String collectionName = \"out_of_sync_collection\";\n\n    // manually create a collections zknode\n    cluster.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n\n    CollectionAdminRequest.deleteCollection(collectionName)\n        .process(cluster.getSolrClient());\n\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient())\n                  .contains(collectionName));\n    \n    assertFalse(cluster.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n\n  }\n\n","sourceOld":"  private void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    // we can use this client because we just want base url\n    final String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    \n    String collectionName = \"out_of_sync_collection\";\n    \n    List<Integer> numShardsNumReplicaList = new ArrayList<>();\n    numShardsNumReplicaList.add(2);\n    numShardsNumReplicaList.add(1);\n    \n    \n    cloudClient.getZkStateReader().getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", collectionName);\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    // there are remnants of the collection in zk, should work\n    makeRequest(baseUrl, request);\n    \n    assertCollectionNotExists(collectionName, 45);\n    \n    assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","sourceNew":"  @Test\n  public void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    String collectionName = \"out_of_sync_collection\";\n\n    // manually create a collections zknode\n    cluster.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n\n    CollectionAdminRequest.deleteCollection(collectionName)\n        .process(cluster.getSolrClient());\n\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient())\n                  .contains(collectionName));\n    \n    assertFalse(cluster.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    String collectionName = \"out_of_sync_collection\";\n\n    // manually create a collections zknode\n    cluster.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n\n    CollectionAdminRequest.deleteCollection(collectionName)\n        .process(cluster.getSolrClient());\n\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient())\n                  .contains(collectionName));\n    \n    assertFalse(cluster.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionRemovesStaleZkCollectionsNode().mjava","sourceNew":"  @Test\n  public void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    String collectionName = \"out_of_sync_collection\";\n\n    // manually create a collections zknode\n    cluster.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n\n    CollectionAdminRequest.deleteCollection(collectionName)\n        .process(cluster.getSolrClient());\n\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient())\n                  .contains(collectionName));\n    \n    assertFalse(cluster.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteCollectionRemovesStaleZkCollectionsNode() throws Exception {\n    \n    String collectionName = \"out_of_sync_collection\";\n\n    // manually create a collections zknode\n    cluster.getZkClient().makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true);\n\n    CollectionAdminRequest.deleteCollection(collectionName)\n        .process(cluster.getSolrClient());\n\n    assertFalse(CollectionAdminRequest.listCollections(cluster.getSolrClient())\n                  .contains(collectionName));\n    \n    assertFalse(cluster.getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["f9362075f92dff89425ca488b480f70d565d66e7"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a4efd3fffdd7acd625bb88e455c8097e17f75735","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["f9362075f92dff89425ca488b480f70d565d66e7","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"993d0b0d77c623d30cb24cdadbff9bb3b5f516bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","993d0b0d77c623d30cb24cdadbff9bb3b5f516bb"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"bafca15d8e408346a67f4282ad1143b88023893b":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["993d0b0d77c623d30cb24cdadbff9bb3b5f516bb"],"234afba21d42e6c527535c6aa11baba09a4771f3":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9362075f92dff89425ca488b480f70d565d66e7":["234afba21d42e6c527535c6aa11baba09a4771f3"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["b94236357aaa22b76c10629851fe4e376e0cea82","59dce44d6a0b58c171de1d47ad8c0a75831f94fd","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"993d0b0d77c623d30cb24cdadbff9bb3b5f516bb":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"234afba21d42e6c527535c6aa11baba09a4771f3":["f9362075f92dff89425ca488b480f70d565d66e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["993d0b0d77c623d30cb24cdadbff9bb3b5f516bb","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"f9362075f92dff89425ca488b480f70d565d66e7":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["234afba21d42e6c527535c6aa11baba09a4771f3"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}