{"path":"src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","commits":[{"id":"f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a","date":1252677016,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","pathOld":"/dev/null","sourceNew":"  public void testReversedTokens() throws IOException {\n    String text = \"simple text\";\n    String expected1 = \"simple \\u0001elpmis text \\u0001txet\";\n    String expected2 = \"\\u0001elpmis \\u0001txet\";\n    args.put(\"withOriginal\", \"true\");\n    factory.init(args);\n    TokenStream input = factory.create(new WhitespaceTokenizer(new StringReader(text)));\n    List<Token> realTokens = getTokens(input);\n    List<Token> expectedTokens = tokens(expected1);\n    // set positionIncrements in expected tokens\n    for (int i = 1; i < expectedTokens.size(); i += 2) {\n      expectedTokens.get(i).setPositionIncrement(0);\n    }\n    assertTokEqual(realTokens, expectedTokens);\n    \n    // now without original tokens\n    args.put(\"withOriginal\", \"false\");\n    factory.init(args);\n    input = factory.create(new WhitespaceTokenizer(new StringReader(text)));\n    realTokens = getTokens(input);\n    expectedTokens = tokens(expected2);\n    assertTokEqual(realTokens, expectedTokens);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","pathOld":"src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","sourceNew":"  public void testReversedTokens() throws IOException {\n    String text = \"simple text\";\n    args.put(\"withOriginal\", \"true\");\n    factory.init(args);\n    TokenStream input = factory.create(new WhitespaceTokenizer(new StringReader(text)));\n    assertTokenStreamContents(input, \n        new String[] { \"\\u0001elpmis\", \"simple\", \"\\u0001txet\", \"text\" },\n        new int[] { 1, 0, 1, 0 });\n\n    // now without original tokens\n    args.put(\"withOriginal\", \"false\");\n    factory.init(args);\n    input = factory.create(new WhitespaceTokenizer(new StringReader(text)));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001elpmis\", \"\\u0001txet\" },\n        new int[] { 1, 1 });\n  }\n\n","sourceOld":"  public void testReversedTokens() throws IOException {\n    String text = \"simple text\";\n    String expected1 = \"simple \\u0001elpmis text \\u0001txet\";\n    String expected2 = \"\\u0001elpmis \\u0001txet\";\n    args.put(\"withOriginal\", \"true\");\n    factory.init(args);\n    TokenStream input = factory.create(new WhitespaceTokenizer(new StringReader(text)));\n    List<Token> realTokens = getTokens(input);\n    List<Token> expectedTokens = tokens(expected1);\n    // set positionIncrements in expected tokens\n    for (int i = 1; i < expectedTokens.size(); i += 2) {\n      expectedTokens.get(i).setPositionIncrement(0);\n    }\n    assertTokEqual(realTokens, expectedTokens);\n    \n    // now without original tokens\n    args.put(\"withOriginal\", \"false\");\n    factory.init(args);\n    input = factory.create(new WhitespaceTokenizer(new StringReader(text)));\n    realTokens = getTokens(input);\n    expectedTokens = tokens(expected2);\n    assertTokEqual(realTokens, expectedTokens);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","pathOld":"src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testReversedTokens().mjava","sourceNew":"  public void testReversedTokens() throws IOException {\n    String text = \"simple text\";\n    args.put(\"withOriginal\", \"true\");\n    factory.init(args);\n    TokenStream input = factory.create(new WhitespaceTokenizer(new StringReader(text)));\n    assertTokenStreamContents(input, \n        new String[] { \"\\u0001elpmis\", \"simple\", \"\\u0001txet\", \"text\" },\n        new int[] { 1, 0, 1, 0 });\n\n    // now without original tokens\n    args.put(\"withOriginal\", \"false\");\n    factory.init(args);\n    input = factory.create(new WhitespaceTokenizer(new StringReader(text)));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001elpmis\", \"\\u0001txet\" },\n        new int[] { 1, 1 });\n  }\n\n","sourceOld":"  public void testReversedTokens() throws IOException {\n    String text = \"simple text\";\n    args.put(\"withOriginal\", \"true\");\n    factory.init(args);\n    TokenStream input = factory.create(new WhitespaceTokenizer(new StringReader(text)));\n    assertTokenStreamContents(input, \n        new String[] { \"\\u0001elpmis\", \"simple\", \"\\u0001txet\", \"text\" },\n        new int[] { 1, 0, 1, 0 });\n\n    // now without original tokens\n    args.put(\"withOriginal\", \"false\");\n    factory.init(args);\n    input = factory.create(new WhitespaceTokenizer(new StringReader(text)));\n    assertTokenStreamContents(input,\n        new String[] { \"\\u0001elpmis\", \"\\u0001txet\" },\n        new int[] { 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a"],"f66fbc07ecf3707c1ec81e35ca9e4df7ff22101a":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}