{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#resetTaskWithException(OverseerMessageHandler,String,String,String,ZkNodeProps).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#resetTaskWithException(OverseerMessageHandler,String,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerProcessor.Runner#resetTaskWithException(OverseerMessageHandler,String,String,String).mjava","sourceNew":"    private void resetTaskWithException(OverseerMessageHandler messageHandler, String id, String asyncId, String taskKey, ZkNodeProps message) {\n      log.warn(\"Resetting task: {}, requestid: {}, taskKey: {}\", id, asyncId, taskKey);\n      try {\n        if (asyncId != null)\n          runningMap.remove(asyncId);\n\n        synchronized (runningTasks) {\n          runningTasks.remove(id);\n        }\n\n        messageHandler.unmarkExclusiveTask(taskKey, operation, message);\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","sourceOld":"    private void resetTaskWithException(OverseerMessageHandler messageHandler, String id, String asyncId, String taskKey) {\n      log.warn(\"Resetting task: {}, requestid: {}, taskKey: {}\", id, asyncId, taskKey);\n      try {\n        if (asyncId != null)\n          runningMap.remove(asyncId);\n\n        synchronized (runningTasks) {\n          runningTasks.remove(id);\n        }\n\n        messageHandler.unmarkExclusiveTask(taskKey, operation);\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0b734049423191fc1079a874b216c07ad0722a0","date":1454966146,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#resetTaskWithException(OverseerMessageHandler,String,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#resetTaskWithException(OverseerMessageHandler,String,String,String,ZkNodeProps).mjava","sourceNew":"    private void resetTaskWithException(OverseerMessageHandler messageHandler, String id, String asyncId, String taskKey, ZkNodeProps message) {\n      log.warn(\"Resetting task: {}, requestid: {}, taskKey: {}\", id, asyncId, taskKey);\n      try {\n        if (asyncId != null) {\n          if (!runningMap.remove(asyncId)) {\n            log.warn(\"Could not find and remove async call [\" + asyncId + \"] from the running map.\");\n          }\n        }\n\n        synchronized (runningTasks) {\n          runningTasks.remove(id);\n        }\n\n        messageHandler.unmarkExclusiveTask(taskKey, operation, message);\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","sourceOld":"    private void resetTaskWithException(OverseerMessageHandler messageHandler, String id, String asyncId, String taskKey, ZkNodeProps message) {\n      log.warn(\"Resetting task: {}, requestid: {}, taskKey: {}\", id, asyncId, taskKey);\n      try {\n        if (asyncId != null)\n          runningMap.remove(asyncId);\n\n        synchronized (runningTasks) {\n          runningTasks.remove(id);\n        }\n\n        messageHandler.unmarkExclusiveTask(taskKey, operation, message);\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781578ca5d3d2194bc55fc3457c62aef623db6f2","date":1464859077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#resetTaskWithException(OverseerMessageHandler,String,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#resetTaskWithException(OverseerMessageHandler,String,String,String,ZkNodeProps).mjava","sourceNew":"    private void resetTaskWithException(OverseerMessageHandler messageHandler, String id, String asyncId, String taskKey, ZkNodeProps message) {\n      log.warn(\"Resetting task: {}, requestid: {}, taskKey: {}\", id, asyncId, taskKey);\n      try {\n        if (asyncId != null) {\n          if (!runningMap.remove(asyncId)) {\n            log.warn(\"Could not find and remove async call [\" + asyncId + \"] from the running map.\");\n          }\n        }\n\n        synchronized (runningTasks) {\n          runningTasks.remove(id);\n        }\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","sourceOld":"    private void resetTaskWithException(OverseerMessageHandler messageHandler, String id, String asyncId, String taskKey, ZkNodeProps message) {\n      log.warn(\"Resetting task: {}, requestid: {}, taskKey: {}\", id, asyncId, taskKey);\n      try {\n        if (asyncId != null) {\n          if (!runningMap.remove(asyncId)) {\n            log.warn(\"Could not find and remove async call [\" + asyncId + \"] from the running map.\");\n          }\n        }\n\n        synchronized (runningTasks) {\n          runningTasks.remove(id);\n        }\n\n        messageHandler.unmarkExclusiveTask(taskKey, operation, message);\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#resetTaskWithException(OverseerMessageHandler,String,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#resetTaskWithException(OverseerMessageHandler,String,String,String,ZkNodeProps).mjava","sourceNew":"    private void resetTaskWithException(OverseerMessageHandler messageHandler, String id, String asyncId, String taskKey, ZkNodeProps message) {\n      log.warn(\"Resetting task: {}, requestid: {}, taskKey: {}\", id, asyncId, taskKey);\n      try {\n        if (asyncId != null) {\n          if (!runningMap.remove(asyncId)) {\n            log.warn(\"Could not find and remove async call [\" + asyncId + \"] from the running map.\");\n          }\n        }\n\n        synchronized (runningTasks) {\n          runningTasks.remove(id);\n        }\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","sourceOld":"    private void resetTaskWithException(OverseerMessageHandler messageHandler, String id, String asyncId, String taskKey, ZkNodeProps message) {\n      log.warn(\"Resetting task: {}, requestid: {}, taskKey: {}\", id, asyncId, taskKey);\n      try {\n        if (asyncId != null) {\n          if (!runningMap.remove(asyncId)) {\n            log.warn(\"Could not find and remove async call [\" + asyncId + \"] from the running map.\");\n          }\n        }\n\n        synchronized (runningTasks) {\n          runningTasks.remove(id);\n        }\n\n        messageHandler.unmarkExclusiveTask(taskKey, operation, message);\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#resetTaskWithException(OverseerMessageHandler,String,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#resetTaskWithException(OverseerMessageHandler,String,String,String,ZkNodeProps).mjava","sourceNew":"    private void resetTaskWithException(OverseerMessageHandler messageHandler, String id, String asyncId, String taskKey, ZkNodeProps message) {\n      log.warn(\"Resetting task: {}, requestid: {}, taskKey: {}\", id, asyncId, taskKey);\n      try {\n        if (asyncId != null) {\n          if (!runningMap.remove(asyncId)) {\n            log.warn(\"Could not find and remove async call [{}] from the running map.\", asyncId);\n          }\n        }\n\n        synchronized (runningTasks) {\n          runningTasks.remove(id);\n        }\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","sourceOld":"    private void resetTaskWithException(OverseerMessageHandler messageHandler, String id, String asyncId, String taskKey, ZkNodeProps message) {\n      log.warn(\"Resetting task: {}, requestid: {}, taskKey: {}\", id, asyncId, taskKey);\n      try {\n        if (asyncId != null) {\n          if (!runningMap.remove(asyncId)) {\n            log.warn(\"Could not find and remove async call [\" + asyncId + \"] from the running map.\");\n          }\n        }\n\n        synchronized (runningTasks) {\n          runningTasks.remove(id);\n        }\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98b85aeea4d572e94fd5e6ba67043b5b363f1380","date":1592921806,"type":3,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#resetTaskWithException(OverseerMessageHandler,String,String,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#resetTaskWithException(OverseerMessageHandler,String,String,String,ZkNodeProps).mjava","sourceNew":"    private void resetTaskWithException(OverseerMessageHandler messageHandler, String id, String asyncId, String taskKey, ZkNodeProps message) {\n      log.warn(\"Resetting task: {}, requestid: {}, taskKey: {}\", id, asyncId, taskKey);\n      try {\n        if (asyncId != null) {\n          if (!runningMap.remove(asyncId)) {\n            log.warn(\"Could not find and remove async call [{}] from the running map.\", asyncId);\n          }\n        }\n\n        runningTasks.remove(id);\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","sourceOld":"    private void resetTaskWithException(OverseerMessageHandler messageHandler, String id, String asyncId, String taskKey, ZkNodeProps message) {\n      log.warn(\"Resetting task: {}, requestid: {}, taskKey: {}\", id, asyncId, taskKey);\n      try {\n        if (asyncId != null) {\n          if (!runningMap.remove(asyncId)) {\n            log.warn(\"Could not find and remove async call [{}] from the running map.\", asyncId);\n          }\n        }\n\n        synchronized (runningTasks) {\n          runningTasks.remove(id);\n        }\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad4957cde742defe6db19689abdc267c5d948066":["781578ca5d3d2194bc55fc3457c62aef623db6f2"],"e0b734049423191fc1079a874b216c07ad0722a0":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"98b85aeea4d572e94fd5e6ba67043b5b363f1380":["ad4957cde742defe6db19689abdc267c5d948066"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e0b734049423191fc1079a874b216c07ad0722a0","781578ca5d3d2194bc55fc3457c62aef623db6f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98b85aeea4d572e94fd5e6ba67043b5b363f1380"],"781578ca5d3d2194bc55fc3457c62aef623db6f2":["e0b734049423191fc1079a874b216c07ad0722a0"]},"commit2Childs":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["e0b734049423191fc1079a874b216c07ad0722a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"ad4957cde742defe6db19689abdc267c5d948066":["98b85aeea4d572e94fd5e6ba67043b5b363f1380"],"e0b734049423191fc1079a874b216c07ad0722a0":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","781578ca5d3d2194bc55fc3457c62aef623db6f2"],"98b85aeea4d572e94fd5e6ba67043b5b363f1380":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"781578ca5d3d2194bc55fc3457c62aef623db6f2":["ad4957cde742defe6db19689abdc267c5d948066","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}