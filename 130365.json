{"path":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#beforeClass().mjava","commits":[{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#setUp().mjava","sourceNew":"    @BeforeClass\n    public static void beforeClass() throws Exception {\n        String[] data = new String [] {\n            \"A 1 2 3 4 5 6\",\n            \"Z       4 5 6\",\n            null,\n            \"B   2   4 5 6\",\n            \"Y     3   5 6\",\n            null,\n            \"C     3     6\",\n            \"X       4 5 6\"\n        };\n\n        index = newDirectory();\n        RandomIndexWriter w = new RandomIndexWriter(random, index);\n\n        for (int i = 0; i < data.length; i++) {\n            Document doc = new Document();\n            doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\",String.valueOf(i)));\n            doc.add(newField(\"all\", \"all\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"all\",\"all\"));\n            if (null != data[i]) {\n                doc.add(newField(\"data\", data[i], Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"data\",data[i]));\n            }\n            w.addDocument(doc);\n        }\n\n        r = w.getReader();\n        s = newSearcher(r);\n        w.close();\n//System.out.println(\"Set up \" + getName());\n    }\n\n","sourceOld":"    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n\n        String[] data = new String [] {\n            \"A 1 2 3 4 5 6\",\n            \"Z       4 5 6\",\n            null,\n            \"B   2   4 5 6\",\n            \"Y     3   5 6\",\n            null,\n            \"C     3     6\",\n            \"X       4 5 6\"\n        };\n\n        index = newDirectory();\n        RandomIndexWriter w = new RandomIndexWriter(random, index);\n\n        for (int i = 0; i < data.length; i++) {\n            Document doc = new Document();\n            doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\",String.valueOf(i)));\n            doc.add(newField(\"all\", \"all\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"all\",\"all\"));\n            if (null != data[i]) {\n                doc.add(newField(\"data\", data[i], Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"data\",data[i]));\n            }\n            w.addDocument(doc);\n        }\n\n        r = w.getReader();\n        s = newSearcher(r);\n        w.close();\n//System.out.println(\"Set up \" + getName());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#setUp().mjava","sourceNew":"    @BeforeClass\n    public static void beforeClass() throws Exception {\n        String[] data = new String [] {\n            \"A 1 2 3 4 5 6\",\n            \"Z       4 5 6\",\n            null,\n            \"B   2   4 5 6\",\n            \"Y     3   5 6\",\n            null,\n            \"C     3     6\",\n            \"X       4 5 6\"\n        };\n\n        index = newDirectory();\n        RandomIndexWriter w = new RandomIndexWriter(random, index);\n\n        for (int i = 0; i < data.length; i++) {\n            Document doc = new Document();\n            doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\",String.valueOf(i)));\n            doc.add(newField(\"all\", \"all\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"all\",\"all\"));\n            if (null != data[i]) {\n                doc.add(newField(\"data\", data[i], Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"data\",data[i]));\n            }\n            w.addDocument(doc);\n        }\n\n        r = w.getReader();\n        s = newSearcher(r);\n        w.close();\n//System.out.println(\"Set up \" + getName());\n    }\n\n","sourceOld":"    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n\n        String[] data = new String [] {\n            \"A 1 2 3 4 5 6\",\n            \"Z       4 5 6\",\n            null,\n            \"B   2   4 5 6\",\n            \"Y     3   5 6\",\n            null,\n            \"C     3     6\",\n            \"X       4 5 6\"\n        };\n\n        index = newDirectory();\n        RandomIndexWriter w = new RandomIndexWriter(random, index);\n\n        for (int i = 0; i < data.length; i++) {\n            Document doc = new Document();\n            doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\",String.valueOf(i)));\n            doc.add(newField(\"all\", \"all\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"all\",\"all\"));\n            if (null != data[i]) {\n                doc.add(newField(\"data\", data[i], Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"data\",data[i]));\n            }\n            w.addDocument(doc);\n        }\n\n        r = w.getReader();\n        s = newSearcher(r);\n        w.close();\n//System.out.println(\"Set up \" + getName());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#setUp().mjava","sourceNew":"    @BeforeClass\n    public static void beforeClass() throws Exception {\n        String[] data = new String [] {\n            \"A 1 2 3 4 5 6\",\n            \"Z       4 5 6\",\n            null,\n            \"B   2   4 5 6\",\n            \"Y     3   5 6\",\n            null,\n            \"C     3     6\",\n            \"X       4 5 6\"\n        };\n\n        index = newDirectory();\n        RandomIndexWriter w = new RandomIndexWriter(random, index);\n\n        for (int i = 0; i < data.length; i++) {\n            Document doc = new Document();\n            doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\",String.valueOf(i)));\n            doc.add(newField(\"all\", \"all\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"all\",\"all\"));\n            if (null != data[i]) {\n                doc.add(newField(\"data\", data[i], Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"data\",data[i]));\n            }\n            w.addDocument(doc);\n        }\n\n        r = w.getReader();\n        s = newSearcher(r);\n        w.close();\n//System.out.println(\"Set up \" + getName());\n    }\n\n","sourceOld":"    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n\n        String[] data = new String [] {\n            \"A 1 2 3 4 5 6\",\n            \"Z       4 5 6\",\n            null,\n            \"B   2   4 5 6\",\n            \"Y     3   5 6\",\n            null,\n            \"C     3     6\",\n            \"X       4 5 6\"\n        };\n\n        index = newDirectory();\n        RandomIndexWriter w = new RandomIndexWriter(random, index);\n\n        for (int i = 0; i < data.length; i++) {\n            Document doc = new Document();\n            doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\",String.valueOf(i)));\n            doc.add(newField(\"all\", \"all\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"all\",\"all\"));\n            if (null != data[i]) {\n                doc.add(newField(\"data\", data[i], Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"data\",data[i]));\n            }\n            w.addDocument(doc);\n        }\n\n        r = w.getReader();\n        s = newSearcher(r);\n        w.close();\n//System.out.println(\"Set up \" + getName());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#beforeClass().mjava","sourceNew":"    @BeforeClass\n    public static void beforeClass() throws Exception {\n        String[] data = new String [] {\n            \"A 1 2 3 4 5 6\",\n            \"Z       4 5 6\",\n            null,\n            \"B   2   4 5 6\",\n            \"Y     3   5 6\",\n            null,\n            \"C     3     6\",\n            \"X       4 5 6\"\n        };\n\n        index = newDirectory();\n        RandomIndexWriter w = new RandomIndexWriter(random, index);\n\n        for (int i = 0; i < data.length; i++) {\n            Document doc = new Document();\n            doc.add(newField(\"id\", String.valueOf(i), StringField.TYPE_STORED));//Field.Keyword(\"id\",String.valueOf(i)));\n            doc.add(newField(\"all\", \"all\", StringField.TYPE_STORED));//Field.Keyword(\"all\",\"all\"));\n            if (null != data[i]) {\n                doc.add(newField(\"data\", data[i], TextField.TYPE_STORED));//Field.Text(\"data\",data[i]));\n            }\n            w.addDocument(doc);\n        }\n\n        r = w.getReader();\n        s = newSearcher(r);\n        w.close();\n//System.out.println(\"Set up \" + getName());\n    }\n\n","sourceOld":"    @BeforeClass\n    public static void beforeClass() throws Exception {\n        String[] data = new String [] {\n            \"A 1 2 3 4 5 6\",\n            \"Z       4 5 6\",\n            null,\n            \"B   2   4 5 6\",\n            \"Y     3   5 6\",\n            null,\n            \"C     3     6\",\n            \"X       4 5 6\"\n        };\n\n        index = newDirectory();\n        RandomIndexWriter w = new RandomIndexWriter(random, index);\n\n        for (int i = 0; i < data.length; i++) {\n            Document doc = new Document();\n            doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\",String.valueOf(i)));\n            doc.add(newField(\"all\", \"all\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"all\",\"all\"));\n            if (null != data[i]) {\n                doc.add(newField(\"data\", data[i], Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"data\",data[i]));\n            }\n            w.addDocument(doc);\n        }\n\n        r = w.getReader();\n        s = newSearcher(r);\n        w.close();\n//System.out.println(\"Set up \" + getName());\n    }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#beforeClass().mjava","sourceNew":"    @BeforeClass\n    public static void beforeClass() throws Exception {\n        String[] data = new String [] {\n            \"A 1 2 3 4 5 6\",\n            \"Z       4 5 6\",\n            null,\n            \"B   2   4 5 6\",\n            \"Y     3   5 6\",\n            null,\n            \"C     3     6\",\n            \"X       4 5 6\"\n        };\n\n        index = newDirectory();\n        RandomIndexWriter w = new RandomIndexWriter(random, index);\n\n        for (int i = 0; i < data.length; i++) {\n            Document doc = new Document();\n            doc.add(newField(\"id\", String.valueOf(i), StringField.TYPE_STORED));//Field.Keyword(\"id\",String.valueOf(i)));\n            doc.add(newField(\"all\", \"all\", StringField.TYPE_STORED));//Field.Keyword(\"all\",\"all\"));\n            if (null != data[i]) {\n                doc.add(newField(\"data\", data[i], TextField.TYPE_STORED));//Field.Text(\"data\",data[i]));\n            }\n            w.addDocument(doc);\n        }\n\n        r = w.getReader();\n        s = newSearcher(r);\n        w.close();\n//System.out.println(\"Set up \" + getName());\n    }\n\n","sourceOld":"    @BeforeClass\n    public static void beforeClass() throws Exception {\n        String[] data = new String [] {\n            \"A 1 2 3 4 5 6\",\n            \"Z       4 5 6\",\n            null,\n            \"B   2   4 5 6\",\n            \"Y     3   5 6\",\n            null,\n            \"C     3     6\",\n            \"X       4 5 6\"\n        };\n\n        index = newDirectory();\n        RandomIndexWriter w = new RandomIndexWriter(random, index);\n\n        for (int i = 0; i < data.length; i++) {\n            Document doc = new Document();\n            doc.add(newField(\"id\", String.valueOf(i), StringField.TYPE_STORED));//Field.Keyword(\"id\",String.valueOf(i)));\n            doc.add(newField(\"all\", \"all\", StringField.TYPE_STORED));//Field.Keyword(\"all\",\"all\"));\n            if (null != data[i]) {\n                doc.add(newField(\"data\", data[i], TextField.TYPE_STORED));//Field.Text(\"data\",data[i]));\n            }\n            w.addDocument(doc);\n        }\n\n        r = w.getReader();\n        s = newSearcher(r);\n        w.close();\n//System.out.println(\"Set up \" + getName());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}