{"path":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testHashCodeWithThreads().mjava","commits":[{"id":"7f04837a83ac5990603e49463c653672a3a31af0","date":1395078441,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testHashCodeWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  public void testHashCodeWithThreads() throws Exception {\n    final AutomatonQuery queries[] = new AutomatonQuery[1000];\n    for (int i = 0; i < queries.length; i++) {\n      queries[i] = new AutomatonQuery(new Term(\"bogus\", \"bogus\"), AutomatonTestUtil.randomAutomaton(random()));\n    }\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    Thread[] threads = new Thread[numThreads];\n    for (int threadID = 0; threadID < numThreads; threadID++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              for (int i = 0; i < queries.length; i++) {\n                queries[i].hashCode();\n              }\n            } catch (Exception e) {\n              Rethrow.rethrow(e);\n            }\n          }\n        };\n      threads[threadID] = thread;\n      thread.start();\n    }\n    startingGun.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc1121331b9fb501c7fa4ebfb22fadf384d1d","date":1415265718,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testHashCodeWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testHashCodeWithThreads().mjava","sourceNew":"  public void testHashCodeWithThreads() throws Exception {\n    final AutomatonQuery queries[] = new AutomatonQuery[1000];\n    for (int i = 0; i < queries.length; i++) {\n      queries[i] = new AutomatonQuery(new Term(\"bogus\", \"bogus\"), AutomatonTestUtil.randomAutomaton(random()), Integer.MAX_VALUE);\n    }\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    Thread[] threads = new Thread[numThreads];\n    for (int threadID = 0; threadID < numThreads; threadID++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              for (int i = 0; i < queries.length; i++) {\n                queries[i].hashCode();\n              }\n            } catch (Exception e) {\n              Rethrow.rethrow(e);\n            }\n          }\n        };\n      threads[threadID] = thread;\n      thread.start();\n    }\n    startingGun.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":"  public void testHashCodeWithThreads() throws Exception {\n    final AutomatonQuery queries[] = new AutomatonQuery[1000];\n    for (int i = 0; i < queries.length; i++) {\n      queries[i] = new AutomatonQuery(new Term(\"bogus\", \"bogus\"), AutomatonTestUtil.randomAutomaton(random()));\n    }\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    Thread[] threads = new Thread[numThreads];\n    for (int threadID = 0; threadID < numThreads; threadID++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              for (int i = 0; i < queries.length; i++) {\n                queries[i].hashCode();\n              }\n            } catch (Exception e) {\n              Rethrow.rethrow(e);\n            }\n          }\n        };\n      threads[threadID] = thread;\n      thread.start();\n    }\n    startingGun.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testHashCodeWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testHashCodeWithThreads().mjava","sourceNew":"  public void testHashCodeWithThreads() throws Exception {\n    final AutomatonQuery queries[] = new AutomatonQuery[atLeast(100)];\n    for (int i = 0; i < queries.length; i++) {\n      queries[i] = new AutomatonQuery(new Term(\"bogus\", \"bogus\"), AutomatonTestUtil.randomAutomaton(random()), Integer.MAX_VALUE);\n    }\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    Thread[] threads = new Thread[numThreads];\n    for (int threadID = 0; threadID < numThreads; threadID++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              for (int i = 0; i < queries.length; i++) {\n                queries[i].hashCode();\n              }\n            } catch (Exception e) {\n              Rethrow.rethrow(e);\n            }\n          }\n        };\n      threads[threadID] = thread;\n      thread.start();\n    }\n    startingGun.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":"  public void testHashCodeWithThreads() throws Exception {\n    final AutomatonQuery queries[] = new AutomatonQuery[1000];\n    for (int i = 0; i < queries.length; i++) {\n      queries[i] = new AutomatonQuery(new Term(\"bogus\", \"bogus\"), AutomatonTestUtil.randomAutomaton(random()), Integer.MAX_VALUE);\n    }\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    Thread[] threads = new Thread[numThreads];\n    for (int threadID = 0; threadID < numThreads; threadID++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              for (int i = 0; i < queries.length; i++) {\n                queries[i].hashCode();\n              }\n            } catch (Exception e) {\n              Rethrow.rethrow(e);\n            }\n          }\n        };\n      threads[threadID] = thread;\n      thread.start();\n    }\n    startingGun.countDown();\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e8cc1121331b9fb501c7fa4ebfb22fadf384d1d":["7f04837a83ac5990603e49463c653672a3a31af0"],"7f04837a83ac5990603e49463c653672a3a31af0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["4e8cc1121331b9fb501c7fa4ebfb22fadf384d1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"]},"commit2Childs":{"4e8cc1121331b9fb501c7fa4ebfb22fadf384d1d":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"7f04837a83ac5990603e49463c653672a3a31af0":["4e8cc1121331b9fb501c7fa4ebfb22fadf384d1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f04837a83ac5990603e49463c653672a3a31af0"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}