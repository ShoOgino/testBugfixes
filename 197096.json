{"path":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(Terms,AttributeSource).mjava","commits":[{"id":"e8dd2a69747e9f2922fd8b6970bd1661b26a692d","date":1291080135,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(IndexReader,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (collator == null && lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator();\n    \n    if ((lowerTerm == null || (collator == null && includeLower && \"\".equals(lowerTerm))) && upperTerm == null) {\n      return tenum;\n    }\n    return new TermRangeTermsEnum(tenum,\n        lowerTerm, upperTerm, includeLower, includeUpper, collator);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n    if (collator == null && lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    if ((lowerTerm == null || (collator == null && includeLower && \"\".equals(lowerTerm))) && upperTerm == null) {\n      // NOTE: for now, MultiTermQuery enums terms at the\n      // MultiReader level, so we must use MultiFields here:\n      final Terms terms = MultiFields.getTerms(reader, field);\n      return (terms != null) ? terms.iterator() : null;\n    }\n    return new TermRangeTermsEnum(reader, field,\n        lowerTerm, upperTerm, includeLower, includeUpper, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (collator == null && lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator();\n    \n    if ((lowerTerm == null || (collator == null && includeLower && \"\".equals(lowerTerm))) && upperTerm == null) {\n      return tenum;\n    }\n    return new TermRangeTermsEnum(tenum,\n        lowerTerm, upperTerm, includeLower, includeUpper, collator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (collator == null && lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator();\n    \n    if ((lowerTerm == null || (collator == null && includeLower && \"\".equals(lowerTerm))) && upperTerm == null) {\n      return tenum;\n    }\n    return new TermRangeTermsEnum(tenum,\n        lowerTerm, upperTerm, includeLower, includeUpper, collator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(Terms,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator();\n    \n    if ((lowerTerm == null || (includeLower && lowerTerm.length == 0)) && upperTerm == null) {\n      return tenum;\n    }\n    return new TermRangeTermsEnum(tenum,\n        lowerTerm, upperTerm, includeLower, includeUpper);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (collator == null && lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator();\n    \n    if ((lowerTerm == null || (collator == null && includeLower && \"\".equals(lowerTerm))) && upperTerm == null) {\n      return tenum;\n    }\n    return new TermRangeTermsEnum(tenum,\n        lowerTerm, upperTerm, includeLower, includeUpper, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(Terms,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator();\n    \n    if ((lowerTerm == null || (includeLower && lowerTerm.length == 0)) && upperTerm == null) {\n      return tenum;\n    }\n    return new TermRangeTermsEnum(tenum,\n        lowerTerm, upperTerm, includeLower, includeUpper);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (collator == null && lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator();\n    \n    if ((lowerTerm == null || (collator == null && includeLower && \"\".equals(lowerTerm))) && upperTerm == null) {\n      return tenum;\n    }\n    return new TermRangeTermsEnum(tenum,\n        lowerTerm, upperTerm, includeLower, includeUpper, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(Terms,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator();\n    \n    if ((lowerTerm == null || (includeLower && lowerTerm.length == 0)) && upperTerm == null) {\n      return tenum;\n    }\n    return new TermRangeTermsEnum(tenum,\n        lowerTerm, upperTerm, includeLower, includeUpper);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (collator == null && lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator();\n    \n    if ((lowerTerm == null || (collator == null && includeLower && \"\".equals(lowerTerm))) && upperTerm == null) {\n      return tenum;\n    }\n    return new TermRangeTermsEnum(tenum,\n        lowerTerm, upperTerm, includeLower, includeUpper, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(Terms,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator(null);\n    \n    if ((lowerTerm == null || (includeLower && lowerTerm.length == 0)) && upperTerm == null) {\n      return tenum;\n    }\n    return new TermRangeTermsEnum(tenum,\n        lowerTerm, upperTerm, includeLower, includeUpper);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator();\n    \n    if ((lowerTerm == null || (includeLower && lowerTerm.length == 0)) && upperTerm == null) {\n      return tenum;\n    }\n    return new TermRangeTermsEnum(tenum,\n        lowerTerm, upperTerm, includeLower, includeUpper);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#getTermsEnum(Terms,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator(null);\n    \n    if ((lowerTerm == null || (includeLower && lowerTerm.length == 0)) && upperTerm == null) {\n      return tenum;\n    }\n    return new TermRangeTermsEnum(tenum,\n        lowerTerm, upperTerm, includeLower, includeUpper);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    if (lowerTerm != null && upperTerm != null && lowerTerm.compareTo(upperTerm) > 0) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator(null);\n    \n    if ((lowerTerm == null || (includeLower && lowerTerm.length == 0)) && upperTerm == null) {\n      return tenum;\n    }\n    return new TermRangeTermsEnum(tenum,\n        lowerTerm, upperTerm, includeLower, includeUpper);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["3bb13258feba31ab676502787ab2e1779f129b7a","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e8dd2a69747e9f2922fd8b6970bd1661b26a692d","3bb13258feba31ab676502787ab2e1779f129b7a"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3cc749c053615f5871f3b95715fe292f34e70a53"],"3bb13258feba31ab676502787ab2e1779f129b7a":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["3e492fb0f2bb0b4b47208286f9331ff55963c656","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}