{"path":"solr/core/src/java/org/apache/solr/cloud/ActiveReplicaWatcher#ActiveReplicaWatcher(String,List[String],List[String],CountDownLatch).mjava","commits":[{"id":"2bcfee499548996a6e5448bbf93b8f276d010270","date":1508336936,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ActiveReplicaWatcher#ActiveReplicaWatcher(String,List[String],List[String],CountDownLatch).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct the watcher. At least one replicaId or solrCoreName must be provided.\n   * @param collection collection name\n   * @param replicaIds list of replica id-s\n   * @param solrCoreNames list of SolrCore names\n   * @param countDownLatch optional latch to await for all provided replicas to become active. This latch will be\n   *                       counted down by at most the number of provided replica id-s / SolrCore names.\n   */\n  public ActiveReplicaWatcher(String collection, List<String> replicaIds, List<String> solrCoreNames, CountDownLatch countDownLatch) {\n    if (replicaIds == null && solrCoreNames == null) {\n      throw new IllegalArgumentException(\"Either replicaId or solrCoreName must be provided.\");\n    }\n    if (replicaIds != null) {\n      this.replicaIds.addAll(replicaIds);\n    }\n    if (solrCoreNames != null) {\n      this.solrCoreNames.addAll(solrCoreNames);\n    }\n    if (this.replicaIds.isEmpty() && this.solrCoreNames.isEmpty()) {\n      throw new IllegalArgumentException(\"At least one replicaId or solrCoreName must be provided\");\n    }\n    this.collection = collection;\n    this.countDownLatch = countDownLatch;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67e503ef0f418bc92404ff5d55694087c23d48eb","date":1509025368,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ActiveReplicaWatcher#ActiveReplicaWatcher(String,List[String],List[String],SolrCloseableLatch).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ActiveReplicaWatcher#ActiveReplicaWatcher(String,List[String],List[String],CountDownLatch).mjava","sourceNew":"  /**\n   * Construct the watcher. At least one replicaId or solrCoreName must be provided.\n   * @param collection collection name\n   * @param replicaIds list of replica id-s\n   * @param solrCoreNames list of SolrCore names\n   * @param latch optional latch to await for all provided replicas to become active. This latch will be\n   *                       counted down by at most the number of provided replica id-s / SolrCore names.\n   */\n  public ActiveReplicaWatcher(String collection, List<String> replicaIds, List<String> solrCoreNames, SolrCloseableLatch latch) {\n    if (replicaIds == null && solrCoreNames == null) {\n      throw new IllegalArgumentException(\"Either replicaId or solrCoreName must be provided.\");\n    }\n    if (replicaIds != null) {\n      this.replicaIds.addAll(replicaIds);\n    }\n    if (solrCoreNames != null) {\n      this.solrCoreNames.addAll(solrCoreNames);\n    }\n    if (this.replicaIds.isEmpty() && this.solrCoreNames.isEmpty()) {\n      throw new IllegalArgumentException(\"At least one replicaId or solrCoreName must be provided\");\n    }\n    this.collection = collection;\n    this.latch = latch;\n  }\n\n","sourceOld":"  /**\n   * Construct the watcher. At least one replicaId or solrCoreName must be provided.\n   * @param collection collection name\n   * @param replicaIds list of replica id-s\n   * @param solrCoreNames list of SolrCore names\n   * @param countDownLatch optional latch to await for all provided replicas to become active. This latch will be\n   *                       counted down by at most the number of provided replica id-s / SolrCore names.\n   */\n  public ActiveReplicaWatcher(String collection, List<String> replicaIds, List<String> solrCoreNames, CountDownLatch countDownLatch) {\n    if (replicaIds == null && solrCoreNames == null) {\n      throw new IllegalArgumentException(\"Either replicaId or solrCoreName must be provided.\");\n    }\n    if (replicaIds != null) {\n      this.replicaIds.addAll(replicaIds);\n    }\n    if (solrCoreNames != null) {\n      this.solrCoreNames.addAll(solrCoreNames);\n    }\n    if (this.replicaIds.isEmpty() && this.solrCoreNames.isEmpty()) {\n      throw new IllegalArgumentException(\"At least one replicaId or solrCoreName must be provided\");\n    }\n    this.collection = collection;\n    this.countDownLatch = countDownLatch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2bcfee499548996a6e5448bbf93b8f276d010270":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["2bcfee499548996a6e5448bbf93b8f276d010270"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["67e503ef0f418bc92404ff5d55694087c23d48eb"]},"commit2Childs":{"2bcfee499548996a6e5448bbf93b8f276d010270":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2bcfee499548996a6e5448bbf93b8f276d010270"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}