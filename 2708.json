{"path":"solr/core/src/test/org/apache/solr/search/TestSolrFieldCacheMBean#testEntryList().mjava","commits":[{"id":"4a1dc89d1db9e10bf6acefd6083f0d2bfed96731","date":1458585039,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrFieldCacheMBean#testEntryList().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEntryList() throws Exception {\n    // ensure entries to FieldCache\n    assertU(adoc(\"id\", \"id0\"));\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"id asc\"), \"//*[@numFound='1']\");\n\n    SolrFieldCacheMBean mbean = new SolrFieldCacheMBean();\n    NamedList stats = mbean.getStatistics();\n    assert(new Integer(stats.get(\"entries_count\").toString()) > 0);\n    assertNotNull(stats.get(\"entry#0\"));\n\n    // Test again with entry list disabled\n    System.setProperty(\"disableSolrFieldCacheMBeanEntryList\", \"true\");\n    try {\n      mbean = new SolrFieldCacheMBean();\n      stats = mbean.getStatistics();\n      assert(new Integer(stats.get(\"entries_count\").toString()) > 0);\n      assertNull(stats.get(\"entry#0\"));\n    } finally {\n      System.clearProperty(\"disableSolrFieldCacheMBeanEntryList\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b0bba9e104010e438d33cdb0c21121f83a8cc49","date":1459882900,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrFieldCacheMBean#testEntryList().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrFieldCacheMBean#testEntryList().mjava","sourceNew":"  @Test\n  public void testEntryList() throws Exception {\n    // ensure entries to FieldCache\n    assertU(adoc(\"id\", \"id0\"));\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"id asc\"), \"//*[@numFound='1']\");\n\n    // Test with entry list enabled\n    assertEntryListIncluded(false);\n\n    // Test again with entry list disabled\n    System.setProperty(\"disableSolrFieldCacheMBeanEntryList\", \"true\");\n    try {\n      assertEntryListNotIncluded(false);\n    } finally {\n      System.clearProperty(\"disableSolrFieldCacheMBeanEntryList\");\n    }\n\n    // Test with entry list enabled for jmx\n    assertEntryListIncluded(true);\n\n    // Test with entry list disabled for jmx\n    System.setProperty(\"disableSolrFieldCacheMBeanEntryListJmx\", \"true\");\n    try {\n      assertEntryListNotIncluded(true);\n    } finally {\n      System.clearProperty(\"disableSolrFieldCacheMBeanEntryListJmx\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEntryList() throws Exception {\n    // ensure entries to FieldCache\n    assertU(adoc(\"id\", \"id0\"));\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"id asc\"), \"//*[@numFound='1']\");\n\n    SolrFieldCacheMBean mbean = new SolrFieldCacheMBean();\n    NamedList stats = mbean.getStatistics();\n    assert(new Integer(stats.get(\"entries_count\").toString()) > 0);\n    assertNotNull(stats.get(\"entry#0\"));\n\n    // Test again with entry list disabled\n    System.setProperty(\"disableSolrFieldCacheMBeanEntryList\", \"true\");\n    try {\n      mbean = new SolrFieldCacheMBean();\n      stats = mbean.getStatistics();\n      assert(new Integer(stats.get(\"entries_count\").toString()) > 0);\n      assertNull(stats.get(\"entry#0\"));\n    } finally {\n      System.clearProperty(\"disableSolrFieldCacheMBeanEntryList\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrFieldCacheMBean#testEntryList().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrFieldCacheMBean#testEntryList().mjava","sourceNew":"  @Test\n  public void testEntryList() throws Exception {\n    // ensure entries to FieldCache\n    assertU(adoc(\"id\", \"id0\"));\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"id asc\"), \"//*[@numFound='1']\");\n\n    // Test with entry list enabled\n    assertEntryListIncluded(false);\n\n    // Test again with entry list disabled\n    System.setProperty(\"disableSolrFieldCacheMBeanEntryList\", \"true\");\n    try {\n      assertEntryListNotIncluded(false);\n    } finally {\n      System.clearProperty(\"disableSolrFieldCacheMBeanEntryList\");\n    }\n\n    // Test with entry list enabled for jmx\n    assertEntryListIncluded(true);\n\n    // Test with entry list disabled for jmx\n    System.setProperty(\"disableSolrFieldCacheMBeanEntryListJmx\", \"true\");\n    try {\n      assertEntryListNotIncluded(true);\n    } finally {\n      System.clearProperty(\"disableSolrFieldCacheMBeanEntryListJmx\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEntryList() throws Exception {\n    // ensure entries to FieldCache\n    assertU(adoc(\"id\", \"id0\"));\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"id asc\"), \"//*[@numFound='1']\");\n\n    SolrFieldCacheMBean mbean = new SolrFieldCacheMBean();\n    NamedList stats = mbean.getStatistics();\n    assert(new Integer(stats.get(\"entries_count\").toString()) > 0);\n    assertNotNull(stats.get(\"entry#0\"));\n\n    // Test again with entry list disabled\n    System.setProperty(\"disableSolrFieldCacheMBeanEntryList\", \"true\");\n    try {\n      mbean = new SolrFieldCacheMBean();\n      stats = mbean.getStatistics();\n      assert(new Integer(stats.get(\"entries_count\").toString()) > 0);\n      assertNull(stats.get(\"entry#0\"));\n    } finally {\n      System.clearProperty(\"disableSolrFieldCacheMBeanEntryList\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrFieldCacheBean#testEntryList().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrFieldCacheMBean#testEntryList().mjava","sourceNew":"  @Test\n  public void testEntryList() throws Exception {\n    // ensure entries to FieldCache\n    assertU(adoc(\"id\", \"id0\"));\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"id asc\"), \"//*[@numFound='1']\");\n\n    // Test with entry list enabled\n    assertEntryListIncluded(false);\n\n    // Test again with entry list disabled\n    System.setProperty(\"disableSolrFieldCacheMBeanEntryList\", \"true\");\n    try {\n      assertEntryListNotIncluded(false);\n    } finally {\n      System.clearProperty(\"disableSolrFieldCacheMBeanEntryList\");\n    }\n\n    // Test with entry list enabled for jmx\n    assertEntryListIncluded(true);\n\n    // Test with entry list disabled for jmx\n    System.setProperty(\"disableSolrFieldCacheMBeanEntryListJmx\", \"true\");\n    try {\n      assertEntryListNotIncluded(true);\n    } finally {\n      System.clearProperty(\"disableSolrFieldCacheMBeanEntryListJmx\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEntryList() throws Exception {\n    // ensure entries to FieldCache\n    assertU(adoc(\"id\", \"id0\"));\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"id asc\"), \"//*[@numFound='1']\");\n\n    // Test with entry list enabled\n    assertEntryListIncluded(false);\n\n    // Test again with entry list disabled\n    System.setProperty(\"disableSolrFieldCacheMBeanEntryList\", \"true\");\n    try {\n      assertEntryListNotIncluded(false);\n    } finally {\n      System.clearProperty(\"disableSolrFieldCacheMBeanEntryList\");\n    }\n\n    // Test with entry list enabled for jmx\n    assertEntryListIncluded(true);\n\n    // Test with entry list disabled for jmx\n    System.setProperty(\"disableSolrFieldCacheMBeanEntryListJmx\", \"true\");\n    try {\n      assertEntryListNotIncluded(true);\n    } finally {\n      System.clearProperty(\"disableSolrFieldCacheMBeanEntryListJmx\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrFieldCacheBean#testEntryList().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrFieldCacheMBean#testEntryList().mjava","sourceNew":"  @Test\n  public void testEntryList() throws Exception {\n    // ensure entries to FieldCache\n    assertU(adoc(\"id\", \"id0\"));\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"id asc\"), \"//*[@numFound='1']\");\n\n    // Test with entry list enabled\n    assertEntryListIncluded(false);\n\n    // Test again with entry list disabled\n    System.setProperty(\"disableSolrFieldCacheMBeanEntryList\", \"true\");\n    try {\n      assertEntryListNotIncluded(false);\n    } finally {\n      System.clearProperty(\"disableSolrFieldCacheMBeanEntryList\");\n    }\n\n    // Test with entry list enabled for jmx\n    assertEntryListIncluded(true);\n\n    // Test with entry list disabled for jmx\n    System.setProperty(\"disableSolrFieldCacheMBeanEntryListJmx\", \"true\");\n    try {\n      assertEntryListNotIncluded(true);\n    } finally {\n      System.clearProperty(\"disableSolrFieldCacheMBeanEntryListJmx\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEntryList() throws Exception {\n    // ensure entries to FieldCache\n    assertU(adoc(\"id\", \"id0\"));\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"id asc\"), \"//*[@numFound='1']\");\n\n    // Test with entry list enabled\n    assertEntryListIncluded(false);\n\n    // Test again with entry list disabled\n    System.setProperty(\"disableSolrFieldCacheMBeanEntryList\", \"true\");\n    try {\n      assertEntryListNotIncluded(false);\n    } finally {\n      System.clearProperty(\"disableSolrFieldCacheMBeanEntryList\");\n    }\n\n    // Test with entry list enabled for jmx\n    assertEntryListIncluded(true);\n\n    // Test with entry list disabled for jmx\n    System.setProperty(\"disableSolrFieldCacheMBeanEntryListJmx\", \"true\");\n    try {\n      assertEntryListNotIncluded(true);\n    } finally {\n      System.clearProperty(\"disableSolrFieldCacheMBeanEntryListJmx\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["b6284684320a9808c41a5e43de958b2da22f89bd"],"4a1dc89d1db9e10bf6acefd6083f0d2bfed96731":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6284684320a9808c41a5e43de958b2da22f89bd":["4a1dc89d1db9e10bf6acefd6083f0d2bfed96731","2b0bba9e104010e438d33cdb0c21121f83a8cc49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b0bba9e104010e438d33cdb0c21121f83a8cc49":["4a1dc89d1db9e10bf6acefd6083f0d2bfed96731"],"816521ebaad5add9cb96bb88c577394e2938c40b":["b6284684320a9808c41a5e43de958b2da22f89bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"4a1dc89d1db9e10bf6acefd6083f0d2bfed96731":["b6284684320a9808c41a5e43de958b2da22f89bd","2b0bba9e104010e438d33cdb0c21121f83a8cc49"],"b6284684320a9808c41a5e43de958b2da22f89bd":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a1dc89d1db9e10bf6acefd6083f0d2bfed96731"],"2b0bba9e104010e438d33cdb0c21121f83a8cc49":["b6284684320a9808c41a5e43de958b2da22f89bd"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}