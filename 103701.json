{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDIHEndToEnd#testEndToEnd().mjava","commits":[{"id":"ece4a78db13b370d8c89da1a285b45e0107389a2","date":1336411482,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDIHEndToEnd#testEndToEnd().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEndToEnd() throws Exception {\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport-end-to-end\", request);\n    assertQ(req(\"*:*\"), \"//*[@numFound='20']\");\n    assertQ(req(\"COUNTRY_NAME:zealand\"), \"//*[@numFound='2']\");\n    assertQ(req(\"COUNTRY_NAME:niue\"), \"//*[@numFound='3']\");\n    \n    //It would be nice if there was a way to get it to run transformers before putting \n    //data in the cache, then id=2 (person=Ethan, country=NU,NA,NE) could join...)\n    //assertQ(req(\"COUNTRY_NAME:Netherlands\"), \"//*[@numFound='3']\");\n    \n    assertQ(req(\"NAME:michael\"), \"//*[@numFound='1']\");\n    assertQ(req(\"SPORT_NAME:kayaking\"), \"//*[@numFound='2']\");\n    assertQ(req(\"SPORT_NAME:fishing\"), \"//*[@numFound='1']\");\n    \n    request = lrf.makeRequest(\"indent\", \"true\");\n    String response = h.query(\"/dataimport-end-to-end\", request);\n    Matcher m = Pattern.compile(\".str name..Total Requests made to DataSource..(\\\\d+)..str.\").matcher(response);\n    Assert.assertTrue(m.find() && m.groupCount()==1);\n    int numRequests = Integer.parseInt(m.group(1));\n    Assert.assertTrue(\n        \"The database should have been hit once each \" +\n        \"for 'Person' & 'Country' and ~20 times for 'Sport'\", numRequests<30);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5101aff20e65c9a285c274627ec956eb5409d253"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5101aff20e65c9a285c274627ec956eb5409d253","date":1344005120,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDIHEndToEnd#testEndToEnd().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDIHEndToEnd#testEndToEnd().mjava","sourceNew":"  @Test\n  public void testEndToEnd() throws Exception {\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"config\", \"data-config-end-to-end.xml\",\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport-end-to-end\", request);\n    assertQ(req(\"*:*\"), \"//*[@numFound='20']\");\n    assertQ(req(\"COUNTRY_NAME:zealand\"), \"//*[@numFound='2']\");\n    assertQ(req(\"COUNTRY_NAME:niue\"), \"//*[@numFound='3']\");\n    \n    //It would be nice if there was a way to get it to run transformers before putting \n    //data in the cache, then id=2 (person=Ethan, country=NU,NA,NE) could join...)\n    //assertQ(req(\"COUNTRY_NAME:Netherlands\"), \"//*[@numFound='3']\");\n    \n    assertQ(req(\"NAME:michael\"), \"//*[@numFound='1']\");\n    assertQ(req(\"SPORT_NAME:kayaking\"), \"//*[@numFound='2']\");\n    assertQ(req(\"SPORT_NAME:fishing\"), \"//*[@numFound='1']\");\n    \n    request = lrf.makeRequest(\"indent\", \"true\");\n    String response = h.query(\"/dataimport-end-to-end\", request);\n    Matcher m = Pattern.compile(\".str name..Total Requests made to DataSource..(\\\\d+)..str.\").matcher(response);\n    Assert.assertTrue(m.find() && m.groupCount()==1);\n    int numRequests = Integer.parseInt(m.group(1));\n    Assert.assertTrue(\n        \"The database should have been hit once each \" +\n        \"for 'Person' & 'Country' and ~20 times for 'Sport'\", numRequests<30);\n  }\n\n","sourceOld":"  @Test\n  public void testEndToEnd() throws Exception {\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport-end-to-end\", request);\n    assertQ(req(\"*:*\"), \"//*[@numFound='20']\");\n    assertQ(req(\"COUNTRY_NAME:zealand\"), \"//*[@numFound='2']\");\n    assertQ(req(\"COUNTRY_NAME:niue\"), \"//*[@numFound='3']\");\n    \n    //It would be nice if there was a way to get it to run transformers before putting \n    //data in the cache, then id=2 (person=Ethan, country=NU,NA,NE) could join...)\n    //assertQ(req(\"COUNTRY_NAME:Netherlands\"), \"//*[@numFound='3']\");\n    \n    assertQ(req(\"NAME:michael\"), \"//*[@numFound='1']\");\n    assertQ(req(\"SPORT_NAME:kayaking\"), \"//*[@numFound='2']\");\n    assertQ(req(\"SPORT_NAME:fishing\"), \"//*[@numFound='1']\");\n    \n    request = lrf.makeRequest(\"indent\", \"true\");\n    String response = h.query(\"/dataimport-end-to-end\", request);\n    Matcher m = Pattern.compile(\".str name..Total Requests made to DataSource..(\\\\d+)..str.\").matcher(response);\n    Assert.assertTrue(m.find() && m.groupCount()==1);\n    int numRequests = Integer.parseInt(m.group(1));\n    Assert.assertTrue(\n        \"The database should have been hit once each \" +\n        \"for 'Person' & 'Country' and ~20 times for 'Sport'\", numRequests<30);\n  }\n\n","bugFix":["ece4a78db13b370d8c89da1a285b45e0107389a2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDIHEndToEnd#testEndToEnd().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDIHEndToEnd#testEndToEnd().mjava","sourceNew":"  @Test\n  public void testEndToEnd() throws Exception {\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"config\", \"data-config-end-to-end.xml\",\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport-end-to-end\", request);\n    assertQ(req(\"*:*\"), \"//*[@numFound='20']\");\n    assertQ(req(\"COUNTRY_NAME:zealand\"), \"//*[@numFound='2']\");\n    assertQ(req(\"COUNTRY_NAME:niue\"), \"//*[@numFound='3']\");\n    \n    //It would be nice if there was a way to get it to run transformers before putting \n    //data in the cache, then id=2 (person=Ethan, country=NU,NA,NE) could join...)\n    //assertQ(req(\"COUNTRY_NAME:Netherlands\"), \"//*[@numFound='3']\");\n    \n    assertQ(req(\"NAME:michael\"), \"//*[@numFound='1']\");\n    assertQ(req(\"SPORT_NAME:kayaking\"), \"//*[@numFound='2']\");\n    assertQ(req(\"SPORT_NAME:fishing\"), \"//*[@numFound='1']\");\n    \n    request = lrf.makeRequest(\"indent\", \"true\");\n    String response = h.query(\"/dataimport-end-to-end\", request);\n    Matcher m = Pattern.compile(\".str name..Total Requests made to DataSource..(\\\\d+)..str.\").matcher(response);\n    Assert.assertTrue(m.find() && m.groupCount()==1);\n    int numRequests = Integer.parseInt(m.group(1));\n    Assert.assertTrue(\n        \"The database should have been hit once each \" +\n        \"for 'Person' & 'Country' and ~20 times for 'Sport'\", numRequests<30);\n  }\n\n","sourceOld":"  @Test\n  public void testEndToEnd() throws Exception {\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport-end-to-end\", request);\n    assertQ(req(\"*:*\"), \"//*[@numFound='20']\");\n    assertQ(req(\"COUNTRY_NAME:zealand\"), \"//*[@numFound='2']\");\n    assertQ(req(\"COUNTRY_NAME:niue\"), \"//*[@numFound='3']\");\n    \n    //It would be nice if there was a way to get it to run transformers before putting \n    //data in the cache, then id=2 (person=Ethan, country=NU,NA,NE) could join...)\n    //assertQ(req(\"COUNTRY_NAME:Netherlands\"), \"//*[@numFound='3']\");\n    \n    assertQ(req(\"NAME:michael\"), \"//*[@numFound='1']\");\n    assertQ(req(\"SPORT_NAME:kayaking\"), \"//*[@numFound='2']\");\n    assertQ(req(\"SPORT_NAME:fishing\"), \"//*[@numFound='1']\");\n    \n    request = lrf.makeRequest(\"indent\", \"true\");\n    String response = h.query(\"/dataimport-end-to-end\", request);\n    Matcher m = Pattern.compile(\".str name..Total Requests made to DataSource..(\\\\d+)..str.\").matcher(response);\n    Assert.assertTrue(m.find() && m.groupCount()==1);\n    int numRequests = Integer.parseInt(m.group(1));\n    Assert.assertTrue(\n        \"The database should have been hit once each \" +\n        \"for 'Person' & 'Country' and ~20 times for 'Sport'\", numRequests<30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDIHEndToEnd#testEndToEnd().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDIHEndToEnd#testEndToEnd().mjava","sourceNew":"  @Test\n  public void testEndToEnd() throws Exception {\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"config\", \"data-config-end-to-end.xml\",\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport-end-to-end\", request);\n    assertQ(req(\"*:*\"), \"//*[@numFound='20']\");\n    assertQ(req(\"COUNTRY_NAME:zealand\"), \"//*[@numFound='2']\");\n    assertQ(req(\"COUNTRY_NAME:niue\"), \"//*[@numFound='3']\");\n    \n    //It would be nice if there was a way to get it to run transformers before putting \n    //data in the cache, then id=2 (person=Ethan, country=NU,NA,NE) could join...)\n    //assertQ(req(\"COUNTRY_NAME:Netherlands\"), \"//*[@numFound='3']\");\n    \n    assertQ(req(\"NAME:michael\"), \"//*[@numFound='1']\");\n    assertQ(req(\"SPORT_NAME:kayaking\"), \"//*[@numFound='2']\");\n    assertQ(req(\"SPORT_NAME:fishing\"), \"//*[@numFound='1']\");\n    \n    request = lrf.makeRequest(\"indent\", \"true\");\n    String response = h.query(\"/dataimport-end-to-end\", request);\n    Matcher m = Pattern.compile(\".str name..Total Requests made to DataSource..(\\\\d+)..str.\").matcher(response);\n    Assert.assertTrue(m.find() && m.groupCount()==1);\n    int numRequests = Integer.parseInt(m.group(1));\n    Assert.assertTrue(\n        \"The database should have been hit once each \" +\n        \"for 'Person' & 'Country' and ~20 times for 'Sport'\", numRequests<30);\n  }\n\n","sourceOld":"  @Test\n  public void testEndToEnd() throws Exception {\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport-end-to-end\", request);\n    assertQ(req(\"*:*\"), \"//*[@numFound='20']\");\n    assertQ(req(\"COUNTRY_NAME:zealand\"), \"//*[@numFound='2']\");\n    assertQ(req(\"COUNTRY_NAME:niue\"), \"//*[@numFound='3']\");\n    \n    //It would be nice if there was a way to get it to run transformers before putting \n    //data in the cache, then id=2 (person=Ethan, country=NU,NA,NE) could join...)\n    //assertQ(req(\"COUNTRY_NAME:Netherlands\"), \"//*[@numFound='3']\");\n    \n    assertQ(req(\"NAME:michael\"), \"//*[@numFound='1']\");\n    assertQ(req(\"SPORT_NAME:kayaking\"), \"//*[@numFound='2']\");\n    assertQ(req(\"SPORT_NAME:fishing\"), \"//*[@numFound='1']\");\n    \n    request = lrf.makeRequest(\"indent\", \"true\");\n    String response = h.query(\"/dataimport-end-to-end\", request);\n    Matcher m = Pattern.compile(\".str name..Total Requests made to DataSource..(\\\\d+)..str.\").matcher(response);\n    Assert.assertTrue(m.find() && m.groupCount()==1);\n    int numRequests = Integer.parseInt(m.group(1));\n    Assert.assertTrue(\n        \"The database should have been hit once each \" +\n        \"for 'Person' & 'Country' and ~20 times for 'Sport'\", numRequests<30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDIHEndToEnd#testEndToEnd().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDIHEndToEnd#testEndToEnd().mjava","sourceNew":"  @Test\n  public void testEndToEnd() throws Exception {\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"config\", \"data-config-end-to-end.xml\",\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport-end-to-end\", request);\n    assertQ(req(\"*:*\"), \"//*[@numFound='20']\");\n    assertQ(req(\"COUNTRY_NAME:zealand\"), \"//*[@numFound='2']\");\n    assertQ(req(\"COUNTRY_NAME:niue\"), \"//*[@numFound='3']\");\n    \n    //It would be nice if there was a way to get it to run transformers before putting\n    //data in the cache, then id=2 (person=Ethan, country=NU,NA,NE) could join...)\n    //assertQ(req(\"COUNTRY_NAME:Netherlands\"), \"//*[@numFound='3']\");\n    \n    assertQ(req(\"NAME:michael\"), \"//*[@numFound='1']\");\n    assertQ(req(\"SPORT_NAME:kayaking\"), \"//*[@numFound='2']\");\n    assertQ(req(\"SPORT_NAME:fishing\"), \"//*[@numFound='1']\");\n    \n    request = lrf.makeRequest(\"indent\", \"true\");\n    String response = h.query(\"/dataimport-end-to-end\", request);\n    Matcher m = Pattern.compile(\".str name..Total Requests made to DataSource..(\\\\d+)..str.\").matcher(response);\n    Assert.assertTrue(m.find() && m.groupCount()==1);\n    int numRequests = Integer.parseInt(m.group(1));\n    Assert.assertTrue(\n        \"The database should have been hit once each \" +\n        \"for 'Person' & 'Country' and ~20 times for 'Sport'\", numRequests<30);\n  }\n\n","sourceOld":"  @Test\n  public void testEndToEnd() throws Exception {\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"config\", \"data-config-end-to-end.xml\",\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport-end-to-end\", request);\n    assertQ(req(\"*:*\"), \"//*[@numFound='20']\");\n    assertQ(req(\"COUNTRY_NAME:zealand\"), \"//*[@numFound='2']\");\n    assertQ(req(\"COUNTRY_NAME:niue\"), \"//*[@numFound='3']\");\n    \n    //It would be nice if there was a way to get it to run transformers before putting \n    //data in the cache, then id=2 (person=Ethan, country=NU,NA,NE) could join...)\n    //assertQ(req(\"COUNTRY_NAME:Netherlands\"), \"//*[@numFound='3']\");\n    \n    assertQ(req(\"NAME:michael\"), \"//*[@numFound='1']\");\n    assertQ(req(\"SPORT_NAME:kayaking\"), \"//*[@numFound='2']\");\n    assertQ(req(\"SPORT_NAME:fishing\"), \"//*[@numFound='1']\");\n    \n    request = lrf.makeRequest(\"indent\", \"true\");\n    String response = h.query(\"/dataimport-end-to-end\", request);\n    Matcher m = Pattern.compile(\".str name..Total Requests made to DataSource..(\\\\d+)..str.\").matcher(response);\n    Assert.assertTrue(m.find() && m.groupCount()==1);\n    int numRequests = Integer.parseInt(m.group(1));\n    Assert.assertTrue(\n        \"The database should have been hit once each \" +\n        \"for 'Person' & 'Country' and ~20 times for 'Sport'\", numRequests<30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"baf341ad3a1a8fb73fb37091af85f8aef0398367","date":1352222680,"type":4,"author":"James Dyer","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDIHEndToEnd#testEndToEnd().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEndToEnd() throws Exception {\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"config\", \"data-config-end-to-end.xml\",\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport-end-to-end\", request);\n    assertQ(req(\"*:*\"), \"//*[@numFound='20']\");\n    assertQ(req(\"COUNTRY_NAME:zealand\"), \"//*[@numFound='2']\");\n    assertQ(req(\"COUNTRY_NAME:niue\"), \"//*[@numFound='3']\");\n    \n    //It would be nice if there was a way to get it to run transformers before putting\n    //data in the cache, then id=2 (person=Ethan, country=NU,NA,NE) could join...)\n    //assertQ(req(\"COUNTRY_NAME:Netherlands\"), \"//*[@numFound='3']\");\n    \n    assertQ(req(\"NAME:michael\"), \"//*[@numFound='1']\");\n    assertQ(req(\"SPORT_NAME:kayaking\"), \"//*[@numFound='2']\");\n    assertQ(req(\"SPORT_NAME:fishing\"), \"//*[@numFound='1']\");\n    \n    request = lrf.makeRequest(\"indent\", \"true\");\n    String response = h.query(\"/dataimport-end-to-end\", request);\n    Matcher m = Pattern.compile(\".str name..Total Requests made to DataSource..(\\\\d+)..str.\").matcher(response);\n    Assert.assertTrue(m.find() && m.groupCount()==1);\n    int numRequests = Integer.parseInt(m.group(1));\n    Assert.assertTrue(\n        \"The database should have been hit once each \" +\n        \"for 'Person' & 'Country' and ~20 times for 'Sport'\", numRequests<30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa64435b5902ce266c23755a4a00691a3285dab8":["5101aff20e65c9a285c274627ec956eb5409d253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["ece4a78db13b370d8c89da1a285b45e0107389a2","5101aff20e65c9a285c274627ec956eb5409d253"],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["fa64435b5902ce266c23755a4a00691a3285dab8"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["ece4a78db13b370d8c89da1a285b45e0107389a2","5101aff20e65c9a285c274627ec956eb5409d253"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["baf341ad3a1a8fb73fb37091af85f8aef0398367"],"5101aff20e65c9a285c274627ec956eb5409d253":["ece4a78db13b370d8c89da1a285b45e0107389a2"],"ece4a78db13b370d8c89da1a285b45e0107389a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fa64435b5902ce266c23755a4a00691a3285dab8":["baf341ad3a1a8fb73fb37091af85f8aef0398367"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ece4a78db13b370d8c89da1a285b45e0107389a2"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"5101aff20e65c9a285c274627ec956eb5409d253":["fa64435b5902ce266c23755a4a00691a3285dab8","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"ece4a78db13b370d8c89da1a285b45e0107389a2":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","5101aff20e65c9a285c274627ec956eb5409d253"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}