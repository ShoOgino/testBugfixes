{"path":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToObject().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToObject().mjava","pathOld":"solr/src/test/org/apache/solr/schema/DateFieldTest#testToObject().mjava","sourceNew":"  // as of Solr1.3\n  public void testToObject() throws Exception {\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987666Z\");\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987Z\");\n    assertToObject(820454399980l, \"1995-12-31T23:59:59.98Z\");\n    assertToObject(820454399900l, \"1995-12-31T23:59:59.9Z\");\n    assertToObject(820454399000l, \"1995-12-31T23:59:59Z\");\n  }\n\n","sourceOld":"  // as of Solr1.3\n  public void testToObject() throws Exception {\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987666Z\");\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987Z\");\n    assertToObject(820454399980l, \"1995-12-31T23:59:59.98Z\");\n    assertToObject(820454399900l, \"1995-12-31T23:59:59.9Z\");\n    assertToObject(820454399000l, \"1995-12-31T23:59:59Z\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToObject().mjava","pathOld":"solr/src/test/org/apache/solr/schema/DateFieldTest#testToObject().mjava","sourceNew":"  // as of Solr1.3\n  public void testToObject() throws Exception {\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987666Z\");\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987Z\");\n    assertToObject(820454399980l, \"1995-12-31T23:59:59.98Z\");\n    assertToObject(820454399900l, \"1995-12-31T23:59:59.9Z\");\n    assertToObject(820454399000l, \"1995-12-31T23:59:59Z\");\n  }\n\n","sourceOld":"  // as of Solr1.3\n  public void testToObject() throws Exception {\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987666Z\");\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987Z\");\n    assertToObject(820454399980l, \"1995-12-31T23:59:59.98Z\");\n    assertToObject(820454399900l, \"1995-12-31T23:59:59.9Z\");\n    assertToObject(820454399000l, \"1995-12-31T23:59:59Z\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToObject().mjava","pathOld":"solr/src/test/org/apache/solr/schema/DateFieldTest#testToObject().mjava","sourceNew":"  // as of Solr1.3\n  public void testToObject() throws Exception {\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987666Z\");\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987Z\");\n    assertToObject(820454399980l, \"1995-12-31T23:59:59.98Z\");\n    assertToObject(820454399900l, \"1995-12-31T23:59:59.9Z\");\n    assertToObject(820454399000l, \"1995-12-31T23:59:59Z\");\n  }\n\n","sourceOld":"  // as of Solr1.3\n  public void testToObject() throws Exception {\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987666Z\");\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987Z\");\n    assertToObject(820454399980l, \"1995-12-31T23:59:59.98Z\");\n    assertToObject(820454399900l, \"1995-12-31T23:59:59.9Z\");\n    assertToObject(820454399000l, \"1995-12-31T23:59:59Z\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"461fea4b90072bede0ef2dc0dba66a8c5dbf1356","date":1316194960,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToObject().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToObject().mjava","sourceNew":"  // as of Solr1.3\n  public void testToObject() throws Exception {\n\n    // just after epoch\n    assertToObject(  5L, \"1970-01-01T00:00:00.005Z\");\n    assertToObject(  0L, \"1970-01-01T00:00:00Z\");\n    assertToObject(370L, \"1970-01-01T00:00:00.37Z\");\n    assertToObject(900L, \"1970-01-01T00:00:00.9Z\");\n\n    // well after epoch\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987666Z\");\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987Z\");\n    assertToObject(820454399980l, \"1995-12-31T23:59:59.98Z\");\n    assertToObject(820454399900l, \"1995-12-31T23:59:59.9Z\");\n    assertToObject(820454399000l, \"1995-12-31T23:59:59Z\");\n\n    // waaaay after epoch\n    assertToObject(327434918399005L, \"12345-12-31T23:59:59.005Z\");\n    assertToObject(327434918399000L, \"12345-12-31T23:59:59Z\");\n    assertToObject(327434918399370L, \"12345-12-31T23:59:59.37Z\");\n    assertToObject(327434918399900L, \"12345-12-31T23:59:59.9Z\");\n\n    // well before epoch\n    assertToObject(-52700112001000L, \"0299-12-31T23:59:59Z\");\n    assertToObject(-52700112000877L, \"0299-12-31T23:59:59.123Z\");\n    assertToObject(-52700112000910L, \"0299-12-31T23:59:59.09Z\");\n\n    // flexible in parsing years less then 4 digits\n    assertToObject(-52700112001000L,  \"299-12-31T23:59:59Z\");\n\n  }\n\n","sourceOld":"  // as of Solr1.3\n  public void testToObject() throws Exception {\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987666Z\");\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987Z\");\n    assertToObject(820454399980l, \"1995-12-31T23:59:59.98Z\");\n    assertToObject(820454399900l, \"1995-12-31T23:59:59.9Z\");\n    assertToObject(820454399000l, \"1995-12-31T23:59:59Z\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testToObject().mjava","sourceNew":null,"sourceOld":"  // as of Solr1.3\n  public void testToObject() throws Exception {\n\n    // just after epoch\n    assertToObject(  5L, \"1970-01-01T00:00:00.005Z\");\n    assertToObject(  0L, \"1970-01-01T00:00:00Z\");\n    assertToObject(370L, \"1970-01-01T00:00:00.37Z\");\n    assertToObject(900L, \"1970-01-01T00:00:00.9Z\");\n\n    // well after epoch\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987666Z\");\n    assertToObject(820454399987l, \"1995-12-31T23:59:59.987Z\");\n    assertToObject(820454399980l, \"1995-12-31T23:59:59.98Z\");\n    assertToObject(820454399900l, \"1995-12-31T23:59:59.9Z\");\n    assertToObject(820454399000l, \"1995-12-31T23:59:59Z\");\n\n    // waaaay after epoch\n    assertToObject(327434918399005L, \"12345-12-31T23:59:59.005Z\");\n    assertToObject(327434918399000L, \"12345-12-31T23:59:59Z\");\n    assertToObject(327434918399370L, \"12345-12-31T23:59:59.37Z\");\n    assertToObject(327434918399900L, \"12345-12-31T23:59:59.9Z\");\n\n    // well before epoch\n    assertToObject(-52700112001000L, \"0299-12-31T23:59:59Z\");\n    assertToObject(-52700112000877L, \"0299-12-31T23:59:59.123Z\");\n    assertToObject(-52700112000910L, \"0299-12-31T23:59:59.09Z\");\n\n    // flexible in parsing years less then 4 digits\n    assertToObject(-52700112001000L,  \"299-12-31T23:59:59Z\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["461fea4b90072bede0ef2dc0dba66a8c5dbf1356"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"461fea4b90072bede0ef2dc0dba66a8c5dbf1356":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2106271e380c198349e0f6eac0395bb462913fab"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"2106271e380c198349e0f6eac0395bb462913fab":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["461fea4b90072bede0ef2dc0dba66a8c5dbf1356"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"461fea4b90072bede0ef2dc0dba66a8c5dbf1356":["2106271e380c198349e0f6eac0395bb462913fab"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}