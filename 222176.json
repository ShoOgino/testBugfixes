{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyParams(int,int,double,long).mjava","commits":[{"id":"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca","date":1457777566,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyParams(int,int,double,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyParams(int,int,double).mjava","sourceNew":"  public static void verifyParams(int numDims, int maxPointsInLeafNode, double maxMBSortInHeap, long totalPointCount) {\n    // We encode dim in a single byte in the splitPackedValues, but we only expose 4 bits for it now, in case we want to use\n    // remaining 4 bits for another purpose later\n    if (numDims < 1 || numDims > MAX_DIMS) {\n      throw new IllegalArgumentException(\"numDims must be 1 .. \" + MAX_DIMS + \" (got: \" + numDims + \")\");\n    }\n    if (maxPointsInLeafNode <= 0) {\n      throw new IllegalArgumentException(\"maxPointsInLeafNode must be > 0; got \" + maxPointsInLeafNode);\n    }\n    if (maxPointsInLeafNode > ArrayUtil.MAX_ARRAY_LENGTH) {\n      throw new IllegalArgumentException(\"maxPointsInLeafNode must be <= ArrayUtil.MAX_ARRAY_LENGTH (= \" + ArrayUtil.MAX_ARRAY_LENGTH + \"); got \" + maxPointsInLeafNode);\n    }\n    if (maxMBSortInHeap < 0.0) {\n      throw new IllegalArgumentException(\"maxMBSortInHeap must be >= 0.0 (got: \" + maxMBSortInHeap + \")\");\n    }\n    if (totalPointCount < 0) {\n      throw new IllegalArgumentException(\"totalPointCount must be >=0 (got: \" + totalPointCount + \")\");\n    }\n  }\n\n","sourceOld":"  public static void verifyParams(int numDims, int maxPointsInLeafNode, double maxMBSortInHeap) {\n    // We encode dim in a single byte in the splitPackedValues, but we only expose 4 bits for it now, in case we want to use\n    // remaining 4 bits for another purpose later\n    if (numDims < 1 || numDims > MAX_DIMS) {\n      throw new IllegalArgumentException(\"numDims must be 1 .. \" + MAX_DIMS + \" (got: \" + numDims + \")\");\n    }\n    if (maxPointsInLeafNode <= 0) {\n      throw new IllegalArgumentException(\"maxPointsInLeafNode must be > 0; got \" + maxPointsInLeafNode);\n    }\n    if (maxPointsInLeafNode > ArrayUtil.MAX_ARRAY_LENGTH) {\n      throw new IllegalArgumentException(\"maxPointsInLeafNode must be <= ArrayUtil.MAX_ARRAY_LENGTH (= \" + ArrayUtil.MAX_ARRAY_LENGTH + \"); got \" + maxPointsInLeafNode);\n    }\n    if (maxMBSortInHeap < 0.0) {\n      throw new IllegalArgumentException(\"maxMBSortInHeap must be >= 0.0 (got: \" + maxMBSortInHeap + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":4,"author":"Nicholas Knize","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyParams(int,int,double,long).mjava","sourceNew":null,"sourceOld":"  public static void verifyParams(int numDims, int maxPointsInLeafNode, double maxMBSortInHeap, long totalPointCount) {\n    // We encode dim in a single byte in the splitPackedValues, but we only expose 4 bits for it now, in case we want to use\n    // remaining 4 bits for another purpose later\n    if (numDims < 1 || numDims > MAX_DIMS) {\n      throw new IllegalArgumentException(\"numDims must be 1 .. \" + MAX_DIMS + \" (got: \" + numDims + \")\");\n    }\n    if (maxPointsInLeafNode <= 0) {\n      throw new IllegalArgumentException(\"maxPointsInLeafNode must be > 0; got \" + maxPointsInLeafNode);\n    }\n    if (maxPointsInLeafNode > ArrayUtil.MAX_ARRAY_LENGTH) {\n      throw new IllegalArgumentException(\"maxPointsInLeafNode must be <= ArrayUtil.MAX_ARRAY_LENGTH (= \" + ArrayUtil.MAX_ARRAY_LENGTH + \"); got \" + maxPointsInLeafNode);\n    }\n    if (maxMBSortInHeap < 0.0) {\n      throw new IllegalArgumentException(\"maxMBSortInHeap must be >= 0.0 (got: \" + maxMBSortInHeap + \")\");\n    }\n    if (totalPointCount < 0) {\n      throw new IllegalArgumentException(\"totalPointCount must be >=0 (got: \" + totalPointCount + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6652c943595e92c187ee904c382863013eae28f":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6652c943595e92c187ee904c382863013eae28f"]},"commit2Childs":{"f6652c943595e92c187ee904c382863013eae28f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["f6652c943595e92c187ee904c382863013eae28f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}