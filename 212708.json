{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacetsStats().mjava","commits":[{"id":"4c18a95e9168a30be855f5d5e7d61a863186fdc5","date":1415142581,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacetsStats().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPivotFacetsStats() throws Exception {\n    SolrServer server = getSolrServer();\n\n    // Empty the database...\n    server.deleteByQuery(\"*:*\");// delete everything!\n    server.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    int id = 1;\n    ArrayList<SolrInputDocument> docs = new ArrayList<>();\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"apple\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 12, \"price\", .017));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"lg\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 13, \"price\", 16.04));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"samsung\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 14, \"price\", 12.34));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"lg\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 24, \"price\", 51.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"nokia\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 28, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 32));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"htc\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 31, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"apple\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 36));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"lg\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 37, \"price\", 1.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 38, \"price\", 47.98));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"b\", \"inStock\", true, \"popularity\", -38));\n    docs.add(makeTestDoc(\"id\", id++, \"cat\", \"b\")); // something not matching all fields\n    server.add(docs);\n    server.commit();\n\n    for (String pivot : new String[] { \"{!key=pivot_key stats=s1}features,manu\",\n                                       \"{!key=pivot_key stats=s1}features,manu,cat\",\n                                       \"{!key=pivot_key stats=s1}features,manu,cat,inStock\"\n      }) {\n\n      // for any of these pivot params, the assertions we check should be teh same\n      // (we stop asserting at the \"manu\" level)\n      \n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.addFacetPivotField(pivot);\n      query.setFacetLimit(1);\n      query.addGetFieldStatistics(\"{!key=foo_price tag=s1}price\", \"{!tag=s1}popularity\");\n      query.setFacetMinCount(0);\n      query.setRows(0);\n\n      QueryResponse rsp = server.query(query);\n\n      // check top (ie: non-pivot) stats\n      Map<String, FieldStatsInfo> map = rsp.getFieldStatsInfo();\n      FieldStatsInfo intValueStatsInfo = map.get(\"popularity\");\n      assertEquals(-38.0d, intValueStatsInfo.getMin());\n      assertEquals(38.0d, intValueStatsInfo.getMax());\n      assertEquals(11l, intValueStatsInfo.getCount().longValue());\n      assertEquals(1l, intValueStatsInfo.getMissing().longValue());\n      assertEquals(227.0d, intValueStatsInfo.getSum());\n      assertEquals(20.636363636363637d, intValueStatsInfo.getMean());\n      \n      FieldStatsInfo doubleValueStatsInfo = map.get(\"foo_price\");\n      assertEquals(.017d, (double) doubleValueStatsInfo.getMin(), .01d);\n      assertEquals(131.39d, (double) doubleValueStatsInfo.getMax(), .01d);\n      assertEquals(8l, doubleValueStatsInfo.getCount().longValue());\n      assertEquals(4l, doubleValueStatsInfo.getMissing().longValue());\n      assertEquals(391.93d, (double) doubleValueStatsInfo.getSum(), .01d);\n      assertEquals(48.99d, (double) doubleValueStatsInfo.getMean(), .01d);\n\n      // now get deeper and look at the pivots...\n\n      NamedList<List<PivotField>> pivots = rsp.getFacetPivot();\n      assertTrue( ! pivots.get(\"pivot_key\").isEmpty() );\n\n      List<PivotField> list = pivots.get(\"pivot_key\");\n      PivotField featuresBBBPivot = list.get(0);\n      assertEquals(\"features\", featuresBBBPivot.getField());\n      assertEquals(\"bbb\", featuresBBBPivot.getValue());\n      assertNotNull(featuresBBBPivot.getFieldStatsInfo());\n      assertEquals(2, featuresBBBPivot.getFieldStatsInfo().size());\n      \n      FieldStatsInfo featuresBBBPivotStats1 = featuresBBBPivot.getFieldStatsInfo().get(\"foo_price\");\n      assertEquals(\"foo_price\", featuresBBBPivotStats1.getName());\n      assertEquals(131.39d, (double) featuresBBBPivotStats1.getMax(), .01d);\n      assertEquals(1.38d, (double) featuresBBBPivotStats1.getMin(), .01d);\n      assertEquals(180.75d, (double) featuresBBBPivotStats1.getSum(), .01d);\n      assertEquals(3, (long) featuresBBBPivotStats1.getCount());\n      assertEquals(3, (long) featuresBBBPivotStats1.getMissing());\n      assertEquals(60.25d, (double) featuresBBBPivotStats1.getMean(), .01d);\n      assertEquals(65.86d, featuresBBBPivotStats1.getStddev(), .01d);\n      assertEquals(19567.34d, featuresBBBPivotStats1.getSumOfSquares(), .01d);\n      \n      FieldStatsInfo featuresBBBPivotStats2 = featuresBBBPivot.getFieldStatsInfo().get(\"popularity\");\n      assertEquals(\"popularity\", featuresBBBPivotStats2.getName());\n      assertEquals(38.0d, (double) featuresBBBPivotStats2.getMax(), .01d);\n      assertEquals(-38.0d, (double) featuresBBBPivotStats2.getMin(), .01d);\n      assertEquals(136.0d, (double) featuresBBBPivotStats2.getSum(), .01d);\n      assertEquals(6, (long) featuresBBBPivotStats2.getCount());\n      assertEquals(0, (long) featuresBBBPivotStats2.getMissing());\n      assertEquals(22.66d, (double) featuresBBBPivotStats2.getMean(), .01d);\n      assertEquals(29.85d, featuresBBBPivotStats2.getStddev(), .01d);\n      assertEquals(7538.0d, featuresBBBPivotStats2.getSumOfSquares(), .01d);\n      \n      List<PivotField> nestedPivotList = featuresBBBPivot.getPivot();\n      PivotField featuresBBBPivotPivot = nestedPivotList.get(0);\n      assertEquals(\"manu\", featuresBBBPivotPivot.getField());\n      assertEquals(\"ztc\", featuresBBBPivotPivot.getValue());\n      assertNotNull(featuresBBBPivotPivot.getFieldStatsInfo());\n      assertEquals(2, featuresBBBPivotPivot.getFieldStatsInfo().size());\n      \n      FieldStatsInfo featuresBBBManuZtcPivotStats1 = featuresBBBPivotPivot.getFieldStatsInfo().get(\"foo_price\");\n      assertEquals(\"foo_price\", featuresBBBManuZtcPivotStats1.getName());\n      assertEquals(47.97d, (double) featuresBBBManuZtcPivotStats1.getMax(), .01d);\n      assertEquals(47.97d, (double) featuresBBBManuZtcPivotStats1.getMin(), .01d);\n      assertEquals(47.97d, (double) featuresBBBManuZtcPivotStats1.getSum(), .01d);\n      assertEquals(1, (long) featuresBBBManuZtcPivotStats1.getCount());\n      assertEquals(2, (long) featuresBBBManuZtcPivotStats1.getMissing());\n      assertEquals(47.97d, (double) featuresBBBManuZtcPivotStats1.getMean(), .01d);\n      assertEquals(0.0d, featuresBBBManuZtcPivotStats1.getStddev(), .01d);\n      assertEquals(2302.08d, featuresBBBManuZtcPivotStats1.getSumOfSquares(), .01d);\n      \n      \n      FieldStatsInfo featuresBBBManuZtcPivotStats2 = featuresBBBPivotPivot.getFieldStatsInfo().get(\"popularity\");\n      assertEquals(\"popularity\", featuresBBBManuZtcPivotStats2.getName());\n      assertEquals(38.0d, (double) featuresBBBManuZtcPivotStats2.getMax(), .01d);\n      assertEquals(-38.0d, (double) featuresBBBManuZtcPivotStats2.getMin(), .01d);\n      assertEquals(32.0, (double) featuresBBBManuZtcPivotStats2.getSum(), .01d);\n      assertEquals(3, (long) featuresBBBManuZtcPivotStats2.getCount());\n      assertEquals(0, (long) featuresBBBManuZtcPivotStats2.getMissing());\n      assertEquals(10.66d, (double) featuresBBBManuZtcPivotStats2.getMean(), .01d);\n      assertEquals(42.25d, featuresBBBManuZtcPivotStats2.getStddev(), .01d);\n      assertEquals(3912.0d, featuresBBBManuZtcPivotStats2.getSumOfSquares(), .01d);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacetsStats().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testPivotFacetsStats().mjava","sourceNew":"  @Test\n  public void testPivotFacetsStats() throws Exception {\n    SolrClient client = getSolrClient();\n\n    // Empty the database...\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    int id = 1;\n    ArrayList<SolrInputDocument> docs = new ArrayList<>();\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"apple\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 12, \"price\", .017));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"lg\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 13, \"price\", 16.04));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"samsung\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 14, \"price\", 12.34));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"lg\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 24, \"price\", 51.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"nokia\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 28, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 32));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"htc\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 31, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"apple\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 36));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"lg\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 37, \"price\", 1.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 38, \"price\", 47.98));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"b\", \"inStock\", true, \"popularity\", -38));\n    docs.add(makeTestDoc(\"id\", id++, \"cat\", \"b\")); // something not matching all fields\n    client.add(docs);\n    client.commit();\n\n    for (String pivot : new String[] { \"{!key=pivot_key stats=s1}features,manu\",\n                                       \"{!key=pivot_key stats=s1}features,manu,cat\",\n                                       \"{!key=pivot_key stats=s1}features,manu,cat,inStock\"\n      }) {\n\n      // for any of these pivot params, the assertions we check should be teh same\n      // (we stop asserting at the \"manu\" level)\n      \n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.addFacetPivotField(pivot);\n      query.setFacetLimit(1);\n      query.addGetFieldStatistics(\"{!key=foo_price tag=s1}price\", \"{!tag=s1}popularity\");\n      query.setFacetMinCount(0);\n      query.setRows(0);\n\n      QueryResponse rsp = client.query(query);\n\n      // check top (ie: non-pivot) stats\n      Map<String, FieldStatsInfo> map = rsp.getFieldStatsInfo();\n      FieldStatsInfo intValueStatsInfo = map.get(\"popularity\");\n      assertEquals(-38.0d, intValueStatsInfo.getMin());\n      assertEquals(38.0d, intValueStatsInfo.getMax());\n      assertEquals(11l, intValueStatsInfo.getCount().longValue());\n      assertEquals(1l, intValueStatsInfo.getMissing().longValue());\n      assertEquals(227.0d, intValueStatsInfo.getSum());\n      assertEquals(20.636363636363637d, intValueStatsInfo.getMean());\n      \n      FieldStatsInfo doubleValueStatsInfo = map.get(\"foo_price\");\n      assertEquals(.017d, (double) doubleValueStatsInfo.getMin(), .01d);\n      assertEquals(131.39d, (double) doubleValueStatsInfo.getMax(), .01d);\n      assertEquals(8l, doubleValueStatsInfo.getCount().longValue());\n      assertEquals(4l, doubleValueStatsInfo.getMissing().longValue());\n      assertEquals(391.93d, (double) doubleValueStatsInfo.getSum(), .01d);\n      assertEquals(48.99d, (double) doubleValueStatsInfo.getMean(), .01d);\n\n      // now get deeper and look at the pivots...\n\n      NamedList<List<PivotField>> pivots = rsp.getFacetPivot();\n      assertTrue( ! pivots.get(\"pivot_key\").isEmpty() );\n\n      List<PivotField> list = pivots.get(\"pivot_key\");\n      PivotField featuresBBBPivot = list.get(0);\n      assertEquals(\"features\", featuresBBBPivot.getField());\n      assertEquals(\"bbb\", featuresBBBPivot.getValue());\n      assertNotNull(featuresBBBPivot.getFieldStatsInfo());\n      assertEquals(2, featuresBBBPivot.getFieldStatsInfo().size());\n      \n      FieldStatsInfo featuresBBBPivotStats1 = featuresBBBPivot.getFieldStatsInfo().get(\"foo_price\");\n      assertEquals(\"foo_price\", featuresBBBPivotStats1.getName());\n      assertEquals(131.39d, (double) featuresBBBPivotStats1.getMax(), .01d);\n      assertEquals(1.38d, (double) featuresBBBPivotStats1.getMin(), .01d);\n      assertEquals(180.75d, (double) featuresBBBPivotStats1.getSum(), .01d);\n      assertEquals(3, (long) featuresBBBPivotStats1.getCount());\n      assertEquals(3, (long) featuresBBBPivotStats1.getMissing());\n      assertEquals(60.25d, (double) featuresBBBPivotStats1.getMean(), .01d);\n      assertEquals(65.86d, featuresBBBPivotStats1.getStddev(), .01d);\n      assertEquals(19567.34d, featuresBBBPivotStats1.getSumOfSquares(), .01d);\n      \n      FieldStatsInfo featuresBBBPivotStats2 = featuresBBBPivot.getFieldStatsInfo().get(\"popularity\");\n      assertEquals(\"popularity\", featuresBBBPivotStats2.getName());\n      assertEquals(38.0d, (double) featuresBBBPivotStats2.getMax(), .01d);\n      assertEquals(-38.0d, (double) featuresBBBPivotStats2.getMin(), .01d);\n      assertEquals(136.0d, (double) featuresBBBPivotStats2.getSum(), .01d);\n      assertEquals(6, (long) featuresBBBPivotStats2.getCount());\n      assertEquals(0, (long) featuresBBBPivotStats2.getMissing());\n      assertEquals(22.66d, (double) featuresBBBPivotStats2.getMean(), .01d);\n      assertEquals(29.85d, featuresBBBPivotStats2.getStddev(), .01d);\n      assertEquals(7538.0d, featuresBBBPivotStats2.getSumOfSquares(), .01d);\n      \n      List<PivotField> nestedPivotList = featuresBBBPivot.getPivot();\n      PivotField featuresBBBPivotPivot = nestedPivotList.get(0);\n      assertEquals(\"manu\", featuresBBBPivotPivot.getField());\n      assertEquals(\"ztc\", featuresBBBPivotPivot.getValue());\n      assertNotNull(featuresBBBPivotPivot.getFieldStatsInfo());\n      assertEquals(2, featuresBBBPivotPivot.getFieldStatsInfo().size());\n      \n      FieldStatsInfo featuresBBBManuZtcPivotStats1 = featuresBBBPivotPivot.getFieldStatsInfo().get(\"foo_price\");\n      assertEquals(\"foo_price\", featuresBBBManuZtcPivotStats1.getName());\n      assertEquals(47.97d, (double) featuresBBBManuZtcPivotStats1.getMax(), .01d);\n      assertEquals(47.97d, (double) featuresBBBManuZtcPivotStats1.getMin(), .01d);\n      assertEquals(47.97d, (double) featuresBBBManuZtcPivotStats1.getSum(), .01d);\n      assertEquals(1, (long) featuresBBBManuZtcPivotStats1.getCount());\n      assertEquals(2, (long) featuresBBBManuZtcPivotStats1.getMissing());\n      assertEquals(47.97d, (double) featuresBBBManuZtcPivotStats1.getMean(), .01d);\n      assertEquals(0.0d, featuresBBBManuZtcPivotStats1.getStddev(), .01d);\n      assertEquals(2302.08d, featuresBBBManuZtcPivotStats1.getSumOfSquares(), .01d);\n      \n      \n      FieldStatsInfo featuresBBBManuZtcPivotStats2 = featuresBBBPivotPivot.getFieldStatsInfo().get(\"popularity\");\n      assertEquals(\"popularity\", featuresBBBManuZtcPivotStats2.getName());\n      assertEquals(38.0d, (double) featuresBBBManuZtcPivotStats2.getMax(), .01d);\n      assertEquals(-38.0d, (double) featuresBBBManuZtcPivotStats2.getMin(), .01d);\n      assertEquals(32.0, (double) featuresBBBManuZtcPivotStats2.getSum(), .01d);\n      assertEquals(3, (long) featuresBBBManuZtcPivotStats2.getCount());\n      assertEquals(0, (long) featuresBBBManuZtcPivotStats2.getMissing());\n      assertEquals(10.66d, (double) featuresBBBManuZtcPivotStats2.getMean(), .01d);\n      assertEquals(42.25d, featuresBBBManuZtcPivotStats2.getStddev(), .01d);\n      assertEquals(3912.0d, featuresBBBManuZtcPivotStats2.getSumOfSquares(), .01d);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPivotFacetsStats() throws Exception {\n    SolrServer server = getSolrServer();\n\n    // Empty the database...\n    server.deleteByQuery(\"*:*\");// delete everything!\n    server.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n\n    int id = 1;\n    ArrayList<SolrInputDocument> docs = new ArrayList<>();\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"apple\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 12, \"price\", .017));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"lg\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 13, \"price\", 16.04));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"samsung\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 14, \"price\", 12.34));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"lg\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 24, \"price\", 51.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"nokia\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 28, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 32));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"htc\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 31, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"apple\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 36));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"lg\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 37, \"price\", 1.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 38, \"price\", 47.98));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"b\", \"inStock\", true, \"popularity\", -38));\n    docs.add(makeTestDoc(\"id\", id++, \"cat\", \"b\")); // something not matching all fields\n    server.add(docs);\n    server.commit();\n\n    for (String pivot : new String[] { \"{!key=pivot_key stats=s1}features,manu\",\n                                       \"{!key=pivot_key stats=s1}features,manu,cat\",\n                                       \"{!key=pivot_key stats=s1}features,manu,cat,inStock\"\n      }) {\n\n      // for any of these pivot params, the assertions we check should be teh same\n      // (we stop asserting at the \"manu\" level)\n      \n      SolrQuery query = new SolrQuery(\"*:*\");\n      query.addFacetPivotField(pivot);\n      query.setFacetLimit(1);\n      query.addGetFieldStatistics(\"{!key=foo_price tag=s1}price\", \"{!tag=s1}popularity\");\n      query.setFacetMinCount(0);\n      query.setRows(0);\n\n      QueryResponse rsp = server.query(query);\n\n      // check top (ie: non-pivot) stats\n      Map<String, FieldStatsInfo> map = rsp.getFieldStatsInfo();\n      FieldStatsInfo intValueStatsInfo = map.get(\"popularity\");\n      assertEquals(-38.0d, intValueStatsInfo.getMin());\n      assertEquals(38.0d, intValueStatsInfo.getMax());\n      assertEquals(11l, intValueStatsInfo.getCount().longValue());\n      assertEquals(1l, intValueStatsInfo.getMissing().longValue());\n      assertEquals(227.0d, intValueStatsInfo.getSum());\n      assertEquals(20.636363636363637d, intValueStatsInfo.getMean());\n      \n      FieldStatsInfo doubleValueStatsInfo = map.get(\"foo_price\");\n      assertEquals(.017d, (double) doubleValueStatsInfo.getMin(), .01d);\n      assertEquals(131.39d, (double) doubleValueStatsInfo.getMax(), .01d);\n      assertEquals(8l, doubleValueStatsInfo.getCount().longValue());\n      assertEquals(4l, doubleValueStatsInfo.getMissing().longValue());\n      assertEquals(391.93d, (double) doubleValueStatsInfo.getSum(), .01d);\n      assertEquals(48.99d, (double) doubleValueStatsInfo.getMean(), .01d);\n\n      // now get deeper and look at the pivots...\n\n      NamedList<List<PivotField>> pivots = rsp.getFacetPivot();\n      assertTrue( ! pivots.get(\"pivot_key\").isEmpty() );\n\n      List<PivotField> list = pivots.get(\"pivot_key\");\n      PivotField featuresBBBPivot = list.get(0);\n      assertEquals(\"features\", featuresBBBPivot.getField());\n      assertEquals(\"bbb\", featuresBBBPivot.getValue());\n      assertNotNull(featuresBBBPivot.getFieldStatsInfo());\n      assertEquals(2, featuresBBBPivot.getFieldStatsInfo().size());\n      \n      FieldStatsInfo featuresBBBPivotStats1 = featuresBBBPivot.getFieldStatsInfo().get(\"foo_price\");\n      assertEquals(\"foo_price\", featuresBBBPivotStats1.getName());\n      assertEquals(131.39d, (double) featuresBBBPivotStats1.getMax(), .01d);\n      assertEquals(1.38d, (double) featuresBBBPivotStats1.getMin(), .01d);\n      assertEquals(180.75d, (double) featuresBBBPivotStats1.getSum(), .01d);\n      assertEquals(3, (long) featuresBBBPivotStats1.getCount());\n      assertEquals(3, (long) featuresBBBPivotStats1.getMissing());\n      assertEquals(60.25d, (double) featuresBBBPivotStats1.getMean(), .01d);\n      assertEquals(65.86d, featuresBBBPivotStats1.getStddev(), .01d);\n      assertEquals(19567.34d, featuresBBBPivotStats1.getSumOfSquares(), .01d);\n      \n      FieldStatsInfo featuresBBBPivotStats2 = featuresBBBPivot.getFieldStatsInfo().get(\"popularity\");\n      assertEquals(\"popularity\", featuresBBBPivotStats2.getName());\n      assertEquals(38.0d, (double) featuresBBBPivotStats2.getMax(), .01d);\n      assertEquals(-38.0d, (double) featuresBBBPivotStats2.getMin(), .01d);\n      assertEquals(136.0d, (double) featuresBBBPivotStats2.getSum(), .01d);\n      assertEquals(6, (long) featuresBBBPivotStats2.getCount());\n      assertEquals(0, (long) featuresBBBPivotStats2.getMissing());\n      assertEquals(22.66d, (double) featuresBBBPivotStats2.getMean(), .01d);\n      assertEquals(29.85d, featuresBBBPivotStats2.getStddev(), .01d);\n      assertEquals(7538.0d, featuresBBBPivotStats2.getSumOfSquares(), .01d);\n      \n      List<PivotField> nestedPivotList = featuresBBBPivot.getPivot();\n      PivotField featuresBBBPivotPivot = nestedPivotList.get(0);\n      assertEquals(\"manu\", featuresBBBPivotPivot.getField());\n      assertEquals(\"ztc\", featuresBBBPivotPivot.getValue());\n      assertNotNull(featuresBBBPivotPivot.getFieldStatsInfo());\n      assertEquals(2, featuresBBBPivotPivot.getFieldStatsInfo().size());\n      \n      FieldStatsInfo featuresBBBManuZtcPivotStats1 = featuresBBBPivotPivot.getFieldStatsInfo().get(\"foo_price\");\n      assertEquals(\"foo_price\", featuresBBBManuZtcPivotStats1.getName());\n      assertEquals(47.97d, (double) featuresBBBManuZtcPivotStats1.getMax(), .01d);\n      assertEquals(47.97d, (double) featuresBBBManuZtcPivotStats1.getMin(), .01d);\n      assertEquals(47.97d, (double) featuresBBBManuZtcPivotStats1.getSum(), .01d);\n      assertEquals(1, (long) featuresBBBManuZtcPivotStats1.getCount());\n      assertEquals(2, (long) featuresBBBManuZtcPivotStats1.getMissing());\n      assertEquals(47.97d, (double) featuresBBBManuZtcPivotStats1.getMean(), .01d);\n      assertEquals(0.0d, featuresBBBManuZtcPivotStats1.getStddev(), .01d);\n      assertEquals(2302.08d, featuresBBBManuZtcPivotStats1.getSumOfSquares(), .01d);\n      \n      \n      FieldStatsInfo featuresBBBManuZtcPivotStats2 = featuresBBBPivotPivot.getFieldStatsInfo().get(\"popularity\");\n      assertEquals(\"popularity\", featuresBBBManuZtcPivotStats2.getName());\n      assertEquals(38.0d, (double) featuresBBBManuZtcPivotStats2.getMax(), .01d);\n      assertEquals(-38.0d, (double) featuresBBBManuZtcPivotStats2.getMin(), .01d);\n      assertEquals(32.0, (double) featuresBBBManuZtcPivotStats2.getSum(), .01d);\n      assertEquals(3, (long) featuresBBBManuZtcPivotStats2.getCount());\n      assertEquals(0, (long) featuresBBBManuZtcPivotStats2.getMissing());\n      assertEquals(10.66d, (double) featuresBBBManuZtcPivotStats2.getMean(), .01d);\n      assertEquals(42.25d, featuresBBBManuZtcPivotStats2.getStddev(), .01d);\n      assertEquals(3912.0d, featuresBBBManuZtcPivotStats2.getSumOfSquares(), .01d);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}