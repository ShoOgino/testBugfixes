{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","commits":[{"id":"6ab569c1172c7f749243bbad23c63f9c5542aca4","date":1343845246,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","pathOld":"/dev/null","sourceNew":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          dwpt.abort();\n          doAfterFlush(dwpt);\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters\n              .put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          blockedFlush.dwpt.abort();\n          doAfterFlush(blockedFlush.dwpt);\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a4278fc65afbb35739525c37f818cded6fe6e9ae","a4278fc65afbb35739525c37f818cded6fe6e9ae","a4278fc65afbb35739525c37f818cded6fe6e9ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","pathOld":"/dev/null","sourceNew":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          dwpt.abort();\n          doAfterFlush(dwpt);\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters\n              .put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          blockedFlush.dwpt.abort();\n          doAfterFlush(blockedFlush.dwpt);\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","pathOld":"/dev/null","sourceNew":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          dwpt.abort();\n          doAfterFlush(dwpt);\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters\n              .put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          blockedFlush.dwpt.abort();\n          doAfterFlush(blockedFlush.dwpt);\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4278fc65afbb35739525c37f818cded6fe6e9ae","date":1369132128,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","sourceNew":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters\n              .put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          blockedFlush.dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","sourceOld":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          dwpt.abort();\n          doAfterFlush(dwpt);\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters\n              .put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          blockedFlush.dwpt.abort();\n          doAfterFlush(blockedFlush.dwpt);\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","bugFix":["6ab569c1172c7f749243bbad23c63f9c5542aca4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes(Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","sourceNew":"  synchronized void abortPendingFlushes(Set<String> newFiles) {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          documentsWriter.subtractFlushedNumDocs(dwpt.getNumDocsInRAM());\n          dwpt.abort(newFiles);\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters\n              .put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          documentsWriter.subtractFlushedNumDocs(blockedFlush.dwpt.getNumDocsInRAM());\n          blockedFlush.dwpt.abort(newFiles);\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","sourceOld":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters\n              .put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          blockedFlush.dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes(Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","sourceNew":"  synchronized void abortPendingFlushes(Set<String> newFiles) {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          documentsWriter.subtractFlushedNumDocs(dwpt.getNumDocsInRAM());\n          dwpt.abort(newFiles);\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters\n              .put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          documentsWriter.subtractFlushedNumDocs(blockedFlush.dwpt.getNumDocsInRAM());\n          blockedFlush.dwpt.abort(newFiles);\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","sourceOld":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters\n              .put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          blockedFlush.dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","sourceNew":null,"sourceOld":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters\n              .put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          blockedFlush.dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9299079153fd7895bf3cf6835cf7019af2ba89b3","date":1417813477,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes(Set[String]).mjava","sourceNew":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          documentsWriter.subtractFlushedNumDocs(dwpt.getNumDocsInRAM());\n          dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters\n              .put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          documentsWriter.subtractFlushedNumDocs(blockedFlush.dwpt.getNumDocsInRAM());\n          blockedFlush.dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","sourceOld":"  synchronized void abortPendingFlushes(Set<String> newFiles) {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          documentsWriter.subtractFlushedNumDocs(dwpt.getNumDocsInRAM());\n          dwpt.abort(newFiles);\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters\n              .put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          documentsWriter.subtractFlushedNumDocs(blockedFlush.dwpt.getNumDocsInRAM());\n          blockedFlush.dwpt.abort(newFiles);\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","sourceNew":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          documentsWriter.subtractFlushedNumDocs(dwpt.getNumDocsInRAM());\n          dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters.put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          documentsWriter.subtractFlushedNumDocs(blockedFlush.dwpt.getNumDocsInRAM());\n          blockedFlush.dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","sourceOld":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          documentsWriter.subtractFlushedNumDocs(dwpt.getNumDocsInRAM());\n          dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters\n              .put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          documentsWriter.subtractFlushedNumDocs(blockedFlush.dwpt.getNumDocsInRAM());\n          blockedFlush.dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","sourceNew":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          documentsWriter.subtractFlushedNumDocs(dwpt.getNumDocsInRAM());\n          dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters.put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          documentsWriter.subtractFlushedNumDocs(blockedFlush.dwpt.getNumDocsInRAM());\n          blockedFlush.dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","sourceOld":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          documentsWriter.subtractFlushedNumDocs(dwpt.getNumDocsInRAM());\n          dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters\n              .put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          documentsWriter.subtractFlushedNumDocs(blockedFlush.dwpt.getNumDocsInRAM());\n          blockedFlush.dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","sourceNew":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          documentsWriter.subtractFlushedNumDocs(dwpt.getNumDocsInRAM());\n          dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters.put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          documentsWriter.subtractFlushedNumDocs(blockedFlush.dwpt.getNumDocsInRAM());\n          blockedFlush.dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","sourceOld":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          documentsWriter.subtractFlushedNumDocs(dwpt.getNumDocsInRAM());\n          dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters\n              .put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          documentsWriter.subtractFlushedNumDocs(blockedFlush.dwpt.getNumDocsInRAM());\n          blockedFlush.dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14d66d86a8b184a86bcaebcf6e15fcef486e0876","date":1521539412,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","sourceNew":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          documentsWriter.subtractFlushedNumDocs(dwpt.getNumDocsInRAM());\n          dwpt.abort();\n        } catch (Exception ex) {\n          // that's fine we just abort everything here this is best effort\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters.put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          documentsWriter.subtractFlushedNumDocs(blockedFlush.dwpt.getNumDocsInRAM());\n          blockedFlush.dwpt.abort();\n        } catch (Exception ex) {\n          // that's fine we just abort everything here this is best effort\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","sourceOld":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          documentsWriter.subtractFlushedNumDocs(dwpt.getNumDocsInRAM());\n          dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters.put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          documentsWriter.subtractFlushedNumDocs(blockedFlush.dwpt.getNumDocsInRAM());\n          blockedFlush.dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","sourceNew":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          documentsWriter.subtractFlushedNumDocs(dwpt.getNumDocsInRAM());\n          dwpt.abort();\n        } catch (Exception ex) {\n          // that's fine we just abort everything here this is best effort\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters.put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          documentsWriter.subtractFlushedNumDocs(blockedFlush.dwpt.getNumDocsInRAM());\n          blockedFlush.dwpt.abort();\n        } catch (Exception ex) {\n          // that's fine we just abort everything here this is best effort\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","sourceOld":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          documentsWriter.subtractFlushedNumDocs(dwpt.getNumDocsInRAM());\n          dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the flush queue\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters.put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          documentsWriter.subtractFlushedNumDocs(blockedFlush.dwpt.getNumDocsInRAM());\n          blockedFlush.dwpt.abort();\n        } catch (Throwable ex) {\n          // ignore - keep on aborting the blocked queue\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#abortPendingFlushes().mjava","sourceNew":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          documentsWriter.subtractFlushedNumDocs(dwpt.getNumDocsInRAM());\n          dwpt.abort();\n        } catch (Exception ex) {\n          // that's fine we just abort everything here this is best effort\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (DocumentsWriterPerThread blockedFlush : blockedFlushes) {\n        try {\n          addFlushingDWPT(blockedFlush); // add the blockedFlushes for correct accounting in doAfterFlush\n          documentsWriter.subtractFlushedNumDocs(blockedFlush.getNumDocsInRAM());\n          blockedFlush.abort();\n        } catch (Exception ex) {\n          // that's fine we just abort everything here this is best effort\n        } finally {\n          doAfterFlush(blockedFlush);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","sourceOld":"  synchronized void abortPendingFlushes() {\n    try {\n      for (DocumentsWriterPerThread dwpt : flushQueue) {\n        try {\n          documentsWriter.subtractFlushedNumDocs(dwpt.getNumDocsInRAM());\n          dwpt.abort();\n        } catch (Exception ex) {\n          // that's fine we just abort everything here this is best effort\n        } finally {\n          doAfterFlush(dwpt);\n        }\n      }\n      for (BlockedFlush blockedFlush : blockedFlushes) {\n        try {\n          flushingWriters.put(blockedFlush.dwpt, Long.valueOf(blockedFlush.bytes));\n          documentsWriter.subtractFlushedNumDocs(blockedFlush.dwpt.getNumDocsInRAM());\n          blockedFlush.dwpt.abort();\n        } catch (Exception ex) {\n          // that's fine we just abort everything here this is best effort\n        } finally {\n          doAfterFlush(blockedFlush.dwpt);\n        }\n      }\n    } finally {\n      flushQueue.clear();\n      blockedFlushes.clear();\n      updateStallState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["28288370235ed02234a64753cdbf0c6ec096304a","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"7af110b00ea8df9429309d83e38e0533d82e144f":["a4278fc65afbb35739525c37f818cded6fe6e9ae"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a4278fc65afbb35739525c37f818cded6fe6e9ae","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["a4278fc65afbb35739525c37f818cded6fe6e9ae","7af110b00ea8df9429309d83e38e0533d82e144f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ab569c1172c7f749243bbad23c63f9c5542aca4"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["9299079153fd7895bf3cf6835cf7019af2ba89b3","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["9299079153fd7895bf3cf6835cf7019af2ba89b3","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ab569c1172c7f749243bbad23c63f9c5542aca4"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["7af110b00ea8df9429309d83e38e0533d82e144f"],"6ab569c1172c7f749243bbad23c63f9c5542aca4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4278fc65afbb35739525c37f818cded6fe6e9ae":["6ab569c1172c7f749243bbad23c63f9c5542aca4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["264935965977b4a9e2f3920420647072c9c49176"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","9299079153fd7895bf3cf6835cf7019af2ba89b3"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","6ab569c1172c7f749243bbad23c63f9c5542aca4"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"6ab569c1172c7f749243bbad23c63f9c5542aca4":["8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","a4278fc65afbb35739525c37f818cded6fe6e9ae"],"a4278fc65afbb35739525c37f818cded6fe6e9ae":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","8fd5be977c105554c6a7b68afcdbc511439723ab","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}