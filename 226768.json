{"path":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupBeforeFirstCommit().mjava","commits":[{"id":"19f02bb04467ed179738a398a7da80bbbe161c16","date":1573660732,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupBeforeFirstCommit().mjava","pathOld":"/dev/null","sourceNew":"  public void testBackupBeforeFirstCommit() throws Exception {\n\n    // even w/o a user sending any data, the SolrCore initialiation logic should have automatically created\n    // an \"empty\" commit point that can be backed up...\n    final IndexCommit empty = h.getCore().getDeletionPolicy().getLatestCommit();\n    assertNotNull(empty);\n    \n    // white box sanity check that the commit point of the \"reader\" available from SolrIndexSearcher\n    // matches the commit point that IDPW claims is the \"latest\"\n    // \n    // this is important to ensure that backup/snapshot behavior is consistent with user expection\n    // when using typical commit + openSearcher\n    assertEquals(empty, h.getCore().withSearcher(s -> s.getIndexReader().getIndexCommit()));\n\n    assertEquals(1L, empty.getGeneration());\n    assertNotNull(empty.getSegmentsFileName());\n    final String initialEmptyIndexSegmentFileName = empty.getSegmentsFileName();\n    \n    final CoreContainer cores = h.getCoreContainer();\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    final File backupDir = createTempDir().toFile();\n    \n    { // first a backup before we've ever done *anything*...\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"empty_backup1\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.empty_backup1\"),\n                        0, initialEmptyIndexSegmentFileName);\n    }\n\n    { // Empty (named) snapshot..\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"empty_snapshotA\"),\n         resp);\n      assertNull(\"Snapshot A should have succeeded\", resp.getException());\n    }\n    \n    assertU(adoc(\"id\", \"1\")); // uncommitted\n\n    { // second backup w/uncommited docs\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"empty_backup2\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.empty_backup2\"),\n                        0, initialEmptyIndexSegmentFileName);\n    }\n    \n    { // Second empty (named) snapshot..\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"empty_snapshotB\"),\n         resp);\n      assertNull(\"Snapshot A should have succeeded\", resp.getException());\n    }\n\n    // Committing the doc now should not affect the existing backups or snapshots...\n    assertU(commit());\n    \n    for (String name : Arrays.asList(\"empty_backup1\", \"empty_backup2\")) {\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name ),\n                        0, initialEmptyIndexSegmentFileName);\n    }\n\n    // Make backups from each of the snapshots and check they are still empty as well...\n    for (String snapName : Arrays.asList(\"empty_snapshotA\", \"empty_snapshotB\")) {\n      String name = \"empty_backup_from_\" + snapName;\n      SolrQueryResponse resp = new SolrQueryResponse();\n      \n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", name,\n             \"commitName\", snapName,\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup \"+name+\" should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name),\n                        0, initialEmptyIndexSegmentFileName);\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupBeforeFirstCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupBeforeFirstCommit().mjava","sourceNew":"  public void testBackupBeforeFirstCommit() throws Exception {\n\n    // even w/o a user sending any data, the SolrCore initialiation logic should have automatically created\n    // an \"empty\" commit point that can be backed up...\n    final IndexCommit empty = h.getCore().getDeletionPolicy().getLatestCommit();\n    assertNotNull(empty);\n    \n    // white box sanity check that the commit point of the \"reader\" available from SolrIndexSearcher\n    // matches the commit point that IDPW claims is the \"latest\"\n    // \n    // this is important to ensure that backup/snapshot behavior is consistent with user expection\n    // when using typical commit + openSearcher\n    assertEquals(empty, h.getCore().withSearcher(s -> s.getIndexReader().getIndexCommit()));\n\n    assertEquals(1L, empty.getGeneration());\n    assertNotNull(empty.getSegmentsFileName());\n    final String initialEmptyIndexSegmentFileName = empty.getSegmentsFileName();\n    \n    final CoreContainer cores = h.getCoreContainer();\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    final File backupDir = createTempDir().toFile();\n    \n    { // first a backup before we've ever done *anything*...\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"empty_backup1\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.empty_backup1\"),\n                        0, initialEmptyIndexSegmentFileName);\n    }\n\n    { // Empty (named) snapshot..\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"empty_snapshotA\"),\n         resp);\n      assertNull(\"Snapshot A should have succeeded\", resp.getException());\n    }\n    \n    assertU(adoc(\"id\", \"1\")); // uncommitted\n\n    { // second backup w/uncommited docs\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"empty_backup2\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.empty_backup2\"),\n                        0, initialEmptyIndexSegmentFileName);\n    }\n    \n    { // Second empty (named) snapshot..\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"empty_snapshotB\"),\n         resp);\n      assertNull(\"Snapshot A should have succeeded\", resp.getException());\n    }\n\n    // Committing the doc now should not affect the existing backups or snapshots...\n    assertU(commit());\n    \n    for (String name : Arrays.asList(\"empty_backup1\", \"empty_backup2\")) {\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name ),\n                        0, initialEmptyIndexSegmentFileName);\n    }\n\n    // Make backups from each of the snapshots and check they are still empty as well...\n    for (String snapName : Arrays.asList(\"empty_snapshotA\", \"empty_snapshotB\")) {\n      String name = \"empty_backup_from_\" + snapName;\n      SolrQueryResponse resp = new SolrQueryResponse();\n      \n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", name,\n             \"commitName\", snapName,\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup \"+name+\" should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name),\n                        0, initialEmptyIndexSegmentFileName);\n      \n    }\n    admin.close();\n  }\n\n","sourceOld":"  public void testBackupBeforeFirstCommit() throws Exception {\n\n    // even w/o a user sending any data, the SolrCore initialiation logic should have automatically created\n    // an \"empty\" commit point that can be backed up...\n    final IndexCommit empty = h.getCore().getDeletionPolicy().getLatestCommit();\n    assertNotNull(empty);\n    \n    // white box sanity check that the commit point of the \"reader\" available from SolrIndexSearcher\n    // matches the commit point that IDPW claims is the \"latest\"\n    // \n    // this is important to ensure that backup/snapshot behavior is consistent with user expection\n    // when using typical commit + openSearcher\n    assertEquals(empty, h.getCore().withSearcher(s -> s.getIndexReader().getIndexCommit()));\n\n    assertEquals(1L, empty.getGeneration());\n    assertNotNull(empty.getSegmentsFileName());\n    final String initialEmptyIndexSegmentFileName = empty.getSegmentsFileName();\n    \n    final CoreContainer cores = h.getCoreContainer();\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    final File backupDir = createTempDir().toFile();\n    \n    { // first a backup before we've ever done *anything*...\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"empty_backup1\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.empty_backup1\"),\n                        0, initialEmptyIndexSegmentFileName);\n    }\n\n    { // Empty (named) snapshot..\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"empty_snapshotA\"),\n         resp);\n      assertNull(\"Snapshot A should have succeeded\", resp.getException());\n    }\n    \n    assertU(adoc(\"id\", \"1\")); // uncommitted\n\n    { // second backup w/uncommited docs\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"empty_backup2\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.empty_backup2\"),\n                        0, initialEmptyIndexSegmentFileName);\n    }\n    \n    { // Second empty (named) snapshot..\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"empty_snapshotB\"),\n         resp);\n      assertNull(\"Snapshot A should have succeeded\", resp.getException());\n    }\n\n    // Committing the doc now should not affect the existing backups or snapshots...\n    assertU(commit());\n    \n    for (String name : Arrays.asList(\"empty_backup1\", \"empty_backup2\")) {\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name ),\n                        0, initialEmptyIndexSegmentFileName);\n    }\n\n    // Make backups from each of the snapshots and check they are still empty as well...\n    for (String snapName : Arrays.asList(\"empty_snapshotA\", \"empty_snapshotB\")) {\n      String name = \"empty_backup_from_\" + snapName;\n      SolrQueryResponse resp = new SolrQueryResponse();\n      \n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", name,\n             \"commitName\", snapName,\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup \"+name+\" should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name),\n                        0, initialEmptyIndexSegmentFileName);\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6b17e67903ace8abb1d4d602bfc40d1994692ff","date":1593429504,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupBeforeFirstCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupBeforeFirstCommit().mjava","sourceNew":"  public void testBackupBeforeFirstCommit() throws Exception {\n\n    // even w/o a user sending any data, the SolrCore initialiation logic should have automatically created\n    // an \"empty\" commit point that can be backed up...\n    final IndexCommit empty = h.getCore().getDeletionPolicy().getLatestCommit();\n    assertNotNull(empty);\n    \n    // white box sanity check that the commit point of the \"reader\" available from SolrIndexSearcher\n    // matches the commit point that IDPW claims is the \"latest\"\n    // \n    // this is important to ensure that backup/snapshot behavior is consistent with user expection\n    // when using typical commit + openSearcher\n    assertEquals(empty, h.getCore().withSearcher(s -> s.getIndexReader().getIndexCommit()));\n\n    assertEquals(1L, empty.getGeneration());\n    assertNotNull(empty.getSegmentsFileName());\n    final String initialEmptyIndexSegmentFileName = empty.getSegmentsFileName();\n    \n    final CoreContainer cores = h.getCoreContainer();\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    final File backupDir = createTempDir().toFile();\n    cores.getAllowPaths().add(backupDir.toPath());\n\n    { // first a backup before we've ever done *anything*...\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"empty_backup1\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.empty_backup1\"),\n                        0, initialEmptyIndexSegmentFileName);\n    }\n\n    { // Empty (named) snapshot..\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"empty_snapshotA\"),\n         resp);\n      assertNull(\"Snapshot A should have succeeded\", resp.getException());\n    }\n    \n    assertU(adoc(\"id\", \"1\")); // uncommitted\n\n    { // second backup w/uncommited docs\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"empty_backup2\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.empty_backup2\"),\n                        0, initialEmptyIndexSegmentFileName);\n    }\n    \n    { // Second empty (named) snapshot..\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"empty_snapshotB\"),\n         resp);\n      assertNull(\"Snapshot A should have succeeded\", resp.getException());\n    }\n\n    // Committing the doc now should not affect the existing backups or snapshots...\n    assertU(commit());\n    \n    for (String name : Arrays.asList(\"empty_backup1\", \"empty_backup2\")) {\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name ),\n                        0, initialEmptyIndexSegmentFileName);\n    }\n\n    // Make backups from each of the snapshots and check they are still empty as well...\n    for (String snapName : Arrays.asList(\"empty_snapshotA\", \"empty_snapshotB\")) {\n      String name = \"empty_backup_from_\" + snapName;\n      SolrQueryResponse resp = new SolrQueryResponse();\n      \n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", name,\n             \"commitName\", snapName,\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup \"+name+\" should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name),\n                        0, initialEmptyIndexSegmentFileName);\n      \n    }\n    admin.close();\n  }\n\n","sourceOld":"  public void testBackupBeforeFirstCommit() throws Exception {\n\n    // even w/o a user sending any data, the SolrCore initialiation logic should have automatically created\n    // an \"empty\" commit point that can be backed up...\n    final IndexCommit empty = h.getCore().getDeletionPolicy().getLatestCommit();\n    assertNotNull(empty);\n    \n    // white box sanity check that the commit point of the \"reader\" available from SolrIndexSearcher\n    // matches the commit point that IDPW claims is the \"latest\"\n    // \n    // this is important to ensure that backup/snapshot behavior is consistent with user expection\n    // when using typical commit + openSearcher\n    assertEquals(empty, h.getCore().withSearcher(s -> s.getIndexReader().getIndexCommit()));\n\n    assertEquals(1L, empty.getGeneration());\n    assertNotNull(empty.getSegmentsFileName());\n    final String initialEmptyIndexSegmentFileName = empty.getSegmentsFileName();\n    \n    final CoreContainer cores = h.getCoreContainer();\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n\n    final File backupDir = createTempDir().toFile();\n    \n    { // first a backup before we've ever done *anything*...\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"empty_backup1\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.empty_backup1\"),\n                        0, initialEmptyIndexSegmentFileName);\n    }\n\n    { // Empty (named) snapshot..\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"empty_snapshotA\"),\n         resp);\n      assertNull(\"Snapshot A should have succeeded\", resp.getException());\n    }\n    \n    assertU(adoc(\"id\", \"1\")); // uncommitted\n\n    { // second backup w/uncommited docs\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", \"empty_backup2\",\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.empty_backup2\"),\n                        0, initialEmptyIndexSegmentFileName);\n    }\n    \n    { // Second empty (named) snapshot..\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATESNAPSHOT.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"commitName\", \"empty_snapshotB\"),\n         resp);\n      assertNull(\"Snapshot A should have succeeded\", resp.getException());\n    }\n\n    // Committing the doc now should not affect the existing backups or snapshots...\n    assertU(commit());\n    \n    for (String name : Arrays.asList(\"empty_backup1\", \"empty_backup2\")) {\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name ),\n                        0, initialEmptyIndexSegmentFileName);\n    }\n\n    // Make backups from each of the snapshots and check they are still empty as well...\n    for (String snapName : Arrays.asList(\"empty_snapshotA\", \"empty_snapshotB\")) {\n      String name = \"empty_backup_from_\" + snapName;\n      SolrQueryResponse resp = new SolrQueryResponse();\n      \n      admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n             \"core\", DEFAULT_TEST_COLLECTION_NAME,\n             \"name\", name,\n             \"commitName\", snapName,\n             \"location\", backupDir.getAbsolutePath()),\n         resp);\n      assertNull(\"Backup \"+name+\" should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(backupDir, \"snapshot.\" + name),\n                        0, initialEmptyIndexSegmentFileName);\n      \n    }\n    admin.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6b17e67903ace8abb1d4d602bfc40d1994692ff":["ba055e19afc289adcb5bedaf68513793a7254012"],"ba055e19afc289adcb5bedaf68513793a7254012":["19f02bb04467ed179738a398a7da80bbbe161c16"],"19f02bb04467ed179738a398a7da80bbbe161c16":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6b17e67903ace8abb1d4d602bfc40d1994692ff"]},"commit2Childs":{"a6b17e67903ace8abb1d4d602bfc40d1994692ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba055e19afc289adcb5bedaf68513793a7254012":["a6b17e67903ace8abb1d4d602bfc40d1994692ff"],"19f02bb04467ed179738a398a7da80bbbe161c16":["ba055e19afc289adcb5bedaf68513793a7254012"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19f02bb04467ed179738a398a7da80bbbe161c16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}