{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#getRangeCountsIndexed().mjava","commits":[{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#getRangeCountsIndexed().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCountsIndexed().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private  SimpleOrderedMap getRangeCountsIndexed() throws IOException {\n\n    int slotCount = rangeList.size() + otherList.size();\n    intersections = new DocSet[slotCount];\n    filters = new Query[slotCount];\n\n\n    createAccs(fcontext.base.size(), slotCount);\n\n    for (int idx = 0; idx<rangeList.size(); idx++) {\n      rangeStats(rangeList.get(idx), idx);\n    }\n\n    for (int idx = 0; idx<otherList.size(); idx++) {\n      rangeStats(otherList.get(idx), rangeList.size() + idx);\n    }\n\n\n    final SimpleOrderedMap res = new SimpleOrderedMap<>();\n    List<SimpleOrderedMap> buckets = new ArrayList<>();\n    res.add(\"buckets\", buckets);\n\n    for (int idx = 0; idx<rangeList.size(); idx++) {\n      if (effectiveMincount > 0 && countAcc.getCount(idx) < effectiveMincount) continue;\n      Range range = rangeList.get(idx);\n      SimpleOrderedMap bucket = new SimpleOrderedMap();\n      buckets.add(bucket);\n      bucket.add(\"val\", range.label);\n      addStats(bucket, idx);\n      doSubs(bucket, idx);\n    }\n\n    for (int idx = 0; idx<otherList.size(); idx++) {\n      // we don't skip these buckets based on mincount\n      Range range = otherList.get(idx);\n      SimpleOrderedMap bucket = new SimpleOrderedMap();\n      res.add(range.label.toString(), bucket);\n      addStats(bucket, rangeList.size() + idx);\n      doSubs(bucket, rangeList.size() + idx);\n    }\n\n    if (null != actual_end) {\n      res.add(FacetRange.ACTUAL_END_JSON_KEY, calc.formatValue(actual_end));\n    }\n\n    return res;\n  }\n\n","sourceOld":"  private  SimpleOrderedMap getRangeCountsIndexed() throws IOException {\n\n    int slotCount = rangeList.size() + otherList.size();\n    intersections = new DocSet[slotCount];\n    filters = new Query[slotCount];\n\n\n    createAccs(fcontext.base.size(), slotCount);\n\n    for (int idx = 0; idx<rangeList.size(); idx++) {\n      rangeStats(rangeList.get(idx), idx);\n    }\n\n    for (int idx = 0; idx<otherList.size(); idx++) {\n      rangeStats(otherList.get(idx), rangeList.size() + idx);\n    }\n\n\n    final SimpleOrderedMap res = new SimpleOrderedMap<>();\n    List<SimpleOrderedMap> buckets = new ArrayList<>();\n    res.add(\"buckets\", buckets);\n\n    for (int idx = 0; idx<rangeList.size(); idx++) {\n      if (effectiveMincount > 0 && countAcc.getCount(idx) < effectiveMincount) continue;\n      Range range = rangeList.get(idx);\n      SimpleOrderedMap bucket = new SimpleOrderedMap();\n      buckets.add(bucket);\n      bucket.add(\"val\", range.label);\n      addStats(bucket, idx);\n      doSubs(bucket, idx);\n    }\n\n    for (int idx = 0; idx<otherList.size(); idx++) {\n      // we don't skip these buckets based on mincount\n      Range range = otherList.get(idx);\n      SimpleOrderedMap bucket = new SimpleOrderedMap();\n      res.add(range.label.toString(), bucket);\n      addStats(bucket, rangeList.size() + idx);\n      doSubs(bucket, rangeList.size() + idx);\n    }\n\n    if (null != actual_end) {\n      res.add(FacetRange.ACTUAL_END_JSON_KEY, calc.formatValue(actual_end));\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}