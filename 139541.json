{"path":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(LeafReaderContext,int).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(context, this, queryWeight, context.reader().getLiveDocs());\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(LeafReaderContext,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(context, this, queryWeight, context.reader().getLiveDocs());\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      if (exists) {\n        return Explanation.match(queryWeight, \"ConstantScoreQuery(\" + filter + \"), product of:\",\n            Explanation.match(getBoost(), \"boost\"),\n            Explanation.match(queryNorm,\"queryNorm\"));\n      } else {\n        return Explanation.noMatch(\"ConstantScoreQuery(\" + filter + \") doesn't match id \" + doc);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(context, this, queryWeight, context.reader().getLiveDocs());\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \"), product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(\"ConstantScoreQuery(\" + filter\n        + \") doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7f94ff172f40ff68a926d112e25b96bc38e5a27","date":1431002360,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantWeight#explain(LeafReaderContext,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n\n      ConstantScorer cs = new ConstantScorer(context, this, queryWeight, context.reader().getLiveDocs());\n      boolean exists = cs.docIdSetIterator.advance(doc) == doc;\n\n      if (exists) {\n        return Explanation.match(queryWeight, \"ConstantScoreQuery(\" + filter + \"), product of:\",\n            Explanation.match(getBoost(), \"boost\"),\n            Explanation.match(queryNorm,\"queryNorm\"));\n      } else {\n        return Explanation.noMatch(\"ConstantScoreQuery(\" + filter + \") doesn't match id \" + doc);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"]},"commit2Childs":{"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}