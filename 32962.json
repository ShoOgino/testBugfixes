{"path":"src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","commits":[{"id":"048361614025800e582bfc7a7b0329dc6fd6a95e","date":1196999392,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","pathOld":"src/java/org/apache/solr/core/Config#Config(String,String,InputStream,String).mjava","sourceNew":"  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    this.loader = loader;\n    this.name = name;\n    this.prefix = prefix;\n    \n    if (prefix!=null && !prefix.endsWith(\"/\")) prefix += '/';\n    InputStream lis = is;\n    try {\n      if (lis == null)\n        lis = loader.openResource(name);\n      \n      javax.xml.parsers.DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      doc = builder.parse(lis);\n\n    \tDOMUtil.substituteSystemProperties(doc);\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)\n        lis.close();\n    }\n  }\n\n","sourceOld":"  public Config(String instanceDir, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    this.loader = new SolrResourceLoader( instanceDir );\n    this.name = name;\n    this.prefix = prefix;\n    \n    if (prefix!=null && !prefix.endsWith(\"/\")) prefix += '/';\n    InputStream lis = is;\n    try {\n      if (lis == null)\n        lis = loader.openResource(name);\n      \n      javax.xml.parsers.DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      doc = builder.parse(lis);\n\n    \tDOMUtil.substituteSystemProperties(doc);\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)\n        lis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68f896937cecbd003415d5fd0616436eaa1fb336","date":1197098869,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","pathOld":"src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","sourceNew":"  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = prefix;\n    \n    if (prefix!=null && !prefix.endsWith(\"/\")) prefix += '/';\n    InputStream lis = is;\n    try {\n      if (lis == null)\n        lis = loader.openResource(name);\n      \n      javax.xml.parsers.DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      doc = builder.parse(lis);\n\n    \tDOMUtil.substituteSystemProperties(doc);\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)\n        lis.close();\n    }\n  }\n\n","sourceOld":"  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    this.loader = loader;\n    this.name = name;\n    this.prefix = prefix;\n    \n    if (prefix!=null && !prefix.endsWith(\"/\")) prefix += '/';\n    InputStream lis = is;\n    try {\n      if (lis == null)\n        lis = loader.openResource(name);\n      \n      javax.xml.parsers.DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      doc = builder.parse(lis);\n\n    \tDOMUtil.substituteSystemProperties(doc);\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)\n        lis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc6ab6902f8f70ae43365947ccf44c25986906d","date":1204603577,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","pathOld":"src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a stream\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    InputStream lis = is;\n    try {\n      if (lis == null) {\n        lis = loader.openConfig(name);\n      }\n      javax.xml.parsers.DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      doc = builder.parse(lis);\n\n    \tDOMUtil.substituteSystemProperties(doc);\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)  lis.close();\n    }\n  }\n\n","sourceOld":"  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = prefix;\n    \n    if (prefix!=null && !prefix.endsWith(\"/\")) prefix += '/';\n    InputStream lis = is;\n    try {\n      if (lis == null)\n        lis = loader.openResource(name);\n      \n      javax.xml.parsers.DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      doc = builder.parse(lis);\n\n    \tDOMUtil.substituteSystemProperties(doc);\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)\n        lis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ddc2fd411184c85d1baed1e8d24840a151d6ba1","date":1219508719,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","pathOld":"src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a stream\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    InputStream lis = is;\n    try {\n      if (lis == null) {\n        lis = loader.openConfig(name);\n      }\n      javax.xml.parsers.DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      doc = builder.parse(lis);\n\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)  lis.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a stream\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    InputStream lis = is;\n    try {\n      if (lis == null) {\n        lis = loader.openConfig(name);\n      }\n      javax.xml.parsers.DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      doc = builder.parse(lis);\n\n    \tDOMUtil.substituteSystemProperties(doc);\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)  lis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecef172239072c9c9b567a0188f7be0cf4f75f3a","date":1233247141,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","pathOld":"src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a stream\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    InputStream lis = is;\n    try {\n      if (lis == null) {\n        lis = loader.openConfig(name);\n      }\n      javax.xml.parsers.DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      doc = builder.parse(lis);\n\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)  lis.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a stream\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    InputStream lis = is;\n    try {\n      if (lis == null) {\n        lis = loader.openConfig(name);\n      }\n      javax.xml.parsers.DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      doc = builder.parse(lis);\n\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)  lis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75c43d9940a1cc4d7a68efdc5e8238ac282adcc1","date":1254403942,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","pathOld":"src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a stream\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    InputStream lis = is;\n    try {\n      if (lis == null) {\n        lis = loader.openConfig(name);\n      }\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch(UnsupportedOperationException e) {\n        log.warn(name + \" XML parser doesn't support XInclude option\");\n      }\n      doc = dbf.newDocumentBuilder().parse(lis);\n\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)  lis.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a stream\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    InputStream lis = is;\n    try {\n      if (lis == null) {\n        lis = loader.openConfig(name);\n      }\n      javax.xml.parsers.DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      doc = builder.parse(lis);\n\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)  lis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","pathOld":"src/java/org/apache/solr/core/Config#Config(SolrResourceLoader,String,InputStream,String).mjava","sourceNew":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a stream\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    InputStream lis = is;\n    try {\n      if (lis == null) {\n        lis = loader.openConfig(name);\n      }\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch(UnsupportedOperationException e) {\n        log.warn(name + \" XML parser doesn't support XInclude option\");\n      }\n      doc = dbf.newDocumentBuilder().parse(lis);\n\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)  lis.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a config:\n   * <p>\n   * Note that the 'name' parameter is used to obtain a valid input stream if no valid one is provided through 'is'.\n   * If no valid stream is provided, a valid SolrResourceLoader instance should be provided through 'loader' so\n   * the resource can be opened (@see SolrResourceLoader#openResource); if no SolrResourceLoader instance is provided, a default one\n   * will be created.\n   * </p>\n   * <p>\n   * Consider passing a non-null 'name' parameter in all use-cases since it is used for logging & exception reporting.\n   * </p>\n   * @param loader the resource loader used to obtain an input stream if 'is' is null\n   * @param name the resource name used if the input stream 'is' is null\n   * @param is the resource as a stream\n   * @param prefix an optional prefix that will be preprended to all non-absolute xpath expressions\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public Config(SolrResourceLoader loader, String name, InputStream is, String prefix) throws ParserConfigurationException, IOException, SAXException \n  {\n    if( loader == null ) {\n      loader = new SolrResourceLoader( null );\n    }\n    this.loader = loader;\n    this.name = name;\n    this.prefix = (prefix != null && !prefix.endsWith(\"/\"))? prefix + '/' : prefix;\n    InputStream lis = is;\n    try {\n      if (lis == null) {\n        lis = loader.openConfig(name);\n      }\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch(UnsupportedOperationException e) {\n        log.warn(name + \" XML parser doesn't support XInclude option\");\n      }\n      doc = dbf.newDocumentBuilder().parse(lis);\n\n        DOMUtil.substituteProperties(doc, loader.getCoreProperties());\n    } catch (ParserConfigurationException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch (SAXException e)  {\n      SolrException.log(log, \"Exception during parsing file: \" + name, e);\n      throw e;\n    } catch( SolrException e ){\n    \tSolrException.log(log,\"Error in \"+name,e);\n    \tthrow e;\n    } finally {\n      // if this opens the resource, it also closes it\n      if (lis != is)  lis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"048361614025800e582bfc7a7b0329dc6fd6a95e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["68f896937cecbd003415d5fd0616436eaa1fb336"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"75c43d9940a1cc4d7a68efdc5e8238ac282adcc1":["ecef172239072c9c9b567a0188f7be0cf4f75f3a"],"68f896937cecbd003415d5fd0616436eaa1fb336":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"ad94625fb8d088209f46650c8097196fec67f00c":["75c43d9940a1cc4d7a68efdc5e8238ac282adcc1"],"ecef172239072c9c9b567a0188f7be0cf4f75f3a":["1ddc2fd411184c85d1baed1e8d24840a151d6ba1"],"1ddc2fd411184c85d1baed1e8d24840a151d6ba1":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"048361614025800e582bfc7a7b0329dc6fd6a95e":["68f896937cecbd003415d5fd0616436eaa1fb336"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["1ddc2fd411184c85d1baed1e8d24840a151d6ba1"],"68f896937cecbd003415d5fd0616436eaa1fb336":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"75c43d9940a1cc4d7a68efdc5e8238ac282adcc1":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"ecef172239072c9c9b567a0188f7be0cf4f75f3a":["75c43d9940a1cc4d7a68efdc5e8238ac282adcc1"],"1ddc2fd411184c85d1baed1e8d24840a151d6ba1":["ecef172239072c9c9b567a0188f7be0cf4f75f3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}