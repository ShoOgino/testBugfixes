{"path":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testHashCodeEquals().mjava","commits":[{"id":"2eb9fddb65bd2d34a0ebf29184f973db65300d35","date":1429200438,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testHashCodeEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testHashCodeEquals() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new FilterFileSystemProvider(\"test://\", dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n\n    Path f1 = wrapped.resolve(\"file1\");\n    Path f1Again = wrapped.resolve(\"file1\");\n    Path f2 = wrapped.resolve(\"file2\");\n    \n    assertEquals(f1, f1);\n    assertFalse(f1.equals(null));\n    assertEquals(f1, f1Again);\n    assertEquals(f1.hashCode(), f1Again.hashCode());\n    assertFalse(f1.equals(f2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testHashCodeEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testHashCodeEquals().mjava","sourceNew":"  public void testHashCodeEquals() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new FilterFileSystemProvider(\"test://\", dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n\n    Path f1 = wrapped.resolve(\"file1\");\n    Path f1Again = wrapped.resolve(\"file1\");\n    Path f2 = wrapped.resolve(\"file2\");\n    \n    assertEquals(f1, f1);\n    assertFalse(f1.equals(null));\n    assertEquals(f1, f1Again);\n    assertEquals(f1.hashCode(), f1Again.hashCode());\n    assertFalse(f1.equals(f2));\n  }\n\n","sourceOld":"  public void testHashCodeEquals() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new FilterFileSystemProvider(\"test://\", dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n\n    Path f1 = wrapped.resolve(\"file1\");\n    Path f1Again = wrapped.resolve(\"file1\");\n    Path f2 = wrapped.resolve(\"file2\");\n    \n    assertEquals(f1, f1);\n    assertFalse(f1.equals(null));\n    assertEquals(f1, f1Again);\n    assertEquals(f1.hashCode(), f1Again.hashCode());\n    assertFalse(f1.equals(f2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2eb9fddb65bd2d34a0ebf29184f973db65300d35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["2eb9fddb65bd2d34a0ebf29184f973db65300d35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2eb9fddb65bd2d34a0ebf29184f973db65300d35"],"2eb9fddb65bd2d34a0ebf29184f973db65300d35":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}