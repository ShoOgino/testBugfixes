{"path":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testBascis().mjava","commits":[{"id":"28211671436f185419b3f7e53ccfc3911441ab65","date":1544026960,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testBascis().mjava","pathOld":"/dev/null","sourceNew":"  public void testBascis() throws IOException {\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate update =\n        new DocValuesUpdate.NumericDocValuesUpdate(new Term(\"id\", \"1\"), \"age\", 6);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, update, 15);\n    buffer.addUpdate(new Term(\"id\", \"10\"), 6, 15);\n    buffer.addUpdate(new Term(\"id\", \"8\"), 12, 15);\n    buffer.addUpdate(new Term(\"some_other_field\", \"8\"), 13, 17);\n    buffer.addUpdate(new Term(\"id\", \"8\"), 12, 16);\n    assertTrue(buffer.isNumeric());\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"1\", value.termValue.utf8ToString());\n    assertEquals(6, value.numericValue);\n    assertEquals(15, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"10\", value.termValue.utf8ToString());\n    assertEquals(6, value.numericValue);\n    assertEquals(15, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"8\", value.termValue.utf8ToString());\n    assertEquals(12, value.numericValue);\n    assertEquals(15, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"some_other_field\", value.termField);\n    assertEquals(\"8\", value.termValue.utf8ToString());\n    assertEquals(13, value.numericValue);\n    assertEquals(17, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"8\", value.termValue.utf8ToString());\n    assertEquals(12, value.numericValue);\n    assertEquals(16, value.docUpTo);\n    assertNull(iterator.next());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c58aa602dcba92248bb2498aa7b9c8daecc898b0","date":1544085659,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testBascis().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testBascis().mjava","sourceNew":"  public void testBascis() throws IOException {\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate update =\n        new DocValuesUpdate.NumericDocValuesUpdate(new Term(\"id\", \"1\"), \"age\", 6);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, update, 15);\n    buffer.addUpdate(new Term(\"id\", \"10\"), 6, 15);\n    assertTrue(buffer.hasSingleValue());\n    buffer.addUpdate(new Term(\"id\", \"8\"), 12, 15);\n    assertFalse(buffer.hasSingleValue());\n    buffer.addUpdate(new Term(\"some_other_field\", \"8\"), 13, 17);\n    assertFalse(buffer.hasSingleValue());\n    buffer.addUpdate(new Term(\"id\", \"8\"), 12, 16);\n    assertFalse(buffer.hasSingleValue());\n    assertTrue(buffer.isNumeric());\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"1\", value.termValue.utf8ToString());\n    assertEquals(6, value.numericValue);\n    assertEquals(15, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"10\", value.termValue.utf8ToString());\n    assertEquals(6, value.numericValue);\n    assertEquals(15, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"8\", value.termValue.utf8ToString());\n    assertEquals(12, value.numericValue);\n    assertEquals(15, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"some_other_field\", value.termField);\n    assertEquals(\"8\", value.termValue.utf8ToString());\n    assertEquals(13, value.numericValue);\n    assertEquals(17, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"8\", value.termValue.utf8ToString());\n    assertEquals(12, value.numericValue);\n    assertEquals(16, value.docUpTo);\n    assertNull(iterator.next());\n  }\n\n","sourceOld":"  public void testBascis() throws IOException {\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate update =\n        new DocValuesUpdate.NumericDocValuesUpdate(new Term(\"id\", \"1\"), \"age\", 6);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, update, 15);\n    buffer.addUpdate(new Term(\"id\", \"10\"), 6, 15);\n    buffer.addUpdate(new Term(\"id\", \"8\"), 12, 15);\n    buffer.addUpdate(new Term(\"some_other_field\", \"8\"), 13, 17);\n    buffer.addUpdate(new Term(\"id\", \"8\"), 12, 16);\n    assertTrue(buffer.isNumeric());\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"1\", value.termValue.utf8ToString());\n    assertEquals(6, value.numericValue);\n    assertEquals(15, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"10\", value.termValue.utf8ToString());\n    assertEquals(6, value.numericValue);\n    assertEquals(15, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"8\", value.termValue.utf8ToString());\n    assertEquals(12, value.numericValue);\n    assertEquals(15, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"some_other_field\", value.termField);\n    assertEquals(\"8\", value.termValue.utf8ToString());\n    assertEquals(13, value.numericValue);\n    assertEquals(17, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"8\", value.termValue.utf8ToString());\n    assertEquals(12, value.numericValue);\n    assertEquals(16, value.docUpTo);\n    assertNull(iterator.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbaff854eb04c7da5e30a9ade1644b7fbf7c3b9","date":1544461568,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testBascis().mjava","sourceNew":"  public void testBasics() throws IOException {\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate update =\n        new DocValuesUpdate.NumericDocValuesUpdate(new Term(\"id\", \"1\"), \"age\", 6);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, update, 15);\n    buffer.addUpdate(new Term(\"id\", \"10\"), 6, 15);\n    assertTrue(buffer.hasSingleValue());\n    buffer.addUpdate(new Term(\"id\", \"8\"), 12, 15);\n    assertFalse(buffer.hasSingleValue());\n    buffer.addUpdate(new Term(\"some_other_field\", \"8\"), 13, 17);\n    assertFalse(buffer.hasSingleValue());\n    buffer.addUpdate(new Term(\"id\", \"8\"), 12, 16);\n    assertFalse(buffer.hasSingleValue());\n    assertTrue(buffer.isNumeric());\n    assertEquals(13, buffer.getMaxNumeric());\n    assertEquals(6, buffer.getMinNumeric());\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"1\", value.termValue.utf8ToString());\n    assertEquals(6, value.numericValue);\n    assertEquals(15, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"10\", value.termValue.utf8ToString());\n    assertEquals(6, value.numericValue);\n    assertEquals(15, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"8\", value.termValue.utf8ToString());\n    assertEquals(12, value.numericValue);\n    assertEquals(15, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"some_other_field\", value.termField);\n    assertEquals(\"8\", value.termValue.utf8ToString());\n    assertEquals(13, value.numericValue);\n    assertEquals(17, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"8\", value.termValue.utf8ToString());\n    assertEquals(12, value.numericValue);\n    assertEquals(16, value.docUpTo);\n    assertNull(iterator.next());\n  }\n\n","sourceOld":"  public void testBascis() throws IOException {\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate update =\n        new DocValuesUpdate.NumericDocValuesUpdate(new Term(\"id\", \"1\"), \"age\", 6);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, update, 15);\n    buffer.addUpdate(new Term(\"id\", \"10\"), 6, 15);\n    assertTrue(buffer.hasSingleValue());\n    buffer.addUpdate(new Term(\"id\", \"8\"), 12, 15);\n    assertFalse(buffer.hasSingleValue());\n    buffer.addUpdate(new Term(\"some_other_field\", \"8\"), 13, 17);\n    assertFalse(buffer.hasSingleValue());\n    buffer.addUpdate(new Term(\"id\", \"8\"), 12, 16);\n    assertFalse(buffer.hasSingleValue());\n    assertTrue(buffer.isNumeric());\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"1\", value.termValue.utf8ToString());\n    assertEquals(6, value.numericValue);\n    assertEquals(15, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"10\", value.termValue.utf8ToString());\n    assertEquals(6, value.numericValue);\n    assertEquals(15, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"8\", value.termValue.utf8ToString());\n    assertEquals(12, value.numericValue);\n    assertEquals(15, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"some_other_field\", value.termField);\n    assertEquals(\"8\", value.termValue.utf8ToString());\n    assertEquals(13, value.numericValue);\n    assertEquals(17, value.docUpTo);\n\n    value = iterator.next();\n    assertNotNull(value);\n    assertEquals(\"id\", value.termField);\n    assertEquals(\"8\", value.termValue.utf8ToString());\n    assertEquals(12, value.numericValue);\n    assertEquals(16, value.docUpTo);\n    assertNull(iterator.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c58aa602dcba92248bb2498aa7b9c8daecc898b0":["28211671436f185419b3f7e53ccfc3911441ab65"],"28211671436f185419b3f7e53ccfc3911441ab65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6dbaff854eb04c7da5e30a9ade1644b7fbf7c3b9":["c58aa602dcba92248bb2498aa7b9c8daecc898b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbaff854eb04c7da5e30a9ade1644b7fbf7c3b9"]},"commit2Childs":{"c58aa602dcba92248bb2498aa7b9c8daecc898b0":["6dbaff854eb04c7da5e30a9ade1644b7fbf7c3b9"],"28211671436f185419b3f7e53ccfc3911441ab65":["c58aa602dcba92248bb2498aa7b9c8daecc898b0"],"6dbaff854eb04c7da5e30a9ade1644b7fbf7c3b9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28211671436f185419b3f7e53ccfc3911441ab65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}