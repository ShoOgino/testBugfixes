{"path":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#assertResponseValues(int,SolrClient,SolrRequest,Map).mjava","commits":[{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#assertResponseValues(int,SolrClient,SolrRequest,Map).mjava","pathOld":"/dev/null","sourceNew":"  static void assertResponseValues(int repeats, SolrClient client, SolrRequest req, Map vals) throws Exception {\n    for (int i = 0; i < repeats; i++) {\n      if (i > 0) {\n        Thread.sleep(100);\n      }\n      try {\n        SolrResponse rsp = req.process(client);\n        try {\n          for (Object e : vals.entrySet()) {\n            Map.Entry entry = (Map.Entry) e;\n            String key = (String) entry.getKey();\n            Object val = entry.getValue();\n            Predicate p = val instanceof Predicate ? (Predicate) val : o -> {\n              String v = o == null ? null : String.valueOf(o);\n              return Objects.equals(val, o);\n            };\n            assertTrue(\"attempt: \" + i + \" Mismatch for value : '\" + key + \"' in response \" + Utils.toJSONString(rsp),\n                p.test(rsp.getResponse()._get(key, null)));\n\n          }\n          return;\n        } catch (Exception e) {\n          if (i >= repeats - 1) throw e;\n          continue;\n        }\n\n      } catch (Exception e) {\n        if (i >= repeats - 1) throw e;\n        log.error(\"exception in request\", e);\n        continue;\n      }\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74","date":1563736916,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#assertResponseValues(int,SolrClient,SolrRequest,Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#assertResponseValues(int,SolrClient,SolrRequest,Map).mjava","sourceNew":"  static void assertResponseValues(int repeats, SolrClient client, SolrRequest req, Map vals) throws Exception {\n    for (int i = 0; i < repeats; i++) {\n      if (i > 0) {\n        Thread.sleep(100);\n      }\n      try {\n        SolrResponse rsp = req.process(client);\n        try {\n          for (Object e : vals.entrySet()) {\n            Map.Entry entry = (Map.Entry) e;\n            String key = (String) entry.getKey();\n            Object val = entry.getValue();\n            Predicate p = val instanceof Predicate ? (Predicate) val : o -> {\n              String v = o == null ? null : String.valueOf(o);\n              return Objects.equals(val, o);\n            };\n            assertTrue(\"attempt: \" + i + \" Mismatch for value : '\" + key + \"' in response \" + Utils.toJSONString(rsp),\n                p.test(rsp.getResponse()._get(key, null)));\n\n          }\n          return;\n        } catch (Exception e) {\n          if (i >= repeats - 1) throw e;\n          continue;\n        }\n\n      } catch (Exception e) {\n        if (i >= repeats - 1) throw e;\n        continue;\n      }\n    }\n\n\n  }\n\n","sourceOld":"  static void assertResponseValues(int repeats, SolrClient client, SolrRequest req, Map vals) throws Exception {\n    for (int i = 0; i < repeats; i++) {\n      if (i > 0) {\n        Thread.sleep(100);\n      }\n      try {\n        SolrResponse rsp = req.process(client);\n        try {\n          for (Object e : vals.entrySet()) {\n            Map.Entry entry = (Map.Entry) e;\n            String key = (String) entry.getKey();\n            Object val = entry.getValue();\n            Predicate p = val instanceof Predicate ? (Predicate) val : o -> {\n              String v = o == null ? null : String.valueOf(o);\n              return Objects.equals(val, o);\n            };\n            assertTrue(\"attempt: \" + i + \" Mismatch for value : '\" + key + \"' in response \" + Utils.toJSONString(rsp),\n                p.test(rsp.getResponse()._get(key, null)));\n\n          }\n          return;\n        } catch (Exception e) {\n          if (i >= repeats - 1) throw e;\n          continue;\n        }\n\n      } catch (Exception e) {\n        if (i >= repeats - 1) throw e;\n        log.error(\"exception in request\", e);\n        continue;\n      }\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d7acd9884eddaa05c820b21a6a636d2834bfd66","date":1563809582,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#assertResponseValues(int,SolrClient,SolrRequest,Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#assertResponseValues(int,SolrClient,SolrRequest,Map).mjava","sourceNew":"  static void assertResponseValues(int repeats, SolrClient client, SolrRequest req, Map vals) throws Exception {\n    for (int i = 0; i < repeats; i++) {\n      if (i > 0) {\n        Thread.sleep(100);\n      }\n      SolrResponse rsp = null;\n      try {\n        rsp = req.process(client);\n      } catch (Exception e) {\n        if (i >= repeats - 1) throw e;\n      }\n      for (Object e : vals.entrySet()) {\n        Map.Entry entry = (Map.Entry) e;\n        String key = (String) entry.getKey();\n        Object val = entry.getValue();\n        Predicate p = val instanceof Predicate ? (Predicate) val : o -> {\n          String v = o == null ? null : String.valueOf(o);\n          return Objects.equals(val, o);\n        };\n        boolean isPass = p.test(rsp.getResponse()._get(key, null));\n        if (!isPass && i >= repeats - 1) {\n          assertTrue(\"attempt: \" + i + \" Mismatch for value : '\" + key + \"' in response \" + Utils.toJSONString(rsp),\n              isPass);\n        }\n\n      }\n      return;\n\n\n    }\n\n\n  }\n\n","sourceOld":"  static void assertResponseValues(int repeats, SolrClient client, SolrRequest req, Map vals) throws Exception {\n    for (int i = 0; i < repeats; i++) {\n      if (i > 0) {\n        Thread.sleep(100);\n      }\n      try {\n        SolrResponse rsp = req.process(client);\n        try {\n          for (Object e : vals.entrySet()) {\n            Map.Entry entry = (Map.Entry) e;\n            String key = (String) entry.getKey();\n            Object val = entry.getValue();\n            Predicate p = val instanceof Predicate ? (Predicate) val : o -> {\n              String v = o == null ? null : String.valueOf(o);\n              return Objects.equals(val, o);\n            };\n            assertTrue(\"attempt: \" + i + \" Mismatch for value : '\" + key + \"' in response \" + Utils.toJSONString(rsp),\n                p.test(rsp.getResponse()._get(key, null)));\n\n          }\n          return;\n        } catch (Exception e) {\n          if (i >= repeats - 1) throw e;\n          continue;\n        }\n\n      } catch (Exception e) {\n        if (i >= repeats - 1) throw e;\n        continue;\n      }\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d","date":1563898669,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#assertResponseValues(int,SolrClient,SolrRequest,Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#assertResponseValues(int,SolrClient,SolrRequest,Map).mjava","sourceNew":"  static void assertResponseValues(int repeats, SolrClient client, SolrRequest req, Map vals) throws Exception {\n    for (int i = 0; i < repeats; i++) {\n      if (i > 0) {\n        Thread.sleep(100);\n      }\n      SolrResponse rsp = null;\n      try {\n        rsp = req.process(client);\n      } catch (Exception e) {\n        if (i >= repeats - 1) throw e;\n      }\n      for (Object e : vals.entrySet()) {\n        Map.Entry entry = (Map.Entry) e;\n        String key = (String) entry.getKey();\n        Object val = entry.getValue();\n        Predicate p = val instanceof Predicate ? (Predicate) val : o -> {\n          String v = o == null ? null : String.valueOf(o);\n          return Objects.equals(val, o);\n        };\n        boolean isPass = p.test(rsp.getResponse()._get(key, null));\n        if(isPass) return;\n        else if (i >= repeats - 1) {\n          fail(\"attempt: \" + i + \" Mismatch for value : '\" + key + \"' in response \" + Utils.toJSONString(rsp));\n        }\n\n      }\n\n    }\n\n\n  }\n\n","sourceOld":"  static void assertResponseValues(int repeats, SolrClient client, SolrRequest req, Map vals) throws Exception {\n    for (int i = 0; i < repeats; i++) {\n      if (i > 0) {\n        Thread.sleep(100);\n      }\n      SolrResponse rsp = null;\n      try {\n        rsp = req.process(client);\n      } catch (Exception e) {\n        if (i >= repeats - 1) throw e;\n      }\n      for (Object e : vals.entrySet()) {\n        Map.Entry entry = (Map.Entry) e;\n        String key = (String) entry.getKey();\n        Object val = entry.getValue();\n        Predicate p = val instanceof Predicate ? (Predicate) val : o -> {\n          String v = o == null ? null : String.valueOf(o);\n          return Objects.equals(val, o);\n        };\n        boolean isPass = p.test(rsp.getResponse()._get(key, null));\n        if (!isPass && i >= repeats - 1) {\n          assertTrue(\"attempt: \" + i + \" Mismatch for value : '\" + key + \"' in response \" + Utils.toJSONString(rsp),\n              isPass);\n        }\n\n      }\n      return;\n\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#assertResponseValues(int,SolrClient,SolrRequest,Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#assertResponseValues(int,SolrClient,SolrRequest,Map).mjava","sourceNew":"  static SolrResponse assertResponseValues(int repeats, SolrClient client, SolrRequest req, Map vals) throws Exception {\n    SolrResponse rsp = null;\n\n    for (int i = 0; i < repeats; i++) {\n      if (i > 0) {\n        Thread.sleep(100);\n      }\n      try {\n        rsp = req.process(client);\n      } catch (Exception e) {\n        if (i >= repeats - 1) throw e;\n      }\n      for (Object e : vals.entrySet()) {\n        Map.Entry entry = (Map.Entry) e;\n        String key = (String) entry.getKey();\n        Object val = entry.getValue();\n        Predicate p = val instanceof Predicate ? (Predicate) val : o -> {\n          String v = o == null ? null : String.valueOf(o);\n          return Objects.equals(val, o);\n        };\n        boolean isPass = p.test(rsp.getResponse()._get(key, null));\n        if (isPass) return rsp;\n        else if (i >= repeats - 1) {\n          fail(\"attempt: \" + i + \" Mismatch for value : '\" + key + \"' in response \" + Utils.toJSONString(rsp));\n        }\n\n      }\n\n    }\n    return rsp;\n  }\n\n","sourceOld":"  static void assertResponseValues(int repeats, SolrClient client, SolrRequest req, Map vals) throws Exception {\n    for (int i = 0; i < repeats; i++) {\n      if (i > 0) {\n        Thread.sleep(100);\n      }\n      SolrResponse rsp = null;\n      try {\n        rsp = req.process(client);\n      } catch (Exception e) {\n        if (i >= repeats - 1) throw e;\n      }\n      for (Object e : vals.entrySet()) {\n        Map.Entry entry = (Map.Entry) e;\n        String key = (String) entry.getKey();\n        Object val = entry.getValue();\n        Predicate p = val instanceof Predicate ? (Predicate) val : o -> {\n          String v = o == null ? null : String.valueOf(o);\n          return Objects.equals(val, o);\n        };\n        boolean isPass = p.test(rsp.getResponse()._get(key, null));\n        if(isPass) return;\n        else if (i >= repeats - 1) {\n          fail(\"attempt: \" + i + \" Mismatch for value : '\" + key + \"' in response \" + Utils.toJSONString(rsp));\n        }\n\n      }\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","date":1566455239,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#assertResponseValues(int,SolrClient,SolrRequest,Map).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#assertResponseValues(int,SolrClient,SolrRequest,Map).mjava","sourceNew":"  static SolrResponse assertResponseValues(int repeats, SolrClient client, SolrRequest req, Map vals) throws Exception {\n    SolrResponse rsp = null;\n\n    for (int i = 0; i < repeats; i++) {\n      if (i > 0) {\n        Thread.sleep(100);\n      }\n      try {\n        rsp = req.process(client);\n      } catch (Exception e) {\n        if (i >= repeats - 1) throw e;\n        continue;\n      }\n      for (Object e : vals.entrySet()) {\n        Map.Entry entry = (Map.Entry) e;\n        String k = (String) entry.getKey();\n        List<String> key = StrUtils.split(k, '/');\n\n        Object val = entry.getValue();\n        Predicate p = val instanceof Predicate ? (Predicate) val : o -> {\n          String v = o == null ? null : String.valueOf(o);\n          return Objects.equals(val, o);\n        };\n        boolean isPass = p.test(rsp._get(key, null));\n        if (isPass) return rsp;\n        else if (i >= repeats - 1) {\n          fail(\"attempt: \" + i + \" Mismatch for value : '\" + key + \"' in response \" + Utils.toJSONString(rsp));\n        }\n\n      }\n\n    }\n    return rsp;\n  }\n\n","sourceOld":"  static SolrResponse assertResponseValues(int repeats, SolrClient client, SolrRequest req, Map vals) throws Exception {\n    SolrResponse rsp = null;\n\n    for (int i = 0; i < repeats; i++) {\n      if (i > 0) {\n        Thread.sleep(100);\n      }\n      try {\n        rsp = req.process(client);\n      } catch (Exception e) {\n        if (i >= repeats - 1) throw e;\n      }\n      for (Object e : vals.entrySet()) {\n        Map.Entry entry = (Map.Entry) e;\n        String key = (String) entry.getKey();\n        Object val = entry.getValue();\n        Predicate p = val instanceof Predicate ? (Predicate) val : o -> {\n          String v = o == null ? null : String.valueOf(o);\n          return Objects.equals(val, o);\n        };\n        boolean isPass = p.test(rsp.getResponse()._get(key, null));\n        if (isPass) return rsp;\n        else if (i >= repeats - 1) {\n          fail(\"attempt: \" + i + \" Mismatch for value : '\" + key + \"' in response \" + Utils.toJSONString(rsp));\n        }\n\n      }\n\n    }\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#assertResponseValues(int,SolrClient,SolrRequest,Map).mjava","sourceNew":null,"sourceOld":"  static SolrResponse assertResponseValues(int repeats, SolrClient client, SolrRequest req, Map vals) throws Exception {\n    SolrResponse rsp = null;\n\n    for (int i = 0; i < repeats; i++) {\n      if (i > 0) {\n        Thread.sleep(100);\n      }\n      try {\n        rsp = req.process(client);\n      } catch (Exception e) {\n        if (i >= repeats - 1) throw e;\n        continue;\n      }\n      for (Object e : vals.entrySet()) {\n        Map.Entry entry = (Map.Entry) e;\n        String k = (String) entry.getKey();\n        List<String> key = StrUtils.split(k, '/');\n\n        Object val = entry.getValue();\n        Predicate p = val instanceof Predicate ? (Predicate) val : o -> {\n          String v = o == null ? null : String.valueOf(o);\n          return Objects.equals(val, o);\n        };\n        boolean isPass = p.test(rsp._get(key, null));\n        if (isPass) return rsp;\n        else if (i >= repeats - 1) {\n          fail(\"attempt: \" + i + \" Mismatch for value : '\" + key + \"' in response \" + Utils.toJSONString(rsp));\n        }\n\n      }\n\n    }\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#assertResponseValues(int,SolrClient,SolrRequest,Map).mjava","sourceNew":null,"sourceOld":"  static SolrResponse assertResponseValues(int repeats, SolrClient client, SolrRequest req, Map vals) throws Exception {\n    SolrResponse rsp = null;\n\n    for (int i = 0; i < repeats; i++) {\n      if (i > 0) {\n        Thread.sleep(100);\n      }\n      try {\n        rsp = req.process(client);\n      } catch (Exception e) {\n        if (i >= repeats - 1) throw e;\n        continue;\n      }\n      for (Object e : vals.entrySet()) {\n        Map.Entry entry = (Map.Entry) e;\n        String k = (String) entry.getKey();\n        List<String> key = StrUtils.split(k, '/');\n\n        Object val = entry.getValue();\n        Predicate p = val instanceof Predicate ? (Predicate) val : o -> {\n          String v = o == null ? null : String.valueOf(o);\n          return Objects.equals(val, o);\n        };\n        boolean isPass = p.test(rsp._get(key, null));\n        if (isPass) return rsp;\n        else if (i >= repeats - 1) {\n          fail(\"attempt: \" + i + \" Mismatch for value : '\" + key + \"' in response \" + Utils.toJSONString(rsp));\n        }\n\n      }\n\n    }\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d"],"6d7acd9884eddaa05c820b21a6a636d2834bfd66":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d":["6d7acd9884eddaa05c820b21a6a636d2834bfd66"],"b0b597c65628ca9e73913a07e81691f8229bae35":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"6d7acd9884eddaa05c820b21a6a636d2834bfd66":["2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["6d7acd9884eddaa05c820b21a6a636d2834bfd66"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}