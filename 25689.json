{"path":"src/java/org/apache/solr/handler/admin/SystemInfoHandler#humanReadableUnits(long,DecimalFormat).mjava","commits":[{"id":"3558b4e832e5cf103b3de1f29fa823d34215c6fc","date":1245943733,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/SystemInfoHandler#humanReadableUnits(long,DecimalFormat).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return good default units based on byte size.\n   */\n  private static String humanReadableUnits(long bytes, DecimalFormat df) {\n    String newSizeAndUnits;\n\n    if (bytes / ONE_GB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float)bytes / ONE_GB)) + \" GB\";\n    } else if (bytes / ONE_MB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float)bytes / ONE_MB)) + \" MB\";\n    } else if (bytes / ONE_KB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float)bytes / ONE_KB)) + \" KB\";\n    } else {\n      newSizeAndUnits = String.valueOf(bytes) + \" bytes\";\n    }\n\n    return newSizeAndUnits;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/SystemInfoHandler#humanReadableUnits(long,DecimalFormat).mjava","pathOld":"src/java/org/apache/solr/handler/admin/SystemInfoHandler#humanReadableUnits(long,DecimalFormat).mjava","sourceNew":"  /**\n   * Return good default units based on byte size.\n   */\n  private static String humanReadableUnits(long bytes, DecimalFormat df) {\n    String newSizeAndUnits;\n\n    if (bytes / ONE_GB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float)bytes / ONE_GB)) + \" GB\";\n    } else if (bytes / ONE_MB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float)bytes / ONE_MB)) + \" MB\";\n    } else if (bytes / ONE_KB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float)bytes / ONE_KB)) + \" KB\";\n    } else {\n      newSizeAndUnits = String.valueOf(bytes) + \" bytes\";\n    }\n\n    return newSizeAndUnits;\n  }\n\n","sourceOld":"  /**\n   * Return good default units based on byte size.\n   */\n  private static String humanReadableUnits(long bytes, DecimalFormat df) {\n    String newSizeAndUnits;\n\n    if (bytes / ONE_GB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float)bytes / ONE_GB)) + \" GB\";\n    } else if (bytes / ONE_MB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float)bytes / ONE_MB)) + \" MB\";\n    } else if (bytes / ONE_KB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float)bytes / ONE_KB)) + \" KB\";\n    } else {\n      newSizeAndUnits = String.valueOf(bytes) + \" bytes\";\n    }\n\n    return newSizeAndUnits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"3558b4e832e5cf103b3de1f29fa823d34215c6fc":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["3558b4e832e5cf103b3de1f29fa823d34215c6fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3558b4e832e5cf103b3de1f29fa823d34215c6fc"],"3558b4e832e5cf103b3de1f29fa823d34215c6fc":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}