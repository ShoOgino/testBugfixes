{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int).mjava","commits":[{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset) throws IOException {\n    if (TermGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<BytesRef> collector = (FirstPassGroupingCollector<BytesRef>) c;\n      return collector.getTopGroups(groupOffset);\n    } else if (ValueSourceGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<MutableValue> collector = (FirstPassGroupingCollector<MutableValue>) c;\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = collector.getTopGroups(groupOffset);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) throws IOException {\n    if (TermGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<BytesRef> collector = (FirstPassGroupingCollector<BytesRef>) c;\n      return collector.getTopGroups(groupOffset, fillFields);\n    } else if (ValueSourceGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<MutableValue> collector = (FirstPassGroupingCollector<MutableValue>) c;\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = collector.getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset) throws IOException {\n    if (TermGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      FirstPassGroupingCollector<BytesRef> collector = (FirstPassGroupingCollector<BytesRef>) c;\n      return collector.getTopGroups(groupOffset);\n    } else if (ValueSourceGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      FirstPassGroupingCollector<MutableValue> collector = (FirstPassGroupingCollector<MutableValue>) c;\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = collector.getTopGroups(groupOffset);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset) throws IOException {\n    if (TermGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<BytesRef> collector = (FirstPassGroupingCollector<BytesRef>) c;\n      return collector.getTopGroups(groupOffset);\n    } else if (ValueSourceGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<MutableValue> collector = (FirstPassGroupingCollector<MutableValue>) c;\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = collector.getTopGroups(groupOffset);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset) throws IOException {\n    if (TermGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<BytesRef> collector = (FirstPassGroupingCollector<BytesRef>) c;\n      return collector.getTopGroups(groupOffset);\n    } else if (ValueSourceGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<MutableValue> collector = (FirstPassGroupingCollector<MutableValue>) c;\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = collector.getTopGroups(groupOffset);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset) throws IOException {\n    if (TermGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      FirstPassGroupingCollector<BytesRef> collector = (FirstPassGroupingCollector<BytesRef>) c;\n      return collector.getTopGroups(groupOffset);\n    } else if (ValueSourceGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      FirstPassGroupingCollector<MutableValue> collector = (FirstPassGroupingCollector<MutableValue>) c;\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = collector.getTopGroups(groupOffset);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset) throws IOException {\n    if (TermGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      FirstPassGroupingCollector<BytesRef> collector = (FirstPassGroupingCollector<BytesRef>) c;\n      return collector.getTopGroups(groupOffset);\n    } else if (ValueSourceGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      FirstPassGroupingCollector<MutableValue> collector = (FirstPassGroupingCollector<MutableValue>) c;\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = collector.getTopGroups(groupOffset);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset) throws IOException {\n    if (TermGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<BytesRef> collector = (FirstPassGroupingCollector<BytesRef>) c;\n      return collector.getTopGroups(groupOffset);\n    } else if (ValueSourceGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<MutableValue> collector = (FirstPassGroupingCollector<MutableValue>) c;\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = collector.getTopGroups(groupOffset);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["04c370507e5521b2eb998530736f1c19b851ed5a"],"04c370507e5521b2eb998530736f1c19b851ed5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"04c370507e5521b2eb998530736f1c19b851ed5a":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04c370507e5521b2eb998530736f1c19b851ed5a"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}