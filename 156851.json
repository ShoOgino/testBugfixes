{"path":"solr/core/src/java/org/apache/solr/schema/TextField#init(IndexSchema,Map[String,String]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TextField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    properties |= TOKENIZED;\n    if (schema.getVersion()> 1.1f) properties &= ~OMIT_TF_POSITIONS;\n    if (schema.getVersion() > 1.3f) {\n      autoGeneratePhraseQueries = false;\n    } else {\n      autoGeneratePhraseQueries = true;\n    }\n    String autoGeneratePhraseQueriesStr = args.remove(\"autoGeneratePhraseQueries\");\n    if (autoGeneratePhraseQueriesStr != null)\n      autoGeneratePhraseQueries = Boolean.parseBoolean(autoGeneratePhraseQueriesStr);\n    super.init(schema, args);    \n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    properties |= TOKENIZED;\n    if (schema.getVersion()> 1.1f) properties &= ~OMIT_TF_POSITIONS;\n    if (schema.getVersion() > 1.3f) {\n      autoGeneratePhraseQueries = false;\n    } else {\n      autoGeneratePhraseQueries = true;\n    }\n    String autoGeneratePhraseQueriesStr = args.remove(\"autoGeneratePhraseQueries\");\n    if (autoGeneratePhraseQueriesStr != null)\n      autoGeneratePhraseQueries = Boolean.parseBoolean(autoGeneratePhraseQueriesStr);\n    super.init(schema, args);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TextField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    properties |= TOKENIZED;\n    if (schema.getVersion()> 1.1f) properties &= ~OMIT_TF_POSITIONS;\n    if (schema.getVersion() > 1.3f) {\n      autoGeneratePhraseQueries = false;\n    } else {\n      autoGeneratePhraseQueries = true;\n    }\n    String autoGeneratePhraseQueriesStr = args.remove(\"autoGeneratePhraseQueries\");\n    if (autoGeneratePhraseQueriesStr != null)\n      autoGeneratePhraseQueries = Boolean.parseBoolean(autoGeneratePhraseQueriesStr);\n    super.init(schema, args);    \n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    properties |= TOKENIZED;\n    if (schema.getVersion()> 1.1f) properties &= ~OMIT_TF_POSITIONS;\n    if (schema.getVersion() > 1.3f) {\n      autoGeneratePhraseQueries = false;\n    } else {\n      autoGeneratePhraseQueries = true;\n    }\n    String autoGeneratePhraseQueriesStr = args.remove(\"autoGeneratePhraseQueries\");\n    if (autoGeneratePhraseQueriesStr != null)\n      autoGeneratePhraseQueries = Boolean.parseBoolean(autoGeneratePhraseQueriesStr);\n    super.init(schema, args);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TextField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    properties |= TOKENIZED;\n    if (schema.getVersion()> 1.1f) properties &= ~OMIT_TF_POSITIONS;\n    if (schema.getVersion() > 1.3f) {\n      autoGeneratePhraseQueries = false;\n    } else {\n      autoGeneratePhraseQueries = true;\n    }\n    String autoGeneratePhraseQueriesStr = args.remove(\"autoGeneratePhraseQueries\");\n    if (autoGeneratePhraseQueriesStr != null)\n      autoGeneratePhraseQueries = Boolean.parseBoolean(autoGeneratePhraseQueriesStr);\n    super.init(schema, args);    \n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    properties |= TOKENIZED;\n    if (schema.getVersion()> 1.1f) properties &= ~OMIT_TF_POSITIONS;\n    if (schema.getVersion() > 1.3f) {\n      autoGeneratePhraseQueries = false;\n    } else {\n      autoGeneratePhraseQueries = true;\n    }\n    String autoGeneratePhraseQueriesStr = args.remove(\"autoGeneratePhraseQueries\");\n    if (autoGeneratePhraseQueriesStr != null)\n      autoGeneratePhraseQueries = Boolean.parseBoolean(autoGeneratePhraseQueriesStr);\n    super.init(schema, args);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fff41ba33f73a49aabac5f5989da64c69ef6ba5","date":1354305675,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    properties |= TOKENIZED;\n    if (schema.getVersion() > 1.1F &&\n        // only override if it's not explicitly true\n        0 == (trueProperties & OMIT_TF_POSITIONS)) {\n      properties &= ~OMIT_TF_POSITIONS;\n    }\n    if (schema.getVersion() > 1.3F) {\n      autoGeneratePhraseQueries = false;\n    } else {\n      autoGeneratePhraseQueries = true;\n    }\n    String autoGeneratePhraseQueriesStr = args.remove(\"autoGeneratePhraseQueries\");\n    if (autoGeneratePhraseQueriesStr != null)\n      autoGeneratePhraseQueries = Boolean.parseBoolean(autoGeneratePhraseQueriesStr);\n    super.init(schema, args);    \n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    properties |= TOKENIZED;\n    if (schema.getVersion()> 1.1f) properties &= ~OMIT_TF_POSITIONS;\n    if (schema.getVersion() > 1.3f) {\n      autoGeneratePhraseQueries = false;\n    } else {\n      autoGeneratePhraseQueries = true;\n    }\n    String autoGeneratePhraseQueriesStr = args.remove(\"autoGeneratePhraseQueries\");\n    if (autoGeneratePhraseQueriesStr != null)\n      autoGeneratePhraseQueries = Boolean.parseBoolean(autoGeneratePhraseQueriesStr);\n    super.init(schema, args);    \n  }\n\n","bugFix":["d72e3710bede9618eb9b2b5c6936369f3d3f9579","00aaee1492907b0fd5421b6cf854a9eee5cd1326"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    properties |= TOKENIZED;\n    if (schema.getVersion() > 1.1F &&\n        // only override if it's not explicitly true\n        0 == (trueProperties & OMIT_TF_POSITIONS)) {\n      properties &= ~OMIT_TF_POSITIONS;\n    }\n    if (schema.getVersion() > 1.3F) {\n      autoGeneratePhraseQueries = false;\n    } else {\n      autoGeneratePhraseQueries = true;\n    }\n    String autoGeneratePhraseQueriesStr = args.remove(\"autoGeneratePhraseQueries\");\n    if (autoGeneratePhraseQueriesStr != null)\n      autoGeneratePhraseQueries = Boolean.parseBoolean(autoGeneratePhraseQueriesStr);\n    super.init(schema, args);    \n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    properties |= TOKENIZED;\n    if (schema.getVersion()> 1.1f) properties &= ~OMIT_TF_POSITIONS;\n    if (schema.getVersion() > 1.3f) {\n      autoGeneratePhraseQueries = false;\n    } else {\n      autoGeneratePhraseQueries = true;\n    }\n    String autoGeneratePhraseQueriesStr = args.remove(\"autoGeneratePhraseQueries\");\n    if (autoGeneratePhraseQueriesStr != null)\n      autoGeneratePhraseQueries = Boolean.parseBoolean(autoGeneratePhraseQueriesStr);\n    super.init(schema, args);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d1728ac6bfc0cea61f3e27436b418295d9982a3","date":1491423806,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    properties |= TOKENIZED;\n    if (schema.getVersion() > 1.1F &&\n        // only override if it's not explicitly true\n        0 == (trueProperties & OMIT_TF_POSITIONS)) {\n      properties &= ~OMIT_TF_POSITIONS;\n    }\n    if (schema.getVersion() > 1.3F) {\n      autoGeneratePhraseQueries = false;\n    } else {\n      autoGeneratePhraseQueries = true;\n    }\n    String autoGeneratePhraseQueriesStr = args.remove(AUTO_GENERATE_PHRASE_QUERIES);\n    if (autoGeneratePhraseQueriesStr != null)\n      autoGeneratePhraseQueries = Boolean.parseBoolean(autoGeneratePhraseQueriesStr);\n    \n    enableGraphQueries = true;\n    String enableGraphQueriesStr = args.remove(ENABLE_GRAPH_QUERIES);\n    if (enableGraphQueriesStr != null)\n      enableGraphQueries = Boolean.parseBoolean(enableGraphQueriesStr);\n\n    super.init(schema, args);    \n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    properties |= TOKENIZED;\n    if (schema.getVersion() > 1.1F &&\n        // only override if it's not explicitly true\n        0 == (trueProperties & OMIT_TF_POSITIONS)) {\n      properties &= ~OMIT_TF_POSITIONS;\n    }\n    if (schema.getVersion() > 1.3F) {\n      autoGeneratePhraseQueries = false;\n    } else {\n      autoGeneratePhraseQueries = true;\n    }\n    String autoGeneratePhraseQueriesStr = args.remove(\"autoGeneratePhraseQueries\");\n    if (autoGeneratePhraseQueriesStr != null)\n      autoGeneratePhraseQueries = Boolean.parseBoolean(autoGeneratePhraseQueriesStr);\n    super.init(schema, args);    \n  }\n\n","bugFix":["a48e06ad71e6dcb230e678c6304facd688202735"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    properties |= TOKENIZED;\n    if (schema.getVersion() > 1.1F &&\n        // only override if it's not explicitly true\n        0 == (trueProperties & OMIT_TF_POSITIONS)) {\n      properties &= ~OMIT_TF_POSITIONS;\n    }\n    if (schema.getVersion() > 1.3F) {\n      autoGeneratePhraseQueries = false;\n    } else {\n      autoGeneratePhraseQueries = true;\n    }\n    String autoGeneratePhraseQueriesStr = args.remove(AUTO_GENERATE_PHRASE_QUERIES);\n    if (autoGeneratePhraseQueriesStr != null)\n      autoGeneratePhraseQueries = Boolean.parseBoolean(autoGeneratePhraseQueriesStr);\n    \n    enableGraphQueries = true;\n    String enableGraphQueriesStr = args.remove(ENABLE_GRAPH_QUERIES);\n    if (enableGraphQueriesStr != null)\n      enableGraphQueries = Boolean.parseBoolean(enableGraphQueriesStr);\n\n    super.init(schema, args);    \n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    properties |= TOKENIZED;\n    if (schema.getVersion() > 1.1F &&\n        // only override if it's not explicitly true\n        0 == (trueProperties & OMIT_TF_POSITIONS)) {\n      properties &= ~OMIT_TF_POSITIONS;\n    }\n    if (schema.getVersion() > 1.3F) {\n      autoGeneratePhraseQueries = false;\n    } else {\n      autoGeneratePhraseQueries = true;\n    }\n    String autoGeneratePhraseQueriesStr = args.remove(\"autoGeneratePhraseQueries\");\n    if (autoGeneratePhraseQueriesStr != null)\n      autoGeneratePhraseQueries = Boolean.parseBoolean(autoGeneratePhraseQueriesStr);\n    super.init(schema, args);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47d74fab5d64854ddafa81b65ed399b192f2d947","date":1512411916,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    properties |= TOKENIZED;\n    if (schema.getVersion() > 1.1F &&\n        // only override if it's not explicitly true\n        0 == (trueProperties & OMIT_TF_POSITIONS)) {\n      properties &= ~OMIT_TF_POSITIONS;\n    }\n    if (schema.getVersion() > 1.3F) {\n      autoGeneratePhraseQueries = false;\n    } else {\n      autoGeneratePhraseQueries = true;\n    }\n    String autoGeneratePhraseQueriesStr = args.remove(AUTO_GENERATE_PHRASE_QUERIES);\n    if (autoGeneratePhraseQueriesStr != null)\n      autoGeneratePhraseQueries = Boolean.parseBoolean(autoGeneratePhraseQueriesStr);\n\n    synonymQueryStyle = SolrQueryParserBase.SynonymQueryStyle.AS_SAME_TERM;\n    String synonymQueryStyle = args.remove(SYNONYM_QUERY_STYLE);\n    if (synonymQueryStyle != null) {\n      this.synonymQueryStyle = SolrQueryParserBase.SynonymQueryStyle.valueOf(synonymQueryStyle.toUpperCase(Locale.ROOT));\n    }\n    \n    enableGraphQueries = true;\n    String enableGraphQueriesStr = args.remove(ENABLE_GRAPH_QUERIES);\n    if (enableGraphQueriesStr != null)\n      enableGraphQueries = Boolean.parseBoolean(enableGraphQueriesStr);\n\n    super.init(schema, args);    \n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String,String> args) {\n    properties |= TOKENIZED;\n    if (schema.getVersion() > 1.1F &&\n        // only override if it's not explicitly true\n        0 == (trueProperties & OMIT_TF_POSITIONS)) {\n      properties &= ~OMIT_TF_POSITIONS;\n    }\n    if (schema.getVersion() > 1.3F) {\n      autoGeneratePhraseQueries = false;\n    } else {\n      autoGeneratePhraseQueries = true;\n    }\n    String autoGeneratePhraseQueriesStr = args.remove(AUTO_GENERATE_PHRASE_QUERIES);\n    if (autoGeneratePhraseQueriesStr != null)\n      autoGeneratePhraseQueries = Boolean.parseBoolean(autoGeneratePhraseQueriesStr);\n    \n    enableGraphQueries = true;\n    String enableGraphQueriesStr = args.remove(ENABLE_GRAPH_QUERIES);\n    if (enableGraphQueriesStr != null)\n      enableGraphQueries = Boolean.parseBoolean(enableGraphQueriesStr);\n\n    super.init(schema, args);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["2fff41ba33f73a49aabac5f5989da64c69ef6ba5"],"47d74fab5d64854ddafa81b65ed399b192f2d947":["0d1728ac6bfc0cea61f3e27436b418295d9982a3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d1728ac6bfc0cea61f3e27436b418295d9982a3":["2fff41ba33f73a49aabac5f5989da64c69ef6ba5"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"2fff41ba33f73a49aabac5f5989da64c69ef6ba5":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","2fff41ba33f73a49aabac5f5989da64c69ef6ba5"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["47d74fab5d64854ddafa81b65ed399b192f2d947"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"47d74fab5d64854ddafa81b65ed399b192f2d947":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"0d1728ac6bfc0cea61f3e27436b418295d9982a3":["47d74fab5d64854ddafa81b65ed399b192f2d947"],"c26f00b574427b55127e869b935845554afde1fa":["2fff41ba33f73a49aabac5f5989da64c69ef6ba5","407687e67faf6e1f02a211ca078d8e3eed631027"],"2fff41ba33f73a49aabac5f5989da64c69ef6ba5":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0d1728ac6bfc0cea61f3e27436b418295d9982a3","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}