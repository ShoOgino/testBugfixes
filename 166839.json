{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDoubleArray().mjava","commits":[{"id":"deb4d0cfb021fa1b0c1e44571968b254f379ac6f","date":1564497726,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDoubleArray().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testDoubleLongArray().mjava","sourceNew":"  public void testDoubleArray() throws Exception {\n    String expr = \"let(a=list(tuple(d=\\\"1.1\\\", l=\\\"5000\\\"), tuple(d=\\\"1.3\\\", l=\\\"7000\\\")),\" +\n        \"              b=col(a, d),\" +\n        \"              tuple(doubles=double(b)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n\n    List<Double> doubles = (List<Double>)tuples.get(0).get(\"doubles\");\n    assertEquals(doubles.get(0), 1.1, 0);\n    assertEquals(doubles.get(1), 1.3, 0);\n\n  }\n\n","sourceOld":"  public void testDoubleLongArray() throws Exception {\n    String expr = \"let(a=list(tuple(d=\\\"1.1\\\", l=\\\"5000\\\"), tuple(d=\\\"1.3\\\", l=\\\"7000\\\")),\" +\n        \"              b=col(a, d),\" +\n        \"              c=col(a, l),\" +\n        \"              tuple(doubles=double(b),\" +\n        \"                    longs=long(c)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n\n    List<Double> doubles = (List<Double>)tuples.get(0).get(\"doubles\");\n    List<Long> longs = (List<Long>)tuples.get(0).get(\"longs\");\n    assertEquals(doubles.get(0), 1.1, 0);\n    assertEquals(doubles.get(1), 1.3, 0);\n\n    assertEquals(longs.get(0).longValue(), 5000L);\n    assertEquals(longs.get(1).longValue(), 7000L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":0,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDoubleArray().mjava","pathOld":"/dev/null","sourceNew":"  public void testDoubleArray() throws Exception {\n    String expr = \"let(a=list(tuple(d=\\\"1.1\\\", l=\\\"5000\\\"), tuple(d=\\\"1.3\\\", l=\\\"7000\\\")),\" +\n        \"              b=col(a, d),\" +\n        \"              tuple(doubles=double(b)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n\n    List<Double> doubles = (List<Double>)tuples.get(0).get(\"doubles\");\n    assertEquals(doubles.get(0), 1.1, 0);\n    assertEquals(doubles.get(1), 1.3, 0);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDoubleArray().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDoubleArray().mjava","sourceNew":"  public void testDoubleArray() throws Exception {\n    String expr = \"let(a=list(tuple(d=\\\"1.1\\\", l=\\\"5000\\\"), tuple(d=\\\"1.3\\\", l=\\\"7000\\\")),\" +\n        \"              b=col(a, d),\" +\n        \"              tuple(doubles=double(b)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Double> doubles = (List<Double>)tuples.get(0).get(\"doubles\");\n    assertEquals(doubles.get(0), 1.1, 0);\n    assertEquals(doubles.get(1), 1.3, 0);\n\n  }\n\n","sourceOld":"  public void testDoubleArray() throws Exception {\n    String expr = \"let(a=list(tuple(d=\\\"1.1\\\", l=\\\"5000\\\"), tuple(d=\\\"1.3\\\", l=\\\"7000\\\")),\" +\n        \"              b=col(a, d),\" +\n        \"              tuple(doubles=double(b)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n\n    List<Double> doubles = (List<Double>)tuples.get(0).get(\"doubles\");\n    assertEquals(doubles.get(0), 1.1, 0);\n    assertEquals(doubles.get(1), 1.3, 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["deb4d0cfb021fa1b0c1e44571968b254f379ac6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"deb4d0cfb021fa1b0c1e44571968b254f379ac6f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","deb4d0cfb021fa1b0c1e44571968b254f379ac6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["deb4d0cfb021fa1b0c1e44571968b254f379ac6f","f8061ddd97f3352007d927dae445884a6f3d857b"],"deb4d0cfb021fa1b0c1e44571968b254f379ac6f":["9ba1b632c041956c93c41aa1143d16a567014891","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}