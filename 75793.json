{"path":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#Lucene3xTermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","commits":[{"id":"5013b6ff92e8f7f62cd228936ce019f8819b092b","date":1326844034,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#Lucene3xTermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  public Lucene3xTermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09cced0ffd4d11eee37ef7655cc4096103909122","date":1327939357,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#Lucene3xTermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#Lucene3xTermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene3xTermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      if (docStoreOffset != -1 && si.getDocStoreIsCompoundFile()) {\n        d = storeCFSReader = new CompoundFileDirectory(si.dir, \n            IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_STORE_EXTENSION), context, false);\n      } else {\n        storeCFSReader = null;\n      }\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene3xTermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3","date":1327944832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#Lucene3xTermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#Lucene3xTermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene3xTermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      if (docStoreOffset != -1 && si.getDocStoreIsCompoundFile()) {\n        d = storeCFSReader = new CompoundFileDirectory(si.dir, \n            IndexFileNames.segmentFileName(segment, \"\", Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION), context, false);\n      } else {\n        storeCFSReader = null;\n      }\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene3xTermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      if (docStoreOffset != -1 && si.getDocStoreIsCompoundFile()) {\n        d = storeCFSReader = new CompoundFileDirectory(si.dir, \n            IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_STORE_EXTENSION), context, false);\n      } else {\n        storeCFSReader = null;\n      }\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296df632fd63421ea20756fa11ad36fbc6f4c8a9","date":1327957998,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#Lucene3xTermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#Lucene3xTermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene3xTermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      if (docStoreOffset != -1 && si.getDocStoreIsCompoundFile()) {\n        d = storeCFSReader = new CompoundFileDirectory(si.dir, \n            IndexFileNames.segmentFileName(segment, \"\", Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION), context, false);\n      } else {\n        storeCFSReader = null;\n      }\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene3xTermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#Lucene3xTermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#Lucene3xTermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene3xTermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      if (docStoreOffset != -1 && si.getDocStoreIsCompoundFile()) {\n        d = storeCFSReader = new CompoundFileDirectory(si.dir, \n            IndexFileNames.segmentFileName(segment, \"\", Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION), context, false);\n      } else {\n        storeCFSReader = null;\n      }\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene3xTermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#Lucene3xTermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xTermVectorsReader#Lucene3xTermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene3xTermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      if (docStoreOffset != -1 && si.getDocStoreIsCompoundFile()) {\n        d = storeCFSReader = new CompoundFileDirectory(si.dir, \n            IndexFileNames.segmentFileName(segment, \"\", Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION), context, false);\n      } else {\n        storeCFSReader = null;\n      }\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene3xTermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.getDocStoreSegment();\n    final int docStoreOffset = si.getDocStoreOffset();\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      if (docStoreOffset != -1 && si.getDocStoreIsCompoundFile()) {\n        d = storeCFSReader = new CompoundFileDirectory(si.dir, \n            IndexFileNames.segmentFileName(segment, \"\", Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION), context, false);\n      } else {\n        storeCFSReader = null;\n      }\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      if (-1 == docStoreOffset) {\n        this.docStoreOffset = 0;\n        this.size = numTotalDocs;\n        assert size == 0 || numTotalDocs == size;\n      } else {\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert numTotalDocs >= size + docStoreOffset: \"numTotalDocs=\" + numTotalDocs + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      }\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5013b6ff92e8f7f62cd228936ce019f8819b092b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"410e066f093e407222d9681429d209084e783149":["5013b6ff92e8f7f62cd228936ce019f8819b092b","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09cced0ffd4d11eee37ef7655cc4096103909122":["5013b6ff92e8f7f62cd228936ce019f8819b092b"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["5013b6ff92e8f7f62cd228936ce019f8819b092b","be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3":["09cced0ffd4d11eee37ef7655cc4096103909122"]},"commit2Childs":{"5013b6ff92e8f7f62cd228936ce019f8819b092b":["410e066f093e407222d9681429d209084e783149","09cced0ffd4d11eee37ef7655cc4096103909122","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"410e066f093e407222d9681429d209084e783149":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5013b6ff92e8f7f62cd228936ce019f8819b092b"],"09cced0ffd4d11eee37ef7655cc4096103909122":["be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["410e066f093e407222d9681429d209084e783149","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["410e066f093e407222d9681429d209084e783149","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}