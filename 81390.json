{"path":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    if (args.length == 1) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n    } else if (args.length == 2) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    if (field != null) { \n      while (terms.next()) {\n        if (terms.term().field().equals(field)) {\n          tiq.insertWithOverflow(new TermInfo(terms.term(), terms.docFreq()));\n        }\n      }\n    }\n    else {\n      while (terms.next()) {\n        tiq.insertWithOverflow(new TermInfo(terms.term(), terms.docFreq()));\n      }\n    }\n    while (tiq.size() != 0) {\n      TermInfo termInfo = tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    if (args.length == 1) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n    } else if (args.length == 2) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    if (field != null) { \n      while (terms.next()) {\n        if (terms.term().field().equals(field)) {\n          tiq.insertWithOverflow(new TermInfo(terms.term(), terms.docFreq()));\n        }\n      }\n    }\n    else {\n      while (terms.next()) {\n        tiq.insertWithOverflow(new TermInfo(terms.term(), terms.docFreq()));\n      }\n    }\n    while (tiq.size() != 0) {\n      TermInfo termInfo = tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    if (args.length == 1) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n    } else if (args.length == 2) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n\n    if (field != null) { \n      Terms terms = reader.fields().terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term != null) {\n            tiq.insertWithOverflow(new TermInfo(new Term(field, term.utf8ToString()), termsEnum.docFreq()));\n          } else {\n            break;\n          }    \n        }\n      }\n    } else {\n      FieldsEnum fields = reader.fields().iterator();\n      while(true) {\n        field = fields.next();\n        if (field != null) {\n          TermsEnum terms = fields.terms();\n          while(true) {\n            BytesRef term = terms.next();\n            if (term != null) {\n              tiq.insertWithOverflow(new TermInfo(new Term(field, term.toString()), terms.docFreq()));\n            } else {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    \n    while (tiq.size() != 0) {\n      TermInfo termInfo = tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    if (args.length == 1) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n    } else if (args.length == 2) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    if (field != null) { \n      while (terms.next()) {\n        if (terms.term().field().equals(field)) {\n          tiq.insertWithOverflow(new TermInfo(terms.term(), terms.docFreq()));\n        }\n      }\n    }\n    else {\n      while (terms.next()) {\n        tiq.insertWithOverflow(new TermInfo(terms.term(), terms.docFreq()));\n      }\n    }\n    while (tiq.size() != 0) {\n      TermInfo termInfo = tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3fd745bbb223aacf2a69426debe491a79783055f","date":1271274370,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    if (args.length == 1) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n    } else if (args.length == 2) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n\n    if (field != null) { \n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        return;\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term != null) {\n            tiq.insertWithOverflow(new TermInfo(new Term(field, term.utf8ToString()), termsEnum.docFreq()));\n          } else {\n            break;\n          }    \n        }\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        return;\n      }\n      FieldsEnum fieldsEnum = fields.iterator();\n      while(true) {\n        field = fieldsEnum.next();\n        if (field != null) {\n          TermsEnum terms = fieldsEnum.terms();\n          while(true) {\n            BytesRef term = terms.next();\n            if (term != null) {\n              tiq.insertWithOverflow(new TermInfo(new Term(field, term.toString()), terms.docFreq()));\n            } else {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    \n    while (tiq.size() != 0) {\n      TermInfo termInfo = tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    if (args.length == 1) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n    } else if (args.length == 2) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n\n    if (field != null) { \n      Terms terms = reader.fields().terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term != null) {\n            tiq.insertWithOverflow(new TermInfo(new Term(field, term.utf8ToString()), termsEnum.docFreq()));\n          } else {\n            break;\n          }    \n        }\n      }\n    } else {\n      FieldsEnum fields = reader.fields().iterator();\n      while(true) {\n        field = fields.next();\n        if (field != null) {\n          TermsEnum terms = fields.terms();\n          while(true) {\n            BytesRef term = terms.next();\n            if (term != null) {\n              tiq.insertWithOverflow(new TermInfo(new Term(field, term.toString()), terms.docFreq()));\n            } else {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    \n    while (tiq.size() != 0) {\n      TermInfo termInfo = tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1513361122ebc5ddd6075f633cd77d2345611767","date":1273770174,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    boolean IncludeTermFreqs = false; \n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    if (args.length > 0) {\n      dir = FSDirectory.open(new File(args[0]));\n    }\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        IncludeTermFreqs = true;\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    reader = IndexReader.open(dir, true);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field);\n    if (!IncludeTermFreqs) {\n      //default HighFreqTerms behavior\n      for (int i = 0; i < terms.length; i++) {\n        System.out.printf(\"%s:%s %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].docFreq);\n      }\n    }\n    else{\n      TermStats[] termsWithTF = sortByTotalTermFreq(reader, terms);\n      for (int i = 0; i < termsWithTF.length; i++) {\n        System.out.printf(\"%s:%s \\t totalTF = %,d \\t doc freq = %,d \\n\",\n            termsWithTF[i].field, termsWithTF[i].termtext.utf8ToString(),\n            termsWithTF[i].totalTermFreq, termsWithTF[i].docFreq);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    if (args.length == 1) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n    } else if (args.length == 2) {\n      dir = FSDirectory.open(new File(args[0]));\n      reader = IndexReader.open(dir, true);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n\n    if (field != null) { \n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        return;\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while(true) {\n          BytesRef term = termsEnum.next();\n          if (term != null) {\n            tiq.insertWithOverflow(new TermInfo(new Term(field, term.utf8ToString()), termsEnum.docFreq()));\n          } else {\n            break;\n          }    \n        }\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        return;\n      }\n      FieldsEnum fieldsEnum = fields.iterator();\n      while(true) {\n        field = fieldsEnum.next();\n        if (field != null) {\n          TermsEnum terms = fieldsEnum.terms();\n          while(true) {\n            BytesRef term = terms.next();\n            if (term != null) {\n              tiq.insertWithOverflow(new TermInfo(new Term(field, term.toString()), terms.docFreq()));\n            } else {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    \n    while (tiq.size() != 0) {\n      TermInfo termInfo = tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":["f0aae73ca2eeb899108e9fe36611ddf5a83ec790"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    boolean IncludeTermFreqs = false; \n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    if (args.length > 0) {\n      dir = FSDirectory.open(new File(args[0]));\n    }\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        IncludeTermFreqs = true;\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    reader = IndexReader.open(dir);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field);\n    if (!IncludeTermFreqs) {\n      //default HighFreqTerms behavior\n      for (int i = 0; i < terms.length; i++) {\n        System.out.printf(\"%s:%s %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].docFreq);\n      }\n    }\n    else{\n      TermStats[] termsWithTF = sortByTotalTermFreq(reader, terms);\n      for (int i = 0; i < termsWithTF.length; i++) {\n        System.out.printf(\"%s:%s \\t totalTF = %,d \\t doc freq = %,d \\n\",\n            termsWithTF[i].field, termsWithTF[i].termtext.utf8ToString(),\n            termsWithTF[i].totalTermFreq, termsWithTF[i].docFreq);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    boolean IncludeTermFreqs = false; \n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    if (args.length > 0) {\n      dir = FSDirectory.open(new File(args[0]));\n    }\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        IncludeTermFreqs = true;\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    reader = IndexReader.open(dir, true);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field);\n    if (!IncludeTermFreqs) {\n      //default HighFreqTerms behavior\n      for (int i = 0; i < terms.length; i++) {\n        System.out.printf(\"%s:%s %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].docFreq);\n      }\n    }\n    else{\n      TermStats[] termsWithTF = sortByTotalTermFreq(reader, terms);\n      for (int i = 0; i < termsWithTF.length; i++) {\n        System.out.printf(\"%s:%s \\t totalTF = %,d \\t doc freq = %,d \\n\",\n            termsWithTF[i].field, termsWithTF[i].termtext.utf8ToString(),\n            termsWithTF[i].totalTermFreq, termsWithTF[i].docFreq);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    boolean IncludeTermFreqs = false; \n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    if (args.length > 0) {\n      dir = FSDirectory.open(new File(args[0]));\n    }\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        IncludeTermFreqs = true;\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    reader = IndexReader.open(dir);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field);\n    if (!IncludeTermFreqs) {\n      //default HighFreqTerms behavior\n      for (int i = 0; i < terms.length; i++) {\n        System.out.printf(\"%s:%s %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].docFreq);\n      }\n    }\n    else{\n      TermStats[] termsWithTF = sortByTotalTermFreq(reader, terms);\n      for (int i = 0; i < termsWithTF.length; i++) {\n        System.out.printf(\"%s:%s \\t totalTF = %,d \\t doc freq = %,d \\n\",\n            termsWithTF[i].field, termsWithTF[i].termtext.utf8ToString(),\n            termsWithTF[i].totalTermFreq, termsWithTF[i].docFreq);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    boolean IncludeTermFreqs = false; \n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    if (args.length > 0) {\n      dir = FSDirectory.open(new File(args[0]));\n    }\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        IncludeTermFreqs = true;\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    reader = IndexReader.open(dir, true);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field);\n    if (!IncludeTermFreqs) {\n      //default HighFreqTerms behavior\n      for (int i = 0; i < terms.length; i++) {\n        System.out.printf(\"%s:%s %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].docFreq);\n      }\n    }\n    else{\n      TermStats[] termsWithTF = sortByTotalTermFreq(reader, terms);\n      for (int i = 0; i < termsWithTF.length; i++) {\n        System.out.printf(\"%s:%s \\t totalTF = %,d \\t doc freq = %,d \\n\",\n            termsWithTF[i].field, termsWithTF[i].termtext.utf8ToString(),\n            termsWithTF[i].totalTermFreq, termsWithTF[i].docFreq);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    boolean IncludeTermFreqs = false; \n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    if (args.length > 0) {\n      dir = FSDirectory.open(new File(args[0]));\n    }\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        IncludeTermFreqs = true;\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    reader = IndexReader.open(dir);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field);\n    if (!IncludeTermFreqs) {\n      //default HighFreqTerms behavior\n      for (int i = 0; i < terms.length; i++) {\n        System.out.printf(\"%s:%s %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].docFreq);\n      }\n    }\n    else{\n      TermStats[] termsWithTF = sortByTotalTermFreq(reader, terms);\n      for (int i = 0; i < termsWithTF.length; i++) {\n        System.out.printf(\"%s:%s \\t totalTF = %,d \\t doc freq = %,d \\n\",\n            termsWithTF[i].field, termsWithTF[i].termtext.utf8ToString(),\n            termsWithTF[i].totalTermFreq, termsWithTF[i].docFreq);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    boolean IncludeTermFreqs = false; \n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    if (args.length > 0) {\n      dir = FSDirectory.open(new File(args[0]));\n    }\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        IncludeTermFreqs = true;\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    reader = IndexReader.open(dir, true);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field);\n    if (!IncludeTermFreqs) {\n      //default HighFreqTerms behavior\n      for (int i = 0; i < terms.length; i++) {\n        System.out.printf(\"%s:%s %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].docFreq);\n      }\n    }\n    else{\n      TermStats[] termsWithTF = sortByTotalTermFreq(reader, terms);\n      for (int i = 0; i < termsWithTF.length; i++) {\n        System.out.printf(\"%s:%s \\t totalTF = %,d \\t doc freq = %,d \\n\",\n            termsWithTF[i].field, termsWithTF[i].termtext.utf8ToString(),\n            termsWithTF[i].totalTermFreq, termsWithTF[i].docFreq);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    boolean IncludeTermFreqs = false; \n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    if (args.length > 0) {\n      dir = FSDirectory.open(new File(args[0]));\n    }\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        IncludeTermFreqs = true;\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    reader = IndexReader.open(dir);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field);\n    if (!IncludeTermFreqs) {\n      //default HighFreqTerms behavior\n      for (int i = 0; i < terms.length; i++) {\n        System.out.printf(\"%s:%s %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].docFreq);\n      }\n    }\n    else{\n      TermStats[] termsWithTF = sortByTotalTermFreq(reader, terms);\n      for (int i = 0; i < termsWithTF.length; i++) {\n        System.out.printf(\"%s:%s \\t totalTF = %,d \\t doc freq = %,d \\n\",\n            termsWithTF[i].field, termsWithTF[i].termtext.utf8ToString(),\n            termsWithTF[i].totalTermFreq, termsWithTF[i].docFreq);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    FSDirectory dir = null;\n    String field = null;\n    boolean IncludeTermFreqs = false; \n   \n    if (args.length == 0 || args.length > 4) {\n      usage();\n      System.exit(1);\n    }     \n\n    if (args.length > 0) {\n      dir = FSDirectory.open(new File(args[0]));\n    }\n   \n    for (int i = 1; i < args.length; i++) {\n      if (args[i].equals(\"-t\")) {\n        IncludeTermFreqs = true;\n      }\n      else{\n        try {\n          numTerms = Integer.parseInt(args[i]);\n        } catch (NumberFormatException e) {\n          field=args[i];\n        }\n      }\n    }\n    \n    reader = IndexReader.open(dir);\n    TermStats[] terms = getHighFreqTerms(reader, numTerms, field);\n    if (!IncludeTermFreqs) {\n      //default HighFreqTerms behavior\n      for (int i = 0; i < terms.length; i++) {\n        System.out.printf(\"%s:%s %,d \\n\",\n            terms[i].field, terms[i].termtext.utf8ToString(), terms[i].docFreq);\n      }\n    }\n    else{\n      TermStats[] termsWithTF = sortByTotalTermFreq(reader, terms);\n      for (int i = 0; i < termsWithTF.length; i++) {\n        System.out.printf(\"%s:%s \\t totalTF = %,d \\t doc freq = %,d \\n\",\n            termsWithTF[i].field, termsWithTF[i].termtext.utf8ToString(),\n            termsWithTF[i].totalTermFreq, termsWithTF[i].docFreq);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3fd745bbb223aacf2a69426debe491a79783055f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["1513361122ebc5ddd6075f633cd77d2345611767","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["1513361122ebc5ddd6075f633cd77d2345611767","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["1513361122ebc5ddd6075f633cd77d2345611767"],"1513361122ebc5ddd6075f633cd77d2345611767":["3fd745bbb223aacf2a69426debe491a79783055f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3fd745bbb223aacf2a69426debe491a79783055f":["1513361122ebc5ddd6075f633cd77d2345611767"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["3fd745bbb223aacf2a69426debe491a79783055f"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1513361122ebc5ddd6075f633cd77d2345611767":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}