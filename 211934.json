{"path":"lucene/src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","sourceNew":"  public void testMultipleSources() throws Exception {\n    final TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer1.toString())));\n    final TeeSinkTokenFilter.SinkTokenStream dogDetector = tee1.newSinkTokenStream(dogFilter);\n    final TeeSinkTokenFilter.SinkTokenStream theDetector = tee1.newSinkTokenStream(theFilter);\n    final TokenStream source1 = new CachingTokenFilter(tee1);\n    \n    tee1.addAttribute(CheckClearAttributesAttribute.class);\n    dogDetector.addAttribute(CheckClearAttributesAttribute.class);\n    theDetector.addAttribute(CheckClearAttributesAttribute.class);\n\n    final TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer2.toString())));\n    tee2.addSinkTokenStream(dogDetector);\n    tee2.addSinkTokenStream(theDetector);\n    final TokenStream source2 = tee2;\n\n    assertTokenStreamContents(source1, tokens1);\n    assertTokenStreamContents(source2, tokens2);\n\n    assertTokenStreamContents(theDetector, new String[]{\"The\", \"the\", \"The\", \"the\"});\n    assertTokenStreamContents(dogDetector, new String[]{\"Dogs\", \"Dogs\"});\n    \n    source1.reset();\n    TokenStream lowerCasing = new LowerCaseFilter(TEST_VERSION_CURRENT, source1);\n    String[] lowerCaseTokens = new String[tokens1.length];\n    for (int i = 0; i < tokens1.length; i++)\n      lowerCaseTokens[i] = tokens1[i].toLowerCase();\n    assertTokenStreamContents(lowerCasing, lowerCaseTokens);\n  }\n\n","sourceOld":"  public void testMultipleSources() throws Exception {\n    final TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer1.toString())));\n    final TeeSinkTokenFilter.SinkTokenStream dogDetector = tee1.newSinkTokenStream(dogFilter);\n    final TeeSinkTokenFilter.SinkTokenStream theDetector = tee1.newSinkTokenStream(theFilter);\n    final TokenStream source1 = new CachingTokenFilter(tee1);\n    \n    tee1.addAttribute(CheckClearAttributesAttribute.class);\n    dogDetector.addAttribute(CheckClearAttributesAttribute.class);\n    theDetector.addAttribute(CheckClearAttributesAttribute.class);\n\n    final TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer2.toString())));\n    tee2.addSinkTokenStream(dogDetector);\n    tee2.addSinkTokenStream(theDetector);\n    final TokenStream source2 = tee2;\n\n    assertTokenStreamContents(source1, tokens1);\n    assertTokenStreamContents(source2, tokens2);\n\n    assertTokenStreamContents(theDetector, new String[]{\"The\", \"the\", \"The\", \"the\"});\n    assertTokenStreamContents(dogDetector, new String[]{\"Dogs\", \"Dogs\"});\n    \n    source1.reset();\n    TokenStream lowerCasing = new LowerCaseFilter(TEST_VERSION_CURRENT, source1);\n    String[] lowerCaseTokens = new String[tokens1.length];\n    for (int i = 0; i < tokens1.length; i++)\n      lowerCaseTokens[i] = tokens1[i].toLowerCase();\n    assertTokenStreamContents(lowerCasing, lowerCaseTokens);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a","date":1272922845,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testMultipleSources().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testMultipleSources().mjava","sourceNew":"  public void testMultipleSources() throws Exception {\n    final TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer1.toString())));\n    final TeeSinkTokenFilter.SinkTokenStream dogDetector = tee1.newSinkTokenStream(dogFilter);\n    final TeeSinkTokenFilter.SinkTokenStream theDetector = tee1.newSinkTokenStream(theFilter);\n    final TokenStream source1 = new CachingTokenFilter(tee1);\n    \n    tee1.addAttribute(CheckClearAttributesAttribute.class);\n    dogDetector.addAttribute(CheckClearAttributesAttribute.class);\n    theDetector.addAttribute(CheckClearAttributesAttribute.class);\n\n    final TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer2.toString())));\n    tee2.addSinkTokenStream(dogDetector);\n    tee2.addSinkTokenStream(theDetector);\n    final TokenStream source2 = tee2;\n\n    assertTokenStreamContents(source1, tokens1);\n    assertTokenStreamContents(source2, tokens2);\n\n    assertTokenStreamContents(theDetector, new String[]{\"The\", \"the\", \"The\", \"the\"});\n    assertTokenStreamContents(dogDetector, new String[]{\"Dogs\", \"Dogs\"});\n    \n    source1.reset();\n    TokenStream lowerCasing = new LowerCaseFilter(TEST_VERSION_CURRENT, source1);\n    String[] lowerCaseTokens = new String[tokens1.length];\n    for (int i = 0; i < tokens1.length; i++)\n      lowerCaseTokens[i] = tokens1[i].toLowerCase();\n    assertTokenStreamContents(lowerCasing, lowerCaseTokens);\n  }\n\n","sourceOld":"  public void testMultipleSources() throws Exception {\n    final TeeSinkTokenFilter tee1 = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer1.toString())));\n    final TeeSinkTokenFilter.SinkTokenStream dogDetector = tee1.newSinkTokenStream(dogFilter);\n    final TeeSinkTokenFilter.SinkTokenStream theDetector = tee1.newSinkTokenStream(theFilter);\n    final TokenStream source1 = new CachingTokenFilter(tee1);\n    \n    tee1.addAttribute(CheckClearAttributesAttribute.class);\n    dogDetector.addAttribute(CheckClearAttributesAttribute.class);\n    theDetector.addAttribute(CheckClearAttributesAttribute.class);\n\n    final TeeSinkTokenFilter tee2 = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer2.toString())));\n    tee2.addSinkTokenStream(dogDetector);\n    tee2.addSinkTokenStream(theDetector);\n    final TokenStream source2 = tee2;\n\n    assertTokenStreamContents(source1, tokens1);\n    assertTokenStreamContents(source2, tokens2);\n\n    assertTokenStreamContents(theDetector, new String[]{\"The\", \"the\", \"The\", \"the\"});\n    assertTokenStreamContents(dogDetector, new String[]{\"Dogs\", \"Dogs\"});\n    \n    source1.reset();\n    TokenStream lowerCasing = new LowerCaseFilter(TEST_VERSION_CURRENT, source1);\n    String[] lowerCaseTokens = new String[tokens1.length];\n    for (int i = 0; i < tokens1.length; i++)\n      lowerCaseTokens[i] = tokens1[i].toLowerCase();\n    assertTokenStreamContents(lowerCasing, lowerCaseTokens);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}