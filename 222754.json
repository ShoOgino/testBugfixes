{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","commits":[{"id":"50e7972fe4865715af8951d4ba15555e3426fc5d","date":1115024647,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","pathOld":"/dev/null","sourceNew":"\t\tpublic TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n\t\t\tfinal Info info = getInfo(fieldName);\n\t\t\tif (info == null) return null; // TODO: or return empty vector impl???\n\t\t\tinfo.sortTerms();\n\t\t\t\n\t\t\treturn new TermPositionVector() { \n\t\n\t\t\t\tfinal Map.Entry[] sortedTerms = info.sortedTerms;\n\t\t\t\t\n\t\t\t\tpublic String getField() {\n\t\t\t\t\treturn fieldName;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int size() {\n\t\t\t\t\treturn sortedTerms.length;\n\t\t\t\t}\n\t\n\t\t\t\tpublic String[] getTerms() {\n\t\t\t\t\tString[] terms = new String[sortedTerms.length];\n\t\t\t\t\tfor (int i=0; i < sortedTerms.length; i++) {\n\t\t\t\t\t\tterms[i] = (String) sortedTerms[i].getKey();\n\t\t\t\t\t}\n\t\t\t\t\treturn terms;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int[] getTermFrequencies() {\n\t\t\t\t\tint[] freqs = new int[sortedTerms.length];\n\t\t\t\t\tfor (int i=0; i < sortedTerms.length; i++) {\n\t\t\t\t\t\tfreqs[i] = numPositions((ArrayIntList) sortedTerms[i].getValue());\n\t\t\t\t\t}\n\t\t\t\t\treturn freqs;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int indexOf(String term) {\n\t\t\t\t\tint i = Arrays.binarySearch(sortedTerms, term, termComparator);\n\t\t\t\t\treturn i >= 0 ? i : -1;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int[] indexesOf(String[] terms, int start, int len) {\n\t\t\t\t\tint[] indexes = new int[len];\n\t\t\t\t\tfor (int i=0; i < len; i++) {\n\t\t\t\t\t\tindexes[i] = indexOf(terms[start++]);\n\t\t\t\t\t}\n\t\t\t\t\treturn indexes;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// lucene >= 1.4.3\n\t\t\t\tpublic int[] getTermPositions(int index) {\n\t\t\t\t\treturn ((ArrayIntList) sortedTerms[index].getValue()).toArray(stride);\n\t\t\t\t} \n\t\t\t\t\n\t\t\t\t// lucene >= 1.9 (remove this method for lucene-1.4.3)\n\t\t\t\tpublic org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n\t\t\t\t\tif (stride == 1) return null; // no offsets stored\n\t\t\t\t\t\n\t\t\t\t\tArrayIntList positions = (ArrayIntList) sortedTerms[index].getValue();\n\t\t\t\t\tint size = positions.size();\n\t\t\t\t\torg.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n\t\t\t\t\t\tnew org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n\t\t\t\t\t\n\t\t\t\t\tfor (int i=0, j=1; j < size; i++, j += stride) {\n\t\t\t\t\t\tint start = positions.get(j);\n\t\t\t\t\t\tint end = positions.get(j+1);\n\t\t\t\t\t\toffsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n\t\t\t\t\t}\n\t\t\t\t\treturn offsets;\n\t\t\t\t}\n\n\t\t\t};\n\t\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8f14489323057ef6de92ba5ea2d0cfe6e34755f","date":1120167605,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","sourceNew":"\t\tpublic TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\r\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\r\n\t\t\tfinal Info info = getInfo(fieldName);\r\n\t\t\tif (info == null) return null; // TODO: or return empty vector impl???\r\n\t\t\tinfo.sortTerms();\r\n\t\t\t\r\n\t\t\treturn new TermPositionVector() { \r\n\t\r\n\t\t\t\tprivate final Map.Entry[] sortedTerms = info.sortedTerms;\r\n\t\t\t\t\r\n\t\t\t\tpublic String getField() {\r\n\t\t\t\t\treturn fieldName;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic int size() {\r\n\t\t\t\t\treturn sortedTerms.length;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic String[] getTerms() {\r\n\t\t\t\t\tString[] terms = new String[sortedTerms.length];\r\n\t\t\t\t\tfor (int i=sortedTerms.length; --i >= 0; ) {\r\n\t\t\t\t\t\tterms[i] = (String) sortedTerms[i].getKey();\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn terms;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic int[] getTermFrequencies() {\r\n\t\t\t\t\tint[] freqs = new int[sortedTerms.length];\r\n\t\t\t\t\tfor (int i=sortedTerms.length; --i >= 0; ) {\r\n\t\t\t\t\t\tfreqs[i] = numPositions((ArrayIntList) sortedTerms[i].getValue());\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn freqs;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic int indexOf(String term) {\r\n\t\t\t\t\tint i = Arrays.binarySearch(sortedTerms, term, termComparator);\r\n\t\t\t\t\treturn i >= 0 ? i : -1;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic int[] indexesOf(String[] terms, int start, int len) {\r\n\t\t\t\t\tint[] indexes = new int[len];\r\n\t\t\t\t\tfor (int i=0; i < len; i++) {\r\n\t\t\t\t\t\tindexes[i] = indexOf(terms[start++]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn indexes;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// lucene >= 1.4.3\r\n\t\t\t\tpublic int[] getTermPositions(int index) {\r\n\t\t\t\t\treturn ((ArrayIntList) sortedTerms[index].getValue()).toArray(stride);\r\n\t\t\t\t} \r\n\t\t\t\t\r\n\t\t\t\t// lucene >= 1.9 (remove this method for lucene-1.4.3)\r\n\t\t\t\tpublic org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\r\n\t\t\t\t\tif (stride == 1) return null; // no offsets stored\r\n\t\t\t\t\t\r\n\t\t\t\t\tArrayIntList positions = (ArrayIntList) sortedTerms[index].getValue();\r\n\t\t\t\t\tint size = positions.size();\r\n\t\t\t\t\torg.apache.lucene.index.TermVectorOffsetInfo[] offsets = \r\n\t\t\t\t\t\tnew org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (int i=0, j=1; j < size; i++, j += stride) {\r\n\t\t\t\t\t\tint start = positions.get(j);\r\n\t\t\t\t\t\tint end = positions.get(j+1);\r\n\t\t\t\t\t\toffsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn offsets;\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\t\t}\r\n\n","sourceOld":"\t\tpublic TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n\t\t\tfinal Info info = getInfo(fieldName);\n\t\t\tif (info == null) return null; // TODO: or return empty vector impl???\n\t\t\tinfo.sortTerms();\n\t\t\t\n\t\t\treturn new TermPositionVector() { \n\t\n\t\t\t\tfinal Map.Entry[] sortedTerms = info.sortedTerms;\n\t\t\t\t\n\t\t\t\tpublic String getField() {\n\t\t\t\t\treturn fieldName;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int size() {\n\t\t\t\t\treturn sortedTerms.length;\n\t\t\t\t}\n\t\n\t\t\t\tpublic String[] getTerms() {\n\t\t\t\t\tString[] terms = new String[sortedTerms.length];\n\t\t\t\t\tfor (int i=0; i < sortedTerms.length; i++) {\n\t\t\t\t\t\tterms[i] = (String) sortedTerms[i].getKey();\n\t\t\t\t\t}\n\t\t\t\t\treturn terms;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int[] getTermFrequencies() {\n\t\t\t\t\tint[] freqs = new int[sortedTerms.length];\n\t\t\t\t\tfor (int i=0; i < sortedTerms.length; i++) {\n\t\t\t\t\t\tfreqs[i] = numPositions((ArrayIntList) sortedTerms[i].getValue());\n\t\t\t\t\t}\n\t\t\t\t\treturn freqs;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int indexOf(String term) {\n\t\t\t\t\tint i = Arrays.binarySearch(sortedTerms, term, termComparator);\n\t\t\t\t\treturn i >= 0 ? i : -1;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int[] indexesOf(String[] terms, int start, int len) {\n\t\t\t\t\tint[] indexes = new int[len];\n\t\t\t\t\tfor (int i=0; i < len; i++) {\n\t\t\t\t\t\tindexes[i] = indexOf(terms[start++]);\n\t\t\t\t\t}\n\t\t\t\t\treturn indexes;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// lucene >= 1.4.3\n\t\t\t\tpublic int[] getTermPositions(int index) {\n\t\t\t\t\treturn ((ArrayIntList) sortedTerms[index].getValue()).toArray(stride);\n\t\t\t\t} \n\t\t\t\t\n\t\t\t\t// lucene >= 1.9 (remove this method for lucene-1.4.3)\n\t\t\t\tpublic org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n\t\t\t\t\tif (stride == 1) return null; // no offsets stored\n\t\t\t\t\t\n\t\t\t\t\tArrayIntList positions = (ArrayIntList) sortedTerms[index].getValue();\n\t\t\t\t\tint size = positions.size();\n\t\t\t\t\torg.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n\t\t\t\t\t\tnew org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n\t\t\t\t\t\n\t\t\t\t\tfor (int i=0, j=1; j < size; i++, j += stride) {\n\t\t\t\t\t\tint start = positions.get(j);\n\t\t\t\t\t\tint end = positions.get(j+1);\n\t\t\t\t\t\toffsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n\t\t\t\t\t}\n\t\t\t\t\treturn offsets;\n\t\t\t\t}\n\n\t\t\t};\n\t\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35dd40ede4dd66fa47506858c4a073d295c5a76e","date":1133587328,"type":4,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","sourceNew":null,"sourceOld":"\t\tpublic TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\r\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\r\n\t\t\tfinal Info info = getInfo(fieldName);\r\n\t\t\tif (info == null) return null; // TODO: or return empty vector impl???\r\n\t\t\tinfo.sortTerms();\r\n\t\t\t\r\n\t\t\treturn new TermPositionVector() { \r\n\t\r\n\t\t\t\tprivate final Map.Entry[] sortedTerms = info.sortedTerms;\r\n\t\t\t\t\r\n\t\t\t\tpublic String getField() {\r\n\t\t\t\t\treturn fieldName;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic int size() {\r\n\t\t\t\t\treturn sortedTerms.length;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic String[] getTerms() {\r\n\t\t\t\t\tString[] terms = new String[sortedTerms.length];\r\n\t\t\t\t\tfor (int i=sortedTerms.length; --i >= 0; ) {\r\n\t\t\t\t\t\tterms[i] = (String) sortedTerms[i].getKey();\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn terms;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic int[] getTermFrequencies() {\r\n\t\t\t\t\tint[] freqs = new int[sortedTerms.length];\r\n\t\t\t\t\tfor (int i=sortedTerms.length; --i >= 0; ) {\r\n\t\t\t\t\t\tfreqs[i] = numPositions((ArrayIntList) sortedTerms[i].getValue());\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn freqs;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic int indexOf(String term) {\r\n\t\t\t\t\tint i = Arrays.binarySearch(sortedTerms, term, termComparator);\r\n\t\t\t\t\treturn i >= 0 ? i : -1;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic int[] indexesOf(String[] terms, int start, int len) {\r\n\t\t\t\t\tint[] indexes = new int[len];\r\n\t\t\t\t\tfor (int i=0; i < len; i++) {\r\n\t\t\t\t\t\tindexes[i] = indexOf(terms[start++]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn indexes;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// lucene >= 1.4.3\r\n\t\t\t\tpublic int[] getTermPositions(int index) {\r\n\t\t\t\t\treturn ((ArrayIntList) sortedTerms[index].getValue()).toArray(stride);\r\n\t\t\t\t} \r\n\t\t\t\t\r\n\t\t\t\t// lucene >= 1.9 (remove this method for lucene-1.4.3)\r\n\t\t\t\tpublic org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\r\n\t\t\t\t\tif (stride == 1) return null; // no offsets stored\r\n\t\t\t\t\t\r\n\t\t\t\t\tArrayIntList positions = (ArrayIntList) sortedTerms[index].getValue();\r\n\t\t\t\t\tint size = positions.size();\r\n\t\t\t\t\torg.apache.lucene.index.TermVectorOffsetInfo[] offsets = \r\n\t\t\t\t\t\tnew org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (int i=0, j=1; j < size; i++, j += stride) {\r\n\t\t\t\t\t\tint start = positions.get(j);\r\n\t\t\t\t\t\tint end = positions.get(j+1);\r\n\t\t\t\t\t\toffsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn offsets;\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\t\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a93e1e4a21be8ebb98e53e6933412a363931faa1","date":1133587471,"type":0,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","pathOld":"/dev/null","sourceNew":"\t\tpublic TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n\t\t\tfinal Info info = getInfo(fieldName);\n\t\t\tif (info == null) return null; // TODO: or return empty vector impl???\n\t\t\tinfo.sortTerms();\n\t\t\t\n\t\t\treturn new TermPositionVector() { \n\t\n\t\t\t\tprivate final Map.Entry[] sortedTerms = info.sortedTerms;\n\t\t\t\t\n\t\t\t\tpublic String getField() {\n\t\t\t\t\treturn fieldName;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int size() {\n\t\t\t\t\treturn sortedTerms.length;\n\t\t\t\t}\n\t\n\t\t\t\tpublic String[] getTerms() {\n\t\t\t\t\tString[] terms = new String[sortedTerms.length];\n\t\t\t\t\tfor (int i=sortedTerms.length; --i >= 0; ) {\n\t\t\t\t\t\tterms[i] = (String) sortedTerms[i].getKey();\n\t\t\t\t\t}\n\t\t\t\t\treturn terms;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int[] getTermFrequencies() {\n\t\t\t\t\tint[] freqs = new int[sortedTerms.length];\n\t\t\t\t\tfor (int i=sortedTerms.length; --i >= 0; ) {\n\t\t\t\t\t\tfreqs[i] = numPositions((ArrayIntList) sortedTerms[i].getValue());\n\t\t\t\t\t}\n\t\t\t\t\treturn freqs;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int indexOf(String term) {\n\t\t\t\t\tint i = Arrays.binarySearch(sortedTerms, term, termComparator);\n\t\t\t\t\treturn i >= 0 ? i : -1;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int[] indexesOf(String[] terms, int start, int len) {\n\t\t\t\t\tint[] indexes = new int[len];\n\t\t\t\t\tfor (int i=0; i < len; i++) {\n\t\t\t\t\t\tindexes[i] = indexOf(terms[start++]);\n\t\t\t\t\t}\n\t\t\t\t\treturn indexes;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// lucene >= 1.4.3\n\t\t\t\tpublic int[] getTermPositions(int index) {\n\t\t\t\t\treturn ((ArrayIntList) sortedTerms[index].getValue()).toArray(stride);\n\t\t\t\t} \n\t\t\t\t\n\t\t\t\t// lucene >= 1.9 (remove this method for lucene-1.4.3)\n\t\t\t\tpublic org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n\t\t\t\t\tif (stride == 1) return null; // no offsets stored\n\t\t\t\t\t\n\t\t\t\t\tArrayIntList positions = (ArrayIntList) sortedTerms[index].getValue();\n\t\t\t\t\tint size = positions.size();\n\t\t\t\t\torg.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n\t\t\t\t\t\tnew org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n\t\t\t\t\t\n\t\t\t\t\tfor (int i=0, j=1; j < size; i++, j += stride) {\n\t\t\t\t\t\tint start = positions.get(j);\n\t\t\t\t\t\tint end = positions.get(j+1);\n\t\t\t\t\t\toffsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n\t\t\t\t\t}\n\t\t\t\t\treturn offsets;\n\t\t\t\t}\n\n\t\t\t};\n\t\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","sourceNew":"    public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n      final Info info = getInfo(fieldName);\n      if (info == null) return null; // TODO: or return empty vector impl???\n      info.sortTerms();\n      \n      return new TermPositionVector() { \n  \n        private final Map.Entry[] sortedTerms = info.sortedTerms;\n        \n        public String getField() {\n          return fieldName;\n        }\n  \n        public int size() {\n          return sortedTerms.length;\n        }\n  \n        public String[] getTerms() {\n          String[] terms = new String[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            terms[i] = (String) sortedTerms[i].getKey();\n          }\n          return terms;\n        }\n  \n        public int[] getTermFrequencies() {\n          int[] freqs = new int[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            freqs[i] = numPositions((ArrayIntList) sortedTerms[i].getValue());\n          }\n          return freqs;\n        }\n  \n        public int indexOf(String term) {\n          int i = Arrays.binarySearch(sortedTerms, term, termComparator);\n          return i >= 0 ? i : -1;\n        }\n  \n        public int[] indexesOf(String[] terms, int start, int len) {\n          int[] indexes = new int[len];\n          for (int i=0; i < len; i++) {\n            indexes[i] = indexOf(terms[start++]);\n          }\n          return indexes;\n        }\n        \n        // lucene >= 1.4.3\n        public int[] getTermPositions(int index) {\n          return ((ArrayIntList) sortedTerms[index].getValue()).toArray(stride);\n        } \n        \n        // lucene >= 1.9 (remove this method for lucene-1.4.3)\n        public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n          if (stride == 1) return null; // no offsets stored\n          \n          ArrayIntList positions = (ArrayIntList) sortedTerms[index].getValue();\n          int size = positions.size();\n          org.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n            new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n          \n          for (int i=0, j=1; j < size; i++, j += stride) {\n            int start = positions.get(j);\n            int end = positions.get(j+1);\n            offsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n          }\n          return offsets;\n        }\n\n      };\n    }\n\n","sourceOld":"\t\tpublic TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n\t\t\tfinal Info info = getInfo(fieldName);\n\t\t\tif (info == null) return null; // TODO: or return empty vector impl???\n\t\t\tinfo.sortTerms();\n\t\t\t\n\t\t\treturn new TermPositionVector() { \n\t\n\t\t\t\tprivate final Map.Entry[] sortedTerms = info.sortedTerms;\n\t\t\t\t\n\t\t\t\tpublic String getField() {\n\t\t\t\t\treturn fieldName;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int size() {\n\t\t\t\t\treturn sortedTerms.length;\n\t\t\t\t}\n\t\n\t\t\t\tpublic String[] getTerms() {\n\t\t\t\t\tString[] terms = new String[sortedTerms.length];\n\t\t\t\t\tfor (int i=sortedTerms.length; --i >= 0; ) {\n\t\t\t\t\t\tterms[i] = (String) sortedTerms[i].getKey();\n\t\t\t\t\t}\n\t\t\t\t\treturn terms;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int[] getTermFrequencies() {\n\t\t\t\t\tint[] freqs = new int[sortedTerms.length];\n\t\t\t\t\tfor (int i=sortedTerms.length; --i >= 0; ) {\n\t\t\t\t\t\tfreqs[i] = numPositions((ArrayIntList) sortedTerms[i].getValue());\n\t\t\t\t\t}\n\t\t\t\t\treturn freqs;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int indexOf(String term) {\n\t\t\t\t\tint i = Arrays.binarySearch(sortedTerms, term, termComparator);\n\t\t\t\t\treturn i >= 0 ? i : -1;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int[] indexesOf(String[] terms, int start, int len) {\n\t\t\t\t\tint[] indexes = new int[len];\n\t\t\t\t\tfor (int i=0; i < len; i++) {\n\t\t\t\t\t\tindexes[i] = indexOf(terms[start++]);\n\t\t\t\t\t}\n\t\t\t\t\treturn indexes;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// lucene >= 1.4.3\n\t\t\t\tpublic int[] getTermPositions(int index) {\n\t\t\t\t\treturn ((ArrayIntList) sortedTerms[index].getValue()).toArray(stride);\n\t\t\t\t} \n\t\t\t\t\n\t\t\t\t// lucene >= 1.9 (remove this method for lucene-1.4.3)\n\t\t\t\tpublic org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n\t\t\t\t\tif (stride == 1) return null; // no offsets stored\n\t\t\t\t\t\n\t\t\t\t\tArrayIntList positions = (ArrayIntList) sortedTerms[index].getValue();\n\t\t\t\t\tint size = positions.size();\n\t\t\t\t\torg.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n\t\t\t\t\t\tnew org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n\t\t\t\t\t\n\t\t\t\t\tfor (int i=0, j=1; j < size; i++, j += stride) {\n\t\t\t\t\t\tint start = positions.get(j);\n\t\t\t\t\t\tint end = positions.get(j+1);\n\t\t\t\t\t\toffsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n\t\t\t\t\t}\n\t\t\t\t\treturn offsets;\n\t\t\t\t}\n\n\t\t\t};\n\t\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb","date":1185160645,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","sourceNew":"      public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n      final Info info = getInfo(fieldName);\n      if (info == null) return null; // TODO: or return empty vector impl???\n      info.sortTerms();\n      \n      return new TermPositionVector() { \n  \n        private final Map.Entry[] sortedTerms = info.sortedTerms;\n        \n        public String getField() {\n          return fieldName;\n        }\n  \n        public int size() {\n          return sortedTerms.length;\n        }\n  \n        public String[] getTerms() {\n          String[] terms = new String[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            terms[i] = (String) sortedTerms[i].getKey();\n          }\n          return terms;\n        }\n  \n        public int[] getTermFrequencies() {\n          int[] freqs = new int[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            freqs[i] = numPositions((ArrayIntList) sortedTerms[i].getValue());\n          }\n          return freqs;\n        }\n  \n        public int indexOf(String term) {\n          int i = Arrays.binarySearch(sortedTerms, term, termComparator);\n          return i >= 0 ? i : -1;\n        }\n  \n        public int[] indexesOf(String[] terms, int start, int len) {\n          int[] indexes = new int[len];\n          for (int i=0; i < len; i++) {\n            indexes[i] = indexOf(terms[start++]);\n          }\n          return indexes;\n        }\n        \n        // lucene >= 1.4.3\n        public int[] getTermPositions(int index) {\n          return ((ArrayIntList) sortedTerms[index].getValue()).toArray(stride);\n        } \n        \n        // lucene >= 1.9 (remove this method for lucene-1.4.3)\n        public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n          if (stride == 1) return null; // no offsets stored\n          \n          ArrayIntList positions = (ArrayIntList) sortedTerms[index].getValue();\n          int size = positions.size();\n          org.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n            new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n          \n          for (int i=0, j=1; j < size; i++, j += stride) {\n            int start = positions.get(j);\n            int end = positions.get(j+1);\n            offsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n          }\n          return offsets;\n        }\n\n      };\n    }\n\n","sourceOld":"    public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n      final Info info = getInfo(fieldName);\n      if (info == null) return null; // TODO: or return empty vector impl???\n      info.sortTerms();\n      \n      return new TermPositionVector() { \n  \n        private final Map.Entry[] sortedTerms = info.sortedTerms;\n        \n        public String getField() {\n          return fieldName;\n        }\n  \n        public int size() {\n          return sortedTerms.length;\n        }\n  \n        public String[] getTerms() {\n          String[] terms = new String[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            terms[i] = (String) sortedTerms[i].getKey();\n          }\n          return terms;\n        }\n  \n        public int[] getTermFrequencies() {\n          int[] freqs = new int[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            freqs[i] = numPositions((ArrayIntList) sortedTerms[i].getValue());\n          }\n          return freqs;\n        }\n  \n        public int indexOf(String term) {\n          int i = Arrays.binarySearch(sortedTerms, term, termComparator);\n          return i >= 0 ? i : -1;\n        }\n  \n        public int[] indexesOf(String[] terms, int start, int len) {\n          int[] indexes = new int[len];\n          for (int i=0; i < len; i++) {\n            indexes[i] = indexOf(terms[start++]);\n          }\n          return indexes;\n        }\n        \n        // lucene >= 1.4.3\n        public int[] getTermPositions(int index) {\n          return ((ArrayIntList) sortedTerms[index].getValue()).toArray(stride);\n        } \n        \n        // lucene >= 1.9 (remove this method for lucene-1.4.3)\n        public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n          if (stride == 1) return null; // no offsets stored\n          \n          ArrayIntList positions = (ArrayIntList) sortedTerms[index].getValue();\n          int size = positions.size();\n          org.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n            new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n          \n          for (int i=0, j=1; j < size; i++, j += stride) {\n            int start = positions.get(j);\n            int end = positions.get(j+1);\n            offsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n          }\n          return offsets;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11899016a0460a7ea2e4b008d002e1e75c7d867","date":1256772085,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","sourceNew":"      public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n      final Info info = getInfo(fieldName);\n      if (info == null) return null; // TODO: or return empty vector impl???\n      info.sortTerms();\n      \n      return new TermPositionVector() { \n  \n        private final Map.Entry<String,ArrayIntList>[] sortedTerms = info.sortedTerms;\n        \n        public String getField() {\n          return fieldName;\n        }\n  \n        public int size() {\n          return sortedTerms.length;\n        }\n  \n        public String[] getTerms() {\n          String[] terms = new String[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            terms[i] = sortedTerms[i].getKey();\n          }\n          return terms;\n        }\n  \n        public int[] getTermFrequencies() {\n          int[] freqs = new int[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            freqs[i] = numPositions(sortedTerms[i].getValue());\n          }\n          return freqs;\n        }\n  \n        public int indexOf(String term) {\n          int i = Arrays.binarySearch(sortedTerms, term, termComparator);\n          return i >= 0 ? i : -1;\n        }\n  \n        public int[] indexesOf(String[] terms, int start, int len) {\n          int[] indexes = new int[len];\n          for (int i=0; i < len; i++) {\n            indexes[i] = indexOf(terms[start++]);\n          }\n          return indexes;\n        }\n        \n        // lucene >= 1.4.3\n        public int[] getTermPositions(int index) {\n          return sortedTerms[index].getValue().toArray(stride);\n        } \n        \n        // lucene >= 1.9 (remove this method for lucene-1.4.3)\n        public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n          if (stride == 1) return null; // no offsets stored\n          \n          ArrayIntList positions = sortedTerms[index].getValue();\n          int size = positions.size();\n          org.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n            new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n          \n          for (int i=0, j=1; j < size; i++, j += stride) {\n            int start = positions.get(j);\n            int end = positions.get(j+1);\n            offsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n          }\n          return offsets;\n        }\n\n      };\n    }\n\n","sourceOld":"      public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n      final Info info = getInfo(fieldName);\n      if (info == null) return null; // TODO: or return empty vector impl???\n      info.sortTerms();\n      \n      return new TermPositionVector() { \n  \n        private final Map.Entry[] sortedTerms = info.sortedTerms;\n        \n        public String getField() {\n          return fieldName;\n        }\n  \n        public int size() {\n          return sortedTerms.length;\n        }\n  \n        public String[] getTerms() {\n          String[] terms = new String[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            terms[i] = (String) sortedTerms[i].getKey();\n          }\n          return terms;\n        }\n  \n        public int[] getTermFrequencies() {\n          int[] freqs = new int[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            freqs[i] = numPositions((ArrayIntList) sortedTerms[i].getValue());\n          }\n          return freqs;\n        }\n  \n        public int indexOf(String term) {\n          int i = Arrays.binarySearch(sortedTerms, term, termComparator);\n          return i >= 0 ? i : -1;\n        }\n  \n        public int[] indexesOf(String[] terms, int start, int len) {\n          int[] indexes = new int[len];\n          for (int i=0; i < len; i++) {\n            indexes[i] = indexOf(terms[start++]);\n          }\n          return indexes;\n        }\n        \n        // lucene >= 1.4.3\n        public int[] getTermPositions(int index) {\n          return ((ArrayIntList) sortedTerms[index].getValue()).toArray(stride);\n        } \n        \n        // lucene >= 1.9 (remove this method for lucene-1.4.3)\n        public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n          if (stride == 1) return null; // no offsets stored\n          \n          ArrayIntList positions = (ArrayIntList) sortedTerms[index].getValue();\n          int size = positions.size();\n          org.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n            new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n          \n          for (int i=0, j=1; j < size; i++, j += stride) {\n            int start = positions.get(j);\n            int end = positions.get(j+1);\n            offsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n          }\n          return offsets;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","sourceNew":"      @Override\n      public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n      final Info info = getInfo(fieldName);\n      if (info == null) return null; // TODO: or return empty vector impl???\n      info.sortTerms();\n      \n      return new TermPositionVector() { \n  \n        private final Map.Entry<String,ArrayIntList>[] sortedTerms = info.sortedTerms;\n        \n        public String getField() {\n          return fieldName;\n        }\n  \n        public int size() {\n          return sortedTerms.length;\n        }\n  \n        public String[] getTerms() {\n          String[] terms = new String[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            terms[i] = sortedTerms[i].getKey();\n          }\n          return terms;\n        }\n  \n        public int[] getTermFrequencies() {\n          int[] freqs = new int[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            freqs[i] = numPositions(sortedTerms[i].getValue());\n          }\n          return freqs;\n        }\n  \n        public int indexOf(String term) {\n          int i = Arrays.binarySearch(sortedTerms, term, termComparator);\n          return i >= 0 ? i : -1;\n        }\n  \n        public int[] indexesOf(String[] terms, int start, int len) {\n          int[] indexes = new int[len];\n          for (int i=0; i < len; i++) {\n            indexes[i] = indexOf(terms[start++]);\n          }\n          return indexes;\n        }\n        \n        // lucene >= 1.4.3\n        public int[] getTermPositions(int index) {\n          return sortedTerms[index].getValue().toArray(stride);\n        } \n        \n        // lucene >= 1.9 (remove this method for lucene-1.4.3)\n        public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n          if (stride == 1) return null; // no offsets stored\n          \n          ArrayIntList positions = sortedTerms[index].getValue();\n          int size = positions.size();\n          org.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n            new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n          \n          for (int i=0, j=1; j < size; i++, j += stride) {\n            int start = positions.get(j);\n            int end = positions.get(j+1);\n            offsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n          }\n          return offsets;\n        }\n\n      };\n    }\n\n","sourceOld":"      public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n      final Info info = getInfo(fieldName);\n      if (info == null) return null; // TODO: or return empty vector impl???\n      info.sortTerms();\n      \n      return new TermPositionVector() { \n  \n        private final Map.Entry<String,ArrayIntList>[] sortedTerms = info.sortedTerms;\n        \n        public String getField() {\n          return fieldName;\n        }\n  \n        public int size() {\n          return sortedTerms.length;\n        }\n  \n        public String[] getTerms() {\n          String[] terms = new String[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            terms[i] = sortedTerms[i].getKey();\n          }\n          return terms;\n        }\n  \n        public int[] getTermFrequencies() {\n          int[] freqs = new int[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            freqs[i] = numPositions(sortedTerms[i].getValue());\n          }\n          return freqs;\n        }\n  \n        public int indexOf(String term) {\n          int i = Arrays.binarySearch(sortedTerms, term, termComparator);\n          return i >= 0 ? i : -1;\n        }\n  \n        public int[] indexesOf(String[] terms, int start, int len) {\n          int[] indexes = new int[len];\n          for (int i=0; i < len; i++) {\n            indexes[i] = indexOf(terms[start++]);\n          }\n          return indexes;\n        }\n        \n        // lucene >= 1.4.3\n        public int[] getTermPositions(int index) {\n          return sortedTerms[index].getValue().toArray(stride);\n        } \n        \n        // lucene >= 1.9 (remove this method for lucene-1.4.3)\n        public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n          if (stride == 1) return null; // no offsets stored\n          \n          ArrayIntList positions = sortedTerms[index].getValue();\n          int size = positions.size();\n          org.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n            new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n          \n          for (int i=0, j=1; j < size; i++, j += stride) {\n            int start = positions.get(j);\n            int end = positions.get(j+1);\n            offsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n          }\n          return offsets;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#getTermFreqVector(int,String).mjava","sourceNew":"      @Override\n      public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n      final Info info = getInfo(fieldName);\n      if (info == null) return null; // TODO: or return empty vector impl???\n      info.sortTerms();\n      \n      return new TermPositionVector() { \n  \n        private final Map.Entry<String,ArrayIntList>[] sortedTerms = info.sortedTerms;\n        \n        public String getField() {\n          return fieldName;\n        }\n  \n        public int size() {\n          return sortedTerms.length;\n        }\n  \n        public String[] getTerms() {\n          String[] terms = new String[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            terms[i] = sortedTerms[i].getKey();\n          }\n          return terms;\n        }\n  \n        public int[] getTermFrequencies() {\n          int[] freqs = new int[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            freqs[i] = numPositions(sortedTerms[i].getValue());\n          }\n          return freqs;\n        }\n  \n        public int indexOf(String term) {\n          int i = Arrays.binarySearch(sortedTerms, term, termComparator);\n          return i >= 0 ? i : -1;\n        }\n  \n        public int[] indexesOf(String[] terms, int start, int len) {\n          int[] indexes = new int[len];\n          for (int i=0; i < len; i++) {\n            indexes[i] = indexOf(terms[start++]);\n          }\n          return indexes;\n        }\n        \n        // lucene >= 1.4.3\n        public int[] getTermPositions(int index) {\n          return sortedTerms[index].getValue().toArray(stride);\n        } \n        \n        // lucene >= 1.9 (remove this method for lucene-1.4.3)\n        public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n          if (stride == 1) return null; // no offsets stored\n          \n          ArrayIntList positions = sortedTerms[index].getValue();\n          int size = positions.size();\n          org.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n            new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n          \n          for (int i=0, j=1; j < size; i++, j += stride) {\n            int start = positions.get(j);\n            int end = positions.get(j+1);\n            offsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n          }\n          return offsets;\n        }\n\n      };\n    }\n\n","sourceOld":"      @Override\n      public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.getTermFreqVector\");\n      final Info info = getInfo(fieldName);\n      if (info == null) return null; // TODO: or return empty vector impl???\n      info.sortTerms();\n      \n      return new TermPositionVector() { \n  \n        private final Map.Entry<String,ArrayIntList>[] sortedTerms = info.sortedTerms;\n        \n        public String getField() {\n          return fieldName;\n        }\n  \n        public int size() {\n          return sortedTerms.length;\n        }\n  \n        public String[] getTerms() {\n          String[] terms = new String[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            terms[i] = sortedTerms[i].getKey();\n          }\n          return terms;\n        }\n  \n        public int[] getTermFrequencies() {\n          int[] freqs = new int[sortedTerms.length];\n          for (int i=sortedTerms.length; --i >= 0; ) {\n            freqs[i] = numPositions(sortedTerms[i].getValue());\n          }\n          return freqs;\n        }\n  \n        public int indexOf(String term) {\n          int i = Arrays.binarySearch(sortedTerms, term, termComparator);\n          return i >= 0 ? i : -1;\n        }\n  \n        public int[] indexesOf(String[] terms, int start, int len) {\n          int[] indexes = new int[len];\n          for (int i=0; i < len; i++) {\n            indexes[i] = indexOf(terms[start++]);\n          }\n          return indexes;\n        }\n        \n        // lucene >= 1.4.3\n        public int[] getTermPositions(int index) {\n          return sortedTerms[index].getValue().toArray(stride);\n        } \n        \n        // lucene >= 1.9 (remove this method for lucene-1.4.3)\n        public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {\n          if (stride == 1) return null; // no offsets stored\n          \n          ArrayIntList positions = sortedTerms[index].getValue();\n          int size = positions.size();\n          org.apache.lucene.index.TermVectorOffsetInfo[] offsets = \n            new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];\n          \n          for (int i=0, j=1; j < size; i++, j += stride) {\n            int start = positions.get(j);\n            int end = positions.get(j+1);\n            offsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);\n          }\n          return offsets;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35dd40ede4dd66fa47506858c4a073d295c5a76e":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["a93e1e4a21be8ebb98e53e6933412a363931faa1"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a93e1e4a21be8ebb98e53e6933412a363931faa1":["35dd40ede4dd66fa47506858c4a073d295c5a76e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"]},"commit2Childs":{"35dd40ede4dd66fa47506858c4a073d295c5a76e":["a93e1e4a21be8ebb98e53e6933412a363931faa1"],"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["35dd40ede4dd66fa47506858c4a073d295c5a76e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"a93e1e4a21be8ebb98e53e6933412a363931faa1":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}