{"path":"solr/solrj/src/java/org/apache/solr/common/util/Utils#makeMap(Object...).mjava","commits":[{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#makeMap(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkNodeProps#makeMap(Object...).mjava","sourceNew":"  public static Map<String,Object> makeMap(Object... keyVals) {\n    if ((keyVals.length & 0x01) != 0) {\n      throw new IllegalArgumentException(\"arguments should be key,value\");\n    }\n    Map<String,Object> propMap = new LinkedHashMap<>(keyVals.length>>1);\n    for (int i = 0; i < keyVals.length; i+=2) {\n      propMap.put(keyVals[i].toString(), keyVals[i+1]);\n    }\n    return propMap;\n  }\n\n","sourceOld":"  public static Map<String,Object> makeMap(Object... keyVals) {\n    if ((keyVals.length & 0x01) != 0) {\n      throw new IllegalArgumentException(\"arguments should be key,value\");\n    }\n    Map<String,Object> propMap = new LinkedHashMap<>(keyVals.length>>1);\n    for (int i = 0; i < keyVals.length; i+=2) {\n      propMap.put(keyVals[i].toString(), keyVals[i+1]);\n    }\n    return propMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#makeMap(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#makeMap(Object...).mjava","sourceNew":"  public static Map<String, Object> makeMap(Object... keyVals) {\n    if ((keyVals.length & 0x01) != 0) {\n      throw new IllegalArgumentException(\"arguments should be key,value\");\n    }\n    Map<String, Object> propMap = new LinkedHashMap<>(keyVals.length >> 1);\n    for (int i = 0; i < keyVals.length; i += 2) {\n      propMap.put(keyVals[i].toString(), keyVals[i + 1]);\n    }\n    return propMap;\n  }\n\n","sourceOld":"  public static Map<String,Object> makeMap(Object... keyVals) {\n    if ((keyVals.length & 0x01) != 0) {\n      throw new IllegalArgumentException(\"arguments should be key,value\");\n    }\n    Map<String,Object> propMap = new LinkedHashMap<>(keyVals.length>>1);\n    for (int i = 0; i < keyVals.length; i+=2) {\n      propMap.put(keyVals[i].toString(), keyVals[i+1]);\n    }\n    return propMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e12a337a9a98e388c3a5bca9c8256d21c13781f9","date":1492093671,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#makeMap(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#makeMap(Object...).mjava","sourceNew":"  public static Map<String, Object> makeMap(Object... keyVals) {\n    return makeMap(false, keyVals);\n  }\n\n","sourceOld":"  public static Map<String, Object> makeMap(Object... keyVals) {\n    if ((keyVals.length & 0x01) != 0) {\n      throw new IllegalArgumentException(\"arguments should be key,value\");\n    }\n    Map<String, Object> propMap = new LinkedHashMap<>(keyVals.length >> 1);\n    for (int i = 0; i < keyVals.length; i += 2) {\n      propMap.put(keyVals[i].toString(), keyVals[i + 1]);\n    }\n    return propMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#makeMap(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#makeMap(Object...).mjava","sourceNew":"  public static Map<String, Object> makeMap(Object... keyVals) {\n    return makeMap(false, keyVals);\n  }\n\n","sourceOld":"  public static Map<String, Object> makeMap(Object... keyVals) {\n    if ((keyVals.length & 0x01) != 0) {\n      throw new IllegalArgumentException(\"arguments should be key,value\");\n    }\n    Map<String, Object> propMap = new LinkedHashMap<>(keyVals.length >> 1);\n    for (int i = 0; i < keyVals.length; i += 2) {\n      propMap.put(keyVals[i].toString(), keyVals[i + 1]);\n    }\n    return propMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#makeMap(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#makeMap(Object...).mjava","sourceNew":"  public static Map<String, Object> makeMap(Object... keyVals) {\n    return makeMap(false, keyVals);\n  }\n\n","sourceOld":"  public static Map<String, Object> makeMap(Object... keyVals) {\n    if ((keyVals.length & 0x01) != 0) {\n      throw new IllegalArgumentException(\"arguments should be key,value\");\n    }\n    Map<String, Object> propMap = new LinkedHashMap<>(keyVals.length >> 1);\n    for (int i = 0; i < keyVals.length; i += 2) {\n      propMap.put(keyVals[i].toString(), keyVals[i + 1]);\n    }\n    return propMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#makeMap(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#makeMap(Object...).mjava","sourceNew":"  public static Map<String, Object> makeMap(Object... keyVals) {\n    return makeMap(false, keyVals);\n  }\n\n","sourceOld":"  public static Map<String, Object> makeMap(Object... keyVals) {\n    if ((keyVals.length & 0x01) != 0) {\n      throw new IllegalArgumentException(\"arguments should be key,value\");\n    }\n    Map<String, Object> propMap = new LinkedHashMap<>(keyVals.length >> 1);\n    for (int i = 0; i < keyVals.length; i += 2) {\n      propMap.put(keyVals[i].toString(), keyVals[i + 1]);\n    }\n    return propMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bdcb86c29922edae9a14852e636303bc52df094":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["6bdcb86c29922edae9a14852e636303bc52df094","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["6bdcb86c29922edae9a14852e636303bc52df094"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e12a337a9a98e388c3a5bca9c8256d21c13781f9":["6bdcb86c29922edae9a14852e636303bc52df094"],"28288370235ed02234a64753cdbf0c6ec096304a":["6bdcb86c29922edae9a14852e636303bc52df094","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"6bdcb86c29922edae9a14852e636303bc52df094":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","e12a337a9a98e388c3a5bca9c8256d21c13781f9","28288370235ed02234a64753cdbf0c6ec096304a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["28288370235ed02234a64753cdbf0c6ec096304a"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["6bdcb86c29922edae9a14852e636303bc52df094"],"e12a337a9a98e388c3a5bca9c8256d21c13781f9":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e12a337a9a98e388c3a5bca9c8256d21c13781f9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}