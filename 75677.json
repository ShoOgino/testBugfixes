{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,Map[String,Object],ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n    }\n\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cdp);\n    Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n    typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n    typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n    typeVsCount.put(Replica.Type.PULL, pullReplicas);\n    for (String shardName : shardNames) {\n      int idx = 0;\n      for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n        for (int i = 0; i < e.getValue(); i++) {\n          Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n              .hint(Hint.COLL, collName)\n              .hint(Hint.REPLICATYPE, e.getKey())\n              .hint(Hint.SHARD, shardName);\n          if (nodesList != null) {\n            for (String nodeName : nodesList) {\n              suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n            }\n          }\n          SolrRequest op = suggester.getOperation();\n          if (op == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" + Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n          }\n          session = suggester.getSession();\n          positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n        }\n      }\n    }\n\n    return positions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getReplicaLocations(String collName, Map<String, Object> autoScalingJson,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n    }\n\n    Policy policy = new Policy(autoScalingJson);\n    Policy.Session session = policy.createSession(cdp);\n    Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n    typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n    typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n    typeVsCount.put(Replica.Type.PULL, pullReplicas);\n    for (String shardName : shardNames) {\n      int idx = 0;\n      for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n        for (int i = 0; i < e.getValue(); i++) {\n          Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n              .hint(Hint.COLL, collName)\n              .hint(Hint.REPLICATYPE, e.getKey())\n              .hint(Hint.SHARD, shardName);\n          if (nodesList != null) {\n            for (String nodeName : nodesList) {\n              suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n            }\n          }\n          SolrRequest op = suggester.getOperation();\n          if (op == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" + Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n          }\n          session = suggester.getSession();\n          positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n        }\n      }\n    }\n\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bccf7971a36bd151490117582a0a1a695081ead3","date":1502778995,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return policyMapping.get() != null && policyMapping.get().containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    policyMapping.set(optionalPolicyMapping);\n    Policy.Session session = null;\n    try {\n      session = SESSION_REF.get() != null ?\n          SESSION_REF.get().initOrGet(cdp, autoScalingConfig.getPolicy()) :\n          autoScalingConfig.getPolicy().createSession(cdp);\n\n      Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n      typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n      typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n      typeVsCount.put(Replica.Type.PULL, pullReplicas);\n      for (String shardName : shardNames) {\n        int idx = 0;\n        for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n          for (int i = 0; i < e.getValue(); i++) {\n            Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n                .hint(Hint.COLL, collName)\n                .hint(Hint.REPLICATYPE, e.getKey())\n                .hint(Hint.SHARD, shardName);\n            if (nodesList != null) {\n              for (String nodeName : nodesList) {\n                suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n              }\n            }\n            SolrRequest op = suggester.getOperation();\n            if (op == null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" +\n                  Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n            }\n            session = suggester.getSession();\n            positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n          }\n        }\n      }\n    } finally {\n      if (session != null && SESSION_REF.get() != null) SESSION_REF.get().updateSession(session);\n      policyMapping.remove();\n    }\n    return positions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n    if (optionalPolicyMapping != null) {\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return optionalPolicyMapping.containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n    }\n\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cdp);\n    Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n    typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n    typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n    typeVsCount.put(Replica.Type.PULL, pullReplicas);\n    for (String shardName : shardNames) {\n      int idx = 0;\n      for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n        for (int i = 0; i < e.getValue(); i++) {\n          Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n              .hint(Hint.COLL, collName)\n              .hint(Hint.REPLICATYPE, e.getKey())\n              .hint(Hint.SHARD, shardName);\n          if (nodesList != null) {\n            for (String nodeName : nodesList) {\n              suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n            }\n          }\n          SolrRequest op = suggester.getOperation();\n          if (op == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" + Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n          }\n          session = suggester.getSession();\n          positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n        }\n      }\n    }\n\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":["7b0249ced9c25c3b173d20c3ca74160b9eade78c","042da0877b8e28fd372a8ed80d11c4506a466ad7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n      final ClusterDataProvider delegate = cdp;\n      cdp = new DelegatingClusterDataProvider(delegate) {\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return policyMapping.get() != null && policyMapping.get().containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    policyMapping.set(optionalPolicyMapping);\n    Policy.Session session = null;\n    try {\n      session = SESSION_REF.get() != null ?\n          SESSION_REF.get().initOrGet(cdp, autoScalingConfig.getPolicy()) :\n          autoScalingConfig.getPolicy().createSession(cdp);\n\n      Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n      typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n      typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n      typeVsCount.put(Replica.Type.PULL, pullReplicas);\n      for (String shardName : shardNames) {\n        int idx = 0;\n        for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n          for (int i = 0; i < e.getValue(); i++) {\n            Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n                .hint(Hint.COLL, collName)\n                .hint(Hint.REPLICATYPE, e.getKey())\n                .hint(Hint.SHARD, shardName);\n            if (nodesList != null) {\n              for (String nodeName : nodesList) {\n                suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n              }\n            }\n            SolrRequest op = suggester.getOperation();\n            if (op == null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" +\n                  Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n            }\n            session = suggester.getSession();\n            positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n          }\n        }\n      }\n    } finally {\n      if (session != null && SESSION_REF.get() != null) SESSION_REF.get().updateSession(session);\n      policyMapping.remove();\n    }\n    return positions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return policyMapping.get() != null && policyMapping.get().containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    policyMapping.set(optionalPolicyMapping);\n    Policy.Session session = null;\n    try {\n      session = SESSION_REF.get() != null ?\n          SESSION_REF.get().initOrGet(cdp, autoScalingConfig.getPolicy()) :\n          autoScalingConfig.getPolicy().createSession(cdp);\n\n      Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n      typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n      typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n      typeVsCount.put(Replica.Type.PULL, pullReplicas);\n      for (String shardName : shardNames) {\n        int idx = 0;\n        for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n          for (int i = 0; i < e.getValue(); i++) {\n            Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n                .hint(Hint.COLL, collName)\n                .hint(Hint.REPLICATYPE, e.getKey())\n                .hint(Hint.SHARD, shardName);\n            if (nodesList != null) {\n              for (String nodeName : nodesList) {\n                suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n              }\n            }\n            SolrRequest op = suggester.getOperation();\n            if (op == null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" +\n                  Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n            }\n            session = suggester.getSession();\n            positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n          }\n        }\n      }\n    } finally {\n      if (session != null && SESSION_REF.get() != null) SESSION_REF.get().updateSession(session);\n      policyMapping.remove();\n    }\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return policyMapping.get() != null && policyMapping.get().containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    policyMapping.set(optionalPolicyMapping);\n    Policy.Session session = null;\n    try {\n      session = SESSION_REF.get() != null ?\n          SESSION_REF.get().initOrGet(cdp, autoScalingConfig.getPolicy()) :\n          autoScalingConfig.getPolicy().createSession(cdp);\n\n      Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n      typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n      typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n      typeVsCount.put(Replica.Type.PULL, pullReplicas);\n      for (String shardName : shardNames) {\n        int idx = 0;\n        for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n          for (int i = 0; i < e.getValue(); i++) {\n            Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n                .hint(Hint.COLL, collName)\n                .hint(Hint.REPLICATYPE, e.getKey())\n                .hint(Hint.SHARD, shardName);\n            if (nodesList != null) {\n              for (String nodeName : nodesList) {\n                suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n              }\n            }\n            SolrRequest op = suggester.getOperation();\n            if (op == null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" +\n                  Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n            }\n            session = suggester.getSession();\n            positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n          }\n        }\n      }\n    } finally {\n      if (session != null && SESSION_REF.get() != null) SESSION_REF.get().updateSession(session);\n      policyMapping.remove();\n    }\n    return positions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n      final ClusterDataProvider delegate = cdp;\n      cdp = new DelegatingClusterDataProvider(delegate) {\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return policyMapping.get() != null && policyMapping.get().containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    policyMapping.set(optionalPolicyMapping);\n    Policy.Session session = null;\n    try {\n      session = SESSION_REF.get() != null ?\n          SESSION_REF.get().initOrGet(cdp, autoScalingConfig.getPolicy()) :\n          autoScalingConfig.getPolicy().createSession(cdp);\n\n      Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n      typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n      typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n      typeVsCount.put(Replica.Type.PULL, pullReplicas);\n      for (String shardName : shardNames) {\n        int idx = 0;\n        for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n          for (int i = 0; i < e.getValue(); i++) {\n            Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n                .hint(Hint.COLL, collName)\n                .hint(Hint.REPLICATYPE, e.getKey())\n                .hint(Hint.SHARD, shardName);\n            if (nodesList != null) {\n              for (String nodeName : nodesList) {\n                suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n              }\n            }\n            SolrRequest op = suggester.getOperation();\n            if (op == null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" +\n                  Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n            }\n            session = suggester.getSession();\n            positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n          }\n        }\n      }\n    } finally {\n      if (session != null && SESSION_REF.get() != null) SESSION_REF.get().updateSession(session);\n      policyMapping.remove();\n    }\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d5088ce415a50eb8412f4942aeabe293e75c81e7","date":1504531555,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return policyMapping.get() != null && policyMapping.get().containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    policyMapping.set(optionalPolicyMapping);\n    Policy.Session session = null;\n    try {\n      session = SESSION_REF.get() != null ?\n          SESSION_REF.get().initOrGet(cdp, autoScalingConfig.getPolicy()) :\n          autoScalingConfig.getPolicy().createSession(cdp);\n\n      Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n      typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n      typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n      typeVsCount.put(Replica.Type.PULL, pullReplicas);\n      for (String shardName : shardNames) {\n        int idx = 0;\n        for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n          for (int i = 0; i < e.getValue(); i++) {\n            Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n                .hint(Hint.REPLICATYPE, e.getKey())\n                .hint(Hint.COLL_SHARD, new Pair<>(collName, shardName));\n            if (nodesList != null) {\n              for (String nodeName : nodesList) {\n                suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n              }\n            }\n            SolrRequest op = suggester.getOperation();\n            if (op == null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" +\n                  Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n            }\n            session = suggester.getSession();\n            positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n          }\n        }\n      }\n    } finally {\n      if (session != null && SESSION_REF.get() != null) SESSION_REF.get().updateSession(session);\n      policyMapping.remove();\n    }\n    return positions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return policyMapping.get() != null && policyMapping.get().containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    policyMapping.set(optionalPolicyMapping);\n    Policy.Session session = null;\n    try {\n      session = SESSION_REF.get() != null ?\n          SESSION_REF.get().initOrGet(cdp, autoScalingConfig.getPolicy()) :\n          autoScalingConfig.getPolicy().createSession(cdp);\n\n      Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n      typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n      typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n      typeVsCount.put(Replica.Type.PULL, pullReplicas);\n      for (String shardName : shardNames) {\n        int idx = 0;\n        for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n          for (int i = 0; i < e.getValue(); i++) {\n            Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n                .hint(Hint.COLL, collName)\n                .hint(Hint.REPLICATYPE, e.getKey())\n                .hint(Hint.SHARD, shardName);\n            if (nodesList != null) {\n              for (String nodeName : nodesList) {\n                suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n              }\n            }\n            SolrRequest op = suggester.getOperation();\n            if (op == null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" +\n                  Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n            }\n            session = suggester.getSession();\n            positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n          }\n        }\n      }\n    } finally {\n      if (session != null && SESSION_REF.get() != null) SESSION_REF.get().updateSession(session);\n      policyMapping.remove();\n    }\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public ClusterState getClusterState() {\n          return delegate.getClusterState();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return policyMapping.get() != null && policyMapping.get().containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    policyMapping.set(optionalPolicyMapping);\n    Policy.Session session = null;\n    try {\n      session = SESSION_REF.get() != null ?\n          SESSION_REF.get().initOrGet(cdp, autoScalingConfig.getPolicy()) :\n          autoScalingConfig.getPolicy().createSession(cdp);\n\n      Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n      typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n      typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n      typeVsCount.put(Replica.Type.PULL, pullReplicas);\n      for (String shardName : shardNames) {\n        int idx = 0;\n        for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n          for (int i = 0; i < e.getValue(); i++) {\n            Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n                .hint(Hint.REPLICATYPE, e.getKey())\n                .hint(Hint.COLL_SHARD, new Pair<>(collName, shardName));\n            if (nodesList != null) {\n              for (String nodeName : nodesList) {\n                suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n              }\n            }\n            SolrRequest op = suggester.getOperation();\n            if (op == null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" +\n                  Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n            }\n            session = suggester.getSession();\n            positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n          }\n        }\n      }\n    } finally {\n      if (session != null && SESSION_REF.get() != null) SESSION_REF.get().updateSession(session);\n      policyMapping.remove();\n    }\n    return positions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return policyMapping.get() != null && policyMapping.get().containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    policyMapping.set(optionalPolicyMapping);\n    Policy.Session session = null;\n    try {\n      session = SESSION_REF.get() != null ?\n          SESSION_REF.get().initOrGet(cdp, autoScalingConfig.getPolicy()) :\n          autoScalingConfig.getPolicy().createSession(cdp);\n\n      Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n      typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n      typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n      typeVsCount.put(Replica.Type.PULL, pullReplicas);\n      for (String shardName : shardNames) {\n        int idx = 0;\n        for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n          for (int i = 0; i < e.getValue(); i++) {\n            Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n                .hint(Hint.REPLICATYPE, e.getKey())\n                .hint(Hint.COLL_SHARD, new Pair<>(collName, shardName));\n            if (nodesList != null) {\n              for (String nodeName : nodesList) {\n                suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n              }\n            }\n            SolrRequest op = suggester.getOperation();\n            if (op == null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" +\n                  Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n            }\n            session = suggester.getSession();\n            positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n          }\n        }\n      }\n    } finally {\n      if (session != null && SESSION_REF.get() != null) SESSION_REF.get().updateSession(session);\n      policyMapping.remove();\n    }\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6","date":1505752009,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return policyMapping.get() != null && policyMapping.get().containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    policyMapping.set(optionalPolicyMapping);\n    Policy.Session session = null;\n    try {\n      session = SESSION_REF.get() != null ?\n          SESSION_REF.get().initOrGet(cdp, autoScalingConfig.getPolicy()) :\n          autoScalingConfig.getPolicy().createSession(cdp);\n\n      Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n      typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n      typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n      typeVsCount.put(Replica.Type.PULL, pullReplicas);\n      for (String shardName : shardNames) {\n        int idx = 0;\n        for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n          for (int i = 0; i < e.getValue(); i++) {\n            Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n                .hint(Hint.REPLICATYPE, e.getKey())\n                .hint(Hint.COLL_SHARD, new Pair<>(collName, shardName));\n            if (nodesList != null) {\n              for (String nodeName : nodesList) {\n                suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n              }\n            }\n            SolrRequest op = suggester.getOperation();\n            if (op == null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" +\n                  Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n            }\n            session = suggester.getSession();\n            positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n          }\n        }\n      }\n    } finally {\n      if (session != null && SESSION_REF.get() != null) SESSION_REF.get().updateSession(session);\n      policyMapping.remove();\n    }\n    return positions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public ClusterState getClusterState() {\n          return delegate.getClusterState();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return policyMapping.get() != null && policyMapping.get().containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    policyMapping.set(optionalPolicyMapping);\n    Policy.Session session = null;\n    try {\n      session = SESSION_REF.get() != null ?\n          SESSION_REF.get().initOrGet(cdp, autoScalingConfig.getPolicy()) :\n          autoScalingConfig.getPolicy().createSession(cdp);\n\n      Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n      typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n      typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n      typeVsCount.put(Replica.Type.PULL, pullReplicas);\n      for (String shardName : shardNames) {\n        int idx = 0;\n        for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n          for (int i = 0; i < e.getValue(); i++) {\n            Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n                .hint(Hint.REPLICATYPE, e.getKey())\n                .hint(Hint.COLL_SHARD, new Pair<>(collName, shardName));\n            if (nodesList != null) {\n              for (String nodeName : nodesList) {\n                suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n              }\n            }\n            SolrRequest op = suggester.getOperation();\n            if (op == null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" +\n                  Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n            }\n            session = suggester.getSession();\n            positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n          }\n        }\n      }\n    } finally {\n      if (session != null && SESSION_REF.get() != null) SESSION_REF.get().updateSession(session);\n      policyMapping.remove();\n    }\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return policyMapping.get() != null && policyMapping.get().containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    policyMapping.set(optionalPolicyMapping);\n    Policy.Session session = null;\n    try {\n      session = SESSION_REF.get() != null ?\n          SESSION_REF.get().initOrGet(cdp, autoScalingConfig.getPolicy()) :\n          autoScalingConfig.getPolicy().createSession(cdp);\n\n      Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n      typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n      typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n      typeVsCount.put(Replica.Type.PULL, pullReplicas);\n      for (String shardName : shardNames) {\n        int idx = 0;\n        for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n          for (int i = 0; i < e.getValue(); i++) {\n            Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n                .hint(Hint.REPLICATYPE, e.getKey())\n                .hint(Hint.COLL_SHARD, new Pair<>(collName, shardName));\n            if (nodesList != null) {\n              for (String nodeName : nodesList) {\n                suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n              }\n            }\n            SolrRequest op = suggester.getOperation();\n            if (op == null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" +\n                  Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n            }\n            session = suggester.getSession();\n            positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n          }\n        }\n      }\n    } finally {\n      if (session != null && SESSION_REF.get() != null) SESSION_REF.get().updateSession(session);\n      policyMapping.remove();\n    }\n    return positions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return policyMapping.get() != null && policyMapping.get().containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    policyMapping.set(optionalPolicyMapping);\n    Policy.Session session = null;\n    try {\n      session = SESSION_REF.get() != null ?\n          SESSION_REF.get().initOrGet(cdp, autoScalingConfig.getPolicy()) :\n          autoScalingConfig.getPolicy().createSession(cdp);\n\n      Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n      typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n      typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n      typeVsCount.put(Replica.Type.PULL, pullReplicas);\n      for (String shardName : shardNames) {\n        int idx = 0;\n        for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n          for (int i = 0; i < e.getValue(); i++) {\n            Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n                .hint(Hint.REPLICATYPE, e.getKey())\n                .hint(Hint.COLL_SHARD, new Pair<>(collName, shardName));\n            if (nodesList != null) {\n              for (String nodeName : nodesList) {\n                suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n              }\n            }\n            SolrRequest op = suggester.getOperation();\n            if (op == null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" +\n                  Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n            }\n            session = suggester.getSession();\n            positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n          }\n        }\n      }\n    } finally {\n      if (session != null && SESSION_REF.get() != null) SESSION_REF.get().updateSession(session);\n      policyMapping.remove();\n    }\n    return positions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,SolrCloudManager,Map[String,String],List[String],int,int,int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getReplicaLocations(String,AutoScalingConfig,ClusterDataProvider,Map[String,String],List[String],int,int,int,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          SolrCloudManager cloudManager,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n    ClusterStateProvider stateProvider = new DelegatingClusterStateProvider(cloudManager.getClusterStateProvider()) {\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return policyMapping.get() != null && policyMapping.get().containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n    SolrCloudManager delegatingManager = new DelegatingCloudManager(cloudManager) {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return stateProvider;\n      }\n    };\n\n    policyMapping.set(optionalPolicyMapping);\n    Policy.Session session = null;\n    try {\n      session = SESSION_REF.get() != null ?\n          SESSION_REF.get().initOrGet(delegatingManager, autoScalingConfig.getPolicy()) :\n          autoScalingConfig.getPolicy().createSession(delegatingManager);\n\n      Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n      typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n      typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n      typeVsCount.put(Replica.Type.PULL, pullReplicas);\n      for (String shardName : shardNames) {\n        int idx = 0;\n        for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n          for (int i = 0; i < e.getValue(); i++) {\n            Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n                .hint(Hint.REPLICATYPE, e.getKey())\n                .hint(Hint.COLL_SHARD, new Pair<>(collName, shardName));\n            if (nodesList != null) {\n              for (String nodeName : nodesList) {\n                suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n              }\n            }\n            SolrRequest op = suggester.getOperation();\n            if (op == null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" +\n                  Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n            }\n            session = suggester.getSession();\n            positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n          }\n        }\n      }\n    } finally {\n      if (session != null && SESSION_REF.get() != null) SESSION_REF.get().updateSession(session);\n      policyMapping.remove();\n    }\n    return positions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getReplicaLocations(String collName, AutoScalingConfig autoScalingConfig,\n                                                          ClusterDataProvider cdp,\n                                                          Map<String, String> optionalPolicyMapping,\n                                                          List<String> shardNames,\n                                                          int nrtReplicas,\n                                                          int tlogReplicas,\n                                                          int pullReplicas,\n                                                          List<String> nodesList) {\n    List<ReplicaPosition> positions = new ArrayList<>();\n      final ClusterDataProvider delegate = cdp;\n      cdp = new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n          return delegate.getNodeValues(node, tags);\n        }\n\n        @Override\n        public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return delegate.getReplicaInfo(node, keys);\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return delegate.getNodes();\n        }\n\n        @Override\n        public String getPolicyNameByCollection(String coll) {\n          return policyMapping.get() != null && policyMapping.get().containsKey(coll) ?\n              optionalPolicyMapping.get(coll) :\n              delegate.getPolicyNameByCollection(coll);\n        }\n      };\n\n    policyMapping.set(optionalPolicyMapping);\n    Policy.Session session = null;\n    try {\n      session = SESSION_REF.get() != null ?\n          SESSION_REF.get().initOrGet(cdp, autoScalingConfig.getPolicy()) :\n          autoScalingConfig.getPolicy().createSession(cdp);\n\n      Map<Replica.Type, Integer> typeVsCount = new EnumMap<>(Replica.Type.class);\n      typeVsCount.put(Replica.Type.NRT, nrtReplicas);\n      typeVsCount.put(Replica.Type.TLOG, tlogReplicas);\n      typeVsCount.put(Replica.Type.PULL, pullReplicas);\n      for (String shardName : shardNames) {\n        int idx = 0;\n        for (Map.Entry<Replica.Type, Integer> e : typeVsCount.entrySet()) {\n          for (int i = 0; i < e.getValue(); i++) {\n            Policy.Suggester suggester = session.getSuggester(ADDREPLICA)\n                .hint(Hint.REPLICATYPE, e.getKey())\n                .hint(Hint.COLL_SHARD, new Pair<>(collName, shardName));\n            if (nodesList != null) {\n              for (String nodeName : nodesList) {\n                suggester = suggester.hint(Hint.TARGET_NODE, nodeName);\n              }\n            }\n            SolrRequest op = suggester.getOperation();\n            if (op == null) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No node can satisfy the rules \" +\n                  Utils.toJSONString(Utils.getDeepCopy(session.expandedClauses, 4, true)));\n            }\n            session = suggester.getSession();\n            positions.add(new ReplicaPosition(shardName, ++idx, e.getKey(), op.getParams().get(NODE)));\n          }\n        }\n      }\n    } finally {\n      if (session != null && SESSION_REF.get() != null) SESSION_REF.get().updateSession(session);\n      policyMapping.remove();\n    }\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["d5088ce415a50eb8412f4942aeabe293e75c81e7"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["bccf7971a36bd151490117582a0a1a695081ead3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bccf7971a36bd151490117582a0a1a695081ead3":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"d5088ce415a50eb8412f4942aeabe293e75c81e7":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"bccf7971a36bd151490117582a0a1a695081ead3":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["d5088ce415a50eb8412f4942aeabe293e75c81e7"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"d5088ce415a50eb8412f4942aeabe293e75c81e7":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["bccf7971a36bd151490117582a0a1a695081ead3"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}