{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#intersectInterval(double,double,double,int,double,double,int[]).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#intersectInterval(double,double,double,int,double,double,int[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#intersectInterval(double,double,double,int,double,double,int[]).mjava","sourceNew":"  private static void intersectInterval(double heatMin, double heatMax, double heatCellLen, int heatLen,\n                                        double cellMin, double cellMax,\n                                        int[] out) {\n    //precondition: we know there's an intersection\n    if (heatMin >= cellMin) {\n      out[0] = 0;\n    } else {\n      out[0] = (int) Math.round((cellMin - heatMin) / heatCellLen);\n    }\n    if (heatMax <= cellMax) {\n      out[1] = heatLen - 1;\n    } else {\n      out[1] = (int) Math.round((cellMax - heatMin) / heatCellLen) - 1;\n    }\n  }\n\n","sourceOld":"  private static void intersectInterval(double heatMin, double heatMax, double heatCellLen, int heatLen,\n                                        double cellMin, double cellMax,\n                                        int[] out) {\n    //precondition: we know there's an intersection\n    if (heatMin >= cellMin) {\n      out[0] = 0;\n    } else {\n      out[0] = (int) Math.round((cellMin - heatMin) / heatCellLen);\n    }\n    if (heatMax <= cellMax) {\n      out[1] = heatLen - 1;\n    } else {\n      out[1] = (int) Math.round((cellMax - heatMin) / heatCellLen) - 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#intersectInterval(double,double,double,int,double,double,int[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#intersectInterval(double,double,double,int,double,double,int[]).mjava","sourceNew":"  private static void intersectInterval(double heatMin, double heatMax, double heatCellLen, int heatLen,\n                                        double cellMin, double cellMax,\n                                        int[] out) {\n    //precondition: we know there's an intersection\n    if (heatMin >= cellMin) {\n      out[0] = 0;\n    } else {\n      out[0] = (int) Math.round((cellMin - heatMin) / heatCellLen);\n    }\n    if (heatMax <= cellMax) {\n      out[1] = heatLen - 1;\n    } else {\n      out[1] = (int) Math.round((cellMax - heatMin) / heatCellLen) - 1;\n    }\n  }\n\n","sourceOld":"  private static void intersectInterval(double heatMin, double heatMax, double heatCellLen, int heatLen,\n                                        double cellMin, double cellMax,\n                                        int[] out) {\n    //precondition: we know there's an intersection\n    if (heatMin >= cellMin) {\n      out[0] = 0;\n    } else {\n      out[0] = (int) Math.round((cellMin - heatMin) / heatCellLen);\n    }\n    if (heatMax <= cellMax) {\n      out[1] = heatLen - 1;\n    } else {\n      out[1] = (int) Math.round((cellMax - heatMin) / heatCellLen) - 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceee459b5d9af86f3490334133c7cf34a5b69beb","date":1465580167,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#intersectInterval(double,double,double,int,double,double,int[]).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#intersectInterval(double,double,double,int,double,double,int[]).mjava","sourceNew":"  private static void intersectInterval(double heatMin, double heatMax, double heatCellLen, int numCells,\n                                        double cellMin, double cellMax,\n                                        int[] out) {\n    assert heatMin < heatMax && cellMin < cellMax;\n    //precondition: we know there's an intersection\n    if (heatMin >= cellMin) {\n      out[0] = 0;\n    } else {\n      out[0] = (int) Math.round((cellMin - heatMin) / heatCellLen);\n    }\n    if (heatMax <= cellMax) {\n      out[1] = numCells - 1;\n    } else {\n      out[1] = (int) Math.round((cellMax - heatMin) / heatCellLen) - 1;\n    }\n  }\n\n","sourceOld":"  private static void intersectInterval(double heatMin, double heatMax, double heatCellLen, int heatLen,\n                                        double cellMin, double cellMax,\n                                        int[] out) {\n    //precondition: we know there's an intersection\n    if (heatMin >= cellMin) {\n      out[0] = 0;\n    } else {\n      out[0] = (int) Math.round((cellMin - heatMin) / heatCellLen);\n    }\n    if (heatMax <= cellMax) {\n      out[1] = heatLen - 1;\n    } else {\n      out[1] = (int) Math.round((cellMax - heatMin) / heatCellLen) - 1;\n    }\n  }\n\n","bugFix":["d19946da5b8a6505034a72adcb5bae87dd043ddd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#intersectInterval(double,double,double,int,double,double,int[]).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/HeatmapFacetCounter#intersectInterval(double,double,double,int,double,double,int[]).mjava","sourceNew":"  private static void intersectInterval(double heatMin, double heatMax, double heatCellLen, int numCells,\n                                        double cellMin, double cellMax,\n                                        int[] out) {\n    assert heatMin < heatMax && cellMin < cellMax;\n    //precondition: we know there's an intersection\n    if (heatMin >= cellMin) {\n      out[0] = 0;\n    } else {\n      out[0] = (int) Math.round((cellMin - heatMin) / heatCellLen);\n    }\n    if (heatMax <= cellMax) {\n      out[1] = numCells - 1;\n    } else {\n      out[1] = (int) Math.round((cellMax - heatMin) / heatCellLen) - 1;\n    }\n  }\n\n","sourceOld":"  private static void intersectInterval(double heatMin, double heatMax, double heatCellLen, int heatLen,\n                                        double cellMin, double cellMax,\n                                        int[] out) {\n    //precondition: we know there's an intersection\n    if (heatMin >= cellMin) {\n      out[0] = 0;\n    } else {\n      out[0] = (int) Math.round((cellMin - heatMin) / heatCellLen);\n    }\n    if (heatMax <= cellMax) {\n      out[1] = heatLen - 1;\n    } else {\n      out[1] = (int) Math.round((cellMax - heatMin) / heatCellLen) - 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"ceee459b5d9af86f3490334133c7cf34a5b69beb":["af2638813028b254a88b418ebeafb541afb49653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","ceee459b5d9af86f3490334133c7cf34a5b69beb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ceee459b5d9af86f3490334133c7cf34a5b69beb"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["ceee459b5d9af86f3490334133c7cf34a5b69beb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ceee459b5d9af86f3490334133c7cf34a5b69beb":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}