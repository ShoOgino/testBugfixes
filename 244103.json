{"path":"lucene/core/src/test/org/apache/lucene/document/TestLongDistanceFeatureQuery#testOverUnderFlow().mjava","commits":[{"id":"d0dc52d2a83be9420989b1976a8e9d937160e1e5","date":1536062604,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLongDistanceFeatureQuery#testOverUnderFlow().mjava","pathOld":"/dev/null","sourceNew":"  public void testOverUnderFlow() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig()\n        .setMergePolicy(newLogMergePolicy(random().nextBoolean())));\n    Document doc = new Document();\n    LongPoint point = new LongPoint(\"foo\", 0L);\n    doc.add(point);\n    NumericDocValuesField docValue = new NumericDocValuesField(\"foo\", 0L);\n    doc.add(docValue);\n\n    point.setLongValue(3);\n    docValue.setLongValue(3);\n    w.addDocument(doc);\n\n    point.setLongValue(12);\n    docValue.setLongValue(12);\n    w.addDocument(doc);\n\n    point.setLongValue(-10);\n    docValue.setLongValue(-10);\n    w.addDocument(doc);\n\n    point.setLongValue(Long.MAX_VALUE);\n    docValue.setLongValue(Long.MAX_VALUE);\n    w.addDocument(doc);\n\n    point.setLongValue(Long.MIN_VALUE);\n    docValue.setLongValue(Long.MIN_VALUE);\n    w.addDocument(doc);\n\n    DirectoryReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query q = LongPoint.newDistanceFeatureQuery(\"foo\", 3, Long.MAX_VALUE - 1, 100);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(2, null, 1);\n    searcher.search(q, collector);\n    TopDocs topHits = collector.topDocs();\n    assertEquals(2, topHits.scoreDocs.length);\n\n    CheckHits.checkEqual(q,\n        new ScoreDoc[] {\n            new ScoreDoc(3, (float) (3f * (100. / (100. + 1.)))),\n            new ScoreDoc(0, (float) (3f * (100. / (100. + Long.MAX_VALUE)))) // rounding makes the distance treated as if it was MAX_VALUE\n        },\n        topHits.scoreDocs);\n\n    q = LongPoint.newDistanceFeatureQuery(\"foo\", 3, Long.MIN_VALUE + 1, 100);\n    collector = TopScoreDocCollector.create(2, null, 1);\n    searcher.search(q, collector);\n    topHits = collector.topDocs();\n    assertEquals(2, topHits.scoreDocs.length);\n    CheckHits.checkExplanations(q, \"\", searcher);\n\n    CheckHits.checkEqual(q,\n        new ScoreDoc[] {\n            new ScoreDoc(4, (float) (3f * (100. / (100. + 1.)))),\n            new ScoreDoc(0, (float) (3f * (100. / (100. + Long.MAX_VALUE)))) // rounding makes the distance treated as if it was MAX_VALUE\n        },\n        topHits.scoreDocs);\n    \n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d0dc52d2a83be9420989b1976a8e9d937160e1e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0dc52d2a83be9420989b1976a8e9d937160e1e5"]},"commit2Childs":{"d0dc52d2a83be9420989b1976a8e9d937160e1e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0dc52d2a83be9420989b1976a8e9d937160e1e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}