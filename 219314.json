{"path":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommandExpectFailure(RestTestHarness,String,String,String).mjava","commits":[{"id":"5842a4edb3c2199b36886989b39d0da46b6f2e7b","date":1529637673,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommandExpectFailure(RestTestHarness,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static void runConfigCommandExpectFailure(RestTestHarness harness, String uri, String payload, String expectedErrorMessage) throws Exception {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errorMessages\"));\n    assertNotNull(response, map.get(\"error\"));\n    assertTrue(\"Expected status != 0: \" + response, 0L != (Long)((Map)map.get(\"responseHeader\")).get(\"status\"));\n    List errorDetails = (List)((Map)map.get(\"error\")).get(\"details\");\n    List errorMessages = (List)((Map)errorDetails.get(0)).get(\"errorMessages\");\n    assertTrue(\"Expected '\" + expectedErrorMessage + \"': \" + response, \n        errorMessages.get(0).toString().contains(expectedErrorMessage));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommandExpectFailure(RestTestHarness,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static void runConfigCommandExpectFailure(RestTestHarness harness, String uri, String payload, String expectedErrorMessage) throws Exception {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errorMessages\"));\n    assertNotNull(response, map.get(\"error\"));\n    assertTrue(\"Expected status != 0: \" + response, 0L != (Long)((Map)map.get(\"responseHeader\")).get(\"status\"));\n    List errorDetails = (List)((Map)map.get(\"error\")).get(\"details\");\n    List errorMessages = (List)((Map)errorDetails.get(0)).get(\"errorMessages\");\n    assertTrue(\"Expected '\" + expectedErrorMessage + \"': \" + response, \n        errorMessages.get(0).toString().contains(expectedErrorMessage));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommandExpectFailure(RestTestHarness,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static void runConfigCommandExpectFailure(RestTestHarness harness, String uri, String payload, String expectedErrorMessage) throws Exception {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errorMessages\"));\n    assertNotNull(response, map.get(\"error\"));\n    assertTrue(\"Expected status != 0: \" + response, 0L != (Long)((Map)map.get(\"responseHeader\")).get(\"status\"));\n    List errorDetails = (List)((Map)map.get(\"error\")).get(\"details\");\n    List errorMessages = (List)((Map)errorDetails.get(0)).get(\"errorMessages\");\n    assertTrue(\"Expected '\" + expectedErrorMessage + \"': \" + response, \n        errorMessages.get(0).toString().contains(expectedErrorMessage));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommandExpectFailure(RestTestHarness,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommandExpectFailure(RestTestHarness,String,String,String).mjava","sourceNew":"  public static void runConfigCommandExpectFailure(RestTestHarness harness, String uri, String payload, String expectedErrorMessage) throws Exception {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map)Utils.fromJSONString(response);\n    assertNotNull(response, map.get(\"errorMessages\"));\n    assertNotNull(response, map.get(\"error\"));\n    assertTrue(\"Expected status != 0: \" + response, 0L != (Long)((Map)map.get(\"responseHeader\")).get(\"status\"));\n    List errorDetails = (List)((Map)map.get(\"error\")).get(\"details\");\n    List errorMessages = (List)((Map)errorDetails.get(0)).get(\"errorMessages\");\n    assertTrue(\"Expected '\" + expectedErrorMessage + \"': \" + response, \n        errorMessages.get(0).toString().contains(expectedErrorMessage));\n  }\n\n","sourceOld":"  public static void runConfigCommandExpectFailure(RestTestHarness harness, String uri, String payload, String expectedErrorMessage) throws Exception {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errorMessages\"));\n    assertNotNull(response, map.get(\"error\"));\n    assertTrue(\"Expected status != 0: \" + response, 0L != (Long)((Map)map.get(\"responseHeader\")).get(\"status\"));\n    List errorDetails = (List)((Map)map.get(\"error\")).get(\"details\");\n    List errorMessages = (List)((Map)errorDetails.get(0)).get(\"errorMessages\");\n    assertTrue(\"Expected '\" + expectedErrorMessage + \"': \" + response, \n        errorMessages.get(0).toString().contains(expectedErrorMessage));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommandExpectFailure(RestTestHarness,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommandExpectFailure(RestTestHarness,String,String,String).mjava","sourceNew":"  public static void runConfigCommandExpectFailure(RestTestHarness harness, String uri, String payload, String expectedErrorMessage) throws Exception {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = (Map)Utils.fromJSONString(response);\n    assertNotNull(response, map.get(\"errorMessages\"));\n    assertNotNull(response, map.get(\"error\"));\n    assertTrue(\"Expected status != 0: \" + response, 0L != (Long)((Map)map.get(\"responseHeader\")).get(\"status\"));\n    @SuppressWarnings({\"rawtypes\"})\n    List errorDetails = (List)((Map)map.get(\"error\")).get(\"details\");\n    @SuppressWarnings({\"rawtypes\"})\n    List errorMessages = (List)((Map)errorDetails.get(0)).get(\"errorMessages\");\n    assertTrue(\"Expected '\" + expectedErrorMessage + \"': \" + response, \n        errorMessages.get(0).toString().contains(expectedErrorMessage));\n  }\n\n","sourceOld":"  public static void runConfigCommandExpectFailure(RestTestHarness harness, String uri, String payload, String expectedErrorMessage) throws Exception {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map)Utils.fromJSONString(response);\n    assertNotNull(response, map.get(\"errorMessages\"));\n    assertNotNull(response, map.get(\"error\"));\n    assertTrue(\"Expected status != 0: \" + response, 0L != (Long)((Map)map.get(\"responseHeader\")).get(\"status\"));\n    List errorDetails = (List)((Map)map.get(\"error\")).get(\"details\");\n    List errorMessages = (List)((Map)errorDetails.get(0)).get(\"errorMessages\");\n    assertTrue(\"Expected '\" + expectedErrorMessage + \"': \" + response, \n        errorMessages.get(0).toString().contains(expectedErrorMessage));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5842a4edb3c2199b36886989b39d0da46b6f2e7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5842a4edb3c2199b36886989b39d0da46b6f2e7b"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","5842a4edb3c2199b36886989b39d0da46b6f2e7b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"5842a4edb3c2199b36886989b39d0da46b6f2e7b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3714bcf66a68a1600e9dd11442fc1b33b62ef088","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}