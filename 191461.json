{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","commits":[{"id":"6101715a4732c1fe39eae50ce4a23fec6fc270d0","date":1328795951,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String).mjava","sourceNew":"    public void publishState(String coreName, String stateName, int numShards) throws KeeperException, InterruptedException{\n      HashMap<String,String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.STATE_PROP, stateName);\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, nodeName);\n      coreProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n      CoreState state = new CoreState(coreName, \"collection1\", coreProps, numShards);\n      final String statePath = Overseer.STATES_NODE + \"/\" + nodeName;\n      zkClient.setData(statePath, ZkStateReader.toJSON(new CoreState[] {state}), true);\n    }\n\n","sourceOld":"    public void publishState(String coreName, String stateName) throws KeeperException, InterruptedException{\n      HashMap<String,String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.STATE_PROP, stateName);\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, nodeName);\n      coreProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n      CoreState state = new CoreState(coreName, \"collection1\", coreProps);\n      final String statePath = Overseer.STATES_NODE + \"/\" + nodeName;\n      zkClient.setData(statePath, ZkStateReader.toJSON(new CoreState[] {state}), true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","sourceNew":"    public void publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        coreStates.remove(coreName);\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n      } else {\n        HashMap<String,String> coreProps = new HashMap<String,String>();\n        coreProps.put(ZkStateReader.STATE_PROP, stateName);\n        coreProps.put(ZkStateReader.NODE_NAME_PROP, nodeName);\n        coreProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n        coreProps.put(ZkStateReader.COLLECTION_PROP, collection);\n        coreProps.put(ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        CoreState state = new CoreState(coreName, collection, coreProps,\n            numShards);\n        coreStates.remove(coreName);\n        coreStates.put(coreName, state);\n      }\n      final String statePath = Overseer.STATES_NODE + \"/\" + nodeName;\n      zkClient.setData(\n          statePath,\n          ZkStateReader.toJSON(coreStates.values().toArray(\n              new CoreState[coreStates.size()])), true);\n      \n      for (int i = 0; i < 10; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx, null);\n          break;\n        }\n        Thread.sleep(200);\n      }\n    }\n\n","sourceOld":"    public void publishState(String coreName, String stateName, int numShards) throws KeeperException, InterruptedException{\n      HashMap<String,String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.STATE_PROP, stateName);\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, nodeName);\n      coreProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n      CoreState state = new CoreState(coreName, \"collection1\", coreProps, numShards);\n      final String statePath = Overseer.STATES_NODE + \"/\" + nodeName;\n      zkClient.setData(statePath, ZkStateReader.toJSON(new CoreState[] {state}), true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9813dd0748537c429b7c0a9b4723ea1ba496c047","date":1330304954,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","sourceNew":"    public void publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        coreStates.remove(coreName);\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n      } else {\n        HashMap<String,String> coreProps = new HashMap<String,String>();\n        coreProps.put(ZkStateReader.STATE_PROP, stateName);\n        coreProps.put(ZkStateReader.NODE_NAME_PROP, nodeName);\n        coreProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n        coreProps.put(ZkStateReader.COLLECTION_PROP, collection);\n        coreProps.put(ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        CoreState state = new CoreState(coreName, collection, coreProps,\n            numShards);\n        coreStates.remove(coreName);\n        coreStates.put(coreName, state);\n      }\n      final String statePath = Overseer.STATES_NODE + \"/\" + nodeName;\n      zkClient.setData(\n          statePath,\n          ZkStateReader.toJSON(coreStates.values().toArray(\n              new CoreState[coreStates.size()])), true);\n      \n      for (int i = 0; i < 10; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          break;\n        }\n        Thread.sleep(200);\n      }\n    }\n\n","sourceOld":"    public void publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        coreStates.remove(coreName);\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n      } else {\n        HashMap<String,String> coreProps = new HashMap<String,String>();\n        coreProps.put(ZkStateReader.STATE_PROP, stateName);\n        coreProps.put(ZkStateReader.NODE_NAME_PROP, nodeName);\n        coreProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n        coreProps.put(ZkStateReader.COLLECTION_PROP, collection);\n        coreProps.put(ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        CoreState state = new CoreState(coreName, collection, coreProps,\n            numShards);\n        coreStates.remove(coreName);\n        coreStates.put(coreName, state);\n      }\n      final String statePath = Overseer.STATES_NODE + \"/\" + nodeName;\n      zkClient.setData(\n          statePath,\n          ZkStateReader.toJSON(coreStates.values().toArray(\n              new CoreState[coreStates.size()])), true);\n      \n      for (int i = 0; i < 10; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx, null);\n          break;\n        }\n        Thread.sleep(200);\n      }\n    }\n\n","bugFix":null,"bugIntro":["88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","sourceNew":"    public void publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        coreStates.remove(coreName);\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n      } else {\n        HashMap<String,String> coreProps = new HashMap<String,String>();\n        coreProps.put(ZkStateReader.STATE_PROP, stateName);\n        coreProps.put(ZkStateReader.NODE_NAME_PROP, nodeName);\n        coreProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n        coreProps.put(ZkStateReader.COLLECTION_PROP, collection);\n        coreProps.put(ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        CoreState state = new CoreState(coreName, collection, coreProps,\n            numShards);\n        coreStates.remove(coreName);\n        coreStates.put(coreName, state);\n      }\n      final String statePath = Overseer.STATES_NODE + \"/\" + nodeName;\n      zkClient.setData(\n          statePath,\n          ZkStateReader.toJSON(coreStates.values().toArray(\n              new CoreState[coreStates.size()])), true);\n      \n      for (int i = 0; i < 10; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          break;\n        }\n        Thread.sleep(200);\n      }\n    }\n\n","sourceOld":"    public void publishState(String coreName, String stateName, int numShards) throws KeeperException, InterruptedException{\n      HashMap<String,String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.STATE_PROP, stateName);\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, nodeName);\n      coreProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n      CoreState state = new CoreState(coreName, \"collection1\", coreProps, numShards);\n      final String statePath = Overseer.STATES_NODE + \"/\" + nodeName;\n      zkClient.setData(statePath, ZkStateReader.toJSON(new CoreState[] {state}), true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd83761c0ebfa7eb75ab39b49f4a2d80811590bb","date":1334054651,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","sourceNew":"    public void publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        coreStates.remove(coreName);\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n      } else {\n        HashMap<String,String> coreProps = new HashMap<String,String>();\n        coreProps.put(ZkStateReader.STATE_PROP, stateName);\n        coreProps.put(ZkStateReader.NODE_NAME_PROP, nodeName);\n        coreProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n        coreProps.put(ZkStateReader.COLLECTION_PROP, collection);\n        coreProps.put(ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        CoreState state = new CoreState(coreName, collection, coreProps,\n            numShards);\n        coreStates.remove(coreName);\n        coreStates.put(coreName, state);\n      }\n      final String statePath = Overseer.STATES_NODE + \"/\" + nodeName;\n      zkClient.setData(\n          statePath,\n          ZkStateReader.toJSON(coreStates.values().toArray(\n              new CoreState[coreStates.size()])), true);\n      \n      for (int i = 0; i < 30; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          break;\n        }\n        Thread.sleep(200);\n      }\n    }\n\n","sourceOld":"    public void publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        coreStates.remove(coreName);\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n      } else {\n        HashMap<String,String> coreProps = new HashMap<String,String>();\n        coreProps.put(ZkStateReader.STATE_PROP, stateName);\n        coreProps.put(ZkStateReader.NODE_NAME_PROP, nodeName);\n        coreProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n        coreProps.put(ZkStateReader.COLLECTION_PROP, collection);\n        coreProps.put(ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        CoreState state = new CoreState(coreName, collection, coreProps,\n            numShards);\n        coreStates.remove(coreName);\n        coreStates.put(coreName, state);\n      }\n      final String statePath = Overseer.STATES_NODE + \"/\" + nodeName;\n      zkClient.setData(\n          statePath,\n          ZkStateReader.toJSON(coreStates.values().toArray(\n              new CoreState[coreStates.size()])), true);\n      \n      for (int i = 0; i < 10; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          break;\n        }\n        Thread.sleep(200);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","sourceNew":"    public void publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        coreStates.remove(coreName);\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n      } else {\n        HashMap<String,String> coreProps = new HashMap<String,String>();\n        coreProps.put(ZkStateReader.STATE_PROP, stateName);\n        coreProps.put(ZkStateReader.NODE_NAME_PROP, nodeName);\n        coreProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n        coreProps.put(ZkStateReader.COLLECTION_PROP, collection);\n        coreProps.put(ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        CoreState state = new CoreState(coreName, collection, coreProps,\n            numShards);\n        coreStates.remove(coreName);\n        coreStates.put(coreName, state);\n      }\n      final String statePath = Overseer.STATES_NODE + \"/\" + nodeName;\n      zkClient.setData(\n          statePath,\n          ZkStateReader.toJSON(coreStates.values().toArray(\n              new CoreState[coreStates.size()])), true);\n      \n      for (int i = 0; i < 30; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          break;\n        }\n        Thread.sleep(200);\n      }\n    }\n\n","sourceOld":"    public void publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        coreStates.remove(coreName);\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n      } else {\n        HashMap<String,String> coreProps = new HashMap<String,String>();\n        coreProps.put(ZkStateReader.STATE_PROP, stateName);\n        coreProps.put(ZkStateReader.NODE_NAME_PROP, nodeName);\n        coreProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n        coreProps.put(ZkStateReader.COLLECTION_PROP, collection);\n        coreProps.put(ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        CoreState state = new CoreState(coreName, collection, coreProps,\n            numShards);\n        coreStates.remove(coreName);\n        coreStates.put(coreName, state);\n      }\n      final String statePath = Overseer.STATES_NODE + \"/\" + nodeName;\n      zkClient.setData(\n          statePath,\n          ZkStateReader.toJSON(coreStates.values().toArray(\n              new CoreState[coreStates.size()])), true);\n      \n      for (int i = 0; i < 10; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          break;\n        }\n        Thread.sleep(200);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","sourceNew":"    public void publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 30; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          break;\n        }\n        Thread.sleep(200);\n      }\n    }\n\n","sourceOld":"    public void publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        coreStates.remove(coreName);\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n      } else {\n        HashMap<String,String> coreProps = new HashMap<String,String>();\n        coreProps.put(ZkStateReader.STATE_PROP, stateName);\n        coreProps.put(ZkStateReader.NODE_NAME_PROP, nodeName);\n        coreProps.put(ZkStateReader.CORE_NAME_PROP, coreName);\n        coreProps.put(ZkStateReader.COLLECTION_PROP, collection);\n        coreProps.put(ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        CoreState state = new CoreState(coreName, collection, coreProps,\n            numShards);\n        coreStates.remove(coreName);\n        coreStates.put(coreName, state);\n      }\n      final String statePath = Overseer.STATES_NODE + \"/\" + nodeName;\n      zkClient.setData(\n          statePath,\n          ZkStateReader.toJSON(coreStates.values().toArray(\n              new CoreState[coreStates.size()])), true);\n      \n      for (int i = 0; i < 30; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          break;\n        }\n        Thread.sleep(200);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"adc2388a5005de25370273411bc713d0ff722805","date":1345719157,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","sourceNew":"    public String publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 30; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          return shardId;\n        }\n        Thread.sleep(200);\n      }\n      return null;\n    }\n\n","sourceOld":"    public void publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 30; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          break;\n        }\n        Thread.sleep(200);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","sourceNew":"    public String publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 30; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          return shardId;\n        }\n        Thread.sleep(200);\n      }\n      return null;\n    }\n\n","sourceOld":"    public void publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 30; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          break;\n        }\n        Thread.sleep(200);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88d80bd5adfb558dbd463f31bea416fef445bfc5","date":1346050083,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","sourceNew":"    public String publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 30; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          return shardId;\n        }\n        Thread.sleep(400);\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 30; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          return shardId;\n        }\n        Thread.sleep(200);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04b802139b3403be3e3844a654ba05847e7b5802","date":1346325857,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","sourceNew":"    public String publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 30; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          return shardId;\n        }\n        Thread.sleep(400);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","sourceNew":"    public String publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 30; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          return shardId;\n        }\n        Thread.sleep(200);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88f39c3b3a16aebc5a91335341c7ad5b560e2277","date":1350066344,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","sourceNew":"    public String publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","bugFix":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d82832af39f94dbb58a3130fd216ff1d49435589","date":1350147242,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","sourceNew":"    public String publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","sourceNew":"    public String publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","sourceNew":"    public String publishState(String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(\"http://\" + nodeName\n            + \"/solr/\", coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection,\n              ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,int).mjava","sourceNew":null,"sourceOld":"    public String publishState(String coreName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a5093a9e893633cc091cf2f729d7863671c2b715","adc2388a5005de25370273411bc713d0ff722805"],"cd83761c0ebfa7eb75ab39b49f4a2d80811590bb":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"9813dd0748537c429b7c0a9b4723ea1ba496c047":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"adc2388a5005de25370273411bc713d0ff722805":["a5093a9e893633cc091cf2f729d7863671c2b715"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["88f39c3b3a16aebc5a91335341c7ad5b560e2277","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"5a238fc456663f685a9db1ed8d680e348bb45171":["9813dd0748537c429b7c0a9b4723ea1ba496c047","cd83761c0ebfa7eb75ab39b49f4a2d80811590bb"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["6101715a4732c1fe39eae50ce4a23fec6fc270d0","9813dd0748537c429b7c0a9b4723ea1ba496c047"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["04b802139b3403be3e3844a654ba05847e7b5802","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["001b25b42373b22a52f399dbf072f1224632e8e6","04b802139b3403be3e3844a654ba05847e7b5802"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"d82832af39f94dbb58a3130fd216ff1d49435589":["04b802139b3403be3e3844a654ba05847e7b5802","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["cd83761c0ebfa7eb75ab39b49f4a2d80811590bb"],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["04b802139b3403be3e3844a654ba05847e7b5802"],"88d80bd5adfb558dbd463f31bea416fef445bfc5":["adc2388a5005de25370273411bc713d0ff722805"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"04b802139b3403be3e3844a654ba05847e7b5802":["88d80bd5adfb558dbd463f31bea416fef445bfc5"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"cd83761c0ebfa7eb75ab39b49f4a2d80811590bb":["5a238fc456663f685a9db1ed8d680e348bb45171","a5093a9e893633cc091cf2f729d7863671c2b715"],"9813dd0748537c429b7c0a9b4723ea1ba496c047":["cd83761c0ebfa7eb75ab39b49f4a2d80811590bb","5a238fc456663f685a9db1ed8d680e348bb45171","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"adc2388a5005de25370273411bc713d0ff722805":["001b25b42373b22a52f399dbf072f1224632e8e6","88d80bd5adfb558dbd463f31bea416fef445bfc5"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d82832af39f94dbb58a3130fd216ff1d49435589":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"a5093a9e893633cc091cf2f729d7863671c2b715":["001b25b42373b22a52f399dbf072f1224632e8e6","adc2388a5005de25370273411bc713d0ff722805"],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["37a0f60745e53927c4c876cfe5b5a58170f0646c","db4fdbf3d262768eabc027cd8321edca0cd11fa8","849494cf2f3a96af5c8c84995108ddd8456fcd04","d82832af39f94dbb58a3130fd216ff1d49435589"],"88d80bd5adfb558dbd463f31bea416fef445bfc5":["04b802139b3403be3e3844a654ba05847e7b5802"],"04b802139b3403be3e3844a654ba05847e7b5802":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","05a14b2611ead08655a2b2bdc61632eb31316e57","d82832af39f94dbb58a3130fd216ff1d49435589","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","5a238fc456663f685a9db1ed8d680e348bb45171","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","db4fdbf3d262768eabc027cd8321edca0cd11fa8","05a14b2611ead08655a2b2bdc61632eb31316e57","d82832af39f94dbb58a3130fd216ff1d49435589","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}