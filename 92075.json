{"path":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#runTestFloats(Type,double).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#runTestFloats(Type,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(Type,double).mjava","sourceNew":"  private void runTestFloats(Type type, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), type);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == Type.FLOAT_32 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(Type type, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), type);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == Type.FLOAT_32 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#runTestFloats(Type,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#runTestFloats(Type,double).mjava","sourceNew":"  private void runTestFloats(Type type, double delta) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    DocValuesConsumer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), type);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == Type.FLOAT_32 ? random.nextFloat() : random\n          .nextDouble();\n      valueHolder.floatValue = values[i] = v;\n      w.add(i, valueHolder);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(Type type, double delta) throws IOException {\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), type);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == Type.FLOAT_32 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#runTestFloats(Type).mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#runTestFloats(Type,double).mjava","sourceNew":"  private void runTestFloats(Type type) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    DocValuesConsumer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), type);\n    final int NUM_VALUES = 777 + random.nextInt(777);\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == Type.FLOAT_32 ? random.nextFloat() : random\n          .nextDouble();\n      valueHolder.numberValue = values[i] = v;\n      w.add(i, valueHolder);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(Type type, double delta) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    DocValuesConsumer w = Floats.getWriter(dir, \"test\", trackBytes, newIOContext(random), type);\n    final int NUM_VALUES = 777 + random.nextInt(777);;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = type == Type.FLOAT_32 ? random.nextFloat() : random\n          .nextDouble();\n      valueHolder.floatValue = values[i] = v;\n      w.add(i, valueHolder);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n    assertEquals(0, trackBytes.get());\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues, newIOContext(random), type);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(\"\" + i, values[i], s.getFloat(i), 0.0f);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa0f44f887719e97183771e977cfc4bfb485b766"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"fa0f44f887719e97183771e977cfc4bfb485b766":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["fa0f44f887719e97183771e977cfc4bfb485b766"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}