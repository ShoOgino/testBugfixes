{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleSelect(String,String,String,List[Map.Entry[String,Class]],List[Pair[String,String]],String).mjava","commits":[{"id":"36b1ce25b5b465615c00f409ce694664abbe7bd2","date":1481836328,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleSelect(String,String,String,List[Map.Entry[String,Class]],List[Pair[String,String]],String).mjava","pathOld":"/dev/null","sourceNew":"  private TupleStream handleSelect(String zk,\n                                   String collection,\n                                   String query,\n                                   List<Map.Entry<String, Class>> fields,\n                                   List<Pair<String, String>> orders,\n                                   String limit) throws IOException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, query);\n\n    if(orders.size() > 0) {\n      params.add(CommonParams.SORT, getSort(orders));\n    } else {\n      params.add(CommonParams.SORT, \"_version_ desc\");\n    }\n\n    if(fields.size() > 0) {\n      params.add(CommonParams.FL, getFields(fields));\n    }\n\n    if (limit != null) {\n      params.add(CommonParams.ROWS, limit);\n      return new LimitStream(new CloudSolrStream(zk, collection, params), Integer.parseInt(limit));\n    } else {\n      params.add(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zk, collection, params);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f20deebda1cf327549c84cb60464135abd31c71","date":1487004368,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleSelect(String,String,String,List[Map.Entry[String,Class]],List[Pair[String,String]],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleSelect(String,String,String,List[Map.Entry[String,Class]],List[Pair[String,String]],String).mjava","sourceNew":"  private TupleStream handleSelect(String zk,\n                                   String collection,\n                                   String query,\n                                   List<Map.Entry<String, Class>> fields,\n                                   List<Pair<String, String>> orders,\n                                   String limit) throws IOException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, query);\n\n    //Validate the fields\n    for(Map.Entry<String, Class> entry : fields) {\n      String fname = entry.getKey();\n      if(limit == null && \"score\".equals(fname)) {\n        throw new IOException(\"score is not a valid field for unlimited queries.\");\n      }\n\n      if(fname.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n    }\n\n    String fl = getFields(fields);\n\n    if(orders.size() > 0) {\n      params.add(CommonParams.SORT, getSort(orders));\n    } else {\n      if(limit == null) {\n        params.add(CommonParams.SORT, \"_version_ desc\");\n        fl = fl+\",_version_\";\n      } else {\n        params.add(CommonParams.SORT, \"score desc\");\n        if(fl.indexOf(\"score\") == -1) {\n          fl = fl + \",score\";\n        }\n      }\n    }\n\n    params.add(CommonParams.FL, fl);\n\n    if (limit != null) {\n      params.add(CommonParams.ROWS, limit);\n      return new LimitStream(new CloudSolrStream(zk, collection, params), Integer.parseInt(limit));\n    } else {\n      params.add(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zk, collection, params);\n    }\n  }\n\n","sourceOld":"  private TupleStream handleSelect(String zk,\n                                   String collection,\n                                   String query,\n                                   List<Map.Entry<String, Class>> fields,\n                                   List<Pair<String, String>> orders,\n                                   String limit) throws IOException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, query);\n\n    if(orders.size() > 0) {\n      params.add(CommonParams.SORT, getSort(orders));\n    } else {\n      params.add(CommonParams.SORT, \"_version_ desc\");\n    }\n\n    if(fields.size() > 0) {\n      params.add(CommonParams.FL, getFields(fields));\n    }\n\n    if (limit != null) {\n      params.add(CommonParams.ROWS, limit);\n      return new LimitStream(new CloudSolrStream(zk, collection, params), Integer.parseInt(limit));\n    } else {\n      params.add(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zk, collection, params);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":0,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleSelect(String,String,String,List[Map.Entry[String,Class]],List[Pair[String,String]],String).mjava","pathOld":"/dev/null","sourceNew":"  private TupleStream handleSelect(String zk,\n                                   String collection,\n                                   String query,\n                                   List<Map.Entry<String, Class>> fields,\n                                   List<Pair<String, String>> orders,\n                                   String limit) throws IOException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, query);\n\n    //Validate the fields\n    for(Map.Entry<String, Class> entry : fields) {\n      String fname = entry.getKey();\n      if(limit == null && \"score\".equals(fname)) {\n        throw new IOException(\"score is not a valid field for unlimited queries.\");\n      }\n\n      if(fname.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n    }\n\n    String fl = getFields(fields);\n\n    if(orders.size() > 0) {\n      params.add(CommonParams.SORT, getSort(orders));\n    } else {\n      if(limit == null) {\n        params.add(CommonParams.SORT, \"_version_ desc\");\n        fl = fl+\",_version_\";\n      } else {\n        params.add(CommonParams.SORT, \"score desc\");\n        if(fl.indexOf(\"score\") == -1) {\n          fl = fl + \",score\";\n        }\n      }\n    }\n\n    params.add(CommonParams.FL, fl);\n\n    if (limit != null) {\n      params.add(CommonParams.ROWS, limit);\n      return new LimitStream(new CloudSolrStream(zk, collection, params), Integer.parseInt(limit));\n    } else {\n      params.add(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zk, collection, params);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleSelect(String,String,String,List[Map.Entry[String,Class]],List[Pair[String,String]],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleSelect(String,String,String,List[Map.Entry[String,Class]],List[Pair[String,String]],String).mjava","sourceNew":"  private TupleStream handleSelect(String zk,\n                                   String collection,\n                                   String query,\n                                   List<Map.Entry<String, Class>> fields,\n                                   List<Pair<String, String>> orders,\n                                   String limit) throws IOException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, query);\n\n    //Validate the fields\n    for(Map.Entry<String, Class> entry : fields) {\n      String fname = entry.getKey();\n      if(limit == null && \"score\".equals(fname)) {\n        throw new IOException(\"score is not a valid field for unlimited queries.\");\n      }\n\n      if(fname.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n    }\n\n    String fl = getFields(fields);\n\n    if(orders.size() > 0) {\n      params.add(SORT, getSort(orders));\n    } else {\n      if(limit == null) {\n        params.add(SORT, \"_version_ desc\");\n        fl = fl+\",_version_\";\n      } else {\n        params.add(SORT, \"score desc\");\n        if(fl.indexOf(\"score\") == -1) {\n          fl = fl + \",score\";\n        }\n      }\n    }\n\n    params.add(CommonParams.FL, fl);\n\n    if (limit != null) {\n      params.add(CommonParams.ROWS, limit);\n      return new LimitStream(new CloudSolrStream(zk, collection, params), Integer.parseInt(limit));\n    } else {\n      params.add(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zk, collection, params);\n    }\n  }\n\n","sourceOld":"  private TupleStream handleSelect(String zk,\n                                   String collection,\n                                   String query,\n                                   List<Map.Entry<String, Class>> fields,\n                                   List<Pair<String, String>> orders,\n                                   String limit) throws IOException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, query);\n\n    //Validate the fields\n    for(Map.Entry<String, Class> entry : fields) {\n      String fname = entry.getKey();\n      if(limit == null && \"score\".equals(fname)) {\n        throw new IOException(\"score is not a valid field for unlimited queries.\");\n      }\n\n      if(fname.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n    }\n\n    String fl = getFields(fields);\n\n    if(orders.size() > 0) {\n      params.add(CommonParams.SORT, getSort(orders));\n    } else {\n      if(limit == null) {\n        params.add(CommonParams.SORT, \"_version_ desc\");\n        fl = fl+\",_version_\";\n      } else {\n        params.add(CommonParams.SORT, \"score desc\");\n        if(fl.indexOf(\"score\") == -1) {\n          fl = fl + \",score\";\n        }\n      }\n    }\n\n    params.add(CommonParams.FL, fl);\n\n    if (limit != null) {\n      params.add(CommonParams.ROWS, limit);\n      return new LimitStream(new CloudSolrStream(zk, collection, params), Integer.parseInt(limit));\n    } else {\n      params.add(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zk, collection, params);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleSelect(String,String,String,List[Map.Entry[String,Class]],List[Pair[String,String]],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleSelect(String,String,String,List[Map.Entry[String,Class]],List[Pair[String,String]],String).mjava","sourceNew":"  private TupleStream handleSelect(String zk,\n                                   String collection,\n                                   String query,\n                                   List<Map.Entry<String, Class>> fields,\n                                   List<Pair<String, String>> orders,\n                                   String limit) throws IOException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, query);\n\n    //Validate the fields\n    for(Map.Entry<String, Class> entry : fields) {\n      String fname = entry.getKey();\n      if(limit == null && \"score\".equals(fname)) {\n        throw new IOException(\"score is not a valid field for unlimited queries.\");\n      }\n\n      if(fname.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n    }\n\n    String fl = getFields(fields);\n\n    if(orders.size() > 0) {\n      params.add(SORT, getSort(orders));\n    } else {\n      if(limit == null) {\n        params.add(SORT, \"_version_ desc\");\n        fl = fl+\",_version_\";\n      } else {\n        params.add(SORT, \"score desc\");\n        if(fl.indexOf(\"score\") == -1) {\n          fl = fl + \",score\";\n        }\n      }\n    }\n\n    params.add(CommonParams.FL, fl);\n\n    if (limit != null) {\n      params.add(CommonParams.ROWS, limit);\n      return new LimitStream(new CloudSolrStream(zk, collection, params), Integer.parseInt(limit));\n    } else {\n      params.add(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zk, collection, params);\n    }\n  }\n\n","sourceOld":"  private TupleStream handleSelect(String zk,\n                                   String collection,\n                                   String query,\n                                   List<Map.Entry<String, Class>> fields,\n                                   List<Pair<String, String>> orders,\n                                   String limit) throws IOException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, query);\n\n    //Validate the fields\n    for(Map.Entry<String, Class> entry : fields) {\n      String fname = entry.getKey();\n      if(limit == null && \"score\".equals(fname)) {\n        throw new IOException(\"score is not a valid field for unlimited queries.\");\n      }\n\n      if(fname.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n    }\n\n    String fl = getFields(fields);\n\n    if(orders.size() > 0) {\n      params.add(CommonParams.SORT, getSort(orders));\n    } else {\n      if(limit == null) {\n        params.add(CommonParams.SORT, \"_version_ desc\");\n        fl = fl+\",_version_\";\n      } else {\n        params.add(CommonParams.SORT, \"score desc\");\n        if(fl.indexOf(\"score\") == -1) {\n          fl = fl + \",score\";\n        }\n      }\n    }\n\n    params.add(CommonParams.FL, fl);\n\n    if (limit != null) {\n      params.add(CommonParams.ROWS, limit);\n      return new LimitStream(new CloudSolrStream(zk, collection, params), Integer.parseInt(limit));\n    } else {\n      params.add(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zk, collection, params);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleSelect(String,String,String,List[Map.Entry[String,Class]],List[Pair[String,String]],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#handleSelect(String,String,String,List[Map.Entry[String,Class]],List[Pair[String,String]],String).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  private TupleStream handleSelect(String zk,\n                                   String collection,\n                                   String query,\n                                   List<Map.Entry<String, Class>> fields,\n                                   List<Pair<String, String>> orders,\n                                   String limit) throws IOException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, query);\n\n    //Validate the fields\n    for(Map.Entry<String, Class> entry : fields) {\n      String fname = entry.getKey();\n      if(limit == null && \"score\".equals(fname)) {\n        throw new IOException(\"score is not a valid field for unlimited queries.\");\n      }\n\n      if(fname.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n    }\n\n    String fl = getFields(fields);\n\n    if(orders.size() > 0) {\n      params.add(SORT, getSort(orders));\n    } else {\n      if(limit == null) {\n        params.add(SORT, \"_version_ desc\");\n        fl = fl+\",_version_\";\n      } else {\n        params.add(SORT, \"score desc\");\n        if(fl.indexOf(\"score\") == -1) {\n          fl = fl + \",score\";\n        }\n      }\n    }\n\n    params.add(CommonParams.FL, fl);\n\n    if (limit != null) {\n      params.add(CommonParams.ROWS, limit);\n      return new LimitStream(new CloudSolrStream(zk, collection, params), Integer.parseInt(limit));\n    } else {\n      params.add(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zk, collection, params);\n    }\n  }\n\n","sourceOld":"  private TupleStream handleSelect(String zk,\n                                   String collection,\n                                   String query,\n                                   List<Map.Entry<String, Class>> fields,\n                                   List<Pair<String, String>> orders,\n                                   String limit) throws IOException {\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, query);\n\n    //Validate the fields\n    for(Map.Entry<String, Class> entry : fields) {\n      String fname = entry.getKey();\n      if(limit == null && \"score\".equals(fname)) {\n        throw new IOException(\"score is not a valid field for unlimited queries.\");\n      }\n\n      if(fname.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n    }\n\n    String fl = getFields(fields);\n\n    if(orders.size() > 0) {\n      params.add(SORT, getSort(orders));\n    } else {\n      if(limit == null) {\n        params.add(SORT, \"_version_ desc\");\n        fl = fl+\",_version_\";\n      } else {\n        params.add(SORT, \"score desc\");\n        if(fl.indexOf(\"score\") == -1) {\n          fl = fl + \",score\";\n        }\n      }\n    }\n\n    params.add(CommonParams.FL, fl);\n\n    if (limit != null) {\n      params.add(CommonParams.ROWS, limit);\n      return new LimitStream(new CloudSolrStream(zk, collection, params), Integer.parseInt(limit));\n    } else {\n      params.add(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zk, collection, params);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f20deebda1cf327549c84cb60464135abd31c71"],"36b1ce25b5b465615c00f409ce694664abbe7bd2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f20deebda1cf327549c84cb60464135abd31c71":["36b1ce25b5b465615c00f409ce694664abbe7bd2"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"01624b85de12fb02335810bdf325124e59040772":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["01624b85de12fb02335810bdf325124e59040772"]},"commit2Childs":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772"],"36b1ce25b5b465615c00f409ce694664abbe7bd2":["3f20deebda1cf327549c84cb60464135abd31c71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","36b1ce25b5b465615c00f409ce694664abbe7bd2"],"3f20deebda1cf327549c84cb60464135abd31c71":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"01624b85de12fb02335810bdf325124e59040772":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}