{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerRoleCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerRoleCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerRoleCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if (nodeExists = zkClient.exists(ZkStateReader.ROLES, true)) {\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap(1);\n    }\n\n    List nodeList = (List) roles.get(roleName);\n    if (nodeList == null) roles.put(roleName, nodeList = new ArrayList());\n    if (ADDROLE == operation) {\n      log.info(\"Overseer role added to {}\", node);\n      if (!nodeList.contains(node)) nodeList.add(node);\n    } else if (REMOVEROLE == operation) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if (nodeExists) {\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles), true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT, true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(ocmh.myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if (nodeExists = zkClient.exists(ZkStateReader.ROLES, true)) {\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap(1);\n    }\n\n    List nodeList = (List) roles.get(roleName);\n    if (nodeList == null) roles.put(roleName, nodeList = new ArrayList());\n    if (ADDROLE == operation) {\n      log.info(\"Overseer role added to {}\", node);\n      if (!nodeList.contains(node)) nodeList.add(node);\n    } else if (REMOVEROLE == operation) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if (nodeExists) {\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles), true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT, true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(ocmh.myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerRoleCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerRoleCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if (nodeExists = zkClient.exists(ZkStateReader.ROLES, true)) {\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap(1);\n    }\n\n    List nodeList = (List) roles.get(roleName);\n    if (nodeList == null) roles.put(roleName, nodeList = new ArrayList());\n    if (ADDROLE == operation) {\n      log.info(\"Overseer role added to {}\", node);\n      if (!nodeList.contains(node)) nodeList.add(node);\n    } else if (REMOVEROLE == operation) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if (nodeExists) {\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles), true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT, true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(ocmh.myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if (nodeExists = zkClient.exists(ZkStateReader.ROLES, true)) {\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap(1);\n    }\n\n    List nodeList = (List) roles.get(roleName);\n    if (nodeList == null) roles.put(roleName, nodeList = new ArrayList());\n    if (ADDROLE == operation) {\n      log.info(\"Overseer role added to {}\", node);\n      if (!nodeList.contains(node)) nodeList.add(node);\n    } else if (REMOVEROLE == operation) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if (nodeExists) {\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles), true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT, true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(ocmh.myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerRoleCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerRoleCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if (nodeExists = zkClient.exists(ZkStateReader.ROLES, true)) {\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap<>(1);\n    }\n\n    List nodeList = (List) roles.get(roleName);\n    if (nodeList == null) roles.put(roleName, nodeList = new ArrayList<>());\n    if (ADDROLE == operation) {\n      log.info(\"Overseer role added to {}\", node);\n      if (!nodeList.contains(node)) nodeList.add(node);\n    } else if (REMOVEROLE == operation) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if (nodeExists) {\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles), true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT, true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(ocmh.myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if (nodeExists = zkClient.exists(ZkStateReader.ROLES, true)) {\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap(1);\n    }\n\n    List nodeList = (List) roles.get(roleName);\n    if (nodeList == null) roles.put(roleName, nodeList = new ArrayList());\n    if (ADDROLE == operation) {\n      log.info(\"Overseer role added to {}\", node);\n      if (!nodeList.contains(node)) nodeList.add(node);\n    } else if (REMOVEROLE == operation) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if (nodeExists) {\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles), true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT, true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(ocmh.myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerRoleCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerRoleCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void call(ClusterState state, CloudConfig cloudConfig, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if (nodeExists = zkClient.exists(ZkStateReader.ROLES, true)) {\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap<>(1);\n    }\n\n    List nodeList = (List) roles.get(roleName);\n    if (nodeList == null) roles.put(roleName, nodeList = new ArrayList<>());\n    if (ADDROLE == operation) {\n      log.info(\"Overseer role added to {}\", node);\n      if (!nodeList.contains(node)) nodeList.add(node);\n    } else if (REMOVEROLE == operation) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if (nodeExists) {\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles), true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT, true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(ocmh.myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if (nodeExists = zkClient.exists(ZkStateReader.ROLES, true)) {\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap<>(1);\n    }\n\n    List nodeList = (List) roles.get(roleName);\n    if (nodeList == null) roles.put(roleName, nodeList = new ArrayList<>());\n    if (ADDROLE == operation) {\n      log.info(\"Overseer role added to {}\", node);\n      if (!nodeList.contains(node)) nodeList.add(node);\n    } else if (REMOVEROLE == operation) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if (nodeExists) {\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles), true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT, true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(ocmh.myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerRoleCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerRoleCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if (nodeExists = zkClient.exists(ZkStateReader.ROLES, true)) {\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap<>(1);\n    }\n\n    List nodeList = (List) roles.get(roleName);\n    if (nodeList == null) roles.put(roleName, nodeList = new ArrayList<>());\n    if (ADDROLE == operation) {\n      log.info(\"Overseer role added to {}\", node);\n      if (!nodeList.contains(node)) nodeList.add(node);\n    } else if (REMOVEROLE == operation) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if (nodeExists) {\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles), true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT, true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(ocmh.myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void call(ClusterState state, CloudConfig cloudConfig, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    Map roles = null;\n    String node = message.getStr(\"node\");\n\n    String roleName = message.getStr(\"role\");\n    boolean nodeExists = false;\n    if (nodeExists = zkClient.exists(ZkStateReader.ROLES, true)) {\n      roles = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true));\n    } else {\n      roles = new LinkedHashMap<>(1);\n    }\n\n    List nodeList = (List) roles.get(roleName);\n    if (nodeList == null) roles.put(roleName, nodeList = new ArrayList<>());\n    if (ADDROLE == operation) {\n      log.info(\"Overseer role added to {}\", node);\n      if (!nodeList.contains(node)) nodeList.add(node);\n    } else if (REMOVEROLE == operation) {\n      log.info(\"Overseer role removed from {}\", node);\n      nodeList.remove(node);\n    }\n\n    if (nodeExists) {\n      zkClient.setData(ZkStateReader.ROLES, Utils.toJSON(roles), true);\n    } else {\n      zkClient.create(ZkStateReader.ROLES, Utils.toJSON(roles), CreateMode.PERSISTENT, true);\n    }\n    //if there are too many nodes this command may time out. And most likely dedicated\n    // overseers are created when there are too many nodes  . So , do this operation in a separate thread\n    new Thread(() -> {\n      try {\n        overseerPrioritizer.prioritizeOverseerNodes(ocmh.myId);\n      } catch (Exception e) {\n        log.error(\"Error in prioritizing Overseer\", e);\n      }\n\n    }).start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"c526352db87264a72a7a9ad68c1b769b81e54305":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b94236357aaa22b76c10629851fe4e376e0cea82":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["c526352db87264a72a7a9ad68c1b769b81e54305"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}