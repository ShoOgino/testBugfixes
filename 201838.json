{"path":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","pathOld":"/dev/null","sourceNew":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      //replicatorsPool = Executors.newFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(new Runnable() {\n\n        @Override\n        public void run() {\n          int nCandidates = statesQueue.size();\n          for (int i = 0; i < nCandidates; i++) {\n            // a thread that pool one state from the queue, execute the replication task, and push back\n            // the state in the queue when the task is completed\n            replicatorsPool.execute(new Runnable() {\n\n              @Override\n              public void run() {\n                CdcrReplicatorState state = statesQueue.poll();\n                try {\n                  new CdcrReplicator(state, batchSize).run();\n                } finally {\n                  statesQueue.offer(state);\n                }\n              }\n\n            });\n\n          }\n        }\n\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dcd1fe49b76116e7d358993339fe8adbb030638","date":1437151093,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","sourceNew":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      //replicatorsPool = Executors.newFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(new Runnable() {\n\n        @Override\n        public void run() {\n          int nCandidates = statesQueue.size();\n          for (int i = 0; i < nCandidates; i++) {\n            // a thread that pool one state from the queue, execute the replication task, and push back\n            // the state in the queue when the task is completed\n            replicatorsPool.execute(new Runnable() {\n\n              @Override\n              public void run() {\n                CdcrReplicatorState state = statesQueue.poll();\n                assert state != null; // Should never happen\n                try {\n                  new CdcrReplicator(state, batchSize).run();\n                } finally {\n                  statesQueue.offer(state);\n                }\n              }\n\n            });\n\n          }\n        }\n\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","sourceOld":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      //replicatorsPool = Executors.newFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(new Runnable() {\n\n        @Override\n        public void run() {\n          int nCandidates = statesQueue.size();\n          for (int i = 0; i < nCandidates; i++) {\n            // a thread that pool one state from the queue, execute the replication task, and push back\n            // the state in the queue when the task is completed\n            replicatorsPool.execute(new Runnable() {\n\n              @Override\n              public void run() {\n                CdcrReplicatorState state = statesQueue.poll();\n                try {\n                  new CdcrReplicator(state, batchSize).run();\n                } finally {\n                  statesQueue.offer(state);\n                }\n              }\n\n            });\n\n          }\n        }\n\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61655e38c2bbf0c3157cece14985b14dde2899af","date":1445352399,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","sourceNew":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(new Runnable() {\n\n        @Override\n        public void run() {\n          int nCandidates = statesQueue.size();\n          for (int i = 0; i < nCandidates; i++) {\n            // a thread that poll one state from the queue, execute the replication task, and push back\n            // the state in the queue when the task is completed\n            replicatorsPool.execute(new Runnable() {\n\n              @Override\n              public void run() {\n                CdcrReplicatorState state = statesQueue.poll();\n                assert state != null; // Should never happen\n                try {\n                  new CdcrReplicator(state, batchSize).run();\n                } finally {\n                  statesQueue.offer(state);\n                }\n              }\n\n            });\n\n          }\n        }\n\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","sourceOld":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      //replicatorsPool = Executors.newFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(new Runnable() {\n\n        @Override\n        public void run() {\n          int nCandidates = statesQueue.size();\n          for (int i = 0; i < nCandidates; i++) {\n            // a thread that pool one state from the queue, execute the replication task, and push back\n            // the state in the queue when the task is completed\n            replicatorsPool.execute(new Runnable() {\n\n              @Override\n              public void run() {\n                CdcrReplicatorState state = statesQueue.poll();\n                assert state != null; // Should never happen\n                try {\n                  new CdcrReplicator(state, batchSize).run();\n                } finally {\n                  statesQueue.offer(state);\n                }\n              }\n\n            });\n\n          }\n        }\n\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","sourceNew":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(() -> {\n        int nCandidates = statesQueue.size();\n        for (int i = 0; i < nCandidates; i++) {\n          // a thread that poll one state from the queue, execute the replication task, and push back\n          // the state in the queue when the task is completed\n          replicatorsPool.execute(new Runnable() {\n\n            @Override\n            public void run() {\n              CdcrReplicatorState state = statesQueue.poll();\n              assert state != null; // Should never happen\n              try {\n                new CdcrReplicator(state, batchSize).run();\n              } finally {\n                statesQueue.offer(state);\n              }\n            }\n\n          });\n\n        }\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","sourceOld":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(new Runnable() {\n\n        @Override\n        public void run() {\n          int nCandidates = statesQueue.size();\n          for (int i = 0; i < nCandidates; i++) {\n            // a thread that poll one state from the queue, execute the replication task, and push back\n            // the state in the queue when the task is completed\n            replicatorsPool.execute(new Runnable() {\n\n              @Override\n              public void run() {\n                CdcrReplicatorState state = statesQueue.poll();\n                assert state != null; // Should never happen\n                try {\n                  new CdcrReplicator(state, batchSize).run();\n                } finally {\n                  statesQueue.offer(state);\n                }\n              }\n\n            });\n\n          }\n        }\n\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043df2e9a841864922c32756a44c939ed768cb89","date":1459876536,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","sourceNew":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(() -> {\n        int nCandidates = statesQueue.size();\n        for (int i = 0; i < nCandidates; i++) {\n          // a thread that poll one state from the queue, execute the replication task, and push back\n          // the state in the queue when the task is completed\n          replicatorsPool.execute(() -> {\n            CdcrReplicatorState state = statesQueue.poll();\n            assert state != null; // Should never happen\n            try {\n              new CdcrReplicator(state, batchSize).run();\n            } finally {\n              statesQueue.offer(state);\n            }\n          });\n\n        }\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","sourceOld":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(() -> {\n        int nCandidates = statesQueue.size();\n        for (int i = 0; i < nCandidates; i++) {\n          // a thread that poll one state from the queue, execute the replication task, and push back\n          // the state in the queue when the task is completed\n          replicatorsPool.execute(new Runnable() {\n\n            @Override\n            public void run() {\n              CdcrReplicatorState state = statesQueue.poll();\n              assert state != null; // Should never happen\n              try {\n                new CdcrReplicator(state, batchSize).run();\n              } finally {\n                statesQueue.offer(state);\n              }\n            }\n\n          });\n\n        }\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","sourceNew":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(() -> {\n        int nCandidates = statesQueue.size();\n        for (int i = 0; i < nCandidates; i++) {\n          // a thread that poll one state from the queue, execute the replication task, and push back\n          // the state in the queue when the task is completed\n          replicatorsPool.execute(() -> {\n            CdcrReplicatorState state = statesQueue.poll();\n            assert state != null; // Should never happen\n            try {\n              new CdcrReplicator(state, batchSize).run();\n            } finally {\n              statesQueue.offer(state);\n            }\n          });\n\n        }\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","sourceOld":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(() -> {\n        int nCandidates = statesQueue.size();\n        for (int i = 0; i < nCandidates; i++) {\n          // a thread that poll one state from the queue, execute the replication task, and push back\n          // the state in the queue when the task is completed\n          replicatorsPool.execute(new Runnable() {\n\n            @Override\n            public void run() {\n              CdcrReplicatorState state = statesQueue.poll();\n              assert state != null; // Should never happen\n              try {\n                new CdcrReplicator(state, batchSize).run();\n              } finally {\n                statesQueue.offer(state);\n              }\n            }\n\n          });\n\n        }\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06e38ae84477e7a7eacea808dc3de9950fce5ccf","date":1470634560,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","sourceNew":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(() -> {\n        int nCandidates = statesQueue.size();\n        for (int i = 0; i < nCandidates; i++) {\n          // a thread that poll one state from the queue, execute the replication task, and push back\n          // the state in the queue when the task is completed\n          replicatorsPool.execute(() -> {\n            CdcrReplicatorState state = statesQueue.poll();\n            assert state != null; // Should never happen\n            try {\n              if (!state.isBootstrapInProgress()) {\n                new CdcrReplicator(state, batchSize).run();\n              } else  {\n                log.debug(\"Replicator state is bootstrapping, skipping replication for target collection {}\", state.getTargetCollection());\n              }\n            } finally {\n              statesQueue.offer(state);\n            }\n          });\n\n        }\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","sourceOld":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(() -> {\n        int nCandidates = statesQueue.size();\n        for (int i = 0; i < nCandidates; i++) {\n          // a thread that poll one state from the queue, execute the replication task, and push back\n          // the state in the queue when the task is completed\n          replicatorsPool.execute(() -> {\n            CdcrReplicatorState state = statesQueue.poll();\n            assert state != null; // Should never happen\n            try {\n              new CdcrReplicator(state, batchSize).run();\n            } finally {\n              statesQueue.offer(state);\n            }\n          });\n\n        }\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","sourceNew":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(() -> {\n        int nCandidates = statesQueue.size();\n        for (int i = 0; i < nCandidates; i++) {\n          // a thread that poll one state from the queue, execute the replication task, and push back\n          // the state in the queue when the task is completed\n          replicatorsPool.execute(() -> {\n            CdcrReplicatorState state = statesQueue.poll();\n            assert state != null; // Should never happen\n            try {\n              if (!state.isBootstrapInProgress()) {\n                new CdcrReplicator(state, batchSize).run();\n              } else  {\n                log.debug(\"Replicator state is bootstrapping, skipping replication for target collection {}\", state.getTargetCollection());\n              }\n            } finally {\n              statesQueue.offer(state);\n            }\n          });\n\n        }\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","sourceOld":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(() -> {\n        int nCandidates = statesQueue.size();\n        for (int i = 0; i < nCandidates; i++) {\n          // a thread that poll one state from the queue, execute the replication task, and push back\n          // the state in the queue when the task is completed\n          replicatorsPool.execute(() -> {\n            CdcrReplicatorState state = statesQueue.poll();\n            assert state != null; // Should never happen\n            try {\n              new CdcrReplicator(state, batchSize).run();\n            } finally {\n              statesQueue.offer(state);\n            }\n          });\n\n        }\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","sourceNew":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(() -> {\n        int nCandidates = statesQueue.size();\n        for (int i = 0; i < nCandidates; i++) {\n          // a thread that poll one state from the queue, execute the replication task, and push back\n          // the state in the queue when the task is completed\n          replicatorsPool.execute(() -> {\n            CdcrReplicatorState state = statesQueue.poll();\n            assert state != null; // Should never happen\n            try {\n              if (!state.isBootstrapInProgress()) {\n                new CdcrReplicator(state, batchSize).run();\n              } else  {\n                log.debug(\"Replicator state is bootstrapping, skipping replication for target collection {}\", state.getTargetCollection());\n              }\n            } finally {\n              statesQueue.offer(state);\n            }\n          });\n\n        }\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","sourceOld":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(() -> {\n        int nCandidates = statesQueue.size();\n        for (int i = 0; i < nCandidates; i++) {\n          // a thread that poll one state from the queue, execute the replication task, and push back\n          // the state in the queue when the task is completed\n          replicatorsPool.execute(() -> {\n            CdcrReplicatorState state = statesQueue.poll();\n            assert state != null; // Should never happen\n            try {\n              new CdcrReplicator(state, batchSize).run();\n            } finally {\n              statesQueue.offer(state);\n            }\n          });\n\n        }\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","sourceNew":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new SolrNamedThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrNamedThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(() -> {\n        int nCandidates = statesQueue.size();\n        for (int i = 0; i < nCandidates; i++) {\n          // a thread that poll one state from the queue, execute the replication task, and push back\n          // the state in the queue when the task is completed\n          replicatorsPool.execute(() -> {\n            CdcrReplicatorState state = statesQueue.poll();\n            assert state != null; // Should never happen\n            try {\n              if (!state.isBootstrapInProgress()) {\n                new CdcrReplicator(state, batchSize).run();\n              } else  {\n                log.debug(\"Replicator state is bootstrapping, skipping replication for target collection {}\", state.getTargetCollection());\n              }\n            } finally {\n              statesQueue.offer(state);\n            }\n          });\n\n        }\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","sourceOld":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new DefaultSolrThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(() -> {\n        int nCandidates = statesQueue.size();\n        for (int i = 0; i < nCandidates; i++) {\n          // a thread that poll one state from the queue, execute the replication task, and push back\n          // the state in the queue when the task is completed\n          replicatorsPool.execute(() -> {\n            CdcrReplicatorState state = statesQueue.poll();\n            assert state != null; // Should never happen\n            try {\n              if (!state.isBootstrapInProgress()) {\n                new CdcrReplicator(state, batchSize).run();\n              } else  {\n                log.debug(\"Replicator state is bootstrapping, skipping replication for target collection {}\", state.getTargetCollection());\n              }\n            } finally {\n              statesQueue.offer(state);\n            }\n          });\n\n        }\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","sourceNew":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new SolrNamedThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrNamedThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(() -> {\n        int nCandidates = statesQueue.size();\n        for (int i = 0; i < nCandidates; i++) {\n          // a thread that poll one state from the queue, execute the replication task, and push back\n          // the state in the queue when the task is completed\n          replicatorsPool.execute(() -> {\n            CdcrReplicatorState state = statesQueue.poll();\n            assert state != null; // Should never happen\n            try {\n              if (!state.isBootstrapInProgress()) {\n                new CdcrReplicator(state, batchSize).run();\n              } else  {\n                if (log.isDebugEnabled()) {\n                  log.debug(\"Replicator state is bootstrapping, skipping replication for target collection {}\", state.getTargetCollection());\n                }\n              }\n            } finally {\n              statesQueue.offer(state);\n            }\n          });\n\n        }\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","sourceOld":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new SolrNamedThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrNamedThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(() -> {\n        int nCandidates = statesQueue.size();\n        for (int i = 0; i < nCandidates; i++) {\n          // a thread that poll one state from the queue, execute the replication task, and push back\n          // the state in the queue when the task is completed\n          replicatorsPool.execute(() -> {\n            CdcrReplicatorState state = statesQueue.poll();\n            assert state != null; // Should never happen\n            try {\n              if (!state.isBootstrapInProgress()) {\n                new CdcrReplicator(state, batchSize).run();\n              } else  {\n                log.debug(\"Replicator state is bootstrapping, skipping replication for target collection {}\", state.getTargetCollection());\n              }\n            } finally {\n              statesQueue.offer(state);\n            }\n          });\n\n        }\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorScheduler#start().mjava","sourceNew":null,"sourceOld":"  void start() {\n    if (!isStarted) {\n      scheduler = Executors.newSingleThreadScheduledExecutor(new SolrNamedThreadFactory(\"cdcr-scheduler\"));\n      replicatorsPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrNamedThreadFactory(\"cdcr-replicator\"));\n\n      // the scheduler thread is executed every second and submits one replication task\n      // per available state in the queue\n      scheduler.scheduleWithFixedDelay(() -> {\n        int nCandidates = statesQueue.size();\n        for (int i = 0; i < nCandidates; i++) {\n          // a thread that poll one state from the queue, execute the replication task, and push back\n          // the state in the queue when the task is completed\n          replicatorsPool.execute(() -> {\n            CdcrReplicatorState state = statesQueue.poll();\n            assert state != null; // Should never happen\n            try {\n              if (!state.isBootstrapInProgress()) {\n                new CdcrReplicator(state, batchSize).run();\n              } else  {\n                if (log.isDebugEnabled()) {\n                  log.debug(\"Replicator state is bootstrapping, skipping replication for target collection {}\", state.getTargetCollection());\n                }\n              }\n            } finally {\n              statesQueue.offer(state);\n            }\n          });\n\n        }\n      }, 0, timeSchedule, TimeUnit.MILLISECONDS);\n      isStarted = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61655e38c2bbf0c3157cece14985b14dde2899af":["4dcd1fe49b76116e7d358993339fe8adbb030638"],"043df2e9a841864922c32756a44c939ed768cb89":["3a0c04b71951333291abc7f317109a6a5957bd28"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["b6284684320a9808c41a5e43de958b2da22f89bd"],"3a0c04b71951333291abc7f317109a6a5957bd28":["61655e38c2bbf0c3157cece14985b14dde2899af"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b6284684320a9808c41a5e43de958b2da22f89bd","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6284684320a9808c41a5e43de958b2da22f89bd":["3a0c04b71951333291abc7f317109a6a5957bd28","043df2e9a841864922c32756a44c939ed768cb89"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"4dcd1fe49b76116e7d358993339fe8adbb030638":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["b6284684320a9808c41a5e43de958b2da22f89bd","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"61655e38c2bbf0c3157cece14985b14dde2899af":["3a0c04b71951333291abc7f317109a6a5957bd28"],"043df2e9a841864922c32756a44c939ed768cb89":["b6284684320a9808c41a5e43de958b2da22f89bd"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fb03700c9690d16b15fb4f56f6ec36b128fd894e","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"3a0c04b71951333291abc7f317109a6a5957bd28":["043df2e9a841864922c32756a44c939ed768cb89","b6284684320a9808c41a5e43de958b2da22f89bd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"86290366cefc1b9d4eced13b430858c4a4c0421d":["4dcd1fe49b76116e7d358993339fe8adbb030638"],"b6284684320a9808c41a5e43de958b2da22f89bd":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"4dcd1fe49b76116e7d358993339fe8adbb030638":["61655e38c2bbf0c3157cece14985b14dde2899af"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}