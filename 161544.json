{"path":"src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int).mjava","commits":[{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/store/InputStream#readBytes(byte[],int,int).mjava","sourceNew":"  public void readBytes(byte[] b, int offset, int len)\n       throws IOException {\n    if (len < BUFFER_SIZE) {\n      for (int i = 0; i < len; i++)\t\t  // read byte-by-byte\n\tb[i + offset] = (byte)readByte();\n    } else {\t\t\t\t\t  // read all-at-once\n      long start = getFilePointer();\n      seekInternal(start);\n      readInternal(b, offset, len);\n\n      bufferStart = start + len;\t\t  // adjust stream variables\n      bufferPosition = 0;\n      bufferLength = 0;\t\t\t\t  // trigger refill() on read\n    }\n  }\n\n","sourceOld":"  /** Reads a specified number of bytes into an array at the specified offset.\n   * @param b the array to read bytes into\n   * @param offset the offset in the array to start storing bytes\n   * @param len the number of bytes to read\n   * @see OutputStream#writeBytes(byte[],int)\n   */\n  public final void readBytes(byte[] b, int offset, int len)\n       throws IOException {\n    if (len < BUFFER_SIZE) {\n      for (int i = 0; i < len; i++)\t\t  // read byte-by-byte\n\tb[i + offset] = (byte)readByte();\n    } else {\t\t\t\t\t  // read all-at-once\n      long start = getFilePointer();\n      seekInternal(start);\n      readInternal(b, offset, len);\n\n      bufferStart = start + len;\t\t  // adjust stream variables\n      bufferPosition = 0;\n      bufferLength = 0;\t\t\t\t  // trigger refill() on read\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"657e4f977dd38538d861a46b311df69953172a92","date":1161901544,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int).mjava","sourceNew":"  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    if(len <= (bufferLength-bufferPosition)){\n      // the buffer contains enough data to satistfy this request\n      if(len>0) // to allow b to be null if len is 0...\n    \t  System.arraycopy(buffer, bufferPosition, b, offset, len);\n      bufferPosition+=len;\n    } else {\n      // the buffer does not have enough data. First serve all we've got.\n      int available = bufferLength - bufferPosition;\n      if(available > 0){\n        System.arraycopy(buffer, bufferPosition, b, offset, available);\n        offset += available;\n        len -= available;\n        bufferPosition += available;\n      }\n      // and now, read the remaining 'len' bytes:\n      if(len<BUFFER_SIZE){\n        // If the amount left to read is small enough, do it in the usual\n        // buffered way: fill the buffer and copy from it:\n        refill();\n        if(bufferLength<len){\n          // Throw an exception when refill() could not read len bytes:\n          System.arraycopy(buffer, 0, b, offset, bufferLength);\n          throw new IOException(\"read past EOF\");\n        } else {\n          System.arraycopy(buffer, 0, b, offset, len);\n          bufferPosition=len;\n        }\n      } else {\n        // The amount left to read is larger than the buffer - there's no\n        // performance reason not to read it all at once. Note that unlike\n        // the previous code of this function, there is no need to do a seek\n        // here, because there's no need to reread what we had in the buffer.\n    \tlong after = bufferStart+bufferPosition+len;\n    \tif(after > length())\n            throw new IOException(\"read past EOF\");  \t\t\n        readInternal(b, offset, len);\n    \tbufferStart = after; \n        bufferPosition = 0;\n        bufferLength = 0;                    // trigger refill() on read\n      }\n    }\n  }\n\n","sourceOld":"  public void readBytes(byte[] b, int offset, int len)\n       throws IOException {\n    if (len < BUFFER_SIZE) {\n      for (int i = 0; i < len; i++)\t\t  // read byte-by-byte\n\tb[i + offset] = (byte)readByte();\n    } else {\t\t\t\t\t  // read all-at-once\n      long start = getFilePointer();\n      seekInternal(start);\n      readInternal(b, offset, len);\n\n      bufferStart = start + len;\t\t  // adjust stream variables\n      bufferPosition = 0;\n      bufferLength = 0;\t\t\t\t  // trigger refill() on read\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33c417a77f1efa4f2f313c7d535504a130ea1bd9","date":1166322289,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int).mjava","sourceNew":"  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    if(len <= (bufferLength-bufferPosition)){\n      // the buffer contains enough data to satistfy this request\n      if(len>0) // to allow b to be null if len is 0...\n        System.arraycopy(buffer, bufferPosition, b, offset, len);\n      bufferPosition+=len;\n    } else {\n      // the buffer does not have enough data. First serve all we've got.\n      int available = bufferLength - bufferPosition;\n      if(available > 0){\n        System.arraycopy(buffer, bufferPosition, b, offset, available);\n        offset += available;\n        len -= available;\n        bufferPosition += available;\n      }\n      // and now, read the remaining 'len' bytes:\n      if(len<BUFFER_SIZE){\n        // If the amount left to read is small enough, do it in the usual\n        // buffered way: fill the buffer and copy from it:\n        refill();\n        if(bufferLength<len){\n          // Throw an exception when refill() could not read len bytes:\n          System.arraycopy(buffer, 0, b, offset, bufferLength);\n          throw new IOException(\"read past EOF\");\n        } else {\n          System.arraycopy(buffer, 0, b, offset, len);\n          bufferPosition=len;\n        }\n      } else {\n        // The amount left to read is larger than the buffer - there's no\n        // performance reason not to read it all at once. Note that unlike\n        // the previous code of this function, there is no need to do a seek\n        // here, because there's no need to reread what we had in the buffer.\n        long after = bufferStart+bufferPosition+len;\n        if(after > length())\n          throw new IOException(\"read past EOF\");\n        readInternal(b, offset, len);\n        bufferStart = after;\n        bufferPosition = 0;\n        bufferLength = 0;                    // trigger refill() on read\n      }\n    }\n  }\n\n","sourceOld":"  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    if(len <= (bufferLength-bufferPosition)){\n      // the buffer contains enough data to satistfy this request\n      if(len>0) // to allow b to be null if len is 0...\n    \t  System.arraycopy(buffer, bufferPosition, b, offset, len);\n      bufferPosition+=len;\n    } else {\n      // the buffer does not have enough data. First serve all we've got.\n      int available = bufferLength - bufferPosition;\n      if(available > 0){\n        System.arraycopy(buffer, bufferPosition, b, offset, available);\n        offset += available;\n        len -= available;\n        bufferPosition += available;\n      }\n      // and now, read the remaining 'len' bytes:\n      if(len<BUFFER_SIZE){\n        // If the amount left to read is small enough, do it in the usual\n        // buffered way: fill the buffer and copy from it:\n        refill();\n        if(bufferLength<len){\n          // Throw an exception when refill() could not read len bytes:\n          System.arraycopy(buffer, 0, b, offset, bufferLength);\n          throw new IOException(\"read past EOF\");\n        } else {\n          System.arraycopy(buffer, 0, b, offset, len);\n          bufferPosition=len;\n        }\n      } else {\n        // The amount left to read is larger than the buffer - there's no\n        // performance reason not to read it all at once. Note that unlike\n        // the previous code of this function, there is no need to do a seek\n        // here, because there's no need to reread what we had in the buffer.\n    \tlong after = bufferStart+bufferPosition+len;\n    \tif(after > length())\n            throw new IOException(\"read past EOF\");  \t\t\n        readInternal(b, offset, len);\n    \tbufferStart = after; \n        bufferPosition = 0;\n        bufferLength = 0;                    // trigger refill() on read\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6dba7919de4ff4ed6ff17f90619203772722f08","date":1180451647,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int).mjava","sourceNew":"  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    if(len <= (bufferLength-bufferPosition)){\n      // the buffer contains enough data to satistfy this request\n      if(len>0) // to allow b to be null if len is 0...\n        System.arraycopy(buffer, bufferPosition, b, offset, len);\n      bufferPosition+=len;\n    } else {\n      // the buffer does not have enough data. First serve all we've got.\n      int available = bufferLength - bufferPosition;\n      if(available > 0){\n        System.arraycopy(buffer, bufferPosition, b, offset, available);\n        offset += available;\n        len -= available;\n        bufferPosition += available;\n      }\n      // and now, read the remaining 'len' bytes:\n      if(len<bufferSize){\n        // If the amount left to read is small enough, do it in the usual\n        // buffered way: fill the buffer and copy from it:\n        refill();\n        if(bufferLength<len){\n          // Throw an exception when refill() could not read len bytes:\n          System.arraycopy(buffer, 0, b, offset, bufferLength);\n          throw new IOException(\"read past EOF\");\n        } else {\n          System.arraycopy(buffer, 0, b, offset, len);\n          bufferPosition=len;\n        }\n      } else {\n        // The amount left to read is larger than the buffer - there's no\n        // performance reason not to read it all at once. Note that unlike\n        // the previous code of this function, there is no need to do a seek\n        // here, because there's no need to reread what we had in the buffer.\n        long after = bufferStart+bufferPosition+len;\n        if(after > length())\n          throw new IOException(\"read past EOF\");\n        readInternal(b, offset, len);\n        bufferStart = after;\n        bufferPosition = 0;\n        bufferLength = 0;                    // trigger refill() on read\n      }\n    }\n  }\n\n","sourceOld":"  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    if(len <= (bufferLength-bufferPosition)){\n      // the buffer contains enough data to satistfy this request\n      if(len>0) // to allow b to be null if len is 0...\n        System.arraycopy(buffer, bufferPosition, b, offset, len);\n      bufferPosition+=len;\n    } else {\n      // the buffer does not have enough data. First serve all we've got.\n      int available = bufferLength - bufferPosition;\n      if(available > 0){\n        System.arraycopy(buffer, bufferPosition, b, offset, available);\n        offset += available;\n        len -= available;\n        bufferPosition += available;\n      }\n      // and now, read the remaining 'len' bytes:\n      if(len<BUFFER_SIZE){\n        // If the amount left to read is small enough, do it in the usual\n        // buffered way: fill the buffer and copy from it:\n        refill();\n        if(bufferLength<len){\n          // Throw an exception when refill() could not read len bytes:\n          System.arraycopy(buffer, 0, b, offset, bufferLength);\n          throw new IOException(\"read past EOF\");\n        } else {\n          System.arraycopy(buffer, 0, b, offset, len);\n          bufferPosition=len;\n        }\n      } else {\n        // The amount left to read is larger than the buffer - there's no\n        // performance reason not to read it all at once. Note that unlike\n        // the previous code of this function, there is no need to do a seek\n        // here, because there's no need to reread what we had in the buffer.\n        long after = bufferStart+bufferPosition+len;\n        if(after > length())\n          throw new IOException(\"read past EOF\");\n        readInternal(b, offset, len);\n        bufferStart = after;\n        bufferPosition = 0;\n        bufferLength = 0;                    // trigger refill() on read\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"522694005b60ff76bab9584c0afb66ae309ffada","date":1183568422,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int).mjava","sourceNew":"  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    readBytes(b, offset, len, true);\n  }\n\n","sourceOld":"  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    if(len <= (bufferLength-bufferPosition)){\n      // the buffer contains enough data to satistfy this request\n      if(len>0) // to allow b to be null if len is 0...\n        System.arraycopy(buffer, bufferPosition, b, offset, len);\n      bufferPosition+=len;\n    } else {\n      // the buffer does not have enough data. First serve all we've got.\n      int available = bufferLength - bufferPosition;\n      if(available > 0){\n        System.arraycopy(buffer, bufferPosition, b, offset, available);\n        offset += available;\n        len -= available;\n        bufferPosition += available;\n      }\n      // and now, read the remaining 'len' bytes:\n      if(len<bufferSize){\n        // If the amount left to read is small enough, do it in the usual\n        // buffered way: fill the buffer and copy from it:\n        refill();\n        if(bufferLength<len){\n          // Throw an exception when refill() could not read len bytes:\n          System.arraycopy(buffer, 0, b, offset, bufferLength);\n          throw new IOException(\"read past EOF\");\n        } else {\n          System.arraycopy(buffer, 0, b, offset, len);\n          bufferPosition=len;\n        }\n      } else {\n        // The amount left to read is larger than the buffer - there's no\n        // performance reason not to read it all at once. Note that unlike\n        // the previous code of this function, there is no need to do a seek\n        // here, because there's no need to reread what we had in the buffer.\n        long after = bufferStart+bufferPosition+len;\n        if(after > length())\n          throw new IOException(\"read past EOF\");\n        readInternal(b, offset, len);\n        bufferStart = after;\n        bufferPosition = 0;\n        bufferLength = 0;                    // trigger refill() on read\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    readBytes(b, offset, len, true);\n  }\n\n","sourceOld":"  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    readBytes(b, offset, len, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    readBytes(b, offset, len, true);\n  }\n\n","sourceOld":"  @Override\n  public void readBytes(byte[] b, int offset, int len) throws IOException {\n    readBytes(b, offset, len, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"657e4f977dd38538d861a46b311df69953172a92":["e971ba25509e21a130fef61f0687be0446ca27a0"],"e971ba25509e21a130fef61f0687be0446ca27a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["522694005b60ff76bab9584c0afb66ae309ffada"],"522694005b60ff76bab9584c0afb66ae309ffada":["f6dba7919de4ff4ed6ff17f90619203772722f08"],"f6dba7919de4ff4ed6ff17f90619203772722f08":["33c417a77f1efa4f2f313c7d535504a130ea1bd9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33c417a77f1efa4f2f313c7d535504a130ea1bd9":["657e4f977dd38538d861a46b311df69953172a92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"657e4f977dd38538d861a46b311df69953172a92":["33c417a77f1efa4f2f313c7d535504a130ea1bd9"],"e971ba25509e21a130fef61f0687be0446ca27a0":["657e4f977dd38538d861a46b311df69953172a92"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e971ba25509e21a130fef61f0687be0446ca27a0"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"522694005b60ff76bab9584c0afb66ae309ffada":["8a9e385641d717e641408d8fbbc62be8fc766357"],"f6dba7919de4ff4ed6ff17f90619203772722f08":["522694005b60ff76bab9584c0afb66ae309ffada"],"33c417a77f1efa4f2f313c7d535504a130ea1bd9":["f6dba7919de4ff4ed6ff17f90619203772722f08"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}