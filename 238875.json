{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getMissingBits(int,long,long).mjava","commits":[{"id":"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1","date":1383143016,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getMissingBits(int,long,long).mjava","pathOld":"/dev/null","sourceNew":"  private Bits getMissingBits(int fieldNumber, final long offset, final long length) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      Bits instance;\n      synchronized(this) {\n        instance = docsWithFieldInstances.get(fieldNumber);\n        if (instance == null) {\n          IndexInput data = this.data.clone();\n          data.seek(offset);\n          assert length % 8 == 0;\n          long bits[] = new long[(int) length >> 3];\n          for (int i = 0; i < bits.length; i++) {\n            bits[i] = data.readLong();\n          }\n          instance = new FixedBitSet(bits, maxDoc);\n          docsWithFieldInstances.put(fieldNumber, instance);\n        }\n      }\n      return instance;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getMissingBits(FieldInfo,long,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getMissingBits(int,long,long).mjava","sourceNew":"  private Bits getMissingBits(FieldInfo field, final long offset, final long length) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      FixedBitSet instance;\n      synchronized(this) {\n        instance = docsWithFieldInstances.get(field.name);\n        if (instance == null) {\n          IndexInput data = this.data.clone();\n          data.seek(offset);\n          assert length % 8 == 0;\n          long bits[] = new long[(int) length >> 3];\n          for (int i = 0; i < bits.length; i++) {\n            bits[i] = data.readLong();\n          }\n          instance = new FixedBitSet(bits, maxDoc);\n          docsWithFieldInstances.put(field.name, instance);\n        }\n      }\n      return instance;\n    }\n  }\n\n","sourceOld":"  private Bits getMissingBits(int fieldNumber, final long offset, final long length) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      Bits instance;\n      synchronized(this) {\n        instance = docsWithFieldInstances.get(fieldNumber);\n        if (instance == null) {\n          IndexInput data = this.data.clone();\n          data.seek(offset);\n          assert length % 8 == 0;\n          long bits[] = new long[(int) length >> 3];\n          for (int i = 0; i < bits.length; i++) {\n            bits[i] = data.readLong();\n          }\n          instance = new FixedBitSet(bits, maxDoc);\n          docsWithFieldInstances.put(fieldNumber, instance);\n        }\n      }\n      return instance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getMissingBits(FieldInfo,long,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#getMissingBits(int,long,long).mjava","sourceNew":"  private Bits getMissingBits(FieldInfo field, final long offset, final long length) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      FixedBitSet instance;\n      synchronized(this) {\n        instance = docsWithFieldInstances.get(field.name);\n        if (instance == null) {\n          IndexInput data = this.data.clone();\n          data.seek(offset);\n          assert length % 8 == 0;\n          long bits[] = new long[(int) length >> 3];\n          for (int i = 0; i < bits.length; i++) {\n            bits[i] = data.readLong();\n          }\n          instance = new FixedBitSet(bits, maxDoc);\n          docsWithFieldInstances.put(field.name, instance);\n        }\n      }\n      return instance;\n    }\n  }\n\n","sourceOld":"  private Bits getMissingBits(int fieldNumber, final long offset, final long length) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      Bits instance;\n      synchronized(this) {\n        instance = docsWithFieldInstances.get(fieldNumber);\n        if (instance == null) {\n          IndexInput data = this.data.clone();\n          data.seek(offset);\n          assert length % 8 == 0;\n          long bits[] = new long[(int) length >> 3];\n          for (int i = 0; i < bits.length; i++) {\n            bits[i] = data.readLong();\n          }\n          instance = new FixedBitSet(bits, maxDoc);\n          docsWithFieldInstances.put(fieldNumber, instance);\n        }\n      }\n      return instance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0936055c0eed56be3e4ae5c9db5b0e355390736a"]},"commit2Childs":{"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}