{"path":"solr/core/src/test/org/apache/solr/security/MultiDestinationAuditLoggerTest#init().mjava","commits":[{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/MultiDestinationAuditLoggerTest#init().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void init() throws IOException {\n    MultiDestinationAuditLogger al = new MultiDestinationAuditLogger();\n    Map<String,Object> config = new HashMap<>();\n    config.put(\"class\", \"solr.MultiDestinationAuditLogger\");\n    config.put(\"async\", false);\n    config.put(\"eventTypes\", Arrays.asList(AuditEvent.EventType.COMPLETED.name()));\n    ArrayList<Map<String, Object>> plugins = new ArrayList<Map<String, Object>>();\n\n    Map<String,Object> conf1 = new HashMap<>();\n    conf1.put(\"class\", \"solr.SolrLogAuditLoggerPlugin\");\n    conf1.put(\"async\", false);\n    conf1.put(\"eventTypes\", Arrays.asList(AuditEvent.EventType.ANONYMOUS.name()));\n    plugins.add(conf1);\n    Map<String,Object> conf2 = new HashMap<>();\n    conf2.put(\"class\", \"solr.MockAuditLoggerPlugin\");\n    conf2.put(\"async\", false);\n    conf2.put(\"eventTypes\", Arrays.asList(AuditEvent.EventType.AUTHENTICATED.name()));\n    plugins.add(conf2);\n    config.put(\"plugins\", plugins);\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    al.inform(loader);\n    al.init(config);\n\n    al.doAudit(new AuditEvent(AuditEvent.EventType.ANONYMOUS).setUsername(\"me\"));\n    assertEquals(0, ((MockAuditLoggerPlugin)al.plugins.get(1)).events.size()); // not configured for ANONYMOUS\n    al.doAudit(new AuditEvent(AuditEvent.EventType.AUTHENTICATED).setUsername(\"me\"));\n    assertEquals(1, ((MockAuditLoggerPlugin)al.plugins.get(1)).events.size()); // configured for authenticated\n    \n    assertFalse(al.shouldLog(AuditEvent.EventType.ERROR));\n    assertFalse(al.shouldLog(AuditEvent.EventType.UNAUTHORIZED));\n    assertTrue(al.shouldLog(AuditEvent.EventType.COMPLETED));\n    assertTrue(al.shouldLog(AuditEvent.EventType.ANONYMOUS));\n    assertTrue(al.shouldLog(AuditEvent.EventType.AUTHENTICATED));\n\n    assertEquals(0, config.size());\n    \n    al.close();\n    loader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"]},"commit2Childs":{"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}