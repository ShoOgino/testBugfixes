{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#getCoreNodeName(CoreDescriptor).mjava","commits":[{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getCoreNodeName(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private String getCoreNodeName(CoreDescriptor descriptor){\n    return getNodeName() + \"_\"\n        + descriptor.getName();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getCoreNodeName(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getCoreNodeName(CoreDescriptor).mjava","sourceNew":"  public String getCoreNodeName(CoreDescriptor descriptor){\n    String coreNodeName = descriptor.getCloudDescriptor().getCoreNodeName();\n    System.out.println(\"coreNodeName:\" + coreNodeName);\n    if (coreNodeName == null) {\n      // it's the default\n      return getNodeName() + \"_\" + descriptor.getName();\n    }\n    \n    return coreNodeName;\n  }\n\n","sourceOld":"  private String getCoreNodeName(CoreDescriptor descriptor){\n    return getNodeName() + \"_\"\n        + descriptor.getName();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08d9bd48e30944cad98076e63887cbf9bbd963a1","date":1361938681,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getCoreNodeName(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getCoreNodeName(CoreDescriptor).mjava","sourceNew":"  public String getCoreNodeName(CoreDescriptor descriptor){\n    String coreNodeName = descriptor.getCloudDescriptor().getCoreNodeName();\n    if (coreNodeName == null) {\n      // it's the default\n      return getNodeName() + \"_\" + descriptor.getName();\n    }\n    \n    return coreNodeName;\n  }\n\n","sourceOld":"  public String getCoreNodeName(CoreDescriptor descriptor){\n    String coreNodeName = descriptor.getCloudDescriptor().getCoreNodeName();\n    System.out.println(\"coreNodeName:\" + coreNodeName);\n    if (coreNodeName == null) {\n      // it's the default\n      return getNodeName() + \"_\" + descriptor.getName();\n    }\n    \n    return coreNodeName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getCoreNodeName(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getCoreNodeName(CoreDescriptor).mjava","sourceNew":"  public String getCoreNodeName(CoreDescriptor descriptor){\n    String coreNodeName = descriptor.getCloudDescriptor().getCoreNodeName();\n    if (coreNodeName == null && !genericCoreNodeNames) {\n      // it's the default\n      return getNodeName() + \"_\" + descriptor.getName();\n    }\n    \n    return coreNodeName;\n  }\n\n","sourceOld":"  public String getCoreNodeName(CoreDescriptor descriptor){\n    String coreNodeName = descriptor.getCloudDescriptor().getCoreNodeName();\n    if (coreNodeName == null) {\n      // it's the default\n      return getNodeName() + \"_\" + descriptor.getName();\n    }\n    \n    return coreNodeName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getCoreNodeName(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getCoreNodeName(CoreDescriptor).mjava","sourceNew":"  public String getCoreNodeName(CoreDescriptor descriptor){\n    String coreNodeName = descriptor.getCloudDescriptor().getCoreNodeName();\n    if (coreNodeName == null && !genericCoreNodeNames) {\n      // it's the default\n      return getNodeName() + \"_\" + descriptor.getName();\n    }\n    \n    return coreNodeName;\n  }\n\n","sourceOld":"  public String getCoreNodeName(CoreDescriptor descriptor){\n    String coreNodeName = descriptor.getCloudDescriptor().getCoreNodeName();\n    if (coreNodeName == null) {\n      // it's the default\n      return getNodeName() + \"_\" + descriptor.getName();\n    }\n    \n    return coreNodeName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getCoreNodeName(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getCoreNodeName(CoreDescriptor).mjava","sourceNew":"  public String getCoreNodeName(CoreDescriptor descriptor) {\n    String coreNodeName = descriptor.getCloudDescriptor().getCoreNodeName();\n    if (coreNodeName == null && !genericCoreNodeNames) {\n      // it's the default\n      return getNodeName() + \"_\" + descriptor.getName();\n    }\n\n    return coreNodeName;\n  }\n\n","sourceOld":"  public String getCoreNodeName(CoreDescriptor descriptor){\n    String coreNodeName = descriptor.getCloudDescriptor().getCoreNodeName();\n    if (coreNodeName == null && !genericCoreNodeNames) {\n      // it's the default\n      return getNodeName() + \"_\" + descriptor.getName();\n    }\n    \n    return coreNodeName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getCoreNodeName(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getCoreNodeName(CoreDescriptor).mjava","sourceNew":"  public String getCoreNodeName(CoreDescriptor descriptor) {\n    String coreNodeName = descriptor.getCloudDescriptor().getCoreNodeName();\n    if (coreNodeName == null && !genericCoreNodeNames) {\n      // it's the default\n      return getNodeName() + \"_\" + descriptor.getName();\n    }\n\n    return coreNodeName;\n  }\n\n","sourceOld":"  public String getCoreNodeName(CoreDescriptor descriptor){\n    String coreNodeName = descriptor.getCloudDescriptor().getCoreNodeName();\n    if (coreNodeName == null && !genericCoreNodeNames) {\n      // it's the default\n      return getNodeName() + \"_\" + descriptor.getName();\n    }\n    \n    return coreNodeName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["08d9bd48e30944cad98076e63887cbf9bbd963a1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["849494cf2f3a96af5c8c84995108ddd8456fcd04","fbcfc050b9f253136eaa5950b57248b2109eac11"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["08d9bd48e30944cad98076e63887cbf9bbd963a1","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"08d9bd48e30944cad98076e63887cbf9bbd963a1":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["a5093a9e893633cc091cf2f729d7863671c2b715"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["849494cf2f3a96af5c8c84995108ddd8456fcd04"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","37a0f60745e53927c4c876cfe5b5a58170f0646c","fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5093a9e893633cc091cf2f729d7863671c2b715"],"a5093a9e893633cc091cf2f729d7863671c2b715":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"08d9bd48e30944cad98076e63887cbf9bbd963a1":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["08d9bd48e30944cad98076e63887cbf9bbd963a1"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}