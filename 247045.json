{"path":"solr/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}