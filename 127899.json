{"path":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory#renameWithOverwrite(Directory,String,String).mjava","commits":[{"id":"f0ca74ae423fe45e31cb4c02b83262f0549f52f5","date":1482969139,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory#renameWithOverwrite(Directory,String,String).mjava","pathOld":"/dev/null","sourceNew":"  // perform an atomic rename if possible\n  public void renameWithOverwrite(Directory dir, String fileName, String toName) throws IOException {\n    Directory baseDir = getBaseDir(dir);\n    if (baseDir instanceof FSDirectory) {\n      Path path = ((FSDirectory) baseDir).getDirectory().toAbsolutePath();\n      try {\n      Files.move(FileSystems.getDefault().getPath(path.toString(), fileName),\n          FileSystems.getDefault().getPath(path.toString(), toName), StandardCopyOption.ATOMIC_MOVE, StandardCopyOption.REPLACE_EXISTING);\n      } catch (AtomicMoveNotSupportedException e) {\n        Files.move(FileSystems.getDefault().getPath(path.toString(), fileName),\n            FileSystems.getDefault().getPath(path.toString(), toName), StandardCopyOption.REPLACE_EXISTING);\n      }\n    } else {\n      super.renameWithOverwrite(dir, fileName, toName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deb456b595295c63d69cf86cae60ed80dfc9c411","date":1483007391,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory#renameWithOverwrite(Directory,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory#renameWithOverwrite(Directory,String,String).mjava","sourceNew":"  // perform an atomic rename if possible\n  public void renameWithOverwrite(Directory dir, String fileName, String toName) throws IOException {\n    Directory baseDir = getBaseDir(dir);\n    if (baseDir instanceof FSDirectory) {\n      Path path = ((FSDirectory) baseDir).getDirectory().toAbsolutePath();\n      try {\n        Files.move(path.resolve(fileName),\n            path.resolve(toName), StandardCopyOption.ATOMIC_MOVE,\n            StandardCopyOption.REPLACE_EXISTING);\n      } catch (AtomicMoveNotSupportedException e) {\n        Files.move(FileSystems.getDefault().getPath(path.toString(), fileName),\n            FileSystems.getDefault().getPath(path.toString(), toName), StandardCopyOption.REPLACE_EXISTING);\n      }\n    } else {\n      super.renameWithOverwrite(dir, fileName, toName);\n    }\n  }\n\n","sourceOld":"  // perform an atomic rename if possible\n  public void renameWithOverwrite(Directory dir, String fileName, String toName) throws IOException {\n    Directory baseDir = getBaseDir(dir);\n    if (baseDir instanceof FSDirectory) {\n      Path path = ((FSDirectory) baseDir).getDirectory().toAbsolutePath();\n      try {\n      Files.move(FileSystems.getDefault().getPath(path.toString(), fileName),\n          FileSystems.getDefault().getPath(path.toString(), toName), StandardCopyOption.ATOMIC_MOVE, StandardCopyOption.REPLACE_EXISTING);\n      } catch (AtomicMoveNotSupportedException e) {\n        Files.move(FileSystems.getDefault().getPath(path.toString(), fileName),\n            FileSystems.getDefault().getPath(path.toString(), toName), StandardCopyOption.REPLACE_EXISTING);\n      }\n    } else {\n      super.renameWithOverwrite(dir, fileName, toName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory#renameWithOverwrite(Directory,String,String).mjava","pathOld":"/dev/null","sourceNew":"  // perform an atomic rename if possible\n  public void renameWithOverwrite(Directory dir, String fileName, String toName) throws IOException {\n    Directory baseDir = getBaseDir(dir);\n    if (baseDir instanceof FSDirectory) {\n      Path path = ((FSDirectory) baseDir).getDirectory().toAbsolutePath();\n      try {\n        Files.move(path.resolve(fileName),\n            path.resolve(toName), StandardCopyOption.ATOMIC_MOVE,\n            StandardCopyOption.REPLACE_EXISTING);\n      } catch (AtomicMoveNotSupportedException e) {\n        Files.move(FileSystems.getDefault().getPath(path.toString(), fileName),\n            FileSystems.getDefault().getPath(path.toString(), toName), StandardCopyOption.REPLACE_EXISTING);\n      }\n    } else {\n      super.renameWithOverwrite(dir, fileName, toName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f0ca74ae423fe45e31cb4c02b83262f0549f52f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"deb456b595295c63d69cf86cae60ed80dfc9c411":["f0ca74ae423fe45e31cb4c02b83262f0549f52f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["deb456b595295c63d69cf86cae60ed80dfc9c411"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","deb456b595295c63d69cf86cae60ed80dfc9c411"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0ca74ae423fe45e31cb4c02b83262f0549f52f5","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f0ca74ae423fe45e31cb4c02b83262f0549f52f5":["deb456b595295c63d69cf86cae60ed80dfc9c411"],"deb456b595295c63d69cf86cae60ed80dfc9c411":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}