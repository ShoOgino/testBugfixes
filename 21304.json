{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#writePackedValue(int,BytesRef).mjava","commits":[{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#writePackedValue(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  void writePackedValue(int index, BytesRef bytes) {\n    assert bytes.length == packedBytesLength;\n    int block = index / valuesPerBlock;\n    int blockIndex = index % valuesPerBlock;\n    //System.out.println(\"writePackedValue: index=\" + index + \" bytes.length=\" + bytes.length + \" block=\" + block + \" blockIndex=\" + blockIndex + \" valuesPerBlock=\" + valuesPerBlock);\n    while (blocks.size() <= block) {\n      // If this is the last block, only allocate as large as necessary for maxSize:\n      int valuesInBlock = Math.min(valuesPerBlock, maxSize - (blocks.size() * valuesPerBlock));\n      blocks.add(new byte[valuesInBlock*packedBytesLength]);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, blocks.get(block), blockIndex * packedBytesLength, packedBytesLength);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":4,"author":"iverase","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#writePackedValue(int,BytesRef).mjava","sourceNew":null,"sourceOld":"  void writePackedValue(int index, BytesRef bytes) {\n    assert bytes.length == packedBytesLength;\n    int block = index / valuesPerBlock;\n    int blockIndex = index % valuesPerBlock;\n    //System.out.println(\"writePackedValue: index=\" + index + \" bytes.length=\" + bytes.length + \" block=\" + block + \" blockIndex=\" + blockIndex + \" valuesPerBlock=\" + valuesPerBlock);\n    while (blocks.size() <= block) {\n      // If this is the last block, only allocate as large as necessary for maxSize:\n      int valuesInBlock = Math.min(valuesPerBlock, maxSize - (blocks.size() * valuesPerBlock));\n      blocks.add(new byte[valuesInBlock*packedBytesLength]);\n    }\n    System.arraycopy(bytes.bytes, bytes.offset, blocks.get(block), blockIndex * packedBytesLength, packedBytesLength);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2344a1c769566d8c85cffcacc5e55153fa54b86":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2344a1c769566d8c85cffcacc5e55153fa54b86"]},"commit2Childs":{"c2344a1c769566d8c85cffcacc5e55153fa54b86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}