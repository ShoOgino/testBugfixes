{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","commits":[{"id":"ef06b0d1cc722b335e220aac1145914fe6362875","date":1381231524,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map<String, Document> docs = generateIndexDocuments(10);\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    TermFreqPayloadIterator tfp = (TermFreqPayloadIterator) dictionary.getWordsIterator();\n    BytesRef f;\n    while((f = tfp.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      assertEquals(tfp.weight(), doc.getField(WEIGHT_FIELD_NAME).numericValue().longValue());\n      assertTrue(tfp.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    assertTrue(docs.isEmpty());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map<String, Document> docs = generateIndexDocuments(10);\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator tfp = (InputIterator) dictionary.getWordsIterator();\n    BytesRef f;\n    while((f = tfp.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      assertEquals(tfp.weight(), doc.getField(WEIGHT_FIELD_NAME).numericValue().longValue());\n      assertTrue(tfp.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    assertTrue(docs.isEmpty());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map<String, Document> docs = generateIndexDocuments(10);\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    TermFreqPayloadIterator tfp = (TermFreqPayloadIterator) dictionary.getWordsIterator();\n    BytesRef f;\n    while((f = tfp.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      assertEquals(tfp.weight(), doc.getField(WEIGHT_FIELD_NAME).numericValue().longValue());\n      assertTrue(tfp.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    assertTrue(docs.isEmpty());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24730daba4a74cb3bd673ccacc4ddaee5963af02","date":1385133691,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), true);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = (InputIterator) dictionary.getWordsIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map<String, Document> docs = generateIndexDocuments(10);\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator tfp = (InputIterator) dictionary.getWordsIterator();\n    BytesRef f;\n    while((f = tfp.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      assertEquals(tfp.weight(), doc.getField(WEIGHT_FIELD_NAME).numericValue().longValue());\n      assertTrue(tfp.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    assertTrue(docs.isEmpty());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["ee590759ca28a3f2599ba7608ea0a50be4f540f6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), true);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = (InputIterator) dictionary.getWordsIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map<String, Document> docs = generateIndexDocuments(10);\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator tfp = (InputIterator) dictionary.getWordsIterator();\n    BytesRef f;\n    while((f = tfp.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      assertEquals(tfp.weight(), doc.getField(WEIGHT_FIELD_NAME).numericValue().longValue());\n      assertTrue(tfp.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    assertTrue(docs.isEmpty());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a645276cbaf5dc96a42fd473b9019bde352996c8","date":1391806699,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), true);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), true);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = (InputIterator) dictionary.getWordsIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","date":1395588343,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), true, false);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), true);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["ee590759ca28a3f2599ba7608ea0a50be4f540f6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), true, false);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.shutdown();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), true, false);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), true, false);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.shutdown();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), true, false);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.shutdown();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), true, false);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), true, false);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.shutdown();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), true, false);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    IOUtils.close(ir, analyzer, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), true, false);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), true, false);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    IOUtils.close(ir, analyzer, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), true, false);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee590759ca28a3f2599ba7608ea0a50be4f540f6","date":1432142966,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), false);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      Field payloadField = doc.getField(PAYLOAD_FIELD_NAME);\n      if (payloadField == null) assertTrue(inputIterator.payload().length == 0);\n      else assertEquals(inputIterator.payload(), payloadField.binaryValue());\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    IOUtils.close(ir, analyzer, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), true, false);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      assertTrue(inputIterator.payload().equals(doc.getField(PAYLOAD_FIELD_NAME).binaryValue()));\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    IOUtils.close(ir, analyzer, dir);\n  }\n\n","bugFix":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","24730daba4a74cb3bd673ccacc4ddaee5963af02"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), false);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      IndexableField weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      IndexableField payloadField = doc.getField(PAYLOAD_FIELD_NAME);\n      if (payloadField == null) assertTrue(inputIterator.payload().length == 0);\n      else assertEquals(inputIterator.payload(), payloadField.binaryValue());\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    IOUtils.close(ir, analyzer, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n    Map.Entry<List<String>, Map<String, Document>> res = generateIndexDocuments(atLeast(1000), false);\n    Map<String, Document> docs = res.getValue();\n    List<String> invalidDocTerms = res.getKey();\n    for(Document doc: docs.values()) {\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n    Dictionary dictionary = new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionary.getEntryIterator();\n    BytesRef f;\n    while((f = inputIterator.next())!=null) {\n      Document doc = docs.remove(f.utf8ToString());\n      assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n      Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n      assertEquals(inputIterator.weight(), (weightField != null) ? weightField.numericValue().longValue() : 0);\n      Field payloadField = doc.getField(PAYLOAD_FIELD_NAME);\n      if (payloadField == null) assertTrue(inputIterator.payload().length == 0);\n      else assertEquals(inputIterator.payload(), payloadField.binaryValue());\n    }\n    \n    for (String invalidTerm : invalidDocTerms) {\n      assertNotNull(docs.remove(invalidTerm));\n    }\n    assertTrue(docs.isEmpty());\n    \n    IOUtils.close(ir, analyzer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24730daba4a74cb3bd673ccacc4ddaee5963af02":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ef06b0d1cc722b335e220aac1145914fe6362875"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["24730daba4a74cb3bd673ccacc4ddaee5963af02"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d0ef034a4f10871667ae75181537775ddcf8ade4","a56958d7f71a28824f20031ffbb2e13502a0274e"],"ef06b0d1cc722b335e220aac1145914fe6362875":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee590759ca28a3f2599ba7608ea0a50be4f540f6":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7","24730daba4a74cb3bd673ccacc4ddaee5963af02"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["ee590759ca28a3f2599ba7608ea0a50be4f540f6"]},"commit2Childs":{"24730daba4a74cb3bd673ccacc4ddaee5963af02":["a645276cbaf5dc96a42fd473b9019bde352996c8","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["24730daba4a74cb3bd673ccacc4ddaee5963af02","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"ef06b0d1cc722b335e220aac1145914fe6362875":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef06b0d1cc722b335e220aac1145914fe6362875"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"ee590759ca28a3f2599ba7608ea0a50be4f540f6":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ee590759ca28a3f2599ba7608ea0a50be4f540f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}