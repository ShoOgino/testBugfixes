{"path":"backwards/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value\", Store.NO, Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(0, hits.totalHits);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value\", Store.NO, Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(0, hits.totalHits);\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"value\", Store.NO, Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(0, hits.totalHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}