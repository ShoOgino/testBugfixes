{"path":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","commits":[{"id":"bc0528274cde759b2d3f75b55794edeae6093533","date":1323799309,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Wraps another filter's result and caches it.  If\n   *  recacheDeletes is true, then new deletes (for example\n   *  after {@link IndexReader#openIfChanged}) will be AND'd\n   *  and cached again.\n   *\n   *  @param filter Filter to cache results of\n   */\n  public CachingWrapperFilter(Filter filter, boolean recacheDeletes) {\n    this.filter = filter;\n    this.recacheDeletes = recacheDeletes;\n    cache = new FilterCache<DocIdSet>();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Wraps another filter's result and caches it.  If\n   *  recacheDeletes is true, then new deletes (for example\n   *  after {@link IndexReader#openIfChanged}) will be AND'd\n   *  and cached again.\n   *\n   *  @param filter Filter to cache results of\n   */\n  public CachingWrapperFilter(Filter filter, boolean recacheDeletes) {\n    this.filter = filter;\n    this.recacheDeletes = recacheDeletes;\n    cache = new FilterCache<DocIdSet>();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd8a5ae76e8111ea49a39aef28be5fbd3dab382b","date":1323874359,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","sourceNew":"  /** Wraps another filter's result and caches it.  If\n   *  recacheDeletes is true, then new deletes (for example\n   *  after {@link IndexReader#openIfChanged}) will be AND'd\n   *  and cached again.\n   *\n   *  @param filter Filter to cache results of\n   */\n  public CachingWrapperFilter(Filter filter, boolean recacheDeletes) {\n    this.filter = filter;\n    this.recacheDeletes = recacheDeletes;\n  }\n\n","sourceOld":"  /** Wraps another filter's result and caches it.  If\n   *  recacheDeletes is true, then new deletes (for example\n   *  after {@link IndexReader#openIfChanged}) will be AND'd\n   *  and cached again.\n   *\n   *  @param filter Filter to cache results of\n   */\n  public CachingWrapperFilter(Filter filter, boolean recacheDeletes) {\n    this.filter = filter;\n    this.recacheDeletes = recacheDeletes;\n    cache = new FilterCache<DocIdSet>();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d9cdceb051035b069ec36719809d0cd837777b","date":1323905856,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","sourceNew":"  /** Wraps another filter's result and caches it. If\n   * {@code recacheDeletes} is {@code true}, then new deletes (for example\n   * after {@link IndexReader#openIfChanged}) will cause the filter\n   * {@link DocIdSet} to be recached.\n   *\n   * <p>If your index changes seldom, it is recommended to use {@code recacheDeletes=true},\n   * as recaching will only occur when the index is reopened.\n   * For near-real-time indexes or indexes that are often\n   * reopened with (e.g., {@link IndexReader#openIfChanged} is used), you should\n   * pass {@code recacheDeletes=false}. This will cache the filter results omitting\n   * deletions and will AND them in while scoring.\n   * @param filter Filter to cache results of\n   * @param recacheDeletes if deletions on the underlying index should recache\n   */\n  public CachingWrapperFilter(Filter filter, boolean recacheDeletes) {\n    this.filter = filter;\n    this.recacheDeletes = recacheDeletes;\n  }\n\n","sourceOld":"  /** Wraps another filter's result and caches it.  If\n   *  recacheDeletes is true, then new deletes (for example\n   *  after {@link IndexReader#openIfChanged}) will be AND'd\n   *  and cached again.\n   *\n   *  @param filter Filter to cache results of\n   */\n  public CachingWrapperFilter(Filter filter, boolean recacheDeletes) {\n    this.filter = filter;\n    this.recacheDeletes = recacheDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fad1351342e15571fed2a68feaed0a8a3a18e5da","date":1327959908,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","sourceNew":"  /** Wraps another filter's result and caches it. If\n   * {@code recacheDeletes} is {@code true}, then new deletes (for example\n   * after {@link DirectoryReader#openIfChanged}) will cause the filter\n   * {@link DocIdSet} to be recached.\n   *\n   * <p>If your index changes seldom, it is recommended to use {@code recacheDeletes=true},\n   * as recaching will only occur when the index is reopened.\n   * For near-real-time indexes or indexes that are often\n   * reopened with (e.g., {@link DirectoryReader#openIfChanged} is used), you should\n   * pass {@code recacheDeletes=false}. This will cache the filter results omitting\n   * deletions and will AND them in while scoring.\n   * @param filter Filter to cache results of\n   * @param recacheDeletes if deletions on the underlying index should recache\n   */\n  public CachingWrapperFilter(Filter filter, boolean recacheDeletes) {\n    this.filter = filter;\n    this.recacheDeletes = recacheDeletes;\n  }\n\n","sourceOld":"  /** Wraps another filter's result and caches it. If\n   * {@code recacheDeletes} is {@code true}, then new deletes (for example\n   * after {@link IndexReader#openIfChanged}) will cause the filter\n   * {@link DocIdSet} to be recached.\n   *\n   * <p>If your index changes seldom, it is recommended to use {@code recacheDeletes=true},\n   * as recaching will only occur when the index is reopened.\n   * For near-real-time indexes or indexes that are often\n   * reopened with (e.g., {@link IndexReader#openIfChanged} is used), you should\n   * pass {@code recacheDeletes=false}. This will cache the filter results omitting\n   * deletions and will AND them in while scoring.\n   * @param filter Filter to cache results of\n   * @param recacheDeletes if deletions on the underlying index should recache\n   */\n  public CachingWrapperFilter(Filter filter, boolean recacheDeletes) {\n    this.filter = filter;\n    this.recacheDeletes = recacheDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","sourceNew":"  /** Wraps another filter's result and caches it. If\n   * {@code recacheDeletes} is {@code true}, then new deletes (for example\n   * after {@link DirectoryReader#openIfChanged}) will cause the filter\n   * {@link DocIdSet} to be recached.\n   *\n   * <p>If your index changes seldom, it is recommended to use {@code recacheDeletes=true},\n   * as recaching will only occur when the index is reopened.\n   * For near-real-time indexes or indexes that are often\n   * reopened with (e.g., {@link DirectoryReader#openIfChanged} is used), you should\n   * pass {@code recacheDeletes=false}. This will cache the filter results omitting\n   * deletions and will AND them in while scoring.\n   * @param filter Filter to cache results of\n   * @param recacheDeletes if deletions on the underlying index should recache\n   */\n  public CachingWrapperFilter(Filter filter, boolean recacheDeletes) {\n    this.filter = filter;\n    this.recacheDeletes = recacheDeletes;\n  }\n\n","sourceOld":"  /** Wraps another filter's result and caches it. If\n   * {@code recacheDeletes} is {@code true}, then new deletes (for example\n   * after {@link IndexReader#openIfChanged}) will cause the filter\n   * {@link DocIdSet} to be recached.\n   *\n   * <p>If your index changes seldom, it is recommended to use {@code recacheDeletes=true},\n   * as recaching will only occur when the index is reopened.\n   * For near-real-time indexes or indexes that are often\n   * reopened with (e.g., {@link IndexReader#openIfChanged} is used), you should\n   * pass {@code recacheDeletes=false}. This will cache the filter results omitting\n   * deletions and will AND them in while scoring.\n   * @param filter Filter to cache results of\n   * @param recacheDeletes if deletions on the underlying index should recache\n   */\n  public CachingWrapperFilter(Filter filter, boolean recacheDeletes) {\n    this.filter = filter;\n    this.recacheDeletes = recacheDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","sourceNew":"  /** Wraps another filter's result and caches it. If\n   * {@code recacheDeletes} is {@code true}, then new deletes (for example\n   * after {@link DirectoryReader#openIfChanged}) will cause the filter\n   * {@link DocIdSet} to be recached.\n   *\n   * <p>If your index changes seldom, it is recommended to use {@code recacheDeletes=true},\n   * as recaching will only occur when the index is reopened.\n   * For near-real-time indexes or indexes that are often\n   * reopened with (e.g., {@link DirectoryReader#openIfChanged} is used), you should\n   * pass {@code recacheDeletes=false}. This will cache the filter results omitting\n   * deletions and will AND them in while scoring.\n   * @param filter Filter to cache results of\n   * @param recacheDeletes if deletions on the underlying index should recache\n   */\n  public CachingWrapperFilter(Filter filter, boolean recacheDeletes) {\n    this.filter = filter;\n    this.recacheDeletes = recacheDeletes;\n  }\n\n","sourceOld":"  /** Wraps another filter's result and caches it. If\n   * {@code recacheDeletes} is {@code true}, then new deletes (for example\n   * after {@link DirectoryReader#openIfChanged}) will cause the filter\n   * {@link DocIdSet} to be recached.\n   *\n   * <p>If your index changes seldom, it is recommended to use {@code recacheDeletes=true},\n   * as recaching will only occur when the index is reopened.\n   * For near-real-time indexes or indexes that are often\n   * reopened with (e.g., {@link DirectoryReader#openIfChanged} is used), you should\n   * pass {@code recacheDeletes=false}. This will cache the filter results omitting\n   * deletions and will AND them in while scoring.\n   * @param filter Filter to cache results of\n   * @param recacheDeletes if deletions on the underlying index should recache\n   */\n  public CachingWrapperFilter(Filter filter, boolean recacheDeletes) {\n    this.filter = filter;\n    this.recacheDeletes = recacheDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ceb6a6c707ada1df8bde804e25c98668e699a18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc0528274cde759b2d3f75b55794edeae6093533"],"bc0528274cde759b2d3f75b55794edeae6093533":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd8a5ae76e8111ea49a39aef28be5fbd3dab382b":["bc0528274cde759b2d3f75b55794edeae6093533"],"b7d9cdceb051035b069ec36719809d0cd837777b":["cd8a5ae76e8111ea49a39aef28be5fbd3dab382b"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["b7d9cdceb051035b069ec36719809d0cd837777b"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b7d9cdceb051035b069ec36719809d0cd837777b","fad1351342e15571fed2a68feaed0a8a3a18e5da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"bc0528274cde759b2d3f75b55794edeae6093533":["4ceb6a6c707ada1df8bde804e25c98668e699a18","cd8a5ae76e8111ea49a39aef28be5fbd3dab382b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ceb6a6c707ada1df8bde804e25c98668e699a18","bc0528274cde759b2d3f75b55794edeae6093533"],"cd8a5ae76e8111ea49a39aef28be5fbd3dab382b":["b7d9cdceb051035b069ec36719809d0cd837777b"],"b7d9cdceb051035b069ec36719809d0cd837777b":["fad1351342e15571fed2a68feaed0a8a3a18e5da","5cab9a86bd67202d20b6adc463008c8e982b070a"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ceb6a6c707ada1df8bde804e25c98668e699a18","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}