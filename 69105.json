{"path":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testFilters().mjava","commits":[{"id":"5f7c69c29432074b666568db5e84001acd540dee","date":1520745905,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testFilters().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFilters() {\n    assertQ(\n        req(\"q\", \"{!filters param=$child.fq v=$gchq}\",\n            \"child.fq\", \"childparent_s:e\",\n            \"child.fq\", \"child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), elChild);\n\n    assertQ(\n        req(\"q\", \"{!filters param=$child.fq excludeTags=firstTag v=$gchq}\",\n            \"child.fq\", \"{!tag=zeroTag,firstTag}childparent_s:e\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), \"//*[@numFound='6']\");\n\n    assertQ(\n        req(\"q\", \"{!filters param=$child.fq excludeTags=secondTag v=$gchq}\",\n            \"child.fq\", \"{!tag=firstTag}childparent_s:e\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), \"//*[@numFound='3']\");\n\n    assertQ(req(\"q\",\n             random().nextBoolean() ? \"{!filters param=$child.fq excludeTags=firstTag,secondTag v=$gchq}\" :\n               random().nextBoolean() ? \"{!filters param=$thereAreNoLikeThese v=$gchq}\" :\n                 \"{!filters v=$gchq}\" ,\n            \"child.fq\", \"{!tag=firstTag}childparent_s:e\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), \"//*[@numFound='18']\");\n    \n    assertQEx(\"expecting exception on weird param\",\n        req(\"q\", \"{!filters v=$gchq param=}\\\"\" ,\n            \"gchq\", \"child_s:[* TO *]\"\n       ),ErrorCode.BAD_REQUEST);\n    \n    assertQ( // omit main query\n        req(\"q\", \"{!filters param=$child.fq}\",\n            \"child.fq\", \"{!tag=firstTag}childparent_s:(e f)\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\"), \"//*[@numFound='2']\");\n    \n    assertQ( // all excluded, matching all \n        req(\"q\", \"{!filters param=$child.fq excludeTags=firstTag,secondTag}\",\n            \"child.fq\", \"{!tag=firstTag}childparent_s:(e f)\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\"), \"//*[@numFound='42']\");\n    \n    assertQ(req(\"q\", // excluding top level\n            \"{!filters param=$child.fq excludeTags=bot,top v=$gchq}\" ,\n       \"child.fq\", \"{!tag=secondTag}child_s:l\", // 6 ls remains\n       \"gchq\", \"{!tag=top}childparent_s:e\"), \"//*[@numFound='6']\");\n    \n    assertQ(req(\"q\", // top and filter are excluded, got zero result, but is it right? \n        \"{!filters excludeTags=bot,secondTag,top v=$gchq}\" ,\n         \"child.fq\", \"{!tag=secondTag}child_s:l\",\n         \"gchq\", \"{!tag=top}childparent_s:e\"), \"//*[@numFound='42']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e5cbc96e6641be56fc04e988748a504d8d91b5e","date":1524724835,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testFilters().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testFilters().mjava","sourceNew":"  @Test\n  public void testFilters() {\n    assertQ(\n        req(\"q\", \"{!filters param=$child.fq v=$gchq}\",\n            \"child.fq\", \"childparent_s:e\",\n            \"child.fq\", \"child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), elChild);\n\n    assertQ(\n        req(\"q\", \"{!filters param=$child.fq excludeTags=firstTag v=$gchq}\",\n            \"child.fq\", \"{!tag=zeroTag,firstTag}childparent_s:e\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), \"//*[@numFound='6']\");\n\n    assertQ(\n        req(\"q\", \"{!filters param=$child.fq excludeTags=secondTag v=$gchq}\",\n            \"child.fq\", \"{!tag=firstTag}childparent_s:e\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), \"//*[@numFound='3']\");\n\n    assertQ(req(\"q\",\n             random().nextBoolean() ? \"{!filters param=$child.fq excludeTags=firstTag,secondTag v=$gchq}\" :\n               random().nextBoolean() ? \"{!filters param=$thereAreNoLikeThese v=$gchq}\" :\n                 \"{!filters v=$gchq}\" ,\n            \"child.fq\", \"{!tag=firstTag}childparent_s:e\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), \"//*[@numFound='18']\");\n    \n    assertQEx(\"expecting exception on weird param\",\n        req(\"q\", \"{!filters v=$gchq param=}\\\"\" ,\n            \"gchq\", \"child_s:[* TO *]\"\n       ),ErrorCode.BAD_REQUEST);\n    \n    assertQ( // omit main query\n        req(\"q\", \"{!filters param=$child.fq}\",\n            \"child.fq\", \"{!tag=firstTag}childparent_s:(e f)\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\"), \"//*[@numFound='2']\");\n    \n    assertQ( // all excluded, matching all \n        req(\"q\", \"{!filters param=$child.fq excludeTags=firstTag,secondTag}\",\n            \"child.fq\", \"{!tag=firstTag}childparent_s:(e f)\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\"), \"//*[@numFound='42']\");\n    \n    assertQ(req(\"q\", // excluding top level\n            \"{!filters param=$child.fq excludeTags=bot,top v=$gchq}\" ,\n       \"child.fq\", \"{!tag=secondTag}child_s:l\", // 6 ls remains\n       \"gchq\", \"{!tag=top}childparent_s:e\"), \"//*[@numFound='6']\");\n    \n    assertQ(req(\"q\", // top and filter are excluded, got all results\n        \"{!filters excludeTags=bot,secondTag,top v=$gchq}\" ,\n         \"child.fq\", \"{!tag=secondTag}child_s:l\",\n         \"gchq\", \"{!tag=top}childparent_s:e\"), \"//*[@numFound='42']\");\n  }\n\n","sourceOld":"  @Test\n  public void testFilters() {\n    assertQ(\n        req(\"q\", \"{!filters param=$child.fq v=$gchq}\",\n            \"child.fq\", \"childparent_s:e\",\n            \"child.fq\", \"child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), elChild);\n\n    assertQ(\n        req(\"q\", \"{!filters param=$child.fq excludeTags=firstTag v=$gchq}\",\n            \"child.fq\", \"{!tag=zeroTag,firstTag}childparent_s:e\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), \"//*[@numFound='6']\");\n\n    assertQ(\n        req(\"q\", \"{!filters param=$child.fq excludeTags=secondTag v=$gchq}\",\n            \"child.fq\", \"{!tag=firstTag}childparent_s:e\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), \"//*[@numFound='3']\");\n\n    assertQ(req(\"q\",\n             random().nextBoolean() ? \"{!filters param=$child.fq excludeTags=firstTag,secondTag v=$gchq}\" :\n               random().nextBoolean() ? \"{!filters param=$thereAreNoLikeThese v=$gchq}\" :\n                 \"{!filters v=$gchq}\" ,\n            \"child.fq\", \"{!tag=firstTag}childparent_s:e\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), \"//*[@numFound='18']\");\n    \n    assertQEx(\"expecting exception on weird param\",\n        req(\"q\", \"{!filters v=$gchq param=}\\\"\" ,\n            \"gchq\", \"child_s:[* TO *]\"\n       ),ErrorCode.BAD_REQUEST);\n    \n    assertQ( // omit main query\n        req(\"q\", \"{!filters param=$child.fq}\",\n            \"child.fq\", \"{!tag=firstTag}childparent_s:(e f)\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\"), \"//*[@numFound='2']\");\n    \n    assertQ( // all excluded, matching all \n        req(\"q\", \"{!filters param=$child.fq excludeTags=firstTag,secondTag}\",\n            \"child.fq\", \"{!tag=firstTag}childparent_s:(e f)\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\"), \"//*[@numFound='42']\");\n    \n    assertQ(req(\"q\", // excluding top level\n            \"{!filters param=$child.fq excludeTags=bot,top v=$gchq}\" ,\n       \"child.fq\", \"{!tag=secondTag}child_s:l\", // 6 ls remains\n       \"gchq\", \"{!tag=top}childparent_s:e\"), \"//*[@numFound='6']\");\n    \n    assertQ(req(\"q\", // top and filter are excluded, got zero result, but is it right? \n        \"{!filters excludeTags=bot,secondTag,top v=$gchq}\" ,\n         \"child.fq\", \"{!tag=secondTag}child_s:l\",\n         \"gchq\", \"{!tag=top}childparent_s:e\"), \"//*[@numFound='42']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"960f089602da7f0df48fb0e23de1ecbc791b95f0","date":1524725963,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testFilters().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/BJQParserTest#testFilters().mjava","sourceNew":"  @Test\n  public void testFilters() {\n    assertQ(\n        req(\"q\", \"{!filters param=$child.fq v=$gchq}\",\n            \"child.fq\", \"childparent_s:e\",\n            \"child.fq\", \"child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), elChild);\n\n    assertQ(\n        req(\"q\", \"{!filters param=$child.fq excludeTags=firstTag v=$gchq}\",\n            \"child.fq\", \"{!tag=zeroTag,firstTag}childparent_s:e\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), \"//*[@numFound='6']\");\n\n    assertQ(\n        req(\"q\", \"{!filters param=$child.fq excludeTags=secondTag v=$gchq}\",\n            \"child.fq\", \"{!tag=firstTag}childparent_s:e\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), \"//*[@numFound='3']\");\n\n    assertQ(req(\"q\",\n             random().nextBoolean() ? \"{!filters param=$child.fq excludeTags=firstTag,secondTag v=$gchq}\" :\n               random().nextBoolean() ? \"{!filters param=$thereAreNoLikeThese v=$gchq}\" :\n                 \"{!filters v=$gchq}\" ,\n            \"child.fq\", \"{!tag=firstTag}childparent_s:e\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), \"//*[@numFound='18']\");\n    \n    assertQEx(\"expecting exception on weird param\",\n        req(\"q\", \"{!filters v=$gchq param=}\\\"\" ,\n            \"gchq\", \"child_s:[* TO *]\"\n       ),ErrorCode.BAD_REQUEST);\n    \n    assertQ( // omit main query\n        req(\"q\", \"{!filters param=$child.fq}\",\n            \"child.fq\", \"{!tag=firstTag}childparent_s:(e f)\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\"), \"//*[@numFound='2']\");\n    \n    assertQ( // all excluded, matching all \n        req(\"q\", \"{!filters param=$child.fq excludeTags=firstTag,secondTag}\",\n            \"child.fq\", \"{!tag=firstTag}childparent_s:(e f)\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\"), \"//*[@numFound='42']\");\n    \n    assertQ(req(\"q\", // excluding top level\n            \"{!filters param=$child.fq excludeTags=bot,top v=$gchq}\" ,\n       \"child.fq\", \"{!tag=secondTag}child_s:l\", // 6 ls remains\n       \"gchq\", \"{!tag=top}childparent_s:e\"), \"//*[@numFound='6']\");\n    \n    assertQ(req(\"q\", // top and filter are excluded, got all results\n        \"{!filters excludeTags=bot,secondTag,top v=$gchq}\" ,\n         \"child.fq\", \"{!tag=secondTag}child_s:l\",\n         \"gchq\", \"{!tag=top}childparent_s:e\"), \"//*[@numFound='42']\");\n  }\n\n","sourceOld":"  @Test\n  public void testFilters() {\n    assertQ(\n        req(\"q\", \"{!filters param=$child.fq v=$gchq}\",\n            \"child.fq\", \"childparent_s:e\",\n            \"child.fq\", \"child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), elChild);\n\n    assertQ(\n        req(\"q\", \"{!filters param=$child.fq excludeTags=firstTag v=$gchq}\",\n            \"child.fq\", \"{!tag=zeroTag,firstTag}childparent_s:e\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), \"//*[@numFound='6']\");\n\n    assertQ(\n        req(\"q\", \"{!filters param=$child.fq excludeTags=secondTag v=$gchq}\",\n            \"child.fq\", \"{!tag=firstTag}childparent_s:e\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), \"//*[@numFound='3']\");\n\n    assertQ(req(\"q\",\n             random().nextBoolean() ? \"{!filters param=$child.fq excludeTags=firstTag,secondTag v=$gchq}\" :\n               random().nextBoolean() ? \"{!filters param=$thereAreNoLikeThese v=$gchq}\" :\n                 \"{!filters v=$gchq}\" ,\n            \"child.fq\", \"{!tag=firstTag}childparent_s:e\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\",\n            \"gchq\", \"child_s:[* TO *]\"), \"//*[@numFound='18']\");\n    \n    assertQEx(\"expecting exception on weird param\",\n        req(\"q\", \"{!filters v=$gchq param=}\\\"\" ,\n            \"gchq\", \"child_s:[* TO *]\"\n       ),ErrorCode.BAD_REQUEST);\n    \n    assertQ( // omit main query\n        req(\"q\", \"{!filters param=$child.fq}\",\n            \"child.fq\", \"{!tag=firstTag}childparent_s:(e f)\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\"), \"//*[@numFound='2']\");\n    \n    assertQ( // all excluded, matching all \n        req(\"q\", \"{!filters param=$child.fq excludeTags=firstTag,secondTag}\",\n            \"child.fq\", \"{!tag=firstTag}childparent_s:(e f)\",\n            \"child.fq\", \"{!tag=secondTag}child_s:l\"), \"//*[@numFound='42']\");\n    \n    assertQ(req(\"q\", // excluding top level\n            \"{!filters param=$child.fq excludeTags=bot,top v=$gchq}\" ,\n       \"child.fq\", \"{!tag=secondTag}child_s:l\", // 6 ls remains\n       \"gchq\", \"{!tag=top}childparent_s:e\"), \"//*[@numFound='6']\");\n    \n    assertQ(req(\"q\", // top and filter are excluded, got zero result, but is it right? \n        \"{!filters excludeTags=bot,secondTag,top v=$gchq}\" ,\n         \"child.fq\", \"{!tag=secondTag}child_s:l\",\n         \"gchq\", \"{!tag=top}childparent_s:e\"), \"//*[@numFound='42']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"960f089602da7f0df48fb0e23de1ecbc791b95f0":["5f7c69c29432074b666568db5e84001acd540dee","5e5cbc96e6641be56fc04e988748a504d8d91b5e"],"5f7c69c29432074b666568db5e84001acd540dee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5e5cbc96e6641be56fc04e988748a504d8d91b5e":["5f7c69c29432074b666568db5e84001acd540dee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["960f089602da7f0df48fb0e23de1ecbc791b95f0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f7c69c29432074b666568db5e84001acd540dee"],"960f089602da7f0df48fb0e23de1ecbc791b95f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f7c69c29432074b666568db5e84001acd540dee":["960f089602da7f0df48fb0e23de1ecbc791b95f0","5e5cbc96e6641be56fc04e988748a504d8d91b5e"],"5e5cbc96e6641be56fc04e988748a504d8d91b5e":["960f089602da7f0df48fb0e23de1ecbc791b95f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}