{"path":"backwards/src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: Set the interval between indexed terms.  Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms.  Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   *\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term.  In\n   * particular, it is the maximum number of other terms that must be\n   * scanned before a term is located and its frequency and position information\n   * may be processed.  In a large index with user-entered query terms, query\n   * processing time is likely to be dominated not by term lookup but rather\n   * by the processing of frequency and positional data.  In a small index\n   * or when many uncommon query terms are generated (e.g., by wildcard\n   * queries) term lookup may become a dominant cost.\n   *\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public void setTermIndexInterval(int interval) {\n    ensureOpen();\n    this.termIndexInterval = interval;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#setTermIndexInterval(int).mjava","sourceNew":"  /** Expert: Set the interval between indexed terms.  Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms.  Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   *\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term.  In\n   * particular, it is the maximum number of other terms that must be\n   * scanned before a term is located and its frequency and position information\n   * may be processed.  In a large index with user-entered query terms, query\n   * processing time is likely to be dominated not by term lookup but rather\n   * by the processing of frequency and positional data.  In a small index\n   * or when many uncommon query terms are generated (e.g., by wildcard\n   * queries) term lookup may become a dominant cost.\n   *\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public void setTermIndexInterval(int interval) {\n    ensureOpen();\n    this.termIndexInterval = interval;\n  }\n\n","sourceOld":"  /** Expert: Set the interval between indexed terms.  Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms.  Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   *\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term.  In\n   * particular, it is the maximum number of other terms that must be\n   * scanned before a term is located and its frequency and position information\n   * may be processed.  In a large index with user-entered query terms, query\n   * processing time is likely to be dominated not by term lookup but rather\n   * by the processing of frequency and positional data.  In a small index\n   * or when many uncommon query terms are generated (e.g., by wildcard\n   * queries) term lookup may become a dominant cost.\n   *\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public void setTermIndexInterval(int interval) {\n    ensureOpen();\n    this.termIndexInterval = interval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}