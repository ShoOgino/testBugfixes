{"path":"src/java/org/apache/solr/analysis/DictionaryCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","commits":[{"id":"3a70d25a69adc3ddd5d8f7fd7600d40ff454f9fd","date":1215972943,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/DictionaryCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  public void init(Map<String, String> args) {\n    super.init(args);\n    dictFile = args.get(\"dictionary\");\n    minWordSize= getInt(\"minWordSize\",CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize= getInt(\"minSubwordSize\",CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize= getInt(\"maxSubwordSize\",CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\",true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c72b00c86bad3cbf232f5ad5a0b014c411475204","date":1223961461,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/DictionaryCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/DictionaryCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","sourceNew":"  public void init(Map<String, String> args) {\n    super.init(args);\n    dictFile = args.get(\"dictionary\");\n    if (null == dictFile) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"Missing required parameter: dictionary\");\n    }\n\n    minWordSize= getInt(\"minWordSize\",CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize= getInt(\"minSubwordSize\",CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize= getInt(\"maxSubwordSize\",CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\",true);\n  }\n\n","sourceOld":"  public void init(Map<String, String> args) {\n    super.init(args);\n    dictFile = args.get(\"dictionary\");\n    minWordSize= getInt(\"minWordSize\",CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize= getInt(\"minSubwordSize\",CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize= getInt(\"maxSubwordSize\",CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\",true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/DictionaryCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/DictionaryCompoundWordTokenFilterFactory#init(Map[String,String]).mjava","sourceNew":"  public void init(Map<String, String> args) {\n    super.init(args);\n    dictFile = args.get(\"dictionary\");\n    if (null == dictFile) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"Missing required parameter: dictionary\");\n    }\n\n    minWordSize= getInt(\"minWordSize\",CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize= getInt(\"minSubwordSize\",CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize= getInt(\"maxSubwordSize\",CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\",true);\n  }\n\n","sourceOld":"  public void init(Map<String, String> args) {\n    super.init(args);\n    dictFile = args.get(\"dictionary\");\n    if (null == dictFile) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"Missing required parameter: dictionary\");\n    }\n\n    minWordSize= getInt(\"minWordSize\",CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE);\n    minSubwordSize= getInt(\"minSubwordSize\",CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE);\n    maxSubwordSize= getInt(\"maxSubwordSize\",CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE);\n    onlyLongestMatch = getBoolean(\"onlyLongestMatch\",true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c72b00c86bad3cbf232f5ad5a0b014c411475204":["3a70d25a69adc3ddd5d8f7fd7600d40ff454f9fd"],"3a70d25a69adc3ddd5d8f7fd7600d40ff454f9fd":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c72b00c86bad3cbf232f5ad5a0b014c411475204"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c72b00c86bad3cbf232f5ad5a0b014c411475204":["ad94625fb8d088209f46650c8097196fec67f00c"],"3a70d25a69adc3ddd5d8f7fd7600d40ff454f9fd":["c72b00c86bad3cbf232f5ad5a0b014c411475204"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3a70d25a69adc3ddd5d8f7fd7600d40ff454f9fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}