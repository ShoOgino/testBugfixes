{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testBoostsAreAppliedLast().mjava","commits":[{"id":"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6","date":1484565333,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testBoostsAreAppliedLast().mjava","pathOld":"/dev/null","sourceNew":"  // check boosts with non-distributive score source\n  public void testBoostsAreAppliedLast() throws Exception {\n\n    DoubleValuesSource scores\n        = DoubleValuesSource.function(DoubleValuesSource.SCORES, v -> Math.log(v + 4));\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"text\")), scores);\n    TopDocs plain = searcher.search(q1, 5);\n\n    Query boosted = new BoostQuery(q1, 2);\n    TopDocs afterboost = searcher.search(boosted, 5);\n    assertEquals(plain.totalHits, afterboost.totalHits);\n    for (int i = 0; i < 5; i++) {\n      assertEquals(plain.scoreDocs[i].doc, afterboost.scoreDocs[i].doc);\n      assertEquals(plain.scoreDocs[i].score, afterboost.scoreDocs[i].score / 2, 0.0001);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testBoostsAreAppliedLast().mjava","pathOld":"/dev/null","sourceNew":"  // check boosts with non-distributive score source\n  public void testBoostsAreAppliedLast() throws Exception {\n\n    DoubleValuesSource scores\n        = DoubleValuesSource.function(DoubleValuesSource.SCORES, v -> Math.log(v + 4));\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"text\")), scores);\n    TopDocs plain = searcher.search(q1, 5);\n\n    Query boosted = new BoostQuery(q1, 2);\n    TopDocs afterboost = searcher.search(boosted, 5);\n    assertEquals(plain.totalHits, afterboost.totalHits);\n    for (int i = 0; i < 5; i++) {\n      assertEquals(plain.scoreDocs[i].doc, afterboost.scoreDocs[i].doc);\n      assertEquals(plain.scoreDocs[i].score, afterboost.scoreDocs[i].score / 2, 0.0001);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"501fdb8d708778ae5368dd5c44879e1d46487e43","date":1494401395,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testBoostsAreAppliedLast().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testBoostsAreAppliedLast().mjava","sourceNew":"  // check boosts with non-distributive score source\n  public void testBoostsAreAppliedLast() throws Exception {\n\n    DoubleValuesSource scores\n        = DoubleValuesSource.function(DoubleValuesSource.SCORES, \"ln(v + 4)\", v -> Math.log(v + 4));\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"text\")), scores);\n    TopDocs plain = searcher.search(q1, 5);\n\n    Query boosted = new BoostQuery(q1, 2);\n    TopDocs afterboost = searcher.search(boosted, 5);\n    assertEquals(plain.totalHits, afterboost.totalHits);\n    for (int i = 0; i < 5; i++) {\n      assertEquals(plain.scoreDocs[i].doc, afterboost.scoreDocs[i].doc);\n      assertEquals(plain.scoreDocs[i].score, afterboost.scoreDocs[i].score / 2, 0.0001);\n    }\n\n  }\n\n","sourceOld":"  // check boosts with non-distributive score source\n  public void testBoostsAreAppliedLast() throws Exception {\n\n    DoubleValuesSource scores\n        = DoubleValuesSource.function(DoubleValuesSource.SCORES, v -> Math.log(v + 4));\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"text\")), scores);\n    TopDocs plain = searcher.search(q1, 5);\n\n    Query boosted = new BoostQuery(q1, 2);\n    TopDocs afterboost = searcher.search(boosted, 5);\n    assertEquals(plain.totalHits, afterboost.totalHits);\n    for (int i = 0; i < 5; i++) {\n      assertEquals(plain.scoreDocs[i].doc, afterboost.scoreDocs[i].doc);\n      assertEquals(plain.scoreDocs[i].score, afterboost.scoreDocs[i].score / 2, 0.0001);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testBoostsAreAppliedLast().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testBoostsAreAppliedLast().mjava","sourceNew":"  // check boosts with non-distributive score source\n  public void testBoostsAreAppliedLast() throws Exception {\n\n    DoubleValuesSource scores\n        = DoubleValuesSource.function(DoubleValuesSource.SCORES, \"ln(v + 4)\", v -> Math.log(v + 4));\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"text\")), scores);\n    TopDocs plain = searcher.search(q1, 5);\n\n    Query boosted = new BoostQuery(q1, 2);\n    TopDocs afterboost = searcher.search(boosted, 5);\n    assertEquals(plain.totalHits, afterboost.totalHits);\n    for (int i = 0; i < 5; i++) {\n      assertEquals(plain.scoreDocs[i].doc, afterboost.scoreDocs[i].doc);\n      assertEquals(plain.scoreDocs[i].score, afterboost.scoreDocs[i].score / 2, 0.0001);\n    }\n\n  }\n\n","sourceOld":"  // check boosts with non-distributive score source\n  public void testBoostsAreAppliedLast() throws Exception {\n\n    DoubleValuesSource scores\n        = DoubleValuesSource.function(DoubleValuesSource.SCORES, v -> Math.log(v + 4));\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"text\")), scores);\n    TopDocs plain = searcher.search(q1, 5);\n\n    Query boosted = new BoostQuery(q1, 2);\n    TopDocs afterboost = searcher.search(boosted, 5);\n    assertEquals(plain.totalHits, afterboost.totalHits);\n    for (int i = 0; i < 5; i++) {\n      assertEquals(plain.scoreDocs[i].doc, afterboost.scoreDocs[i].doc);\n      assertEquals(plain.scoreDocs[i].score, afterboost.scoreDocs[i].score / 2, 0.0001);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ea72350b903b90cb4fda2a5adbce31aa00c074","date":1498575219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testBoostsAreAppliedLast().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testBoostsAreAppliedLast().mjava","sourceNew":"  // check boosts with non-distributive score source\n  public void testBoostsAreAppliedLast() throws Exception {\n\n    DoubleValuesSource scores = function(DoubleValuesSource.SCORES, v -> Math.log(v + 4));\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"text\")), scores);\n    TopDocs plain = searcher.search(q1, 5);\n\n    Query boosted = new BoostQuery(q1, 2);\n    TopDocs afterboost = searcher.search(boosted, 5);\n    assertEquals(plain.totalHits, afterboost.totalHits);\n    for (int i = 0; i < 5; i++) {\n      assertEquals(plain.scoreDocs[i].doc, afterboost.scoreDocs[i].doc);\n      assertEquals(plain.scoreDocs[i].score, afterboost.scoreDocs[i].score / 2, 0.0001);\n    }\n\n  }\n\n","sourceOld":"  // check boosts with non-distributive score source\n  public void testBoostsAreAppliedLast() throws Exception {\n\n    DoubleValuesSource scores\n        = DoubleValuesSource.function(DoubleValuesSource.SCORES, \"ln(v + 4)\", v -> Math.log(v + 4));\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"text\")), scores);\n    TopDocs plain = searcher.search(q1, 5);\n\n    Query boosted = new BoostQuery(q1, 2);\n    TopDocs afterboost = searcher.search(boosted, 5);\n    assertEquals(plain.totalHits, afterboost.totalHits);\n    for (int i = 0; i < 5; i++) {\n      assertEquals(plain.scoreDocs[i].doc, afterboost.scoreDocs[i].doc);\n      assertEquals(plain.scoreDocs[i].score, afterboost.scoreDocs[i].score / 2, 0.0001);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testBoostsAreAppliedLast().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testBoostsAreAppliedLast().mjava","sourceNew":"  // check boosts with non-distributive score source\n  public void testBoostsAreAppliedLast() throws Exception {\n\n    DoubleValuesSource scores = function(DoubleValuesSource.SCORES, v -> Math.log(v + 4));\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"text\")), scores);\n    TopDocs plain = searcher.search(q1, 5);\n\n    Query boosted = new BoostQuery(q1, 2);\n    TopDocs afterboost = searcher.search(boosted, 5);\n    assertEquals(plain.totalHits, afterboost.totalHits);\n    for (int i = 0; i < 5; i++) {\n      assertEquals(plain.scoreDocs[i].doc, afterboost.scoreDocs[i].doc);\n      assertEquals(plain.scoreDocs[i].score, afterboost.scoreDocs[i].score / 2, 0.0001);\n    }\n\n  }\n\n","sourceOld":"  // check boosts with non-distributive score source\n  public void testBoostsAreAppliedLast() throws Exception {\n\n    DoubleValuesSource scores\n        = DoubleValuesSource.function(DoubleValuesSource.SCORES, \"ln(v + 4)\", v -> Math.log(v + 4));\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"text\")), scores);\n    TopDocs plain = searcher.search(q1, 5);\n\n    Query boosted = new BoostQuery(q1, 2);\n    TopDocs afterboost = searcher.search(boosted, 5);\n    assertEquals(plain.totalHits, afterboost.totalHits);\n    for (int i = 0; i < 5; i++) {\n      assertEquals(plain.scoreDocs[i].doc, afterboost.scoreDocs[i].doc);\n      assertEquals(plain.scoreDocs[i].score, afterboost.scoreDocs[i].score / 2, 0.0001);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testBoostsAreAppliedLast().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testBoostsAreAppliedLast().mjava","sourceNew":"  // check boosts with non-distributive score source\n  public void testBoostsAreAppliedLast() throws Exception {\n\n    DoubleValuesSource scores = function(DoubleValuesSource.SCORES, v -> Math.log(v + 4));\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"text\")), scores);\n    TopDocs plain = searcher.search(q1, 5);\n\n    Query boosted = new BoostQuery(q1, 2);\n    TopDocs afterboost = searcher.search(boosted, 5);\n    assertEquals(plain.totalHits, afterboost.totalHits);\n    for (int i = 0; i < 5; i++) {\n      assertEquals(plain.scoreDocs[i].doc, afterboost.scoreDocs[i].doc);\n      assertEquals(plain.scoreDocs[i].score, afterboost.scoreDocs[i].score / 2, 0.0001);\n    }\n\n  }\n\n","sourceOld":"  // check boosts with non-distributive score source\n  public void testBoostsAreAppliedLast() throws Exception {\n\n    DoubleValuesSource scores\n        = DoubleValuesSource.function(DoubleValuesSource.SCORES, \"ln(v + 4)\", v -> Math.log(v + 4));\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"text\")), scores);\n    TopDocs plain = searcher.search(q1, 5);\n\n    Query boosted = new BoostQuery(q1, 2);\n    TopDocs afterboost = searcher.search(boosted, 5);\n    assertEquals(plain.totalHits, afterboost.totalHits);\n    for (int i = 0; i < 5; i++) {\n      assertEquals(plain.scoreDocs[i].doc, afterboost.scoreDocs[i].doc);\n      assertEquals(plain.scoreDocs[i].score, afterboost.scoreDocs[i].score / 2, 0.0001);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62f3efc82b1ead830448bb27e2af9f89417401ea","date":1513619223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testBoostsAreAppliedLast().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testBoostsAreAppliedLast().mjava","sourceNew":"  // check boosts with non-distributive score source\n  public void testBoostsAreAppliedLast() throws Exception {\n\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(\"score\", DoubleValuesSource.SCORES);\n    Expression expr = JavascriptCompiler.compile(\"ln(score + 4)\");\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"text\")), expr.getDoubleValuesSource(bindings));\n    TopDocs plain = searcher.search(q1, 5);\n\n    Query boosted = new BoostQuery(q1, 2);\n    TopDocs afterboost = searcher.search(boosted, 5);\n    assertEquals(plain.totalHits, afterboost.totalHits);\n    for (int i = 0; i < 5; i++) {\n      assertEquals(plain.scoreDocs[i].doc, afterboost.scoreDocs[i].doc);\n      assertEquals(plain.scoreDocs[i].score, afterboost.scoreDocs[i].score / 2, 0.0001);\n    }\n\n  }\n\n","sourceOld":"  // check boosts with non-distributive score source\n  public void testBoostsAreAppliedLast() throws Exception {\n\n    DoubleValuesSource scores = function(DoubleValuesSource.SCORES, v -> Math.log(v + 4));\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"text\")), scores);\n    TopDocs plain = searcher.search(q1, 5);\n\n    Query boosted = new BoostQuery(q1, 2);\n    TopDocs afterboost = searcher.search(boosted, 5);\n    assertEquals(plain.totalHits, afterboost.totalHits);\n    for (int i = 0; i < 5; i++) {\n      assertEquals(plain.scoreDocs[i].doc, afterboost.scoreDocs[i].doc);\n      assertEquals(plain.scoreDocs[i].score, afterboost.scoreDocs[i].score / 2, 0.0001);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testBoostsAreAppliedLast().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testBoostsAreAppliedLast().mjava","sourceNew":"  // check boosts with non-distributive score source\n  public void testBoostsAreAppliedLast() throws Exception {\n\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(\"score\", DoubleValuesSource.SCORES);\n    Expression expr = JavascriptCompiler.compile(\"ln(score + 4)\");\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"text\")), expr.getDoubleValuesSource(bindings));\n    TopDocs plain = searcher.search(q1, 5);\n\n    Query boosted = new BoostQuery(q1, 2);\n    TopDocs afterboost = searcher.search(boosted, 5);\n    assertEquals(plain.totalHits.value, afterboost.totalHits.value);\n    for (int i = 0; i < 5; i++) {\n      assertEquals(plain.scoreDocs[i].doc, afterboost.scoreDocs[i].doc);\n      assertEquals(plain.scoreDocs[i].score, afterboost.scoreDocs[i].score / 2, 0.0001);\n    }\n\n  }\n\n","sourceOld":"  // check boosts with non-distributive score source\n  public void testBoostsAreAppliedLast() throws Exception {\n\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(\"score\", DoubleValuesSource.SCORES);\n    Expression expr = JavascriptCompiler.compile(\"ln(score + 4)\");\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"text\")), expr.getDoubleValuesSource(bindings));\n    TopDocs plain = searcher.search(q1, 5);\n\n    Query boosted = new BoostQuery(q1, 2);\n    TopDocs afterboost = searcher.search(boosted, 5);\n    assertEquals(plain.totalHits, afterboost.totalHits);\n    for (int i = 0; i < 5; i++) {\n      assertEquals(plain.scoreDocs[i].doc, afterboost.scoreDocs[i].doc);\n      assertEquals(plain.scoreDocs[i].score, afterboost.scoreDocs[i].score / 2, 0.0001);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41ea72350b903b90cb4fda2a5adbce31aa00c074":["501fdb8d708778ae5368dd5c44879e1d46487e43"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["c5bceed3ccfd33baff7dde1a56def37b6ccd66f6","501fdb8d708778ae5368dd5c44879e1d46487e43"],"501fdb8d708778ae5368dd5c44879e1d46487e43":["c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["62f3efc82b1ead830448bb27e2af9f89417401ea"],"62f3efc82b1ead830448bb27e2af9f89417401ea":["28288370235ed02234a64753cdbf0c6ec096304a"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"28288370235ed02234a64753cdbf0c6ec096304a":["501fdb8d708778ae5368dd5c44879e1d46487e43","41ea72350b903b90cb4fda2a5adbce31aa00c074"],"98f11c416d30e556e0004a9a84960702d12d35b1":["e9017cf144952056066919f1ebc7897ff9bd71b1","41ea72350b903b90cb4fda2a5adbce31aa00c074"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"41ea72350b903b90cb4fda2a5adbce31aa00c074":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["98f11c416d30e556e0004a9a84960702d12d35b1"],"501fdb8d708778ae5368dd5c44879e1d46487e43":["41ea72350b903b90cb4fda2a5adbce31aa00c074","e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["507e7decdf00981d09a74632ea30299a4ce6ba72","c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"62f3efc82b1ead830448bb27e2af9f89417401ea":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"28288370235ed02234a64753cdbf0c6ec096304a":["62f3efc82b1ead830448bb27e2af9f89417401ea"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6":["e9017cf144952056066919f1ebc7897ff9bd71b1","501fdb8d708778ae5368dd5c44879e1d46487e43","507e7decdf00981d09a74632ea30299a4ce6ba72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["507e7decdf00981d09a74632ea30299a4ce6ba72","98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}