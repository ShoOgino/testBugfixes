{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","commits":[{"id":"7d6bec22994bec86702ad05304ae983f7be5b5a7","date":1530715192,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","sourceNew":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      SimpleSolrResponse rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","sourceOld":"  static void fetchMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      SimpleSolrResponse rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      SimpleSolrResponse rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      SimpleSolrResponse rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5868a05ac7e3b4d7eec3a299acddc4f4943aee83","date":1542008345,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","sourceNew":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    if (!ctx.isNodeAlive(solrNode)) return;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      SimpleSolrResponse rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","sourceOld":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      SimpleSolrResponse rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","sourceNew":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    if (!ctx.isNodeAlive(solrNode)) return;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      \n      SimpleSolrResponse rsp = null;\n      int cnt = 0;\n      while (cnt++ < 3) {\n        try {\n          rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        } catch (SolrException | SolrServerException | NoHttpResponseException e) {\n          boolean hasCauseNoHttpResponseException = false;\n          Throwable cause = e;\n          while (cause != null) {\n            if (cause instanceof NoHttpResponseException) {\n              hasCauseNoHttpResponseException = true;\n              break;\n            }\n            cause = cause.getCause();\n          }\n          if (hasCauseNoHttpResponseException || e instanceof NoHttpResponseException) {\n            log.info(\"Error on getting remote info, trying again: \" + e.getMessage());\n            Thread.sleep(500);\n            continue;\n          } else {\n            throw e;\n          }\n        }\n      }\n      \n      \n      SimpleSolrResponse frsp = rsp;\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(frsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","sourceOld":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    if (!ctx.isNodeAlive(solrNode)) return;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      SimpleSolrResponse rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","bugFix":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d7a279783df4eb59276dac6cacd73d6de7e8807","date":1543645575,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","sourceNew":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    if (!ctx.isNodeAlive(solrNode)) return;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      \n      SimpleSolrResponse rsp = null;\n      int cnt = 0;\n      while (cnt++ < 3) {\n        try {\n          rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        } catch (SolrException | SolrServerException | IOException e) {\n          boolean hasCauseIOException = false;\n          Throwable cause = e;\n          while (cause != null) {\n            if (cause instanceof IOException) {\n              hasCauseIOException = true;\n              break;\n            }\n            cause = cause.getCause();\n          }\n          if (hasCauseIOException || e instanceof IOException) {\n            log.info(\"Error on getting remote info, trying again: \" + e.getMessage());\n            Thread.sleep(500);\n            continue;\n          } else {\n            throw e;\n          }\n        }\n      }\n      \n      \n      SimpleSolrResponse frsp = rsp;\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(frsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","sourceOld":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    if (!ctx.isNodeAlive(solrNode)) return;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      \n      SimpleSolrResponse rsp = null;\n      int cnt = 0;\n      while (cnt++ < 3) {\n        try {\n          rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        } catch (SolrException | SolrServerException | NoHttpResponseException e) {\n          boolean hasCauseNoHttpResponseException = false;\n          Throwable cause = e;\n          while (cause != null) {\n            if (cause instanceof NoHttpResponseException) {\n              hasCauseNoHttpResponseException = true;\n              break;\n            }\n            cause = cause.getCause();\n          }\n          if (hasCauseNoHttpResponseException || e instanceof NoHttpResponseException) {\n            log.info(\"Error on getting remote info, trying again: \" + e.getMessage());\n            Thread.sleep(500);\n            continue;\n          } else {\n            throw e;\n          }\n        }\n      }\n      \n      \n      SimpleSolrResponse frsp = rsp;\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(frsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dd49744e2e8021bfde113931265c0fcc6967ae6","date":1557218445,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","sourceNew":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    if (!ctx.isNodeAlive(solrNode)) return;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      \n      SimpleSolrResponse rsp = null;\n      int cnt = 0;\n      while (cnt++ < 3) {\n        try {\n          rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n          break;\n        } catch (SolrException | SolrServerException | IOException e) {\n          boolean hasCauseIOException = false;\n          Throwable cause = e;\n          while (cause != null) {\n            if (cause instanceof IOException) {\n              hasCauseIOException = true;\n              break;\n            }\n            cause = cause.getCause();\n          }\n          if (hasCauseIOException || e instanceof IOException) {\n            log.info(\"Error on getting remote info, trying again: \" + e.getMessage());\n            Thread.sleep(500);\n            continue;\n          } else {\n            throw e;\n          }\n        }\n      }\n      \n      \n      SimpleSolrResponse frsp = rsp;\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(frsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","sourceOld":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    if (!ctx.isNodeAlive(solrNode)) return;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      \n      SimpleSolrResponse rsp = null;\n      int cnt = 0;\n      while (cnt++ < 3) {\n        try {\n          rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        } catch (SolrException | SolrServerException | IOException e) {\n          boolean hasCauseIOException = false;\n          Throwable cause = e;\n          while (cause != null) {\n            if (cause instanceof IOException) {\n              hasCauseIOException = true;\n              break;\n            }\n            cause = cause.getCause();\n          }\n          if (hasCauseIOException || e instanceof IOException) {\n            log.info(\"Error on getting remote info, trying again: \" + e.getMessage());\n            Thread.sleep(500);\n            continue;\n          } else {\n            throw e;\n          }\n        }\n      }\n      \n      \n      SimpleSolrResponse frsp = rsp;\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(frsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239ac2cf147bbfbf488bc36002d5d26b2939d4ba","date":1587405343,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","sourceNew":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    if (!ctx.isNodeAlive(solrNode)) return;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      SimpleSolrResponse rsp = ctx.invokeWithRetry(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","sourceOld":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    if (!ctx.isNodeAlive(solrNode)) return;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      \n      SimpleSolrResponse rsp = null;\n      int cnt = 0;\n      while (cnt++ < 3) {\n        try {\n          rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);\n          break;\n        } catch (SolrException | SolrServerException | IOException e) {\n          boolean hasCauseIOException = false;\n          Throwable cause = e;\n          while (cause != null) {\n            if (cause instanceof IOException) {\n              hasCauseIOException = true;\n              break;\n            }\n            cause = cause.getCause();\n          }\n          if (hasCauseIOException || e instanceof IOException) {\n            log.info(\"Error on getting remote info, trying again: \" + e.getMessage());\n            Thread.sleep(500);\n            continue;\n          } else {\n            throw e;\n          }\n        }\n      }\n      \n      \n      SimpleSolrResponse frsp = rsp;\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(frsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"994eab87532060f539cec5351eaa699017edac03","date":1587575513,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","sourceNew":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    if (!ctx.isNodeAlive(solrNode)) return;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      SimpleSolrResponse rsp = ctx.invokeWithRetry(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node {}\", solrNode, e);\n    }\n  }\n\n","sourceOld":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    if (!ctx.isNodeAlive(solrNode)) return;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      SimpleSolrResponse rsp = ctx.invokeWithRetry(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node \" + solrNode, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#fetchReplicaMetrics(String,ClientSnitchCtx,Map[String,Object]).mjava","sourceNew":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    if (!ctx.isNodeAlive(solrNode)) return;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      SimpleSolrResponse rsp = ctx.invokeWithRetry(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          @SuppressWarnings({\"unchecked\"})\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node {}\", solrNode, e);\n    }\n  }\n\n","sourceOld":"  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {\n    if (!ctx.isNodeAlive(solrNode)) return;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[0]));\n    try {\n      SimpleSolrResponse rsp = ctx.invokeWithRetry(solrNode, CommonParams.METRICS_PATH, params);\n      metricsKeyVsTag.forEach((key, tag) -> {\n        Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n        if (tag instanceof Function) {\n          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);\n          ctx.getTags().put(p.first(), p.second());\n        } else {\n          if (v != null) ctx.getTags().put(tag.toString(), v);\n        }\n      });\n    } catch (Exception e) {\n      log.warn(\"could not get tags from node {}\", solrNode, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6bec22994bec86702ad05304ae983f7be5b5a7"],"5868a05ac7e3b4d7eec3a299acddc4f4943aee83":["7d6bec22994bec86702ad05304ae983f7be5b5a7"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["994eab87532060f539cec5351eaa699017edac03"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["5868a05ac7e3b4d7eec3a299acddc4f4943aee83"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d7a279783df4eb59276dac6cacd73d6de7e8807":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"994eab87532060f539cec5351eaa699017edac03":["239ac2cf147bbfbf488bc36002d5d26b2939d4ba"],"0dd49744e2e8021bfde113931265c0fcc6967ae6":["1d7a279783df4eb59276dac6cacd73d6de7e8807"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"239ac2cf147bbfbf488bc36002d5d26b2939d4ba":["0dd49744e2e8021bfde113931265c0fcc6967ae6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6bec22994bec86702ad05304ae983f7be5b5a7"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"5868a05ac7e3b4d7eec3a299acddc4f4943aee83":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1d7a279783df4eb59276dac6cacd73d6de7e8807"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7d6bec22994bec86702ad05304ae983f7be5b5a7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1d7a279783df4eb59276dac6cacd73d6de7e8807":["0dd49744e2e8021bfde113931265c0fcc6967ae6"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","5868a05ac7e3b4d7eec3a299acddc4f4943aee83","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"994eab87532060f539cec5351eaa699017edac03":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"0dd49744e2e8021bfde113931265c0fcc6967ae6":["239ac2cf147bbfbf488bc36002d5d26b2939d4ba"],"239ac2cf147bbfbf488bc36002d5d26b2939d4ba":["994eab87532060f539cec5351eaa699017edac03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}