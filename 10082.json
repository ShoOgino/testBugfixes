{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#testRandom().mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#testRandom().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/fst/FSTLookupTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random;\n    for (int i = 0; i < 5000; i++) {\n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), rnd.nextInt(100)));\n    }\n    lookup = new FSTLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term;\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(prefix, true, 10)) {\n          assertTrue(lr.key.startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandom() throws Exception {\n    List<TermFreq> freqs = Lists.newArrayList();\n    Random rnd = random;\n    for (int i = 0; i < 5000; i++) {\n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), rnd.nextInt(100)));\n    }\n    lookup = new FSTLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term;\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(prefix, true, 10)) {\n          Assert.assertTrue(lr.key.startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#testRandom().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/fst/FSTLookupTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random;\n    for (int i = 0; i < 5000; i++) {\n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), rnd.nextInt(100)));\n    }\n    lookup = new FSTLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term;\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(prefix, true, 10)) {\n          assertTrue(lr.key.startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandom() throws Exception {\n    List<TermFreq> freqs = Lists.newArrayList();\n    Random rnd = random;\n    for (int i = 0; i < 5000; i++) {\n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), rnd.nextInt(100)));\n    }\n    lookup = new FSTLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term;\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(prefix, true, 10)) {\n          Assert.assertTrue(lr.key.startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#testRandom().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/suggest/fst/FSTLookupTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random;\n    for (int i = 0; i < 5000; i++) {\n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), rnd.nextInt(100)));\n    }\n    lookup = new FSTLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term;\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(prefix, true, 10)) {\n          assertTrue(lr.key.startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandom() throws Exception {\n    List<TermFreq> freqs = Lists.newArrayList();\n    Random rnd = random;\n    for (int i = 0; i < 5000; i++) {\n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), rnd.nextInt(100)));\n    }\n    lookup = new FSTLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term;\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(prefix, true, 10)) {\n          Assert.assertTrue(lr.key.startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRandom().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#testRandom().mjava","sourceNew":"  @Nightly\n  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random;\n    for (int i = 0; i < 2500 + rnd.nextInt(2500); i++) {\n      float weight = rnd.nextFloat() * 100; \n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), weight));\n    }\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term;\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(prefix, true, 10)) {\n          assertTrue(lr.key.startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    List<TermFreq> freqs = new ArrayList<TermFreq>();\n    Random rnd = random;\n    for (int i = 0; i < 5000; i++) {\n      freqs.add(new TermFreq(\"\" + rnd.nextLong(), rnd.nextInt(100)));\n    }\n    lookup = new FSTLookup();\n    lookup.build(new TermFreqArrayIterator(freqs.toArray(new TermFreq[freqs.size()])));\n\n    for (TermFreq tf : freqs) {\n      final String term = tf.term;\n      for (int i = 1; i < term.length(); i++) {\n        String prefix = term.substring(0, i);\n        for (LookupResult lr : lookup.lookup(prefix, true, 10)) {\n          assertTrue(lr.key.startsWith(prefix));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["e230a61047bc041516c811baa08a7174d6f8322a"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e230a61047bc041516c811baa08a7174d6f8322a":["7bf07f4ebadc7539de83a531e64678350d78ca26","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}