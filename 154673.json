{"path":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTermsEnum#postings(Bits,PostingsEnum,int).mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTermsEnum#docs(Bits,DocsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n      assertThread(\"Terms enums\", creationThread);\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingPostingsEnum) {\n        reuse = ((AssertingPostingsEnum) reuse).in;\n      }\n      PostingsEnum docs = super.postings(liveDocs, reuse, flags);\n      return docs == null ? null : new AssertingPostingsEnum(docs);\n    }\n\n","sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n      assertThread(\"Terms enums\", creationThread);\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingDocsEnum) {\n        reuse = ((AssertingDocsEnum) reuse).in;\n      }\n      DocsEnum docs = super.docs(liveDocs, reuse, flags);\n      return docs == null ? null : new AssertingDocsEnum(docs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebcb21d043bc7d0dba7d6a2999514e4f4af22ab0","date":1424186100,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n      assertThread(\"Terms enums\", creationThread);\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // reuse if the codec reused\n      final PostingsEnum actualReuse;\n      if (reuse instanceof AssertingPostingsEnum) {\n        actualReuse = ((AssertingPostingsEnum) reuse).in;\n      } else {\n        actualReuse = null;\n      }\n      PostingsEnum docs = super.postings(liveDocs, actualReuse, flags);\n      if (docs == null) {\n        return null;\n      } else if (docs == actualReuse) {\n        // codec reused, reset asserting state\n        ((AssertingPostingsEnum)reuse).reset();\n        return reuse;\n      } else {\n        return new AssertingPostingsEnum(docs);\n      }\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n      assertThread(\"Terms enums\", creationThread);\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingPostingsEnum) {\n        reuse = ((AssertingPostingsEnum) reuse).in;\n      }\n      PostingsEnum docs = super.postings(liveDocs, reuse, flags);\n      return docs == null ? null : new AssertingPostingsEnum(docs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5311f0bff57ce15a23909f4cfb953773630534","date":1424827033,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n      assertThread(\"Terms enums\", creationThread);\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // reuse if the codec reused\n      final PostingsEnum actualReuse;\n      if (reuse instanceof AssertingPostingsEnum) {\n        actualReuse = ((AssertingPostingsEnum) reuse).in;\n      } else {\n        actualReuse = null;\n      }\n      PostingsEnum docs = super.postings(liveDocs, actualReuse, flags);\n      assert docs != null;\n      if (docs == actualReuse) {\n        // codec reused, reset asserting state\n        ((AssertingPostingsEnum)reuse).reset();\n        return reuse;\n      } else {\n        return new AssertingPostingsEnum(docs);\n      }\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n      assertThread(\"Terms enums\", creationThread);\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // reuse if the codec reused\n      final PostingsEnum actualReuse;\n      if (reuse instanceof AssertingPostingsEnum) {\n        actualReuse = ((AssertingPostingsEnum) reuse).in;\n      } else {\n        actualReuse = null;\n      }\n      PostingsEnum docs = super.postings(liveDocs, actualReuse, flags);\n      if (docs == null) {\n        return null;\n      } else if (docs == actualReuse) {\n        // codec reused, reset asserting state\n        ((AssertingPostingsEnum)reuse).reset();\n        return reuse;\n      } else {\n        return new AssertingPostingsEnum(docs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n      assertThread(\"Terms enums\", creationThread);\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // reuse if the codec reused\n      final PostingsEnum actualReuse;\n      if (reuse instanceof AssertingPostingsEnum) {\n        actualReuse = ((AssertingPostingsEnum) reuse).in;\n      } else {\n        actualReuse = null;\n      }\n      PostingsEnum docs = super.postings(liveDocs, actualReuse, flags);\n      assert docs != null;\n      if (docs == actualReuse) {\n        // codec reused, reset asserting state\n        ((AssertingPostingsEnum)reuse).reset();\n        return reuse;\n      } else {\n        return new AssertingPostingsEnum(docs);\n      }\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n      assertThread(\"Terms enums\", creationThread);\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // reuse if the codec reused\n      final PostingsEnum actualReuse;\n      if (reuse instanceof AssertingPostingsEnum) {\n        actualReuse = ((AssertingPostingsEnum) reuse).in;\n      } else {\n        actualReuse = null;\n      }\n      PostingsEnum docs = super.postings(liveDocs, actualReuse, flags);\n      if (docs == null) {\n        return null;\n      } else if (docs == actualReuse) {\n        // codec reused, reset asserting state\n        ((AssertingPostingsEnum)reuse).reset();\n        return reuse;\n      } else {\n        return new AssertingPostingsEnum(docs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n      assertThread(\"Terms enums\", creationThread);\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // reuse if the codec reused\n      final PostingsEnum actualReuse;\n      if (reuse instanceof AssertingPostingsEnum) {\n        actualReuse = ((AssertingPostingsEnum) reuse).in;\n      } else {\n        actualReuse = null;\n      }\n      PostingsEnum docs = super.postings(actualReuse, flags);\n      assert docs != null;\n      if (docs == actualReuse) {\n        // codec reused, reset asserting state\n        ((AssertingPostingsEnum)reuse).reset();\n        return reuse;\n      } else {\n        return new AssertingPostingsEnum(docs);\n      }\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n      assertThread(\"Terms enums\", creationThread);\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // reuse if the codec reused\n      final PostingsEnum actualReuse;\n      if (reuse instanceof AssertingPostingsEnum) {\n        actualReuse = ((AssertingPostingsEnum) reuse).in;\n      } else {\n        actualReuse = null;\n      }\n      PostingsEnum docs = super.postings(liveDocs, actualReuse, flags);\n      assert docs != null;\n      if (docs == actualReuse) {\n        // codec reused, reset asserting state\n        ((AssertingPostingsEnum)reuse).reset();\n        return reuse;\n      } else {\n        return new AssertingPostingsEnum(docs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb5311f0bff57ce15a23909f4cfb953773630534":["ebcb21d043bc7d0dba7d6a2999514e4f4af22ab0"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["ebcb21d043bc7d0dba7d6a2999514e4f4af22ab0","cb5311f0bff57ce15a23909f4cfb953773630534"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"ebcb21d043bc7d0dba7d6a2999514e4f4af22ab0":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"cb5311f0bff57ce15a23909f4cfb953773630534":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["ebcb21d043bc7d0dba7d6a2999514e4f4af22ab0"],"ebcb21d043bc7d0dba7d6a2999514e4f4af22ab0":["cb5311f0bff57ce15a23909f4cfb953773630534","6b4e3cd382d0d075a0f1725649c084bb6510c483"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}