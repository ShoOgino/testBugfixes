{"path":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","commits":[{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      int numNormGen = input.readInt();\n      if (numNormGen == -1) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = isCompoundFile == 0;\n    } else {\n      delGen = 0;\n      normGen = null;\n      isCompoundFile = 0;\n      preLockless = true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8969a184df55d25d61e85be785987fbf830d4028","date":1168143561,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      int numNormGen = input.readInt();\n      if (numNormGen == -1) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = isCompoundFile == 0;\n    } else {\n      delGen = 0;\n      normGen = null;\n      isCompoundFile = 0;\n      preLockless = true;\n    }\n    withNrm = 0;\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      int numNormGen = input.readInt();\n      if (numNormGen == -1) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = isCompoundFile == 0;\n    } else {\n      delGen = 0;\n      normGen = null;\n      isCompoundFile = 0;\n      preLockless = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a5cfde941b2f8208d739344fef3821381885618","date":1168979092,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == -1) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = isCompoundFile == 0;\n    } else {\n      delGen = 0;\n      normGen = null;\n      isCompoundFile = 0;\n      preLockless = true;\n      hasSingleNormFile = false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      int numNormGen = input.readInt();\n      if (numNormGen == -1) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = isCompoundFile == 0;\n    } else {\n      delGen = 0;\n      normGen = null;\n      isCompoundFile = 0;\n      preLockless = true;\n    }\n    withNrm = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a","date":1172364225,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == -1) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = isCompoundFile == 0;\n    } else {\n      delGen = 0;\n      normGen = null;\n      isCompoundFile = 0;\n      preLockless = true;\n      hasSingleNormFile = false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  public SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == -1) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = isCompoundFile == 0;\n    } else {\n      delGen = 0;\n      normGen = null;\n      isCompoundFile = 0;\n      preLockless = true;\n      hasSingleNormFile = false;\n    }\n  }\n\n","bugFix":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b685e89f45e34ea31f9ca89912e4f29038818ff6","date":1173986546,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == -1) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = isCompoundFile == 0;\n    } else {\n      delGen = 0;\n      normGen = null;\n      isCompoundFile = 0;\n      preLockless = true;\n      hasSingleNormFile = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SHARED_DOC_STORE) {\n        docStoreOffset = input.readInt();\n        if (docStoreOffset != -1) {\n          docStoreSegment = input.readString();\n          docStoreIsCompoundFile = (1 == input.readByte());\n        } else {\n          docStoreSegment = name;\n          docStoreIsCompoundFile = false;\n        }\n      } else {\n        docStoreOffset = -1;\n        docStoreSegment = name;\n        docStoreIsCompoundFile = false;\n      }\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n      docStoreOffset = -1;\n      docStoreIsCompoundFile = false;\n      docStoreSegment = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34e2c71b6406443562df54db233fde0728502f64","date":1209294850,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SHARED_DOC_STORE) {\n        docStoreOffset = input.readInt();\n        if (docStoreOffset != -1) {\n          docStoreSegment = input.readString();\n          docStoreIsCompoundFile = (1 == input.readByte());\n        } else {\n          docStoreSegment = name;\n          docStoreIsCompoundFile = false;\n        }\n      } else {\n        docStoreOffset = -1;\n        docStoreSegment = name;\n        docStoreIsCompoundFile = false;\n      }\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n      if (format <= SegmentInfos.FORMAT_DEL_COUNT) {\n        delCount = input.readInt();\n        assert delCount <= docCount;\n      } else\n        delCount = -1;\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n      docStoreOffset = -1;\n      docStoreIsCompoundFile = false;\n      docStoreSegment = null;\n      delCount = -1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SHARED_DOC_STORE) {\n        docStoreOffset = input.readInt();\n        if (docStoreOffset != -1) {\n          docStoreSegment = input.readString();\n          docStoreIsCompoundFile = (1 == input.readByte());\n        } else {\n          docStoreSegment = name;\n          docStoreIsCompoundFile = false;\n        }\n      } else {\n        docStoreOffset = -1;\n        docStoreSegment = name;\n        docStoreIsCompoundFile = false;\n      }\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n      docStoreOffset = -1;\n      docStoreIsCompoundFile = false;\n      docStoreSegment = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902ba79f4590a41c663c447756d2e5041cbbdda9","date":1217956662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SHARED_DOC_STORE) {\n        docStoreOffset = input.readInt();\n        if (docStoreOffset != -1) {\n          docStoreSegment = input.readString();\n          docStoreIsCompoundFile = (1 == input.readByte());\n        } else {\n          docStoreSegment = name;\n          docStoreIsCompoundFile = false;\n        }\n      } else {\n        docStoreOffset = -1;\n        docStoreSegment = name;\n        docStoreIsCompoundFile = false;\n      }\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n      if (format <= SegmentInfos.FORMAT_DEL_COUNT) {\n        delCount = input.readInt();\n        assert delCount <= docCount;\n      } else\n        delCount = -1;\n      if (format <= SegmentInfos.FORMAT_HAS_PROX)\n        hasProx = input.readByte() == 1;\n      else\n        hasProx = true;\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n      docStoreOffset = -1;\n      docStoreIsCompoundFile = false;\n      docStoreSegment = null;\n      delCount = -1;\n      hasProx = true;\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SHARED_DOC_STORE) {\n        docStoreOffset = input.readInt();\n        if (docStoreOffset != -1) {\n          docStoreSegment = input.readString();\n          docStoreIsCompoundFile = (1 == input.readByte());\n        } else {\n          docStoreSegment = name;\n          docStoreIsCompoundFile = false;\n        }\n      } else {\n        docStoreOffset = -1;\n        docStoreSegment = name;\n        docStoreIsCompoundFile = false;\n      }\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n      if (format <= SegmentInfos.FORMAT_DEL_COUNT) {\n        delCount = input.readInt();\n        assert delCount <= docCount;\n      } else\n        delCount = -1;\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n      docStoreOffset = -1;\n      docStoreIsCompoundFile = false;\n      docStoreSegment = null;\n      delCount = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3ab91f3bb602daf6393fa7f78b11afd3400d669","date":1243282044,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SHARED_DOC_STORE) {\n        docStoreOffset = input.readInt();\n        if (docStoreOffset != -1) {\n          docStoreSegment = input.readString();\n          docStoreIsCompoundFile = (1 == input.readByte());\n        } else {\n          docStoreSegment = name;\n          docStoreIsCompoundFile = false;\n        }\n      } else {\n        docStoreOffset = -1;\n        docStoreSegment = name;\n        docStoreIsCompoundFile = false;\n      }\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n      if (format <= SegmentInfos.FORMAT_DEL_COUNT) {\n        delCount = input.readInt();\n        assert delCount <= docCount;\n      } else\n        delCount = -1;\n      if (format <= SegmentInfos.FORMAT_HAS_PROX)\n        hasProx = input.readByte() == 1;\n      else\n        hasProx = true;\n\n      if (format <= SegmentInfos.FORMAT_DIAGNOSTICS) {\n        diagnostics = input.readStringStringMap();\n      } else {\n        diagnostics = Collections.EMPTY_MAP;\n      }\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n      docStoreOffset = -1;\n      docStoreIsCompoundFile = false;\n      docStoreSegment = null;\n      delCount = -1;\n      hasProx = true;\n      diagnostics = Collections.EMPTY_MAP;\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SHARED_DOC_STORE) {\n        docStoreOffset = input.readInt();\n        if (docStoreOffset != -1) {\n          docStoreSegment = input.readString();\n          docStoreIsCompoundFile = (1 == input.readByte());\n        } else {\n          docStoreSegment = name;\n          docStoreIsCompoundFile = false;\n        }\n      } else {\n        docStoreOffset = -1;\n        docStoreSegment = name;\n        docStoreIsCompoundFile = false;\n      }\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n      if (format <= SegmentInfos.FORMAT_DEL_COUNT) {\n        delCount = input.readInt();\n        assert delCount <= docCount;\n      } else\n        delCount = -1;\n      if (format <= SegmentInfos.FORMAT_HAS_PROX)\n        hasProx = input.readByte() == 1;\n      else\n        hasProx = true;\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n      docStoreOffset = -1;\n      docStoreIsCompoundFile = false;\n      docStoreSegment = null;\n      delCount = -1;\n      hasProx = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SHARED_DOC_STORE) {\n        docStoreOffset = input.readInt();\n        if (docStoreOffset != -1) {\n          docStoreSegment = input.readString();\n          docStoreIsCompoundFile = (1 == input.readByte());\n        } else {\n          docStoreSegment = name;\n          docStoreIsCompoundFile = false;\n        }\n      } else {\n        docStoreOffset = -1;\n        docStoreSegment = name;\n        docStoreIsCompoundFile = false;\n      }\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n      if (format <= SegmentInfos.FORMAT_DEL_COUNT) {\n        delCount = input.readInt();\n        assert delCount <= docCount;\n      } else\n        delCount = -1;\n      if (format <= SegmentInfos.FORMAT_HAS_PROX)\n        hasProx = input.readByte() == 1;\n      else\n        hasProx = true;\n\n      if (format <= SegmentInfos.FORMAT_DIAGNOSTICS) {\n        diagnostics = input.readStringStringMap();\n      } else {\n        diagnostics = Collections.<String,String>emptyMap();\n      }\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n      docStoreOffset = -1;\n      docStoreIsCompoundFile = false;\n      docStoreSegment = null;\n      delCount = -1;\n      hasProx = true;\n      diagnostics = Collections.<String,String>emptyMap();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SHARED_DOC_STORE) {\n        docStoreOffset = input.readInt();\n        if (docStoreOffset != -1) {\n          docStoreSegment = input.readString();\n          docStoreIsCompoundFile = (1 == input.readByte());\n        } else {\n          docStoreSegment = name;\n          docStoreIsCompoundFile = false;\n        }\n      } else {\n        docStoreOffset = -1;\n        docStoreSegment = name;\n        docStoreIsCompoundFile = false;\n      }\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n      if (format <= SegmentInfos.FORMAT_DEL_COUNT) {\n        delCount = input.readInt();\n        assert delCount <= docCount;\n      } else\n        delCount = -1;\n      if (format <= SegmentInfos.FORMAT_HAS_PROX)\n        hasProx = input.readByte() == 1;\n      else\n        hasProx = true;\n\n      if (format <= SegmentInfos.FORMAT_DIAGNOSTICS) {\n        diagnostics = input.readStringStringMap();\n      } else {\n        diagnostics = Collections.EMPTY_MAP;\n      }\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n      docStoreOffset = -1;\n      docStoreIsCompoundFile = false;\n      docStoreSegment = null;\n      delCount = -1;\n      hasProx = true;\n      diagnostics = Collections.EMPTY_MAP;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#SegmentInfo(Directory,int,IndexInput).mjava","sourceNew":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SHARED_DOC_STORE) {\n        docStoreOffset = input.readInt();\n        if (docStoreOffset != -1) {\n          docStoreSegment = input.readString();\n          docStoreIsCompoundFile = (1 == input.readByte());\n        } else {\n          docStoreSegment = name;\n          docStoreIsCompoundFile = false;\n        }\n      } else {\n        docStoreOffset = -1;\n        docStoreSegment = name;\n        docStoreIsCompoundFile = false;\n      }\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n      if (format <= SegmentInfos.FORMAT_DEL_COUNT) {\n        delCount = input.readInt();\n        assert delCount <= docCount;\n      } else\n        delCount = -1;\n      if (format <= SegmentInfos.FORMAT_HAS_PROX)\n        hasProx = input.readByte() == 1;\n      else\n        hasProx = true;\n\n      if (format <= SegmentInfos.FORMAT_DIAGNOSTICS) {\n        diagnostics = input.readStringStringMap();\n      } else {\n        diagnostics = Collections.<String,String>emptyMap();\n      }\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n      docStoreOffset = -1;\n      docStoreIsCompoundFile = false;\n      docStoreSegment = null;\n      delCount = -1;\n      hasProx = true;\n      diagnostics = Collections.<String,String>emptyMap();\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct a new SegmentInfo instance by reading a\n   * previously saved SegmentInfo from input.\n   *\n   * @param dir directory to load from\n   * @param format format of the segments info file\n   * @param input input handle to read segment info from\n   */\n  SegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    this.dir = dir;\n    name = input.readString();\n    docCount = input.readInt();\n    if (format <= SegmentInfos.FORMAT_LOCKLESS) {\n      delGen = input.readLong();\n      if (format <= SegmentInfos.FORMAT_SHARED_DOC_STORE) {\n        docStoreOffset = input.readInt();\n        if (docStoreOffset != -1) {\n          docStoreSegment = input.readString();\n          docStoreIsCompoundFile = (1 == input.readByte());\n        } else {\n          docStoreSegment = name;\n          docStoreIsCompoundFile = false;\n        }\n      } else {\n        docStoreOffset = -1;\n        docStoreSegment = name;\n        docStoreIsCompoundFile = false;\n      }\n      if (format <= SegmentInfos.FORMAT_SINGLE_NORM_FILE) {\n        hasSingleNormFile = (1 == input.readByte());\n      } else {\n        hasSingleNormFile = false;\n      }\n      int numNormGen = input.readInt();\n      if (numNormGen == NO) {\n        normGen = null;\n      } else {\n        normGen = new long[numNormGen];\n        for(int j=0;j<numNormGen;j++) {\n          normGen[j] = input.readLong();\n        }\n      }\n      isCompoundFile = input.readByte();\n      preLockless = (isCompoundFile == CHECK_DIR);\n      if (format <= SegmentInfos.FORMAT_DEL_COUNT) {\n        delCount = input.readInt();\n        assert delCount <= docCount;\n      } else\n        delCount = -1;\n      if (format <= SegmentInfos.FORMAT_HAS_PROX)\n        hasProx = input.readByte() == 1;\n      else\n        hasProx = true;\n\n      if (format <= SegmentInfos.FORMAT_DIAGNOSTICS) {\n        diagnostics = input.readStringStringMap();\n      } else {\n        diagnostics = Collections.<String,String>emptyMap();\n      }\n    } else {\n      delGen = CHECK_DIR;\n      normGen = null;\n      isCompoundFile = CHECK_DIR;\n      preLockless = true;\n      hasSingleNormFile = false;\n      docStoreOffset = -1;\n      docStoreIsCompoundFile = false;\n      docStoreSegment = null;\n      delCount = -1;\n      hasProx = true;\n      diagnostics = Collections.<String,String>emptyMap();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34e2c71b6406443562df54db233fde0728502f64":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a"],"a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a":["8a5cfde941b2f8208d739344fef3821381885618"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["34e2c71b6406443562df54db233fde0728502f64"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"8a5cfde941b2f8208d739344fef3821381885618":["8969a184df55d25d61e85be785987fbf830d4028"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8969a184df55d25d61e85be785987fbf830d4028":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"]},"commit2Childs":{"34e2c71b6406443562df54db233fde0728502f64":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["34e2c71b6406443562df54db233fde0728502f64"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8a5cfde941b2f8208d739344fef3821381885618":["a8a6f0cea0d6b50602e9b67dbf17eb1fb8ecf14a"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["8969a184df55d25d61e85be785987fbf830d4028"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"8969a184df55d25d61e85be785987fbf830d4028":["8a5cfde941b2f8208d739344fef3821381885618"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}