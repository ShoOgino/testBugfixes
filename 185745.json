{"path":"src/java/org/apache/solr/update/DirectUpdateHandler#delete(DeleteUpdateCommand).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler#delete(DeleteUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  /************** Direct update handler - pseudo code ***********\n  def add(doc, id, allowDups, overwritePending, overwriteCommitted):\n    if not overwritePending and not overwriteCommitted:\n      #special case... no need to check pending set, and we don't keep\n      #any state around about this addition\n      if allowDups:\n        committed[id]=doc  #100\n        return\n      else:\n        #if no dups allowed, we must check the *current* index (pending and committed)\n        if not committed[id]: committed[id]=doc  #000\n        return\n    #001  (searchd addConditionally)\n    if not allowDups and not overwritePending and pending[id]: return\n    del committed[id]  #delete from pending and committed  111 011\n    committed[id]=doc\n    pending[id]=True\n  ****************************************************************/\n\n  // could return the number of docs deleted, but is that always possible to know???\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException(400,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException(400,\"operation not supported\" + cmd);\n\n    synchronized(this) {\n      deleteInIndex(cmd.id);\n      pset.remove(cmd.id);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17eb7532ac121036d18264e69542675407105635","date":1144877226,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler#delete(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler#delete(DeleteUpdateCommand).mjava","sourceNew":"  /************** Direct update handler - pseudo code ***********\n  def add(doc, id, allowDups, overwritePending, overwriteCommitted):\n    if not overwritePending and not overwriteCommitted:\n      #special case... no need to check pending set, and we don't keep\n      #any state around about this addition\n      if allowDups:\n        committed[id]=doc  #100\n        return\n      else:\n        #if no dups allowed, we must check the *current* index (pending and committed)\n        if not committed[id]: committed[id]=doc  #000\n        return\n    #001  (searchd addConditionally)\n    if not allowDups and not overwritePending and pending[id]: return\n    del committed[id]  #delete from pending and committed  111 011\n    committed[id]=doc\n    pending[id]=True\n  ****************************************************************/\n\n  // could return the number of docs deleted, but is that always possible to know???\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException(400,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException(400,\"operation not supported\" + cmd);\n    String indexedId = idFieldType.toInternal(cmd.id);\n    synchronized(this) {\n      deleteInIndex(indexedId);\n      pset.remove(indexedId);\n    }\n  }\n\n","sourceOld":"  /************** Direct update handler - pseudo code ***********\n  def add(doc, id, allowDups, overwritePending, overwriteCommitted):\n    if not overwritePending and not overwriteCommitted:\n      #special case... no need to check pending set, and we don't keep\n      #any state around about this addition\n      if allowDups:\n        committed[id]=doc  #100\n        return\n      else:\n        #if no dups allowed, we must check the *current* index (pending and committed)\n        if not committed[id]: committed[id]=doc  #000\n        return\n    #001  (searchd addConditionally)\n    if not allowDups and not overwritePending and pending[id]: return\n    del committed[id]  #delete from pending and committed  111 011\n    committed[id]=doc\n    pending[id]=True\n  ****************************************************************/\n\n  // could return the number of docs deleted, but is that always possible to know???\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException(400,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException(400,\"operation not supported\" + cmd);\n\n    synchronized(this) {\n      deleteInIndex(cmd.id);\n      pset.remove(cmd.id);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler#delete(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler#delete(DeleteUpdateCommand).mjava","sourceNew":"  /************** Direct update handler - pseudo code ***********\n  def add(doc, id, allowDups, overwritePending, overwriteCommitted):\n    if not overwritePending and not overwriteCommitted:\n      #special case... no need to check pending set, and we don't keep\n      #any state around about this addition\n      if allowDups:\n        committed[id]=doc  #100\n        return\n      else:\n        #if no dups allowed, we must check the *current* index (pending and committed)\n        if not committed[id]: committed[id]=doc  #000\n        return\n    #001  (searchd addConditionally)\n    if not allowDups and not overwritePending and pending[id]: return\n    del committed[id]  #delete from pending and committed  111 011\n    committed[id]=doc\n    pending[id]=True\n  ****************************************************************/\n\n  // could return the number of docs deleted, but is that always possible to know???\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n    String indexedId = idFieldType.toInternal(cmd.id);\n    synchronized(this) {\n      deleteInIndex(indexedId);\n      pset.remove(indexedId);\n    }\n  }\n\n","sourceOld":"  /************** Direct update handler - pseudo code ***********\n  def add(doc, id, allowDups, overwritePending, overwriteCommitted):\n    if not overwritePending and not overwriteCommitted:\n      #special case... no need to check pending set, and we don't keep\n      #any state around about this addition\n      if allowDups:\n        committed[id]=doc  #100\n        return\n      else:\n        #if no dups allowed, we must check the *current* index (pending and committed)\n        if not committed[id]: committed[id]=doc  #000\n        return\n    #001  (searchd addConditionally)\n    if not allowDups and not overwritePending and pending[id]: return\n    del committed[id]  #delete from pending and committed  111 011\n    committed[id]=doc\n    pending[id]=True\n  ****************************************************************/\n\n  // could return the number of docs deleted, but is that always possible to know???\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException(400,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException(400,\"operation not supported\" + cmd);\n    String indexedId = idFieldType.toInternal(cmd.id);\n    synchronized(this) {\n      deleteInIndex(indexedId);\n      pset.remove(indexedId);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler#delete(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler#delete(DeleteUpdateCommand).mjava","sourceNew":"  /************** Direct update handler - pseudo code ***********\n  def add(doc, id, allowDups, overwritePending, overwriteCommitted):\n    if not overwritePending and not overwriteCommitted:\n      #special case... no need to check pending set, and we don't keep\n      #any state around about this addition\n      if allowDups:\n        committed[id]=doc  #100\n        return\n      else:\n        #if no dups allowed, we must check the *current* index (pending and committed)\n        if not committed[id]: committed[id]=doc  #000\n        return\n    #001  (searchd addConditionally)\n    if not allowDups and not overwritePending and pending[id]: return\n    del committed[id]  #delete from pending and committed  111 011\n    committed[id]=doc\n    pending[id]=True\n  ****************************************************************/\n\n  // could return the number of docs deleted, but is that always possible to know???\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n    String indexedId = idFieldType.toInternal(cmd.id);\n    synchronized(this) {\n      deleteInIndex(indexedId);\n      pset.remove(indexedId);\n    }\n  }\n\n","sourceOld":"  /************** Direct update handler - pseudo code ***********\n  def add(doc, id, allowDups, overwritePending, overwriteCommitted):\n    if not overwritePending and not overwriteCommitted:\n      #special case... no need to check pending set, and we don't keep\n      #any state around about this addition\n      if allowDups:\n        committed[id]=doc  #100\n        return\n      else:\n        #if no dups allowed, we must check the *current* index (pending and committed)\n        if not committed[id]: committed[id]=doc  #000\n        return\n    #001  (searchd addConditionally)\n    if not allowDups and not overwritePending and pending[id]: return\n    del committed[id]  #delete from pending and committed  111 011\n    committed[id]=doc\n    pending[id]=True\n  ****************************************************************/\n\n  // could return the number of docs deleted, but is that always possible to know???\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n    String indexedId = idFieldType.toInternal(cmd.id);\n    synchronized(this) {\n      deleteInIndex(indexedId);\n      pset.remove(indexedId);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["17eb7532ac121036d18264e69542675407105635"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"17eb7532ac121036d18264e69542675407105635":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["17eb7532ac121036d18264e69542675407105635"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["ad94625fb8d088209f46650c8097196fec67f00c"],"17eb7532ac121036d18264e69542675407105635":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}