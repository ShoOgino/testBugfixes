{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#readRow(Map[String,Object],String).mjava","commits":[{"id":"d902f463d0a39aa9fc43326e245a5e5c94295d68","date":1217857015,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#readRow(Map[String,Object],String).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, Object> readRow(Map<String, Object> record, String xpath) {\n     if (useSolrAddXml) {\n       List<String> names = (List<String>) record.get(\"name\");\n       List<String> values = (List<String>) record.get(\"value\");\n       Map<String, Object> row = new HashMap<String, Object>();\n       for (int i = 0; i < names.size(); i++) {\n         if (row.containsKey(names.get(i))) {\n           Object existing = row.get(names.get(i));\n           if (existing instanceof List) {\n             List list = (List) existing;\n             list.add(values.get(i));\n           } else {\n             List list = new ArrayList();\n             list.add(existing);\n             list.add(values.get(i));\n             row.put(names.get(i), list);\n           }\n         } else {\n           row.put(names.get(i), values.get(i));\n         }\n       }\n       return row;\n     } else {\n       record.put(XPATH_FIELD_NAME, xpath);\n       return  record;\n     }\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b5d20090448d280035afb31f1fd2e67ff43336b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62","date":1226483472,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#readRow(Map[String,Object],String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#readRow(Map[String,Object],String).mjava","sourceNew":"  private Map<String, Object> readRow(Map<String, Object> record, String xpath) {\n    if (useSolrAddXml) {\n      List<String> names = (List<String>) record.get(\"name\");\n      List<String> values = (List<String>) record.get(\"value\");\n      Map<String, Object> row = new HashMap<String, Object>();\n      for (int i = 0; i < names.size(); i++) {\n        if (row.containsKey(names.get(i))) {\n          Object existing = row.get(names.get(i));\n          if (existing instanceof List) {\n            List list = (List) existing;\n            list.add(values.get(i));\n          } else {\n            List list = new ArrayList();\n            list.add(existing);\n            list.add(values.get(i));\n            row.put(names.get(i), list);\n          }\n        } else {\n          row.put(names.get(i), values.get(i));\n        }\n      }\n      return row;\n    } else {\n      record.put(XPATH_FIELD_NAME, xpath);\n      return record;\n    }\n  }\n\n","sourceOld":"  private Map<String, Object> readRow(Map<String, Object> record, String xpath) {\n     if (useSolrAddXml) {\n       List<String> names = (List<String>) record.get(\"name\");\n       List<String> values = (List<String>) record.get(\"value\");\n       Map<String, Object> row = new HashMap<String, Object>();\n       for (int i = 0; i < names.size(); i++) {\n         if (row.containsKey(names.get(i))) {\n           Object existing = row.get(names.get(i));\n           if (existing instanceof List) {\n             List list = (List) existing;\n             list.add(values.get(i));\n           } else {\n             List list = new ArrayList();\n             list.add(existing);\n             list.add(values.get(i));\n             row.put(names.get(i), list);\n           }\n         } else {\n           row.put(names.get(i), values.get(i));\n         }\n       }\n       return row;\n     } else {\n       record.put(XPATH_FIELD_NAME, xpath);\n       return  record;\n     }\n   }\n\n","bugFix":null,"bugIntro":["800df3fbc871ee10f1781a4e8fa51e4ec808d9ba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"800df3fbc871ee10f1781a4e8fa51e4ec808d9ba","date":1237571234,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#readRow(Map[String,Object],String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#readRow(Map[String,Object],String).mjava","sourceNew":"  private Map<String, Object> readRow(Map<String, Object> record, String xpath) {\n    if (useSolrAddXml) {\n      List<String> names = (List<String>) record.get(\"name\");\n      List<String> values = (List<String>) record.get(\"value\");\n      Map<String, Object> row = new HashMap<String, Object>();\n      for (int i = 0; i < names.size() && i < values.size(); i++) {\n        if (row.containsKey(names.get(i))) {\n          Object existing = row.get(names.get(i));\n          if (existing instanceof List) {\n            List list = (List) existing;\n            list.add(values.get(i));\n          } else {\n            List list = new ArrayList();\n            list.add(existing);\n            list.add(values.get(i));\n            row.put(names.get(i), list);\n          }\n        } else {\n          row.put(names.get(i), values.get(i));\n        }\n      }\n      return row;\n    } else {\n      record.put(XPATH_FIELD_NAME, xpath);\n      return record;\n    }\n  }\n\n","sourceOld":"  private Map<String, Object> readRow(Map<String, Object> record, String xpath) {\n    if (useSolrAddXml) {\n      List<String> names = (List<String>) record.get(\"name\");\n      List<String> values = (List<String>) record.get(\"value\");\n      Map<String, Object> row = new HashMap<String, Object>();\n      for (int i = 0; i < names.size(); i++) {\n        if (row.containsKey(names.get(i))) {\n          Object existing = row.get(names.get(i));\n          if (existing instanceof List) {\n            List list = (List) existing;\n            list.add(values.get(i));\n          } else {\n            List list = new ArrayList();\n            list.add(existing);\n            list.add(values.get(i));\n            row.put(names.get(i), list);\n          }\n        } else {\n          row.put(names.get(i), values.get(i));\n        }\n      }\n      return row;\n    } else {\n      record.put(XPATH_FIELD_NAME, xpath);\n      return record;\n    }\n  }\n\n","bugFix":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b5d20090448d280035afb31f1fd2e67ff43336b","date":1258790174,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#readRow(Map[String,Object],String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#readRow(Map[String,Object],String).mjava","sourceNew":"  protected Map<String, Object> readRow(Map<String, Object> record, String xpath) {\n    if (useSolrAddXml) {\n      List<String> names = (List<String>) record.get(\"name\");\n      List<String> values = (List<String>) record.get(\"value\");\n      Map<String, Object> row = new HashMap<String, Object>();\n      for (int i = 0; i < names.size() && i < values.size(); i++) {\n        if (row.containsKey(names.get(i))) {\n          Object existing = row.get(names.get(i));\n          if (existing instanceof List) {\n            List list = (List) existing;\n            list.add(values.get(i));\n          } else {\n            List list = new ArrayList();\n            list.add(existing);\n            list.add(values.get(i));\n            row.put(names.get(i), list);\n          }\n        } else {\n          row.put(names.get(i), values.get(i));\n        }\n      }\n      return row;\n    } else {\n      record.put(XPATH_FIELD_NAME, xpath);\n      return record;\n    }\n  }\n\n","sourceOld":"  private Map<String, Object> readRow(Map<String, Object> record, String xpath) {\n    if (useSolrAddXml) {\n      List<String> names = (List<String>) record.get(\"name\");\n      List<String> values = (List<String>) record.get(\"value\");\n      Map<String, Object> row = new HashMap<String, Object>();\n      for (int i = 0; i < names.size() && i < values.size(); i++) {\n        if (row.containsKey(names.get(i))) {\n          Object existing = row.get(names.get(i));\n          if (existing instanceof List) {\n            List list = (List) existing;\n            list.add(values.get(i));\n          } else {\n            List list = new ArrayList();\n            list.add(existing);\n            list.add(values.get(i));\n            row.put(names.get(i), list);\n          }\n        } else {\n          row.put(names.get(i), values.get(i));\n        }\n      }\n      return row;\n    } else {\n      record.put(XPATH_FIELD_NAME, xpath);\n      return record;\n    }\n  }\n\n","bugFix":["d902f463d0a39aa9fc43326e245a5e5c94295d68"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#readRow(Map[String,Object],String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathEntityProcessor#readRow(Map[String,Object],String).mjava","sourceNew":"  protected Map<String, Object> readRow(Map<String, Object> record, String xpath) {\n    if (useSolrAddXml) {\n      List<String> names = (List<String>) record.get(\"name\");\n      List<String> values = (List<String>) record.get(\"value\");\n      Map<String, Object> row = new HashMap<String, Object>();\n      for (int i = 0; i < names.size() && i < values.size(); i++) {\n        if (row.containsKey(names.get(i))) {\n          Object existing = row.get(names.get(i));\n          if (existing instanceof List) {\n            List list = (List) existing;\n            list.add(values.get(i));\n          } else {\n            List list = new ArrayList();\n            list.add(existing);\n            list.add(values.get(i));\n            row.put(names.get(i), list);\n          }\n        } else {\n          row.put(names.get(i), values.get(i));\n        }\n      }\n      return row;\n    } else {\n      record.put(XPATH_FIELD_NAME, xpath);\n      return record;\n    }\n  }\n\n","sourceOld":"  protected Map<String, Object> readRow(Map<String, Object> record, String xpath) {\n    if (useSolrAddXml) {\n      List<String> names = (List<String>) record.get(\"name\");\n      List<String> values = (List<String>) record.get(\"value\");\n      Map<String, Object> row = new HashMap<String, Object>();\n      for (int i = 0; i < names.size() && i < values.size(); i++) {\n        if (row.containsKey(names.get(i))) {\n          Object existing = row.get(names.get(i));\n          if (existing instanceof List) {\n            List list = (List) existing;\n            list.add(values.get(i));\n          } else {\n            List list = new ArrayList();\n            list.add(existing);\n            list.add(values.get(i));\n            row.put(names.get(i), list);\n          }\n        } else {\n          row.put(names.get(i), values.get(i));\n        }\n      }\n      return row;\n    } else {\n      record.put(XPATH_FIELD_NAME, xpath);\n      return record;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":["d902f463d0a39aa9fc43326e245a5e5c94295d68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1b5d20090448d280035afb31f1fd2e67ff43336b":["800df3fbc871ee10f1781a4e8fa51e4ec808d9ba"],"ad94625fb8d088209f46650c8097196fec67f00c":["1b5d20090448d280035afb31f1fd2e67ff43336b"],"800df3fbc871ee10f1781a4e8fa51e4ec808d9ba":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d902f463d0a39aa9fc43326e245a5e5c94295d68":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":["800df3fbc871ee10f1781a4e8fa51e4ec808d9ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d902f463d0a39aa9fc43326e245a5e5c94295d68"],"1b5d20090448d280035afb31f1fd2e67ff43336b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"800df3fbc871ee10f1781a4e8fa51e4ec808d9ba":["1b5d20090448d280035afb31f1fd2e67ff43336b"],"d902f463d0a39aa9fc43326e245a5e5c94295d68":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}