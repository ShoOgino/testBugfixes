{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testUpperLowerArray().mjava","commits":[{"id":"35cc45f54fe95a5534e02f9b8ca2a54af211ded5","date":1564774706,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testUpperLowerArray().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpperLowerArray() throws Exception {\n    String expr = \" select(list(tuple(field1=array(\\\"a\\\",\\\"b\\\",\\\"c\\\"), field2=array(\\\"X\\\",\\\"Y\\\",\\\"Z\\\"))), upper(field1) as field3, lower(field2) as field4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    List<String> l1 = (List<String>)tuples.get(0).get(\"field3\");\n    assertEquals(l1.get(0), \"A\");\n    assertEquals(l1.get(1), \"B\");\n    assertEquals(l1.get(2), \"C\");\n\n    List<String> l2 = (List<String>)tuples.get(0).get(\"field4\");\n    assertEquals(l2.get(0), \"x\");\n    assertEquals(l2.get(1), \"y\");\n    assertEquals(l2.get(2), \"z\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":0,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testUpperLowerArray().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpperLowerArray() throws Exception {\n    String expr = \" select(list(tuple(field1=array(\\\"a\\\",\\\"b\\\",\\\"c\\\"), field2=array(\\\"X\\\",\\\"Y\\\",\\\"Z\\\"))), upper(field1) as field3, lower(field2) as field4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    List<String> l1 = (List<String>)tuples.get(0).get(\"field3\");\n    assertEquals(l1.get(0), \"A\");\n    assertEquals(l1.get(1), \"B\");\n    assertEquals(l1.get(2), \"C\");\n\n    List<String> l2 = (List<String>)tuples.get(0).get(\"field4\");\n    assertEquals(l2.get(0), \"x\");\n    assertEquals(l2.get(1), \"y\");\n    assertEquals(l2.get(2), \"z\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":0,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testUpperLowerArray().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpperLowerArray() throws Exception {\n    String expr = \" select(list(tuple(field1=array(\\\"a\\\",\\\"b\\\",\\\"c\\\"), field2=array(\\\"X\\\",\\\"Y\\\",\\\"Z\\\"))), upper(field1) as field3, lower(field2) as field4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    List<String> l1 = (List<String>)tuples.get(0).get(\"field3\");\n    assertEquals(l1.get(0), \"A\");\n    assertEquals(l1.get(1), \"B\");\n    assertEquals(l1.get(2), \"C\");\n\n    List<String> l2 = (List<String>)tuples.get(0).get(\"field4\");\n    assertEquals(l2.get(0), \"x\");\n    assertEquals(l2.get(1), \"y\");\n    assertEquals(l2.get(2), \"z\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testUpperLowerArray().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testUpperLowerArray().mjava","sourceNew":"  @Test\n  public void testUpperLowerArray() throws Exception {\n    String expr = \" select(list(tuple(field1=array(\\\"a\\\",\\\"b\\\",\\\"c\\\"), field2=array(\\\"X\\\",\\\"Y\\\",\\\"Z\\\"))), upper(field1) as field3, lower(field2) as field4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    @SuppressWarnings({\"unchecked\"})\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    @SuppressWarnings({\"unchecked\"})\n    List<String> l1 = (List<String>)tuples.get(0).get(\"field3\");\n    assertEquals(l1.get(0), \"A\");\n    assertEquals(l1.get(1), \"B\");\n    assertEquals(l1.get(2), \"C\");\n\n    @SuppressWarnings({\"unchecked\"})\n    List<String> l2 = (List<String>)tuples.get(0).get(\"field4\");\n    assertEquals(l2.get(0), \"x\");\n    assertEquals(l2.get(1), \"y\");\n    assertEquals(l2.get(2), \"z\");\n  }\n\n","sourceOld":"  @Test\n  public void testUpperLowerArray() throws Exception {\n    String expr = \" select(list(tuple(field1=array(\\\"a\\\",\\\"b\\\",\\\"c\\\"), field2=array(\\\"X\\\",\\\"Y\\\",\\\"Z\\\"))), upper(field1) as field3, lower(field2) as field4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    List<String> l1 = (List<String>)tuples.get(0).get(\"field3\");\n    assertEquals(l1.get(0), \"A\");\n    assertEquals(l1.get(1), \"B\");\n    assertEquals(l1.get(2), \"C\");\n\n    List<String> l2 = (List<String>)tuples.get(0).get(\"field4\");\n    assertEquals(l2.get(0), \"x\");\n    assertEquals(l2.get(1), \"y\");\n    assertEquals(l2.get(2), \"z\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","35cc45f54fe95a5534e02f9b8ca2a54af211ded5","f8061ddd97f3352007d927dae445884a6f3d857b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["9ba1b632c041956c93c41aa1143d16a567014891","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}