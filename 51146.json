{"path":"modules/spatial/src/java/org/apache/lucene/spatial/base/shape/simple/GeoCircleImpl#relateRectanglePhase2(Rectangle,SpatialRelation,SpatialContext).mjava","commits":[{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/base/shape/simple/GeoCircleImpl#relateRectanglePhase2(Rectangle,SpatialRelation,SpatialContext).mjava","pathOld":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/shape/simple/GeoCircleImpl#relateRectanglePhase2(Rectangle,SpatialRelation,SpatialContext).mjava","sourceNew":"  /**\n   * Called after bounding box is intersected.\n   * @bboxSect INTERSECTS or CONTAINS from enclosingBox's intersection\n   * @result DISJOINT, CONTAINS, or INTERSECTS (not WITHIN)\n   */\n  @Override\n  protected SpatialRelation relateRectanglePhase2(Rectangle r, SpatialRelation bboxSect, SpatialContext ctx) {\n\n    //Rectangle wraps around the world longitudinally creating a solid band; there are no corners to test intersection\n    if (r.getWidth() == 360) {\n      return SpatialRelation.INTERSECTS;\n    }\n\n    if (inverseCircle != null) {\n      return inverseCircle.relate(r, ctx).inverse();\n    }\n\n    //if a pole is wrapped, we have a separate algorithm\n    if (enclosingBox.getWidth() == 360) {\n      return relateRectangleCircleWrapsPole(r, ctx);\n    }\n\n    //This is an optimization path for when there are no dateline or pole issues.\n    if (!enclosingBox.getCrossesDateLine() && !r.getCrossesDateLine()) {\n      return super.relateRectanglePhase2(r, bboxSect, ctx);\n    }\n\n    //do quick check to see if all corners are within this circle for CONTAINS\n    int cornersIntersect = numCornersIntersect(r);\n    if (cornersIntersect == 4) {\n      //ensure r's x axis is within c's.  If it doesn't, r sneaks around the globe to touch the other side (intersect).\n      SpatialRelation xIntersect = r.relate_xRange(enclosingBox.getMinX(), enclosingBox.getMaxX(), ctx);\n      if (xIntersect == SpatialRelation.WITHIN)\n        return SpatialRelation.CONTAINS;\n      return SpatialRelation.INTERSECTS;\n    }\n\n    //INTERSECT or DISJOINT ?\n    if (cornersIntersect > 0)\n      return SpatialRelation.INTERSECTS;\n\n    //Now we check if one of the axis of the circle intersect with r.  If so we have\n    // intersection.\n\n    /* x axis intersects  */\n    if ( r.relate_yRange(getYAxis(), getYAxis(), ctx).intersects() // at y vertical\n          && r.relate_xRange(enclosingBox.getMinX(), enclosingBox.getMaxX(), ctx).intersects() )\n      return SpatialRelation.INTERSECTS;\n\n    /* y axis intersects */\n    if (r.relate_xRange(getXAxis(), getXAxis(), ctx).intersects()) { // at x horizontal\n      double yTop = getCenter().getY()+ distDEG;\n      assert yTop <= 90;\n      double yBot = getCenter().getY()- distDEG;\n      assert yBot >= -90;\n      if (r.relate_yRange(yBot, yTop, ctx).intersects())//back bottom\n        return SpatialRelation.INTERSECTS;\n    }\n\n    return SpatialRelation.DISJOINT;\n  }\n\n","sourceOld":"  /**\n   * Called after bounding box is intersected.\n   * @bboxSect INTERSECTS or CONTAINS from enclosingBox's intersection\n   * @result DISJOINT, CONTAINS, or INTERSECTS (not WITHIN)\n   */\n  @Override\n  protected SpatialRelation relateRectanglePhase2(Rectangle r, SpatialRelation bboxSect, SpatialContext ctx) {\n\n    //Rectangle wraps around the world longitudinally creating a solid band; there are no corners to test intersection\n    if (r.getWidth() == 360) {\n      return SpatialRelation.INTERSECTS;\n    }\n\n    if (inverseCircle != null) {\n      return inverseCircle.relate(r, ctx).inverse();\n    }\n\n    //if a pole is wrapped, we have a separate algorithm\n    if (enclosingBox.getWidth() == 360) {\n      return relateRectangleCircleWrapsPole(r, ctx);\n    }\n\n    //This is an optimization path for when there are no dateline or pole issues.\n    if (!enclosingBox.getCrossesDateLine() && !r.getCrossesDateLine()) {\n      return super.relateRectanglePhase2(r, bboxSect, ctx);\n    }\n\n    //do quick check to see if all corners are within this circle for CONTAINS\n    int cornersIntersect = numCornersIntersect(r);\n    if (cornersIntersect == 4) {\n      //ensure r's x axis is within c's.  If it doesn't, r sneaks around the globe to touch the other side (intersect).\n      SpatialRelation xIntersect = r.relate_xRange(enclosingBox.getMinX(), enclosingBox.getMaxX(), ctx);\n      if (xIntersect == SpatialRelation.WITHIN)\n        return SpatialRelation.CONTAINS;\n      return SpatialRelation.INTERSECTS;\n    }\n\n    //INTERSECT or DISJOINT ?\n    if (cornersIntersect > 0)\n      return SpatialRelation.INTERSECTS;\n\n    //Now we check if one of the axis of the circle intersect with r.  If so we have\n    // intersection.\n\n    /* x axis intersects  */\n    if ( r.relate_yRange(getYAxis(), getYAxis(), ctx).intersects() // at y vertical\n          && r.relate_xRange(enclosingBox.getMinX(), enclosingBox.getMaxX(), ctx).intersects() )\n      return SpatialRelation.INTERSECTS;\n\n    /* y axis intersects */\n    if (r.relate_xRange(getXAxis(), getXAxis(), ctx).intersects()) { // at x horizontal\n      double yTop = getCenter().getY()+ distDEG;\n      assert yTop <= 90;\n      double yBot = getCenter().getY()- distDEG;\n      assert yBot >= -90;\n      if (r.relate_yRange(yBot, yTop, ctx).intersects())//back bottom\n        return SpatialRelation.INTERSECTS;\n    }\n\n    return SpatialRelation.DISJOINT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ee89d976c91275e5be5da438ca0977b1c5b90f","date":1329808149,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial-TEMP/src/java/org/apache/lucene/spatial/base/shape/simple/GeoCircleImpl#relateRectanglePhase2(Rectangle,SpatialRelation,SpatialContext).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/base/shape/simple/GeoCircleImpl#relateRectanglePhase2(Rectangle,SpatialRelation,SpatialContext).mjava","sourceNew":"  /**\n   * Called after bounding box is intersected.\n   * @bboxSect INTERSECTS or CONTAINS from enclosingBox's intersection\n   * @result DISJOINT, CONTAINS, or INTERSECTS (not WITHIN)\n   */\n  @Override\n  protected SpatialRelation relateRectanglePhase2(Rectangle r, SpatialRelation bboxSect, SpatialContext ctx) {\n\n    //Rectangle wraps around the world longitudinally creating a solid band; there are no corners to test intersection\n    if (r.getWidth() == 360) {\n      return SpatialRelation.INTERSECTS;\n    }\n\n    if (inverseCircle != null) {\n      return inverseCircle.relate(r, ctx).inverse();\n    }\n\n    //if a pole is wrapped, we have a separate algorithm\n    if (enclosingBox.getWidth() == 360) {\n      return relateRectangleCircleWrapsPole(r, ctx);\n    }\n\n    //This is an optimization path for when there are no dateline or pole issues.\n    if (!enclosingBox.getCrossesDateLine() && !r.getCrossesDateLine()) {\n      return super.relateRectanglePhase2(r, bboxSect, ctx);\n    }\n\n    //do quick check to see if all corners are within this circle for CONTAINS\n    int cornersIntersect = numCornersIntersect(r);\n    if (cornersIntersect == 4) {\n      //ensure r's x axis is within c's.  If it doesn't, r sneaks around the globe to touch the other side (intersect).\n      SpatialRelation xIntersect = r.relate_xRange(enclosingBox.getMinX(), enclosingBox.getMaxX(), ctx);\n      if (xIntersect == SpatialRelation.WITHIN)\n        return SpatialRelation.CONTAINS;\n      return SpatialRelation.INTERSECTS;\n    }\n\n    //INTERSECT or DISJOINT ?\n    if (cornersIntersect > 0)\n      return SpatialRelation.INTERSECTS;\n\n    //Now we check if one of the axis of the circle intersect with r.  If so we have\n    // intersection.\n\n    /* x axis intersects  */\n    if ( r.relate_yRange(getYAxis(), getYAxis(), ctx).intersects() // at y vertical\n          && r.relate_xRange(enclosingBox.getMinX(), enclosingBox.getMaxX(), ctx).intersects() )\n      return SpatialRelation.INTERSECTS;\n\n    /* y axis intersects */\n    if (r.relate_xRange(getXAxis(), getXAxis(), ctx).intersects()) { // at x horizontal\n      double yTop = getCenter().getY()+ distDEG;\n      assert yTop <= 90;\n      double yBot = getCenter().getY()- distDEG;\n      assert yBot >= -90;\n      if (r.relate_yRange(yBot, yTop, ctx).intersects())//back bottom\n        return SpatialRelation.INTERSECTS;\n    }\n\n    return SpatialRelation.DISJOINT;\n  }\n\n","sourceOld":"  /**\n   * Called after bounding box is intersected.\n   * @bboxSect INTERSECTS or CONTAINS from enclosingBox's intersection\n   * @result DISJOINT, CONTAINS, or INTERSECTS (not WITHIN)\n   */\n  @Override\n  protected SpatialRelation relateRectanglePhase2(Rectangle r, SpatialRelation bboxSect, SpatialContext ctx) {\n\n    //Rectangle wraps around the world longitudinally creating a solid band; there are no corners to test intersection\n    if (r.getWidth() == 360) {\n      return SpatialRelation.INTERSECTS;\n    }\n\n    if (inverseCircle != null) {\n      return inverseCircle.relate(r, ctx).inverse();\n    }\n\n    //if a pole is wrapped, we have a separate algorithm\n    if (enclosingBox.getWidth() == 360) {\n      return relateRectangleCircleWrapsPole(r, ctx);\n    }\n\n    //This is an optimization path for when there are no dateline or pole issues.\n    if (!enclosingBox.getCrossesDateLine() && !r.getCrossesDateLine()) {\n      return super.relateRectanglePhase2(r, bboxSect, ctx);\n    }\n\n    //do quick check to see if all corners are within this circle for CONTAINS\n    int cornersIntersect = numCornersIntersect(r);\n    if (cornersIntersect == 4) {\n      //ensure r's x axis is within c's.  If it doesn't, r sneaks around the globe to touch the other side (intersect).\n      SpatialRelation xIntersect = r.relate_xRange(enclosingBox.getMinX(), enclosingBox.getMaxX(), ctx);\n      if (xIntersect == SpatialRelation.WITHIN)\n        return SpatialRelation.CONTAINS;\n      return SpatialRelation.INTERSECTS;\n    }\n\n    //INTERSECT or DISJOINT ?\n    if (cornersIntersect > 0)\n      return SpatialRelation.INTERSECTS;\n\n    //Now we check if one of the axis of the circle intersect with r.  If so we have\n    // intersection.\n\n    /* x axis intersects  */\n    if ( r.relate_yRange(getYAxis(), getYAxis(), ctx).intersects() // at y vertical\n          && r.relate_xRange(enclosingBox.getMinX(), enclosingBox.getMaxX(), ctx).intersects() )\n      return SpatialRelation.INTERSECTS;\n\n    /* y axis intersects */\n    if (r.relate_xRange(getXAxis(), getXAxis(), ctx).intersects()) { // at x horizontal\n      double yTop = getCenter().getY()+ distDEG;\n      assert yTop <= 90;\n      double yBot = getCenter().getY()- distDEG;\n      assert yBot >= -90;\n      if (r.relate_yRange(yBot, yTop, ctx).intersects())//back bottom\n        return SpatialRelation.INTERSECTS;\n    }\n\n    return SpatialRelation.DISJOINT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33ee89d976c91275e5be5da438ca0977b1c5b90f":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["33ee89d976c91275e5be5da438ca0977b1c5b90f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33ee89d976c91275e5be5da438ca0977b1c5b90f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["33ee89d976c91275e5be5da438ca0977b1c5b90f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}