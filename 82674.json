{"path":"lucene/core/src/test/org/apache/lucene/index/TestCustomTermFreq#testOverflowInt().mjava","commits":[{"id":"e72e3ade782716457071fee4033f18689acc4c4f","date":1496770651,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomTermFreq#testOverflowInt().mjava","pathOld":"/dev/null","sourceNew":"  // sum of term freqs must fit in an int\n  public void testOverflowInt() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    FieldType fieldType = new FieldType(TextField.TYPE_NOT_STORED);\n    fieldType.setIndexOptions(IndexOptions.DOCS);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"this field should be indexed\", fieldType));\n    w.addDocument(doc);\n\n    Document doc2 = new Document();\n    Field field = new Field(\"field\",\n                            new CannedTermFreqs(new String[] {\"foo\", \"bar\"},\n                                                new int[] {3, Integer.MAX_VALUE}),\n                            fieldType);\n    doc2.add(field);\n    expectThrows(ArithmeticException.class, () -> {w.addDocument(doc2);});\n\n    IndexReader r = DirectoryReader.open(w);\n    assertEquals(1, r.numDocs());\n\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d6a8624f79f6c119e91fd7c88895145bc6e65cf","date":1496864636,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomTermFreq#testOverflowInt().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomTermFreq#testOverflowInt().mjava","sourceNew":"  // sum of term freqs must fit in an int\n  public void testOverflowInt() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    FieldType fieldType = new FieldType(TextField.TYPE_NOT_STORED);\n    fieldType.setIndexOptions(IndexOptions.DOCS);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"this field should be indexed\", fieldType));\n    w.addDocument(doc);\n\n    Document doc2 = new Document();\n    Field field = new Field(\"field\",\n                            new CannedTermFreqs(new String[] {\"foo\", \"bar\"},\n                                                new int[] {3, Integer.MAX_VALUE}),\n                            fieldType);\n    doc2.add(field);\n    expectThrows(IllegalArgumentException.class, () -> {w.addDocument(doc2);});\n\n    IndexReader r = DirectoryReader.open(w);\n    assertEquals(1, r.numDocs());\n\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  // sum of term freqs must fit in an int\n  public void testOverflowInt() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    FieldType fieldType = new FieldType(TextField.TYPE_NOT_STORED);\n    fieldType.setIndexOptions(IndexOptions.DOCS);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"this field should be indexed\", fieldType));\n    w.addDocument(doc);\n\n    Document doc2 = new Document();\n    Field field = new Field(\"field\",\n                            new CannedTermFreqs(new String[] {\"foo\", \"bar\"},\n                                                new int[] {3, Integer.MAX_VALUE}),\n                            fieldType);\n    doc2.add(field);\n    expectThrows(ArithmeticException.class, () -> {w.addDocument(doc2);});\n\n    IndexReader r = DirectoryReader.open(w);\n    assertEquals(1, r.numDocs());\n\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomTermFreq#testOverflowInt().mjava","pathOld":"/dev/null","sourceNew":"  // sum of term freqs must fit in an int\n  public void testOverflowInt() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    FieldType fieldType = new FieldType(TextField.TYPE_NOT_STORED);\n    fieldType.setIndexOptions(IndexOptions.DOCS);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"this field should be indexed\", fieldType));\n    w.addDocument(doc);\n\n    Document doc2 = new Document();\n    Field field = new Field(\"field\",\n                            new CannedTermFreqs(new String[] {\"foo\", \"bar\"},\n                                                new int[] {3, Integer.MAX_VALUE}),\n                            fieldType);\n    doc2.add(field);\n    expectThrows(IllegalArgumentException.class, () -> {w.addDocument(doc2);});\n\n    IndexReader r = DirectoryReader.open(w);\n    assertEquals(1, r.numDocs());\n\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomTermFreq#testOverflowInt().mjava","pathOld":"/dev/null","sourceNew":"  // sum of term freqs must fit in an int\n  public void testOverflowInt() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    FieldType fieldType = new FieldType(TextField.TYPE_NOT_STORED);\n    fieldType.setIndexOptions(IndexOptions.DOCS);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"this field should be indexed\", fieldType));\n    w.addDocument(doc);\n\n    Document doc2 = new Document();\n    Field field = new Field(\"field\",\n                            new CannedTermFreqs(new String[] {\"foo\", \"bar\"},\n                                                new int[] {3, Integer.MAX_VALUE}),\n                            fieldType);\n    doc2.add(field);\n    expectThrows(IllegalArgumentException.class, () -> {w.addDocument(doc2);});\n\n    IndexReader r = DirectoryReader.open(w);\n    assertEquals(1, r.numDocs());\n\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomTermFreq#testOverflowInt().mjava","pathOld":"/dev/null","sourceNew":"  // sum of term freqs must fit in an int\n  public void testOverflowInt() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n\n    FieldType fieldType = new FieldType(TextField.TYPE_NOT_STORED);\n    fieldType.setIndexOptions(IndexOptions.DOCS);\n    \n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"this field should be indexed\", fieldType));\n    w.addDocument(doc);\n\n    Document doc2 = new Document();\n    Field field = new Field(\"field\",\n                            new CannedTermFreqs(new String[] {\"foo\", \"bar\"},\n                                                new int[] {3, Integer.MAX_VALUE}),\n                            fieldType);\n    doc2.add(field);\n    expectThrows(IllegalArgumentException.class, () -> {w.addDocument(doc2);});\n\n    IndexReader r = DirectoryReader.open(w);\n    assertEquals(1, r.numDocs());\n\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e72e3ade782716457071fee4033f18689acc4c4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d6a8624f79f6c119e91fd7c88895145bc6e65cf":["e72e3ade782716457071fee4033f18689acc4c4f"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1d6a8624f79f6c119e91fd7c88895145bc6e65cf"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"e72e3ade782716457071fee4033f18689acc4c4f":["1d6a8624f79f6c119e91fd7c88895145bc6e65cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e72e3ade782716457071fee4033f18689acc4c4f","f344bb33ca91f48e99c061980115b46fa84fc8f5","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"1d6a8624f79f6c119e91fd7c88895145bc6e65cf":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}